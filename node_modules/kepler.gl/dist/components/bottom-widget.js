"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FilterAnimationControllerFactory = FilterAnimationControllerFactory;
exports.LayerAnimationControllerFactory = LayerAnimationControllerFactory;
exports["default"] = BottomWidgetFactory;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _timeWidget = _interopRequireDefault(require("./filters/time-widget"));

var _animationControl = _interopRequireDefault(require("./common/animation-control/animation-control"));

var _animationController = _interopRequireDefault(require("./common/animation-control/animation-controller"));

var _defaultSettings = require("../constants/default-settings");

var _filterUtils = require("../utils/filter-utils");

var _mediaBreakpoints = require("../styles/media-breakpoints");

var _templateObject, _templateObject2;

var maxWidth = 1080;

var BottomWidgetContainer = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: column;\n  padding-top: ", "px;\n  padding-right: ", "px;\n  padding-bottom: ", "px;\n  padding-left: ", "px;\n  pointer-events: none !important; /* prevent padding from blocking input */\n  & > * {\n    /* all children should allow input */\n    pointer-events: all;\n  }\n  width: ", "px;\n  z-index: 1;\n  ", "\n"])), function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingTop : 0;
}, function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingRight : 0;
}, function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingBottom : 0;
}, function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingLeft : 0;
}, function (props) {
  return props.width;
}, _mediaBreakpoints.media.portable(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["padding: 0;"]))));

FilterAnimationControllerFactory.deps = [_animationController["default"]];

function FilterAnimationControllerFactory(AnimationController) {
  var FilterAnimationController = function FilterAnimationController(_ref) {
    var filter = _ref.filter,
        filterIdx = _ref.filterIdx,
        setFilterAnimationTime = _ref.setFilterAnimationTime,
        children = _ref.children;
    var intervalBins = (0, _react.useMemo)(function () {
      return (0, _filterUtils.getIntervalBins)(filter);
    }, [filter]);
    var steps = (0, _react.useMemo)(function () {
      return intervalBins ? intervalBins.map(function (x) {
        return x.x0;
      }) : null;
    }, [intervalBins]);
    var updateAnimation = (0, _react.useCallback)(function (value) {
      switch (filter.animationWindow) {
        case _defaultSettings.ANIMATION_WINDOW.interval:
          var idx = value[1];
          setFilterAnimationTime(filterIdx, 'value', [intervalBins[idx].x0, intervalBins[idx].x1 - 1]);
          break;

        default:
          setFilterAnimationTime(filterIdx, 'value', value);
          break;
      }
    }, [filterIdx, intervalBins, filter.animationWindow, setFilterAnimationTime]);
    return /*#__PURE__*/_react["default"].createElement(AnimationController, {
      key: "filter-control",
      value: filter.value,
      domain: filter.domain,
      speed: filter.speed,
      isAnimating: filter.isAnimating,
      animationWindow: filter.animationWindow,
      steps: steps,
      updateAnimation: updateAnimation,
      children: children
    });
  };

  return FilterAnimationController;
}

LayerAnimationControllerFactory.deps = [_animationController["default"]];

function LayerAnimationControllerFactory(AnimationController) {
  var LayerAnimationController = function LayerAnimationController(_ref2) {
    var animationConfig = _ref2.animationConfig,
        setLayerAnimationTime = _ref2.setLayerAnimationTime,
        children = _ref2.children;
    return /*#__PURE__*/_react["default"].createElement(AnimationController, {
      key: "layer-control",
      value: animationConfig.currentTime,
      domain: animationConfig.domain,
      speed: animationConfig.speed,
      isAnimating: animationConfig.isAnimating,
      updateAnimation: setLayerAnimationTime,
      steps: animationConfig.timeSteps,
      animationWindow: animationConfig.timeSteps ? _defaultSettings.ANIMATION_WINDOW.interval : _defaultSettings.ANIMATION_WINDOW.point,
      children: children
    });
  };

  return LayerAnimationController;
}

BottomWidgetFactory.deps = [_timeWidget["default"], _animationControl["default"], FilterAnimationControllerFactory, LayerAnimationControllerFactory];
/* eslint-disable complexity */

function BottomWidgetFactory(TimeWidget, AnimationControl, FilterAnimationController, LayerAnimationController) {
  var BottomWidget = function BottomWidget(props) {
    var datasets = props.datasets,
        filters = props.filters,
        animationConfig = props.animationConfig,
        visStateActions = props.visStateActions,
        containerW = props.containerW,
        uiState = props.uiState,
        sidePanelWidth = props.sidePanelWidth,
        layers = props.layers;
    var activeSidePanel = uiState.activeSidePanel,
        readOnly = uiState.readOnly;
    var isOpen = Boolean(activeSidePanel);
    var enlargedFilterIdx = (0, _react.useMemo)(function () {
      return filters.findIndex(function (f) {
        return f.enlarged && f.type === _defaultSettings.FILTER_TYPES.timeRange;
      });
    }, [filters]);
    var animatedFilterIdx = (0, _react.useMemo)(function () {
      return filters.findIndex(function (f) {
        return f.isAnimating;
      });
    }, [filters]);
    var animatedFilter = animatedFilterIdx > -1 ? filters[animatedFilterIdx] : null;
    var enlargedFilterWidth = isOpen ? containerW - sidePanelWidth : containerW; // show playback control if layers contain trip layer & at least one trip layer is visible

    var animatableLayer = (0, _react.useMemo)(function () {
      return layers.filter(function (l) {
        return l.config.animation && l.config.animation.enabled && l.config.isVisible;
      });
    }, [layers]);
    var readyToAnimation = Array.isArray(animationConfig.domain) && Number.isFinite(animationConfig.currentTime); // if animation control is showing, hide time display in time slider

    var showFloatingTimeDisplay = !animatableLayer.length;
    var showAnimationControl = animatableLayer.length && readyToAnimation && !animationConfig.hideControl;
    var showTimeWidget = enlargedFilterIdx > -1 && Object.keys(datasets).length > 0; // if filter is not animating, pass in enlarged filter here because
    // animation controller needs to call reset on it

    var filter = animatedFilter || filters[enlargedFilterIdx];
    return /*#__PURE__*/_react["default"].createElement(BottomWidgetContainer, {
      width: Math.min(maxWidth, enlargedFilterWidth),
      className: "bottom-widget--container",
      hasPadding: showAnimationControl || showTimeWidget
    }, /*#__PURE__*/_react["default"].createElement(LayerAnimationController, {
      animationConfig: animationConfig,
      setLayerAnimationTime: visStateActions.setLayerAnimationTime
    }, function (isAnimating, start, pause, reset) {
      return showAnimationControl ? /*#__PURE__*/_react["default"].createElement(AnimationControl, {
        animationConfig: animationConfig,
        setLayerAnimationTime: visStateActions.setLayerAnimationTime,
        updateAnimationSpeed: visStateActions.updateLayerAnimationSpeed,
        toggleAnimation: visStateActions.toggleLayerAnimation,
        isAnimatable: !animatedFilter,
        isAnimating: isAnimating,
        resetAnimation: reset
      }) : null;
    }), filter && /*#__PURE__*/_react["default"].createElement(FilterAnimationController, {
      filter: filter,
      filterIdx: animatedFilterIdx > -1 ? animatedFilterIdx : enlargedFilterIdx,
      setFilterAnimationTime: visStateActions.setFilterAnimationTime
    }, function (isAnimating, start, pause, resetAnimation) {
      return showTimeWidget ? /*#__PURE__*/_react["default"].createElement(TimeWidget // TimeWidget uses React.memo, here we pass width
      // even though it doesnt use it, to force rerender
      , {
        width: enlargedFilterWidth,
        filter: filters[enlargedFilterIdx],
        index: enlargedFilterIdx,
        isAnyFilterAnimating: Boolean(animatedFilter),
        datasets: datasets,
        readOnly: readOnly,
        showTimeDisplay: showFloatingTimeDisplay,
        setFilterPlot: visStateActions.setFilterPlot,
        setFilter: visStateActions.setFilter,
        setFilterAnimationTime: visStateActions.setFilterAnimationTime,
        setFilterAnimationWindow: visStateActions.setFilterAnimationWindow,
        toggleAnimation: visStateActions.toggleFilterAnimation,
        updateAnimationSpeed: visStateActions.updateFilterAnimationSpeed,
        enlargeFilter: visStateActions.enlargeFilter,
        resetAnimation: resetAnimation,
        isAnimatable: !animationConfig || !animationConfig.isAnimating
      }) : null;
    }));
  };
  /* eslint-disable react/display-name */
  // @ts-ignore


  return /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
    return /*#__PURE__*/_react["default"].createElement(BottomWidget, (0, _extends2["default"])({}, props, {
      rootRef: ref
    }));
  });
  /* eslint-enable react/display-name */
}
/* eslint-enable complexity */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,