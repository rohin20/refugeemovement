"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _icons = require("../common/icons");

var _localization = require("../../localization");

var _styledComponents = require("../common/styled-components");

var _mapControlTooltip = _interopRequireDefault(require("./map-control-tooltip"));

var _mapControlPanel = _interopRequireDefault(require("./map-control-panel"));

var _mapLegend = _interopRequireDefault(require("./map-legend"));

// Copyright (c) 2021 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
var MapLegendTooltip = function MapLegendTooltip(_ref) {
  var id = _ref.id,
      message = _ref.message;
  return /*#__PURE__*/_react["default"].createElement(_styledComponents.Tooltip, {
    id: id,
    place: "left",
    effect: "solid"
  }, /*#__PURE__*/_react["default"].createElement("span", null, /*#__PURE__*/_react["default"].createElement(_localization.FormattedMessage, {
    id: message
  })));
};

MapLegendPanelFactory.deps = [_mapControlTooltip["default"], _mapControlPanel["default"], _mapLegend["default"]];

function MapLegendPanelFactory(MapControlTooltip, MapControlPanel, MapLegend) {
  var defaultActionIcons = {
    legend: _icons.Legend
  };
  /** @type {import('./map-legend-panel').MapLegendPanelComponent} */

  var MapLegendPanel = function MapLegendPanel(_ref2) {
    var layers = _ref2.layers,
        mapControls = _ref2.mapControls,
        scale = _ref2.scale,
        onToggleMapControl = _ref2.onToggleMapControl,
        isExport = _ref2.isExport,
        logoComponent = _ref2.logoComponent,
        _ref2$actionIcons = _ref2.actionIcons,
        actionIcons = _ref2$actionIcons === void 0 ? defaultActionIcons : _ref2$actionIcons;
    var mapLegend = (mapControls === null || mapControls === void 0 ? void 0 : mapControls.mapLegend) || {};

    var _ref3 = mapLegend || {},
        isActive = _ref3.active,
        disableClose = _ref3.disableClose;

    var onToggleMenuPanel = (0, _react.useCallback)(function () {
      return onToggleMapControl('mapLegend');
    }, [onToggleMapControl]);
    var onClick = (0, _react.useCallback)(function (e) {
      e.preventDefault();
      onToggleMenuPanel();
    }, [onToggleMenuPanel]);

    if (!mapLegend.show) {
      return null;
    }

    return !isActive ? /*#__PURE__*/_react["default"].createElement(_styledComponents.MapControlButton, {
      "data-tip": true,
      "data-for": "show-legend",
      className: (0, _classnames["default"])('map-control-button', 'show-legend', {
        isActive: isActive
      }),
      onClick: onClick
    }, /*#__PURE__*/_react["default"].createElement(actionIcons.legend, {
      height: "22px"
    }), /*#__PURE__*/_react["default"].createElement(MapLegendTooltip, {
      id: "show-legend",
      message: 'tooltip.showLegend'
    })) : /*#__PURE__*/_react["default"].createElement(MapControlPanel, {
      scale: scale,
      header: 'header.layerLegend',
      onClick: onToggleMenuPanel,
      isExport: isExport,
      disableClose: disableClose,
      logoComponent: logoComponent
    }, /*#__PURE__*/_react["default"].createElement(MapLegend, {
      layers: layers
    }));
  };

  MapLegendPanel.displayName = 'MapLegendPanel';
  return MapLegendPanel;
}

var _default = MapLegendPanelFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,