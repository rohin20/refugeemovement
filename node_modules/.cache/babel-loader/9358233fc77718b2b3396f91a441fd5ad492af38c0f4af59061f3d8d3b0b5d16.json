{"ast":null,"code":"import _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, phongLighting, picking, log } from '@deck.gl/core';\nimport { Model, Geometry, Texture2D, isWebGL2 } from '@luma.gl/core';\nimport { hasFeature, FEATURES } from '@luma.gl/webgl';\nimport { MATRIX_ATTRIBUTES, shouldComposeModelMatrix } from '../utils/matrix';\nimport vs from './simple-mesh-layer-vertex.glsl';\nimport fs from './simple-mesh-layer-fragment.glsl';\nfunction validateGeometryAttributes(attributes, useMeshColors) {\n  var hasColorAttribute = attributes.COLOR_0 || attributes.colors;\n  var useColorAttribute = hasColorAttribute && useMeshColors;\n  if (!useColorAttribute) {\n    attributes.colors = {\n      constant: true,\n      value: new Float32Array([1, 1, 1])\n    };\n  }\n  log.assert(attributes.positions || attributes.POSITION, 'no \"postions\" or \"POSITION\" attribute in mesh');\n}\nfunction getGeometry(data, useMeshColors) {\n  if (data.attributes) {\n    validateGeometryAttributes(data.attributes, useMeshColors);\n    if (data instanceof Geometry) {\n      return data;\n    } else {\n      return new Geometry(data);\n    }\n  } else if (data.positions || data.POSITION) {\n    validateGeometryAttributes(data, useMeshColors);\n    return new Geometry({\n      attributes: data\n    });\n  }\n  throw Error('Invalid mesh');\n}\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  mesh: {\n    type: 'object',\n    value: null,\n    async: true\n  },\n  texture: {\n    type: 'image',\n    value: null,\n    async: true\n  },\n  sizeScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  _useMeshColors: {\n    type: 'boolean',\n    value: false\n  },\n  _instanced: true,\n  wireframe: false,\n  material: true,\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getOrientation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getScale: {\n    type: 'accessor',\n    value: [1, 1, 1]\n  },\n  getTranslation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getTransformMatrix: {\n    type: 'accessor',\n    value: []\n  }\n};\nvar SimpleMeshLayer = /*#__PURE__*/function (_Layer) {\n  _inherits(SimpleMeshLayer, _Layer);\n  var _super = _createSuper(SimpleMeshLayer);\n  function SimpleMeshLayer() {\n    var _this;\n    _classCallCheck(this, SimpleMeshLayer);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"state\", void 0);\n    return _this;\n  }\n  _createClass(SimpleMeshLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      var transpileToGLSL100 = !isWebGL2(this.context.gl);\n      var defines = {};\n      if (hasFeature(this.context.gl, FEATURES.GLSL_DERIVATIVES)) {\n        defines.DERIVATIVES_AVAILABLE = 1;\n      }\n      return _get(_getPrototypeOf(SimpleMeshLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, phongLighting, picking],\n        transpileToGLSL100: transpileToGLSL100,\n        defines: defines\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        instancePositions: {\n          transition: true,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          size: 3,\n          accessor: 'getPosition'\n        },\n        instanceColors: {\n          type: 5121,\n          transition: true,\n          size: this.props.colorFormat.length,\n          normalized: true,\n          accessor: 'getColor',\n          defaultValue: [0, 0, 0, 255]\n        },\n        instanceModelMatrix: MATRIX_ATTRIBUTES\n      });\n      this.setState({\n        emptyTexture: new Texture2D(this.context.gl, {\n          data: new Uint8Array(4),\n          width: 1,\n          height: 1\n        })\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(params) {\n      _get(_getPrototypeOf(SimpleMeshLayer.prototype), \"updateState\", this).call(this, params);\n      var props = params.props,\n        oldProps = params.oldProps,\n        changeFlags = params.changeFlags;\n      if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {\n        var _this$state$model;\n        (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n        if (props.mesh) {\n          this.state.model = this.getModel(props.mesh);\n          var attributes = props.mesh.attributes || props.mesh;\n          this.setState({\n            hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n          });\n        }\n        this.getAttributeManager().invalidateAll();\n      }\n      if (props.texture !== oldProps.texture) {\n        this.setTexture(props.texture);\n      }\n      if (this.state.model) {\n        this.state.model.setDrawMode(this.props.wireframe ? 3 : 4);\n      }\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState(context) {\n      _get(_getPrototypeOf(SimpleMeshLayer.prototype), \"finalizeState\", this).call(this, context);\n      this.state.emptyTexture.delete();\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref) {\n      var uniforms = _ref.uniforms;\n      if (!this.state.model) {\n        return;\n      }\n      var viewport = this.context.viewport;\n      var _this$props = this.props,\n        sizeScale = _this$props.sizeScale,\n        coordinateSystem = _this$props.coordinateSystem,\n        _instanced = _this$props._instanced;\n      this.state.model.setUniforms(uniforms).setUniforms({\n        sizeScale: sizeScale,\n        composeModelMatrix: !_instanced || shouldComposeModelMatrix(viewport, coordinateSystem),\n        flatShading: !this.state.hasNormals\n      }).draw();\n    }\n  }, {\n    key: \"getModel\",\n    value: function getModel(mesh) {\n      var model = new Model(this.context.gl, _objectSpread(_objectSpread({}, this.getShaders()), {}, {\n        id: this.props.id,\n        geometry: getGeometry(mesh, this.props._useMeshColors),\n        isInstanced: true\n      }));\n      var texture = this.props.texture;\n      var emptyTexture = this.state.emptyTexture;\n      model.setUniforms({\n        sampler: texture || emptyTexture,\n        hasTexture: Boolean(texture)\n      });\n      return model;\n    }\n  }, {\n    key: \"setTexture\",\n    value: function setTexture(texture) {\n      var _this$state = this.state,\n        emptyTexture = _this$state.emptyTexture,\n        model = _this$state.model;\n      if (model) {\n        model.setUniforms({\n          sampler: texture || emptyTexture,\n          hasTexture: Boolean(texture)\n        });\n      }\n    }\n  }]);\n  return SimpleMeshLayer;\n}(Layer);\nexport { SimpleMeshLayer as default };\n_defineProperty(SimpleMeshLayer, \"defaultProps\", defaultProps);\n_defineProperty(SimpleMeshLayer, \"layerName\", 'SimpleMeshLayer');","map":{"version":3,"names":["Layer","project32","phongLighting","picking","log","Model","Geometry","Texture2D","isWebGL2","hasFeature","FEATURES","MATRIX_ATTRIBUTES","shouldComposeModelMatrix","vs","fs","validateGeometryAttributes","attributes","useMeshColors","hasColorAttribute","COLOR_0","colors","useColorAttribute","constant","value","Float32Array","assert","positions","POSITION","getGeometry","data","Error","DEFAULT_COLOR","defaultProps","mesh","type","async","texture","sizeScale","min","_useMeshColors","_instanced","wireframe","material","getPosition","x","position","getColor","getOrientation","getScale","getTranslation","getTransformMatrix","SimpleMeshLayer","_Layer","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","_defineProperty","_assertThisInitialized","_createClass","key","getShaders","transpileToGLSL100","context","gl","defines","GLSL_DERIVATIVES","DERIVATIVES_AVAILABLE","_get","_getPrototypeOf","prototype","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","transition","fp64","use64bitPositions","size","accessor","instanceColors","props","colorFormat","normalized","defaultValue","instanceModelMatrix","setState","emptyTexture","Uint8Array","width","height","updateState","params","oldProps","changeFlags","extensionsChanged","_this$state$model","state","model","delete","getModel","hasNormals","Boolean","NORMAL","normals","invalidateAll","setTexture","setDrawMode","finalizeState","draw","_ref","uniforms","viewport","_this$props","coordinateSystem","setUniforms","composeModelMatrix","flatShading","_objectSpread","id","geometry","isInstanced","sampler","hasTexture","_this$state","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/geo-layers/node_modules/@deck.gl/mesh-layers/src/simple-mesh-layer/simple-mesh-layer.ts"],"sourcesContent":["// Note: This file will either be moved back to deck.gl or reformatted to web-monorepo standards\n// Disabling lint temporarily to facilitate copying code in and out of this repo\n/* eslint-disable */\n\n// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  project32,\n  phongLighting,\n  picking,\n  DefaultProps,\n  log,\n  LayerContext,\n  Material\n} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Texture2D, isWebGL2} from '@luma.gl/core';\nimport {hasFeature, FEATURES} from '@luma.gl/webgl';\n\nimport {MATRIX_ATTRIBUTES, shouldComposeModelMatrix} from '../utils/matrix';\n\nimport vs from './simple-mesh-layer-vertex.glsl';\nimport fs from './simple-mesh-layer-fragment.glsl';\n\nimport type {LayerProps, UpdateParameters, Accessor, Position, Color, Texture} from '@deck.gl/core';\nimport type {MeshAttribute, MeshAttributes} from '@loaders.gl/schema';\nimport type {Geometry as GeometryType} from '@luma.gl/engine';\nimport {GLTFMaterialParser} from '@luma.gl/experimental';\n\nfunction validateGeometryAttributes(attributes: Record<string, any>, useMeshColors: boolean): void {\n  const hasColorAttribute = attributes.COLOR_0 || attributes.colors;\n  const useColorAttribute = hasColorAttribute && useMeshColors;\n  if (!useColorAttribute) {\n    attributes.colors = {constant: true, value: new Float32Array([1, 1, 1])};\n  }\n  log.assert(\n    attributes.positions || attributes.POSITION,\n    'no \"postions\" or \"POSITION\" attribute in mesh'\n  );\n}\n\n/*\n * Convert mesh data into geometry\n * @returns {Geometry} geometry\n */\nfunction getGeometry(data: Mesh, useMeshColors: boolean): Geometry {\n  if ((data as any).attributes) {\n    validateGeometryAttributes((data as any).attributes, useMeshColors);\n    if (data instanceof Geometry) {\n      return data;\n    } else {\n      return new Geometry(data);\n    }\n  } else if ((data as MeshAttributes).positions || (data as MeshAttributes).POSITION) {\n    validateGeometryAttributes(data, useMeshColors);\n    return new Geometry({\n      attributes: data\n    });\n  }\n  throw Error('Invalid mesh');\n}\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\ntype Mesh =\n  | GeometryType\n  | {\n      attributes: MeshAttributes;\n      indices?: MeshAttribute;\n    }\n  | MeshAttributes;\n\ntype _SimpleMeshLayerProps<DataT> = {\n  mesh: string | Mesh | Promise<Mesh> | null;\n  texture?: string | Texture | Promise<Texture>;\n  /** Customize the [texture parameters](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter). */\n  textureParameters?: Record<number, number> | null;\n\n  /** Anchor position accessor. */\n  getPosition?: Accessor<DataT, Position>;\n  /** Color value or accessor.\n   * If `mesh` does not contain vertex colors, use this color to render each object.\n   * If `mesh` contains vertex colors, then the two colors are mixed together.\n   * Use `[255, 255, 255]` to use the original mesh colors.\n   * If `texture` is assigned, then both colors will be ignored.\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n  /**\n   * Orientation in [pitch, yaw, roll] in degrees.\n   * @see https://en.wikipedia.org/wiki/Euler_angles\n   * @default [0, 0, 0]\n   */\n  getOrientation?: Accessor<DataT, [number, number, number]>;\n  /**\n   * Scaling factor of the model along each axis.\n   * @default [1, 1, 1]\n   */\n  getScale?: Accessor<DataT, [number, number, number]>;\n  /**\n   * Translation from the anchor point, [x, y, z] in meters.\n   * @default [0, 0, 0]\n   */\n  getTranslation?: Accessor<DataT, [number, number, number]>;\n  /**\n   * TransformMatrix. If specified, `getOrientation`, `getScale` and `getTranslation` are ignored.\n   */\n  getTransformMatrix?: Accessor<DataT, number[]>;\n  /**\n   * Multiplier to scale each geometry by.\n   * @default 1\n   */\n  sizeScale?: number;\n  /**\n   * @deprecated Whether to color pixels using vertex colors supplied in the mesh (the `COLOR_0` or `colors` attribute).\n   * If set to `false` vertex colors will be ignored.\n   * This prop will be removed and set to always true in the next major release.\n   * @default false\n   */\n  _useMeshColors?: boolean;\n\n  /**\n   * (Experimental) If rendering only one instance of the mesh, set this to false to treat mesh positions\n   * as deltas of the world coordinates of the anchor.\n   * E.g. in LNGLAT coordinates, mesh positions are interpreted as meter offsets by default.\n   * setting _instanced to false interpreted mesh positions as lnglat deltas.\n   * @default true\n   */\n  _instanced?: boolean; // TODO - formalize API\n  /**\n   * Whether to render the mesh in wireframe mode.\n   * @default false\n   */\n  wireframe?: boolean;\n  /**\n   * Material props for lighting effect.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting#constructing-a-material-instance\n   */\n  material?: Material;\n};\n\nexport type SimpleMeshLayerProps<DataT = any> = _SimpleMeshLayerProps<DataT> & LayerProps<DataT>;\n\nconst defaultProps: DefaultProps<SimpleMeshLayerProps> = {\n  mesh: {type: 'object', value: null, async: true},\n  texture: {type: 'image', value: null, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  // Whether the color attribute in a mesh will be used\n  // This prop will be removed and set to true in next major release\n  _useMeshColors: {type: 'boolean', value: false},\n\n  // _instanced is a hack to use world position instead of meter offsets in mesh\n  // TODO - formalize API\n  _instanced: true,\n  // NOTE(Tarek): Quick and dirty wireframe. Just draws\n  // the same mesh with LINE_STRIPS. Won't follow edges\n  // of the original mesh.\n  wireframe: false,\n  // Optional material for 'lighting' shader module\n  material: true,\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  // [pitch, yaw, roll]\n  getOrientation: {type: 'accessor', value: [0, 0, 0]},\n  getScale: {type: 'accessor', value: [1, 1, 1]},\n  getTranslation: {type: 'accessor', value: [0, 0, 0]},\n  // 4x4 matrix\n  getTransformMatrix: {type: 'accessor', value: []}\n};\n\n/** Render a number of instances of an arbitrary 3D geometry. */\nexport default class SimpleMeshLayer<DataT = any, ExtraPropsT = {}> extends Layer<\n  ExtraPropsT & Required<_SimpleMeshLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'SimpleMeshLayer';\n\n  state!: {\n    materialParser?: GLTFMaterialParser;\n    model?: Model;\n    emptyTexture: Texture2D;\n    hasNormals?: boolean;\n  };\n\n  getShaders() {\n    const transpileToGLSL100 = !isWebGL2(this.context.gl);\n\n    const defines: any = {};\n\n    if (hasFeature(this.context.gl, FEATURES.GLSL_DERIVATIVES)) {\n      defines.DERIVATIVES_AVAILABLE = 1;\n    }\n\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, phongLighting, picking],\n      transpileToGLSL100,\n      defines\n    });\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    // attributeManager is always defined in a primitive layer\n    attributeManager!.addInstanced({\n      instancePositions: {\n        transition: true,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        size: 3,\n        accessor: 'getPosition'\n      },\n      instanceColors: {\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        size: this.props.colorFormat.length,\n        normalized: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n\n    this.setState({\n      // Avoid luma.gl's missing uniform warning\n      // TODO - add feature to luma.gl to specify ignored uniforms?\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n\n    const {props, oldProps, changeFlags} = params;\n    if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {\n      this.state.model?.delete();\n      if (props.mesh) {\n        this.state.model = this.getModel(props.mesh as Mesh);\n\n        const attributes = (props.mesh as any).attributes || props.mesh;\n        this.setState({\n          hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n        });\n      }\n      // attributeManager is always defined in a primitive layer\n      this.getAttributeManager()!.invalidateAll();\n    }\n\n    if (props.texture !== oldProps.texture) {\n      this.setTexture(props.texture);\n    }\n\n    if (this.state.model) {\n      this.state.model.setDrawMode(this.props.wireframe ? GL.LINE_STRIP : GL.TRIANGLES);\n    }\n  }\n\n  finalizeState(context: LayerContext) {\n    super.finalizeState(context);\n\n    this.state.emptyTexture.delete();\n  }\n\n  draw({uniforms}) {\n    if (!this.state.model) {\n      return;\n    }\n\n    const {viewport} = this.context;\n    const {sizeScale, coordinateSystem, _instanced} = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        sizeScale,\n        composeModelMatrix: !_instanced || shouldComposeModelMatrix(viewport, coordinateSystem),\n        flatShading: !this.state.hasNormals\n      })\n      .draw();\n  }\n\n  protected getModel(mesh: Mesh): Model {\n    const model = new Model(this.context.gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: getGeometry(mesh, this.props._useMeshColors),\n      isInstanced: true\n    });\n\n    const {texture} = this.props;\n    const {emptyTexture} = this.state;\n    model.setUniforms({\n      sampler: texture || emptyTexture,\n      hasTexture: Boolean(texture)\n    });\n\n    return model;\n  }\n\n  private setTexture(texture: Texture2D): void {\n    const {emptyTexture, model} = this.state;\n\n    // props.mesh may not be ready at this time.\n    // The sampler will be set when `getModel` is called\n    if (model) {\n      model.setUniforms({\n        sampler: texture || emptyTexture,\n        hasTexture: Boolean(texture)\n      });\n    }\n  }\n}\n"],"mappings":";;;;;;;;;AAwBA,SACEA,KADF,EAEEC,SAFF,EAGEC,aAHF,EAIEC,OAJF,EAMEC,GANF,QASO,eATP;AAWA,SAAQC,KAAR,EAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,QAApC,QAAmD,eAAnD;AACA,SAAQC,UAAR,EAAoBC,QAApB,QAAmC,gBAAnC;AAEA,SAAQC,iBAAR,EAA2BC,wBAA3B,QAA0D,iBAA1D;AAEA,OAAOC,EAAP,MAAe,iCAAf;AACA,OAAOC,EAAP,MAAe,mCAAf;AAOA,SAASC,0BAATA,CAAoCC,UAApC,EAAqEC,aAArE,EAAmG;EACjG,IAAMC,iBAAiB,GAAGF,UAAU,CAACG,OAAX,IAAsBH,UAAU,CAACI,MAA3D;EACA,IAAMC,iBAAiB,GAAGH,iBAAiB,IAAID,aAA/C;EACA,IAAI,CAACI,iBAAL,EAAwB;IACtBL,UAAU,CAACI,MAAX,GAAoB;MAACE,QAAQ,EAAE,IAAX;MAAiBC,KAAK,EAAE,IAAIC,YAAJ,CAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAjB;IAAxB,CAApB;EACD;EACDpB,GAAG,CAACqB,MAAJ,CACET,UAAU,CAACU,SAAX,IAAwBV,UAAU,CAACW,QADrC,EAEE,+CAFF;AAID;AAMD,SAASC,WAATA,CAAqBC,IAArB,EAAiCZ,aAAjC,EAAmE;EACjE,IAAKY,IAAD,CAAcb,UAAlB,EAA8B;IAC5BD,0BAA0B,CAAEc,IAAD,CAAcb,UAAf,EAA2BC,aAA3B,CAA1B;IACA,IAAIY,IAAI,YAAYvB,QAApB,EAA8B;MAC5B,OAAOuB,IAAP;IACD,CAFD,MAEO;MACL,OAAO,IAAIvB,QAAJ,CAAauB,IAAb,CAAP;IACD;EACF,CAPD,MAOO,IAAKA,IAAD,CAAyBH,SAAzB,IAAuCG,IAAD,CAAyBF,QAAnE,EAA6E;IAClFZ,0BAA0B,CAACc,IAAD,EAAOZ,aAAP,CAA1B;IACA,OAAO,IAAIX,QAAJ,CAAa;MAClBU,UAAU,EAAEa;IADM,CAAb,CAAP;EAGD;EACD,MAAMC,KAAK,CAAC,cAAD,CAAX;AACD;AAED,IAAMC,aAA+C,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV,CAAxD;AAmFA,IAAMC,YAAgD,GAAG;EACvDC,IAAI,EAAE;IAACC,IAAI,EAAE,QAAP;IAAiBX,KAAK,EAAE,IAAxB;IAA8BY,KAAK,EAAE;EAArC,CADiD;EAEvDC,OAAO,EAAE;IAACF,IAAI,EAAE,OAAP;IAAgBX,KAAK,EAAE,IAAvB;IAA6BY,KAAK,EAAE;EAApC,CAF8C;EAGvDE,SAAS,EAAE;IAACH,IAAI,EAAE,QAAP;IAAiBX,KAAK,EAAE,CAAxB;IAA2Be,GAAG,EAAE;EAAhC,CAH4C;EAMvDC,cAAc,EAAE;IAACL,IAAI,EAAE,SAAP;IAAkBX,KAAK,EAAE;EAAzB,CANuC;EAUvDiB,UAAU,EAAE,IAV2C;EAcvDC,SAAS,EAAE,KAd4C;EAgBvDC,QAAQ,EAAE,IAhB6C;EAiBvDC,WAAW,EAAE;IAACT,IAAI,EAAE,UAAP;IAAmBX,KAAK,EAAE,SAAAA,MAAAqB,CAAC;MAAA,OAAIA,CAAC,CAACC,QAAA;IAAA;EAAjC,CAjB0C;EAkBvDC,QAAQ,EAAE;IAACZ,IAAI,EAAE,UAAP;IAAmBX,KAAK,EAAEQ;EAA1B,CAlB6C;EAuBvDgB,cAAc,EAAE;IAACb,IAAI,EAAE,UAAP;IAAmBX,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;EAA1B,CAvBuC;EAwBvDyB,QAAQ,EAAE;IAACd,IAAI,EAAE,UAAP;IAAmBX,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;EAA1B,CAxB6C;EAyBvD0B,cAAc,EAAE;IAACf,IAAI,EAAE,UAAP;IAAmBX,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;EAA1B,CAzBuC;EA2BvD2B,kBAAkB,EAAE;IAAChB,IAAI,EAAE,UAAP;IAAmBX,KAAK,EAAE;EAA1B;AA3BmC,CAAzD;AAAA,IA+BqB4B,eAAN,0BAAAC,MAAA;EAAAC,SAAA,CAAAF,eAAA,EAAAC,MAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,eAAA;EAEb,SAAAA,gBAAA;IAAA,IAAAK,KAAA;IAAAC,eAAA,OAAAN,eAAA;IAAA,SAAAO,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAAC,IAAA,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAAF,IAAA,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;IAAAP,KAAA,GAAAF,MAAA,CAAAU,IAAA,CAAAC,KAAA,CAAAX,MAAA,SAAAY,MAAA,CAAAL,IAAA;IAAAM,eAAA,CAAAC,sBAAA,CAAAZ,KAAA;IAAA,OAAAA,KAAA;EAAA;EAAAa,YAAA,CAAAlB,eAAA;IAAAmB,GAAA;IAAA/C,KAAA,EAWA,SAAAgD,WAAA,EAAa;MACX,IAAMC,kBAAkB,GAAG,CAAChE,QAAQ,CAAC,KAAKiE,OAAL,CAAaC,EAAd,CAApC;MAEA,IAAMC,OAAY,GAAG,EAArB;MAEA,IAAIlE,UAAU,CAAC,KAAKgE,OAAL,CAAaC,EAAd,EAAkBhE,QAAQ,CAACkE,gBAA3B,CAAd,EAA4D;QAC1DD,OAAO,CAACE,qBAAR,GAAgC,CAAhC;MACD;MAED,OAAAC,IAAA,CAAAC,eAAA,CAAA5B,eAAA,CAAA6B,SAAA,uBAAAhB,IAAA,OAAwB;QACtBnD,EADsB,EACtBA,EADsB;QAEtBC,EAFsB,EAEtBA,EAFsB;QAGtBmE,OAAO,EAAE,CAAChF,SAAD,EAAYC,aAAZ,EAA2BC,OAA3B,CAHa;QAItBqE,kBAJsB,EAItBA,kBAJsB;QAKtBG,OAAA,EAAAA;MALsB,CAAjB;IAOR;EAAA;IAAAL,GAAA;IAAA/C,KAAA,EAED,SAAA2D,gBAAA,EAAkB;MAChB,IAAMC,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;MAEAD,gBAAgB,CAAEE,YAAlB,CAA+B;QAC7BC,iBAAiB,EAAE;UACjBC,UAAU,EAAE,IADK;UAEjBrD,IAAI,MAFa;UAGjBsD,IAAI,EAAE,KAAKC,iBAAL,EAHW;UAIjBC,IAAI,EAAE,CAJW;UAKjBC,QAAQ,EAAE;QALO,CADU;QAQ7BC,cAAc,EAAE;UACd1D,IAAI,MADU;UAEdqD,UAAU,EAAE,IAFE;UAGdG,IAAI,EAAE,KAAKG,KAAL,CAAWC,WAAX,CAAuBlC,MAHf;UAIdmC,UAAU,EAAE,IAJE;UAKdJ,QAAQ,EAAE,UALI;UAMdK,YAAY,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV;QANA,CARa;QAgB7BC,mBAAmB,EAAEtF;MAhBQ,CAA/B;MAmBA,KAAKuF,QAAL,CAAc;QAGZC,YAAY,EAAE,IAAI5F,SAAJ,CAAc,KAAKkE,OAAL,CAAaC,EAA3B,EAA+B;UAC3C7C,IAAI,EAAE,IAAIuE,UAAJ,CAAe,CAAf,CADqC;UAE3CC,KAAK,EAAE,CAFoC;UAG3CC,MAAM,EAAE;QAHmC,CAA/B;MAHF,CAAd;IASD;EAAA;IAAAhC,GAAA;IAAA/C,KAAA,EAED,SAAAgF,YAAYC,MAAD,EAAiC;MAC1C1B,IAAA,CAAAC,eAAA,CAAA5B,eAAA,CAAA6B,SAAA,wBAAAhB,IAAA,OAAkBwC,MAAlB;MAEA,IAAOX,KAAD,GAAiCW,MAAvC,CAAOX,KAAD;QAAQY,QAAR,GAAiCD,MAAvC,CAAcC,QAAR;QAAkBC,WAAA,GAAeF,MAAvC,CAAwBE,WAAA;MACxB,IAAIb,KAAK,CAAC5D,IAAN,KAAewE,QAAQ,CAACxE,IAAxB,IAAgCyE,WAAW,CAACC,iBAAhD,EAAmE;QAAA,IAAAC,iBAAA;QACjE,CAAAA,iBAAA,QAAKC,KAAL,CAAWC,KAAX,cAAAF,iBAAA,uBAAAA,iBAAA,CAAkBG,MAAlB;QACA,IAAIlB,KAAK,CAAC5D,IAAV,EAAgB;UACd,KAAK4E,KAAL,CAAWC,KAAX,GAAmB,KAAKE,QAAL,CAAcnB,KAAK,CAAC5D,IAApB,CAAnB;UAEA,IAAMjB,UAAU,GAAI6E,KAAK,CAAC5D,IAAP,CAAoBjB,UAApB,IAAkC6E,KAAK,CAAC5D,IAA3D;UACA,KAAKiE,QAAL,CAAc;YACZe,UAAU,EAAEC,OAAO,CAAClG,UAAU,CAACmG,MAAX,IAAqBnG,UAAU,CAACoG,OAAjC;UADP,CAAd;QAGD;QAED,KAAKhC,mBAAL,GAA4BiC,aAA5B;MACD;MAED,IAAIxB,KAAK,CAACzD,OAAN,KAAkBqE,QAAQ,CAACrE,OAA/B,EAAwC;QACtC,KAAKkF,UAAL,CAAgBzB,KAAK,CAACzD,OAAtB;MACD;MAED,IAAI,KAAKyE,KAAL,CAAWC,KAAf,EAAsB;QACpB,KAAKD,KAAL,CAAWC,KAAX,CAAiBS,WAAjB,CAA6B,KAAK1B,KAAL,CAAWpD,SAAX,QAA7B;MACD;IACF;EAAA;IAAA6B,GAAA;IAAA/C,KAAA,EAED,SAAAiG,cAAc/C,OAAD,EAAwB;MACnCK,IAAA,CAAAC,eAAA,CAAA5B,eAAA,CAAA6B,SAAA,0BAAAhB,IAAA,OAAoBS,OAApB;MAEA,KAAKoC,KAAL,CAAWV,YAAX,CAAwBY,MAAxB;IACD;EAAA;IAAAzC,GAAA;IAAA/C,KAAA,EAED,SAAAkG,KAAAC,IAAA,EAAiB;MAAA,IAAXC,QAAA,GAAAD,IAAA,CAAAC,QAAA;MACJ,IAAI,CAAC,KAAKd,KAAL,CAAWC,KAAhB,EAAuB;QACrB;MACD;MAED,IAAOc,QAAA,GAAY,KAAKnD,OAAxB,CAAOmD,QAAA;MACP,IAAAC,WAAA,GAAkD,KAAKhC,KAAvD;QAAOxD,SAAD,GAAAwF,WAAA,CAACxF,SAAD;QAAYyF,gBAAZ,GAAAD,WAAA,CAAYC,gBAAZ;QAA8BtF,UAAA,GAAAqF,WAAA,CAAArF,UAAA;MAEpC,KAAKqE,KAAL,CAAWC,KAAX,CACGiB,WADH,CACeJ,QADf,EAEGI,WAFH,CAEe;QACX1F,SADW,EACXA,SADW;QAEX2F,kBAAkB,EAAE,CAACxF,UAAD,IAAe5B,wBAAwB,CAACgH,QAAD,EAAWE,gBAAX,CAFhD;QAGXG,WAAW,EAAE,CAAC,KAAKpB,KAAL,CAAWI;MAHd,CAFf,EAOGQ,IAPH;IAQD;EAAA;IAAAnD,GAAA;IAAA/C,KAAA,EAES,SAAAyF,SAAS/E,IAAD,EAAoB;MACpC,IAAM6E,KAAK,GAAG,IAAIzG,KAAJ,CAAU,KAAKoE,OAAL,CAAaC,EAAvB,EAAAwD,aAAA,CAAAA,aAAA,KACT,KAAK3D,UAAL,EADoC;QAEvC4D,EAAE,EAAE,KAAKtC,KAAL,CAAWsC,EAFwB;QAGvCC,QAAQ,EAAExG,WAAW,CAACK,IAAD,EAAO,KAAK4D,KAAL,CAAWtD,cAAlB,CAHkB;QAIvC8F,WAAW,EAAE;MAAA,GAJf;MAOA,IAAOjG,OAAA,GAAW,KAAKyD,KAAvB,CAAOzD,OAAA;MACP,IAAO+D,YAAA,GAAgB,KAAKU,KAA5B,CAAOV,YAAA;MACPW,KAAK,CAACiB,WAAN,CAAkB;QAChBO,OAAO,EAAElG,OAAO,IAAI+D,YADJ;QAEhBoC,UAAU,EAAErB,OAAO,CAAC9E,OAAD;MAFH,CAAlB;MAKA,OAAO0E,KAAP;IACD;EAAA;IAAAxC,GAAA;IAAA/C,KAAA,EAEO,SAAA+F,WAAWlF,OAAD,EAA2B;MAC3C,IAAAoG,WAAA,GAA8B,KAAK3B,KAAnC;QAAOV,YAAD,GAAAqC,WAAA,CAACrC,YAAD;QAAeW,KAAA,GAAA0B,WAAA,CAAA1B,KAAA;MAIrB,IAAIA,KAAJ,EAAW;QACTA,KAAK,CAACiB,WAAN,CAAkB;UAChBO,OAAO,EAAElG,OAAO,IAAI+D,YADJ;UAEhBoC,UAAU,EAAErB,OAAO,CAAC9E,OAAD;QAFH,CAAlB;MAID;IACF;EAAA;EAAA,OAAAe,eAAA;AAAA,EAhJyEnD,KAA7D;AAAA,SAAMmD,eAAN,IAAAsF,OAAA;gBAAMtF,e,kBAGGnB,Y;gBAHHmB,e,eAIA,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}