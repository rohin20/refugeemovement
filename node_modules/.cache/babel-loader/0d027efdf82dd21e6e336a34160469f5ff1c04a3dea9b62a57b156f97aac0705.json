{"ast":null,"code":"import { lerp } from '@math.gl/core';\nvar DEFAULT_INDICES = new Uint16Array([0, 2, 1, 0, 3, 2]);\nvar DEFAULT_TEX_COORDS = new Float32Array([0, 1, 0, 0, 1, 0, 1, 1]);\nexport default function createMesh(bounds, resolution) {\n  if (!resolution) {\n    return createQuad(bounds);\n  }\n  var maxXSpan = Math.max(Math.abs(bounds[0][0] - bounds[3][0]), Math.abs(bounds[1][0] - bounds[2][0]));\n  var maxYSpan = Math.max(Math.abs(bounds[1][1] - bounds[0][1]), Math.abs(bounds[2][1] - bounds[3][1]));\n  var uCount = Math.ceil(maxXSpan / resolution) + 1;\n  var vCount = Math.ceil(maxYSpan / resolution) + 1;\n  var vertexCount = (uCount - 1) * (vCount - 1) * 6;\n  var indices = new Uint32Array(vertexCount);\n  var texCoords = new Float32Array(uCount * vCount * 2);\n  var positions = new Float64Array(uCount * vCount * 3);\n  var vertex = 0;\n  var index = 0;\n  for (var u = 0; u < uCount; u++) {\n    var ut = u / (uCount - 1);\n    for (var v = 0; v < vCount; v++) {\n      var vt = v / (vCount - 1);\n      var p = interpolateQuad(bounds, ut, vt);\n      positions[vertex * 3 + 0] = p[0];\n      positions[vertex * 3 + 1] = p[1];\n      positions[vertex * 3 + 2] = p[2] || 0;\n      texCoords[vertex * 2 + 0] = ut;\n      texCoords[vertex * 2 + 1] = 1 - vt;\n      if (u > 0 && v > 0) {\n        indices[index++] = vertex - vCount;\n        indices[index++] = vertex - vCount - 1;\n        indices[index++] = vertex - 1;\n        indices[index++] = vertex - vCount;\n        indices[index++] = vertex - 1;\n        indices[index++] = vertex;\n      }\n      vertex++;\n    }\n  }\n  return {\n    vertexCount: vertexCount,\n    positions: positions,\n    indices: indices,\n    texCoords: texCoords\n  };\n}\nfunction createQuad(bounds) {\n  var positions = new Float64Array(12);\n  for (var i = 0; i < bounds.length; i++) {\n    positions[i * 3 + 0] = bounds[i][0];\n    positions[i * 3 + 1] = bounds[i][1];\n    positions[i * 3 + 2] = bounds[i][2] || 0;\n  }\n  return {\n    vertexCount: 6,\n    positions: positions,\n    indices: DEFAULT_INDICES,\n    texCoords: DEFAULT_TEX_COORDS\n  };\n}\nfunction interpolateQuad(quad, ut, vt) {\n  return lerp(lerp(quad[0], quad[1], vt), lerp(quad[3], quad[2], vt), ut);\n}","map":{"version":3,"names":["lerp","DEFAULT_INDICES","Uint16Array","DEFAULT_TEX_COORDS","Float32Array","createMesh","bounds","resolution","createQuad","maxXSpan","Math","max","abs","maxYSpan","uCount","ceil","vCount","vertexCount","indices","Uint32Array","texCoords","positions","Float64Array","vertex","index","u","ut","v","vt","p","interpolateQuad","i","length","quad"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/layers/src/bitmap-layer/create-mesh.ts"],"sourcesContent":["import {lerp} from '@math.gl/core';\n\nconst DEFAULT_INDICES = new Uint16Array([0, 2, 1, 0, 3, 2]);\nconst DEFAULT_TEX_COORDS = new Float32Array([0, 1, 0, 0, 1, 0, 1, 1]);\n\n/*\n  1 ---- 2\n  |      |\n  |      |\n  0 ---- 3\n*/\n/* eslint-disable max-statements */\nexport default function createMesh(bounds, resolution) {\n  if (!resolution) {\n    return createQuad(bounds);\n  }\n  const maxXSpan = Math.max(\n    Math.abs(bounds[0][0] - bounds[3][0]),\n    Math.abs(bounds[1][0] - bounds[2][0])\n  );\n  const maxYSpan = Math.max(\n    Math.abs(bounds[1][1] - bounds[0][1]),\n    Math.abs(bounds[2][1] - bounds[3][1])\n  );\n  const uCount = Math.ceil(maxXSpan / resolution) + 1;\n  const vCount = Math.ceil(maxYSpan / resolution) + 1;\n\n  const vertexCount = (uCount - 1) * (vCount - 1) * 6;\n  const indices = new Uint32Array(vertexCount);\n  const texCoords = new Float32Array(uCount * vCount * 2);\n  const positions = new Float64Array(uCount * vCount * 3);\n\n  // Tesselate\n  let vertex = 0;\n  let index = 0;\n  for (let u = 0; u < uCount; u++) {\n    const ut = u / (uCount - 1);\n    for (let v = 0; v < vCount; v++) {\n      const vt = v / (vCount - 1);\n      const p = interpolateQuad(bounds, ut, vt);\n\n      positions[vertex * 3 + 0] = p[0];\n      positions[vertex * 3 + 1] = p[1];\n      positions[vertex * 3 + 2] = p[2] || 0;\n\n      texCoords[vertex * 2 + 0] = ut;\n      texCoords[vertex * 2 + 1] = 1 - vt;\n\n      if (u > 0 && v > 0) {\n        indices[index++] = vertex - vCount;\n        indices[index++] = vertex - vCount - 1;\n        indices[index++] = vertex - 1;\n        indices[index++] = vertex - vCount;\n        indices[index++] = vertex - 1;\n        indices[index++] = vertex;\n      }\n\n      vertex++;\n    }\n  }\n  return {\n    vertexCount,\n    positions,\n    indices,\n    texCoords\n  };\n}\n\nfunction createQuad(bounds) {\n  const positions = new Float64Array(12);\n  // [[minX, minY], [minX, maxY], [maxX, maxY], [maxX, minY]]\n  for (let i = 0; i < bounds.length; i++) {\n    positions[i * 3 + 0] = bounds[i][0];\n    positions[i * 3 + 1] = bounds[i][1];\n    positions[i * 3 + 2] = bounds[i][2] || 0;\n  }\n\n  return {\n    vertexCount: 6,\n    positions,\n    indices: DEFAULT_INDICES,\n    texCoords: DEFAULT_TEX_COORDS\n  };\n}\n\nfunction interpolateQuad(quad, ut, vt) {\n  return lerp(lerp(quad[0], quad[1], vt), lerp(quad[3], quad[2], vt), ut);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}