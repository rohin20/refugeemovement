{"ast":null,"code":"import _toConsumableArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Vector3, Matrix3, Quaternion } from '@math.gl/core';\nimport BoundingSphere from './bounding-sphere';\nimport { INTERSECTION } from '../../constants';\nvar scratchVector3 = new Vector3();\nvar scratchOffset = new Vector3();\nvar scratchVectorU = new Vector3();\nvar scratchVectorV = new Vector3();\nvar scratchVectorW = new Vector3();\nvar scratchCorner = new Vector3();\nvar scratchToCenter = new Vector3();\nvar MATRIX3 = {\n  COLUMN0ROW0: 0,\n  COLUMN0ROW1: 1,\n  COLUMN0ROW2: 2,\n  COLUMN1ROW0: 3,\n  COLUMN1ROW1: 4,\n  COLUMN1ROW2: 5,\n  COLUMN2ROW0: 6,\n  COLUMN2ROW1: 7,\n  COLUMN2ROW2: 8\n};\nvar OrientedBoundingBox = /*#__PURE__*/function () {\n  function OrientedBoundingBox() {\n    var center = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [0, 0, 0];\n    var halfAxes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    _classCallCheck(this, OrientedBoundingBox);\n    _defineProperty(this, \"center\", void 0);\n    _defineProperty(this, \"halfAxes\", void 0);\n    this.center = new Vector3().from(center);\n    this.halfAxes = new Matrix3(halfAxes);\n  }\n  _createClass(OrientedBoundingBox, [{\n    key: \"halfSize\",\n    get: function get() {\n      var xAxis = this.halfAxes.getColumn(0);\n      var yAxis = this.halfAxes.getColumn(1);\n      var zAxis = this.halfAxes.getColumn(2);\n      return [new Vector3(xAxis).len(), new Vector3(yAxis).len(), new Vector3(zAxis).len()];\n    }\n  }, {\n    key: \"quaternion\",\n    get: function get() {\n      var xAxis = this.halfAxes.getColumn(0);\n      var yAxis = this.halfAxes.getColumn(1);\n      var zAxis = this.halfAxes.getColumn(2);\n      var normXAxis = new Vector3(xAxis).normalize();\n      var normYAxis = new Vector3(yAxis).normalize();\n      var normZAxis = new Vector3(zAxis).normalize();\n      return new Quaternion().fromMatrix3(new Matrix3([].concat(_toConsumableArray(normXAxis), _toConsumableArray(normYAxis), _toConsumableArray(normZAxis))));\n    }\n  }, {\n    key: \"fromCenterHalfSizeQuaternion\",\n    value: function fromCenterHalfSizeQuaternion(center, halfSize, quaternion) {\n      var quaternionObject = new Quaternion(quaternion);\n      var directionsMatrix = new Matrix3().fromQuaternion(quaternionObject);\n      directionsMatrix[0] = directionsMatrix[0] * halfSize[0];\n      directionsMatrix[1] = directionsMatrix[1] * halfSize[0];\n      directionsMatrix[2] = directionsMatrix[2] * halfSize[0];\n      directionsMatrix[3] = directionsMatrix[3] * halfSize[1];\n      directionsMatrix[4] = directionsMatrix[4] * halfSize[1];\n      directionsMatrix[5] = directionsMatrix[5] * halfSize[1];\n      directionsMatrix[6] = directionsMatrix[6] * halfSize[2];\n      directionsMatrix[7] = directionsMatrix[7] * halfSize[2];\n      directionsMatrix[8] = directionsMatrix[8] * halfSize[2];\n      this.center = new Vector3().from(center);\n      this.halfAxes = directionsMatrix;\n      return this;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new OrientedBoundingBox(this.center, this.halfAxes);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(right) {\n      return this === right || Boolean(right) && this.center.equals(right.center) && this.halfAxes.equals(right.halfAxes);\n    }\n  }, {\n    key: \"getBoundingSphere\",\n    value: function getBoundingSphere() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new BoundingSphere();\n      var halfAxes = this.halfAxes;\n      var u = halfAxes.getColumn(0, scratchVectorU);\n      var v = halfAxes.getColumn(1, scratchVectorV);\n      var w = halfAxes.getColumn(2, scratchVectorW);\n      var cornerVector = scratchVector3.copy(u).add(v).add(w);\n      result.center.copy(this.center);\n      result.radius = cornerVector.magnitude();\n      return result;\n    }\n  }, {\n    key: \"intersectPlane\",\n    value: function intersectPlane(plane) {\n      var center = this.center;\n      var normal = plane.normal;\n      var halfAxes = this.halfAxes;\n      var normalX = normal.x;\n      var normalY = normal.y;\n      var normalZ = normal.z;\n      var radEffective = Math.abs(normalX * halfAxes[MATRIX3.COLUMN0ROW0] + normalY * halfAxes[MATRIX3.COLUMN0ROW1] + normalZ * halfAxes[MATRIX3.COLUMN0ROW2]) + Math.abs(normalX * halfAxes[MATRIX3.COLUMN1ROW0] + normalY * halfAxes[MATRIX3.COLUMN1ROW1] + normalZ * halfAxes[MATRIX3.COLUMN1ROW2]) + Math.abs(normalX * halfAxes[MATRIX3.COLUMN2ROW0] + normalY * halfAxes[MATRIX3.COLUMN2ROW1] + normalZ * halfAxes[MATRIX3.COLUMN2ROW2]);\n      var distanceToPlane = normal.dot(center) + plane.distance;\n      if (distanceToPlane <= -radEffective) {\n        return INTERSECTION.OUTSIDE;\n      } else if (distanceToPlane >= radEffective) {\n        return INTERSECTION.INSIDE;\n      }\n      return INTERSECTION.INTERSECTING;\n    }\n  }, {\n    key: \"distanceTo\",\n    value: function distanceTo(point) {\n      return Math.sqrt(this.distanceSquaredTo(point));\n    }\n  }, {\n    key: \"distanceSquaredTo\",\n    value: function distanceSquaredTo(point) {\n      var offset = scratchOffset.from(point).subtract(this.center);\n      var halfAxes = this.halfAxes;\n      var u = halfAxes.getColumn(0, scratchVectorU);\n      var v = halfAxes.getColumn(1, scratchVectorV);\n      var w = halfAxes.getColumn(2, scratchVectorW);\n      var uHalf = u.magnitude();\n      var vHalf = v.magnitude();\n      var wHalf = w.magnitude();\n      u.normalize();\n      v.normalize();\n      w.normalize();\n      var distanceSquared = 0.0;\n      var d;\n      d = Math.abs(offset.dot(u)) - uHalf;\n      if (d > 0) {\n        distanceSquared += d * d;\n      }\n      d = Math.abs(offset.dot(v)) - vHalf;\n      if (d > 0) {\n        distanceSquared += d * d;\n      }\n      d = Math.abs(offset.dot(w)) - wHalf;\n      if (d > 0) {\n        distanceSquared += d * d;\n      }\n      return distanceSquared;\n    }\n  }, {\n    key: \"computePlaneDistances\",\n    value: function computePlaneDistances(position, direction) {\n      var result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [-0, -0];\n      var minDist = Number.POSITIVE_INFINITY;\n      var maxDist = Number.NEGATIVE_INFINITY;\n      var center = this.center;\n      var halfAxes = this.halfAxes;\n      var u = halfAxes.getColumn(0, scratchVectorU);\n      var v = halfAxes.getColumn(1, scratchVectorV);\n      var w = halfAxes.getColumn(2, scratchVectorW);\n      var corner = scratchCorner.copy(u).add(v).add(w).add(center);\n      var toCenter = scratchToCenter.copy(corner).subtract(position);\n      var mag = direction.dot(toCenter);\n      minDist = Math.min(mag, minDist);\n      maxDist = Math.max(mag, maxDist);\n      corner.copy(center).add(u).add(v).subtract(w);\n      toCenter.copy(corner).subtract(position);\n      mag = direction.dot(toCenter);\n      minDist = Math.min(mag, minDist);\n      maxDist = Math.max(mag, maxDist);\n      corner.copy(center).add(u).subtract(v).add(w);\n      toCenter.copy(corner).subtract(position);\n      mag = direction.dot(toCenter);\n      minDist = Math.min(mag, minDist);\n      maxDist = Math.max(mag, maxDist);\n      corner.copy(center).add(u).subtract(v).subtract(w);\n      toCenter.copy(corner).subtract(position);\n      mag = direction.dot(toCenter);\n      minDist = Math.min(mag, minDist);\n      maxDist = Math.max(mag, maxDist);\n      center.copy(corner).subtract(u).add(v).add(w);\n      toCenter.copy(corner).subtract(position);\n      mag = direction.dot(toCenter);\n      minDist = Math.min(mag, minDist);\n      maxDist = Math.max(mag, maxDist);\n      center.copy(corner).subtract(u).add(v).subtract(w);\n      toCenter.copy(corner).subtract(position);\n      mag = direction.dot(toCenter);\n      minDist = Math.min(mag, minDist);\n      maxDist = Math.max(mag, maxDist);\n      center.copy(corner).subtract(u).subtract(v).add(w);\n      toCenter.copy(corner).subtract(position);\n      mag = direction.dot(toCenter);\n      minDist = Math.min(mag, minDist);\n      maxDist = Math.max(mag, maxDist);\n      center.copy(corner).subtract(u).subtract(v).subtract(w);\n      toCenter.copy(corner).subtract(position);\n      mag = direction.dot(toCenter);\n      minDist = Math.min(mag, minDist);\n      maxDist = Math.max(mag, maxDist);\n      result[0] = minDist;\n      result[1] = maxDist;\n      return result;\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(transformation) {\n      this.center.transformAsPoint(transformation);\n      var xAxis = this.halfAxes.getColumn(0, scratchVectorU);\n      xAxis.transformAsPoint(transformation);\n      var yAxis = this.halfAxes.getColumn(1, scratchVectorV);\n      yAxis.transformAsPoint(transformation);\n      var zAxis = this.halfAxes.getColumn(2, scratchVectorW);\n      zAxis.transformAsPoint(transformation);\n      this.halfAxes = new Matrix3([].concat(_toConsumableArray(xAxis), _toConsumableArray(yAxis), _toConsumableArray(zAxis)));\n      return this;\n    }\n  }, {\n    key: \"getTransform\",\n    value: function getTransform() {\n      throw new Error('not implemented');\n    }\n  }]);\n  return OrientedBoundingBox;\n}();\nexport { OrientedBoundingBox as default };","map":{"version":3,"names":["Vector3","Matrix3","Quaternion","BoundingSphere","INTERSECTION","scratchVector3","scratchOffset","scratchVectorU","scratchVectorV","scratchVectorW","scratchCorner","scratchToCenter","MATRIX3","COLUMN0ROW0","COLUMN0ROW1","COLUMN0ROW2","COLUMN1ROW0","COLUMN1ROW1","COLUMN1ROW2","COLUMN2ROW0","COLUMN2ROW1","COLUMN2ROW2","OrientedBoundingBox","center","arguments","length","undefined","halfAxes","_classCallCheck","_defineProperty","from","_createClass","key","get","xAxis","getColumn","yAxis","zAxis","len","normXAxis","normalize","normYAxis","normZAxis","fromMatrix3","concat","_toConsumableArray","value","fromCenterHalfSizeQuaternion","halfSize","quaternion","quaternionObject","directionsMatrix","fromQuaternion","clone","equals","right","Boolean","getBoundingSphere","result","u","v","w","cornerVector","copy","add","radius","magnitude","intersectPlane","plane","normal","normalX","x","normalY","y","normalZ","z","radEffective","Math","abs","distanceToPlane","dot","distance","OUTSIDE","INSIDE","INTERSECTING","distanceTo","point","sqrt","distanceSquaredTo","offset","subtract","uHalf","vHalf","wHalf","distanceSquared","d","computePlaneDistances","position","direction","minDist","Number","POSITIVE_INFINITY","maxDist","NEGATIVE_INFINITY","corner","toCenter","mag","min","max","transform","transformation","transformAsPoint","getTransform","Error","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@math.gl/culling/src/lib/bounding-volumes/oriented-bounding-box.ts"],"sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Vector3, Matrix3, Matrix4, Quaternion, NumericArray} from '@math.gl/core';\nimport type {BoundingVolume} from './bounding-volume';\nimport BoundingSphere from './bounding-sphere';\nimport type Plane from '../plane';\nimport {INTERSECTION} from '../../constants';\n\nconst scratchVector3 = new Vector3();\nconst scratchOffset = new Vector3();\nconst scratchVectorU = new Vector3();\nconst scratchVectorV = new Vector3();\nconst scratchVectorW = new Vector3();\nconst scratchCorner = new Vector3();\nconst scratchToCenter = new Vector3();\n\nconst MATRIX3 = {\n  COLUMN0ROW0: 0,\n  COLUMN0ROW1: 1,\n  COLUMN0ROW2: 2,\n  COLUMN1ROW0: 3,\n  COLUMN1ROW1: 4,\n  COLUMN1ROW2: 5,\n  COLUMN2ROW0: 6,\n  COLUMN2ROW1: 7,\n  COLUMN2ROW2: 8\n};\n\n/**\n * An OrientedBoundingBox of some object is a closed and convex cuboid.\n * It can provide a tighter bounding volume than `BoundingSphere` or\n * `AxisAlignedBoundingBox` in many cases.\n */\nexport default class OrientedBoundingBox implements BoundingVolume {\n  center: Vector3;\n  halfAxes: Matrix3;\n\n  /**\n   * An OrientedBoundingBox of some object is a closed and convex cuboid.\n   * It can provide a tighter bounding volume than\n   * `BoundingSphere` or `AxisAlignedBoundingBox` in many cases.\n   */\n  constructor(center?: readonly number[], halfAxes?: readonly number[]);\n  constructor(center: Readonly<NumericArray> = [0, 0, 0], halfAxes = [0, 0, 0, 0, 0, 0, 0, 0, 0]) {\n    this.center = new Vector3().from(center);\n    this.halfAxes = new Matrix3(halfAxes);\n  }\n\n  /** Returns an array with three halfSizes for the bounding box */\n  get halfSize(): number[] {\n    const xAxis = this.halfAxes.getColumn(0);\n    const yAxis = this.halfAxes.getColumn(1);\n    const zAxis = this.halfAxes.getColumn(2);\n    return [new Vector3(xAxis).len(), new Vector3(yAxis).len(), new Vector3(zAxis).len()];\n  }\n\n  /** Returns a quaternion describing the orientation of the bounding box */\n  get quaternion(): Quaternion {\n    const xAxis = this.halfAxes.getColumn(0);\n    const yAxis = this.halfAxes.getColumn(1);\n    const zAxis = this.halfAxes.getColumn(2);\n    const normXAxis = new Vector3(xAxis).normalize();\n    const normYAxis = new Vector3(yAxis).normalize();\n    const normZAxis = new Vector3(zAxis).normalize();\n    return new Quaternion().fromMatrix3(new Matrix3([...normXAxis, ...normYAxis, ...normZAxis]));\n  }\n\n  /**\n   * Create OrientedBoundingBox from quaternion based OBB,\n   */\n  fromCenterHalfSizeQuaternion(\n    center: number[],\n    halfSize: number[],\n    quaternion: number[]\n  ): OrientedBoundingBox {\n    const quaternionObject = new Quaternion(quaternion);\n    const directionsMatrix = new Matrix3().fromQuaternion(quaternionObject);\n    directionsMatrix[0] = directionsMatrix[0] * halfSize[0];\n    directionsMatrix[1] = directionsMatrix[1] * halfSize[0];\n    directionsMatrix[2] = directionsMatrix[2] * halfSize[0];\n    directionsMatrix[3] = directionsMatrix[3] * halfSize[1];\n    directionsMatrix[4] = directionsMatrix[4] * halfSize[1];\n    directionsMatrix[5] = directionsMatrix[5] * halfSize[1];\n    directionsMatrix[6] = directionsMatrix[6] * halfSize[2];\n    directionsMatrix[7] = directionsMatrix[7] * halfSize[2];\n    directionsMatrix[8] = directionsMatrix[8] * halfSize[2];\n    this.center = new Vector3().from(center);\n    this.halfAxes = directionsMatrix;\n    return this;\n  }\n\n  /** Duplicates a OrientedBoundingBox instance. */\n  clone(): OrientedBoundingBox {\n    return new OrientedBoundingBox(this.center, this.halfAxes);\n  }\n\n  /** Compares the provided OrientedBoundingBox component wise and returns */\n  equals(right: OrientedBoundingBox): boolean {\n    return (\n      this === right ||\n      (Boolean(right) && this.center.equals(right.center) && this.halfAxes.equals(right.halfAxes))\n    );\n  }\n\n  /** Computes a tight-fitting bounding sphere enclosing the provided oriented bounding box. */\n  getBoundingSphere(result = new BoundingSphere()): BoundingSphere {\n    const halfAxes = this.halfAxes;\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n\n    // Calculate \"corner\" vector\n    const cornerVector = scratchVector3.copy(u).add(v).add(w);\n\n    result.center.copy(this.center);\n    result.radius = cornerVector.magnitude();\n\n    return result;\n  }\n\n  /** Determines which side of a plane the oriented bounding box is located. */\n  intersectPlane(plane: Plane): number {\n    const center = this.center;\n    const normal = plane.normal;\n    const halfAxes = this.halfAxes;\n\n    const normalX = normal.x;\n    const normalY = normal.y;\n    const normalZ = normal.z;\n\n    // Plane is used as if it is its normal; the first three components are assumed to be normalized\n    const radEffective =\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN0ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN0ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN0ROW2]\n      ) +\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN1ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN1ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN1ROW2]\n      ) +\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN2ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN2ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN2ROW2]\n      );\n    const distanceToPlane = normal.dot(center) + plane.distance;\n\n    if (distanceToPlane <= -radEffective) {\n      // The entire box is on the negative side of the plane normal\n      return INTERSECTION.OUTSIDE;\n    } else if (distanceToPlane >= radEffective) {\n      // The entire box is on the positive side of the plane normal\n      return INTERSECTION.INSIDE;\n    }\n    return INTERSECTION.INTERSECTING;\n  }\n\n  /** Computes the estimated distance from the closest point on a bounding box to a point. */\n  distanceTo(point: readonly number[]): number {\n    return Math.sqrt(this.distanceSquaredTo(point));\n  }\n\n  /**\n   * Computes the estimated distance squared from the closest point\n   * on a bounding box to a point.\n   * See Geometric Tools for Computer Graphics 10.4.2\n   */\n  distanceSquaredTo(point: readonly number[]): number {\n    // Computes the estimated distance squared from the\n    // closest point on a bounding box to a point.\n    // See Geometric Tools for Computer Graphics 10.4.2\n    const offset = scratchOffset.from(point).subtract(this.center);\n\n    const halfAxes = this.halfAxes;\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n\n    const uHalf = u.magnitude();\n    const vHalf = v.magnitude();\n    const wHalf = w.magnitude();\n\n    u.normalize();\n    v.normalize();\n    w.normalize();\n\n    let distanceSquared = 0.0;\n    let d;\n\n    d = Math.abs(offset.dot(u)) - uHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.dot(v)) - vHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.dot(w)) - wHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    return distanceSquared;\n  }\n\n  /**\n   * The distances calculated by the vector from the center of the bounding box\n   * to position projected onto direction.\n   *\n   * - If you imagine the infinite number of planes with normal direction,\n   *   this computes the smallest distance to the closest and farthest planes\n   *   from `position` that intersect the bounding box.\n   *\n   * @param position The position to calculate the distance from.\n   * @param direction The direction from position.\n   * @param result An Interval (array of length 2) to store the nearest and farthest distances.\n   * @returns Interval (array of length 2) with nearest and farthest distances\n   *   on the bounding box from position in direction.\n   */\n  // eslint-disable-next-line max-statements\n  computePlaneDistances(\n    position: readonly number[],\n    direction: Vector3,\n    result: number[] = [-0, -0]\n  ): number[] {\n    let minDist = Number.POSITIVE_INFINITY;\n    let maxDist = Number.NEGATIVE_INFINITY;\n\n    const center = this.center;\n    const halfAxes = this.halfAxes;\n\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n\n    // project first corner\n    const corner = scratchCorner.copy(u).add(v).add(w).add(center);\n\n    const toCenter = scratchToCenter.copy(corner).subtract(position);\n    let mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project second corner\n    corner.copy(center).add(u).add(v).subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project third corner\n    corner.copy(center).add(u).subtract(v).add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project fourth corner\n    corner.copy(center).add(u).subtract(v).subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project fifth corner\n    center.copy(corner).subtract(u).add(v).add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project sixth corner\n    center.copy(corner).subtract(u).add(v).subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project seventh corner\n    center.copy(corner).subtract(u).subtract(v).add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project eighth corner\n    center.copy(corner).subtract(u).subtract(v).subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    result[0] = minDist;\n    result[1] = maxDist;\n    return result;\n  }\n\n  /**\n   * Applies a 4x4 affine transformation matrix to a bounding sphere.\n   * @param transform The transformation matrix to apply to the bounding sphere.\n   * @returns itself, i.e. the modified BoundingVolume.\n   */\n  transform(transformation: readonly number[]): this {\n    this.center.transformAsPoint(transformation);\n\n    const xAxis = this.halfAxes.getColumn(0, scratchVectorU);\n    xAxis.transformAsPoint(transformation);\n\n    const yAxis = this.halfAxes.getColumn(1, scratchVectorV);\n    yAxis.transformAsPoint(transformation);\n\n    const zAxis = this.halfAxes.getColumn(2, scratchVectorW);\n    zAxis.transformAsPoint(transformation);\n\n    this.halfAxes = new Matrix3([...xAxis, ...yAxis, ...zAxis]);\n    return this;\n  }\n\n  getTransform(): Matrix4 {\n    // const modelMatrix = Matrix4.fromRotationTranslation(this.boundingVolume.halfAxes, this.boundingVolume.center);\n    // return modelMatrix;\n    throw new Error('not implemented');\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}