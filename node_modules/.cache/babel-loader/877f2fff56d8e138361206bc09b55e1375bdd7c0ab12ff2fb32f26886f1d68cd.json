{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findDefaultLayer = findDefaultLayer;\nexports.calculateLayerData = calculateLayerData;\nexports.getLayerHoverProp = getLayerHoverProp;\nexports.renderDeckGlLayer = renderDeckGlLayer;\nexports.isLayerRenderable = isLayerRenderable;\nexports.isLayerVisible = isLayerVisible;\nexports.prepareLayersForDeck = prepareLayersForDeck;\nexports.prepareLayersToRender = prepareLayersToRender;\nexports.getCustomDeckLayers = getCustomDeckLayers;\nexports.computeDeckLayers = computeDeckLayers;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _constants = require(\"@kepler.gl/constants\");\nvar _layers = require(\"@kepler.gl/layers\");\nvar _utils = require(\"@kepler.gl/utils\");\nvar _deckglLayers = require(\"@kepler.gl/deckgl-layers\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\n\n/**\n * Find default layers from fields\n */\nfunction findDefaultLayer(dataset, layerClasses) {\n  if (!dataset) {\n    return [];\n  }\n  var layerProps = Object.keys(layerClasses).reduce(function (previous, lc) {\n    var result = typeof layerClasses[lc].findDefaultLayerProps === 'function' ? layerClasses[lc].findDefaultLayerProps(dataset, previous) : {\n      props: []\n    };\n    var props = Array.isArray(result) ? result : result.props || [];\n    var foundLayers = result.foundLayers || previous;\n    return foundLayers.concat(props.map(function (p) {\n      return _objectSpread(_objectSpread({}, p), {}, {\n        type: lc,\n        dataId: dataset.id\n      });\n    }));\n  }, []); // go through all layerProps to create layer\n\n  return layerProps.map(function (props) {\n    // @ts-expect-error TODO: checking props.type !== null\n    var layer = new layerClasses[props.type](props);\n    return typeof layer.setInitialLayerConfig === 'function' && dataset.dataContainer ? layer.setInitialLayerConfig(dataset) : layer;\n  });\n}\n/**\n * calculate layer data based on layer type, col Config,\n * return updated layer if colorDomain, dataMap has changed\n */\n\nfunction calculateLayerData(layer, state, oldLayerData) {\n  var type = layer.type;\n  if (!type || !layer.hasAllColumns() || !layer.config.dataId) {\n    return {\n      layer: layer,\n      layerData: {}\n    };\n  }\n  var layerData = layer.formatLayerData(state.datasets, oldLayerData);\n  return {\n    layerData: layerData,\n    layer: layer\n  };\n}\n/**\n * Calculate props passed to LayerHoverInfo\n * @type {typeof import('./layer-utils').getLayerHoverProp}\n */\n\nfunction getLayerHoverProp(_ref) {\n  var interactionConfig = _ref.interactionConfig,\n    hoverInfo = _ref.hoverInfo,\n    layers = _ref.layers,\n    layersToRender = _ref.layersToRender,\n    datasets = _ref.datasets;\n  if (interactionConfig.tooltip.enabled && hoverInfo && hoverInfo.picked) {\n    // if anything hovered\n    var object = hoverInfo.object,\n      overlay = hoverInfo.layer; // deckgl layer to kepler-gl layer\n\n    var layer = layers[overlay.props.idx];\n    if (object && layer && layer.getHoverData && layersToRender[layer.id]) {\n      // if layer is visible and have hovered data\n      var dataId = layer.config.dataId;\n      if (!dataId) {\n        return null;\n      }\n      var _datasets$dataId = datasets[dataId],\n        dataContainer = _datasets$dataId.dataContainer,\n        fields = _datasets$dataId.fields;\n      var data = layer.getHoverData(object, dataContainer, fields);\n      var fieldsToShow = interactionConfig.tooltip.config.fieldsToShow[dataId];\n      return {\n        data: data,\n        fields: fields,\n        fieldsToShow: fieldsToShow,\n        layer: layer\n      };\n    }\n  }\n  return null;\n}\nfunction renderDeckGlLayer(props, layerCallbacks, idx) {\n  var datasets = props.datasets,\n    layers = props.layers,\n    layerData = props.layerData,\n    hoverInfo = props.hoverInfo,\n    clicked = props.clicked,\n    mapState = props.mapState,\n    interactionConfig = props.interactionConfig,\n    animationConfig = props.animationConfig,\n    mapLayers = props.mapLayers;\n  var layer = layers[idx];\n  var data = layerData[idx];\n  var _ref2 = datasets[layer.config.dataId] || {},\n    gpuFilter = _ref2.gpuFilter;\n  var objectHovered = clicked || hoverInfo;\n  var visible = !mapLayers || mapLayers && mapLayers[layer.id]; // Layer is Layer class\n\n  return layer.renderLayer({\n    data: data,\n    gpuFilter: gpuFilter,\n    idx: idx,\n    interactionConfig: interactionConfig,\n    layerCallbacks: layerCallbacks,\n    mapState: mapState,\n    animationConfig: animationConfig,\n    objectHovered: objectHovered,\n    visible: visible\n  });\n}\nfunction isLayerRenderable(layer, layerData) {\n  return layer.id !== _constants.GEOCODER_LAYER_ID && layer.shouldRenderLayer(layerData);\n}\nfunction isLayerVisible(layer, mapLayers) {\n  return layer.config.isVisible && (\n  // if layer.id is not in mapLayers, don't render it\n  !mapLayers || mapLayers && mapLayers[layer.id]);\n} // Prepare a dict of layers rendered by the deck.gl\n// Note, isVisible: false layer is passed to deck.gl here\n// return {[id]: true \\ false}\n\nfunction prepareLayersForDeck(layers, layerData) {\n  return layers.reduce(function (accu, layer, idx) {\n    return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2[\"default\"])({}, layer.id, isLayerRenderable(layer, layerData[idx]) && layer.overlayType === _layers.OVERLAY_TYPE_CONST.deckgl));\n  }, {});\n} // Prepare a dict of rendered layers rendered in the map\n// This includes only the visibile layers for single map view and split map view\n// return {[id]: true \\ false}\n\nfunction prepareLayersToRender(layers, layerData, mapLayers) {\n  return layers.reduce(function (accu, layer, idx) {\n    return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2[\"default\"])({}, layer.id, isLayerRenderable(layer, layerData[idx]) && isLayerVisible(layer, mapLayers)));\n  }, {});\n}\nfunction getCustomDeckLayers(deckGlProps) {\n  var bottomDeckLayers = Array.isArray(deckGlProps === null || deckGlProps === void 0 ? void 0 : deckGlProps.layers) ? deckGlProps === null || deckGlProps === void 0 ? void 0 : deckGlProps.layers : (0, _utils.isFunction)(deckGlProps === null || deckGlProps === void 0 ? void 0 : deckGlProps.layers) ? deckGlProps === null || deckGlProps === void 0 ? void 0 : deckGlProps.layers() : [];\n  var topDeckLayers = Array.isArray(deckGlProps === null || deckGlProps === void 0 ? void 0 : deckGlProps.topLayers) ? deckGlProps === null || deckGlProps === void 0 ? void 0 : deckGlProps.topLayers : (0, _utils.isFunction)(deckGlProps === null || deckGlProps === void 0 ? void 0 : deckGlProps.topLayers) ? deckGlProps === null || deckGlProps === void 0 ? void 0 : deckGlProps.topLayers() : [];\n  return [bottomDeckLayers, topDeckLayers];\n}\nfunction computeDeckLayers(_ref3, options, _onSetLayerDomain, deckGlProps) {\n  var visState = _ref3.visState,\n    mapState = _ref3.mapState,\n    mapStyle = _ref3.mapStyle;\n  var datasets = visState.datasets,\n    layers = visState.layers,\n    layerOrder = visState.layerOrder,\n    layerData = visState.layerData,\n    hoverInfo = visState.hoverInfo,\n    clicked = visState.clicked,\n    interactionConfig = visState.interactionConfig,\n    animationConfig = visState.animationConfig,\n    splitMaps = visState.splitMaps;\n  var _ref4 = options || {},\n    mapIndex = _ref4.mapIndex,\n    mapboxApiAccessToken = _ref4.mapboxApiAccessToken,\n    mapboxApiUrl = _ref4.mapboxApiUrl,\n    primaryMap = _ref4.primaryMap,\n    layersForDeck = _ref4.layersForDeck;\n  var dataLayers = [];\n  if (layerData && layerData.length) {\n    var mapLayers = (0, _utils.getMapLayersFromSplitMaps)(splitMaps, mapIndex || 0);\n    var currentLayersForDeck = layersForDeck || prepareLayersForDeck(layers, layerData);\n    dataLayers = layerOrder.slice().reverse().filter(function (idx) {\n      return currentLayersForDeck[layers[idx].id];\n    }).reduce(function (overlays, idx) {\n      var layerCallbacks = _onSetLayerDomain ? {\n        onSetLayerDomain: function onSetLayerDomain(val) {\n          return _onSetLayerDomain(idx, val);\n        }\n      } : {};\n      var layerOverlay = renderDeckGlLayer({\n        datasets: datasets,\n        layers: layers,\n        layerData: layerData,\n        hoverInfo: hoverInfo,\n        clicked: clicked,\n        mapState: mapState,\n        interactionConfig: interactionConfig,\n        animationConfig: animationConfig,\n        mapLayers: mapLayers\n      }, layerCallbacks, idx);\n      return overlays.concat(layerOverlay || []);\n    }, []);\n  }\n  if (!primaryMap) {\n    return dataLayers;\n  }\n  if (mapStyle !== null && mapStyle !== void 0 && mapStyle.visibleLayerGroups['3d building'] && primaryMap && mapboxApiAccessToken && mapboxApiUrl) {\n    dataLayers.push(new _deckglLayers.ThreeDBuildingLayer({\n      id: '_keplergl_3d-building',\n      mapboxApiAccessToken: mapboxApiAccessToken,\n      mapboxApiUrl: mapboxApiUrl,\n      threeDBuildingColor: mapStyle.threeDBuildingColor,\n      updateTriggers: {\n        getFillColor: mapStyle.threeDBuildingColor\n      }\n    }));\n  }\n  var _getCustomDeckLayers = getCustomDeckLayers(deckGlProps),\n    _getCustomDeckLayers2 = (0, _slicedToArray2[\"default\"])(_getCustomDeckLayers, 2),\n    customBottomDeckLayers = _getCustomDeckLayers2[0],\n    customTopDeckLayers = _getCustomDeckLayers2[1];\n  return [].concat((0, _toConsumableArray2[\"default\"])(customBottomDeckLayers), (0, _toConsumableArray2[\"default\"])(dataLayers), (0, _toConsumableArray2[\"default\"])(customTopDeckLayers));\n}","map":{"version":3,"names":["Object","defineProperty","exports","calculateLayerData","renderDeckGlLayer","computeDeckLayers","_toConsumableArray2","_interopRequireDefault","require","_slicedToArray2","_defineProperty2","_constants","_layers","_utils","_deckglLayers","ownKeys","type","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","findDefaultLayer","dataset","layerClasses","layerProps","reduce","previous","lc","result","findDefaultLayerProps","props","foundLayers","concat","map","p","dataId","id","layer","setInitialLayerConfig","dataContainer","hasAllColumns","config","layerData","formatLayerData","state","datasets","oldLayerData","getLayerHoverProp","_ref","hoverInfo","layers","layersToRender","interactionConfig","tooltip","enabled","picked","overlay","idx","getHoverData","_datasets$dataId","fields","data","fieldsToShow","layerCallbacks","clicked","mapState","animationConfig","mapLayers","_ref2","gpuFilter","objectHovered","visible","renderLayer","GEOCODER_LAYER_ID","shouldRenderLayer","isLayerVisible","isVisible","accu","isLayerRenderable","overlayType","OVERLAY_TYPE_CONST","deckgl","prepareLayersToRender","getCustomDeckLayers","deckGlProps","bottomDeckLayers","Array","isArray","isFunction","topDeckLayers","topLayers","visState","_ref3","mapStyle","layerOrder","splitMaps","_ref4","options","mapIndex","mapboxApiAccessToken","mapboxApiUrl","primaryMap","layersForDeck","dataLayers","getMapLayersFromSplitMaps","currentLayersForDeck","prepareLayersForDeck","slice","reverse","_onSetLayerDomain","onSetLayerDomain","val","layerOverlay","overlays"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/reducers/src/layer-utils.ts"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {GEOCODER_LAYER_ID} from '@kepler.gl/constants';\nimport {\n  Field,\n  TooltipField,\n  CompareType,\n  SplitMapLayers,\n  InteractionConfig\n} from '@kepler.gl/types';\nimport {\n  FindDefaultLayerPropsReturnValue,\n  Layer,\n  LayerClassesType,\n  OVERLAY_TYPE_CONST\n} from '@kepler.gl/layers';\n\nimport KeplerTable, {Datasets} from '@kepler.gl/table';\nimport {VisState} from '@kepler.gl/schemas';\nimport {isFunction, getMapLayersFromSplitMaps, DataRow} from '@kepler.gl/utils';\nimport {ThreeDBuildingLayer} from '@kepler.gl/deckgl-layers';\n\nexport type LayersToRender = {\n  [layerId: string]: boolean;\n};\n\nexport type AggregationLayerHoverData = {points: any[]; colorValue?: any; elevationValue?: any};\n\nexport type LayerHoverProp = {\n  data: DataRow | AggregationLayerHoverData | null;\n  fields: Field[];\n  fieldsToShow: TooltipField[];\n  layer: Layer;\n  primaryData?: DataRow | AggregationLayerHoverData | null;\n  compareType?: CompareType;\n};\n\n/**\n * Find default layers from fields\n */\nexport function findDefaultLayer(dataset: KeplerTable, layerClasses: LayerClassesType): Layer[] {\n  if (!dataset) {\n    return [];\n  }\n  const layerProps = (Object.keys(layerClasses) as Array<keyof LayerClassesType>).reduce(\n    (previous, lc) => {\n      const result: FindDefaultLayerPropsReturnValue =\n        typeof layerClasses[lc].findDefaultLayerProps === 'function'\n          ? layerClasses[lc].findDefaultLayerProps(dataset, previous)\n          : {props: []};\n\n      const props = Array.isArray(result) ? result : result.props || [];\n      const foundLayers = result.foundLayers || previous;\n\n      return foundLayers.concat(\n        props.map(p => ({\n          ...p,\n          type: lc,\n          dataId: dataset.id\n        }))\n      );\n    },\n    [] as LayerClassesType[keyof LayerClassesType][]\n  );\n\n  // go through all layerProps to create layer\n  return layerProps.map(props => {\n    // @ts-expect-error TODO: checking props.type !== null\n    const layer = new layerClasses[props.type](props);\n    return typeof layer.setInitialLayerConfig === 'function' && dataset.dataContainer\n      ? layer.setInitialLayerConfig(dataset)\n      : layer;\n  });\n}\n\n/**\n * calculate layer data based on layer type, col Config,\n * return updated layer if colorDomain, dataMap has changed\n */\nexport function calculateLayerData(\n  layer: Layer,\n  state: {datasets: Datasets},\n  oldLayerData?: any\n): {\n  layerData: any;\n  layer: Layer;\n} {\n  const {type} = layer;\n\n  if (!type || !layer.hasAllColumns() || !layer.config.dataId) {\n    return {layer, layerData: {}};\n  }\n\n  const layerData = layer.formatLayerData(state.datasets, oldLayerData);\n  return {layerData, layer};\n}\n\n/**\n * Calculate props passed to LayerHoverInfo\n * @type {typeof import('./layer-utils').getLayerHoverProp}\n */\nexport function getLayerHoverProp({\n  interactionConfig,\n  hoverInfo,\n  layers,\n  layersToRender,\n  datasets\n}: {\n  interactionConfig: InteractionConfig;\n  hoverInfo: any;\n  layers: Layer[];\n  layersToRender: LayersToRender;\n  datasets: Datasets;\n}): LayerHoverProp | null {\n  if (interactionConfig.tooltip.enabled && hoverInfo && hoverInfo.picked) {\n    // if anything hovered\n    const {object, layer: overlay} = hoverInfo;\n\n    // deckgl layer to kepler-gl layer\n    const layer = layers[overlay.props.idx];\n\n    if (object && layer && layer.getHoverData && layersToRender[layer.id]) {\n      // if layer is visible and have hovered data\n      const {\n        config: {dataId}\n      } = layer;\n      if (!dataId) {\n        return null;\n      }\n      const {dataContainer, fields} = datasets[dataId];\n      const data: DataRow | null = layer.getHoverData(object, dataContainer, fields);\n      const fieldsToShow = interactionConfig.tooltip.config.fieldsToShow[dataId];\n\n      return {\n        data,\n        fields,\n        fieldsToShow,\n        layer\n      };\n    }\n  }\n\n  return null;\n}\n\nexport function renderDeckGlLayer(props: any, layerCallbacks: {[key: string]: any}, idx: number) {\n  const {\n    datasets,\n    layers,\n    layerData,\n    hoverInfo,\n    clicked,\n    mapState,\n    interactionConfig,\n    animationConfig,\n    mapLayers\n  } = props;\n  const layer = layers[idx];\n  const data = layerData[idx];\n  const {gpuFilter} = datasets[layer.config.dataId] || {};\n  const objectHovered = clicked || hoverInfo;\n  const visible = !mapLayers || (mapLayers && mapLayers[layer.id]);\n  // Layer is Layer class\n  return layer.renderLayer({\n    data,\n    gpuFilter,\n    idx,\n    interactionConfig,\n    layerCallbacks,\n    mapState,\n    animationConfig,\n    objectHovered,\n    visible\n  });\n}\n\nexport function isLayerRenderable(layer: Layer, layerData) {\n  return layer.id !== GEOCODER_LAYER_ID && layer.shouldRenderLayer(layerData);\n}\n\nexport function isLayerVisible(layer, mapLayers) {\n  return (\n    layer.config.isVisible &&\n    // if layer.id is not in mapLayers, don't render it\n    (!mapLayers || (mapLayers && mapLayers[layer.id]))\n  );\n}\n\n// Prepare a dict of layers rendered by the deck.gl\n// Note, isVisible: false layer is passed to deck.gl here\n// return {[id]: true \\ false}\nexport function prepareLayersForDeck(\n  layers: Layer[],\n  layerData: any[]\n): {\n  [key: string]: boolean;\n} {\n  return layers.reduce(\n    (accu, layer, idx) => ({\n      ...accu,\n      [layer.id]:\n        isLayerRenderable(layer, layerData[idx]) && layer.overlayType === OVERLAY_TYPE_CONST.deckgl\n    }),\n    {}\n  );\n}\n\n// Prepare a dict of rendered layers rendered in the map\n// This includes only the visibile layers for single map view and split map view\n// return {[id]: true \\ false}\nexport function prepareLayersToRender(\n  layers: Layer[],\n  layerData: VisState['layerData'],\n  mapLayers?: SplitMapLayers | undefined | null\n): LayersToRender {\n  return layers.reduce(\n    (accu, layer, idx) => ({\n      ...accu,\n      [layer.id]: isLayerRenderable(layer, layerData[idx]) && isLayerVisible(layer, mapLayers)\n    }),\n    {}\n  );\n}\n\nexport function getCustomDeckLayers(deckGlProps) {\n  const bottomDeckLayers = Array.isArray(deckGlProps?.layers)\n    ? deckGlProps?.layers\n    : isFunction(deckGlProps?.layers)\n    ? deckGlProps?.layers()\n    : [];\n  const topDeckLayers = Array.isArray(deckGlProps?.topLayers)\n    ? deckGlProps?.topLayers\n    : isFunction(deckGlProps?.topLayers)\n    ? deckGlProps?.topLayers()\n    : [];\n\n  return [bottomDeckLayers, topDeckLayers];\n}\n\nexport type ComputeDeckLayersProps = {\n  mapIndex?: number;\n  mapboxApiAccessToken?: string;\n  mapboxApiUrl?: string;\n  primaryMap?: boolean;\n  layersForDeck?: {[key: string]: boolean};\n};\n\nexport function computeDeckLayers(\n  {visState, mapState, mapStyle}: any,\n  options?: ComputeDeckLayersProps,\n  onSetLayerDomain?: (idx: number, value: any) => void,\n  deckGlProps?: any\n): Layer[] {\n  const {\n    datasets,\n    layers,\n    layerOrder,\n    layerData,\n    hoverInfo,\n    clicked,\n    interactionConfig,\n    animationConfig,\n    splitMaps\n  } = visState;\n\n  const {mapIndex, mapboxApiAccessToken, mapboxApiUrl, primaryMap, layersForDeck} = options || {};\n\n  let dataLayers: any[] = [];\n\n  if (layerData && layerData.length) {\n    const mapLayers = getMapLayersFromSplitMaps(splitMaps, mapIndex || 0);\n\n    const currentLayersForDeck = layersForDeck || prepareLayersForDeck(layers, layerData);\n\n    dataLayers = layerOrder\n      .slice()\n      .reverse()\n      .filter(idx => currentLayersForDeck[layers[idx].id])\n      .reduce((overlays, idx) => {\n        const layerCallbacks = onSetLayerDomain\n          ? {\n              onSetLayerDomain: val => onSetLayerDomain(idx, val)\n            }\n          : {};\n        const layerOverlay = renderDeckGlLayer(\n          {\n            datasets,\n            layers,\n            layerData,\n            hoverInfo,\n            clicked,\n            mapState,\n            interactionConfig,\n            animationConfig,\n            mapLayers\n          },\n          layerCallbacks,\n          idx\n        );\n        return overlays.concat(layerOverlay || []);\n      }, []);\n  }\n\n  if (!primaryMap) {\n    return dataLayers;\n  }\n\n  if (\n    mapStyle?.visibleLayerGroups['3d building'] &&\n    primaryMap &&\n    mapboxApiAccessToken &&\n    mapboxApiUrl\n  ) {\n    dataLayers.push(\n      new ThreeDBuildingLayer({\n        id: '_keplergl_3d-building',\n        mapboxApiAccessToken,\n        mapboxApiUrl,\n        threeDBuildingColor: mapStyle.threeDBuildingColor,\n        updateTriggers: {\n          getFillColor: mapStyle.threeDBuildingColor\n        }\n      })\n    );\n  }\n\n  const [customBottomDeckLayers, customTopDeckLayers] = getCustomDeckLayers(deckGlProps);\n\n  return [...customBottomDeckLayers, ...dataLayers, ...customTopDeckLayers];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}