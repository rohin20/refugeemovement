{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport GLTFScenegraph from '../api/gltf-scenegraph';\nvar KHR_TEXTURE_BASISU = 'KHR_texture_basisu';\nexport var name = KHR_TEXTURE_BASISU;\nexport function preprocess(gltfData, options) {\n  var scene = new GLTFScenegraph(gltfData);\n  var json = scene.json;\n  var _iterator = _createForOfIteratorHelper(json.textures || []),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var texture = _step.value;\n      var extension = scene.getObjectExtension(texture, KHR_TEXTURE_BASISU);\n      if (extension) {\n        texture.source = extension.source;\n      }\n      scene.removeObjectExtension(texture, KHR_TEXTURE_BASISU);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  scene.removeExtension(KHR_TEXTURE_BASISU);\n}","map":{"version":3,"names":["GLTFScenegraph","KHR_TEXTURE_BASISU","name","preprocess","gltfData","options","scene","json","_iterator","_createForOfIteratorHelper","textures","_step","s","n","done","texture","value","extension","getObjectExtension","source","removeObjectExtension","err","e","f","removeExtension"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/gltf/src/lib/extensions/KHR_texture_basisu.ts"],"sourcesContent":["// GLTF EXTENSION: KHR_texture_basisu\n// https://github.com/KhronosGroup/glTF/tree/main/extensions/2.0/Khronos/KHR_texture_basisu\n/* eslint-disable camelcase */\n\nimport type {GLTF, GLTF_KHR_texture_basisu} from '../types/gltf-types';\nimport type {GLTFLoaderOptions} from '../../gltf-loader';\n\nimport GLTFScenegraph from '../api/gltf-scenegraph';\n\nconst KHR_TEXTURE_BASISU = 'KHR_texture_basisu';\n\n/** Extension name */\nexport const name = KHR_TEXTURE_BASISU;\n\n/**\n * Replaces a texture source reference with the extension texture\n * Done in preprocess() to prevent load of default image\n */\nexport function preprocess(gltfData: {json: GLTF}, options: GLTFLoaderOptions): void {\n  const scene = new GLTFScenegraph(gltfData);\n  const {json} = scene;\n\n  for (const texture of json.textures || []) {\n    const extension = scene.getObjectExtension<GLTF_KHR_texture_basisu>(\n      texture,\n      KHR_TEXTURE_BASISU\n    );\n    if (extension) {\n      // TODO - if multiple texture extensions are present which one wins?\n      texture.source = extension.source;\n    }\n    scene.removeObjectExtension(texture, KHR_TEXTURE_BASISU);\n  }\n\n  // Remove the top-level extension\n  scene.removeExtension(KHR_TEXTURE_BASISU);\n}\n"],"mappings":";AAOA,OAAOA,cAAc,MAAM,wBAAwB;AAEnD,IAAMC,kBAAkB,GAAG,oBAAoB;AAG/C,OAAO,IAAMC,IAAI,GAAGD,kBAAkB;AAMtC,OAAO,SAASE,UAAUA,CAACC,QAAsB,EAAEC,OAA0B,EAAQ;EACnF,IAAMC,KAAK,GAAG,IAAIN,cAAc,CAACI,QAAQ,CAAC;EAC1C,IAAOG,IAAA,GAAQD,KAAK,CAAbC,IAAA;EAAa,IAAAC,SAAA,GAAAC,0BAAA,CAEEF,IAAI,CAACG,QAAQ,IAAI,EAAE;IAAAC,KAAA;EAAA;IAAzC,KAAAH,SAAA,CAAAI,CAAA,MAAAD,KAAA,GAAAH,SAAA,CAAAK,CAAA,IAAAC,IAAA,GAA2C;MAAA,IAAhCC,OAAO,GAAAJ,KAAA,CAAAK,KAAA;MAChB,IAAMC,SAAS,GAAGX,KAAK,CAACY,kBAAkB,CACxCH,OAAO,EACPd,kBAAkB,CACnB;MACD,IAAIgB,SAAS,EAAE;QAEbF,OAAO,CAACI,MAAM,GAAGF,SAAS,CAACE,MAAM;MACnC;MACAb,KAAK,CAACc,qBAAqB,CAACL,OAAO,EAAEd,kBAAkB,CAAC;IAC1D;EAAA,SAAAoB,GAAA;IAAAb,SAAA,CAAAc,CAAA,CAAAD,GAAA;EAAA;IAAAb,SAAA,CAAAe,CAAA;EAAA;EAGAjB,KAAK,CAACkB,eAAe,CAACvB,kBAAkB,CAAC;AAC3C"},"metadata":{},"sourceType":"module","externalDependencies":[]}