{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._run = _run;\nexports.fromPromise = fromPromise;\nexports.fromPromiseWithProgress = fromPromiseWithProgress;\nexports.fromCallback = fromCallback;\nexports.taskCreator_ = taskCreator_;\nexports.reportTasksForTesting = reportTasksForTesting;\nexports.all = all;\nexports.allSettled = allSettled;\n\n// A task that either returns, or errors\n// A function that does some side-effect when run.\n// A function that runs an effector for some environment.\n// In test, we provide one that doesn't call the effectful\n// function, instead providing a mock response.\n// Private API for running a task. Do not use this directly.\n// We need this because Task is an opaque type, and we\n// hide `.run` outside this file.\nfunction _run(task, fnApplication, success, error, context) {\n  if (typeof task.run !== 'function') {\n    throw new Error('Attempted to run something that is not a task.');\n  }\n  return task.run(fnApplication, success, error, context);\n}\n/*\n * A function that takes some Arg and returns a new task.\n */\n\n/**\n * ## `Task.fromCallback`\n * Returns a task-creator from a function that returns a promise.\n *\n * `arg => Promise<string[]>` -> `arg => Task<string[]>`.\n *\n * Uses the second arg as a label for debugging.\n */\nfunction fromPromise(fn, label) {\n  var creator = function creator(outbound) {\n    return taskCreator_(function (success, error) {\n      return fn(outbound).then(success, error);\n    }, outbound, label);\n  };\n  creator.type = label;\n  return creator;\n}\nvar noop = function noop() {};\n/**\n * ## `Task.fromCallbackWithProgress`\n * Returns a task-creator from a function that returns a promise.\n *\n * `({arg, onProgress}) => Promise<string[]>` -> `({arg, onProgress}) => Task<string[]>`.\n *\n * Uses the second arg as a label for debugging.\n */\n\nfunction fromPromiseWithProgress(fn, label) {\n  var creator = function creator(_ref) {\n    var arg = _ref.arg,\n      onProgress = _ref.onProgress;\n    var task = taskCreator_(function (success, error, context) {\n      return fn({\n        arg: arg,\n        onProgress: (context ? function (v) {\n          return context.onProgress(onProgress(v));\n        } : noop) || noop\n      }).then(success, error);\n    }, {\n      arg: arg,\n      onProgress: onProgress\n    }, label);\n    return task;\n  };\n  creator.type = label;\n  return creator;\n}\n/**\n * `Task.fromCallback`\n *\n * Turn a node-style callback function:\n *     `(arg, cb: (err, res) => void) => void`)\n * into a task creator of the same type.\n *\n * Uses the second arg as a label for debugging.\n */\n\nfunction fromCallback(fn, label) {\n  var creator = function creator(outbound) {\n    return taskCreator_(function (success, error) {\n      return fn(outbound, function (err, result) {\n        return err ? error(err) : success(result);\n      });\n    }, outbound, label);\n  };\n  creator.type = label;\n  return creator;\n}\n\n/*\n * This is the private constructor for creating a Task object. End users\n * probably want to use `Task.fromCallback` or `task.fromPromise`.\n * It adds instrumentation to the effector, and also attaches some info\n * useful for making assertions in test.\n */\nfunction taskCreator_(effector, payload, label) {\n  // Instrument the task with reporting\n  var effectorPrime = function effectorPrime(success, error, context) {\n    reportEffects('start', newTask, payload);\n    return effector(function (result) {\n      reportEffects('success', newTask, result);\n      return success(result);\n    }, function (reason) {\n      reportEffects('error', newTask, reason);\n      return error(reason);\n    }, context);\n  };\n  effectorPrime.payload = payload;\n  effectorPrime.type = label;\n  var newTask = _task(payload, function (runEffect, success, error, context) {\n    return runEffect(effectorPrime, success, error, context);\n  }, label);\n  return newTask;\n} // Internal task constructor.\n// Note that payload is only kept around for testing/debugging purposes\n// It should not be introspected outside of test\n\nfunction _task(payload, next, label) {\n  return {\n    label: label,\n    type: label,\n    payload: payload,\n    /*\n     * Given the effector (or a mock), kicks off the task.\n     * You (the end user) probably don't need to call this\n     * directly. The middleware should handle it.\n     */\n    run: next,\n    /*\n     * Public Task Methods\n     */\n    chain: chain,\n    map: map,\n    bimap: bimap\n  };\n  function map(successTransform) {\n    return _task(payload, function (runEffect, success, error, context) {\n      return next(runEffect, function (result) {\n        return success(successTransform(result));\n      }, error, context);\n    }, label);\n  }\n  function bimap(successTransform, errorTransform) {\n    return _task(payload, function (runEffect, success, error, context) {\n      return next(runEffect, function (result) {\n        return success(successTransform(result));\n      }, function (reason) {\n        return error(errorTransform(reason));\n      }, context);\n    }, label);\n  }\n  function chain(chainTransform) {\n    return _task(payload, function (runEffect, success, error, context) {\n      return next(runEffect, function (result) {\n        var chainTask = chainTransform(result);\n        return chainTask.run(runEffect, success, error, context);\n      }, error, context);\n    }, \"Chain(\".concat(label, \")\"));\n  }\n}\n/*\n * Record the inputs/outputs of all tasks, for debugging or inspecting.\n * This feature should not be used to implement runtime behavior.\n */\n\nvar reportEffects = function reportEffects(event, task, payload) {};\n/**\n * ## `reportTasksForTesting`\n *\n * Takes a function that is called whenever a task is dispatched,\n * returns, or errors.\n *\n * Note that only one function can be registered with this hook.\n * The last provided function is the one that takes effect.\n */\n\nfunction reportTasksForTesting(fn) {\n  reportEffects = fn;\n} // type level utils functions needed for Task.all\n\n/*\n * ## `Task.all`\n *\n * Given an array of Tasks, returns a new task that runs all the effects\n * of the original in parallel, with an array result where each element\n * corresponds to a task.\n *\n * Acts like `Promise.all`.\n */\nfunction all(tasks) {\n  return _task(tasks.map(function (task) {\n    return task.payload;\n  }), function (runEffect, success, error, context) {\n    if (tasks.length === 0) {\n      return success([]);\n    }\n    var accumulated = Array(tasks.length);\n    var complete = 0;\n    var errorValue = null;\n    function allSuccess(index) {\n      return function (value) {\n        if (errorValue) {\n          return;\n        }\n        accumulated[index] = value;\n        complete += 1;\n        if (complete === tasks.length) {\n          return success(accumulated);\n        }\n      };\n    }\n    function anyError(err) {\n      if (!err) {\n        return;\n      }\n      errorValue = err;\n      return error(errorValue);\n    }\n    return Promise.all(tasks.map(function (task, index) {\n      return task.run(runEffect, allSuccess(index), anyError, context);\n    }));\n  }, 'Task.all(' + tasks.map(function (_ref2) {\n    var type = _ref2.type;\n    return type;\n  }).join(', ') + ')');\n}\n\n/*\n * ## `Task.allSettled`\n *\n * Given an array of Tasks, returns a new task that runs all the effects\n * of the original in parallel, with an array result where each element\n * corresponds to a task.\n *\n * Acts like `Promise.allSettled`.\n */\nfunction allSettled(tasks) {\n  return _task(tasks.map(function (task) {\n    return task.payload;\n  }), function (runEffect, success, error, context) {\n    if (tasks.length === 0) {\n      return success([]);\n    }\n    var accumulated = Array(tasks.length);\n    var complete = 0;\n    function onOneTaskFinish(index, status) {\n      return function (value) {\n        accumulated[index] = {\n          status: status,\n          value: value\n        };\n        complete += 1;\n        if (complete === tasks.length) {\n          return success(accumulated);\n        }\n      };\n    }\n    return Promise.allSettled(tasks.map(function (task, index) {\n      return task.run(runEffect, onOneTaskFinish(index, 'fulfilled'), onOneTaskFinish(index, 'rejected'), context);\n    }));\n  }, 'Task.allSettled(' + tasks.map(function (_ref3) {\n    var type = _ref3.type;\n    return type;\n  }).join(', ') + ')');\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","_run","fromPromise","fromPromiseWithProgress","fromCallback","taskCreator_","reportTasksForTesting","all","allSettled","task","fnApplication","success","error","context","run","Error","fn","label","creator","outbound","then","type","noop","_ref","arg","onProgress","v","err","result","effector","payload","effectorPrime","reportEffects","newTask","reason","_task","runEffect","next","chain","map","bimap","successTransform","errorTransform","chainTransform","chainTask","concat","event","tasks","length","accumulated","Array","complete","errorValue","allSuccess","index","anyError","Promise","_ref2","join","onOneTaskFinish","status","_ref3"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/react-palm/tasks/core.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._run = _run;\nexports.fromPromise = fromPromise;\nexports.fromPromiseWithProgress = fromPromiseWithProgress;\nexports.fromCallback = fromCallback;\nexports.taskCreator_ = taskCreator_;\nexports.reportTasksForTesting = reportTasksForTesting;\nexports.all = all;\nexports.allSettled = allSettled;\n\n// A task that either returns, or errors\n// A function that does some side-effect when run.\n// A function that runs an effector for some environment.\n// In test, we provide one that doesn't call the effectful\n// function, instead providing a mock response.\n// Private API for running a task. Do not use this directly.\n// We need this because Task is an opaque type, and we\n// hide `.run` outside this file.\nfunction _run(task, fnApplication, success, error, context) {\n  if (typeof task.run !== 'function') {\n    throw new Error('Attempted to run something that is not a task.');\n  }\n\n  return task.run(fnApplication, success, error, context);\n}\n/*\n * A function that takes some Arg and returns a new task.\n */\n\n\n/**\n * ## `Task.fromCallback`\n * Returns a task-creator from a function that returns a promise.\n *\n * `arg => Promise<string[]>` -> `arg => Task<string[]>`.\n *\n * Uses the second arg as a label for debugging.\n */\nfunction fromPromise(fn, label) {\n  var creator = function creator(outbound) {\n    return taskCreator_(function (success, error) {\n      return fn(outbound).then(success, error);\n    }, outbound, label);\n  };\n\n  creator.type = label;\n  return creator;\n}\n\nvar noop = function noop() {};\n/**\n * ## `Task.fromCallbackWithProgress`\n * Returns a task-creator from a function that returns a promise.\n *\n * `({arg, onProgress}) => Promise<string[]>` -> `({arg, onProgress}) => Task<string[]>`.\n *\n * Uses the second arg as a label for debugging.\n */\n\n\nfunction fromPromiseWithProgress(fn, label) {\n  var creator = function creator(_ref) {\n    var arg = _ref.arg,\n        onProgress = _ref.onProgress;\n    var task = taskCreator_(function (success, error, context) {\n      return fn({\n        arg: arg,\n        onProgress: (context ? function (v) {\n          return context.onProgress(onProgress(v));\n        } : noop) || noop\n      }).then(success, error);\n    }, {\n      arg: arg,\n      onProgress: onProgress\n    }, label);\n    return task;\n  };\n\n  creator.type = label;\n  return creator;\n}\n/**\n * `Task.fromCallback`\n *\n * Turn a node-style callback function:\n *     `(arg, cb: (err, res) => void) => void`)\n * into a task creator of the same type.\n *\n * Uses the second arg as a label for debugging.\n */\n\n\nfunction fromCallback(fn, label) {\n  var creator = function creator(outbound) {\n    return taskCreator_(function (success, error) {\n      return fn(outbound, function (err, result) {\n        return err ? error(err) : success(result);\n      });\n    }, outbound, label);\n  };\n\n  creator.type = label;\n  return creator;\n}\n\n/*\n * This is the private constructor for creating a Task object. End users\n * probably want to use `Task.fromCallback` or `task.fromPromise`.\n * It adds instrumentation to the effector, and also attaches some info\n * useful for making assertions in test.\n */\nfunction taskCreator_(effector, payload, label) {\n  // Instrument the task with reporting\n  var effectorPrime = function effectorPrime(success, error, context) {\n    reportEffects('start', newTask, payload);\n    return effector(function (result) {\n      reportEffects('success', newTask, result);\n      return success(result);\n    }, function (reason) {\n      reportEffects('error', newTask, reason);\n      return error(reason);\n    }, context);\n  };\n\n  effectorPrime.payload = payload;\n  effectorPrime.type = label;\n\n  var newTask = _task(payload, function (runEffect, success, error, context) {\n    return runEffect(effectorPrime, success, error, context);\n  }, label);\n\n  return newTask;\n} // Internal task constructor.\n// Note that payload is only kept around for testing/debugging purposes\n// It should not be introspected outside of test\n\n\nfunction _task(payload, next, label) {\n  return {\n    label: label,\n    type: label,\n    payload: payload,\n\n    /*\n     * Given the effector (or a mock), kicks off the task.\n     * You (the end user) probably don't need to call this\n     * directly. The middleware should handle it.\n     */\n    run: next,\n\n    /*\n     * Public Task Methods\n     */\n    chain: chain,\n    map: map,\n    bimap: bimap\n  };\n\n  function map(successTransform) {\n    return _task(payload, function (runEffect, success, error, context) {\n      return next(runEffect, function (result) {\n        return success(successTransform(result));\n      }, error, context);\n    }, label);\n  }\n\n  function bimap(successTransform, errorTransform) {\n    return _task(payload, function (runEffect, success, error, context) {\n      return next(runEffect, function (result) {\n        return success(successTransform(result));\n      }, function (reason) {\n        return error(errorTransform(reason));\n      }, context);\n    }, label);\n  }\n\n  function chain(chainTransform) {\n    return _task(payload, function (runEffect, success, error, context) {\n      return next(runEffect, function (result) {\n        var chainTask = chainTransform(result);\n        return chainTask.run(runEffect, success, error, context);\n      }, error, context);\n    }, \"Chain(\".concat(label, \")\"));\n  }\n}\n/*\n * Record the inputs/outputs of all tasks, for debugging or inspecting.\n * This feature should not be used to implement runtime behavior.\n */\n\n\nvar reportEffects = function reportEffects(event, task, payload) {};\n/**\n * ## `reportTasksForTesting`\n *\n * Takes a function that is called whenever a task is dispatched,\n * returns, or errors.\n *\n * Note that only one function can be registered with this hook.\n * The last provided function is the one that takes effect.\n */\n\n\nfunction reportTasksForTesting(fn) {\n  reportEffects = fn;\n} // type level utils functions needed for Task.all\n\n\n/*\n * ## `Task.all`\n *\n * Given an array of Tasks, returns a new task that runs all the effects\n * of the original in parallel, with an array result where each element\n * corresponds to a task.\n *\n * Acts like `Promise.all`.\n */\nfunction all(tasks) {\n  return _task(tasks.map(function (task) {\n    return task.payload;\n  }), function (runEffect, success, error, context) {\n    if (tasks.length === 0) {\n      return success([]);\n    }\n\n    var accumulated = Array(tasks.length);\n    var complete = 0;\n    var errorValue = null;\n\n    function allSuccess(index) {\n      return function (value) {\n        if (errorValue) {\n          return;\n        }\n\n        accumulated[index] = value;\n        complete += 1;\n\n        if (complete === tasks.length) {\n          return success(accumulated);\n        }\n      };\n    }\n\n    function anyError(err) {\n      if (!err) {\n        return;\n      }\n\n      errorValue = err;\n      return error(errorValue);\n    }\n\n    return Promise.all(tasks.map(function (task, index) {\n      return task.run(runEffect, allSuccess(index), anyError, context);\n    }));\n  }, 'Task.all(' + tasks.map(function (_ref2) {\n    var type = _ref2.type;\n    return type;\n  }).join(', ') + ')');\n}\n\n/*\n * ## `Task.allSettled`\n *\n * Given an array of Tasks, returns a new task that runs all the effects\n * of the original in parallel, with an array result where each element\n * corresponds to a task.\n *\n * Acts like `Promise.allSettled`.\n */\nfunction allSettled(tasks) {\n  return _task(tasks.map(function (task) {\n    return task.payload;\n  }), function (runEffect, success, error, context) {\n    if (tasks.length === 0) {\n      return success([]);\n    }\n\n    var accumulated = Array(tasks.length);\n    var complete = 0;\n\n    function onOneTaskFinish(index, status) {\n      return function (value) {\n        accumulated[index] = {\n          status: status,\n          value: value\n        };\n        complete += 1;\n\n        if (complete === tasks.length) {\n          return success(accumulated);\n        }\n      };\n    }\n\n    return Promise.allSettled(tasks.map(function (task, index) {\n      return task.run(runEffect, onOneTaskFinish(index, 'fulfilled'), onOneTaskFinish(index, 'rejected'), context);\n    }));\n  }, 'Task.allSettled(' + tasks.map(function (_ref3) {\n    var type = _ref3.type;\n    return type;\n  }).join(', ') + ')');\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}