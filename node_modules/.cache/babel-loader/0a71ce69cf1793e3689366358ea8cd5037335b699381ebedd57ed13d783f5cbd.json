{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.succeedTaskInTest = succeedTaskInTest;\nexports.errorTaskInTest = errorTaskInTest;\nexports.simulateTask = simulateTask;\nexports.succeedTaskWithValues = succeedTaskWithValues;\nexports.drainTasksForTesting = drainTasksForTesting;\nvar _core = require(\"./core\");\nvar _global = require(\"./global\");\n\n/**\n * Get the resulting value of a task, providing the given value as the inbound result.\n * If your task uses `.chain` or `Task.all`, you probably want to use `simulateTask`\n * or `succeedTaskWithValues` instead.\n */\nfunction succeedTaskInTest(someTask, value) {\n  return _runAndCaptureResult(someTask, function (_, s, _e) {\n    return s(value);\n  });\n}\n/**\n * Get the failure value of a task, providing the given value as the inbound error.\n *\n * If your task uses `.chain` or `Task.all`, you probably want to use `simulateTask`\n * instead.\n */\n\nfunction errorTaskInTest(someTask, value) {\n  return _runAndCaptureResult(someTask, function (_, _s, e) {\n    return e(value);\n  });\n}\n/**\n * Run a task, using `simulator` for bi-application. `simulator` recieves:\n *\n * 1. an object representing a side-effect with `payload` and `type`.\n * 2. a success handler to call with a mocked response.\n * 3. an error handler to call with a mocked out response.\n *\n * A simulator might be called more than once in the case of `Task.all`\n * or `task.chain`.\n */\n\nfunction simulateTask(someTask, simulator) {\n  return _runAndCaptureResult(someTask, simulator);\n}\n/**\n * Given some task, and array of values,\n */\n\nfunction succeedTaskWithValues(someTask, values) {\n  var index = 0;\n  return _runAndCaptureResult(someTask, function (_, s) {\n    if (index >= values.length) {\n      throw new Error('Not enough values were provided!');\n    }\n    var returned = s(values[index]);\n    index += 1;\n    return returned;\n  });\n}\n/**\n * This function should only be used in test environments to make assertions about\n * tasks as part of the test. Application code should not be mucking around with\n * the list of tasks.\n *\n * If you want to display information about tasks in your component,\n * add that information to your state tree when you create the task.\n *\n * If you want to get access to the current tasks, do so by returning the\n * tasks from helpers, and inspecting them before passing them to `withTask`.\n */\n\nfunction drainTasksForTesting() {\n  var drained = (0, _global.getGlobalTaskQueue)();\n  (0, _global.updateGlobalTaskQueue)([]);\n  (0, _global.clearLastWithTaskCall)();\n  return drained;\n}\nfunction _runAndCaptureResult(someTask, simulator) {\n  var returned;\n  var setReturned = function setReturned(val) {\n    returned = val;\n  };\n  (0, _core._run)(someTask, simulator, setReturned, setReturned);\n  if (typeof returned === 'undefined') {\n    throw new Error('A success or error handler was never called!');\n  }\n  return returned;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","succeedTaskInTest","errorTaskInTest","simulateTask","succeedTaskWithValues","drainTasksForTesting","_core","require","_global","someTask","_runAndCaptureResult","_","s","_e","_s","e","simulator","values","index","length","Error","returned","drained","getGlobalTaskQueue","updateGlobalTaskQueue","clearLastWithTaskCall","setReturned","val","_run"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/react-palm/tasks/test-utils.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.succeedTaskInTest = succeedTaskInTest;\nexports.errorTaskInTest = errorTaskInTest;\nexports.simulateTask = simulateTask;\nexports.succeedTaskWithValues = succeedTaskWithValues;\nexports.drainTasksForTesting = drainTasksForTesting;\n\nvar _core = require(\"./core\");\n\nvar _global = require(\"./global\");\n\n/**\n * Get the resulting value of a task, providing the given value as the inbound result.\n * If your task uses `.chain` or `Task.all`, you probably want to use `simulateTask`\n * or `succeedTaskWithValues` instead.\n */\nfunction succeedTaskInTest(someTask, value) {\n  return _runAndCaptureResult(someTask, function (_, s, _e) {\n    return s(value);\n  });\n}\n/**\n * Get the failure value of a task, providing the given value as the inbound error.\n *\n * If your task uses `.chain` or `Task.all`, you probably want to use `simulateTask`\n * instead.\n */\n\n\nfunction errorTaskInTest(someTask, value) {\n  return _runAndCaptureResult(someTask, function (_, _s, e) {\n    return e(value);\n  });\n}\n/**\n * Run a task, using `simulator` for bi-application. `simulator` recieves:\n *\n * 1. an object representing a side-effect with `payload` and `type`.\n * 2. a success handler to call with a mocked response.\n * 3. an error handler to call with a mocked out response.\n *\n * A simulator might be called more than once in the case of `Task.all`\n * or `task.chain`.\n */\n\n\nfunction simulateTask(someTask, simulator) {\n  return _runAndCaptureResult(someTask, simulator);\n}\n/**\n * Given some task, and array of values,\n */\n\n\nfunction succeedTaskWithValues(someTask, values) {\n  var index = 0;\n  return _runAndCaptureResult(someTask, function (_, s) {\n    if (index >= values.length) {\n      throw new Error('Not enough values were provided!');\n    }\n\n    var returned = s(values[index]);\n    index += 1;\n    return returned;\n  });\n}\n/**\n * This function should only be used in test environments to make assertions about\n * tasks as part of the test. Application code should not be mucking around with\n * the list of tasks.\n *\n * If you want to display information about tasks in your component,\n * add that information to your state tree when you create the task.\n *\n * If you want to get access to the current tasks, do so by returning the\n * tasks from helpers, and inspecting them before passing them to `withTask`.\n */\n\n\nfunction drainTasksForTesting() {\n  var drained = (0, _global.getGlobalTaskQueue)();\n  (0, _global.updateGlobalTaskQueue)([]);\n  (0, _global.clearLastWithTaskCall)();\n  return drained;\n}\n\nfunction _runAndCaptureResult(someTask, simulator) {\n  var returned;\n\n  var setReturned = function setReturned(val) {\n    returned = val;\n  };\n\n  (0, _core._run)(someTask, simulator, setReturned, setReturned);\n\n  if (typeof returned === 'undefined') {\n    throw new Error('A success or error handler was never called!');\n  }\n\n  return returned;\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,iBAAiB,GAAGA,iBAAiB;AAC7CF,OAAO,CAACG,eAAe,GAAGA,eAAe;AACzCH,OAAO,CAACI,YAAY,GAAGA,YAAY;AACnCJ,OAAO,CAACK,qBAAqB,GAAGA,qBAAqB;AACrDL,OAAO,CAACM,oBAAoB,GAAGA,oBAAoB;AAEnD,IAAIC,KAAK,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE7B,IAAIC,OAAO,GAAGD,OAAO,CAAC,UAAU,CAAC;;AAEjC;AACA;AACA;AACA;AACA;AACA,SAASN,iBAAiBA,CAACQ,QAAQ,EAAET,KAAK,EAAE;EAC1C,OAAOU,oBAAoB,CAACD,QAAQ,EAAE,UAAUE,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAE;IACxD,OAAOD,CAAC,CAACZ,KAAK,CAAC;EACjB,CAAC,CAAC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASE,eAAeA,CAACO,QAAQ,EAAET,KAAK,EAAE;EACxC,OAAOU,oBAAoB,CAACD,QAAQ,EAAE,UAAUE,CAAC,EAAEG,EAAE,EAAEC,CAAC,EAAE;IACxD,OAAOA,CAAC,CAACf,KAAK,CAAC;EACjB,CAAC,CAAC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASG,YAAYA,CAACM,QAAQ,EAAEO,SAAS,EAAE;EACzC,OAAON,oBAAoB,CAACD,QAAQ,EAAEO,SAAS,CAAC;AAClD;AACA;AACA;AACA;;AAGA,SAASZ,qBAAqBA,CAACK,QAAQ,EAAEQ,MAAM,EAAE;EAC/C,IAAIC,KAAK,GAAG,CAAC;EACb,OAAOR,oBAAoB,CAACD,QAAQ,EAAE,UAAUE,CAAC,EAAEC,CAAC,EAAE;IACpD,IAAIM,KAAK,IAAID,MAAM,CAACE,MAAM,EAAE;MAC1B,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;IACrD;IAEA,IAAIC,QAAQ,GAAGT,CAAC,CAACK,MAAM,CAACC,KAAK,CAAC,CAAC;IAC/BA,KAAK,IAAI,CAAC;IACV,OAAOG,QAAQ;EACjB,CAAC,CAAC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAAShB,oBAAoBA,CAAA,EAAG;EAC9B,IAAIiB,OAAO,GAAG,CAAC,CAAC,EAAEd,OAAO,CAACe,kBAAkB,GAAG;EAC/C,CAAC,CAAC,EAAEf,OAAO,CAACgB,qBAAqB,EAAE,EAAE,CAAC;EACtC,CAAC,CAAC,EAAEhB,OAAO,CAACiB,qBAAqB,GAAG;EACpC,OAAOH,OAAO;AAChB;AAEA,SAASZ,oBAAoBA,CAACD,QAAQ,EAAEO,SAAS,EAAE;EACjD,IAAIK,QAAQ;EAEZ,IAAIK,WAAW,GAAG,SAASA,WAAWA,CAACC,GAAG,EAAE;IAC1CN,QAAQ,GAAGM,GAAG;EAChB,CAAC;EAED,CAAC,CAAC,EAAErB,KAAK,CAACsB,IAAI,EAAEnB,QAAQ,EAAEO,SAAS,EAAEU,WAAW,EAAEA,WAAW,CAAC;EAE9D,IAAI,OAAOL,QAAQ,KAAK,WAAW,EAAE;IACnC,MAAM,IAAID,KAAK,CAAC,8CAA8C,CAAC;EACjE;EAEA,OAAOC,QAAQ;AACjB"},"metadata":{},"sourceType":"script","externalDependencies":[]}