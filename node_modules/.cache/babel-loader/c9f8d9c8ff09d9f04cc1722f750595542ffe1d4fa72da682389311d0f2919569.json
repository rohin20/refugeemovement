{"ast":null,"code":"import _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { GLTFMaterialParser } from '@luma.gl/experimental';\nimport { Model, pbr } from '@luma.gl/core';\nimport { SimpleMeshLayer } from '@deck.gl/mesh-layers';\nimport vs from './mesh-layer-vertex.glsl';\nimport fs from './mesh-layer-fragment.glsl';\nfunction validateGeometryAttributes(attributes) {\n  var hasColorAttribute = attributes.COLOR_0 || attributes.colors;\n  if (!hasColorAttribute) {\n    attributes.colors = {\n      constant: true,\n      value: new Float32Array([1, 1, 1])\n    };\n  }\n}\nvar defaultProps = {\n  pbrMaterial: {\n    type: 'object',\n    value: null\n  },\n  featureIds: {\n    type: 'array',\n    value: null,\n    optional: true\n  }\n};\nvar MeshLayer = /*#__PURE__*/function (_SimpleMeshLayer) {\n  _inherits(MeshLayer, _SimpleMeshLayer);\n  var _super = _createSuper(MeshLayer);\n  function MeshLayer() {\n    _classCallCheck(this, MeshLayer);\n    return _super.apply(this, arguments);\n  }\n  _createClass(MeshLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      var shaders = _get(_getPrototypeOf(MeshLayer.prototype), \"getShaders\", this).call(this);\n      var modules = shaders.modules;\n      modules.push(pbr);\n      return _objectSpread(_objectSpread({}, shaders), {}, {\n        vs: vs,\n        fs: fs\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var featureIds = this.props.featureIds;\n      _get(_getPrototypeOf(MeshLayer.prototype), \"initializeState\", this).call(this);\n      var attributeManager = this.getAttributeManager();\n      if (featureIds) {\n        attributeManager.add({\n          featureIdsPickingColors: {\n            type: 5121,\n            size: 3,\n            noAlloc: true,\n            update: this.calculateFeatureIdsPickingColors\n          }\n        });\n      }\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(params) {\n      _get(_getPrototypeOf(MeshLayer.prototype), \"updateState\", this).call(this, params);\n      var props = params.props,\n        oldProps = params.oldProps;\n      if (props.pbrMaterial !== oldProps.pbrMaterial) {\n        this.updatePbrMaterialUniforms(props.pbrMaterial);\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(opts) {\n      var featureIds = this.props.featureIds;\n      if (!this.state.model) {\n        return;\n      }\n      this.state.model.setUniforms({\n        u_Camera: this.state.model.getUniforms().project_uCameraPosition,\n        pickFeatureIds: Boolean(featureIds)\n      });\n      _get(_getPrototypeOf(MeshLayer.prototype), \"draw\", this).call(this, opts);\n    }\n  }, {\n    key: \"getModel\",\n    value: function getModel(mesh) {\n      var _this$props = this.props,\n        id = _this$props.id,\n        pbrMaterial = _this$props.pbrMaterial;\n      var materialParser = this.parseMaterial(pbrMaterial, mesh);\n      this.setState({\n        materialParser: materialParser\n      });\n      var shaders = this.getShaders();\n      validateGeometryAttributes(mesh.attributes);\n      var model = new Model(this.context.gl, _objectSpread(_objectSpread({}, this.getShaders()), {}, {\n        id: id,\n        geometry: mesh,\n        defines: _objectSpread(_objectSpread(_objectSpread({}, shaders.defines), materialParser === null || materialParser === void 0 ? void 0 : materialParser.defines), {}, {\n          HAS_UV_REGIONS: mesh.attributes.uvRegions\n        }),\n        parameters: materialParser === null || materialParser === void 0 ? void 0 : materialParser.parameters,\n        isInstanced: true\n      }));\n      return model;\n    }\n  }, {\n    key: \"updatePbrMaterialUniforms\",\n    value: function updatePbrMaterialUniforms(pbrMaterial) {\n      var model = this.state.model;\n      if (model) {\n        var mesh = this.props.mesh;\n        var materialParser = this.parseMaterial(pbrMaterial, mesh);\n        this.setState({\n          materialParser: materialParser\n        });\n        model.setUniforms(materialParser.uniforms);\n      }\n    }\n  }, {\n    key: \"parseMaterial\",\n    value: function parseMaterial(pbrMaterial, mesh) {\n      var _this$state$materialP;\n      var unlit = Boolean(pbrMaterial.pbrMetallicRoughness && pbrMaterial.pbrMetallicRoughness.baseColorTexture);\n      (_this$state$materialP = this.state.materialParser) === null || _this$state$materialP === void 0 ? void 0 : _this$state$materialP.delete();\n      return new GLTFMaterialParser(this.context.gl, {\n        attributes: {\n          NORMAL: mesh.attributes.normals,\n          TEXCOORD_0: mesh.attributes.texCoords\n        },\n        material: _objectSpread({\n          unlit: unlit\n        }, pbrMaterial),\n        pbrDebug: false,\n        imageBasedLightingEnvironment: null,\n        lights: true,\n        useTangents: false\n      });\n    }\n  }, {\n    key: \"calculateFeatureIdsPickingColors\",\n    value: function calculateFeatureIdsPickingColors(attribute) {\n      var featureIds = this.props.featureIds;\n      var value = new Uint8ClampedArray(featureIds.length * attribute.size);\n      var pickingColor = [];\n      for (var index = 0; index < featureIds.length; index++) {\n        this.encodePickingColor(featureIds[index], pickingColor);\n        value[index * 3] = pickingColor[0];\n        value[index * 3 + 1] = pickingColor[1];\n        value[index * 3 + 2] = pickingColor[2];\n      }\n      attribute.value = value;\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState(context) {\n      var _this$state$materialP2;\n      _get(_getPrototypeOf(MeshLayer.prototype), \"finalizeState\", this).call(this, context);\n      (_this$state$materialP2 = this.state.materialParser) === null || _this$state$materialP2 === void 0 ? void 0 : _this$state$materialP2.delete();\n      this.setState({\n        materialParser: null\n      });\n    }\n  }]);\n  return MeshLayer;\n}(SimpleMeshLayer);\nexport { MeshLayer as default };\n_defineProperty(MeshLayer, \"layerName\", 'MeshLayer');\n_defineProperty(MeshLayer, \"defaultProps\", defaultProps);","map":{"version":3,"names":["GLTFMaterialParser","Model","pbr","SimpleMeshLayer","vs","fs","validateGeometryAttributes","attributes","hasColorAttribute","COLOR_0","colors","constant","value","Float32Array","defaultProps","pbrMaterial","type","featureIds","optional","MeshLayer","_SimpleMeshLayer","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","getShaders","shaders","_get","_getPrototypeOf","prototype","call","modules","push","_objectSpread","initializeState","props","attributeManager","getAttributeManager","add","featureIdsPickingColors","size","noAlloc","update","calculateFeatureIdsPickingColors","updateState","params","oldProps","updatePbrMaterialUniforms","draw","opts","state","model","setUniforms","u_Camera","getUniforms","project_uCameraPosition","pickFeatureIds","Boolean","getModel","mesh","_this$props","id","materialParser","parseMaterial","setState","context","gl","geometry","defines","HAS_UV_REGIONS","uvRegions","parameters","isInstanced","uniforms","_this$state$materialP","unlit","pbrMetallicRoughness","baseColorTexture","delete","NORMAL","normals","TEXCOORD_0","texCoords","material","pbrDebug","imageBasedLightingEnvironment","lights","useTangents","attribute","Uint8ClampedArray","length","pickingColor","index","encodePickingColor","finalizeState","_this$state$materialP2","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/geo-layers/src/mesh-layer/mesh-layer.ts"],"sourcesContent":["import type {NumericArray} from '@math.gl/core';\nimport {GLTFMaterialParser} from '@luma.gl/experimental';\nimport {Model, pbr} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport type {MeshAttribute, MeshAttributes} from '@loaders.gl/schema';\nimport type {UpdateParameters, DefaultProps, LayerContext} from '@deck.gl/core';\nimport {SimpleMeshLayer, SimpleMeshLayerProps} from '@deck.gl/mesh-layers';\n\nimport vs from './mesh-layer-vertex.glsl';\nimport fs from './mesh-layer-fragment.glsl';\n\nexport type Mesh = {\n  attributes: MeshAttributes;\n  indices?: MeshAttribute;\n};\n\nfunction validateGeometryAttributes(attributes) {\n  const hasColorAttribute = attributes.COLOR_0 || attributes.colors;\n  if (!hasColorAttribute) {\n    attributes.colors = {constant: true, value: new Float32Array([1, 1, 1])};\n  }\n}\n\nconst defaultProps: DefaultProps<MeshLayerProps> = {\n  pbrMaterial: {type: 'object', value: null},\n  featureIds: {type: 'array', value: null, optional: true}\n};\n\n/** All properties supported by MeshLayer. */\nexport type MeshLayerProps<DataT = any> = _MeshLayerProps<DataT> & SimpleMeshLayerProps<DataT>;\n\n/** Properties added by MeshLayer. */\ntype _MeshLayerProps<DataT> = {\n  /**\n   * PBR material object. _lighting must be pbr for this to work\n   */\n  pbrMaterial?: any; // TODO add type when converting Tile3DLayer\n\n  /**\n   * List of feature ids.\n   */\n  featureIds?: NumericArray | null;\n};\n\nexport default class MeshLayer<DataT = any, ExtraProps = {}> extends SimpleMeshLayer<\n  DataT,\n  Required<_MeshLayerProps<DataT>> & ExtraProps\n> {\n  static layerName = 'MeshLayer';\n  static defaultProps = defaultProps;\n\n  getShaders() {\n    const shaders = super.getShaders();\n    const modules = shaders.modules;\n    modules.push(pbr);\n    return {...shaders, vs, fs};\n  }\n\n  initializeState() {\n    const {featureIds} = this.props;\n    super.initializeState();\n\n    const attributeManager = this.getAttributeManager();\n    if (featureIds) {\n      // attributeManager is always defined in a primitive layer\n      attributeManager!.add({\n        featureIdsPickingColors: {\n          type: GL.UNSIGNED_BYTE,\n          size: 3,\n          noAlloc: true,\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          update: this.calculateFeatureIdsPickingColors\n        }\n      });\n    }\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n\n    const {props, oldProps} = params;\n    if (props.pbrMaterial !== oldProps.pbrMaterial) {\n      this.updatePbrMaterialUniforms(props.pbrMaterial);\n    }\n  }\n\n  draw(opts) {\n    const {featureIds} = this.props;\n    if (!this.state.model) {\n      return;\n    }\n    this.state.model.setUniforms({\n      // Needed for PBR (TODO: find better way to get it)\n      // eslint-disable-next-line camelcase\n      u_Camera: this.state.model.getUniforms().project_uCameraPosition,\n      pickFeatureIds: Boolean(featureIds)\n    });\n\n    super.draw(opts);\n  }\n\n  protected getModel(mesh: Mesh): Model {\n    const {id, pbrMaterial} = this.props;\n    const materialParser = this.parseMaterial(pbrMaterial, mesh);\n    // Keep material parser to explicitly remove textures\n    this.setState({materialParser});\n    const shaders = this.getShaders();\n    validateGeometryAttributes(mesh.attributes);\n    const model = new Model(this.context.gl, {\n      ...this.getShaders(),\n      id,\n      geometry: mesh,\n      defines: {\n        ...shaders.defines,\n        ...materialParser?.defines,\n        HAS_UV_REGIONS: mesh.attributes.uvRegions\n      },\n      parameters: materialParser?.parameters,\n      isInstanced: true\n    });\n\n    return model;\n  }\n\n  updatePbrMaterialUniforms(pbrMaterial) {\n    const {model} = this.state;\n    if (model) {\n      const {mesh} = this.props;\n      const materialParser = this.parseMaterial(pbrMaterial, mesh);\n      // Keep material parser to explicitly remove textures\n      this.setState({materialParser});\n      model.setUniforms(materialParser.uniforms);\n    }\n  }\n\n  parseMaterial(pbrMaterial, mesh) {\n    const unlit = Boolean(\n      pbrMaterial.pbrMetallicRoughness && pbrMaterial.pbrMetallicRoughness.baseColorTexture\n    );\n\n    this.state.materialParser?.delete();\n\n    return new GLTFMaterialParser(this.context.gl, {\n      attributes: {NORMAL: mesh.attributes.normals, TEXCOORD_0: mesh.attributes.texCoords},\n      material: {unlit, ...pbrMaterial},\n      pbrDebug: false,\n      imageBasedLightingEnvironment: null,\n      lights: true,\n      useTangents: false\n    });\n  }\n\n  calculateFeatureIdsPickingColors(attribute) {\n    // This updater is only called if featureIds is not null\n    const featureIds = this.props.featureIds!;\n    const value = new Uint8ClampedArray(featureIds.length * attribute.size);\n\n    const pickingColor = [];\n    for (let index = 0; index < featureIds.length; index++) {\n      this.encodePickingColor(featureIds[index], pickingColor);\n\n      value[index * 3] = pickingColor[0];\n      value[index * 3 + 1] = pickingColor[1];\n      value[index * 3 + 2] = pickingColor[2];\n    }\n\n    attribute.value = value;\n  }\n\n  finalizeState(context: LayerContext) {\n    super.finalizeState(context);\n    this.state.materialParser?.delete();\n    this.setState({materialParser: null});\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}