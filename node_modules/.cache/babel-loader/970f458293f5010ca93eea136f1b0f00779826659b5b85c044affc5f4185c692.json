{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { assert } from '@loaders.gl/loader-utils';\nimport { getBinaryImageMetadata } from '../category-api/binary-image-api';\nexport default function parseToNodeImage(_x, _x2) {\n  return _parseToNodeImage.apply(this, arguments);\n}\nfunction _parseToNodeImage() {\n  _parseToNodeImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(arrayBuffer, options) {\n    var _ref, mimeType, _parseImageNode;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _ref = getBinaryImageMetadata(arrayBuffer) || {}, mimeType = _ref.mimeType;\n          _parseImageNode = globalThis._parseImageNode;\n          assert(_parseImageNode);\n          _context.next = 5;\n          return _parseImageNode(arrayBuffer, mimeType);\n        case 5:\n          return _context.abrupt(\"return\", _context.sent);\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _parseToNodeImage.apply(this, arguments);\n}","map":{"version":3,"names":["assert","getBinaryImageMetadata","parseToNodeImage","_x","_x2","_parseToNodeImage","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","arrayBuffer","options","_ref","mimeType","_parseImageNode","wrap","_callee$","_context","prev","next","globalThis","abrupt","sent","stop"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/images/src/lib/parsers/parse-to-node-image.ts"],"sourcesContent":["import type {ImageLoaderOptions} from '../../image-loader';\nimport type {ImageDataType} from '../../types';\nimport {assert} from '@loaders.gl/loader-utils';\nimport {getBinaryImageMetadata} from '../category-api/binary-image-api';\n\n// Note: These types should be consistent with loaders.gl/polyfills\n\ntype NDArray = {\n  shape: number[];\n  data: Uint8Array;\n  width: number;\n  height: number;\n  components: number;\n  layers: number[];\n};\n\ntype ParseImageNode = (arrayBuffer: ArrayBuffer, mimeType: string) => Promise<NDArray>;\n\n// Use polyfills if installed to parsed image using get-pixels\nexport default async function parseToNodeImage(\n  arrayBuffer: ArrayBuffer,\n  options: ImageLoaderOptions\n): Promise<ImageDataType> {\n  const {mimeType} = getBinaryImageMetadata(arrayBuffer) || {};\n\n  // @ts-ignore\n  const _parseImageNode: ParseImageNode = globalThis._parseImageNode;\n  assert(_parseImageNode); // '@loaders.gl/polyfills not installed'\n\n  // @ts-expect-error TODO should we throw error in this case?\n  return await _parseImageNode(arrayBuffer, mimeType);\n}\n"],"mappings":";;AAEA,SAAQA,MAAM,QAAO,0BAA0B;AAC/C,SAAQC,sBAAsB,QAAO,kCAAkC;AAgBvE,wBAA8BC,gBAAgBA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,iBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAY9C,SAAAF,kBAAA;EAAAA,iBAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAZe,SAAAC,QACbC,WAAwB,EACxBC,OAA2B;IAAA,IAAAC,IAAA,EAAAC,QAAA,EAAAC,eAAA;IAAA,OAAAP,mBAAA,GAAAQ,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAAP,IAAA,GAERb,sBAAsB,CAACW,WAAW,CAAC,IAAI,CAAC,CAAC,EAArDG,QAAA,GAAAD,IAAA,CAAAC,QAAA;UAGDC,eAA+B,GAAGM,UAAU,CAACN,eAAe;UAClEhB,MAAM,CAACgB,eAAe,CAAC;UAAAG,QAAA,CAAAE,IAAA;UAAA,OAGVL,eAAe,CAACJ,WAAW,EAAEG,QAAQ,CAAC;QAAA;UAAA,OAAAI,QAAA,CAAAI,MAAA,WAAAJ,QAAA,CAAAK,IAAA;QAAA;QAAA;UAAA,OAAAL,QAAA,CAAAM,IAAA;MAAA;IAAA,GAAAd,OAAA;EAAA,CACrD;EAAA,OAAAN,iBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}