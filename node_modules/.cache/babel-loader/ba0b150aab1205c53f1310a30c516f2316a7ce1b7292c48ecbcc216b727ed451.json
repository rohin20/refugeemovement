{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\n/**\n * A section of the Window.\n * Window Sections are used to group nearby cells.\n * This enables us to more quickly determine which cells to display in a given region of the Window.\n * Sections have a fixed size and contain 0 to many cells (tracked by their indices).\n */\nvar Section = /*#__PURE__*/\nfunction () {\n  function Section(_ref) {\n    var height = _ref.height,\n      width = _ref.width,\n      x = _ref.x,\n      y = _ref.y;\n    _classCallCheck(this, Section);\n    this.height = height;\n    this.width = width;\n    this.x = x;\n    this.y = y;\n    this._indexMap = {};\n    this._indices = [];\n  }\n  /** Add a cell to this section. */\n\n  _createClass(Section, [{\n    key: \"addCellIndex\",\n    value: function addCellIndex(_ref2) {\n      var index = _ref2.index;\n      if (!this._indexMap[index]) {\n        this._indexMap[index] = true;\n        this._indices.push(index);\n      }\n    }\n    /** Get all cell indices that have been added to this section. */\n  }, {\n    key: \"getCellIndices\",\n    value: function getCellIndices() {\n      return this._indices;\n    }\n    /** Intended for debugger/test purposes only */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.x, \",\").concat(this.y, \" \").concat(this.width, \"x\").concat(this.height);\n    }\n  }]);\n  return Section;\n}();\nexport { Section as default };\nimport { bpfrpt_proptype_Index } from \"./types\";\nimport { bpfrpt_proptype_SizeAndPositionInfo } from \"./types\";","map":{"version":3,"names":["_classCallCheck","_createClass","Section","_ref","height","width","x","y","_indexMap","_indices","key","value","addCellIndex","_ref2","index","push","getCellIndices","toString","concat","default","bpfrpt_proptype_Index","bpfrpt_proptype_SizeAndPositionInfo"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/react-virtualized/dist/es/Collection/Section.js"],"sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\n/**\n * A section of the Window.\n * Window Sections are used to group nearby cells.\n * This enables us to more quickly determine which cells to display in a given region of the Window.\n * Sections have a fixed size and contain 0 to many cells (tracked by their indices).\n */\nvar Section =\n/*#__PURE__*/\nfunction () {\n  function Section(_ref) {\n    var height = _ref.height,\n        width = _ref.width,\n        x = _ref.x,\n        y = _ref.y;\n\n    _classCallCheck(this, Section);\n\n    this.height = height;\n    this.width = width;\n    this.x = x;\n    this.y = y;\n    this._indexMap = {};\n    this._indices = [];\n  }\n  /** Add a cell to this section. */\n\n\n  _createClass(Section, [{\n    key: \"addCellIndex\",\n    value: function addCellIndex(_ref2) {\n      var index = _ref2.index;\n\n      if (!this._indexMap[index]) {\n        this._indexMap[index] = true;\n\n        this._indices.push(index);\n      }\n    }\n    /** Get all cell indices that have been added to this section. */\n\n  }, {\n    key: \"getCellIndices\",\n    value: function getCellIndices() {\n      return this._indices;\n    }\n    /** Intended for debugger/test purposes only */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.x, \",\").concat(this.y, \" \").concat(this.width, \"x\").concat(this.height);\n    }\n  }]);\n\n  return Section;\n}();\n\nexport { Section as default };\nimport { bpfrpt_proptype_Index } from \"./types\";\nimport { bpfrpt_proptype_SizeAndPositionInfo } from \"./types\";"],"mappings":"AAAA,OAAOA,eAAe,MAAM,uCAAuC;AACnE,OAAOC,YAAY,MAAM,oCAAoC;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,OAAO,GACX;AACA,YAAY;EACV,SAASA,OAAOA,CAACC,IAAI,EAAE;IACrB,IAAIC,MAAM,GAAGD,IAAI,CAACC,MAAM;MACpBC,KAAK,GAAGF,IAAI,CAACE,KAAK;MAClBC,CAAC,GAAGH,IAAI,CAACG,CAAC;MACVC,CAAC,GAAGJ,IAAI,CAACI,CAAC;IAEdP,eAAe,CAAC,IAAI,EAAEE,OAAO,CAAC;IAE9B,IAAI,CAACE,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,SAAS,GAAG,CAAC,CAAC;IACnB,IAAI,CAACC,QAAQ,GAAG,EAAE;EACpB;EACA;;EAGAR,YAAY,CAACC,OAAO,EAAE,CAAC;IACrBQ,GAAG,EAAE,cAAc;IACnBC,KAAK,EAAE,SAASC,YAAYA,CAACC,KAAK,EAAE;MAClC,IAAIC,KAAK,GAAGD,KAAK,CAACC,KAAK;MAEvB,IAAI,CAAC,IAAI,CAACN,SAAS,CAACM,KAAK,CAAC,EAAE;QAC1B,IAAI,CAACN,SAAS,CAACM,KAAK,CAAC,GAAG,IAAI;QAE5B,IAAI,CAACL,QAAQ,CAACM,IAAI,CAACD,KAAK,CAAC;MAC3B;IACF;IACA;EAEF,CAAC,EAAE;IACDJ,GAAG,EAAE,gBAAgB;IACrBC,KAAK,EAAE,SAASK,cAAcA,CAAA,EAAG;MAC/B,OAAO,IAAI,CAACP,QAAQ;IACtB;IACA;EAEF,CAAC,EAAE;IACDC,GAAG,EAAE,UAAU;IACfC,KAAK,EAAE,SAASM,QAAQA,CAAA,EAAG;MACzB,OAAO,EAAE,CAACC,MAAM,CAAC,IAAI,CAACZ,CAAC,EAAE,GAAG,CAAC,CAACY,MAAM,CAAC,IAAI,CAACX,CAAC,EAAE,GAAG,CAAC,CAACW,MAAM,CAAC,IAAI,CAACb,KAAK,EAAE,GAAG,CAAC,CAACa,MAAM,CAAC,IAAI,CAACd,MAAM,CAAC;IAC/F;EACF,CAAC,CAAC,CAAC;EAEH,OAAOF,OAAO;AAChB,CAAC,EAAE;AAEH,SAASA,OAAO,IAAIiB,OAAO;AAC3B,SAASC,qBAAqB,QAAQ,SAAS;AAC/C,SAASC,mCAAmC,QAAQ,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}