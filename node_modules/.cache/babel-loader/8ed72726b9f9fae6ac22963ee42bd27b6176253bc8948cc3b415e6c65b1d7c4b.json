{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { cutPolylineByGrid, cutPolygonByGrid } from './cut-by-grid';\nimport { getPointAtIndex, push } from './utils';\nvar DEFAULT_MAX_LATITUDE = 85.051129;\nexport function cutPolylineByMercatorBounds(positions, options) {\n  var _ref = options || {},\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 2 : _ref$size,\n    _ref$startIndex = _ref.startIndex,\n    startIndex = _ref$startIndex === void 0 ? 0 : _ref$startIndex,\n    _ref$endIndex = _ref.endIndex,\n    endIndex = _ref$endIndex === void 0 ? positions.length : _ref$endIndex,\n    _ref$normalize = _ref.normalize,\n    normalize = _ref$normalize === void 0 ? true : _ref$normalize;\n  var newPositions = positions.slice(startIndex, endIndex);\n  wrapLongitudesForShortestPath(newPositions, size, 0, endIndex - startIndex);\n  var parts = cutPolylineByGrid(newPositions, {\n    size: size,\n    broken: true,\n    gridResolution: 360,\n    gridOffset: [-180, -180]\n  });\n  if (normalize) {\n    var _iterator = _createForOfIteratorHelper(parts),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var part = _step.value;\n        shiftLongitudesIntoRange(part, size);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return parts;\n}\nexport function cutPolygonByMercatorBounds(positions) {\n  var holeIndices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var options = arguments.length > 2 ? arguments[2] : undefined;\n  var _ref2 = options || {},\n    _ref2$size = _ref2.size,\n    size = _ref2$size === void 0 ? 2 : _ref2$size,\n    _ref2$normalize = _ref2.normalize,\n    normalize = _ref2$normalize === void 0 ? true : _ref2$normalize,\n    _ref2$edgeTypes = _ref2.edgeTypes,\n    edgeTypes = _ref2$edgeTypes === void 0 ? false : _ref2$edgeTypes;\n  holeIndices = holeIndices || [];\n  var newPositions = [];\n  var newHoleIndices = [];\n  var srcStartIndex = 0;\n  var targetIndex = 0;\n  for (var ringIndex = 0; ringIndex <= holeIndices.length; ringIndex++) {\n    var srcEndIndex = holeIndices[ringIndex] || positions.length;\n    var targetStartIndex = targetIndex;\n    var splitIndex = findSplitIndex(positions, size, srcStartIndex, srcEndIndex);\n    for (var i = splitIndex; i < srcEndIndex; i++) {\n      newPositions[targetIndex++] = positions[i];\n    }\n    for (var _i = srcStartIndex; _i < splitIndex; _i++) {\n      newPositions[targetIndex++] = positions[_i];\n    }\n    wrapLongitudesForShortestPath(newPositions, size, targetStartIndex, targetIndex);\n    insertPoleVertices(newPositions, size, targetStartIndex, targetIndex, options === null || options === void 0 ? void 0 : options.maxLatitude);\n    srcStartIndex = srcEndIndex;\n    newHoleIndices[ringIndex] = targetIndex;\n  }\n  newHoleIndices.pop();\n  var parts = cutPolygonByGrid(newPositions, newHoleIndices, {\n    size: size,\n    gridResolution: 360,\n    gridOffset: [-180, -180],\n    edgeTypes: edgeTypes\n  });\n  if (normalize) {\n    var _iterator2 = _createForOfIteratorHelper(parts),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var part = _step2.value;\n        shiftLongitudesIntoRange(part.positions, size);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  return parts;\n}\nfunction findSplitIndex(positions, size, startIndex, endIndex) {\n  var maxLat = -1;\n  var pointIndex = -1;\n  for (var i = startIndex + 1; i < endIndex; i += size) {\n    var lat = Math.abs(positions[i]);\n    if (lat > maxLat) {\n      maxLat = lat;\n      pointIndex = i - 1;\n    }\n  }\n  return pointIndex;\n}\nfunction insertPoleVertices(positions, size, startIndex, endIndex) {\n  var maxLatitude = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : DEFAULT_MAX_LATITUDE;\n  var firstLng = positions[startIndex];\n  var lastLng = positions[endIndex - size];\n  if (Math.abs(firstLng - lastLng) > 180) {\n    var p = getPointAtIndex(positions, 0, size, startIndex);\n    p[0] += Math.round((lastLng - firstLng) / 360) * 360;\n    push(positions, p);\n    p[1] = Math.sign(p[1]) * maxLatitude;\n    push(positions, p);\n    p[0] = firstLng;\n    push(positions, p);\n  }\n}\nfunction wrapLongitudesForShortestPath(positions, size, startIndex, endIndex) {\n  var prevLng = positions[0];\n  var lng;\n  for (var i = startIndex; i < endIndex; i += size) {\n    lng = positions[i];\n    var delta = lng - prevLng;\n    if (delta > 180 || delta < -180) {\n      lng -= Math.round(delta / 360) * 360;\n    }\n    positions[i] = prevLng = lng;\n  }\n}\nfunction shiftLongitudesIntoRange(positions, size) {\n  var refLng;\n  var pointCount = positions.length / size;\n  for (var i = 0; i < pointCount; i++) {\n    refLng = positions[i * size];\n    if ((refLng + 180) % 360 !== 0) {\n      break;\n    }\n  }\n  var delta = -Math.round(refLng / 360) * 360;\n  if (delta === 0) {\n    return;\n  }\n  for (var _i2 = 0; _i2 < pointCount; _i2++) {\n    positions[_i2 * size] += delta;\n  }\n}","map":{"version":3,"names":["cutPolylineByGrid","cutPolygonByGrid","getPointAtIndex","push","DEFAULT_MAX_LATITUDE","cutPolylineByMercatorBounds","positions","options","_ref","_ref$size","size","_ref$startIndex","startIndex","_ref$endIndex","endIndex","length","_ref$normalize","normalize","newPositions","slice","wrapLongitudesForShortestPath","parts","broken","gridResolution","gridOffset","_iterator","_createForOfIteratorHelper","_step","s","n","done","part","value","shiftLongitudesIntoRange","err","e","f","cutPolygonByMercatorBounds","holeIndices","arguments","undefined","_ref2","_ref2$size","_ref2$normalize","_ref2$edgeTypes","edgeTypes","newHoleIndices","srcStartIndex","targetIndex","ringIndex","srcEndIndex","targetStartIndex","splitIndex","findSplitIndex","i","insertPoleVertices","maxLatitude","pop","_iterator2","_step2","maxLat","pointIndex","lat","Math","abs","firstLng","lastLng","p","round","sign","prevLng","lng","delta","refLng","pointCount"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@math.gl/polygon/src/cut-by-mercator-bounds.ts"],"sourcesContent":["import {cutPolylineByGrid, cutPolygonByGrid} from './cut-by-grid';\nimport {getPointAtIndex, push} from './utils';\nimport type {Polygon} from './cut-by-grid';\nimport type {NumericArray} from '@math.gl/core';\n\n// https://en.wikipedia.org/wiki/Web_Mercator_projection\nconst DEFAULT_MAX_LATITUDE = 85.051129;\n\n/** https://user-images.githubusercontent.com/2059298/78465769-938b7a00-76ae-11ea-9b95-1f4c26425ab9.png */\nexport function cutPolylineByMercatorBounds(\n  positions: Readonly<NumericArray>,\n  options?: {\n    size?: number;\n    startIndex?: number;\n    endIndex?: number;\n    normalize?: boolean;\n  }\n): number[][] {\n  const {size = 2, startIndex = 0, endIndex = positions.length, normalize = true} = options || {};\n\n  // Remap longitudes so that each segment takes the shorter path\n  const newPositions = positions.slice(startIndex, endIndex);\n  wrapLongitudesForShortestPath(newPositions, size, 0, endIndex - startIndex);\n\n  const parts = cutPolylineByGrid(newPositions, {\n    size,\n    broken: true,\n    gridResolution: 360,\n    gridOffset: [-180, -180]\n  }) as number[][];\n\n  if (normalize) {\n    // Each part is guaranteed to be in a single copy of the world\n    // Map longitudes back to [-180, 180]\n    for (const part of parts) {\n      shiftLongitudesIntoRange(part, size);\n    }\n  }\n  return parts;\n}\n\n/** https://user-images.githubusercontent.com/2059298/78465770-94241080-76ae-11ea-809a-6a8534dac1d9.png */\nexport function cutPolygonByMercatorBounds(\n  positions: Readonly<NumericArray>,\n  holeIndices: Readonly<NumericArray> | null = null,\n  options?: {\n    size?: number;\n    normalize?: boolean;\n    maxLatitude?: number;\n    edgeTypes?: boolean;\n  }\n): Polygon[] {\n  const {size = 2, normalize = true, edgeTypes = false} = options || {};\n  holeIndices = holeIndices || [];\n  const newPositions: number[] = [];\n  const newHoleIndices: number[] = [];\n  let srcStartIndex = 0;\n  let targetIndex = 0;\n\n  for (let ringIndex = 0; ringIndex <= holeIndices.length; ringIndex++) {\n    // srcStartIndex/srcEndIndex define the ring in the original positions\n    const srcEndIndex = holeIndices[ringIndex] || positions.length;\n    // targetStartIndex/targetIndex define the ring in newPositions\n    const targetStartIndex = targetIndex;\n\n    // In case the ring contains a pole (e.g. Antarctica), we'll have to insert vertices\n    // The insertion point is defined by the vertex closest to the pole\n    // Split the the ring by the insertion point when copying to newPositions\n    const splitIndex = findSplitIndex(positions, size, srcStartIndex, srcEndIndex);\n    for (let i = splitIndex; i < srcEndIndex; i++) {\n      newPositions[targetIndex++] = positions[i];\n    }\n    for (let i = srcStartIndex; i < splitIndex; i++) {\n      newPositions[targetIndex++] = positions[i];\n    }\n\n    // Remap longitudes so that each segment takes the shorter path\n    wrapLongitudesForShortestPath(newPositions, size, targetStartIndex, targetIndex);\n\n    // Handle the case when the ring contains a pole\n    insertPoleVertices(newPositions, size, targetStartIndex, targetIndex, options?.maxLatitude);\n\n    srcStartIndex = srcEndIndex;\n    newHoleIndices[ringIndex] = targetIndex;\n  }\n  newHoleIndices.pop();\n\n  const parts = cutPolygonByGrid(newPositions, newHoleIndices, {\n    size,\n    gridResolution: 360,\n    gridOffset: [-180, -180],\n    edgeTypes\n  });\n\n  if (normalize) {\n    // Each part is guaranteed to be in a single copy of the world\n    // Map longitudes back to [-180, 180]\n    for (const part of parts) {\n      // @ts-expect-error (mutates readonly array) May mutate newPositions, which is created by us\n      shiftLongitudesIntoRange(part.positions, size);\n    }\n  }\n  return parts;\n}\n\n/* Helpers */\n\n// See comments for insertPoleVertices\nfunction findSplitIndex(\n  positions: Readonly<NumericArray>,\n  size: number,\n  startIndex: number,\n  endIndex: number\n): number {\n  let maxLat = -1;\n  let pointIndex = -1;\n  for (let i = startIndex + 1; i < endIndex; i += size) {\n    const lat = Math.abs(positions[i]);\n    if (lat > maxLat) {\n      maxLat = lat;\n      pointIndex = i - 1;\n    }\n  }\n  return pointIndex;\n}\n\n// https://user-images.githubusercontent.com/2059298/78857483-5987e400-79de-11ea-98fc-0631287a8431.png\n//\n// If the polygon contains a pole, to tesselate it correctly, we need to insert the edge\n// of map into the polygon. This requires adding two vertices that represent the pole, by\n// drawing a perpendicular line to the Mercator map edge from a selected vertex on the ring.\n//\n// We select the insertion position carefully so that the inserted line segments do not\n// intersect with the ring itself. This is ensured by findSplitIndex, which returns the\n// vertex closest to the pole.\nfunction insertPoleVertices(\n  positions: number[],\n  size: number,\n  startIndex: number,\n  endIndex: number,\n  maxLatitude: number = DEFAULT_MAX_LATITUDE\n): void {\n  // Check if the ring contains a pole\n  const firstLng = positions[startIndex];\n  const lastLng = positions[endIndex - size];\n  if (Math.abs(firstLng - lastLng) > 180) {\n    // The ring does not make a round trip\n    // Add the nearest pole to the vertices so that the polygon tesselates correctly\n    const p = getPointAtIndex(positions, 0, size, startIndex);\n    // Copy the first vertex to the world of the last vertex\n    p[0] += Math.round((lastLng - firstLng) / 360) * 360;\n    push(positions, p);\n    // Project the copied vertex to the edge of the map\n    p[1] = Math.sign(p[1]) * maxLatitude;\n    push(positions, p);\n    // Project the first vertex to the edge of the map\n    p[0] = firstLng;\n    push(positions, p);\n  }\n}\n\nfunction wrapLongitudesForShortestPath(\n  positions: NumericArray,\n  size: number,\n  startIndex: number,\n  endIndex: number\n): void {\n  let prevLng: number = positions[0];\n  let lng: number;\n  for (let i = startIndex; i < endIndex; i += size) {\n    lng = positions[i];\n    const delta = lng - prevLng;\n    if (delta > 180 || delta < -180) {\n      lng -= Math.round(delta / 360) * 360;\n    }\n    positions[i] = prevLng = lng;\n  }\n}\n\nfunction shiftLongitudesIntoRange(positions: NumericArray, size: number): void {\n  let refLng: number;\n  const pointCount = positions.length / size;\n\n  // Find a longitude that is not on the edge of a world\n  // Which we will use to determine which world copy it is\n  for (let i = 0; i < pointCount; i++) {\n    refLng = positions[i * size];\n    if ((refLng + 180) % 360 !== 0) {\n      break;\n    }\n  }\n\n  const delta = -Math.round(refLng / 360) * 360;\n  if (delta === 0) {\n    return;\n  }\n  for (let i = 0; i < pointCount; i++) {\n    positions[i * size] += delta;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}