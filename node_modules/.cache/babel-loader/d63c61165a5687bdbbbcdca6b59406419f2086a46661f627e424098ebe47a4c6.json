{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNewDatasetColor = getNewDatasetColor;\nexports.createNewDataEntry = createNewDataEntry;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _lodash = _interopRequireDefault(require(\"lodash.uniq\"));\nvar _keplerTable = _interopRequireDefault(require(\"./kepler-table\"));\nvar _utils = require(\"@kepler.gl/utils\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\n\n// apply a color for each dataset\n// to use as label colors\nvar datasetColors = ['#8F2FBF', '#005CFF', '#C06C84', '#F8B195', '#547A82', '#3EACA8', '#A2D4AB'].map(_utils.hexToRgb);\n/** @type {typeof import('./dataset-utils').getNewDatasetColor} */\n\nfunction getNewDatasetColor(datasets) {\n  var presetColors = datasetColors.map(String);\n  var usedColors = (0, _lodash[\"default\"])(Object.values(datasets).map(function (d) {\n    return String(d.color);\n  })).filter(function (c) {\n    return presetColors.includes(c);\n  });\n  if (usedColors.length === presetColors.length) {\n    // if we already depleted the pool of color\n    return _utils.datasetColorMaker.next().value;\n  }\n  var color = _utils.datasetColorMaker.next().value;\n  while (usedColors.includes(String(color))) {\n    color = _utils.datasetColorMaker.next().value;\n  }\n  return color;\n}\n/**\n * Take datasets payload from addDataToMap, create datasets entry save to visState\n */\n\nfunction createNewDataEntry(_ref) {\n  var info = _ref.info,\n    data = _ref.data,\n    opts = (0, _objectWithoutProperties2[\"default\"])(_ref, [\"info\", \"data\"]);\n  var datasets = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var validatedData = (0, _utils.validateInputData)(data);\n  if (!validatedData) {\n    return {};\n  }\n  info = info || {};\n  var color = info.color || getNewDatasetColor(datasets);\n  var keplerTable = new _keplerTable[\"default\"](_objectSpread({\n    info: info,\n    data: validatedData,\n    color: color\n  }, opts));\n  return (0, _defineProperty2[\"default\"])({}, keplerTable.id, keplerTable);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","getNewDatasetColor","_defineProperty2","_interopRequireDefault","require","_objectWithoutProperties2","_lodash","_utils","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","datasetColors","map","hexToRgb","datasets","presetColors","String","usedColors","values","d","color","datasetColorMaker","next","includes"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/table/src/dataset-utils.ts"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport uniq from 'lodash.uniq';\nimport KeplerTable, {Datasets} from './kepler-table';\nimport {ProtoDataset, RGBColor} from '@kepler.gl/types';\n\nimport {hexToRgb, validateInputData, datasetColorMaker} from '@kepler.gl/utils';\n\n// apply a color for each dataset\n// to use as label colors\nconst datasetColors = [\n  '#8F2FBF',\n  '#005CFF',\n  '#C06C84',\n  '#F8B195',\n  '#547A82',\n  '#3EACA8',\n  '#A2D4AB'\n].map(hexToRgb);\n\n/** @type {typeof import('./dataset-utils').getNewDatasetColor} */\nexport function getNewDatasetColor(datasets: Datasets): RGBColor {\n  const presetColors = datasetColors.map(String);\n  const usedColors = uniq(Object.values(datasets).map(d => String(d.color))).filter(c =>\n    presetColors.includes(c)\n  );\n\n  if (usedColors.length === presetColors.length) {\n    // if we already depleted the pool of color\n    return datasetColorMaker.next().value;\n  }\n\n  let color = datasetColorMaker.next().value;\n  while (usedColors.includes(String(color))) {\n    color = datasetColorMaker.next().value;\n  }\n\n  return color;\n}\n\n/**\n * Take datasets payload from addDataToMap, create datasets entry save to visState\n */\nexport function createNewDataEntry(\n  {info, data, ...opts}: ProtoDataset,\n  datasets: Datasets = {}\n): Datasets {\n  const validatedData = validateInputData(data);\n  if (!validatedData) {\n    return {};\n  }\n\n  info = info || {};\n  const color = info.color || getNewDatasetColor(datasets);\n\n  const keplerTable = new KeplerTable({info, data: validatedData, color, ...opts});\n  return {\n    [keplerTable.id]: keplerTable\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;AAoBA;;AACA;;AAGA;;;;;AAEAA,MAAA,CAAAC,cAAA,CAAAC,OAAA;EACAC,KAAA;AACA;AAUAD,OAAA,CAAAE,kBAAA,GAAAA,kBAAA;;AAEE,IAAAC,gBAAkB,GAAGC,sBAAA,CAArBC,OAAA;AACqD,IAAAC,yBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAA8B,IAAAE,OACjF,GAAAH,sBADiF,CAAAC,OAAA;;AAKjF,IAAAG,MAAA,GAAAH,OAAA;AAED,SAAAI,QAAAC,MAAA,EAAAC,cAAA;EAAA,IAAAC,IAAA,GAAAd,MAAA,CAAAc,IAAA,CAAAF,MAAA;EAAA,IAAAZ,MAAA,CAAAe,qBAAA;IAAA,IAAAC,OAAA,GAAAhB,MAAA,CAAAe,qBAAA,CAAAH,MAAA;IAAA,IAAAC,cAAA,EAAAG,OAAA,GAAAA,OAAA,CAAAC,MAAA,WAAAC,GAAA;MAAA,OAAAlB,MAAA,CAAAmB,wBAAA,CAAAP,MAAA,EAAAM,GAAA,EAAAE,UAAA;IAAA;IAAAN,IAAA,CAAAO,IAAA,CAAAC,KAAA,CAAAR,IAAA,EAAAE,OAAA;EAAA;EAAA,OAAAF,IAAA;AAAA;AAED,SAAIS,aAAQA,CAAAC,MAAA;EAAA,SAAkBC,CAAlB,GAAyB,GAAAA,CAAA,GAArCC,SAAA,CAAAC,MAAA,EAAAF,CAAA;IAAA,IAAAG,MAAA,GAAAF,SAAA,CAAAD,CAAA,YAAAC,SAAA,CAAAD,CAAA;IAAA,IAAAA,CAAA;MAAAd,OAAA,CAAAX,MAAA,CAAA4B,MAAA,SAAAC,OAAA,WAAAC,GAAA;QAAA,IAAAzB,gBAAA,aAAAmB,MAAA,EAAAM,GAAA,EAAAF,MAAA,CAAAE,GAAA;MAAA;IAAA,WAAA9B,MAAA,CAAA+B,yBAAA;MAAA/B,MAAA,CAAAgC,gBAAA,CAAAR,MAAA,EAAAxB,MAAA,CAAA+B,yBAAA,CAAAH,MAAA;IAAA;MAAAjB,OAAA,CAAAX,MAAA,CAAA4B,MAAA,GAAAC,OAAA,WAAAC,GAAA;QAAA9B,MAAA,CAAAC,cAAA,CAAAuB,MAAA,EAAAM,GAAA,EAAA9B,MAAA,CAAAmB,wBAAA,CAAAS,MAAA,EAAAE,GAAA;MAAA;IAAA;EAAA;EAAA,OAAAN,MAAA;AAAA;;AACA;AACE;AACD,IAAAS,aAAA,iFAAAC,GAAA,CAAAxB,MAAA,CAAAyB,QAAA;;;AAGF,SAAA/B,mBAAAgC,QAAA;EAED,IAAAC,YAAA,GAAAJ,aAAA,CAAAC,GAAA,CAAAI,MAAA;EACA,IAAAC,UAAA,OAAA9B,OAAA,aAAAT,MAAA,CAAAwC,MAAA,CAAAJ,QAAA,EAAAF,GAAA,WAAAO,CAAA;IACA,OAAAH,MAAA,CAAAG,CAAA,CAAAC,KAAA;;;EACO;EAGK,IAFHH,UAEG,CAAAZ,MAAA,KAAAU,YAAA,CAAAV,MAAA;IAAA;IAAA,OADVjB,MACU,CAAAiC,iBAAA,CAAAC,IAAA,GAAAzC,KAAA;EACV;EACA,IAAIuC,KAAC,GAAAhC,MAAL,CAAAiC,iBAAoB,CAAAC,IAAA,GAAAzC,KAAA;EAEnB,OAAAoC,UAAA,CAAAM,QAAA,CAAAP,MAAA,CAAAI,KAAA;;EAED;EAGA,OAAMA,KAAA;AAA+B;AAAM;AAAqB;AAA5C"},"metadata":{},"sourceType":"script","externalDependencies":[]}