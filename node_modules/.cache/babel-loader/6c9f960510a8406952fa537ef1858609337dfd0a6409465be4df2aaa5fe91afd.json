{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toggleSplitMap = exports.updateMap = exports.fitBounds = exports.togglePerspective = void 0;\nvar _toolkit = require(\"@reduxjs/toolkit\");\nvar _actionTypes = _interopRequireDefault(require(\"./action-types\")); /**\n                                                                      *\n                                                                      * Toggle between 3d and 2d map.\n                                                                      * @memberof mapStateActions\n                                                                      * @public\n                                                                      * @example\n                                                                      * import {togglePerspective} from 'kepler.gl/actions';\n                                                                      * this.props.dispatch(togglePerspective());\n                                                                      */\nvar togglePerspective = (0, _toolkit.createAction)(_actionTypes[\"default\"].TOGGLE_PERSPECTIVE);\nexports.togglePerspective = togglePerspective;\n\n/**\n * Fit map viewport to bounds\n * @memberof mapStateActions\n * @param {Array<Number>} bounds as `[lngMin, latMin, lngMax, latMax]`\n * @public\n * @example\n * import {fitBounds} from 'kepler.gl/actions';\n * this.props.dispatch(fitBounds([-122.23, 37.127, -122.11, 37.456]));\n */\nvar fitBounds = (0, _toolkit.createAction)(_actionTypes[\"default\"].FIT_BOUNDS, function (bounds) {\n  return {\n    payload: bounds\n  };\n});\nexports.fitBounds = fitBounds;\n\n/**\n * Update map viewport\n * @memberof mapStateActions\n * @param {Object} viewport viewport object container one or any of these properties `width`, `height`, `latitude` `longitude`, `zoom`, `pitch`, `bearing`, `dragRotate`\n * @param {Number} [viewport.width] Width of viewport\n * @param {Number} [viewport.height] Height of viewport\n * @param {Number} [viewport.zoom] Zoom of viewport\n * @param {Number} [viewport.pitch] Camera angle in degrees (0 is straight down)\n * @param {Number} [viewport.bearing] Map rotation in degrees (0 means north is up)\n * @param {Number} [viewport.latitude] Latitude center of viewport on map in mercator projection\n * @param {Number} [viewport.longitude] Longitude Center of viewport on map in mercator projection\n * @param {boolean} [viewport.dragRotate] Whether to enable drag and rotate map into perspective viewport\n * @public\n * @example\n * import {updateMap} from 'kepler.gl/actions';\n * this.props.dispatch(updateMap({latitude: 37.75043, longitude: -122.34679, width: 800, height: 1200}));\n */\nvar updateMap = (0, _toolkit.createAction)(_actionTypes[\"default\"].UPDATE_MAP, function (viewport) {\n  return {\n    payload: viewport\n  };\n});\nexports.updateMap = updateMap;\n\n/**\n * Toggle between single map or split maps\n * @memberof mapStateActions\n * @param {Number} [index] index is provided, close split map at index\n * @public\n * @example\n * import {toggleSplitMap} from 'kepler.gl/actions';\n * this.props.dispatch(toggleSplitMap());\n */\nvar toggleSplitMap = (0, _toolkit.createAction)(_actionTypes[\"default\"].TOGGLE_SPLIT_MAP, function (index) {\n  return {\n    payload: index\n  };\n});\n/**\n * This declaration is needed to group actions in docs\n */\n\n/**\n * Actions handled mostly by  `mapState` reducer.\n * They manage map viewport update, toggle between 2d and 3d map,\n * toggle between single and split maps.\n *\n * @public\n */\n\n/* eslint-disable no-unused-vars */\n// @ts-ignore\n\nexports.toggleSplitMap = toggleSplitMap;\nvar mapStateActions = null;\n/* eslint-enable no-unused-vars */","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","toggleSplitMap","updateMap","fitBounds","togglePerspective","_toolkit","_actionTypes","createAction","TOGGLE_PERSPECTIVE","FIT_BOUNDS","bounds","payload","UPDATE_MAP","viewport","TOGGLE_SPLIT_MAP","index"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/actions/src/map-state-actions.ts"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {createAction} from '@reduxjs/toolkit';\nimport {default as ActionTypes} from './action-types';\nimport {Bounds, Merge, Viewport} from '@kepler.gl/types';\n\nexport type TogglePerspectiveUpdaterAction = {};\n/**\n *\n * Toggle between 3d and 2d map.\n * @memberof mapStateActions\n * @public\n * @example\n * import {togglePerspective} from 'kepler.gl/actions';\n * this.props.dispatch(togglePerspective());\n */\nexport const togglePerspective: () => Merge<\n  TogglePerspectiveUpdaterAction,\n  {type: typeof ActionTypes.TOGGLE_PERSPECTIVE}\n> = createAction(ActionTypes.TOGGLE_PERSPECTIVE);\n\nexport type FitBoundsUpdaterAction = {payload: Bounds};\n/**\n * Fit map viewport to bounds\n * @memberof mapStateActions\n * @param {Array<Number>} bounds as `[lngMin, latMin, lngMax, latMax]`\n * @public\n * @example\n * import {fitBounds} from 'kepler.gl/actions';\n * this.props.dispatch(fitBounds([-122.23, 37.127, -122.11, 37.456]));\n */\nexport const fitBounds: (\n  payload: Bounds\n) => Merge<\n  FitBoundsUpdaterAction,\n  {type: typeof ActionTypes.FIT_BOUNDS}\n> = createAction(ActionTypes.FIT_BOUNDS, (bounds: Bounds) => ({payload: bounds}));\n\nexport type UpdateMapUpdaterAction = {payload: Viewport};\n/**\n * Update map viewport\n * @memberof mapStateActions\n * @param {Object} viewport viewport object container one or any of these properties `width`, `height`, `latitude` `longitude`, `zoom`, `pitch`, `bearing`, `dragRotate`\n * @param {Number} [viewport.width] Width of viewport\n * @param {Number} [viewport.height] Height of viewport\n * @param {Number} [viewport.zoom] Zoom of viewport\n * @param {Number} [viewport.pitch] Camera angle in degrees (0 is straight down)\n * @param {Number} [viewport.bearing] Map rotation in degrees (0 means north is up)\n * @param {Number} [viewport.latitude] Latitude center of viewport on map in mercator projection\n * @param {Number} [viewport.longitude] Longitude Center of viewport on map in mercator projection\n * @param {boolean} [viewport.dragRotate] Whether to enable drag and rotate map into perspective viewport\n * @public\n * @example\n * import {updateMap} from 'kepler.gl/actions';\n * this.props.dispatch(updateMap({latitude: 37.75043, longitude: -122.34679, width: 800, height: 1200}));\n */\n\nexport const updateMap: (\n  payload: Viewport\n) => Merge<\n  UpdateMapUpdaterAction,\n  {type: typeof ActionTypes.UPDATE_MAP}\n> = createAction(ActionTypes.UPDATE_MAP, (viewport: Viewport) => ({payload: viewport}));\n\nexport type ToggleSplitMapUpdaterAction = {\n  payload: number;\n};\n/**\n * Toggle between single map or split maps\n * @memberof mapStateActions\n * @param {Number} [index] index is provided, close split map at index\n * @public\n * @example\n * import {toggleSplitMap} from 'kepler.gl/actions';\n * this.props.dispatch(toggleSplitMap());\n */\nexport const toggleSplitMap: (\n  payload: number\n) => Merge<\n  ToggleSplitMapUpdaterAction,\n  {type: typeof ActionTypes.TOGGLE_SPLIT_MAP}\n> = createAction(ActionTypes.TOGGLE_SPLIT_MAP, (index: number) => ({payload: index}));\n\n/**\n * This declaration is needed to group actions in docs\n */\n/**\n * Actions handled mostly by  `mapState` reducer.\n * They manage map viewport update, toggle between 2d and 3d map,\n * toggle between single and split maps.\n *\n * @public\n */\n/* eslint-disable no-unused-vars */\n// @ts-ignore\nconst mapStateActions = null;\n/* eslint-enable no-unused-vars */\n"],"mappings":";;;;;;;;;AAoBA;;AACA;;AArBA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,IAAAA,sBAAA,GAAAC,OAAA;AAEAC,MAAA,CAAAC,cAAA,CAAAC,OAAA;EACAC,KAAA;AACA;AACAD,OAAA,CAAAE,cAAA,GAAAF,OAAA,CAAAG,SAAA,GAAAH,OAAA,CAAAI,SAAA,GAAAJ,OAAA,CAAAK,iBAAA;AAEA,IAAAC,QAAA,GAAAT,OAAA;AAEA,IAAAU,YAAA,GAAAX,sBAAA,CAAAC,OAAA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAAQ,iBAAA,OAAAC,QAAA,CAAAE,YAAA,EAAAD,YAAA,YAAAE,kBAAA;AACAT,OAAA,CAAAK,iBAAA,GAAAA,iBAAA;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAAD,SAAA,OAAAE,QAAA,CAAAE,YAAA,EAAAD,YAAA,YAAAG,UAAA,YAAAC,MAAA;EACA;IACaC,OAAA,EAKZD;EAAwC;AAAsB;AAADX,OAArB,CAAAI,SAAA,GAAAA,SAAA;;;;AAGzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAAD,SAAA,OAAAG,QAAA,CAAAE,YAAA,EAAAD,YAAA,YAAAM,UAAA,YAAAC,QAAA;EACA;IAEaF,OAAA,EAKZE;EAAwC;AAA0B;AAADd,OAAzB,CAAAG,SAAA,GAAAA,SAAA;;;;AAKzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAAD,cAAA,OAAAI,QAAA,CAAAE,YAAA,EAAAD,YAAA,YAAAQ,gBAAA,YAAAC,KAAA;EACA;IACaJ,OAAA,EAAAI;EAKkC;AAAqB;AAAD;AAApB;AAE/C;;AAEA;;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAEAhB,OAAA,CAAAE,cAAA,GAAAA,cAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}