{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMapDimForSplitMap = getMapDimForSplitMap;\nexports.toggleSplitMapUpdater = exports.receiveMapConfigUpdater = exports.resetMapConfigUpdater = exports.togglePerspectiveUpdater = exports.fitBoundsUpdater = exports.updateMapUpdater = exports.INITIAL_MAP_STATE = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _utils = require(\"@kepler.gl/utils\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\n\n/**\n * Updaters for `mapState` reducer. Can be used in your root reducer to directly modify kepler.gl's state.\n * Read more about [Using updaters](../advanced-usage/using-updaters.md)\n * @public\n * @example\n *\n * import keplerGlReducer, {mapStateUpdaters} from 'kepler.gl/reducers';\n * // Root Reducer\n * const reducers = combineReducers({\n *  keplerGl: keplerGlReducer,\n *  app: appReducer\n * });\n *\n * const composedReducer = (state, action) => {\n *  switch (action.type) {\n *    // click button to close side panel\n *    case 'CLICK_BUTTON':\n *      return {\n *        ...state,\n *        keplerGl: {\n *          ...state.keplerGl,\n *          foo: {\n *             ...state.keplerGl.foo,\n *             mapState: mapStateUpdaters.fitBoundsUpdater(\n *               mapState, {payload: [127.34, 31.09, 127.56, 31.59]]}\n *             )\n *          }\n *        }\n *      };\n *  }\n *  return reducers(state, action);\n * };\n *\n * export default composedReducer;\n */\n\n/* eslint-disable no-unused-vars */\n// @ts-ignore\nvar mapStateUpdaters = null;\n/* eslint-enable no-unused-vars */\n\n/**\n * Default initial `mapState`\n * @memberof mapStateUpdaters\n * @constant\n * @property pitch Default: `0`\n * @property bearing Default: `0`\n * @property latitude Default: `37.75043`\n * @property longitude Default: `-122.34679`\n * @property zoom Default: `9`\n * @property dragRotate Default: `false`\n * @property width Default: `800`\n * @property height Default: `800`\n * @property isSplit Default: `false`\n * @public\n */\n\nvar INITIAL_MAP_STATE = {\n  pitch: 0,\n  bearing: 0,\n  latitude: 37.75043,\n  longitude: -122.34679,\n  zoom: 9,\n  dragRotate: false,\n  width: 800,\n  height: 800,\n  isSplit: false\n};\n/* Updaters */\n\n/**\n * Update map viewport\n * @memberof mapStateUpdaters\n * @public\n */\n\nexports.INITIAL_MAP_STATE = INITIAL_MAP_STATE;\nvar updateMapUpdater = function updateMapUpdater(state, action) {\n  return _objectSpread(_objectSpread({}, state), action.payload || {});\n};\n/**\n * Fit map viewport to bounds\n * @memberof mapStateUpdaters\n * @public\n */\n\nexports.updateMapUpdater = updateMapUpdater;\nvar fitBoundsUpdater = function fitBoundsUpdater(state, action) {\n  var centerAndZoom = (0, _utils.getCenterAndZoomFromBounds)(action.payload, {\n    width: state.width,\n    height: state.height\n  });\n  if (!centerAndZoom) {\n    // bounds is invalid\n    return state;\n  }\n  return _objectSpread(_objectSpread({}, state), {}, {\n    latitude: centerAndZoom.center[1],\n    longitude: centerAndZoom.center[0]\n  }, Number.isFinite(centerAndZoom.zoom) ? {\n    zoom: centerAndZoom.zoom\n  } : {});\n};\n/**\n * Toggle between 3d and 2d map.\n * @memberof mapStateUpdaters\n * @public\n */\n\nexports.fitBoundsUpdater = fitBoundsUpdater;\nvar togglePerspectiveUpdater = function togglePerspectiveUpdater(state, action) {\n  return _objectSpread(_objectSpread(_objectSpread({}, state), {\n    pitch: state.dragRotate ? 0 : 50,\n    bearing: state.dragRotate ? 0 : 24\n  }), {}, {\n    dragRotate: !state.dragRotate\n  });\n};\n/**\n * reset mapState to initial State\n * @memberof mapStateUpdaters\n * @public\n */\n\nexports.togglePerspectiveUpdater = togglePerspectiveUpdater;\nvar resetMapConfigUpdater = function resetMapConfigUpdater(state) {\n  return _objectSpread(_objectSpread(_objectSpread({}, INITIAL_MAP_STATE), state.initialState), {}, {\n    initialState: state.initialState\n  });\n}; // consider case where you have a split map and user wants to reset\n\n/**\n * Update `mapState` to propagate a new config\n * @memberof mapStateUpdaters\n * @public\n */\n\nexports.resetMapConfigUpdater = resetMapConfigUpdater;\nvar receiveMapConfigUpdater = function receiveMapConfigUpdater(state, _ref) {\n  var _ref$payload = _ref.payload,\n    _ref$payload$config = _ref$payload.config,\n    config = _ref$payload$config === void 0 ? {} : _ref$payload$config,\n    _ref$payload$options = _ref$payload.options,\n    options = _ref$payload$options === void 0 ? {} : _ref$payload$options,\n    _ref$payload$bounds = _ref$payload.bounds,\n    bounds = _ref$payload$bounds === void 0 ? null : _ref$payload$bounds;\n  var _ref2 = config || {},\n    mapState = _ref2.mapState; // merged received mapstate with previous state\n\n  var mergedState = _objectSpread(_objectSpread({}, state), mapState); // if center map\n  // center map will override mapState config\n\n  if (options.centerMap && bounds) {\n    mergedState = fitBoundsUpdater(mergedState, {\n      payload: bounds\n    });\n  }\n  return _objectSpread(_objectSpread({}, mergedState), getMapDimForSplitMap(mergedState.isSplit, state));\n};\n/**\n * Toggle between one or split maps\n * @memberof mapStateUpdaters\n * @public\n */\n\nexports.receiveMapConfigUpdater = receiveMapConfigUpdater;\nvar toggleSplitMapUpdater = function toggleSplitMapUpdater(state, action) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    isSplit: !state.isSplit\n  }, getMapDimForSplitMap(!state.isSplit, state));\n}; // Helpers\n\nexports.toggleSplitMapUpdater = toggleSplitMapUpdater;\nfunction getMapDimForSplitMap(isSplit, state) {\n  // cases:\n  // 1. state split: true - isSplit: true\n  // do nothing\n  // 2. state split: false - isSplit: false\n  // do nothing\n  if (state.isSplit === isSplit) {\n    return {};\n  }\n  var width = state.isSplit && !isSplit ?\n  // 3. state split: true - isSplit: false\n  // double width\n  state.width * 2 :\n  // 4. state split: false - isSplit: true\n  // split width\n  state.width / 2;\n  return {\n    width: width\n  };\n}","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","getMapDimForSplitMap","toggleSplitMapUpdater","receiveMapConfigUpdater","resetMapConfigUpdater","togglePerspectiveUpdater","fitBoundsUpdater","updateMapUpdater","INITIAL_MAP_STATE","_defineProperty2","_utils","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","mapStateUpdaters","pitch","bearing","latitude","longitude","zoom","dragRotate","width","height","state","action","payload","centerAndZoom","getCenterAndZoomFromBounds","center","Number","isFinite","initialState","_ref","_ref$payload","config","_ref$payload$config","_ref$payload$options","options","_ref$payload$bounds","bounds","_ref2","centerMap","mergedState","isSplit"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/reducers/src/map-state-updaters.ts"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {getCenterAndZoomFromBounds} from '@kepler.gl/utils';\nimport {MapStateActions, ReceiveMapConfigPayload, ActionTypes} from '@kepler.gl/actions';\nimport {MapState} from '@kepler.gl/types';\n\n/**\n * Updaters for `mapState` reducer. Can be used in your root reducer to directly modify kepler.gl's state.\n * Read more about [Using updaters](../advanced-usage/using-updaters.md)\n * @public\n * @example\n *\n * import keplerGlReducer, {mapStateUpdaters} from 'kepler.gl/reducers';\n * // Root Reducer\n * const reducers = combineReducers({\n *  keplerGl: keplerGlReducer,\n *  app: appReducer\n * });\n *\n * const composedReducer = (state, action) => {\n *  switch (action.type) {\n *    // click button to close side panel\n *    case 'CLICK_BUTTON':\n *      return {\n *        ...state,\n *        keplerGl: {\n *          ...state.keplerGl,\n *          foo: {\n *             ...state.keplerGl.foo,\n *             mapState: mapStateUpdaters.fitBoundsUpdater(\n *               mapState, {payload: [127.34, 31.09, 127.56, 31.59]]}\n *             )\n *          }\n *        }\n *      };\n *  }\n *  return reducers(state, action);\n * };\n *\n * export default composedReducer;\n */\n/* eslint-disable no-unused-vars */\n// @ts-ignore\nconst mapStateUpdaters = null;\n/* eslint-enable no-unused-vars */\n\n/**\n * Default initial `mapState`\n * @memberof mapStateUpdaters\n * @constant\n * @property pitch Default: `0`\n * @property bearing Default: `0`\n * @property latitude Default: `37.75043`\n * @property longitude Default: `-122.34679`\n * @property zoom Default: `9`\n * @property dragRotate Default: `false`\n * @property width Default: `800`\n * @property height Default: `800`\n * @property isSplit Default: `false`\n * @public\n */\nexport const INITIAL_MAP_STATE: MapState = {\n  pitch: 0,\n  bearing: 0,\n  latitude: 37.75043,\n  longitude: -122.34679,\n  zoom: 9,\n  dragRotate: false,\n  width: 800,\n  height: 800,\n  isSplit: false\n};\n\n/* Updaters */\n/**\n * Update map viewport\n * @memberof mapStateUpdaters\n * @public\n */\nexport const updateMapUpdater = (\n  state: MapState,\n  action: MapStateActions.UpdateMapUpdaterAction\n): MapState => ({\n  ...state,\n  ...(action.payload || {})\n});\n\n/**\n * Fit map viewport to bounds\n * @memberof mapStateUpdaters\n * @public\n */\nexport const fitBoundsUpdater = (\n  state: MapState,\n  action: MapStateActions.FitBoundsUpdaterAction\n): MapState => {\n  const centerAndZoom = getCenterAndZoomFromBounds(action.payload, {\n    width: state.width,\n    height: state.height\n  });\n  if (!centerAndZoom) {\n    // bounds is invalid\n    return state;\n  }\n\n  return {\n    ...state,\n    latitude: centerAndZoom.center[1],\n    longitude: centerAndZoom.center[0],\n    // For marginal or invalid bounds, zoom may be NaN. Make sure to provide a valid value in order\n    // to avoid corrupt state and potential crashes as zoom is expected to be a number\n    ...(Number.isFinite(centerAndZoom.zoom) ? {zoom: centerAndZoom.zoom} : {})\n  };\n};\n\n/**\n * Toggle between 3d and 2d map.\n * @memberof mapStateUpdaters\n * @public\n */\nexport const togglePerspectiveUpdater = (\n  state: MapState,\n  action: MapStateActions.TogglePerspectiveUpdaterAction\n): MapState => ({\n  ...state,\n  ...{\n    pitch: state.dragRotate ? 0 : 50,\n    bearing: state.dragRotate ? 0 : 24\n  },\n  dragRotate: !state.dragRotate\n});\n\n/**\n * reset mapState to initial State\n * @memberof mapStateUpdaters\n * @public\n */\nexport const resetMapConfigUpdater = (state: MapState): MapState => ({\n  ...INITIAL_MAP_STATE,\n  ...state.initialState,\n  initialState: state.initialState\n});\n\n// consider case where you have a split map and user wants to reset\n/**\n * Update `mapState` to propagate a new config\n * @memberof mapStateUpdaters\n * @public\n */\nexport const receiveMapConfigUpdater = (\n  state: MapState,\n  {\n    // @ts-expect-error\n    payload: {config = {}, options = {}, bounds = null}\n  }: {\n    type?: typeof ActionTypes.RECEIVE_MAP_CONFIG;\n    payload: ReceiveMapConfigPayload;\n  }\n): MapState => {\n  const {mapState} = config || {};\n\n  // merged received mapstate with previous state\n  let mergedState = {...state, ...mapState};\n\n  // if center map\n  // center map will override mapState config\n  if (options.centerMap && bounds) {\n    mergedState = fitBoundsUpdater(mergedState, {\n      payload: bounds\n    });\n  }\n\n  return {\n    ...mergedState,\n    // update width if `isSplit` has changed\n    ...getMapDimForSplitMap(mergedState.isSplit, state)\n  };\n};\n\n/**\n * Toggle between one or split maps\n * @memberof mapStateUpdaters\n * @public\n */\nexport const toggleSplitMapUpdater = (\n  state: MapState,\n  action: MapStateActions.ToggleSplitMapUpdaterAction\n): MapState => ({\n  ...state,\n  isSplit: !state.isSplit,\n  ...getMapDimForSplitMap(!state.isSplit, state)\n});\n\n// Helpers\nexport function getMapDimForSplitMap(isSplit, state) {\n  // cases:\n  // 1. state split: true - isSplit: true\n  // do nothing\n  // 2. state split: false - isSplit: false\n  // do nothing\n  if (state.isSplit === isSplit) {\n    return {};\n  }\n\n  const width =\n    state.isSplit && !isSplit\n      ? // 3. state split: true - isSplit: false\n        // double width\n        state.width * 2\n      : // 4. state split: false - isSplit: true\n        // split width\n        state.width / 2;\n\n  return {\n    width\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}