{"ast":null,"code":"import getShaderName from './get-shader-name';\nimport getShaderTypeName from './get-shader-type-name';\nexport default function formatGLSLCompilerError(errLog, src, shaderType) {\n  var _parseGLSLCompilerErr = parseGLSLCompilerError(errLog, src, shaderType),\n    shaderName = _parseGLSLCompilerErr.shaderName,\n    errors = _parseGLSLCompilerErr.errors,\n    warnings = _parseGLSLCompilerErr.warnings;\n  return \"GLSL compilation error in \".concat(shaderName, \"\\n\\n\").concat(errors, \"\\n\").concat(warnings);\n}\nexport function parseGLSLCompilerError(errLog, src, shaderType, shaderName) {\n  var errorStrings = errLog.split(/\\r?\\n/);\n  var errors = {};\n  var warnings = {};\n  var name = shaderName || getShaderName(src) || '(unnamed)';\n  var shaderDescription = \"\".concat(getShaderTypeName(shaderType), \" shader \").concat(name);\n  for (var i = 0; i < errorStrings.length; i++) {\n    var errorString = errorStrings[i];\n    if (errorString.length <= 1) {\n      continue;\n    }\n    var segments = errorString.split(':');\n    var type = segments[0];\n    var line = parseInt(segments[2], 10);\n    if (isNaN(line)) {\n      throw new Error(\"GLSL compilation error in \".concat(shaderDescription, \": \").concat(errLog));\n    }\n    if (type !== 'WARNING') {\n      errors[line] = errorString;\n    } else {\n      warnings[line] = errorString;\n    }\n  }\n  var lines = addLineNumbers(src);\n  return {\n    shaderName: shaderDescription,\n    errors: formatErrors(errors, lines),\n    warnings: formatErrors(warnings, lines)\n  };\n}\nfunction formatErrors(errors, lines) {\n  var message = '';\n  for (var i = 0; i < lines.length; i++) {\n    var line = lines[i];\n    if (!errors[i + 3] && !errors[i + 2] && !errors[i + 1]) {\n      continue;\n    }\n    message += \"\".concat(line, \"\\n\");\n    if (errors[i + 1]) {\n      var error = errors[i + 1];\n      var segments = error.split(':', 3);\n      var type = segments[0];\n      var column = parseInt(segments[1], 10) || 0;\n      var err = error.substring(segments.join(':').length + 1).trim();\n      message += padLeft(\"^^^ \".concat(type, \": \").concat(err, \"\\n\\n\"), column);\n    }\n  }\n  return message;\n}\nfunction addLineNumbers(string) {\n  var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var delim = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ': ';\n  var lines = string.split(/\\r?\\n/);\n  var maxDigits = String(lines.length + start - 1).length;\n  return lines.map(function (line, i) {\n    var lineNumber = String(i + start);\n    var digits = lineNumber.length;\n    var prefix = padLeft(lineNumber, maxDigits - digits);\n    return prefix + delim + line;\n  });\n}\nfunction padLeft(string, digits) {\n  var result = '';\n  for (var i = 0; i < digits; ++i) {\n    result += ' ';\n  }\n  return \"\".concat(result).concat(string);\n}","map":{"version":3,"names":["getShaderName","getShaderTypeName","formatGLSLCompilerError","errLog","src","shaderType","_parseGLSLCompilerErr","parseGLSLCompilerError","shaderName","errors","warnings","concat","errorStrings","split","name","shaderDescription","i","length","errorString","segments","type","line","parseInt","isNaN","Error","lines","addLineNumbers","formatErrors","message","error","column","err","substring","join","trim","padLeft","string","start","arguments","undefined","delim","maxDigits","String","map","lineNumber","digits","prefix","result"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@luma.gl/webgl/src/glsl-utils/format-glsl-error.js"],"sourcesContent":["// TODO - formatGLSLCompilerError should not depend on this\nimport getShaderName from './get-shader-name';\nimport getShaderTypeName from './get-shader-type-name';\n\n// Formats GLSL compiler error log into single string\nexport default function formatGLSLCompilerError(errLog, src, shaderType) {\n  const {shaderName, errors, warnings} = parseGLSLCompilerError(errLog, src, shaderType);\n  return `GLSL compilation error in ${shaderName}\\n\\n${errors}\\n${warnings}`;\n}\n\n/**\n * Parse a GLSL compiler error log into a string showing the source code around each error.\n * Based on https://github.com/wwwtyro/gl-format-compiler-error (public domain)\n */\n/* eslint-disable no-continue, max-statements */\nexport function parseGLSLCompilerError(errLog, src, shaderType, shaderName) {\n  const errorStrings = errLog.split(/\\r?\\n/);\n  const errors = {};\n  const warnings = {};\n\n  // Patch the shader name\n  const name = shaderName || getShaderName(src) || '(unnamed)';\n  const shaderDescription = `${getShaderTypeName(shaderType)} shader ${name}`;\n\n  // Parse the error - note: browser and driver dependent\n  for (let i = 0; i < errorStrings.length; i++) {\n    const errorString = errorStrings[i];\n    if (errorString.length <= 1) {\n      continue;\n    }\n    const segments = errorString.split(':');\n    const type = segments[0];\n    const line = parseInt(segments[2], 10);\n    if (isNaN(line)) {\n      throw new Error(`GLSL compilation error in ${shaderDescription}: ${errLog}`);\n    }\n    if (type !== 'WARNING') {\n      errors[line] = errorString;\n    } else {\n      warnings[line] = errorString;\n    }\n  }\n\n  // Format the error inline with the code\n  const lines = addLineNumbers(src);\n\n  return {\n    shaderName: shaderDescription,\n    errors: formatErrors(errors, lines),\n    warnings: formatErrors(warnings, lines)\n  };\n}\n\n// helper function, outputs annotated errors or warnings\nfunction formatErrors(errors, lines) {\n  let message = '';\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    if (!errors[i + 3] && !errors[i + 2] && !errors[i + 1]) {\n      continue;\n    }\n    message += `${line}\\n`;\n    if (errors[i + 1]) {\n      const error = errors[i + 1];\n      const segments = error.split(':', 3);\n      const type = segments[0];\n      const column = parseInt(segments[1], 10) || 0;\n      const err = error.substring(segments.join(':').length + 1).trim();\n      message += padLeft(`^^^ ${type}: ${err}\\n\\n`, column);\n    }\n  }\n  return message;\n}\n\n/**\n * Prepends line numbers to each line of a string.\n * The line numbers will be left-padded with spaces to ensure an\n * aligned layout when rendered using monospace fonts.\n * @param {String} string - multi-line string to add line numbers to\n * @param {Number} start=1 - number of spaces to add\n * @param {String} delim =': ' - injected between line number and original line\n * @return {String[]} strings - array of string, one per line, with line numbers added\n */\nfunction addLineNumbers(string, start = 1, delim = ': ') {\n  const lines = string.split(/\\r?\\n/);\n  const maxDigits = String(lines.length + start - 1).length;\n  return lines.map((line, i) => {\n    const lineNumber = String(i + start);\n    const digits = lineNumber.length;\n    const prefix = padLeft(lineNumber, maxDigits - digits);\n    return prefix + delim + line;\n  });\n}\n\n/**\n * Pads a string with a number of spaces (space characters) to the left\n * @param {String} string - string to pad\n * @param {Number} digits - number of spaces to add\n * @return {String} string - The padded string\n */\nfunction padLeft(string, digits) {\n  let result = '';\n  for (let i = 0; i < digits; ++i) {\n    result += ' ';\n  }\n  return `${result}${string}`;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}