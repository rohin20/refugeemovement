{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _asyncIterator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { isAsyncIterable } from '../utils/iterable-utils';\nimport { ASYNC_ORIGINAL_SYMBOL, ASYNC_RESOLVED_SYMBOL, ASYNC_DEFAULTS_SYMBOL } from './constants';\nvar EMPTY_PROPS = Object.freeze({});\nvar ComponentState = /*#__PURE__*/function () {\n  function ComponentState(component) {\n    _classCallCheck(this, ComponentState);\n    _defineProperty(this, \"component\", void 0);\n    _defineProperty(this, \"onAsyncPropUpdated\", void 0);\n    _defineProperty(this, \"asyncProps\", void 0);\n    _defineProperty(this, \"oldProps\", void 0);\n    _defineProperty(this, \"oldAsyncProps\", void 0);\n    this.component = component;\n    this.asyncProps = {};\n    this.onAsyncPropUpdated = function () {};\n    this.oldProps = null;\n    this.oldAsyncProps = null;\n  }\n  _createClass(ComponentState, [{\n    key: \"finalize\",\n    value: function finalize() {\n      for (var propName in this.asyncProps) {\n        var asyncProp = this.asyncProps[propName];\n        if (asyncProp && asyncProp.type && asyncProp.type.release) {\n          asyncProp.type.release(asyncProp.resolvedValue, asyncProp.type, this.component);\n        }\n      }\n    }\n  }, {\n    key: \"getOldProps\",\n    value: function getOldProps() {\n      return this.oldAsyncProps || this.oldProps || EMPTY_PROPS;\n    }\n  }, {\n    key: \"resetOldProps\",\n    value: function resetOldProps() {\n      this.oldAsyncProps = null;\n      this.oldProps = this.component.props;\n    }\n  }, {\n    key: \"hasAsyncProp\",\n    value: function hasAsyncProp(propName) {\n      return propName in this.asyncProps;\n    }\n  }, {\n    key: \"getAsyncProp\",\n    value: function getAsyncProp(propName) {\n      var asyncProp = this.asyncProps[propName];\n      return asyncProp && asyncProp.resolvedValue;\n    }\n  }, {\n    key: \"isAsyncPropLoading\",\n    value: function isAsyncPropLoading(propName) {\n      if (propName) {\n        var asyncProp = this.asyncProps[propName];\n        return Boolean(asyncProp && asyncProp.pendingLoadCount > 0 && asyncProp.pendingLoadCount !== asyncProp.resolvedLoadCount);\n      }\n      for (var key in this.asyncProps) {\n        if (this.isAsyncPropLoading(key)) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"reloadAsyncProp\",\n    value: function reloadAsyncProp(propName, value) {\n      this._watchPromise(propName, Promise.resolve(value));\n    }\n  }, {\n    key: \"setAsyncProps\",\n    value: function setAsyncProps(props) {\n      var resolvedValues = props[ASYNC_RESOLVED_SYMBOL] || {};\n      var originalValues = props[ASYNC_ORIGINAL_SYMBOL] || props;\n      var defaultValues = props[ASYNC_DEFAULTS_SYMBOL] || {};\n      for (var propName in resolvedValues) {\n        var value = resolvedValues[propName];\n        this._createAsyncPropData(propName, defaultValues[propName]);\n        this._updateAsyncProp(propName, value);\n        resolvedValues[propName] = this.getAsyncProp(propName);\n      }\n      for (var _propName in originalValues) {\n        var _value = originalValues[_propName];\n        this._createAsyncPropData(_propName, defaultValues[_propName]);\n        this._updateAsyncProp(_propName, _value);\n      }\n    }\n  }, {\n    key: \"_fetch\",\n    value: function _fetch(propName, url) {\n      return null;\n    }\n  }, {\n    key: \"_onResolve\",\n    value: function _onResolve(propName, value) {}\n  }, {\n    key: \"_onError\",\n    value: function _onError(propName, error) {}\n  }, {\n    key: \"_updateAsyncProp\",\n    value: function _updateAsyncProp(propName, value) {\n      if (!this._didAsyncInputValueChange(propName, value)) {\n        return;\n      }\n      if (typeof value === 'string') {\n        value = this._fetch(propName, value);\n      }\n      if (value instanceof Promise) {\n        this._watchPromise(propName, value);\n        return;\n      }\n      if (isAsyncIterable(value)) {\n        this._resolveAsyncIterable(propName, value);\n        return;\n      }\n      this._setPropValue(propName, value);\n    }\n  }, {\n    key: \"_freezeAsyncOldProps\",\n    value: function _freezeAsyncOldProps() {\n      if (!this.oldAsyncProps && this.oldProps) {\n        this.oldAsyncProps = Object.create(this.oldProps);\n        for (var propName in this.asyncProps) {\n          Object.defineProperty(this.oldAsyncProps, propName, {\n            enumerable: true,\n            value: this.oldProps[propName]\n          });\n        }\n      }\n    }\n  }, {\n    key: \"_didAsyncInputValueChange\",\n    value: function _didAsyncInputValueChange(propName, value) {\n      var asyncProp = this.asyncProps[propName];\n      if (value === asyncProp.resolvedValue || value === asyncProp.lastValue) {\n        return false;\n      }\n      asyncProp.lastValue = value;\n      return true;\n    }\n  }, {\n    key: \"_setPropValue\",\n    value: function _setPropValue(propName, value) {\n      this._freezeAsyncOldProps();\n      var asyncProp = this.asyncProps[propName];\n      if (asyncProp) {\n        value = this._postProcessValue(asyncProp, value);\n        asyncProp.resolvedValue = value;\n        asyncProp.pendingLoadCount++;\n        asyncProp.resolvedLoadCount = asyncProp.pendingLoadCount;\n      }\n    }\n  }, {\n    key: \"_setAsyncPropValue\",\n    value: function _setAsyncPropValue(propName, value, loadCount) {\n      var asyncProp = this.asyncProps[propName];\n      if (asyncProp && loadCount >= asyncProp.resolvedLoadCount && value !== undefined) {\n        this._freezeAsyncOldProps();\n        asyncProp.resolvedValue = value;\n        asyncProp.resolvedLoadCount = loadCount;\n        this.onAsyncPropUpdated(propName, value);\n      }\n    }\n  }, {\n    key: \"_watchPromise\",\n    value: function _watchPromise(propName, promise) {\n      var _this = this;\n      var asyncProp = this.asyncProps[propName];\n      if (asyncProp) {\n        asyncProp.pendingLoadCount++;\n        var loadCount = asyncProp.pendingLoadCount;\n        promise.then(function (data) {\n          data = _this._postProcessValue(asyncProp, data);\n          _this._setAsyncPropValue(propName, data, loadCount);\n          _this._onResolve(propName, data);\n        }).catch(function (error) {\n          _this._onError(propName, error);\n        });\n      }\n    }\n  }, {\n    key: \"_resolveAsyncIterable\",\n    value: function () {\n      var _resolveAsyncIterable2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(propName, iterable) {\n        var asyncProp, loadCount, data, count, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk, dataTransform;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(propName !== 'data')) {\n                _context.next = 3;\n                break;\n              }\n              this._setPropValue(propName, iterable);\n              return _context.abrupt(\"return\");\n            case 3:\n              asyncProp = this.asyncProps[propName];\n              if (asyncProp) {\n                _context.next = 6;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 6:\n              asyncProp.pendingLoadCount++;\n              loadCount = asyncProp.pendingLoadCount;\n              data = [];\n              count = 0;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 12;\n              _iterator = _asyncIterator(iterable);\n            case 14:\n              _context.next = 16;\n              return _iterator.next();\n            case 16:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 26;\n                break;\n              }\n              chunk = _step.value;\n              dataTransform = this.component.props.dataTransform;\n              if (dataTransform) {\n                data = dataTransform(chunk, data);\n              } else {\n                data = data.concat(chunk);\n              }\n              Object.defineProperty(data, '__diff', {\n                enumerable: false,\n                value: [{\n                  startRow: count,\n                  endRow: data.length\n                }]\n              });\n              count = data.length;\n              this._setAsyncPropValue(propName, data, loadCount);\n            case 23:\n              _iteratorAbruptCompletion = false;\n              _context.next = 14;\n              break;\n            case 26:\n              _context.next = 32;\n              break;\n            case 28:\n              _context.prev = 28;\n              _context.t0 = _context[\"catch\"](12);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n            case 32:\n              _context.prev = 32;\n              _context.prev = 33;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 37;\n                break;\n              }\n              _context.next = 37;\n              return _iterator.return();\n            case 37:\n              _context.prev = 37;\n              if (!_didIteratorError) {\n                _context.next = 40;\n                break;\n              }\n              throw _iteratorError;\n            case 40:\n              return _context.finish(37);\n            case 41:\n              return _context.finish(32);\n            case 42:\n              this._onResolve(propName, data);\n            case 43:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[12, 28, 32, 42], [33,, 37, 41]]);\n      }));\n      function _resolveAsyncIterable(_x, _x2) {\n        return _resolveAsyncIterable2.apply(this, arguments);\n      }\n      return _resolveAsyncIterable;\n    }()\n  }, {\n    key: \"_postProcessValue\",\n    value: function _postProcessValue(asyncProp, value) {\n      var propType = asyncProp.type;\n      if (propType) {\n        if (propType.release) {\n          propType.release(asyncProp.resolvedValue, propType, this.component);\n        }\n        if (propType.transform) {\n          return propType.transform(value, propType, this.component);\n        }\n      }\n      return value;\n    }\n  }, {\n    key: \"_createAsyncPropData\",\n    value: function _createAsyncPropData(propName, defaultValue) {\n      var asyncProp = this.asyncProps[propName];\n      if (!asyncProp) {\n        var propTypes = this.component && this.component.constructor._propTypes;\n        this.asyncProps[propName] = {\n          type: propTypes && propTypes[propName],\n          lastValue: null,\n          resolvedValue: defaultValue,\n          pendingLoadCount: 0,\n          resolvedLoadCount: 0\n        };\n      }\n    }\n  }]);\n  return ComponentState;\n}();\nexport { ComponentState as default };","map":{"version":3,"names":["isAsyncIterable","ASYNC_ORIGINAL_SYMBOL","ASYNC_RESOLVED_SYMBOL","ASYNC_DEFAULTS_SYMBOL","EMPTY_PROPS","Object","freeze","ComponentState","component","_classCallCheck","_defineProperty","asyncProps","onAsyncPropUpdated","oldProps","oldAsyncProps","_createClass","key","value","finalize","propName","asyncProp","type","release","resolvedValue","getOldProps","resetOldProps","props","hasAsyncProp","getAsyncProp","isAsyncPropLoading","Boolean","pendingLoadCount","resolvedLoadCount","reloadAsyncProp","_watchPromise","Promise","resolve","setAsyncProps","resolvedValues","originalValues","defaultValues","_createAsyncPropData","_updateAsyncProp","_fetch","url","_onResolve","_onError","error","_didAsyncInputValueChange","_resolveAsyncIterable","_setPropValue","_freezeAsyncOldProps","create","defineProperty","enumerable","lastValue","_postProcessValue","_setAsyncPropValue","loadCount","undefined","promise","_this","then","data","catch","_resolveAsyncIterable2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","iterable","count","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","chunk","dataTransform","wrap","_callee$","_context","prev","next","abrupt","_asyncIterator","sent","done","concat","startRow","endRow","length","t0","return","finish","stop","_x","_x2","apply","arguments","propType","transform","defaultValue","propTypes","constructor","_propTypes","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/core/src/lifecycle/component-state.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {isAsyncIterable} from '../utils/iterable-utils';\nimport {ASYNC_ORIGINAL_SYMBOL, ASYNC_RESOLVED_SYMBOL, ASYNC_DEFAULTS_SYMBOL} from './constants';\nimport type Component from './component';\nimport {PropType} from './prop-types';\n\nconst EMPTY_PROPS = Object.freeze({});\n\ntype AsyncPropState = {\n  type: PropType;\n  lastValue: any;\n  resolvedValue: any;\n  pendingLoadCount: number;\n  resolvedLoadCount: number;\n};\n\nexport default class ComponentState<ComponentT extends Component> {\n  component: ComponentT;\n  onAsyncPropUpdated: (propName: string, value: any) => void;\n\n  private asyncProps: Partial<Record<string, AsyncPropState>>;\n  private oldProps: ComponentT['props'] | null;\n  private oldAsyncProps: ComponentT['props'] | null;\n\n  constructor(component: ComponentT) {\n    this.component = component;\n    this.asyncProps = {}; // Prop values that the layer sees\n    this.onAsyncPropUpdated = () => {};\n    this.oldProps = null; // Last props before update\n    this.oldAsyncProps = null; // Last props before update, with async values copied.\n  }\n\n  finalize() {\n    for (const propName in this.asyncProps) {\n      const asyncProp = this.asyncProps[propName];\n      if (asyncProp && asyncProp.type && asyncProp.type.release) {\n        // Release any resources created by transforms\n        asyncProp.type.release(\n          asyncProp.resolvedValue,\n          asyncProp.type,\n          this.component as Component\n        );\n      }\n    }\n  }\n\n  /* Layer-facing props API */\n\n  getOldProps(): ComponentT['props'] | typeof EMPTY_PROPS {\n    return this.oldAsyncProps || this.oldProps || EMPTY_PROPS;\n  }\n\n  resetOldProps() {\n    this.oldAsyncProps = null;\n    this.oldProps = this.component.props;\n  }\n\n  // Checks if a prop is overridden\n  hasAsyncProp(propName: string): boolean {\n    return propName in this.asyncProps;\n  }\n\n  // Returns value of an overriden prop\n  getAsyncProp(propName: string): any {\n    const asyncProp = this.asyncProps[propName];\n    return asyncProp && asyncProp.resolvedValue;\n  }\n\n  isAsyncPropLoading(propName?: string): boolean {\n    if (propName) {\n      const asyncProp = this.asyncProps[propName];\n      return Boolean(\n        asyncProp &&\n          asyncProp.pendingLoadCount > 0 &&\n          asyncProp.pendingLoadCount !== asyncProp.resolvedLoadCount\n      );\n    }\n    for (const key in this.asyncProps) {\n      if (this.isAsyncPropLoading(key)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Without changing the original prop value, swap out the data resolution under the hood\n  reloadAsyncProp(propName: string, value: any) {\n    this._watchPromise(propName, Promise.resolve(value));\n  }\n\n  // Updates all async/overridden props (when new props come in)\n  // Checks if urls have changed, starts loading, or removes override\n  setAsyncProps(props: ComponentT['props']) {\n    // NOTE: prop param and default values are only support for testing\n    const resolvedValues = props[ASYNC_RESOLVED_SYMBOL] || {};\n    const originalValues = props[ASYNC_ORIGINAL_SYMBOL] || props;\n    const defaultValues = props[ASYNC_DEFAULTS_SYMBOL] || {};\n\n    // TODO - use async props from the layer's prop types\n    for (const propName in resolvedValues) {\n      const value = resolvedValues[propName];\n      this._createAsyncPropData(propName, defaultValues[propName]);\n      this._updateAsyncProp(propName, value);\n      // Use transformed value\n      resolvedValues[propName] = this.getAsyncProp(propName);\n    }\n\n    for (const propName in originalValues) {\n      const value = originalValues[propName];\n      // Makes sure a record exists for this prop\n      this._createAsyncPropData(propName, defaultValues[propName]);\n      this._updateAsyncProp(propName, value);\n    }\n  }\n\n  /* Placeholder methods for subclassing */\n\n  protected _fetch(propName: string, url: string): any {\n    return null;\n  }\n\n  protected _onResolve(propName: string, value: any) {} // eslint-disable-line @typescript-eslint/no-empty-function\n\n  protected _onError(propName: string, error: Error) {} // eslint-disable-line @typescript-eslint/no-empty-function\n\n  // Intercept strings (URLs) and Promises and activates loading and prop rewriting\n  private _updateAsyncProp(propName: string, value: any) {\n    if (!this._didAsyncInputValueChange(propName, value)) {\n      return;\n    }\n\n    // interpret value string as url and start a new load tracked by a promise\n    if (typeof value === 'string') {\n      value = this._fetch(propName, value);\n    }\n\n    // interprets promise and track the \"loading\"\n    if (value instanceof Promise) {\n      this._watchPromise(propName, value);\n      return;\n    }\n\n    if (isAsyncIterable(value)) {\n      this._resolveAsyncIterable(propName, value); // eslint-disable-line @typescript-eslint/no-floating-promises\n      return;\n    }\n\n    // else, normal, non-async value. Just store value for now\n    this._setPropValue(propName, value);\n  }\n\n  // Whenever async props are changing, we need to make a copy of oldProps\n  // otherwise the prop rewriting will affect the value both in props and oldProps.\n  // While the copy is relatively expensive, this only happens on load completion.\n  private _freezeAsyncOldProps() {\n    if (!this.oldAsyncProps && this.oldProps) {\n      // 1. inherit all synchronous props from oldProps\n      // 2. reconfigure the async prop descriptors to fixed values\n      this.oldAsyncProps = Object.create(this.oldProps);\n      for (const propName in this.asyncProps) {\n        Object.defineProperty(this.oldAsyncProps, propName, {\n          enumerable: true,\n          value: this.oldProps[propName]\n        });\n      }\n    }\n  }\n\n  // Checks if an input value actually changed (to avoid reloading/rewatching promises/urls)\n  private _didAsyncInputValueChange(propName: string, value: any): boolean {\n    // @ts-ignore\n    const asyncProp: AsyncPropState = this.asyncProps[propName];\n    if (value === asyncProp.resolvedValue || value === asyncProp.lastValue) {\n      return false;\n    }\n    asyncProp.lastValue = value;\n    return true;\n  }\n\n  // Set normal, non-async value\n  private _setPropValue(propName: string, value: any) {\n    // Save the current value before overwriting so that diffProps can access both\n    this._freezeAsyncOldProps();\n\n    const asyncProp = this.asyncProps[propName];\n    if (asyncProp) {\n      value = this._postProcessValue(asyncProp, value);\n      asyncProp.resolvedValue = value;\n      asyncProp.pendingLoadCount++;\n      asyncProp.resolvedLoadCount = asyncProp.pendingLoadCount;\n    }\n  }\n\n  // Set a just resolved async value, calling onAsyncPropUpdates if value changes asynchronously\n  private _setAsyncPropValue(propName: string, value: any, loadCount: number) {\n    // Only update if loadCount is larger or equal to resolvedLoadCount\n    // otherwise a more recent load has already completed\n    const asyncProp = this.asyncProps[propName];\n    if (asyncProp && loadCount >= asyncProp.resolvedLoadCount && value !== undefined) {\n      // Save the current value before overwriting so that diffProps can access both\n      this._freezeAsyncOldProps();\n\n      asyncProp.resolvedValue = value;\n      asyncProp.resolvedLoadCount = loadCount;\n\n      // Call callback to inform listener\n      this.onAsyncPropUpdated(propName, value);\n    }\n  }\n\n  // Tracks a promise, sets the prop when loaded, handles load count\n  private _watchPromise(propName: string, promise: Promise<any>) {\n    const asyncProp = this.asyncProps[propName];\n    if (asyncProp) {\n      asyncProp.pendingLoadCount++;\n      const loadCount = asyncProp.pendingLoadCount;\n      promise\n        .then(data => {\n          data = this._postProcessValue(asyncProp, data);\n          this._setAsyncPropValue(propName, data, loadCount);\n          this._onResolve(propName, data);\n        })\n        .catch(error => {\n          this._onError(propName, error);\n        });\n    }\n  }\n\n  private async _resolveAsyncIterable(\n    propName: string,\n    iterable: AsyncIterable<any>\n  ): Promise<void> {\n    if (propName !== 'data') {\n      // we only support data as async iterable\n      this._setPropValue(propName, iterable);\n      return;\n    }\n\n    const asyncProp = this.asyncProps[propName];\n    if (!asyncProp) {\n      return;\n    }\n\n    asyncProp.pendingLoadCount++;\n    const loadCount = asyncProp.pendingLoadCount;\n    let data: any[] = [];\n    let count = 0;\n\n    for await (const chunk of iterable) {\n      // @ts-expect-error (2339) dataTransform is not decared in base component props\n      const {dataTransform} = this.component.props;\n      if (dataTransform) {\n        data = dataTransform(chunk, data) as any[];\n      } else {\n        data = data.concat(chunk);\n      }\n\n      // Used by the default _dataDiff function\n      Object.defineProperty(data, '__diff', {\n        enumerable: false,\n        value: [{startRow: count, endRow: data.length}]\n      });\n\n      count = data.length;\n      this._setAsyncPropValue(propName, data, loadCount);\n    }\n\n    this._onResolve(propName, data);\n  }\n\n  // Give the app a chance to post process the loaded data\n  private _postProcessValue(asyncProp, value: any) {\n    const propType = asyncProp.type;\n    if (propType) {\n      if (propType.release) {\n        propType.release(asyncProp.resolvedValue, propType, this.component);\n      }\n      if (propType.transform) {\n        return propType.transform(value, propType, this.component);\n      }\n    }\n    return value;\n  }\n\n  // Creating an asyncProp record if needed\n  private _createAsyncPropData(propName: string, defaultValue: any) {\n    const asyncProp = this.asyncProps[propName];\n    if (!asyncProp) {\n      // @ts-expect-error\n      const propTypes = this.component && this.component.constructor._propTypes;\n      // assert(defaultValue !== undefined);\n      this.asyncProps[propName] = {\n        type: propTypes && propTypes[propName],\n        lastValue: null, // Supplied prop value (can be url/promise, not visible to layer)\n        resolvedValue: defaultValue, // Resolved prop value (valid data, can be \"shown\" to layer)\n        pendingLoadCount: 0, // How many loads have been issued\n        resolvedLoadCount: 0 // Latest resolved load, (earlier loads will be ignored)\n      };\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}