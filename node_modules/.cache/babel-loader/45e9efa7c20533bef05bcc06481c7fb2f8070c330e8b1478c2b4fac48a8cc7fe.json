{"ast":null,"code":"'use strict';\n\nvar invariant = require('../../vendor/invariant');\nvar formatPoints = require('../format_points');\nvar makeService = require('../make_service');\n\n/**\n * @class MapboxSurface\n */\nvar MapboxSurface = makeService('MapboxSurface');\nvar API_SURFACE = '/v4/surface/{mapid}.json{?access_token,layer,fields,points,geojson,interpolate,encoded_polyline}';\n\n/**\n * Given a list of locations, retrieve vector tiles, find the nearest\n * spatial features, extract their data values, and then absolute values and\n * optionally interpolated values in-between, if the interpolate option is specified.\n *\n * Consult the [Surface API](https://www.mapbox.com/developers/api/surface/)\n * for more documentation.\n *\n * @param {string} mapid a Mapbox mapid containing vector tiles against\n * which we'll query\n * @param {string} layer layer within the given `mapid` for which to pull\n * data\n * @param {Array<string>} fields layer within the given `mapid` for which to pull\n * data\n * @param {Array<Object>|string} path either an encoded polyline,\n * provided as a string, or an array of objects with longitude and latitude\n * properties, similar to waypoints.\n * @param {Object} [options={}] additional options meant to tune\n * the request\n * @param {string} [options.geojson=false] whether to return data as a\n * GeoJSON point\n * @param {string} [options.zoom=maximum] zoom level at which features\n * are queried\n * @param {boolean} [options.interpolate=true] Whether to interpolate\n * between matches in the feature collection.\n * @param {Function} callback called with (err, results)\n * @returns {Promise} response\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n */\nMapboxSurface.prototype.surface = function (mapid, layer, fields, path, options, callback) {\n  // permit the options argument to be omitted\n  if (callback === undefined && typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  // typecheck arguments\n  invariant(typeof mapid === 'string', 'mapid must be a string');\n  invariant(typeof layer === 'string', 'layer must be a string');\n  invariant(Array.isArray(fields), 'fields must be an array of strings');\n  invariant(Array.isArray(path) || typeof path === 'string', 'path must be an array of objects or a string');\n  invariant(typeof options === 'object', 'options must be an object');\n  var interpolate = true,\n    geojson = false;\n  if (options.interpolate !== undefined) {\n    invariant(typeof options.interpolate === 'boolean', 'interpolate must be a boolean');\n    interpolate = options.interpolate;\n  }\n  if (options.geojson !== undefined) {\n    invariant(typeof options.geojson === 'boolean', 'geojson option must be boolean');\n    geojson = options.geojson;\n  }\n  var surfaceOptions = {\n    geojson: geojson,\n    layer: layer,\n    mapid: mapid,\n    fields: fields.join(','),\n    interpolate: interpolate\n  };\n  if (Array.isArray(path)) {\n    surfaceOptions.points = formatPoints(path);\n  } else {\n    surfaceOptions.encoded_polyline = path;\n  }\n  if (options.zoom !== undefined) {\n    invariant(typeof options.zoom === 'number', 'zoom must be a number');\n    surfaceOptions.z = options.zoom;\n  }\n  return this.client({\n    path: API_SURFACE,\n    params: surfaceOptions,\n    callback: callback\n  });\n};\nmodule.exports = MapboxSurface;","map":{"version":3,"names":["invariant","require","formatPoints","makeService","MapboxSurface","API_SURFACE","prototype","surface","mapid","layer","fields","path","options","callback","undefined","Array","isArray","interpolate","geojson","surfaceOptions","join","points","encoded_polyline","zoom","z","client","params","module","exports"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/mapbox/lib/services/surface.js"],"sourcesContent":["'use strict';\n\nvar invariant = require('../../vendor/invariant');\nvar formatPoints = require('../format_points');\nvar makeService = require('../make_service');\n\n/**\n * @class MapboxSurface\n */\nvar MapboxSurface = makeService('MapboxSurface');\n\nvar API_SURFACE = '/v4/surface/{mapid}.json{?access_token,layer,fields,points,geojson,interpolate,encoded_polyline}';\n\n/**\n * Given a list of locations, retrieve vector tiles, find the nearest\n * spatial features, extract their data values, and then absolute values and\n * optionally interpolated values in-between, if the interpolate option is specified.\n *\n * Consult the [Surface API](https://www.mapbox.com/developers/api/surface/)\n * for more documentation.\n *\n * @param {string} mapid a Mapbox mapid containing vector tiles against\n * which we'll query\n * @param {string} layer layer within the given `mapid` for which to pull\n * data\n * @param {Array<string>} fields layer within the given `mapid` for which to pull\n * data\n * @param {Array<Object>|string} path either an encoded polyline,\n * provided as a string, or an array of objects with longitude and latitude\n * properties, similar to waypoints.\n * @param {Object} [options={}] additional options meant to tune\n * the request\n * @param {string} [options.geojson=false] whether to return data as a\n * GeoJSON point\n * @param {string} [options.zoom=maximum] zoom level at which features\n * are queried\n * @param {boolean} [options.interpolate=true] Whether to interpolate\n * between matches in the feature collection.\n * @param {Function} callback called with (err, results)\n * @returns {Promise} response\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n */\nMapboxSurface.prototype.surface = function(mapid, layer, fields, path, options, callback) {\n\n  // permit the options argument to be omitted\n  if (callback === undefined && typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  // typecheck arguments\n  invariant(typeof mapid === 'string', 'mapid must be a string');\n  invariant(typeof layer === 'string', 'layer must be a string');\n  invariant(Array.isArray(fields), 'fields must be an array of strings');\n  invariant(Array.isArray(path) || typeof path === 'string', 'path must be an array of objects or a string');\n  invariant(typeof options === 'object', 'options must be an object');\n\n  var interpolate = true,\n    geojson = false;\n\n  if (options.interpolate !== undefined) {\n    invariant(typeof options.interpolate === 'boolean', 'interpolate must be a boolean');\n    interpolate = options.interpolate;\n  }\n\n  if (options.geojson !== undefined) {\n    invariant(typeof options.geojson === 'boolean', 'geojson option must be boolean');\n    geojson = options.geojson;\n  }\n\n  var surfaceOptions = {\n    geojson: geojson,\n    layer: layer,\n    mapid: mapid,\n    fields: fields.join(','),\n    interpolate: interpolate\n  };\n\n  if (Array.isArray(path)) {\n    surfaceOptions.points = formatPoints(path);\n  } else {\n    surfaceOptions.encoded_polyline = path;\n  }\n\n  if (options.zoom !== undefined) {\n    invariant(typeof options.zoom === 'number', 'zoom must be a number');\n    surfaceOptions.z = options.zoom;\n  }\n\n  return this.client({\n    path: API_SURFACE,\n    params: surfaceOptions,\n    callback: callback\n  });\n};\n\nmodule.exports = MapboxSurface;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AACjD,IAAIC,YAAY,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC9C,IAAIE,WAAW,GAAGF,OAAO,CAAC,iBAAiB,CAAC;;AAE5C;AACA;AACA;AACA,IAAIG,aAAa,GAAGD,WAAW,CAAC,eAAe,CAAC;AAEhD,IAAIE,WAAW,GAAG,kGAAkG;;AAEpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,aAAa,CAACE,SAAS,CAACC,OAAO,GAAG,UAASC,KAAK,EAAEC,KAAK,EAAEC,MAAM,EAAEC,IAAI,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EAExF;EACA,IAAIA,QAAQ,KAAKC,SAAS,IAAI,OAAOF,OAAO,KAAK,UAAU,EAAE;IAC3DC,QAAQ,GAAGD,OAAO;IAClBA,OAAO,GAAG,CAAC,CAAC;EACd;;EAEA;EACAZ,SAAS,CAAC,OAAOQ,KAAK,KAAK,QAAQ,EAAE,wBAAwB,CAAC;EAC9DR,SAAS,CAAC,OAAOS,KAAK,KAAK,QAAQ,EAAE,wBAAwB,CAAC;EAC9DT,SAAS,CAACe,KAAK,CAACC,OAAO,CAACN,MAAM,CAAC,EAAE,oCAAoC,CAAC;EACtEV,SAAS,CAACe,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE,8CAA8C,CAAC;EAC1GX,SAAS,CAAC,OAAOY,OAAO,KAAK,QAAQ,EAAE,2BAA2B,CAAC;EAEnE,IAAIK,WAAW,GAAG,IAAI;IACpBC,OAAO,GAAG,KAAK;EAEjB,IAAIN,OAAO,CAACK,WAAW,KAAKH,SAAS,EAAE;IACrCd,SAAS,CAAC,OAAOY,OAAO,CAACK,WAAW,KAAK,SAAS,EAAE,+BAA+B,CAAC;IACpFA,WAAW,GAAGL,OAAO,CAACK,WAAW;EACnC;EAEA,IAAIL,OAAO,CAACM,OAAO,KAAKJ,SAAS,EAAE;IACjCd,SAAS,CAAC,OAAOY,OAAO,CAACM,OAAO,KAAK,SAAS,EAAE,gCAAgC,CAAC;IACjFA,OAAO,GAAGN,OAAO,CAACM,OAAO;EAC3B;EAEA,IAAIC,cAAc,GAAG;IACnBD,OAAO,EAAEA,OAAO;IAChBT,KAAK,EAAEA,KAAK;IACZD,KAAK,EAAEA,KAAK;IACZE,MAAM,EAAEA,MAAM,CAACU,IAAI,CAAC,GAAG,CAAC;IACxBH,WAAW,EAAEA;EACf,CAAC;EAED,IAAIF,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC,EAAE;IACvBQ,cAAc,CAACE,MAAM,GAAGnB,YAAY,CAACS,IAAI,CAAC;EAC5C,CAAC,MAAM;IACLQ,cAAc,CAACG,gBAAgB,GAAGX,IAAI;EACxC;EAEA,IAAIC,OAAO,CAACW,IAAI,KAAKT,SAAS,EAAE;IAC9Bd,SAAS,CAAC,OAAOY,OAAO,CAACW,IAAI,KAAK,QAAQ,EAAE,uBAAuB,CAAC;IACpEJ,cAAc,CAACK,CAAC,GAAGZ,OAAO,CAACW,IAAI;EACjC;EAEA,OAAO,IAAI,CAACE,MAAM,CAAC;IACjBd,IAAI,EAAEN,WAAW;IACjBqB,MAAM,EAAEP,cAAc;IACtBN,QAAQ,EAAEA;EACZ,CAAC,CAAC;AACJ,CAAC;AAEDc,MAAM,CAACC,OAAO,GAAGxB,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}