{"ast":null,"code":"import _defineProperty from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport Buffer from '../classes/buffer';\nimport { getKey } from '../webgl-utils/constants-to-keys';\nimport { getCompositeGLType } from '../webgl-utils/attribute-utils';\nimport { formatValue } from '../utils/format-value';\nexport function getDebugTableForVertexArray(_ref) {\n  var vertexArray = _ref.vertexArray,\n    _ref$header = _ref.header,\n    header = _ref$header === void 0 ? 'Attributes' : _ref$header;\n  if (!vertexArray.configuration) {\n    return {};\n  }\n  var table = {};\n  if (vertexArray.elements) {\n    table.ELEMENT_ARRAY_BUFFER = getDebugTableRow(vertexArray, vertexArray.elements, null, header);\n  }\n  var attributes = vertexArray.values;\n  for (var attributeLocation in attributes) {\n    var info = vertexArray._getAttributeInfo(attributeLocation);\n    if (info) {\n      var rowHeader = \"\".concat(attributeLocation, \": \").concat(info.name);\n      var accessor = vertexArray.accessors[info.location];\n      if (accessor) {\n        rowHeader = \"\".concat(attributeLocation, \": \").concat(getGLSLDeclaration(info.name, accessor));\n      }\n      table[rowHeader] = getDebugTableRow(vertexArray, attributes[attributeLocation], accessor, header);\n    }\n  }\n  return table;\n}\nfunction getDebugTableRow(vertexArray, attribute, accessor, header) {\n  var _ref4;\n  var gl = vertexArray.gl;\n  if (!attribute) {\n    var _ref2;\n    return _ref2 = {}, _defineProperty(_ref2, header, 'null'), _defineProperty(_ref2, 'Format ', 'N/A'), _ref2;\n  }\n  var type = 'NOT PROVIDED';\n  var size = 1;\n  var verts = 0;\n  var bytes = 0;\n  var isInteger;\n  var marker;\n  var value;\n  if (accessor) {\n    type = accessor.type;\n    size = accessor.size;\n    type = String(type).replace('Array', '');\n    isInteger = type.indexOf('nt') !== -1;\n  }\n  if (attribute instanceof Buffer) {\n    var _ref3;\n    var buffer = attribute;\n    var _buffer$getDebugData = buffer.getDebugData(),\n      data = _buffer$getDebugData.data,\n      changed = _buffer$getDebugData.changed;\n    marker = changed ? '*' : '';\n    value = data;\n    bytes = buffer.byteLength;\n    verts = bytes / data.BYTES_PER_ELEMENT / size;\n    var format;\n    if (accessor) {\n      var instanced = accessor.divisor > 0;\n      format = \"\".concat(instanced ? 'I ' : 'P ', \" \").concat(verts, \" (x\").concat(size, \"=\").concat(bytes, \" bytes \").concat(getKey(gl, type), \")\");\n    } else {\n      isInteger = true;\n      format = \"\".concat(bytes, \" bytes\");\n    }\n    return _ref3 = {}, _defineProperty(_ref3, header, \"\".concat(marker).concat(formatValue(value, {\n      size: size,\n      isInteger: isInteger\n    }))), _defineProperty(_ref3, 'Format ', format), _ref3;\n  }\n  value = attribute;\n  size = attribute.length;\n  type = String(attribute.constructor.name).replace('Array', '');\n  isInteger = type.indexOf('nt') !== -1;\n  return _ref4 = {}, _defineProperty(_ref4, header, \"\".concat(formatValue(value, {\n    size: size,\n    isInteger: isInteger\n  }), \" (constant)\")), _defineProperty(_ref4, 'Format ', \"\".concat(size, \"x\").concat(type, \" (constant)\")), _ref4;\n}\nfunction getGLSLDeclaration(name, accessor) {\n  var type = accessor.type,\n    size = accessor.size;\n  var typeAndName = getCompositeGLType(type, size);\n  return typeAndName ? \"\".concat(name, \" (\").concat(typeAndName.name, \")\") : name;\n}","map":{"version":3,"names":["Buffer","getKey","getCompositeGLType","formatValue","getDebugTableForVertexArray","_ref","vertexArray","_ref$header","header","configuration","table","elements","ELEMENT_ARRAY_BUFFER","getDebugTableRow","attributes","values","attributeLocation","info","_getAttributeInfo","rowHeader","concat","name","accessor","accessors","location","getGLSLDeclaration","attribute","_ref4","gl","_ref2","_defineProperty","type","size","verts","bytes","isInteger","marker","value","String","replace","indexOf","_ref3","buffer","_buffer$getDebugData","getDebugData","data","changed","byteLength","BYTES_PER_ELEMENT","format","instanced","divisor","length","constructor","typeAndName"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@luma.gl/webgl/src/debug/debug-vertex-array.js"],"sourcesContent":["import Buffer from '../classes/buffer';\nimport {getKey} from '../webgl-utils/constants-to-keys';\nimport {getCompositeGLType} from '../webgl-utils/attribute-utils';\nimport {formatValue} from '../utils/format-value';\n\n// Creates object suitable as input for console.table\nexport function getDebugTableForVertexArray({vertexArray, header = 'Attributes'}) {\n  if (!vertexArray.configuration) {\n    return {};\n  }\n\n  const table = {}; // {[header]: {}};\n\n  // Add index (elements) if available\n  if (vertexArray.elements) {\n    // const elements = Object.assign({size: 1}, vertexArray.elements);\n    table.ELEMENT_ARRAY_BUFFER = getDebugTableRow(vertexArray, vertexArray.elements, null, header);\n  }\n\n  // Add used attributes\n  const attributes = vertexArray.values;\n\n  for (const attributeLocation in attributes) {\n    const info = vertexArray._getAttributeInfo(attributeLocation);\n    if (info) {\n      let rowHeader = `${attributeLocation}: ${info.name}`;\n      const accessor = vertexArray.accessors[info.location];\n      if (accessor) {\n        rowHeader = `${attributeLocation}: ${getGLSLDeclaration(info.name, accessor)}`;\n      }\n      table[rowHeader] = getDebugTableRow(\n        vertexArray,\n        attributes[attributeLocation],\n        accessor,\n        header\n      );\n    }\n  }\n\n  return table;\n}\n\n/* eslint-disable max-statements */\nfunction getDebugTableRow(vertexArray, attribute, accessor, header) {\n  const {gl} = vertexArray;\n\n  if (!attribute) {\n    return {\n      [header]: 'null',\n      'Format ': 'N/A'\n    };\n  }\n\n  let type = 'NOT PROVIDED';\n  let size = 1;\n  let verts = 0;\n  let bytes = 0;\n\n  let isInteger;\n  let marker;\n  let value;\n\n  if (accessor) {\n    type = accessor.type;\n    size = accessor.size;\n\n    // Generate a type name by dropping Array from Float32Array etc.\n    type = String(type).replace('Array', '');\n\n    // Look for 'nt' to detect integer types, e.g. Int32Array, Uint32Array\n    isInteger = type.indexOf('nt') !== -1;\n  }\n\n  if (attribute instanceof Buffer) {\n    const buffer = attribute;\n\n    const {data, changed} = buffer.getDebugData();\n    marker = changed ? '*' : '';\n\n    value = data;\n    // @ts-ignore\n    bytes = buffer.byteLength;\n    // @ts-ignore\n    verts = bytes / data.BYTES_PER_ELEMENT / size;\n\n    let format;\n\n    if (accessor) {\n      const instanced = accessor.divisor > 0;\n      format = `${instanced ? 'I ' : 'P '} ${verts} (x${size}=${bytes} bytes ${getKey(gl, type)})`;\n    } else {\n      // element buffer\n      isInteger = true;\n      format = `${bytes} bytes`;\n    }\n\n    return {\n      [header]: `${marker}${formatValue(value, {size, isInteger})}`,\n      'Format ': format\n    };\n  }\n\n  // CONSTANT VALUE\n  value = attribute;\n  size = attribute.length;\n  // Generate a type name by dropping Array from Float32Array etc.\n  type = String(attribute.constructor.name).replace('Array', '');\n  // Look for 'nt' to detect integer types, e.g. Int32Array, Uint32Array\n  isInteger = type.indexOf('nt') !== -1;\n\n  return {\n    [header]: `${formatValue(value, {size, isInteger})} (constant)`,\n    'Format ': `${size}x${type} (constant)`\n  };\n}\n/* eslint-ensable max-statements */\n\nfunction getGLSLDeclaration(name, accessor) {\n  const {type, size} = accessor;\n  const typeAndName = getCompositeGLType(type, size);\n  return typeAndName ? `${name} (${typeAndName.name})` : name;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}