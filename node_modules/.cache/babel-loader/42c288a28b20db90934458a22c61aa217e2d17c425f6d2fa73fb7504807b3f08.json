{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { global, isBrowser, isWorker } from '../env-utils/globals';\nimport * as node from '../node/require-utils.node';\nimport assert from '../env-utils/assert';\nvar LATEST = 'beta';\nvar VERSION = typeof \"2.3.13\" !== 'undefined' ? \"2.3.13\" : LATEST;\nvar loadLibraryPromises = {};\nexport function loadLibrary(_x) {\n  return _loadLibrary.apply(this, arguments);\n}\nfunction _loadLibrary() {\n  _loadLibrary = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(libraryUrl) {\n    var moduleName,\n      options,\n      _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            moduleName = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            if (moduleName) {\n              libraryUrl = getLibraryUrl(libraryUrl, moduleName, options);\n            }\n            loadLibraryPromises[libraryUrl] = loadLibraryPromises[libraryUrl] || loadLibraryFromFile(libraryUrl);\n            _context.next = 6;\n            return loadLibraryPromises[libraryUrl];\n          case 6:\n            return _context.abrupt(\"return\", _context.sent);\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadLibrary.apply(this, arguments);\n}\nexport function getLibraryUrl(library, moduleName, options) {\n  var modules = options.modules || {};\n  if (modules[library]) {\n    return modules[library];\n  }\n  if (!isBrowser) {\n    return \"modules/\".concat(moduleName, \"/dist/libs/\").concat(library);\n  }\n  if (options.CDN) {\n    assert(options.CDN.startsWith('http'));\n    return \"\".concat(options.CDN, \"/\").concat(moduleName, \"@\").concat(VERSION, \"/dist/libs/\").concat(library);\n  }\n  if (isWorker) {\n    return \"../src/libs/\".concat(library);\n  }\n  return \"modules/\".concat(moduleName, \"/src/libs/\").concat(library);\n}\nfunction loadLibraryFromFile(_x2) {\n  return _loadLibraryFromFile.apply(this, arguments);\n}\nfunction _loadLibraryFromFile() {\n  _loadLibraryFromFile = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(libraryUrl) {\n    var _response, response, scriptSource;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!libraryUrl.endsWith('wasm')) {\n              _context2.next = 7;\n              break;\n            }\n            _context2.next = 3;\n            return fetch(libraryUrl);\n          case 3:\n            _response = _context2.sent;\n            _context2.next = 6;\n            return _response.arrayBuffer();\n          case 6:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 7:\n            if (isBrowser) {\n              _context2.next = 9;\n              break;\n            }\n            return _context2.abrupt(\"return\", node.requireFromFile && node.requireFromFile(libraryUrl));\n          case 9:\n            if (!isWorker) {\n              _context2.next = 11;\n              break;\n            }\n            return _context2.abrupt(\"return\", importScripts(libraryUrl));\n          case 11:\n            _context2.next = 13;\n            return fetch(libraryUrl);\n          case 13:\n            response = _context2.sent;\n            _context2.next = 16;\n            return response.text();\n          case 16:\n            scriptSource = _context2.sent;\n            return _context2.abrupt(\"return\", loadLibraryFromString(scriptSource, libraryUrl));\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _loadLibraryFromFile.apply(this, arguments);\n}\nfunction loadLibraryFromString(scriptSource, id) {\n  if (!isBrowser) {\n    return node.requireFromString && node.requireFromString(scriptSource, id);\n  }\n  if (isWorker) {\n    eval.call(global, scriptSource);\n    return null;\n  }\n  var script = document.createElement('script');\n  script.id = id;\n  try {\n    script.appendChild(document.createTextNode(scriptSource));\n  } catch (e) {\n    script.text = scriptSource;\n  }\n  document.body.appendChild(script);\n  return null;\n}","map":{"version":3,"names":["global","isBrowser","isWorker","node","assert","LATEST","VERSION","loadLibraryPromises","loadLibrary","_x","_loadLibrary","apply","arguments","_callee","libraryUrl","moduleName","options","_args","_regeneratorRuntime","wrap","_callee$","_context","prev","next","length","undefined","getLibraryUrl","loadLibraryFromFile","abrupt","sent","stop","library","modules","concat","CDN","startsWith","_callee2","_response","response","scriptSource","_callee2$","_context2","endsWith","fetch","arrayBuffer","requireFromFile","importScripts","text","loadLibraryFromString","id","requireFromString","eval","call","script","document","createElement","appendChild","createTextNode","e","body"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/json/node_modules/@loaders.gl/loader-utils/src/lib/library-utils/library-utils.js"],"sourcesContent":["/* global fetch, document */\nimport {global, isBrowser, isWorker} from '../env-utils/globals';\nimport * as node from '../node/require-utils.node';\nimport assert from '../env-utils/assert';\n\n// TODO - unpkg.com doesn't seem to have a `latest` specifier for alpha releases...\nconst LATEST = 'beta';\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : LATEST;\n\nconst loadLibraryPromises = {}; // promises\n\n// Dynamically loads a library (\"module\")\nexport async function loadLibrary(libraryUrl, moduleName = null, options = {}) {\n  if (moduleName) {\n    libraryUrl = getLibraryUrl(libraryUrl, moduleName, options);\n  }\n\n  // Ensure libraries are only loaded once\n  loadLibraryPromises[libraryUrl] =\n    loadLibraryPromises[libraryUrl] || loadLibraryFromFile(libraryUrl);\n  return await loadLibraryPromises[libraryUrl];\n}\n\n// TODO - sort out how to resolve paths for main/worker and dev/prod\nexport function getLibraryUrl(library, moduleName, options) {\n  // Allow application to import and supply libraries through `options.modules`\n  const modules = options.modules || {};\n  if (modules[library]) {\n    return modules[library];\n  }\n\n  // Load from local files, not from CDN scripts in Node.js\n  // TODO - needs to locate the modules directory when installed!\n  if (!isBrowser) {\n    return `modules/${moduleName}/dist/libs/${library}`;\n  }\n\n  // In browser, load from external scripts\n  if (options.CDN) {\n    assert(options.CDN.startsWith('http'));\n    return `${options.CDN}/${moduleName}@${VERSION}/dist/libs/${library}`;\n  }\n\n  // TODO - loading inside workers requires paths relative to worker script location...\n  if (isWorker) {\n    return `../src/libs/${library}`;\n  }\n\n  return `modules/${moduleName}/src/libs/${library}`;\n}\n\nasync function loadLibraryFromFile(libraryUrl) {\n  if (libraryUrl.endsWith('wasm')) {\n    const response = await fetch(libraryUrl);\n    return await response.arrayBuffer();\n  }\n\n  if (!isBrowser) {\n    return node.requireFromFile && node.requireFromFile(libraryUrl);\n  }\n  if (isWorker) {\n    /* global importScripts */\n    return importScripts(libraryUrl);\n  }\n  // TODO - fix - should be more secure than string parsing since observes CORS\n  // if (isBrowser) {\n  //   return await loadScriptFromFile(libraryUrl);\n  // }\n\n  const response = await fetch(libraryUrl);\n  const scriptSource = await response.text();\n  return loadLibraryFromString(scriptSource, libraryUrl);\n}\n\n/*\nasync function loadScriptFromFile(libraryUrl) {\n  const script = document.createElement('script');\n  script.src = libraryUrl;\n  return await new Promise((resolve, reject) => {\n    script.onload = data => {\n      resolve(data);\n    };\n    script.onerror = reject;\n  });\n}\n*/\n\n// TODO - Needs security audit...\n//  - Raw eval call\n//  - Potentially bypasses CORS\n// Upside is that this separates fetching and parsing\n// we could create a`LibraryLoader` or`ModuleLoader`\nfunction loadLibraryFromString(scriptSource, id) {\n  if (!isBrowser) {\n    return node.requireFromString && node.requireFromString(scriptSource, id);\n  }\n\n  if (isWorker) {\n    // Use lvalue trick to make eval run in global scope\n    eval.call(global, scriptSource); // eslint-disable-line no-eval\n    // https://stackoverflow.com/questions/9107240/1-evalthis-vs-evalthis-in-javascript\n    // http://perfectionkills.com/global-eval-what-are-the-options/\n    return null;\n  }\n\n  const script = document.createElement('script');\n  script.id = id;\n  // most browsers like a separate text node but some throw an error. The second method covers those.\n  try {\n    script.appendChild(document.createTextNode(scriptSource));\n  } catch (e) {\n    script.text = scriptSource;\n  }\n  document.body.appendChild(script);\n  return null;\n}\n\n// TODO - technique for module injection into worker, from THREE.DracoLoader...\n/*\nfunction combineWorkerWithLibrary(worker, jsContent) {\n  var fn = wWorker.toString();\n  var body = [\n    '// injected',\n    jsContent,\n    '',\n    '// worker',\n    fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))\n  ].join('\\n');\n  this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n}\n*/\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}