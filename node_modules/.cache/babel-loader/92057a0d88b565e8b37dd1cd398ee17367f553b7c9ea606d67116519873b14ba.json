{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { DracoLoader as DracoWorkerLoader } from './draco-loader';\nimport DracoParser from './lib/draco-parser';\nimport { loadDracoDecoderModule } from './lib/draco-module-loader';\nimport { VERSION } from './lib/utils/version';\nimport { isBrowser } from '@loaders.gl/worker-utils';\nexport { DracoWriter } from './draco-writer';\nexport var DracoWriterWorker = {\n  id: isBrowser ? 'draco-writer' : 'draco-writer-nodejs',\n  name: 'Draco compressed geometry writer',\n  module: 'draco',\n  version: VERSION,\n  worker: true,\n  options: {\n    draco: {},\n    source: null\n  }\n};\nexport { DracoWorkerLoader };\nexport var DracoLoader = _objectSpread(_objectSpread({}, DracoWorkerLoader), {}, {\n  parse: parse\n});\nfunction parse(_x, _x2) {\n  return _parse.apply(this, arguments);\n}\nfunction _parse() {\n  _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(arrayBuffer, options) {\n    var _yield$loadDracoDecod, draco, dracoParser;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return loadDracoDecoderModule(options);\n        case 2:\n          _yield$loadDracoDecod = _context.sent;\n          draco = _yield$loadDracoDecod.draco;\n          dracoParser = new DracoParser(draco);\n          _context.prev = 5;\n          return _context.abrupt(\"return\", dracoParser.parseSync(arrayBuffer, options === null || options === void 0 ? void 0 : options.draco));\n        case 7:\n          _context.prev = 7;\n          dracoParser.destroy();\n          return _context.finish(7);\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[5,, 7, 10]]);\n  }));\n  return _parse.apply(this, arguments);\n}\nexport var _TypecheckDracoLoader = DracoLoader;","map":{"version":3,"names":["DracoLoader","DracoWorkerLoader","DracoParser","loadDracoDecoderModule","VERSION","isBrowser","DracoWriter","DracoWriterWorker","id","name","module","version","worker","options","draco","source","_objectSpread","parse","_x","_x2","_parse","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","arrayBuffer","_yield$loadDracoDecod","dracoParser","wrap","_callee$","_context","prev","next","sent","abrupt","parseSync","destroy","finish","stop","_TypecheckDracoLoader"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/geo-layers/node_modules/@loaders.gl/draco/src/index.ts"],"sourcesContent":["import type {LoaderWithParser} from '@loaders.gl/loader-utils';\nimport type {DracoMesh, DracoLoaderData} from './lib/draco-types';\nimport type {DracoLoaderOptions} from './draco-loader';\nimport {DracoLoader as DracoWorkerLoader} from './draco-loader';\nimport DracoParser from './lib/draco-parser';\nimport {loadDracoDecoderModule} from './lib/draco-module-loader';\nimport {VERSION} from './lib/utils/version';\nimport {isBrowser} from '@loaders.gl/worker-utils';\n\n// Draco data types\n\nexport type {DracoMesh, DracoLoaderData};\n\n// Draco Writer\n\nexport type {DracoWriterOptions} from './draco-writer';\nexport {DracoWriter} from './draco-writer';\n\n/**\n * Browser worker doesn't work because of issue during \"draco_encoder.js\" loading.\n * Refused to execute script from 'https://raw.githubusercontent.com/google/draco/1.4.1/javascript/draco_encoder.js' because its MIME type ('') is not executable.\n */\nexport const DracoWriterWorker = {\n  id: isBrowser ? 'draco-writer' : 'draco-writer-nodejs',\n  name: 'Draco compressed geometry writer',\n  module: 'draco',\n  version: VERSION,\n  worker: true,\n  options: {\n    draco: {},\n    source: null\n  }\n};\n\n// Draco Loader\n\nexport type {DracoLoaderOptions};\nexport {DracoWorkerLoader};\n\n/**\n * Loader for Draco3D compressed geometries\n */\nexport const DracoLoader = {\n  ...DracoWorkerLoader,\n  parse\n};\n\nasync function parse(arrayBuffer: ArrayBuffer, options?: DracoLoaderOptions): Promise<DracoMesh> {\n  const {draco} = await loadDracoDecoderModule(options);\n  const dracoParser = new DracoParser(draco);\n  try {\n    return dracoParser.parseSync(arrayBuffer, options?.draco);\n  } finally {\n    dracoParser.destroy();\n  }\n}\n\n// TYPE TESTS - TODO find a better way than exporting junk\nexport const _TypecheckDracoLoader: LoaderWithParser = DracoLoader;\n"],"mappings":";;;AAGA,SAAQA,WAAW,IAAIC,iBAAiB,QAAO,gBAAgB;AAC/D,OAAOC,WAAW,MAAM,oBAAoB;AAC5C,SAAQC,sBAAsB,QAAO,2BAA2B;AAChE,SAAQC,OAAO,QAAO,qBAAqB;AAC3C,SAAQC,SAAS,QAAO,0BAA0B;AASlD,SAAQC,WAAW,QAAO,gBAAgB;AAM1C,OAAO,IAAMC,iBAAiB,GAAG;EAC/BC,EAAE,EAAEH,SAAS,GAAG,cAAc,GAAG,qBAAqB;EACtDI,IAAI,EAAE,kCAAkC;EACxCC,MAAM,EAAE,OAAO;EACfC,OAAO,EAAEP,OAAO;EAChBQ,MAAM,EAAE,IAAI;EACZC,OAAO,EAAE;IACPC,KAAK,EAAE,CAAC,CAAC;IACTC,MAAM,EAAE;EACV;AACF,CAAC;AAKD,SAAQd,iBAAiB;AAKzB,OAAO,IAAMD,WAAW,GAAAgB,aAAA,CAAAA,aAAA,KACnBf,iBAAiB;EACpBgB,KAAA,EAAAA;AAAA,EACD;AAAA,SAEcA,KAAKA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,MAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,OAAA;EAAAA,MAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAApB,SAAAC,QAAqBC,WAAwB,EAAEd,OAA4B;IAAA,IAAAe,qBAAA,EAAAd,KAAA,EAAAe,WAAA;IAAA,OAAAL,mBAAA,GAAAM,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAAF,QAAA,CAAAE,IAAA;UAAA,OACnD/B,sBAAsB,CAACU,OAAO,CAAC;QAAA;UAAAe,qBAAA,GAAAI,QAAA,CAAAG,IAAA;UAA9CrB,KAAA,GAAAc,qBAAA,CAAAd,KAAA;UACDe,WAAW,GAAG,IAAI3B,WAAW,CAACY,KAAK,CAAC;UAAAkB,QAAA,CAAAC,IAAA;UAAA,OAAAD,QAAA,CAAAI,MAAA,WAEjCP,WAAW,CAACQ,SAAS,CAACV,WAAW,EAAEd,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC,KAAK,CAAC;QAAA;UAAAkB,QAAA,CAAAC,IAAA;UAEzDJ,WAAW,CAACS,OAAO,EAAE;UAAA,OAAAN,QAAA,CAAAO,MAAA;QAAA;QAAA;UAAA,OAAAP,QAAA,CAAAQ,IAAA;MAAA;IAAA,GAAAd,OAAA;EAAA,CAEzB;EAAA,OAAAN,MAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAGA,OAAO,IAAMmB,qBAAuC,GAAGzC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}