{"ast":null,"code":"import _slicedToArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport MathArray from './base/math-array';\nimport Quaternion from './quaternion';\nimport { clamp } from '../lib/common';\nimport { checkNumber } from '../lib/validators';\nvar ERR_UNKNOWN_ORDER = 'Unknown Euler angle order';\nvar ALMOST_ONE = 0.99999;\nvar RotationOrder;\n(function (RotationOrder) {\n  RotationOrder[RotationOrder[\"ZYX\"] = 0] = \"ZYX\";\n  RotationOrder[RotationOrder[\"YXZ\"] = 1] = \"YXZ\";\n  RotationOrder[RotationOrder[\"XZY\"] = 2] = \"XZY\";\n  RotationOrder[RotationOrder[\"ZXY\"] = 3] = \"ZXY\";\n  RotationOrder[RotationOrder[\"YZX\"] = 4] = \"YZX\";\n  RotationOrder[RotationOrder[\"XYZ\"] = 5] = \"XYZ\";\n})(RotationOrder || (RotationOrder = {}));\nvar Euler = /*#__PURE__*/function (_MathArray) {\n  _inherits(Euler, _MathArray);\n  var _super = _createSuper(Euler);\n  function Euler() {\n    var _this;\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Euler.DefaultOrder;\n    _classCallCheck(this, Euler);\n    _this = _super.call(this, -0, -0, -0, -0);\n    if (arguments.length > 0 && Array.isArray(arguments[0])) {\n      var _this2;\n      (_this2 = _this).fromVector3.apply(_this2, arguments);\n    } else {\n      _this.set(x, y, z, order);\n    }\n    return _this;\n  }\n  _createClass(Euler, [{\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 4;\n    }\n  }, {\n    key: \"fromQuaternion\",\n    value: function fromQuaternion(quaternion) {\n      var _quaternion = _slicedToArray(quaternion, 4),\n        x = _quaternion[0],\n        y = _quaternion[1],\n        z = _quaternion[2],\n        w = _quaternion[3];\n      var ysqr = y * y;\n      var t0 = -2 * (ysqr + z * z) + 1;\n      var t1 = +2 * (x * y + w * z);\n      var t2 = -2 * (x * z - w * y);\n      var t3 = +2 * (y * z + w * x);\n      var t4 = -2 * (x * x + ysqr) + 1;\n      t2 = t2 > 1 ? 1 : t2;\n      t2 = t2 < -1 ? -1 : t2;\n      var roll = Math.atan2(t3, t4);\n      var pitch = Math.asin(t2);\n      var yaw = Math.atan2(t1, t0);\n      return this.set(roll, pitch, yaw, Euler.RollPitchYaw);\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(object) {\n      throw new Error('not implemented');\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(array) {\n      this[0] = array[0];\n      this[1] = array[1];\n      this[2] = array[2];\n      this[3] = Number.isFinite(array[3]) || this.order;\n      return this.check();\n    }\n  }, {\n    key: \"set\",\n    value: function set() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var order = arguments.length > 3 ? arguments[3] : undefined;\n      this[0] = x;\n      this[1] = y;\n      this[2] = z;\n      this[3] = Number.isFinite(order) ? order : this[3];\n      return this.check();\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      return validateOrder(this[3]) && Number.isFinite(this[0]) && Number.isFinite(this[1]) && Number.isFinite(this[2]);\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      array[offset] = this[0];\n      array[offset + 1] = this[1];\n      array[offset + 2] = this[2];\n      return array;\n    }\n  }, {\n    key: \"toArray4\",\n    value: function toArray4() {\n      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      array[offset] = this[0];\n      array[offset + 1] = this[1];\n      array[offset + 2] = this[2];\n      array[offset + 3] = this[3];\n      return array;\n    }\n  }, {\n    key: \"toVector3\",\n    value: function toVector3() {\n      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [-0, -0, -0];\n      result[0] = this[0];\n      result[1] = this[1];\n      result[2] = this[2];\n      return result;\n    }\n  }, {\n    key: \"x\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      this[0] = checkNumber(value);\n    }\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      this[1] = checkNumber(value);\n    }\n  }, {\n    key: \"z\",\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      this[2] = checkNumber(value);\n    }\n  }, {\n    key: \"alpha\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      this[0] = checkNumber(value);\n    }\n  }, {\n    key: \"beta\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      this[1] = checkNumber(value);\n    }\n  }, {\n    key: \"gamma\",\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      this[2] = checkNumber(value);\n    }\n  }, {\n    key: \"phi\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      this[0] = checkNumber(value);\n    }\n  }, {\n    key: \"theta\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      this[1] = checkNumber(value);\n    }\n  }, {\n    key: \"psi\",\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      this[2] = checkNumber(value);\n    }\n  }, {\n    key: \"roll\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      this[0] = checkNumber(value);\n    }\n  }, {\n    key: \"pitch\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      this[1] = checkNumber(value);\n    }\n  }, {\n    key: \"yaw\",\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      this[2] = checkNumber(value);\n    }\n  }, {\n    key: \"order\",\n    get: function get() {\n      return this[3];\n    },\n    set: function set(value) {\n      this[3] = checkOrder(value);\n    }\n  }, {\n    key: \"fromVector3\",\n    value: function fromVector3(v, order) {\n      return this.set(v[0], v[1], v[2], Number.isFinite(order) ? order : this[3]);\n    }\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(array) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this[0] = array[0 + offset];\n      this[1] = array[1 + offset];\n      this[2] = array[2 + offset];\n      if (array[3] !== undefined) {\n        this[3] = array[3];\n      }\n      return this.check();\n    }\n  }, {\n    key: \"fromRollPitchYaw\",\n    value: function fromRollPitchYaw(roll, pitch, yaw) {\n      return this.set(roll, pitch, yaw, RotationOrder.ZYX);\n    }\n  }, {\n    key: \"fromRotationMatrix\",\n    value: function fromRotationMatrix(m) {\n      var order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Euler.DefaultOrder;\n      this._fromRotationMatrix(m, order);\n      return this.check();\n    }\n  }, {\n    key: \"getRotationMatrix\",\n    value: function getRotationMatrix(m) {\n      return this._getRotationMatrix(m);\n    }\n  }, {\n    key: \"getQuaternion\",\n    value: function getQuaternion() {\n      var q = new Quaternion();\n      switch (this[4]) {\n        case RotationOrder.XYZ:\n          return q.rotateX(this[0]).rotateY(this[1]).rotateZ(this[2]);\n        case RotationOrder.YXZ:\n          return q.rotateY(this[0]).rotateX(this[1]).rotateZ(this[2]);\n        case RotationOrder.ZXY:\n          return q.rotateZ(this[0]).rotateX(this[1]).rotateY(this[2]);\n        case RotationOrder.ZYX:\n          return q.rotateZ(this[0]).rotateY(this[1]).rotateX(this[2]);\n        case RotationOrder.YZX:\n          return q.rotateY(this[0]).rotateZ(this[1]).rotateX(this[2]);\n        case RotationOrder.XZY:\n          return q.rotateX(this[0]).rotateZ(this[1]).rotateY(this[2]);\n        default:\n          throw new Error(ERR_UNKNOWN_ORDER);\n      }\n    }\n  }, {\n    key: \"_fromRotationMatrix\",\n    value: function _fromRotationMatrix(m) {\n      var order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Euler.DefaultOrder;\n      var m11 = m[0],\n        m12 = m[4],\n        m13 = m[8];\n      var m21 = m[1],\n        m22 = m[5],\n        m23 = m[9];\n      var m31 = m[2],\n        m32 = m[6],\n        m33 = m[10];\n      order = order || this[3];\n      switch (order) {\n        case Euler.XYZ:\n          this[1] = Math.asin(clamp(m13, -1, 1));\n          if (Math.abs(m13) < ALMOST_ONE) {\n            this[0] = Math.atan2(-m23, m33);\n            this[2] = Math.atan2(-m12, m11);\n          } else {\n            this[0] = Math.atan2(m32, m22);\n            this[2] = 0;\n          }\n          break;\n        case Euler.YXZ:\n          this[0] = Math.asin(-clamp(m23, -1, 1));\n          if (Math.abs(m23) < ALMOST_ONE) {\n            this[1] = Math.atan2(m13, m33);\n            this[2] = Math.atan2(m21, m22);\n          } else {\n            this[1] = Math.atan2(-m31, m11);\n            this[2] = 0;\n          }\n          break;\n        case Euler.ZXY:\n          this[0] = Math.asin(clamp(m32, -1, 1));\n          if (Math.abs(m32) < ALMOST_ONE) {\n            this[1] = Math.atan2(-m31, m33);\n            this[2] = Math.atan2(-m12, m22);\n          } else {\n            this[1] = 0;\n            this[2] = Math.atan2(m21, m11);\n          }\n          break;\n        case Euler.ZYX:\n          this[1] = Math.asin(-clamp(m31, -1, 1));\n          if (Math.abs(m31) < ALMOST_ONE) {\n            this[0] = Math.atan2(m32, m33);\n            this[2] = Math.atan2(m21, m11);\n          } else {\n            this[0] = 0;\n            this[2] = Math.atan2(-m12, m22);\n          }\n          break;\n        case Euler.YZX:\n          this[2] = Math.asin(clamp(m21, -1, 1));\n          if (Math.abs(m21) < ALMOST_ONE) {\n            this[0] = Math.atan2(-m23, m22);\n            this[1] = Math.atan2(-m31, m11);\n          } else {\n            this[0] = 0;\n            this[1] = Math.atan2(m13, m33);\n          }\n          break;\n        case Euler.XZY:\n          this[2] = Math.asin(-clamp(m12, -1, 1));\n          if (Math.abs(m12) < ALMOST_ONE) {\n            this[0] = Math.atan2(m32, m22);\n            this[1] = Math.atan2(m13, m11);\n          } else {\n            this[0] = Math.atan2(-m23, m33);\n            this[1] = 0;\n          }\n          break;\n        default:\n          throw new Error(ERR_UNKNOWN_ORDER);\n      }\n      this[3] = order;\n      return this;\n    }\n  }, {\n    key: \"_getRotationMatrix\",\n    value: function _getRotationMatrix(result) {\n      var te = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n      var x = this.x,\n        y = this.y,\n        z = this.z;\n      var a = Math.cos(x);\n      var c = Math.cos(y);\n      var e = Math.cos(z);\n      var b = Math.sin(x);\n      var d = Math.sin(y);\n      var f = Math.sin(z);\n      switch (this[3]) {\n        case Euler.XYZ:\n          {\n            var ae = a * e,\n              af = a * f,\n              be = b * e,\n              bf = b * f;\n            te[0] = c * e;\n            te[4] = -c * f;\n            te[8] = d;\n            te[1] = af + be * d;\n            te[5] = ae - bf * d;\n            te[9] = -b * c;\n            te[2] = bf - ae * d;\n            te[6] = be + af * d;\n            te[10] = a * c;\n            break;\n          }\n        case Euler.YXZ:\n          {\n            var ce = c * e,\n              cf = c * f,\n              de = d * e,\n              df = d * f;\n            te[0] = ce + df * b;\n            te[4] = de * b - cf;\n            te[8] = a * d;\n            te[1] = a * f;\n            te[5] = a * e;\n            te[9] = -b;\n            te[2] = cf * b - de;\n            te[6] = df + ce * b;\n            te[10] = a * c;\n            break;\n          }\n        case Euler.ZXY:\n          {\n            var _ce = c * e,\n              _cf = c * f,\n              _de = d * e,\n              _df = d * f;\n            te[0] = _ce - _df * b;\n            te[4] = -a * f;\n            te[8] = _de + _cf * b;\n            te[1] = _cf + _de * b;\n            te[5] = a * e;\n            te[9] = _df - _ce * b;\n            te[2] = -a * d;\n            te[6] = b;\n            te[10] = a * c;\n            break;\n          }\n        case Euler.ZYX:\n          {\n            var _ae = a * e,\n              _af = a * f,\n              _be = b * e,\n              _bf = b * f;\n            te[0] = c * e;\n            te[4] = _be * d - _af;\n            te[8] = _ae * d + _bf;\n            te[1] = c * f;\n            te[5] = _bf * d + _ae;\n            te[9] = _af * d - _be;\n            te[2] = -d;\n            te[6] = b * c;\n            te[10] = a * c;\n            break;\n          }\n        case Euler.YZX:\n          {\n            var ac = a * c,\n              ad = a * d,\n              bc = b * c,\n              bd = b * d;\n            te[0] = c * e;\n            te[4] = bd - ac * f;\n            te[8] = bc * f + ad;\n            te[1] = f;\n            te[5] = a * e;\n            te[9] = -b * e;\n            te[2] = -d * e;\n            te[6] = ad * f + bc;\n            te[10] = ac - bd * f;\n            break;\n          }\n        case Euler.XZY:\n          {\n            var _ac = a * c,\n              _ad = a * d,\n              _bc = b * c,\n              _bd = b * d;\n            te[0] = c * e;\n            te[4] = -f;\n            te[8] = d * e;\n            te[1] = _ac * f + _bd;\n            te[5] = a * e;\n            te[9] = _ad * f - _bc;\n            te[2] = _bc * f - _ad;\n            te[6] = b * e;\n            te[10] = _bd * f + _ac;\n            break;\n          }\n        default:\n          throw new Error(ERR_UNKNOWN_ORDER);\n      }\n      te[3] = 0;\n      te[7] = 0;\n      te[11] = 0;\n      te[12] = 0;\n      te[13] = 0;\n      te[14] = 0;\n      te[15] = 1;\n      return te;\n    }\n  }, {\n    key: \"toQuaternion\",\n    value: function toQuaternion() {\n      var cy = Math.cos(this.yaw * 0.5);\n      var sy = Math.sin(this.yaw * 0.5);\n      var cr = Math.cos(this.roll * 0.5);\n      var sr = Math.sin(this.roll * 0.5);\n      var cp = Math.cos(this.pitch * 0.5);\n      var sp = Math.sin(this.pitch * 0.5);\n      var w = cy * cr * cp + sy * sr * sp;\n      var x = cy * sr * cp - sy * cr * sp;\n      var y = cy * cr * sp + sy * sr * cp;\n      var z = sy * cr * cp - cy * sr * sp;\n      return new Quaternion(x, y, z, w);\n    }\n  }], [{\n    key: \"ZYX\",\n    get: function get() {\n      return RotationOrder.ZYX;\n    }\n  }, {\n    key: \"YXZ\",\n    get: function get() {\n      return RotationOrder.YXZ;\n    }\n  }, {\n    key: \"XZY\",\n    get: function get() {\n      return RotationOrder.XZY;\n    }\n  }, {\n    key: \"ZXY\",\n    get: function get() {\n      return RotationOrder.ZXY;\n    }\n  }, {\n    key: \"YZX\",\n    get: function get() {\n      return RotationOrder.YZX;\n    }\n  }, {\n    key: \"XYZ\",\n    get: function get() {\n      return RotationOrder.XYZ;\n    }\n  }, {\n    key: \"RollPitchYaw\",\n    get: function get() {\n      return RotationOrder.ZYX;\n    }\n  }, {\n    key: \"DefaultOrder\",\n    get: function get() {\n      return RotationOrder.ZYX;\n    }\n  }, {\n    key: \"RotationOrders\",\n    get: function get() {\n      return RotationOrder;\n    }\n  }, {\n    key: \"rotationOrder\",\n    value: function rotationOrder(order) {\n      return RotationOrder[order];\n    }\n  }]);\n  return Euler;\n}(MathArray);\nexport { Euler as default };\nfunction validateOrder(value) {\n  return value >= 0 && value < 6;\n}\nfunction checkOrder(value) {\n  if (value < 0 && value >= 6) {\n    throw new Error(ERR_UNKNOWN_ORDER);\n  }\n  return value;\n}","map":{"version":3,"names":["MathArray","Quaternion","clamp","checkNumber","ERR_UNKNOWN_ORDER","ALMOST_ONE","RotationOrder","Euler","_MathArray","_inherits","_super","_createSuper","_this","x","arguments","length","undefined","y","z","order","DefaultOrder","_classCallCheck","call","Array","isArray","_this2","fromVector3","apply","set","_createClass","key","get","value","fromQuaternion","quaternion","_quaternion","_slicedToArray","w","ysqr","t0","t1","t2","t3","t4","roll","Math","atan2","pitch","asin","yaw","RollPitchYaw","fromObject","object","Error","copy","array","Number","isFinite","check","validate","validateOrder","toArray","offset","toArray4","toVector3","result","checkOrder","v","fromArray","fromRollPitchYaw","ZYX","fromRotationMatrix","m","_fromRotationMatrix","getRotationMatrix","_getRotationMatrix","getQuaternion","q","XYZ","rotateX","rotateY","rotateZ","YXZ","ZXY","YZX","XZY","m11","m12","m13","m21","m22","m23","m31","m32","m33","abs","te","a","cos","c","e","b","sin","d","f","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","toQuaternion","cy","sy","cr","sr","cp","sp","rotationOrder","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@math.gl/core/src/classes/euler.ts"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport MathArray from './base/math-array';\nimport Quaternion from './quaternion';\nimport {NumericArray} from '@math.gl/types';\n\nimport {clamp} from '../lib/common';\nimport {checkNumber} from '../lib/validators';\n\n// Internal constants\nconst ERR_UNKNOWN_ORDER = 'Unknown Euler angle order';\nconst ALMOST_ONE = 0.99999;\n\nenum RotationOrder {\n  ZYX = 0,\n  YXZ = 1,\n  XZY = 2,\n  ZXY = 3,\n  YZX = 4,\n  XYZ = 5\n}\n\nexport default class Euler extends MathArray {\n  // Constants\n  static get ZYX(): RotationOrder {\n    return RotationOrder.ZYX;\n  }\n  static get YXZ(): RotationOrder {\n    return RotationOrder.YXZ;\n  }\n  static get XZY(): RotationOrder {\n    return RotationOrder.XZY;\n  }\n  static get ZXY(): RotationOrder {\n    return RotationOrder.ZXY;\n  }\n  static get YZX(): RotationOrder {\n    return RotationOrder.YZX;\n  }\n  static get XYZ(): RotationOrder {\n    return RotationOrder.XYZ;\n  }\n  static get RollPitchYaw(): RotationOrder {\n    return RotationOrder.ZYX;\n  }\n  static get DefaultOrder(): RotationOrder {\n    return RotationOrder.ZYX;\n  }\n  static get RotationOrders(): typeof RotationOrder {\n    return RotationOrder;\n  }\n  static rotationOrder(order: RotationOrder): string {\n    return RotationOrder[order];\n  }\n  get ELEMENTS(): number {\n    return 4;\n  }\n\n  /**\n   * @class\n   * @param {Number | Number[]} x\n   * @param {Number=} [y]\n   * @param {Number=} [z]\n   * @param {Number=} [order]\n   */\n  constructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0);\n    // eslint-disable-next-line prefer-rest-params\n    if (arguments.length > 0 && Array.isArray(arguments[0])) {\n      // eslint-disable-next-line prefer-rest-params\n      // @ts-expect-error\n      this.fromVector3(...arguments);\n    } else {\n      this.set(x, y, z, order);\n    }\n  }\n\n  fromQuaternion(quaternion: Readonly<NumericArray>): this {\n    const [x, y, z, w] = quaternion;\n    const ysqr = y * y;\n    const t0 = -2 * (ysqr + z * z) + 1;\n    const t1 = +2 * (x * y + w * z);\n    let t2 = -2 * (x * z - w * y);\n    const t3 = +2 * (y * z + w * x);\n    const t4 = -2 * (x * x + ysqr) + 1;\n    t2 = t2 > 1 ? 1 : t2;\n    t2 = t2 < -1 ? -1 : t2;\n    const roll = Math.atan2(t3, t4);\n    const pitch = Math.asin(t2);\n    const yaw = Math.atan2(t1, t0);\n    return this.set(roll, pitch, yaw, Euler.RollPitchYaw);\n  }\n\n  fromObject(object: object): this {\n    throw new Error('not implemented');\n    //  return this.set(object.x, object.y, object.z, object.order);\n  }\n\n  // fromQuaternion(q, order) {\n  //   this._fromRotationMat[-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n  //   return this.check();\n  // }\n  // If copied array does contain fourth element, preserves currently set order\n  copy(array: Readonly<NumericArray>): this {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    // @ts-expect-error\n    this[3] = Number.isFinite(array[3]) || this.order;\n    return this.check();\n  }\n\n  // Sets the three angles, and optionally sets the rotation order\n  // If order is not specified, preserves currently set order\n  set(x = 0, y = 0, z = 0, order: RotationOrder): this {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = Number.isFinite(order) ? order : this[3];\n    return this.check();\n  }\n\n  validate(): boolean {\n    return (\n      validateOrder(this[3]) &&\n      Number.isFinite(this[0]) &&\n      Number.isFinite(this[1]) &&\n      Number.isFinite(this[2])\n    );\n  }\n\n  // Does not copy the orientation element\n  toArray(array: NumericArray = [], offset: number = 0): NumericArray {\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    return array;\n  }\n\n  // Copies the orientation element\n  toArray4(array: NumericArray = [], offset: number = 0): NumericArray {\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    array[offset + 3] = this[3];\n    return array;\n  }\n\n  toVector3(result: NumericArray = [-0, -0, -0]): NumericArray {\n    result[0] = this[0];\n    result[1] = this[1];\n    result[2] = this[2];\n    return result;\n  }\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  // x, y, z angle notation (note: only corresponds to axis in XYZ orientation)\n\n  get x(): number {\n    return this[0];\n  }\n  set x(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get y(): number {\n    return this[1];\n  }\n  set y(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get z(): number {\n    return this[2];\n  }\n  set z(value: number) {\n    this[2] = checkNumber(value);\n  }\n  // alpha, beta, gamma angle notation\n  get alpha(): number {\n    return this[0];\n  }\n  set alpha(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get beta(): number {\n    return this[1];\n  }\n  set beta(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get gamma(): number {\n    return this[2];\n  }\n  set gamma(value: number) {\n    this[2] = checkNumber(value);\n  }\n\n  // phi, theta, psi angle notation\n  get phi(): number {\n    return this[0];\n  }\n  set phi(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get theta(): number {\n    return this[1];\n  }\n  set theta(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get psi(): number {\n    return this[2];\n  }\n  set psi(value: number) {\n    this[2] = checkNumber(value);\n  }\n  // roll, pitch, yaw angle notation\n\n  get roll(): number {\n    return this[0];\n  }\n  set roll(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get pitch(): number {\n    return this[1];\n  }\n  set pitch(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get yaw(): number {\n    return this[2];\n  }\n  set yaw(value: number) {\n    this[2] = checkNumber(value);\n  }\n\n  // rotation order, in all three angle notations\n  get order(): RotationOrder {\n    return this[3];\n  }\n  set order(value: RotationOrder) {\n    this[3] = checkOrder(value);\n  }\n\n  // Constructors\n  fromVector3(v: Readonly<NumericArray>, order: RotationOrder): this {\n    return this.set(v[0], v[1], v[2], Number.isFinite(order) ? order : this[3]);\n  }\n\n  // TODO - with and without 4th element\n  fromArray(array: Readonly<NumericArray>, offset: number = 0): this {\n    this[0] = array[0 + offset];\n    this[1] = array[1 + offset];\n    this[2] = array[2 + offset];\n    if (array[3] !== undefined) {\n      this[3] = array[3];\n    }\n    return this.check();\n  }\n\n  // Common ZYX rotation order\n  fromRollPitchYaw(roll: number, pitch: number, yaw: number): this {\n    return this.set(roll, pitch, yaw, RotationOrder.ZYX);\n  }\n\n  fromRotationMatrix(m: Readonly<NumericArray>, order: RotationOrder = Euler.DefaultOrder): this {\n    this._fromRotationMatrix(m, order);\n    return this.check();\n  }\n\n  // ACCESSORS\n\n  getRotationMatrix(m: NumericArray): NumericArray {\n    return this._getRotationMatrix(m);\n  }\n\n  // TODO - move to Quaternion\n  getQuaternion(): Quaternion {\n    const q = new Quaternion();\n    switch (this[4]) {\n      case RotationOrder.XYZ:\n        return q.rotateX(this[0]).rotateY(this[1]).rotateZ(this[2]);\n      case RotationOrder.YXZ:\n        return q.rotateY(this[0]).rotateX(this[1]).rotateZ(this[2]);\n      case RotationOrder.ZXY:\n        return q.rotateZ(this[0]).rotateX(this[1]).rotateY(this[2]);\n      case RotationOrder.ZYX:\n        return q.rotateZ(this[0]).rotateY(this[1]).rotateX(this[2]);\n      case RotationOrder.YZX:\n        return q.rotateY(this[0]).rotateZ(this[1]).rotateX(this[2]);\n      case RotationOrder.XZY:\n        return q.rotateX(this[0]).rotateZ(this[1]).rotateY(this[2]);\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n  }\n\n  // INTERNAL METHODS\n  // Conversion from Euler to rotation matrix and from matrix to Euler\n  // Adapted from three.js under MIT license\n  // // WARNING: this discards revolution information -bhouston\n  // reorder(newOrder) {\n  //   const q = new Quaternion().setFromEuler(this);\n  //   return this.setFromQuaternion(q, newOrder);\n  /* eslint-disable complexity, max-statements, one-var */\n  _fromRotationMatrix(m: Readonly<NumericArray>, order = Euler.DefaultOrder): this {\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n    const m11 = m[0],\n      m12 = m[4],\n      m13 = m[8];\n    const m21 = m[1],\n      m22 = m[5],\n      m23 = m[9];\n    const m31 = m[2],\n      m32 = m[6],\n      m33 = m[10];\n    order = order || this[3];\n    switch (order) {\n      case Euler.XYZ:\n        this[1] = Math.asin(clamp(m13, -1, 1));\n        if (Math.abs(m13) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m33);\n          this[2] = Math.atan2(-m12, m11);\n        } else {\n          this[0] = Math.atan2(m32, m22);\n          this[2] = 0;\n        }\n        break;\n      case Euler.YXZ:\n        this[0] = Math.asin(-clamp(m23, -1, 1));\n        if (Math.abs(m23) < ALMOST_ONE) {\n          this[1] = Math.atan2(m13, m33);\n          this[2] = Math.atan2(m21, m22);\n        } else {\n          this[1] = Math.atan2(-m31, m11);\n          this[2] = 0;\n        }\n        break;\n      case Euler.ZXY:\n        this[0] = Math.asin(clamp(m32, -1, 1));\n        if (Math.abs(m32) < ALMOST_ONE) {\n          this[1] = Math.atan2(-m31, m33);\n          this[2] = Math.atan2(-m12, m22);\n        } else {\n          this[1] = 0;\n          this[2] = Math.atan2(m21, m11);\n        }\n        break;\n      case Euler.ZYX:\n        this[1] = Math.asin(-clamp(m31, -1, 1));\n        if (Math.abs(m31) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m33);\n          this[2] = Math.atan2(m21, m11);\n        } else {\n          this[0] = 0;\n          this[2] = Math.atan2(-m12, m22);\n        }\n        break;\n      case Euler.YZX:\n        this[2] = Math.asin(clamp(m21, -1, 1));\n        if (Math.abs(m21) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m22);\n          this[1] = Math.atan2(-m31, m11);\n        } else {\n          this[0] = 0;\n          this[1] = Math.atan2(m13, m33);\n        }\n        break;\n      case Euler.XZY:\n        this[2] = Math.asin(-clamp(m12, -1, 1));\n        if (Math.abs(m12) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m22);\n          this[1] = Math.atan2(m13, m11);\n        } else {\n          this[0] = Math.atan2(-m23, m33);\n          this[1] = 0;\n        }\n        break;\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n    this[3] = order;\n    return this;\n  }\n\n  _getRotationMatrix(result: NumericArray): NumericArray {\n    const te = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n    const x = this.x,\n      y = this.y,\n      z = this.z;\n    const a = Math.cos(x);\n    const c = Math.cos(y);\n    const e = Math.cos(z);\n    const b = Math.sin(x);\n    const d = Math.sin(y);\n    const f = Math.sin(z);\n    switch (this[3]) {\n      case Euler.XYZ: {\n        const ae = a * e,\n          af = a * f,\n          be = b * e,\n          bf = b * f;\n        te[0] = c * e;\n        te[4] = -c * f;\n        te[8] = d;\n        te[1] = af + be * d;\n        te[5] = ae - bf * d;\n        te[9] = -b * c;\n        te[2] = bf - ae * d;\n        te[6] = be + af * d;\n        te[10] = a * c;\n        break;\n      }\n      case Euler.YXZ: {\n        const ce = c * e,\n          cf = c * f,\n          de = d * e,\n          df = d * f;\n        te[0] = ce + df * b;\n        te[4] = de * b - cf;\n        te[8] = a * d;\n        te[1] = a * f;\n        te[5] = a * e;\n        te[9] = -b;\n        te[2] = cf * b - de;\n        te[6] = df + ce * b;\n        te[10] = a * c;\n        break;\n      }\n      case Euler.ZXY: {\n        const ce = c * e,\n          cf = c * f,\n          de = d * e,\n          df = d * f;\n        te[0] = ce - df * b;\n        te[4] = -a * f;\n        te[8] = de + cf * b;\n        te[1] = cf + de * b;\n        te[5] = a * e;\n        te[9] = df - ce * b;\n        te[2] = -a * d;\n        te[6] = b;\n        te[10] = a * c;\n        break;\n      }\n      case Euler.ZYX: {\n        const ae = a * e,\n          af = a * f,\n          be = b * e,\n          bf = b * f;\n        te[0] = c * e;\n        te[4] = be * d - af;\n        te[8] = ae * d + bf;\n        te[1] = c * f;\n        te[5] = bf * d + ae;\n        te[9] = af * d - be;\n        te[2] = -d;\n        te[6] = b * c;\n        te[10] = a * c;\n        break;\n      }\n      case Euler.YZX: {\n        const ac = a * c,\n          ad = a * d,\n          bc = b * c,\n          bd = b * d;\n        te[0] = c * e;\n        te[4] = bd - ac * f;\n        te[8] = bc * f + ad;\n        te[1] = f;\n        te[5] = a * e;\n        te[9] = -b * e;\n        te[2] = -d * e;\n        te[6] = ad * f + bc;\n        te[10] = ac - bd * f;\n        break;\n      }\n      case Euler.XZY: {\n        const ac = a * c,\n          ad = a * d,\n          bc = b * c,\n          bd = b * d;\n        te[0] = c * e;\n        te[4] = -f;\n        te[8] = d * e;\n        te[1] = ac * f + bd;\n        te[5] = a * e;\n        te[9] = ad * f - bc;\n        te[2] = bc * f - ad;\n        te[6] = b * e;\n        te[10] = bd * f + ac;\n        break;\n      }\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n    // last column\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = 0;\n    // bottom row\n    te[12] = 0;\n    te[13] = 0;\n    te[14] = 0;\n    te[15] = 1;\n    return te;\n  }\n\n  toQuaternion(): Quaternion {\n    // Abbreviations for the various angular functions\n    const cy = Math.cos(this.yaw * 0.5);\n    const sy = Math.sin(this.yaw * 0.5);\n    const cr = Math.cos(this.roll * 0.5);\n    const sr = Math.sin(this.roll * 0.5);\n    const cp = Math.cos(this.pitch * 0.5);\n    const sp = Math.sin(this.pitch * 0.5);\n    const w = cy * cr * cp + sy * sr * sp;\n    const x = cy * sr * cp - sy * cr * sp;\n    const y = cy * cr * sp + sy * sr * cp;\n    const z = sy * cr * cp - cy * sr * sp;\n    return new Quaternion(x, y, z, w);\n  }\n}\n\n// HELPER FUNCTIONS\n\nfunction validateOrder(value: number): boolean {\n  return value >= 0 && value < 6;\n}\n\nfunction checkOrder(value: number) {\n  if (value < 0 && value >= 6) {\n    throw new Error(ERR_UNKNOWN_ORDER);\n  }\n  return value;\n}\n"],"mappings":";;;;;AAEA,OAAOA,SAAP,MAAsB,mBAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAGA,SAAQC,KAAR,QAAoB,eAApB;AACA,SAAQC,WAAR,QAA0B,mBAA1B;AAGA,IAAMC,iBAAiB,GAAG,2BAA1B;AACA,IAAMC,UAAU,GAAG,OAAnB;IAEKC,a;WAAAA,a;EAAAA,a,CAAAA,a;EAAAA,a,CAAAA,a;EAAAA,a,CAAAA,a;EAAAA,a,CAAAA,a;EAAAA,a,CAAAA,a;EAAAA,a,CAAAA,a;GAAAA,a,KAAAA,a;IASgBC,KAAN,0BAAAC,UAAA;EAAAC,SAAA,CAAAF,KAAA,EAAAC,UAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,KAAA;EA2Cb,SAAAA,MAAA,EAA6D;IAAA,IAAAK,KAAA;IAAA,IAAjDC,CAAC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAL;IAAA,IAAQG,CAAC,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAZ;IAAA,IAAeI,CAAC,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAnB;IAAA,IAAsBK,KAAK,GAAAL,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGP,KAAK,CAACa,YAApC;IAAAC,eAAA,OAAAd,KAAA;IAETK,KAAA,GAAAF,MAAA,CAAAY,IAAA,OAAM,CAAC,CAAP,EAAU,CAAC,CAAX,EAAc,CAAC,CAAf,EAAkB,CAAC,CAAnB;IAEA,IAAIR,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBQ,KAAK,CAACC,OAAN,CAAcV,SAAS,CAAC,CAAD,CAAvB,CAA5B,EAAyD;MAAA,IAAAW,MAAA;MAGvD,CAAAA,MAAA,GAAAb,KAAA,EAAKc,WAAL,CAAAC,KAAA,CAAAF,MAAA,EAAoBX,SAApB;IACD,CAJD,MAIO;MACLF,KAAA,CAAKgB,GAAL,CAASf,CAAT,EAAYI,CAAZ,EAAeC,CAAf,EAAkBC,KAAlB;IACD;IAAA,OAAAP,KAAA;EACF;EAAAiB,YAAA,CAAAtB,KAAA;IAAAuB,GAAA;IAAAC,GAAA,EAtBW,SAAAA,IAAA,EAAW;MACrB,OAAO,CAAP;IACD;EAAA;IAAAD,GAAA;IAAAE,KAAA,EAsBD,SAAAC,eAAeC,UAAD,EAA2C;MACvD,IAAAC,WAAA,GAAAC,cAAA,CAAqBF,UAArB;QAAOrB,CAAD,GAAAsB,WAAA;QAAIlB,CAAJ,GAAAkB,WAAA;QAAOjB,CAAP,GAAAiB,WAAA;QAAUE,CAAV,GAAAF,WAAA;MACN,IAAMG,IAAI,GAAGrB,CAAC,GAAGA,CAAjB;MACA,IAAMsB,EAAE,GAAG,CAAC,CAAD,IAAMD,IAAI,GAAGpB,CAAC,GAAGA,CAAjB,IAAsB,CAAjC;MACA,IAAMsB,EAAE,GAAG,CAAC,CAAD,IAAM3B,CAAC,GAAGI,CAAJ,GAAQoB,CAAC,GAAGnB,CAAlB,CAAX;MACA,IAAIuB,EAAE,GAAG,CAAC,CAAD,IAAM5B,CAAC,GAAGK,CAAJ,GAAQmB,CAAC,GAAGpB,CAAlB,CAAT;MACA,IAAMyB,EAAE,GAAG,CAAC,CAAD,IAAMzB,CAAC,GAAGC,CAAJ,GAAQmB,CAAC,GAAGxB,CAAlB,CAAX;MACA,IAAM8B,EAAE,GAAG,CAAC,CAAD,IAAM9B,CAAC,GAAGA,CAAJ,GAAQyB,IAAd,IAAsB,CAAjC;MACAG,EAAE,GAAGA,EAAE,GAAG,CAAL,GAAS,CAAT,GAAaA,EAAlB;MACAA,EAAE,GAAGA,EAAE,GAAG,CAAC,CAAN,GAAU,CAAC,CAAX,GAAeA,EAApB;MACA,IAAMG,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWJ,EAAX,EAAeC,EAAf,CAAb;MACA,IAAMI,KAAK,GAAGF,IAAI,CAACG,IAAL,CAAUP,EAAV,CAAd;MACA,IAAMQ,GAAG,GAAGJ,IAAI,CAACC,KAAL,CAAWN,EAAX,EAAeD,EAAf,CAAZ;MACA,OAAO,KAAKX,GAAL,CAASgB,IAAT,EAAeG,KAAf,EAAsBE,GAAtB,EAA2B1C,KAAK,CAAC2C,YAAjC,CAAP;IACD;EAAA;IAAApB,GAAA;IAAAE,KAAA,EAED,SAAAmB,WAAWC,MAAD,EAAuB;MAC/B,MAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;IAED;EAAA;IAAAvB,GAAA;IAAAE,KAAA,EAOD,SAAAsB,KAAKC,KAAD,EAAsC;MACxC,KAAK,CAAL,IAAUA,KAAK,CAAC,CAAD,CAAf;MACA,KAAK,CAAL,IAAUA,KAAK,CAAC,CAAD,CAAf;MACA,KAAK,CAAL,IAAUA,KAAK,CAAC,CAAD,CAAf;MAEA,KAAK,CAAL,IAAUC,MAAM,CAACC,QAAP,CAAgBF,KAAK,CAAC,CAAD,CAArB,KAA6B,KAAKpC,KAA5C;MACA,OAAO,KAAKuC,KAAL,EAAP;IACD;EAAA;IAAA5B,GAAA;IAAAE,KAAA,EAID,SAAAJ,IAAA,EAAqD;MAAA,IAAjDf,CAAC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAL;MAAA,IAAQG,CAAC,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAZ;MAAA,IAAeI,CAAC,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAnB;MAAA,IAAsBK,KAAtB,GAAAL,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;MACD,KAAK,CAAL,IAAUH,CAAV;MACA,KAAK,CAAL,IAAUI,CAAV;MACA,KAAK,CAAL,IAAUC,CAAV;MACA,KAAK,CAAL,IAAUsC,MAAM,CAACC,QAAP,CAAgBtC,KAAhB,IAAyBA,KAAzB,GAAiC,KAAK,CAAL,CAA3C;MACA,OAAO,KAAKuC,KAAL,EAAP;IACD;EAAA;IAAA5B,GAAA;IAAAE,KAAA,EAED,SAAA2B,SAAA,EAAoB;MAClB,OACEC,aAAa,CAAC,KAAK,CAAL,CAAD,CAAb,IACAJ,MAAM,CAACC,QAAP,CAAgB,KAAK,CAAL,CAAhB,CADA,IAEAD,MAAM,CAACC,QAAP,CAAgB,KAAK,CAAL,CAAhB,CAFA,IAGAD,MAAM,CAACC,QAAP,CAAgB,KAAK,CAAL,CAAhB,CAJF;IAMD;EAAA;IAAA3B,GAAA;IAAAE,KAAA,EAGD,SAAA6B,QAAA,EAAoE;MAAA,IAA5DN,KAAmB,GAAAzC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAvB;MAAA,IAA2BgD,MAAc,GAAAhD,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAA5C;MACLyC,KAAK,CAACO,MAAD,CAAL,GAAgB,KAAK,CAAL,CAAhB;MACAP,KAAK,CAACO,MAAM,GAAG,CAAV,CAAL,GAAoB,KAAK,CAAL,CAApB;MACAP,KAAK,CAACO,MAAM,GAAG,CAAV,CAAL,GAAoB,KAAK,CAAL,CAApB;MACA,OAAOP,KAAP;IACD;EAAA;IAAAzB,GAAA;IAAAE,KAAA,EAGD,SAAA+B,SAAA,EAAqE;MAAA,IAA5DR,KAAmB,GAAAzC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAvB;MAAA,IAA2BgD,MAAc,GAAAhD,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAA5C;MACNyC,KAAK,CAACO,MAAD,CAAL,GAAgB,KAAK,CAAL,CAAhB;MACAP,KAAK,CAACO,MAAM,GAAG,CAAV,CAAL,GAAoB,KAAK,CAAL,CAApB;MACAP,KAAK,CAACO,MAAM,GAAG,CAAV,CAAL,GAAoB,KAAK,CAAL,CAApB;MACAP,KAAK,CAACO,MAAM,GAAG,CAAV,CAAL,GAAoB,KAAK,CAAL,CAApB;MACA,OAAOP,KAAP;IACD;EAAA;IAAAzB,GAAA;IAAAE,KAAA,EAED,SAAAgC,UAAA,EAA6D;MAAA,IAAnDC,MAAoB,GAAAnD,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,CAAC,CAAV,CAAxB;MACPmD,MAAM,CAAC,CAAD,CAAN,GAAY,KAAK,CAAL,CAAZ;MACAA,MAAM,CAAC,CAAD,CAAN,GAAY,KAAK,CAAL,CAAZ;MACAA,MAAM,CAAC,CAAD,CAAN,GAAY,KAAK,CAAL,CAAZ;MACA,OAAOA,MAAP;IACD;EAAA;IAAAnC,GAAA;IAAAC,GAAA,EAII,SAAAA,IAAA,EAAW;MACd,OAAO,KAAK,CAAL,CAAP;IACD;IAAAH,GAAA,EACI,SAAAA,IAACI,KAAD,EAAgB;MACnB,KAAK,CAAL,IAAU7B,WAAW,CAAC6B,KAAD,CAArB;IACD;EAAA;IAAAF,GAAA;IAAAC,GAAA,EAEI,SAAAA,IAAA,EAAW;MACd,OAAO,KAAK,CAAL,CAAP;IACD;IAAAH,GAAA,EACI,SAAAA,IAACI,KAAD,EAAgB;MACnB,KAAK,CAAL,IAAU7B,WAAW,CAAC6B,KAAD,CAArB;IACD;EAAA;IAAAF,GAAA;IAAAC,GAAA,EAEI,SAAAA,IAAA,EAAW;MACd,OAAO,KAAK,CAAL,CAAP;IACD;IAAAH,GAAA,EACI,SAAAA,IAACI,KAAD,EAAgB;MACnB,KAAK,CAAL,IAAU7B,WAAW,CAAC6B,KAAD,CAArB;IACD;EAAA;IAAAF,GAAA;IAAAC,GAAA,EAEQ,SAAAA,IAAA,EAAW;MAClB,OAAO,KAAK,CAAL,CAAP;IACD;IAAAH,GAAA,EACQ,SAAAA,IAACI,KAAD,EAAgB;MACvB,KAAK,CAAL,IAAU7B,WAAW,CAAC6B,KAAD,CAArB;IACD;EAAA;IAAAF,GAAA;IAAAC,GAAA,EAEO,SAAAA,IAAA,EAAW;MACjB,OAAO,KAAK,CAAL,CAAP;IACD;IAAAH,GAAA,EACO,SAAAA,IAACI,KAAD,EAAgB;MACtB,KAAK,CAAL,IAAU7B,WAAW,CAAC6B,KAAD,CAArB;IACD;EAAA;IAAAF,GAAA;IAAAC,GAAA,EAEQ,SAAAA,IAAA,EAAW;MAClB,OAAO,KAAK,CAAL,CAAP;IACD;IAAAH,GAAA,EACQ,SAAAA,IAACI,KAAD,EAAgB;MACvB,KAAK,CAAL,IAAU7B,WAAW,CAAC6B,KAAD,CAArB;IACD;EAAA;IAAAF,GAAA;IAAAC,GAAA,EAGM,SAAAA,IAAA,EAAW;MAChB,OAAO,KAAK,CAAL,CAAP;IACD;IAAAH,GAAA,EACM,SAAAA,IAACI,KAAD,EAAgB;MACrB,KAAK,CAAL,IAAU7B,WAAW,CAAC6B,KAAD,CAArB;IACD;EAAA;IAAAF,GAAA;IAAAC,GAAA,EAEQ,SAAAA,IAAA,EAAW;MAClB,OAAO,KAAK,CAAL,CAAP;IACD;IAAAH,GAAA,EACQ,SAAAA,IAACI,KAAD,EAAgB;MACvB,KAAK,CAAL,IAAU7B,WAAW,CAAC6B,KAAD,CAArB;IACD;EAAA;IAAAF,GAAA;IAAAC,GAAA,EAEM,SAAAA,IAAA,EAAW;MAChB,OAAO,KAAK,CAAL,CAAP;IACD;IAAAH,GAAA,EACM,SAAAA,IAACI,KAAD,EAAgB;MACrB,KAAK,CAAL,IAAU7B,WAAW,CAAC6B,KAAD,CAArB;IACD;EAAA;IAAAF,GAAA;IAAAC,GAAA,EAGO,SAAAA,IAAA,EAAW;MACjB,OAAO,KAAK,CAAL,CAAP;IACD;IAAAH,GAAA,EACO,SAAAA,IAACI,KAAD,EAAgB;MACtB,KAAK,CAAL,IAAU7B,WAAW,CAAC6B,KAAD,CAArB;IACD;EAAA;IAAAF,GAAA;IAAAC,GAAA,EAEQ,SAAAA,IAAA,EAAW;MAClB,OAAO,KAAK,CAAL,CAAP;IACD;IAAAH,GAAA,EACQ,SAAAA,IAACI,KAAD,EAAgB;MACvB,KAAK,CAAL,IAAU7B,WAAW,CAAC6B,KAAD,CAArB;IACD;EAAA;IAAAF,GAAA;IAAAC,GAAA,EAEM,SAAAA,IAAA,EAAW;MAChB,OAAO,KAAK,CAAL,CAAP;IACD;IAAAH,GAAA,EACM,SAAAA,IAACI,KAAD,EAAgB;MACrB,KAAK,CAAL,IAAU7B,WAAW,CAAC6B,KAAD,CAArB;IACD;EAAA;IAAAF,GAAA;IAAAC,GAAA,EAGQ,SAAAA,IAAA,EAAkB;MACzB,OAAO,KAAK,CAAL,CAAP;IACD;IAAAH,GAAA,EACQ,SAAAA,IAACI,KAAD,EAAuB;MAC9B,KAAK,CAAL,IAAUkC,UAAU,CAAClC,KAAD,CAApB;IACD;EAAA;IAAAF,GAAA;IAAAE,KAAA,EAGD,SAAAN,YAAYyC,CAAD,EAA4BhD,KAA5B,EAAwD;MACjE,OAAO,KAAKS,GAAL,CAASuC,CAAC,CAAC,CAAD,CAAV,EAAeA,CAAC,CAAC,CAAD,CAAhB,EAAqBA,CAAC,CAAC,CAAD,CAAtB,EAA2BX,MAAM,CAACC,QAAP,CAAgBtC,KAAhB,IAAyBA,KAAzB,GAAiC,KAAK,CAAL,CAA5D,CAAP;IACD;EAAA;IAAAW,GAAA;IAAAE,KAAA,EAGD,SAAAoC,UAAUb,KAAD,EAA0D;MAAA,IAA1BO,MAAc,GAAAhD,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAjD;MACP,KAAK,CAAL,IAAUyC,KAAK,CAAC,IAAIO,MAAL,CAAf;MACA,KAAK,CAAL,IAAUP,KAAK,CAAC,IAAIO,MAAL,CAAf;MACA,KAAK,CAAL,IAAUP,KAAK,CAAC,IAAIO,MAAL,CAAf;MACA,IAAIP,KAAK,CAAC,CAAD,CAAL,KAAavC,SAAjB,EAA4B;QAC1B,KAAK,CAAL,IAAUuC,KAAK,CAAC,CAAD,CAAf;MACD;MACD,OAAO,KAAKG,KAAL,EAAP;IACD;EAAA;IAAA5B,GAAA;IAAAE,KAAA,EAGD,SAAAqC,iBAAiBzB,IAAD,EAAeG,KAAf,EAA8BE,GAA9B,EAAiD;MAC/D,OAAO,KAAKrB,GAAL,CAASgB,IAAT,EAAeG,KAAf,EAAsBE,GAAtB,EAA2B3C,aAAa,CAACgE,GAAzC,CAAP;IACD;EAAA;IAAAxC,GAAA;IAAAE,KAAA,EAED,SAAAuC,mBAAmBC,CAAD,EAA6E;MAAA,IAAjDrD,KAAoB,GAAAL,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGP,KAAK,CAACa,YAAzD;MAChB,KAAKqD,mBAAL,CAAyBD,CAAzB,EAA4BrD,KAA5B;MACA,OAAO,KAAKuC,KAAL,EAAP;IACD;EAAA;IAAA5B,GAAA;IAAAE,KAAA,EAID,SAAA0C,kBAAkBF,CAAD,EAAgC;MAC/C,OAAO,KAAKG,kBAAL,CAAwBH,CAAxB,CAAP;IACD;EAAA;IAAA1C,GAAA;IAAAE,KAAA,EAGD,SAAA4C,cAAA,EAA4B;MAC1B,IAAMC,CAAC,GAAG,IAAI5E,UAAJ,EAAV;MACA,QAAQ,KAAK,CAAL,CAAR;QACE,KAAKK,aAAa,CAACwE,GAAnB;UACE,OAAOD,CAAC,CAACE,OAAF,CAAU,KAAK,CAAL,CAAV,EAAmBC,OAAnB,CAA2B,KAAK,CAAL,CAA3B,EAAoCC,OAApC,CAA4C,KAAK,CAAL,CAA5C,CAAP;QACF,KAAK3E,aAAa,CAAC4E,GAAnB;UACE,OAAOL,CAAC,CAACG,OAAF,CAAU,KAAK,CAAL,CAAV,EAAmBD,OAAnB,CAA2B,KAAK,CAAL,CAA3B,EAAoCE,OAApC,CAA4C,KAAK,CAAL,CAA5C,CAAP;QACF,KAAK3E,aAAa,CAAC6E,GAAnB;UACE,OAAON,CAAC,CAACI,OAAF,CAAU,KAAK,CAAL,CAAV,EAAmBF,OAAnB,CAA2B,KAAK,CAAL,CAA3B,EAAoCC,OAApC,CAA4C,KAAK,CAAL,CAA5C,CAAP;QACF,KAAK1E,aAAa,CAACgE,GAAnB;UACE,OAAOO,CAAC,CAACI,OAAF,CAAU,KAAK,CAAL,CAAV,EAAmBD,OAAnB,CAA2B,KAAK,CAAL,CAA3B,EAAoCD,OAApC,CAA4C,KAAK,CAAL,CAA5C,CAAP;QACF,KAAKzE,aAAa,CAAC8E,GAAnB;UACE,OAAOP,CAAC,CAACG,OAAF,CAAU,KAAK,CAAL,CAAV,EAAmBC,OAAnB,CAA2B,KAAK,CAAL,CAA3B,EAAoCF,OAApC,CAA4C,KAAK,CAAL,CAA5C,CAAP;QACF,KAAKzE,aAAa,CAAC+E,GAAnB;UACE,OAAOR,CAAC,CAACE,OAAF,CAAU,KAAK,CAAL,CAAV,EAAmBE,OAAnB,CAA2B,KAAK,CAAL,CAA3B,EAAoCD,OAApC,CAA4C,KAAK,CAAL,CAA5C,CAAP;QACF;UACE,MAAM,IAAI3B,KAAJ,CAAUjD,iBAAV,CAAN;MAAA;IAEL;EAAA;IAAA0B,GAAA;IAAAE,KAAA,EAUD,SAAAyC,oBAAoBD,CAAD,EAA8D;MAAA,IAAlCrD,KAAK,GAAAL,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGP,KAAK,CAACa,YAA1C;MAEjB,IAAMkE,GAAG,GAAGd,CAAC,CAAC,CAAD,CAAb;QACEe,GAAG,GAAGf,CAAC,CAAC,CAAD,CADT;QAEEgB,GAAG,GAAGhB,CAAC,CAAC,CAAD,CAFT;MAGA,IAAMiB,GAAG,GAAGjB,CAAC,CAAC,CAAD,CAAb;QACEkB,GAAG,GAAGlB,CAAC,CAAC,CAAD,CADT;QAEEmB,GAAG,GAAGnB,CAAC,CAAC,CAAD,CAFT;MAGA,IAAMoB,GAAG,GAAGpB,CAAC,CAAC,CAAD,CAAb;QACEqB,GAAG,GAAGrB,CAAC,CAAC,CAAD,CADT;QAEEsB,GAAG,GAAGtB,CAAC,CAAC,EAAD,CAFT;MAGArD,KAAK,GAAGA,KAAK,IAAI,KAAK,CAAL,CAAjB;MACA,QAAQA,KAAR;QACE,KAAKZ,KAAK,CAACuE,GAAX;UACE,KAAK,CAAL,IAAUjC,IAAI,CAACG,IAAL,CAAU9C,KAAK,CAACsF,GAAD,EAAM,CAAC,CAAP,EAAU,CAAV,CAAf,CAAV;UACA,IAAI3C,IAAI,CAACkD,GAAL,CAASP,GAAT,IAAgBnF,UAApB,EAAgC;YAC9B,KAAK,CAAL,IAAUwC,IAAI,CAACC,KAAL,CAAW,CAAC6C,GAAZ,EAAiBG,GAAjB,CAAV;YACA,KAAK,CAAL,IAAUjD,IAAI,CAACC,KAAL,CAAW,CAACyC,GAAZ,EAAiBD,GAAjB,CAAV;UACD,CAHD,MAGO;YACL,KAAK,CAAL,IAAUzC,IAAI,CAACC,KAAL,CAAW+C,GAAX,EAAgBH,GAAhB,CAAV;YACA,KAAK,CAAL,IAAU,CAAV;UACD;UACD;QACF,KAAKnF,KAAK,CAAC2E,GAAX;UACE,KAAK,CAAL,IAAUrC,IAAI,CAACG,IAAL,CAAU,CAAC9C,KAAK,CAACyF,GAAD,EAAM,CAAC,CAAP,EAAU,CAAV,CAAhB,CAAV;UACA,IAAI9C,IAAI,CAACkD,GAAL,CAASJ,GAAT,IAAgBtF,UAApB,EAAgC;YAC9B,KAAK,CAAL,IAAUwC,IAAI,CAACC,KAAL,CAAW0C,GAAX,EAAgBM,GAAhB,CAAV;YACA,KAAK,CAAL,IAAUjD,IAAI,CAACC,KAAL,CAAW2C,GAAX,EAAgBC,GAAhB,CAAV;UACD,CAHD,MAGO;YACL,KAAK,CAAL,IAAU7C,IAAI,CAACC,KAAL,CAAW,CAAC8C,GAAZ,EAAiBN,GAAjB,CAAV;YACA,KAAK,CAAL,IAAU,CAAV;UACD;UACD;QACF,KAAK/E,KAAK,CAAC4E,GAAX;UACE,KAAK,CAAL,IAAUtC,IAAI,CAACG,IAAL,CAAU9C,KAAK,CAAC2F,GAAD,EAAM,CAAC,CAAP,EAAU,CAAV,CAAf,CAAV;UACA,IAAIhD,IAAI,CAACkD,GAAL,CAASF,GAAT,IAAgBxF,UAApB,EAAgC;YAC9B,KAAK,CAAL,IAAUwC,IAAI,CAACC,KAAL,CAAW,CAAC8C,GAAZ,EAAiBE,GAAjB,CAAV;YACA,KAAK,CAAL,IAAUjD,IAAI,CAACC,KAAL,CAAW,CAACyC,GAAZ,EAAiBG,GAAjB,CAAV;UACD,CAHD,MAGO;YACL,KAAK,CAAL,IAAU,CAAV;YACA,KAAK,CAAL,IAAU7C,IAAI,CAACC,KAAL,CAAW2C,GAAX,EAAgBH,GAAhB,CAAV;UACD;UACD;QACF,KAAK/E,KAAK,CAAC+D,GAAX;UACE,KAAK,CAAL,IAAUzB,IAAI,CAACG,IAAL,CAAU,CAAC9C,KAAK,CAAC0F,GAAD,EAAM,CAAC,CAAP,EAAU,CAAV,CAAhB,CAAV;UACA,IAAI/C,IAAI,CAACkD,GAAL,CAASH,GAAT,IAAgBvF,UAApB,EAAgC;YAC9B,KAAK,CAAL,IAAUwC,IAAI,CAACC,KAAL,CAAW+C,GAAX,EAAgBC,GAAhB,CAAV;YACA,KAAK,CAAL,IAAUjD,IAAI,CAACC,KAAL,CAAW2C,GAAX,EAAgBH,GAAhB,CAAV;UACD,CAHD,MAGO;YACL,KAAK,CAAL,IAAU,CAAV;YACA,KAAK,CAAL,IAAUzC,IAAI,CAACC,KAAL,CAAW,CAACyC,GAAZ,EAAiBG,GAAjB,CAAV;UACD;UACD;QACF,KAAKnF,KAAK,CAAC6E,GAAX;UACE,KAAK,CAAL,IAAUvC,IAAI,CAACG,IAAL,CAAU9C,KAAK,CAACuF,GAAD,EAAM,CAAC,CAAP,EAAU,CAAV,CAAf,CAAV;UACA,IAAI5C,IAAI,CAACkD,GAAL,CAASN,GAAT,IAAgBpF,UAApB,EAAgC;YAC9B,KAAK,CAAL,IAAUwC,IAAI,CAACC,KAAL,CAAW,CAAC6C,GAAZ,EAAiBD,GAAjB,CAAV;YACA,KAAK,CAAL,IAAU7C,IAAI,CAACC,KAAL,CAAW,CAAC8C,GAAZ,EAAiBN,GAAjB,CAAV;UACD,CAHD,MAGO;YACL,KAAK,CAAL,IAAU,CAAV;YACA,KAAK,CAAL,IAAUzC,IAAI,CAACC,KAAL,CAAW0C,GAAX,EAAgBM,GAAhB,CAAV;UACD;UACD;QACF,KAAKvF,KAAK,CAAC8E,GAAX;UACE,KAAK,CAAL,IAAUxC,IAAI,CAACG,IAAL,CAAU,CAAC9C,KAAK,CAACqF,GAAD,EAAM,CAAC,CAAP,EAAU,CAAV,CAAhB,CAAV;UACA,IAAI1C,IAAI,CAACkD,GAAL,CAASR,GAAT,IAAgBlF,UAApB,EAAgC;YAC9B,KAAK,CAAL,IAAUwC,IAAI,CAACC,KAAL,CAAW+C,GAAX,EAAgBH,GAAhB,CAAV;YACA,KAAK,CAAL,IAAU7C,IAAI,CAACC,KAAL,CAAW0C,GAAX,EAAgBF,GAAhB,CAAV;UACD,CAHD,MAGO;YACL,KAAK,CAAL,IAAUzC,IAAI,CAACC,KAAL,CAAW,CAAC6C,GAAZ,EAAiBG,GAAjB,CAAV;YACA,KAAK,CAAL,IAAU,CAAV;UACD;UACD;QACF;UACE,MAAM,IAAIzC,KAAJ,CAAUjD,iBAAV,CAAN;MAAA;MAEJ,KAAK,CAAL,IAAUe,KAAV;MACA,OAAO,IAAP;IACD;EAAA;IAAAW,GAAA;IAAAE,KAAA,EAED,SAAA2C,mBAAmBV,MAAD,EAAqC;MACrD,IAAM+B,EAAE,GAAG/B,MAAM,IAAI,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,CAAC,CAAV,EAAa,CAAC,CAAd,EAAiB,CAAC,CAAlB,EAAqB,CAAC,CAAtB,EAAyB,CAAC,CAA1B,EAA6B,CAAC,CAA9B,EAAiC,CAAC,CAAlC,EAAqC,CAAC,CAAtC,EAAyC,CAAC,CAA1C,EAA6C,CAAC,CAA9C,EAAiD,CAAC,CAAlD,EAAqD,CAAC,CAAtD,EAAyD,CAAC,CAA1D,EAA6D,CAAC,CAA9D,CAArB;MACA,IAAMpD,CAAC,GAAG,KAAKA,CAAf;QACEI,CAAC,GAAG,KAAKA,CADX;QAEEC,CAAC,GAAG,KAAKA,CAFX;MAGA,IAAM+E,CAAC,GAAGpD,IAAI,CAACqD,GAAL,CAASrF,CAAT,CAAV;MACA,IAAMsF,CAAC,GAAGtD,IAAI,CAACqD,GAAL,CAASjF,CAAT,CAAV;MACA,IAAMmF,CAAC,GAAGvD,IAAI,CAACqD,GAAL,CAAShF,CAAT,CAAV;MACA,IAAMmF,CAAC,GAAGxD,IAAI,CAACyD,GAAL,CAASzF,CAAT,CAAV;MACA,IAAM0F,CAAC,GAAG1D,IAAI,CAACyD,GAAL,CAASrF,CAAT,CAAV;MACA,IAAMuF,CAAC,GAAG3D,IAAI,CAACyD,GAAL,CAASpF,CAAT,CAAV;MACA,QAAQ,KAAK,CAAL,CAAR;QACE,KAAKX,KAAK,CAACuE,GAAX;UAAgB;YACd,IAAM2B,EAAE,GAAGR,CAAC,GAAGG,CAAf;cACEM,EAAE,GAAGT,CAAC,GAAGO,CADX;cAEEG,EAAE,GAAGN,CAAC,GAAGD,CAFX;cAGEQ,EAAE,GAAGP,CAAC,GAAGG,CAHX;YAIAR,EAAE,CAAC,CAAD,CAAF,GAAQG,CAAC,GAAGC,CAAZ;YACAJ,EAAE,CAAC,CAAD,CAAF,GAAQ,CAACG,CAAD,GAAKK,CAAb;YACAR,EAAE,CAAC,CAAD,CAAF,GAAQO,CAAR;YACAP,EAAE,CAAC,CAAD,CAAF,GAAQU,EAAE,GAAGC,EAAE,GAAGJ,CAAlB;YACAP,EAAE,CAAC,CAAD,CAAF,GAAQS,EAAE,GAAGG,EAAE,GAAGL,CAAlB;YACAP,EAAE,CAAC,CAAD,CAAF,GAAQ,CAACK,CAAD,GAAKF,CAAb;YACAH,EAAE,CAAC,CAAD,CAAF,GAAQY,EAAE,GAAGH,EAAE,GAAGF,CAAlB;YACAP,EAAE,CAAC,CAAD,CAAF,GAAQW,EAAE,GAAGD,EAAE,GAAGH,CAAlB;YACAP,EAAE,CAAC,EAAD,CAAF,GAASC,CAAC,GAAGE,CAAb;YACA;UACD;QACD,KAAK5F,KAAK,CAAC2E,GAAX;UAAgB;YACd,IAAM2B,EAAE,GAAGV,CAAC,GAAGC,CAAf;cACEU,EAAE,GAAGX,CAAC,GAAGK,CADX;cAEEO,EAAE,GAAGR,CAAC,GAAGH,CAFX;cAGEY,EAAE,GAAGT,CAAC,GAAGC,CAHX;YAIAR,EAAE,CAAC,CAAD,CAAF,GAAQa,EAAE,GAAGG,EAAE,GAAGX,CAAlB;YACAL,EAAE,CAAC,CAAD,CAAF,GAAQe,EAAE,GAAGV,CAAL,GAASS,EAAjB;YACAd,EAAE,CAAC,CAAD,CAAF,GAAQC,CAAC,GAAGM,CAAZ;YACAP,EAAE,CAAC,CAAD,CAAF,GAAQC,CAAC,GAAGO,CAAZ;YACAR,EAAE,CAAC,CAAD,CAAF,GAAQC,CAAC,GAAGG,CAAZ;YACAJ,EAAE,CAAC,CAAD,CAAF,GAAQ,CAACK,CAAT;YACAL,EAAE,CAAC,CAAD,CAAF,GAAQc,EAAE,GAAGT,CAAL,GAASU,EAAjB;YACAf,EAAE,CAAC,CAAD,CAAF,GAAQgB,EAAE,GAAGH,EAAE,GAAGR,CAAlB;YACAL,EAAE,CAAC,EAAD,CAAF,GAASC,CAAC,GAAGE,CAAb;YACA;UACD;QACD,KAAK5F,KAAK,CAAC4E,GAAX;UAAgB;YACd,IAAM0B,GAAE,GAAGV,CAAC,GAAGC,CAAf;cACEU,GAAE,GAAGX,CAAC,GAAGK,CADX;cAEEO,GAAE,GAAGR,CAAC,GAAGH,CAFX;cAGEY,GAAE,GAAGT,CAAC,GAAGC,CAHX;YAIAR,EAAE,CAAC,CAAD,CAAF,GAAQa,GAAE,GAAGG,GAAE,GAAGX,CAAlB;YACAL,EAAE,CAAC,CAAD,CAAF,GAAQ,CAACC,CAAD,GAAKO,CAAb;YACAR,EAAE,CAAC,CAAD,CAAF,GAAQe,GAAE,GAAGD,GAAE,GAAGT,CAAlB;YACAL,EAAE,CAAC,CAAD,CAAF,GAAQc,GAAE,GAAGC,GAAE,GAAGV,CAAlB;YACAL,EAAE,CAAC,CAAD,CAAF,GAAQC,CAAC,GAAGG,CAAZ;YACAJ,EAAE,CAAC,CAAD,CAAF,GAAQgB,GAAE,GAAGH,GAAE,GAAGR,CAAlB;YACAL,EAAE,CAAC,CAAD,CAAF,GAAQ,CAACC,CAAD,GAAKM,CAAb;YACAP,EAAE,CAAC,CAAD,CAAF,GAAQK,CAAR;YACAL,EAAE,CAAC,EAAD,CAAF,GAASC,CAAC,GAAGE,CAAb;YACA;UACD;QACD,KAAK5F,KAAK,CAAC+D,GAAX;UAAgB;YACd,IAAMmC,GAAE,GAAGR,CAAC,GAAGG,CAAf;cACEM,GAAE,GAAGT,CAAC,GAAGO,CADX;cAEEG,GAAE,GAAGN,CAAC,GAAGD,CAFX;cAGEQ,GAAE,GAAGP,CAAC,GAAGG,CAHX;YAIAR,EAAE,CAAC,CAAD,CAAF,GAAQG,CAAC,GAAGC,CAAZ;YACAJ,EAAE,CAAC,CAAD,CAAF,GAAQW,GAAE,GAAGJ,CAAL,GAASG,GAAjB;YACAV,EAAE,CAAC,CAAD,CAAF,GAAQS,GAAE,GAAGF,CAAL,GAASK,GAAjB;YACAZ,EAAE,CAAC,CAAD,CAAF,GAAQG,CAAC,GAAGK,CAAZ;YACAR,EAAE,CAAC,CAAD,CAAF,GAAQY,GAAE,GAAGL,CAAL,GAASE,GAAjB;YACAT,EAAE,CAAC,CAAD,CAAF,GAAQU,GAAE,GAAGH,CAAL,GAASI,GAAjB;YACAX,EAAE,CAAC,CAAD,CAAF,GAAQ,CAACO,CAAT;YACAP,EAAE,CAAC,CAAD,CAAF,GAAQK,CAAC,GAAGF,CAAZ;YACAH,EAAE,CAAC,EAAD,CAAF,GAASC,CAAC,GAAGE,CAAb;YACA;UACD;QACD,KAAK5F,KAAK,CAAC6E,GAAX;UAAgB;YACd,IAAM6B,EAAE,GAAGhB,CAAC,GAAGE,CAAf;cACEe,EAAE,GAAGjB,CAAC,GAAGM,CADX;cAEEY,EAAE,GAAGd,CAAC,GAAGF,CAFX;cAGEiB,EAAE,GAAGf,CAAC,GAAGE,CAHX;YAIAP,EAAE,CAAC,CAAD,CAAF,GAAQG,CAAC,GAAGC,CAAZ;YACAJ,EAAE,CAAC,CAAD,CAAF,GAAQoB,EAAE,GAAGH,EAAE,GAAGT,CAAlB;YACAR,EAAE,CAAC,CAAD,CAAF,GAAQmB,EAAE,GAAGX,CAAL,GAASU,EAAjB;YACAlB,EAAE,CAAC,CAAD,CAAF,GAAQQ,CAAR;YACAR,EAAE,CAAC,CAAD,CAAF,GAAQC,CAAC,GAAGG,CAAZ;YACAJ,EAAE,CAAC,CAAD,CAAF,GAAQ,CAACK,CAAD,GAAKD,CAAb;YACAJ,EAAE,CAAC,CAAD,CAAF,GAAQ,CAACO,CAAD,GAAKH,CAAb;YACAJ,EAAE,CAAC,CAAD,CAAF,GAAQkB,EAAE,GAAGV,CAAL,GAASW,EAAjB;YACAnB,EAAE,CAAC,EAAD,CAAF,GAASiB,EAAE,GAAGG,EAAE,GAAGZ,CAAnB;YACA;UACD;QACD,KAAKjG,KAAK,CAAC8E,GAAX;UAAgB;YACd,IAAM4B,GAAE,GAAGhB,CAAC,GAAGE,CAAf;cACEe,GAAE,GAAGjB,CAAC,GAAGM,CADX;cAEEY,GAAE,GAAGd,CAAC,GAAGF,CAFX;cAGEiB,GAAE,GAAGf,CAAC,GAAGE,CAHX;YAIAP,EAAE,CAAC,CAAD,CAAF,GAAQG,CAAC,GAAGC,CAAZ;YACAJ,EAAE,CAAC,CAAD,CAAF,GAAQ,CAACQ,CAAT;YACAR,EAAE,CAAC,CAAD,CAAF,GAAQO,CAAC,GAAGH,CAAZ;YACAJ,EAAE,CAAC,CAAD,CAAF,GAAQiB,GAAE,GAAGT,CAAL,GAASY,GAAjB;YACApB,EAAE,CAAC,CAAD,CAAF,GAAQC,CAAC,GAAGG,CAAZ;YACAJ,EAAE,CAAC,CAAD,CAAF,GAAQkB,GAAE,GAAGV,CAAL,GAASW,GAAjB;YACAnB,EAAE,CAAC,CAAD,CAAF,GAAQmB,GAAE,GAAGX,CAAL,GAASU,GAAjB;YACAlB,EAAE,CAAC,CAAD,CAAF,GAAQK,CAAC,GAAGD,CAAZ;YACAJ,EAAE,CAAC,EAAD,CAAF,GAASoB,GAAE,GAAGZ,CAAL,GAASS,GAAlB;YACA;UACD;QACD;UACE,MAAM,IAAI5D,KAAJ,CAAUjD,iBAAV,CAAN;MAAA;MAGJ4F,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAR;MACAA,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAR;MACAA,EAAE,CAAC,EAAD,CAAF,GAAS,CAAT;MAEAA,EAAE,CAAC,EAAD,CAAF,GAAS,CAAT;MACAA,EAAE,CAAC,EAAD,CAAF,GAAS,CAAT;MACAA,EAAE,CAAC,EAAD,CAAF,GAAS,CAAT;MACAA,EAAE,CAAC,EAAD,CAAF,GAAS,CAAT;MACA,OAAOA,EAAP;IACD;EAAA;IAAAlE,GAAA;IAAAE,KAAA,EAED,SAAAqF,aAAA,EAA2B;MAEzB,IAAMC,EAAE,GAAGzE,IAAI,CAACqD,GAAL,CAAS,KAAKjD,GAAL,GAAW,GAApB,CAAX;MACA,IAAMsE,EAAE,GAAG1E,IAAI,CAACyD,GAAL,CAAS,KAAKrD,GAAL,GAAW,GAApB,CAAX;MACA,IAAMuE,EAAE,GAAG3E,IAAI,CAACqD,GAAL,CAAS,KAAKtD,IAAL,GAAY,GAArB,CAAX;MACA,IAAM6E,EAAE,GAAG5E,IAAI,CAACyD,GAAL,CAAS,KAAK1D,IAAL,GAAY,GAArB,CAAX;MACA,IAAM8E,EAAE,GAAG7E,IAAI,CAACqD,GAAL,CAAS,KAAKnD,KAAL,GAAa,GAAtB,CAAX;MACA,IAAM4E,EAAE,GAAG9E,IAAI,CAACyD,GAAL,CAAS,KAAKvD,KAAL,GAAa,GAAtB,CAAX;MACA,IAAMV,CAAC,GAAGiF,EAAE,GAAGE,EAAL,GAAUE,EAAV,GAAeH,EAAE,GAAGE,EAAL,GAAUE,EAAnC;MACA,IAAM9G,CAAC,GAAGyG,EAAE,GAAGG,EAAL,GAAUC,EAAV,GAAeH,EAAE,GAAGC,EAAL,GAAUG,EAAnC;MACA,IAAM1G,CAAC,GAAGqG,EAAE,GAAGE,EAAL,GAAUG,EAAV,GAAeJ,EAAE,GAAGE,EAAL,GAAUC,EAAnC;MACA,IAAMxG,CAAC,GAAGqG,EAAE,GAAGC,EAAL,GAAUE,EAAV,GAAeJ,EAAE,GAAGG,EAAL,GAAUE,EAAnC;MACA,OAAO,IAAI1H,UAAJ,CAAeY,CAAf,EAAkBI,CAAlB,EAAqBC,CAArB,EAAwBmB,CAAxB,CAAP;IACD;EAAA;IAAAP,GAAA;IAAAC,GAAA,EAzfa,SAAAA,IAAA,EAAkB;MAC9B,OAAOzB,aAAa,CAACgE,GAArB;IACD;EAAA;IAAAxC,GAAA;IAAAC,GAAA,EACa,SAAAA,IAAA,EAAkB;MAC9B,OAAOzB,aAAa,CAAC4E,GAArB;IACD;EAAA;IAAApD,GAAA;IAAAC,GAAA,EACa,SAAAA,IAAA,EAAkB;MAC9B,OAAOzB,aAAa,CAAC+E,GAArB;IACD;EAAA;IAAAvD,GAAA;IAAAC,GAAA,EACa,SAAAA,IAAA,EAAkB;MAC9B,OAAOzB,aAAa,CAAC6E,GAArB;IACD;EAAA;IAAArD,GAAA;IAAAC,GAAA,EACa,SAAAA,IAAA,EAAkB;MAC9B,OAAOzB,aAAa,CAAC8E,GAArB;IACD;EAAA;IAAAtD,GAAA;IAAAC,GAAA,EACa,SAAAA,IAAA,EAAkB;MAC9B,OAAOzB,aAAa,CAACwE,GAArB;IACD;EAAA;IAAAhD,GAAA;IAAAC,GAAA,EACsB,SAAAA,IAAA,EAAkB;MACvC,OAAOzB,aAAa,CAACgE,GAArB;IACD;EAAA;IAAAxC,GAAA;IAAAC,GAAA,EACsB,SAAAA,IAAA,EAAkB;MACvC,OAAOzB,aAAa,CAACgE,GAArB;IACD;EAAA;IAAAxC,GAAA;IAAAC,GAAA,EACwB,SAAAA,IAAA,EAAyB;MAChD,OAAOzB,aAAP;IACD;EAAA;IAAAwB,GAAA;IAAAE,KAAA,EACmB,SAAA4F,cAACzG,KAAD,EAA+B;MACjD,OAAOb,aAAa,CAACa,KAAD,CAApB;IACD;EAAA;EAAA,OAAAZ,KAAA;AAAA,EA/BgCP,SAApB;AAAA,SAAMO,KAAN,IAAAsH,OAAA;AAggBf,SAASjE,aAATA,CAAuB5B,KAAvB,EAA+C;EAC7C,OAAOA,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAG,CAA7B;AACD;AAED,SAASkC,UAATA,CAAoBlC,KAApB,EAAmC;EACjC,IAAIA,KAAK,GAAG,CAAR,IAAaA,KAAK,IAAI,CAA1B,EAA6B;IAC3B,MAAM,IAAIqB,KAAJ,CAAUjD,iBAAV,CAAN;EACD;EACD,OAAO4B,KAAP;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}