{"ast":null,"code":"import _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { log } from '@deck.gl/core';\nimport { ColumnLayer } from '@deck.gl/layers';\nimport { defaultColorRange } from '../utils/color-utils';\nimport { pointToHexbin } from './hexagon-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\nimport AggregationLayer from '../aggregation-layer';\nfunction nop() {}\nvar defaultProps = {\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {\n    type: 'accessor',\n    value: null\n  },\n  getColorWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  colorAggregation: 'SUM',\n  lowerPercentile: {\n    type: 'number',\n    value: 0,\n    min: 0,\n    max: 100\n  },\n  upperPercentile: {\n    type: 'number',\n    value: 100,\n    min: 0,\n    max: 100\n  },\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {\n    type: 'accessor',\n    value: null\n  },\n  getElevationWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {\n    type: 'number',\n    value: 0,\n    min: 0,\n    max: 100\n  },\n  elevationUpperPercentile: {\n    type: 'number',\n    value: 100,\n    min: 0,\n    max: 100\n  },\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n  radius: {\n    type: 'number',\n    value: 1000,\n    min: 1\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  extruded: false,\n  hexagonAggregator: pointToHexbin,\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  material: true,\n  _filterData: {\n    type: 'function',\n    value: null,\n    optional: true\n  }\n};\nvar HexagonLayer = /*#__PURE__*/function (_AggregationLayer) {\n  _inherits(HexagonLayer, _AggregationLayer);\n  var _super = _createSuper(HexagonLayer);\n  function HexagonLayer() {\n    _classCallCheck(this, HexagonLayer);\n    return _super.apply(this, arguments);\n  }\n  _createClass(HexagonLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var cpuAggregator = new CPUAggregator({\n        getAggregator: function getAggregator(props) {\n          return props.hexagonAggregator;\n        },\n        getCellSize: function getCellSize(props) {\n          return props.radius;\n        }\n      });\n      this.state = {\n        cpuAggregator: cpuAggregator,\n        aggregatorState: cpuAggregator.state,\n        vertices: null\n      };\n      var attributeManager = this.getAttributeManager();\n      attributeManager.add({\n        positions: {\n          size: 3,\n          accessor: 'getPosition'\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      _get(_getPrototypeOf(HexagonLayer.prototype), \"updateState\", this).call(this, opts);\n      if (opts.changeFlags.propsOrDataChanged) {\n        var aggregatorState = this.state.cpuAggregator.updateState(opts, {\n          viewport: this.context.viewport,\n          attributes: this.getAttributes()\n        });\n        if (this.state.aggregatorState.layerData !== aggregatorState.layerData) {\n          var _ref = aggregatorState.layerData || {},\n            hexagonVertices = _ref.hexagonVertices;\n          this.setState({\n            vertices: hexagonVertices && this.convertLatLngToMeterOffset(hexagonVertices)\n          });\n        }\n        this.setState({\n          aggregatorState: aggregatorState\n        });\n      }\n    }\n  }, {\n    key: \"convertLatLngToMeterOffset\",\n    value: function convertLatLngToMeterOffset(hexagonVertices) {\n      var viewport = this.context.viewport;\n      if (Array.isArray(hexagonVertices) && hexagonVertices.length === 6) {\n        var vertex0 = hexagonVertices[0];\n        var vertex3 = hexagonVertices[3];\n        var centroid = [(vertex0[0] + vertex3[0]) / 2, (vertex0[1] + vertex3[1]) / 2];\n        var centroidFlat = viewport.projectFlat(centroid);\n        var _viewport$getDistance = viewport.getDistanceScales(centroid),\n          metersPerUnit = _viewport$getDistance.metersPerUnit;\n        var vertices = hexagonVertices.map(function (vt) {\n          var vtFlat = viewport.projectFlat(vt);\n          return [(vtFlat[0] - centroidFlat[0]) * metersPerUnit[0], (vtFlat[1] - centroidFlat[1]) * metersPerUnit[1]];\n        });\n        return vertices;\n      }\n      log.error('HexagonLayer: hexagonVertices needs to be an array of 6 points')();\n      return null;\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref2) {\n      var info = _ref2.info;\n      return this.state.cpuAggregator.getPickingInfo({\n        info: info\n      });\n    }\n  }, {\n    key: \"_onGetSublayerColor\",\n    value: function _onGetSublayerColor(cell) {\n      return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n    }\n  }, {\n    key: \"_onGetSublayerElevation\",\n    value: function _onGetSublayerElevation(cell) {\n      return this.state.cpuAggregator.getAccessor('elevation')(cell);\n    }\n  }, {\n    key: \"_getSublayerUpdateTriggers\",\n    value: function _getSublayerUpdateTriggers() {\n      return this.state.cpuAggregator.getUpdateTriggers(this.props);\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props = this.props,\n        elevationScale = _this$props.elevationScale,\n        extruded = _this$props.extruded,\n        coverage = _this$props.coverage,\n        material = _this$props.material,\n        transitions = _this$props.transitions;\n      var _this$state = this.state,\n        aggregatorState = _this$state.aggregatorState,\n        vertices = _this$state.vertices;\n      var SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n      var updateTriggers = this._getSublayerUpdateTriggers();\n      var geometry = vertices ? {\n        vertices: vertices,\n        radius: 1\n      } : {\n        radius: aggregatorState.layerData.radiusCommon || 1,\n        radiusUnits: 'common',\n        angle: 90\n      };\n      return new SubLayerClass(_objectSpread(_objectSpread({}, geometry), {}, {\n        diskResolution: 6,\n        elevationScale: elevationScale,\n        extruded: extruded,\n        coverage: coverage,\n        material: material,\n        getFillColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getFillColor: transitions.getColorValue || transitions.getColorWeight,\n          getElevation: transitions.getElevationValue || transitions.getElevationWeight\n        }\n      }), this.getSubLayerProps({\n        id: 'hexagon-cell',\n        updateTriggers: updateTriggers\n      }), {\n        data: aggregatorState.layerData.data\n      });\n    }\n  }]);\n  return HexagonLayer;\n}(AggregationLayer);\nexport { HexagonLayer as default };\nHexagonLayer.layerName = 'HexagonLayer';\nHexagonLayer.defaultProps = defaultProps;","map":{"version":3,"names":["log","ColumnLayer","defaultColorRange","pointToHexbin","CPUAggregator","AggregationLayer","nop","defaultProps","colorDomain","colorRange","getColorValue","type","value","getColorWeight","colorAggregation","lowerPercentile","min","max","upperPercentile","colorScaleType","onSetColorDomain","elevationDomain","elevationRange","getElevationValue","getElevationWeight","elevationAggregation","elevationLowerPercentile","elevationUpperPercentile","elevationScale","elevationScaleType","onSetElevationDomain","radius","coverage","extruded","hexagonAggregator","getPosition","x","position","material","_filterData","optional","HexagonLayer","_AggregationLayer","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","initializeState","cpuAggregator","getAggregator","props","getCellSize","state","aggregatorState","vertices","attributeManager","getAttributeManager","add","positions","size","accessor","updateState","opts","_get","_getPrototypeOf","prototype","call","changeFlags","propsOrDataChanged","viewport","context","attributes","getAttributes","layerData","_ref","hexagonVertices","setState","convertLatLngToMeterOffset","Array","isArray","length","vertex0","vertex3","centroid","centroidFlat","projectFlat","_viewport$getDistance","getDistanceScales","metersPerUnit","map","vt","vtFlat","error","getPickingInfo","_ref2","info","_onGetSublayerColor","cell","getAccessor","_onGetSublayerElevation","_getSublayerUpdateTriggers","getUpdateTriggers","renderLayers","_this$props","transitions","_this$state","SubLayerClass","getSubLayerClass","updateTriggers","geometry","radiusCommon","radiusUnits","angle","_objectSpread","diskResolution","getFillColor","bind","getElevation","getSubLayerProps","id","data","default","layerName"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/aggregation-layers/src/hexagon-layer/hexagon-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {log} from '@deck.gl/core';\nimport {ColumnLayer} from '@deck.gl/layers';\n\nimport {defaultColorRange} from '../utils/color-utils';\n\nimport {pointToHexbin} from './hexagon-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\nimport AggregationLayer from '../aggregation-layer';\n\nfunction nop() {}\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {type: 'accessor', value: null}, // default value is calcuated from `getColorWeight` and `colorAggregation`\n  getColorWeight: {type: 'accessor', value: 1},\n  colorAggregation: 'SUM',\n  lowerPercentile: {type: 'number', value: 0, min: 0, max: 100},\n  upperPercentile: {type: 'number', value: 100, min: 0, max: 100},\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {type: 'accessor', value: null}, // default value is calcuated from `getElevationWeight` and `elevationAggregation`\n  getElevationWeight: {type: 'accessor', value: 1},\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {type: 'number', value: 0, min: 0, max: 100},\n  elevationUpperPercentile: {type: 'number', value: 100, min: 0, max: 100},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n\n  radius: {type: 'number', value: 1000, min: 1},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  extruded: false,\n  hexagonAggregator: pointToHexbin,\n  getPosition: {type: 'accessor', value: x => x.position},\n  // Optional material for 'lighting' shader module\n  material: true,\n\n  // data filter\n  _filterData: {type: 'function', value: null, optional: true}\n};\n\nexport default class HexagonLayer extends AggregationLayer {\n  initializeState() {\n    const cpuAggregator = new CPUAggregator({\n      getAggregator: props => props.hexagonAggregator,\n      getCellSize: props => props.radius\n    });\n\n    this.state = {\n      cpuAggregator,\n      aggregatorState: cpuAggregator.state,\n      vertices: null\n    };\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, accessor: 'getPosition'}\n    });\n    // color and elevation attributes can't be added as attributes\n    // they are calculated using 'getValue' accessor that takes an array of pints.\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n\n    if (opts.changeFlags.propsOrDataChanged) {\n      const aggregatorState = this.state.cpuAggregator.updateState(opts, {\n        viewport: this.context.viewport,\n        attributes: this.getAttributes()\n      });\n      if (this.state.aggregatorState.layerData !== aggregatorState.layerData) {\n        // if user provided custom aggregator and returns hexagonVertices,\n        // Need to recalculate radius and angle based on vertices\n        const {hexagonVertices} = aggregatorState.layerData || {};\n        this.setState({\n          vertices: hexagonVertices && this.convertLatLngToMeterOffset(hexagonVertices)\n        });\n      }\n\n      this.setState({\n        // make a copy of the internal state of cpuAggregator for testing\n        aggregatorState\n      });\n    }\n  }\n\n  convertLatLngToMeterOffset(hexagonVertices) {\n    const {viewport} = this.context;\n    if (Array.isArray(hexagonVertices) && hexagonVertices.length === 6) {\n      // get centroid of hexagons\n      const vertex0 = hexagonVertices[0];\n      const vertex3 = hexagonVertices[3];\n\n      const centroid = [(vertex0[0] + vertex3[0]) / 2, (vertex0[1] + vertex3[1]) / 2];\n      const centroidFlat = viewport.projectFlat(centroid);\n\n      const {metersPerUnit} = viewport.getDistanceScales(centroid);\n\n      // offset all points by centroid to meter offset\n      const vertices = hexagonVertices.map(vt => {\n        const vtFlat = viewport.projectFlat(vt);\n\n        return [\n          (vtFlat[0] - centroidFlat[0]) * metersPerUnit[0],\n          (vtFlat[1] - centroidFlat[1]) * metersPerUnit[1]\n        ];\n      });\n\n      return vertices;\n    }\n\n    log.error('HexagonLayer: hexagonVertices needs to be an array of 6 points')();\n    return null;\n  }\n\n  getPickingInfo({info}) {\n    return this.state.cpuAggregator.getPickingInfo({info});\n  }\n\n  // create a method for testing\n  _onGetSublayerColor(cell) {\n    return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n  }\n\n  // create a method for testing\n  _onGetSublayerElevation(cell) {\n    return this.state.cpuAggregator.getAccessor('elevation')(cell);\n  }\n\n  _getSublayerUpdateTriggers() {\n    return this.state.cpuAggregator.getUpdateTriggers(this.props);\n  }\n\n  renderLayers() {\n    const {elevationScale, extruded, coverage, material, transitions} = this.props;\n    const {aggregatorState, vertices} = this.state;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n    const updateTriggers = this._getSublayerUpdateTriggers();\n\n    const geometry = vertices\n      ? {vertices, radius: 1}\n      : {\n          // default geometry\n          radius: aggregatorState.layerData.radiusCommon || 1,\n          radiusUnits: 'common',\n          angle: 90\n        };\n    return new SubLayerClass(\n      {\n        ...geometry,\n        diskResolution: 6,\n        elevationScale,\n        extruded,\n        coverage,\n        material,\n\n        getFillColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getFillColor: transitions.getColorValue || transitions.getColorWeight,\n          getElevation: transitions.getElevationValue || transitions.getElevationWeight\n        }\n      },\n      this.getSubLayerProps({\n        id: 'hexagon-cell',\n        updateTriggers\n      }),\n      {\n        data: aggregatorState.layerData.data\n      }\n    );\n  }\n}\n\nHexagonLayer.layerName = 'HexagonLayer';\nHexagonLayer.defaultProps = defaultProps;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}