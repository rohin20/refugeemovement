{"ast":null,"code":"import _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Transform } from '@luma.gl/core';\nimport GPUInterpolationTransition from '../../transitions/gpu-interpolation-transition';\nimport GPUSpringTransition from '../../transitions/gpu-spring-transition';\nimport log from '../../utils/log';\nvar TRANSITION_TYPES = {\n  interpolation: GPUInterpolationTransition,\n  spring: GPUSpringTransition\n};\nvar AttributeTransitionManager = /*#__PURE__*/function () {\n  function AttributeTransitionManager(gl, _ref) {\n    var id = _ref.id,\n      timeline = _ref.timeline;\n    _classCallCheck(this, AttributeTransitionManager);\n    _defineProperty(this, \"id\", void 0);\n    _defineProperty(this, \"isSupported\", void 0);\n    _defineProperty(this, \"gl\", void 0);\n    _defineProperty(this, \"timeline\", void 0);\n    _defineProperty(this, \"transitions\", void 0);\n    _defineProperty(this, \"needsRedraw\", void 0);\n    _defineProperty(this, \"numInstances\", void 0);\n    this.id = id;\n    this.gl = gl;\n    this.timeline = timeline;\n    this.transitions = {};\n    this.needsRedraw = false;\n    this.numInstances = 1;\n    this.isSupported = Transform.isSupported(gl);\n  }\n  _createClass(AttributeTransitionManager, [{\n    key: \"finalize\",\n    value: function finalize() {\n      for (var attributeName in this.transitions) {\n        this._removeTransition(attributeName);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(_ref2) {\n      var attributes = _ref2.attributes,\n        transitions = _ref2.transitions,\n        numInstances = _ref2.numInstances;\n      this.numInstances = numInstances || 1;\n      for (var attributeName in attributes) {\n        var attribute = attributes[attributeName];\n        var settings = attribute.getTransitionSetting(transitions);\n        if (!settings) continue;\n        this._updateAttribute(attributeName, attribute, settings);\n      }\n      for (var _attributeName in this.transitions) {\n        var _attribute = attributes[_attributeName];\n        if (!_attribute || !_attribute.getTransitionSetting(transitions)) {\n          this._removeTransition(_attributeName);\n        }\n      }\n    }\n  }, {\n    key: \"hasAttribute\",\n    value: function hasAttribute(attributeName) {\n      var transition = this.transitions[attributeName];\n      return transition && transition.inProgress;\n    }\n  }, {\n    key: \"getAttributes\",\n    value: function getAttributes() {\n      var animatedAttributes = {};\n      for (var attributeName in this.transitions) {\n        var transition = this.transitions[attributeName];\n        if (transition.inProgress) {\n          animatedAttributes[attributeName] = transition.attributeInTransition;\n        }\n      }\n      return animatedAttributes;\n    }\n  }, {\n    key: \"run\",\n    value: function run() {\n      if (!this.isSupported || this.numInstances === 0) {\n        return false;\n      }\n      for (var attributeName in this.transitions) {\n        var updated = this.transitions[attributeName].update();\n        if (updated) {\n          this.needsRedraw = true;\n        }\n      }\n      var needsRedraw = this.needsRedraw;\n      this.needsRedraw = false;\n      return needsRedraw;\n    }\n  }, {\n    key: \"_removeTransition\",\n    value: function _removeTransition(attributeName) {\n      this.transitions[attributeName].cancel();\n      delete this.transitions[attributeName];\n    }\n  }, {\n    key: \"_updateAttribute\",\n    value: function _updateAttribute(attributeName, attribute, settings) {\n      var transition = this.transitions[attributeName];\n      var isNew = !transition || transition.type !== settings.type;\n      if (isNew) {\n        if (!this.isSupported) {\n          log.warn(\"WebGL2 not supported by this browser. Transition for \".concat(attributeName, \" is disabled.\"))();\n          return;\n        }\n        if (transition) {\n          this._removeTransition(attributeName);\n        }\n        var TransitionType = TRANSITION_TYPES[settings.type];\n        if (TransitionType) {\n          this.transitions[attributeName] = new TransitionType({\n            attribute: attribute,\n            timeline: this.timeline,\n            gl: this.gl\n          });\n        } else {\n          log.error(\"unsupported transition type '\".concat(settings.type, \"'\"))();\n          isNew = false;\n        }\n      }\n      if (isNew || attribute.needsRedraw()) {\n        this.needsRedraw = true;\n        this.transitions[attributeName].start(settings, this.numInstances);\n      }\n    }\n  }]);\n  return AttributeTransitionManager;\n}();\nexport { AttributeTransitionManager as default };","map":{"version":3,"names":["Transform","GPUInterpolationTransition","GPUSpringTransition","log","TRANSITION_TYPES","interpolation","spring","AttributeTransitionManager","gl","_ref","id","timeline","_classCallCheck","_defineProperty","transitions","needsRedraw","numInstances","isSupported","_createClass","key","value","finalize","attributeName","_removeTransition","update","_ref2","attributes","attribute","settings","getTransitionSetting","_updateAttribute","hasAttribute","transition","inProgress","getAttributes","animatedAttributes","attributeInTransition","run","updated","cancel","isNew","type","warn","concat","TransitionType","error","start","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/core/src/lib/attribute/attribute-transition-manager.ts"],"sourcesContent":["import {Transform} from '@luma.gl/core';\nimport GPUInterpolationTransition from '../../transitions/gpu-interpolation-transition';\nimport GPUSpringTransition from '../../transitions/gpu-spring-transition';\nimport log from '../../utils/log';\n\nimport type {TransitionSettings} from './attribute-transition-utils';\nimport type Attribute from './attribute';\nimport type {Timeline} from '@luma.gl/engine';\nimport type GPUTransition from '../../transitions/gpu-transition';\nimport type {ConstructorOf} from '../../types/types';\n\nconst TRANSITION_TYPES: Record<string, ConstructorOf<GPUTransition>> = {\n  interpolation: GPUInterpolationTransition,\n  spring: GPUSpringTransition\n};\n\nexport default class AttributeTransitionManager {\n  id: string;\n  isSupported: boolean;\n\n  private gl: WebGLRenderingContext;\n  private timeline?: Timeline;\n\n  private transitions: {[id: string]: GPUTransition};\n  private needsRedraw: boolean;\n  private numInstances: number;\n\n  constructor(\n    gl: WebGLRenderingContext,\n    {\n      id,\n      timeline\n    }: {\n      id: string;\n      timeline?: Timeline;\n    }\n  ) {\n    this.id = id;\n    this.gl = gl;\n    this.timeline = timeline;\n\n    this.transitions = {};\n    this.needsRedraw = false;\n    this.numInstances = 1;\n\n    this.isSupported = Transform.isSupported(gl);\n  }\n\n  finalize(): void {\n    for (const attributeName in this.transitions) {\n      this._removeTransition(attributeName);\n    }\n  }\n\n  /* Public methods */\n\n  // Called when attribute manager updates\n  // Check the latest attributes for updates.\n  update({\n    attributes,\n    transitions,\n    numInstances\n  }: {\n    attributes: {[id: string]: Attribute};\n    transitions: any;\n    numInstances: number;\n  }): void {\n    // Transform class will crash if elementCount is 0\n    this.numInstances = numInstances || 1;\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const settings = attribute.getTransitionSetting(transitions);\n\n      // this attribute might not support transitions?\n      if (!settings) continue; // eslint-disable-line no-continue\n      this._updateAttribute(attributeName, attribute, settings);\n    }\n\n    for (const attributeName in this.transitions) {\n      const attribute = attributes[attributeName];\n      if (!attribute || !attribute.getTransitionSetting(transitions)) {\n        // Animated attribute has been removed\n        this._removeTransition(attributeName);\n      }\n    }\n  }\n\n  // Returns `true` if attribute is transition-enabled\n  hasAttribute(attributeName: string): boolean {\n    const transition = this.transitions[attributeName];\n    return transition && transition.inProgress;\n  }\n\n  // Get all the animated attributes\n  getAttributes(): {[id: string]: Attribute} {\n    const animatedAttributes = {};\n\n    for (const attributeName in this.transitions) {\n      const transition = this.transitions[attributeName];\n      if (transition.inProgress) {\n        animatedAttributes[attributeName] = transition.attributeInTransition;\n      }\n    }\n\n    return animatedAttributes;\n  }\n\n  /* eslint-disable max-statements */\n  // Called every render cycle, run transform feedback\n  // Returns `true` if anything changes\n  run(): boolean {\n    if (!this.isSupported || this.numInstances === 0) {\n      return false;\n    }\n\n    for (const attributeName in this.transitions) {\n      const updated = this.transitions[attributeName].update();\n      if (updated) {\n        this.needsRedraw = true;\n      }\n    }\n\n    const needsRedraw = this.needsRedraw;\n    this.needsRedraw = false;\n    return needsRedraw;\n  }\n  /* eslint-enable max-statements */\n\n  /* Private methods */\n  private _removeTransition(attributeName: string): void {\n    this.transitions[attributeName].cancel();\n    delete this.transitions[attributeName];\n  }\n\n  // Check an attributes for updates\n  // Returns a transition object if a new transition is triggered.\n  private _updateAttribute(\n    attributeName: string,\n    attribute: Attribute,\n    settings: TransitionSettings\n  ): void {\n    const transition = this.transitions[attributeName];\n    // an attribute can change transition type when it updates\n    // let's remove the transition when that happens so we can create the new transition type\n    // TODO: when switching transition types, make sure to carry over the attribute's\n    // previous buffers, currentLength, startIndices, etc, to be used as the starting point\n    // for the next transition\n    let isNew = !transition || transition.type !== settings.type;\n    if (isNew) {\n      if (!this.isSupported) {\n        log.warn(\n          `WebGL2 not supported by this browser. Transition for ${attributeName} is disabled.`\n        )();\n        return;\n      }\n\n      if (transition) {\n        this._removeTransition(attributeName);\n      }\n\n      const TransitionType = TRANSITION_TYPES[settings.type];\n      if (TransitionType) {\n        this.transitions[attributeName] = new TransitionType({\n          attribute,\n          timeline: this.timeline,\n          gl: this.gl\n        });\n      } else {\n        log.error(`unsupported transition type '${settings.type}'`)();\n        isNew = false;\n      }\n    }\n\n    if (isNew || attribute.needsRedraw()) {\n      this.needsRedraw = true;\n      this.transitions[attributeName].start(settings, this.numInstances);\n    }\n  }\n}\n"],"mappings":";;;AAAA,SAAQA,SAAR,QAAwB,eAAxB;AACA,OAAOC,0BAAP,MAAuC,gDAAvC;AACA,OAAOC,mBAAP,MAAgC,yCAAhC;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AAQA,IAAMC,gBAA8D,GAAG;EACrEC,aAAa,EAAEJ,0BADsD;EAErEK,MAAM,EAAEJ;AAF6D,CAAvE;AAAA,IAKqBK,0BAAN;EAWb,SAAAA,2BACEC,EADS,EAAAC,IAAA,EAST;IAAA,IANEC,EADF,GAAAD,IAAA,CACEC,EADF;MAEEC,QAAA,GAAAF,IAAA,CAAAE,QAAA;IAAAC,eAAA,OAAAL,0BAAA;IAKFM,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IACA,KAAKH,EAAL,GAAUA,EAAV;IACA,KAAKF,EAAL,GAAUA,EAAV;IACA,KAAKG,QAAL,GAAgBA,QAAhB;IAEA,KAAKG,WAAL,GAAmB,EAAnB;IACA,KAAKC,WAAL,GAAmB,KAAnB;IACA,KAAKC,YAAL,GAAoB,CAApB;IAEA,KAAKC,WAAL,GAAmBjB,SAAS,CAACiB,WAAV,CAAsBT,EAAtB,CAAnB;EACD;EAAAU,YAAA,CAAAX,0BAAA;IAAAY,GAAA;IAAAC,KAAA,EAED,SAAAC,SAAA,EAAiB;MACf,KAAK,IAAMC,aAAX,IAA4B,KAAKR,WAAjC,EAA8C;QAC5C,KAAKS,iBAAL,CAAuBD,aAAvB;MACD;IACF;EAAA;IAAAH,GAAA;IAAAC,KAAA,EAMD,SAAAI,OAAAC,KAAA,EAQS;MAAA,IAPPC,UADK,GAAAD,KAAA,CACLC,UADK;QAELZ,WAFK,GAAAW,KAAA,CAELX,WAFK;QAGLE,YAAA,GAAAS,KAAA,CAAAT,YAAA;MAOA,KAAKA,YAAL,GAAoBA,YAAY,IAAI,CAApC;MAEA,KAAK,IAAMM,aAAX,IAA4BI,UAA5B,EAAwC;QACtC,IAAMC,SAAS,GAAGD,UAAU,CAACJ,aAAD,CAA5B;QACA,IAAMM,QAAQ,GAAGD,SAAS,CAACE,oBAAV,CAA+Bf,WAA/B,CAAjB;QAGA,IAAI,CAACc,QAAL,EAAe;QACf,KAAKE,gBAAL,CAAsBR,aAAtB,EAAqCK,SAArC,EAAgDC,QAAhD;MACD;MAED,KAAK,IAAMN,cAAX,IAA4B,KAAKR,WAAjC,EAA8C;QAC5C,IAAMa,UAAS,GAAGD,UAAU,CAACJ,cAAD,CAA5B;QACA,IAAI,CAACK,UAAD,IAAc,CAACA,UAAS,CAACE,oBAAV,CAA+Bf,WAA/B,CAAnB,EAAgE;UAE9D,KAAKS,iBAAL,CAAuBD,cAAvB;QACD;MACF;IACF;EAAA;IAAAH,GAAA;IAAAC,KAAA,EAGD,SAAAW,aAAaT,aAAD,EAAiC;MAC3C,IAAMU,UAAU,GAAG,KAAKlB,WAAL,CAAiBQ,aAAjB,CAAnB;MACA,OAAOU,UAAU,IAAIA,UAAU,CAACC,UAAhC;IACD;EAAA;IAAAd,GAAA;IAAAC,KAAA,EAGD,SAAAc,cAAA,EAA2C;MACzC,IAAMC,kBAAkB,GAAG,EAA3B;MAEA,KAAK,IAAMb,aAAX,IAA4B,KAAKR,WAAjC,EAA8C;QAC5C,IAAMkB,UAAU,GAAG,KAAKlB,WAAL,CAAiBQ,aAAjB,CAAnB;QACA,IAAIU,UAAU,CAACC,UAAf,EAA2B;UACzBE,kBAAkB,CAACb,aAAD,CAAlB,GAAoCU,UAAU,CAACI,qBAA/C;QACD;MACF;MAED,OAAOD,kBAAP;IACD;EAAA;IAAAhB,GAAA;IAAAC,KAAA,EAKD,SAAAiB,IAAA,EAAe;MACb,IAAI,CAAC,KAAKpB,WAAN,IAAqB,KAAKD,YAAL,KAAsB,CAA/C,EAAkD;QAChD,OAAO,KAAP;MACD;MAED,KAAK,IAAMM,aAAX,IAA4B,KAAKR,WAAjC,EAA8C;QAC5C,IAAMwB,OAAO,GAAG,KAAKxB,WAAL,CAAiBQ,aAAjB,EAAgCE,MAAhC,EAAhB;QACA,IAAIc,OAAJ,EAAa;UACX,KAAKvB,WAAL,GAAmB,IAAnB;QACD;MACF;MAED,IAAMA,WAAW,GAAG,KAAKA,WAAzB;MACA,KAAKA,WAAL,GAAmB,KAAnB;MACA,OAAOA,WAAP;IACD;EAAA;IAAAI,GAAA;IAAAC,KAAA,EAIO,SAAAG,kBAAkBD,aAAD,EAA8B;MACrD,KAAKR,WAAL,CAAiBQ,aAAjB,EAAgCiB,MAAhC;MACA,OAAO,KAAKzB,WAAL,CAAiBQ,aAAjB,CAAP;IACD;EAAA;IAAAH,GAAA;IAAAC,KAAA,EAIO,SAAAU,iBACNR,aADsB,EAEtBK,SAFsB,EAGtBC,QAHsB,EAIhB;MACN,IAAMI,UAAU,GAAG,KAAKlB,WAAL,CAAiBQ,aAAjB,CAAnB;MAMA,IAAIkB,KAAK,GAAG,CAACR,UAAD,IAAeA,UAAU,CAACS,IAAX,KAAoBb,QAAQ,CAACa,IAAxD;MACA,IAAID,KAAJ,EAAW;QACT,IAAI,CAAC,KAAKvB,WAAV,EAAuB;UACrBd,GAAG,CAACuC,IAAJ,yDAAAC,MAAA,CAC0DrB,aAD1D;UAGA;QACD;QAED,IAAIU,UAAJ,EAAgB;UACd,KAAKT,iBAAL,CAAuBD,aAAvB;QACD;QAED,IAAMsB,cAAc,GAAGxC,gBAAgB,CAACwB,QAAQ,CAACa,IAAV,CAAvC;QACA,IAAIG,cAAJ,EAAoB;UAClB,KAAK9B,WAAL,CAAiBQ,aAAjB,IAAkC,IAAIsB,cAAJ,CAAmB;YACnDjB,SADmD,EACnDA,SADmD;YAEnDhB,QAAQ,EAAE,KAAKA,QAFoC;YAGnDH,EAAE,EAAE,KAAKA;UAH0C,CAAnB,CAAlC;QAKD,CAND,MAMO;UACLL,GAAG,CAAC0C,KAAJ,iCAAAF,MAAA,CAA0Cf,QAAQ,CAACa,IAAnD;UACAD,KAAK,GAAG,KAAR;QACD;MACF;MAED,IAAIA,KAAK,IAAIb,SAAS,CAACZ,WAAV,EAAb,EAAsC;QACpC,KAAKA,WAAL,GAAmB,IAAnB;QACA,KAAKD,WAAL,CAAiBQ,aAAjB,EAAgCwB,KAAhC,CAAsClB,QAAtC,EAAgD,KAAKZ,YAArD;MACD;IACF;EAAA;EAAA,OAAAT,0BAAA;AAAA;AAAA,SAlKkBA,0BAAN,IAAAwC,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}