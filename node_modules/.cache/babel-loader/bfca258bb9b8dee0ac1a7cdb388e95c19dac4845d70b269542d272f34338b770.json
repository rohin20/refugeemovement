{"ast":null,"code":"import _toConsumableArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Buffer, Texture2D, assert } from '@luma.gl/webgl';\nimport { isWebGL2 } from '@luma.gl/gltools';\nimport { Transform } from '@luma.gl/engine';\nimport { default as textureFilterModule } from './texture-filter';\nimport { POLY_TEX_VS, FILTER_VS } from './shaders';\nimport * as Polygon from './polygon';\nvar TEXTURE_SIZE = 512;\nvar GPUPointInPolygon = /*#__PURE__*/function () {\n  function GPUPointInPolygon(gl) {\n    _classCallCheck(this, GPUPointInPolygon);\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.gl = gl;\n    assert(isWebGL2(gl));\n    this.textureSize = TEXTURE_SIZE;\n    this._setupResources();\n    this.update(opts);\n  }\n  _createClass(GPUPointInPolygon, [{\n    key: \"update\",\n    value: function update() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        polygons = _ref2.polygons,\n        textureSize = _ref2.textureSize;\n      if (textureSize) {\n        this.textureSize = textureSize;\n      }\n      if (!polygons || polygons.length === 0) {\n        return;\n      }\n      var _triangulatePolygons = triangulatePolygons(polygons),\n        vertices = _triangulatePolygons.vertices,\n        indices = _triangulatePolygons.indices,\n        vertexCount = _triangulatePolygons.vertexCount,\n        ids = _triangulatePolygons.ids;\n      this._updateResources(vertices, indices, ids, vertexCount);\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(_ref) {\n      var positionBuffer = _ref.positionBuffer,\n        filterValueIndexBuffer = _ref.filterValueIndexBuffer,\n        count = _ref.count;\n      this.filterTransform.update({\n        sourceBuffers: {\n          a_position: positionBuffer\n        },\n        feedbackBuffers: {\n          filterValueIndex: filterValueIndexBuffer\n        },\n        elementCount: count\n      });\n      var polygonTexture = this.polygonTexture,\n        boundingBox = this.boundingBox;\n      this.filterTransform.run({\n        moduleSettings: {\n          boundingBox: boundingBox,\n          texture: polygonTexture\n        }\n      });\n    }\n  }, {\n    key: \"_setupResources\",\n    value: function _setupResources() {\n      var _parameters;\n      var gl = this.gl;\n      this.polygonTexture = new Texture2D(gl, {\n        format: 6407,\n        type: 5121,\n        dataFormat: 6407,\n        border: 0,\n        mipmaps: false,\n        parameters: (_parameters = {}, _defineProperty(_parameters, 10240, 9728), _defineProperty(_parameters, 10241, 9728), _defineProperty(_parameters, 10242, 33071), _defineProperty(_parameters, 10243, 33071), _parameters)\n      });\n      this.positionBuffer = new Buffer(gl, {\n        accessor: {\n          type: 5126,\n          size: 2\n        }\n      });\n      this.idBuffer = new Buffer(gl, {\n        accessor: {\n          type: 5126,\n          size: 1\n        }\n      });\n      this.indexBuffer = new Buffer(gl, {\n        target: 34963,\n        accessor: {\n          type: 5123\n        }\n      });\n      this.polyTextureTransform = new Transform(gl, {\n        id: \"polygon-texture-creation-transform\",\n        elementCount: 0,\n        _targetTexture: this.polygonTexture,\n        _targetTextureVarying: 'v_polygonColor',\n        vs: POLY_TEX_VS,\n        drawMode: 4,\n        isIndexed: true,\n        sourceBuffers: {\n          a_position: this.positionBuffer,\n          a_polygonID: this.idBuffer,\n          indices: this.indexBuffer\n        }\n      });\n      this.filterTransform = new Transform(gl, {\n        id: 'filter transform',\n        vs: FILTER_VS,\n        modules: [textureFilterModule],\n        varyings: ['filterValueIndex']\n      });\n    }\n  }, {\n    key: \"_updateResources\",\n    value: function _updateResources(vertices, indices, ids, vertexCount) {\n      var boundingBox = getBoundingBox(vertices, vertexCount);\n      var _boundingBox = _slicedToArray(boundingBox, 4),\n        xMin = _boundingBox[0],\n        yMin = _boundingBox[1],\n        xMax = _boundingBox[2],\n        yMax = _boundingBox[3];\n      var width = xMax - xMin;\n      var height = yMax - yMin;\n      var whRatio = width / height;\n      var textureSize = this.textureSize;\n      var texWidth = textureSize;\n      var texHeight = textureSize;\n      if (whRatio > 1) {\n        texHeight = texWidth / whRatio;\n      } else {\n        texWidth = texHeight * whRatio;\n      }\n      this.boundingBox = boundingBox;\n      this.polygonTexture.resize({\n        width: texWidth,\n        height: texHeight,\n        mipmaps: false\n      });\n      this.positionBuffer.setData(new Float32Array(vertices));\n      this.idBuffer.setData(new Float32Array(ids));\n      this.indexBuffer.setData(new Uint16Array(indices));\n      this.polyTextureTransform.update({\n        elementCount: indices.length,\n        _targetTexture: this.polygonTexture\n      });\n      this.polyTextureTransform.run({\n        uniforms: {\n          boundingBoxOriginSize: [xMin, yMin, width, height]\n        }\n      });\n    }\n  }]);\n  return GPUPointInPolygon;\n}();\nexport { GPUPointInPolygon as default };\nfunction getBoundingBox(positions, vertexCount) {\n  var yMin = Infinity;\n  var yMax = -Infinity;\n  var xMin = Infinity;\n  var xMax = -Infinity;\n  var y;\n  var x;\n  for (var i = 0; i < vertexCount; i++) {\n    x = positions[i * 2];\n    y = positions[i * 2 + 1];\n    yMin = y < yMin ? y : yMin;\n    yMax = y > yMax ? y : yMax;\n    xMin = x < xMin ? x : xMin;\n    xMax = x > xMax ? x : xMax;\n  }\n  return [xMin, yMin, xMax, yMax];\n}\nfunction triangulatePolygons(polygons) {\n  var SIZE = 2;\n  var vertices = [];\n  var indices = [];\n  var ids = [];\n  var count = 0;\n  var polygonId = 0;\n  for (var i = 0; i < polygons.length; i++) {\n    var normalized = Polygon.normalize(polygons[i], SIZE);\n    var curVertices = normalized.positions || normalized;\n    var curCount = curVertices.length / SIZE;\n    var curIds = new Array(curCount).fill(polygonId);\n    vertices.push.apply(vertices, _toConsumableArray(curVertices));\n    ids.push.apply(ids, _toConsumableArray(curIds));\n    var curIndices = Polygon.getSurfaceIndices(normalized, SIZE);\n    var indexCount = curIndices.length;\n    for (var j = 0; j < indexCount; j++) {\n      curIndices[j] += count;\n    }\n    count += curCount;\n    indices.push.apply(indices, _toConsumableArray(curIndices));\n    polygonId++;\n  }\n  assert(count < 65536);\n  var vertexCount = Polygon.getVertexCount(vertices, SIZE);\n  return {\n    vertices: vertices,\n    indices: indices,\n    ids: ids,\n    vertexCount: vertexCount\n  };\n}","map":{"version":3,"names":["Buffer","Texture2D","assert","isWebGL2","Transform","default","textureFilterModule","POLY_TEX_VS","FILTER_VS","Polygon","TEXTURE_SIZE","GPUPointInPolygon","gl","_classCallCheck","opts","arguments","length","undefined","textureSize","_setupResources","update","_createClass","key","value","_ref2","polygons","_triangulatePolygons","triangulatePolygons","vertices","indices","vertexCount","ids","_updateResources","filter","_ref","positionBuffer","filterValueIndexBuffer","count","filterTransform","sourceBuffers","a_position","feedbackBuffers","filterValueIndex","elementCount","polygonTexture","boundingBox","run","moduleSettings","texture","_parameters","format","type","dataFormat","border","mipmaps","parameters","_defineProperty","accessor","size","idBuffer","indexBuffer","target","polyTextureTransform","id","_targetTexture","_targetTextureVarying","vs","drawMode","isIndexed","a_polygonID","modules","varyings","getBoundingBox","_boundingBox","_slicedToArray","xMin","yMin","xMax","yMax","width","height","whRatio","texWidth","texHeight","resize","setData","Float32Array","Uint16Array","uniforms","boundingBoxOriginSize","positions","Infinity","y","x","i","SIZE","polygonId","normalized","normalize","curVertices","curCount","curIds","Array","fill","push","apply","_toConsumableArray","curIndices","getSurfaceIndices","indexCount","j","getVertexCount"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@luma.gl/experimental/src/gpgpu/point-in-polygon/gpu-point-in-polygon.js"],"sourcesContent":["// @ts-nocheck TODO remove\n\nimport GL from '@luma.gl/constants';\nimport {Buffer, Texture2D, assert} from '@luma.gl/webgl';\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {Transform} from '@luma.gl/engine';\nimport {default as textureFilterModule} from './texture-filter';\nimport {POLY_TEX_VS, FILTER_VS} from './shaders';\nimport * as Polygon from './polygon';\nconst TEXTURE_SIZE = 512;\n\nexport default class GPUPointInPolygon {\n  constructor(gl, opts = {}) {\n    this.gl = gl;\n    assert(isWebGL2(gl)); // supports WebGL2 only\n    this.textureSize = TEXTURE_SIZE;\n    this._setupResources();\n    this.update(opts);\n  }\n\n  update({polygons, textureSize} = {}) {\n    if (textureSize) {\n      this.textureSize = textureSize;\n    }\n    if (!polygons || polygons.length === 0) {\n      return;\n    }\n\n    const {vertices, indices, vertexCount, ids} = triangulatePolygons(polygons);\n    this._updateResources(vertices, indices, ids, vertexCount);\n  }\n\n  filter({positionBuffer, filterValueIndexBuffer, count}) {\n    this.filterTransform.update({\n      sourceBuffers: {\n        a_position: positionBuffer\n      },\n      feedbackBuffers: {\n        filterValueIndex: filterValueIndexBuffer\n      },\n      elementCount: count\n    });\n    const {polygonTexture, boundingBox} = this;\n\n    this.filterTransform.run({\n      moduleSettings: {boundingBox, texture: polygonTexture}\n    });\n  }\n\n  // PRIVATE\n\n  _setupResources() {\n    const {gl} = this;\n\n    // texture to render polygons to\n    this.polygonTexture = new Texture2D(gl, {\n      format: GL.RGB,\n      type: GL.UNSIGNED_BYTE,\n      dataFormat: GL.RGB,\n      border: 0,\n      mipmaps: false,\n      parameters: {\n        [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_WRAP_S]: gl.CLAMP_TO_EDGE,\n        [GL.TEXTURE_WRAP_T]: gl.CLAMP_TO_EDGE\n      }\n    });\n    this.positionBuffer = new Buffer(gl, {accessor: {type: GL.FLOAT, size: 2}});\n    this.idBuffer = new Buffer(gl, {accessor: {type: GL.FLOAT, size: 1}});\n    this.indexBuffer = new Buffer(gl, {\n      target: GL.ELEMENT_ARRAY_BUFFER,\n      accessor: {type: GL.UNSIGNED_SHORT}\n    });\n\n    // transform to generate polygon texture\n    this.polyTextureTransform = new Transform(gl, {\n      id: `polygon-texture-creation-transform`,\n      elementCount: 0,\n      _targetTexture: this.polygonTexture,\n      _targetTextureVarying: 'v_polygonColor',\n      vs: POLY_TEX_VS,\n      drawMode: GL.TRIANGLES,\n      isIndexed: true,\n      sourceBuffers: {\n        a_position: this.positionBuffer,\n        a_polygonID: this.idBuffer,\n        indices: this.indexBuffer\n      }\n    });\n\n    // transform to perform filtering\n    this.filterTransform = new Transform(gl, {\n      id: 'filter transform',\n      vs: FILTER_VS,\n      modules: [textureFilterModule],\n      varyings: ['filterValueIndex']\n    });\n  }\n\n  _updateResources(vertices, indices, ids, vertexCount) {\n    const boundingBox = getBoundingBox(vertices, vertexCount);\n    const [xMin, yMin, xMax, yMax] = boundingBox;\n    const width = xMax - xMin;\n    const height = yMax - yMin;\n    const whRatio = width / height;\n    const {textureSize} = this;\n\n    // calculate max texture size with same aspect ratio\n    let texWidth = textureSize;\n    let texHeight = textureSize;\n    if (whRatio > 1) {\n      texHeight = texWidth / whRatio;\n    } else {\n      texWidth = texHeight * whRatio;\n    }\n\n    this.boundingBox = boundingBox;\n    this.polygonTexture.resize({width: texWidth, height: texHeight, mipmaps: false});\n    this.positionBuffer.setData(new Float32Array(vertices));\n    this.idBuffer.setData(new Float32Array(ids));\n    this.indexBuffer.setData(new Uint16Array(indices));\n    this.polyTextureTransform.update({\n      elementCount: indices.length,\n      _targetTexture: this.polygonTexture\n    });\n\n    this.polyTextureTransform.run({\n      uniforms: {\n        boundingBoxOriginSize: [xMin, yMin, width, height]\n      }\n    });\n  }\n}\n\n// Helper methods\n\nfunction getBoundingBox(positions, vertexCount) {\n  let yMin = Infinity;\n  let yMax = -Infinity;\n  let xMin = Infinity;\n  let xMax = -Infinity;\n  let y;\n  let x;\n\n  for (let i = 0; i < vertexCount; i++) {\n    x = positions[i * 2];\n    y = positions[i * 2 + 1];\n    yMin = y < yMin ? y : yMin;\n    yMax = y > yMax ? y : yMax;\n    xMin = x < xMin ? x : xMin;\n    xMax = x > xMax ? x : xMax;\n  }\n\n  return [xMin, yMin, xMax, yMax];\n}\n\nfunction triangulatePolygons(polygons) {\n  const SIZE = 2;\n  const vertices = [];\n  const indices = [];\n  const ids = [];\n  let count = 0;\n  let polygonId = 0;\n  for (let i = 0; i < polygons.length; i++) {\n    const normalized = Polygon.normalize(polygons[i], SIZE);\n    const curVertices = normalized.positions || normalized;\n    const curCount = curVertices.length / SIZE;\n    const curIds = new Array(curCount).fill(polygonId);\n    vertices.push(...curVertices);\n    ids.push(...curIds);\n    const curIndices = Polygon.getSurfaceIndices(normalized, SIZE);\n    const indexCount = curIndices.length;\n    for (let j = 0; j < indexCount; j++) {\n      curIndices[j] += count;\n    }\n    count += curCount;\n    indices.push(...curIndices);\n    polygonId++;\n  }\n\n  // UInt16 (UNSIGNED_SHORT) buffer is used for indices\n  assert(count < 65536); // 0xFFFF\n\n  const vertexCount = Polygon.getVertexCount(vertices, SIZE);\n\n  return {vertices, indices, ids, vertexCount};\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}