{"ast":null,"code":"import _toConsumableArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport * as React from 'react';\nimport { invariant } from '@formatjs/intl-utils';\nimport { createError, escape } from '../utils';\nimport IntlMessageFormat from 'intl-messageformat';\nfunction setTimeZoneInOptions(opts, timeZone) {\n  return Object.keys(opts).reduce(function (all, k) {\n    all[k] = Object.assign({\n      timeZone: timeZone\n    }, opts[k]);\n    return all;\n  }, {});\n}\nfunction deepMergeOptions(opts1, opts2) {\n  var keys = Object.keys(Object.assign(Object.assign({}, opts1), opts2));\n  return keys.reduce(function (all, k) {\n    all[k] = Object.assign(Object.assign({}, opts1[k] || {}), opts2[k] || {});\n    return all;\n  }, {});\n}\nfunction deepMergeFormatsAndSetTimeZone(f1, timeZone) {\n  if (!timeZone) {\n    return f1;\n  }\n  var mfFormats = IntlMessageFormat.formats;\n  return Object.assign(Object.assign(Object.assign({}, mfFormats), f1), {\n    date: deepMergeOptions(setTimeZoneInOptions(mfFormats.date, timeZone), setTimeZoneInOptions(f1.date || {}, timeZone)),\n    time: deepMergeOptions(setTimeZoneInOptions(mfFormats.time, timeZone), setTimeZoneInOptions(f1.time || {}, timeZone))\n  });\n}\nexport var prepareIntlMessageFormatHtmlOutput = function prepareIntlMessageFormatHtmlOutput(chunks) {\n  return React.createElement.apply(React, [React.Fragment, null].concat(_toConsumableArray(chunks)));\n};\nexport function formatMessage(_ref, state) {\n  var locale = _ref.locale,\n    formats = _ref.formats,\n    messages = _ref.messages,\n    defaultLocale = _ref.defaultLocale,\n    defaultFormats = _ref.defaultFormats,\n    onError = _ref.onError,\n    timeZone = _ref.timeZone;\n  var messageDescriptor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    id: ''\n  };\n  var values = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var id = messageDescriptor.id,\n    defaultMessage = messageDescriptor.defaultMessage;\n  // `id` is a required field of a Message Descriptor.\n  invariant(!!id, '[React Intl] An `id` must be provided to format a message.');\n  var message = messages && messages[String(id)];\n  formats = deepMergeFormatsAndSetTimeZone(formats, timeZone);\n  defaultFormats = deepMergeFormatsAndSetTimeZone(defaultFormats, timeZone);\n  var formattedMessageParts = [];\n  if (message) {\n    try {\n      var formatter = state.getMessageFormat(message, locale, formats, {\n        formatters: state\n      });\n      formattedMessageParts = formatter.formatHTMLMessage(values);\n    } catch (e) {\n      onError(createError(\"Error formatting message: \\\"\".concat(id, \"\\\" for locale: \\\"\").concat(locale, \"\\\"\") + (defaultMessage ? ', using default message as fallback.' : ''), e));\n    }\n  } else {\n    // This prevents warnings from littering the console in development\n    // when no `messages` are passed into the <IntlProvider> for the\n    // default locale, and a default message is in the source.\n    if (!defaultMessage || locale && locale.toLowerCase() !== defaultLocale.toLowerCase()) {\n      onError(createError(\"Missing message: \\\"\".concat(id, \"\\\" for locale: \\\"\").concat(locale, \"\\\"\") + (defaultMessage ? ', using default message as fallback.' : '')));\n    }\n  }\n  if (!formattedMessageParts.length && defaultMessage) {\n    try {\n      var _formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats);\n      formattedMessageParts = _formatter.formatHTMLMessage(values);\n    } catch (e) {\n      onError(createError(\"Error formatting the default message for: \\\"\".concat(id, \"\\\"\"), e));\n    }\n  }\n  if (!formattedMessageParts.length) {\n    onError(createError(\"Cannot format message: \\\"\".concat(id, \"\\\", \") + \"using message \".concat(message || defaultMessage ? 'source' : 'id', \" as fallback.\")));\n    if (typeof message === 'string') {\n      return message || defaultMessage || String(id);\n    }\n    return defaultMessage || String(id);\n  }\n  if (formattedMessageParts.length === 1 && typeof formattedMessageParts[0] === 'string') {\n    return formattedMessageParts[0] || defaultMessage || String(id);\n  }\n  return prepareIntlMessageFormatHtmlOutput(formattedMessageParts);\n}\nexport function formatHTMLMessage(config, state) {\n  var messageDescriptor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    id: ''\n  };\n  var rawValues = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  // Process all the values before they are used when formatting the ICU\n  // Message string. Since the formatted message might be injected via\n  // `innerHTML`, all String-based values need to be HTML-escaped.\n  var escapedValues = Object.keys(rawValues).reduce(function (escaped, name) {\n    var value = rawValues[name];\n    escaped[name] = typeof value === 'string' ? escape(value) : value;\n    return escaped;\n  }, {});\n  return formatMessage(config, state, messageDescriptor, escapedValues);\n}","map":{"version":3,"names":["React","invariant","createError","escape","IntlMessageFormat","setTimeZoneInOptions","opts","timeZone","Object","keys","reduce","all","k","assign","deepMergeOptions","opts1","opts2","deepMergeFormatsAndSetTimeZone","f1","mfFormats","formats","date","time","prepareIntlMessageFormatHtmlOutput","chunks","createElement","apply","Fragment","concat","_toConsumableArray","formatMessage","_ref","state","locale","messages","defaultLocale","defaultFormats","onError","messageDescriptor","arguments","length","undefined","id","values","defaultMessage","message","String","formattedMessageParts","formatter","getMessageFormat","formatters","formatHTMLMessage","e","toLowerCase","config","rawValues","escapedValues","escaped","name","value"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/react-intl/lib/formatters/message.js"],"sourcesContent":["/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport * as React from 'react';\nimport { invariant } from '@formatjs/intl-utils';\nimport { createError, escape } from '../utils';\nimport IntlMessageFormat from 'intl-messageformat';\nfunction setTimeZoneInOptions(opts, timeZone) {\n    return Object.keys(opts).reduce((all, k) => {\n        all[k] = Object.assign({ timeZone }, opts[k]);\n        return all;\n    }, {});\n}\nfunction deepMergeOptions(opts1, opts2) {\n    const keys = Object.keys(Object.assign(Object.assign({}, opts1), opts2));\n    return keys.reduce((all, k) => {\n        all[k] = Object.assign(Object.assign({}, (opts1[k] || {})), (opts2[k] || {}));\n        return all;\n    }, {});\n}\nfunction deepMergeFormatsAndSetTimeZone(f1, timeZone) {\n    if (!timeZone) {\n        return f1;\n    }\n    const mfFormats = IntlMessageFormat.formats;\n    return Object.assign(Object.assign(Object.assign({}, mfFormats), f1), { date: deepMergeOptions(setTimeZoneInOptions(mfFormats.date, timeZone), setTimeZoneInOptions(f1.date || {}, timeZone)), time: deepMergeOptions(setTimeZoneInOptions(mfFormats.time, timeZone), setTimeZoneInOptions(f1.time || {}, timeZone)) });\n}\nexport const prepareIntlMessageFormatHtmlOutput = (chunks) => React.createElement(React.Fragment, null, ...chunks);\nexport function formatMessage({ locale, formats, messages, defaultLocale, defaultFormats, onError, timeZone, }, state, messageDescriptor = { id: '' }, values = {}) {\n    const { id, defaultMessage } = messageDescriptor;\n    // `id` is a required field of a Message Descriptor.\n    invariant(!!id, '[React Intl] An `id` must be provided to format a message.');\n    const message = messages && messages[String(id)];\n    formats = deepMergeFormatsAndSetTimeZone(formats, timeZone);\n    defaultFormats = deepMergeFormatsAndSetTimeZone(defaultFormats, timeZone);\n    let formattedMessageParts = [];\n    if (message) {\n        try {\n            const formatter = state.getMessageFormat(message, locale, formats, {\n                formatters: state,\n            });\n            formattedMessageParts = formatter.formatHTMLMessage(values);\n        }\n        catch (e) {\n            onError(createError(`Error formatting message: \"${id}\" for locale: \"${locale}\"` +\n                (defaultMessage ? ', using default message as fallback.' : ''), e));\n        }\n    }\n    else {\n        // This prevents warnings from littering the console in development\n        // when no `messages` are passed into the <IntlProvider> for the\n        // default locale, and a default message is in the source.\n        if (!defaultMessage ||\n            (locale && locale.toLowerCase() !== defaultLocale.toLowerCase())) {\n            onError(createError(`Missing message: \"${id}\" for locale: \"${locale}\"` +\n                (defaultMessage ? ', using default message as fallback.' : '')));\n        }\n    }\n    if (!formattedMessageParts.length && defaultMessage) {\n        try {\n            const formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats);\n            formattedMessageParts = formatter.formatHTMLMessage(values);\n        }\n        catch (e) {\n            onError(createError(`Error formatting the default message for: \"${id}\"`, e));\n        }\n    }\n    if (!formattedMessageParts.length) {\n        onError(createError(`Cannot format message: \"${id}\", ` +\n            `using message ${message || defaultMessage ? 'source' : 'id'} as fallback.`));\n        if (typeof message === 'string') {\n            return message || defaultMessage || String(id);\n        }\n        return defaultMessage || String(id);\n    }\n    if (formattedMessageParts.length === 1 &&\n        typeof formattedMessageParts[0] === 'string') {\n        return formattedMessageParts[0] || defaultMessage || String(id);\n    }\n    return prepareIntlMessageFormatHtmlOutput(formattedMessageParts);\n}\nexport function formatHTMLMessage(config, state, messageDescriptor = { id: '' }, rawValues = {}) {\n    // Process all the values before they are used when formatting the ICU\n    // Message string. Since the formatted message might be injected via\n    // `innerHTML`, all String-based values need to be HTML-escaped.\n    const escapedValues = Object.keys(rawValues).reduce((escaped, name) => {\n        const value = rawValues[name];\n        escaped[name] = typeof value === 'string' ? escape(value) : value;\n        return escaped;\n    }, {});\n    return formatMessage(config, state, messageDescriptor, escapedValues);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}