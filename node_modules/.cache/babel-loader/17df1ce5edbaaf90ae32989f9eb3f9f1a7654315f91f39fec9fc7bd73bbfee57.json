{"ast":null,"code":"import _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { CompositeLayer, _flatten as flatten } from '@deck.gl/core';\nimport { GeoJsonLayer } from '@deck.gl/layers';\nimport Tileset2D, { STRATEGY_DEFAULT } from './tileset-2d';\nimport { urlType, getURLFromTemplate } from './utils';\nvar defaultProps = {\n  TilesetClass: Tileset2D,\n  data: {\n    type: 'data',\n    value: []\n  },\n  dataComparator: urlType.equals,\n  renderSubLayers: {\n    type: 'function',\n    value: function value(props) {\n      return new GeoJsonLayer(props);\n    },\n    compare: false\n  },\n  getTileData: {\n    type: 'function',\n    optional: true,\n    value: null,\n    compare: false\n  },\n  onViewportLoad: {\n    type: 'function',\n    optional: true,\n    value: null,\n    compare: false\n  },\n  onTileLoad: {\n    type: 'function',\n    value: function value(tile) {},\n    compare: false\n  },\n  onTileUnload: {\n    type: 'function',\n    value: function value(tile) {},\n    compare: false\n  },\n  onTileError: {\n    type: 'function',\n    value: function value(err) {\n      return console.error(err);\n    },\n    compare: false\n  },\n  extent: {\n    type: 'array',\n    optional: true,\n    value: null,\n    compare: true\n  },\n  tileSize: 512,\n  maxZoom: null,\n  minZoom: 0,\n  maxCacheSize: null,\n  maxCacheByteSize: null,\n  refinementStrategy: STRATEGY_DEFAULT,\n  zRange: null,\n  maxRequests: 6,\n  zoomOffset: 0\n};\nvar TileLayer = /*#__PURE__*/function (_CompositeLayer) {\n  _inherits(TileLayer, _CompositeLayer);\n  var _super = _createSuper(TileLayer);\n  function TileLayer() {\n    _classCallCheck(this, TileLayer);\n    return _super.apply(this, arguments);\n  }\n  _createClass(TileLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        tileset: null,\n        isLoaded: false\n      };\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      var _this$state, _this$state$tileset;\n      (_this$state = this.state) === null || _this$state === void 0 ? void 0 : (_this$state$tileset = _this$state.tileset) === null || _this$state$tileset === void 0 ? void 0 : _this$state$tileset.finalize();\n    }\n  }, {\n    key: \"isLoaded\",\n    get: function get() {\n      var _this$state2, _this$state2$tileset;\n      return (_this$state2 = this.state) === null || _this$state2 === void 0 ? void 0 : (_this$state2$tileset = _this$state2.tileset) === null || _this$state2$tileset === void 0 ? void 0 : _this$state2$tileset.selectedTiles.every(function (tile) {\n        return tile.isLoaded && tile.layers && tile.layers.every(function (layer) {\n          return layer.isLoaded;\n        });\n      });\n    }\n  }, {\n    key: \"shouldUpdateState\",\n    value: function shouldUpdateState(_ref) {\n      var changeFlags = _ref.changeFlags;\n      return changeFlags.somethingChanged;\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref2) {\n      var changeFlags = _ref2.changeFlags;\n      var tileset = this.state.tileset;\n      var propsChanged = changeFlags.propsOrDataChanged || changeFlags.updateTriggersChanged;\n      var dataChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData);\n      if (!tileset) {\n        tileset = new this.props.TilesetClass(this._getTilesetOptions());\n        this.setState({\n          tileset: tileset\n        });\n      } else if (propsChanged) {\n        tileset.setOptions(this._getTilesetOptions());\n        if (dataChanged) {\n          tileset.reloadAll();\n        } else {\n          this.state.tileset.tiles.forEach(function (tile) {\n            tile.layers = null;\n          });\n        }\n      }\n      this._updateTileset();\n    }\n  }, {\n    key: \"_getTilesetOptions\",\n    value: function _getTilesetOptions() {\n      var _this$props = this.props,\n        tileSize = _this$props.tileSize,\n        maxCacheSize = _this$props.maxCacheSize,\n        maxCacheByteSize = _this$props.maxCacheByteSize,\n        refinementStrategy = _this$props.refinementStrategy,\n        extent = _this$props.extent,\n        maxZoom = _this$props.maxZoom,\n        minZoom = _this$props.minZoom,\n        maxRequests = _this$props.maxRequests,\n        zoomOffset = _this$props.zoomOffset;\n      return {\n        maxCacheSize: maxCacheSize,\n        maxCacheByteSize: maxCacheByteSize,\n        maxZoom: maxZoom,\n        minZoom: minZoom,\n        tileSize: tileSize,\n        refinementStrategy: refinementStrategy,\n        extent: extent,\n        maxRequests: maxRequests,\n        zoomOffset: zoomOffset,\n        getTileData: this.getTileData.bind(this),\n        onTileLoad: this._onTileLoad.bind(this),\n        onTileError: this._onTileError.bind(this),\n        onTileUnload: this._onTileUnload.bind(this)\n      };\n    }\n  }, {\n    key: \"_updateTileset\",\n    value: function _updateTileset() {\n      var tileset = this.state.tileset;\n      var _this$props2 = this.props,\n        zRange = _this$props2.zRange,\n        modelMatrix = _this$props2.modelMatrix;\n      var frameNumber = tileset.update(this.context.viewport, {\n        zRange: zRange,\n        modelMatrix: modelMatrix\n      });\n      var isLoaded = tileset.isLoaded;\n      var loadingStateChanged = this.state.isLoaded !== isLoaded;\n      var tilesetChanged = this.state.frameNumber !== frameNumber;\n      if (isLoaded && (loadingStateChanged || tilesetChanged)) {\n        this._onViewportLoad();\n      }\n      if (tilesetChanged) {\n        this.setState({\n          frameNumber: frameNumber\n        });\n      }\n      this.state.isLoaded = isLoaded;\n    }\n  }, {\n    key: \"_onViewportLoad\",\n    value: function _onViewportLoad() {\n      var tileset = this.state.tileset;\n      var onViewportLoad = this.props.onViewportLoad;\n      if (onViewportLoad) {\n        onViewportLoad(tileset.selectedTiles);\n      }\n    }\n  }, {\n    key: \"_onTileLoad\",\n    value: function _onTileLoad(tile) {\n      this.props.onTileLoad(tile);\n      tile.layers = null;\n      this.setNeedsUpdate();\n    }\n  }, {\n    key: \"_onTileError\",\n    value: function _onTileError(error, tile) {\n      this.props.onTileError(error);\n      tile.layers = null;\n      this.setNeedsUpdate();\n    }\n  }, {\n    key: \"_onTileUnload\",\n    value: function _onTileUnload(tile) {\n      this.props.onTileUnload(tile);\n    }\n  }, {\n    key: \"getTileData\",\n    value: function getTileData(tile) {\n      var _this$props3 = this.props,\n        data = _this$props3.data,\n        getTileData = _this$props3.getTileData,\n        fetch = _this$props3.fetch;\n      var signal = tile.signal;\n      tile.url = typeof data === 'string' || Array.isArray(data) ? getURLFromTemplate(data, tile) : null;\n      if (getTileData) {\n        return getTileData(tile);\n      }\n      if (fetch && tile.url) {\n        return fetch(tile.url, {\n          propName: 'data',\n          layer: this,\n          signal: signal\n        });\n      }\n      return null;\n    }\n  }, {\n    key: \"renderSubLayers\",\n    value: function renderSubLayers(props) {\n      return this.props.renderSubLayers(props);\n    }\n  }, {\n    key: \"getSubLayerPropsByTile\",\n    value: function getSubLayerPropsByTile(tile) {\n      return null;\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref3) {\n      var info = _ref3.info,\n        sourceLayer = _ref3.sourceLayer;\n      if (info.picked) {\n        info.tile = sourceLayer.props.tile;\n      }\n      return info;\n    }\n  }, {\n    key: \"_updateAutoHighlight\",\n    value: function _updateAutoHighlight(info) {\n      if (info.sourceLayer) {\n        info.sourceLayer.updateAutoHighlight(info);\n      }\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this = this;\n      return this.state.tileset.tiles.map(function (tile) {\n        var subLayerProps = _this.getSubLayerPropsByTile(tile);\n        if (!tile.isLoaded && !tile.content) {} else if (!tile.layers) {\n          var layers = _this.renderSubLayers(_objectSpread(_objectSpread({}, _this.props), {}, {\n            id: \"\".concat(_this.id, \"-\").concat(tile.id),\n            data: tile.content,\n            _offset: 0,\n            tile: tile\n          }));\n          tile.layers = flatten(layers, Boolean).map(function (layer) {\n            return layer.clone(_objectSpread({\n              tile: tile\n            }, subLayerProps));\n          });\n        } else if (subLayerProps && tile.layers[0] && Object.keys(subLayerProps).some(function (propName) {\n          return tile.layers[0].props[propName] !== subLayerProps[propName];\n        })) {\n          tile.layers = tile.layers.map(function (layer) {\n            return layer.clone(subLayerProps);\n          });\n        }\n        return tile.layers;\n      });\n    }\n  }, {\n    key: \"filterSubLayer\",\n    value: function filterSubLayer(_ref4) {\n      var layer = _ref4.layer,\n        cullRect = _ref4.cullRect;\n      var tile = layer.props.tile;\n      return this.state.tileset.isTileVisible(tile, cullRect);\n    }\n  }]);\n  return TileLayer;\n}(CompositeLayer);\nexport { TileLayer as default };\n_defineProperty(TileLayer, \"defaultProps\", defaultProps);\n_defineProperty(TileLayer, \"layerName\", 'TileLayer');","map":{"version":3,"names":["CompositeLayer","_flatten","flatten","GeoJsonLayer","Tileset2D","STRATEGY_DEFAULT","urlType","getURLFromTemplate","defaultProps","TilesetClass","data","type","value","dataComparator","equals","renderSubLayers","props","compare","getTileData","optional","onViewportLoad","onTileLoad","tile","onTileUnload","onTileError","err","console","error","extent","tileSize","maxZoom","minZoom","maxCacheSize","maxCacheByteSize","refinementStrategy","zRange","maxRequests","zoomOffset","TileLayer","_CompositeLayer","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","initializeState","state","tileset","isLoaded","finalizeState","_this$state","_this$state$tileset","finalize","get","_this$state2","_this$state2$tileset","selectedTiles","every","layers","layer","shouldUpdateState","_ref","changeFlags","somethingChanged","updateState","_ref2","propsChanged","propsOrDataChanged","updateTriggersChanged","dataChanged","all","_getTilesetOptions","setState","setOptions","reloadAll","tiles","forEach","_updateTileset","_this$props","bind","_onTileLoad","_onTileError","_onTileUnload","_this$props2","modelMatrix","frameNumber","update","context","viewport","loadingStateChanged","tilesetChanged","_onViewportLoad","setNeedsUpdate","_this$props3","fetch","signal","url","Array","isArray","propName","getSubLayerPropsByTile","getPickingInfo","_ref3","info","sourceLayer","picked","_updateAutoHighlight","updateAutoHighlight","renderLayers","_this","map","subLayerProps","content","_objectSpread","id","concat","_offset","Boolean","clone","Object","keys","some","filterSubLayer","_ref4","cullRect","isTileVisible","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/geo-layers/src/tile-layer/tile-layer.ts"],"sourcesContent":["import {\n  CompositeLayer,\n  CompositeLayerProps,\n  Layer,\n  LayerProps,\n  UpdateParameters,\n  PickingInfo,\n  GetPickingInfoParams,\n  DefaultProps,\n  FilterContext,\n  _flatten as flatten\n} from '@deck.gl/core';\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {LayersList} from '@deck.gl/core';\nimport Tile2DHeader from './tile-2d-header';\n\nimport Tileset2D, {RefinementStrategy, STRATEGY_DEFAULT, Tileset2DProps} from './tileset-2d';\nimport {TileLoadProps, ZRange} from './types';\nimport {urlType, getURLFromTemplate} from './utils';\n\nconst defaultProps: DefaultProps<TileLayerProps> = {\n  TilesetClass: Tileset2D,\n  data: {type: 'data', value: []},\n  dataComparator: urlType.equals,\n  renderSubLayers: {type: 'function', value: props => new GeoJsonLayer(props), compare: false},\n  getTileData: {type: 'function', optional: true, value: null, compare: false},\n  // TODO - change to onViewportLoad to align with Tile3DLayer\n  onViewportLoad: {type: 'function', optional: true, value: null, compare: false},\n  onTileLoad: {type: 'function', value: tile => {}, compare: false},\n  onTileUnload: {type: 'function', value: tile => {}, compare: false},\n  // eslint-disable-next-line\n  onTileError: {type: 'function', value: err => console.error(err), compare: false},\n  extent: {type: 'array', optional: true, value: null, compare: true},\n  tileSize: 512,\n  maxZoom: null,\n  minZoom: 0,\n  maxCacheSize: null,\n  maxCacheByteSize: null,\n  refinementStrategy: STRATEGY_DEFAULT,\n  zRange: null,\n  maxRequests: 6,\n  zoomOffset: 0\n};\n\n/** All props supported by the TileLayer */\nexport type TileLayerProps<DataT = any> = CompositeLayerProps<any> & _TileLayerProps<DataT>;\n\n/** Props added by the TileLayer */\ntype _TileLayerProps<DataT> = {\n  /**\n   * Optionally implement a custom indexing scheme.\n   */\n  TilesetClass: typeof Tileset2D;\n  /**\n   * Renders one or an array of Layer instances.\n   */\n  renderSubLayers?: (\n    props: TileLayerProps<DataT> & {\n      id: string;\n      data: DataT;\n      _offset: number;\n      tile: Tile2DHeader<DataT>;\n    }\n  ) => Layer | null | LayersList;\n  /**\n   * If supplied, `getTileData` is called to retrieve the data of each tile.\n   */\n  getTileData?: ((props: TileLoadProps) => Promise<DataT> | DataT) | null;\n\n  /** Called when all tiles in the current viewport are loaded. */\n  onViewportLoad?: ((tiles: Tile2DHeader<DataT>[]) => void) | null;\n\n  /** Called when a tile successfully loads. */\n  onTileLoad?: (tile: Tile2DHeader<DataT>) => void;\n\n  /** Called when a tile is cleared from cache. */\n  onTileUnload?: (tile: Tile2DHeader<DataT>) => void;\n\n  /** Called when a tile failed to load. */\n  onTileError?: (err: any) => void;\n\n  /** The bounding box of the layer's data. */\n  extent?: number[] | null;\n\n  /** The pixel dimension of the tiles, usually a power of 2. */\n  tileSize?: number;\n\n  /** The max zoom level of the layer's data.\n   * @default null\n   */\n  maxZoom?: number | null;\n\n  /** The min zoom level of the layer's data.\n   * @default 0\n   */\n  minZoom?: number | null;\n\n  /** The maximum number of tiles that can be cached. */\n  maxCacheSize?: number | null;\n\n  /**\n   * The maximum memory used for caching tiles.\n   *\n   * @default null\n   */\n  maxCacheByteSize?: number | null;\n\n  /**\n   * How the tile layer refines the visibility of tiles.\n   *\n   * @default 'best-available'\n   */\n  refinementStrategy?: RefinementStrategy;\n\n  /** Range of minimum and maximum heights in the tile. */\n  zRange?: ZRange | null;\n\n  /**\n   * The maximum number of concurrent getTileData calls.\n   *\n   * @default 6\n   */\n  maxRequests?: number;\n\n  /**\n   * This offset changes the zoom level at which the tiles are fetched.\n   *\n   * Needs to be an integer.\n   *\n   * @default 0\n   */\n  zoomOffset?: number;\n};\n\nexport type TiledPickingInfo<DataT = any> = PickingInfo & {\n  tile?: Tile2DHeader<DataT>;\n};\n\n/**\n * The TileLayer is a composite layer that makes it possible to visualize very large datasets.\n *\n * Instead of fetching the entire dataset, it only loads and renders what's visible in the current viewport.\n */\nexport default class TileLayer<DataT = any, ExtraPropsT = {}> extends CompositeLayer<\n  ExtraPropsT & Required<_TileLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps as any;\n  static layerName = 'TileLayer';\n\n  initializeState() {\n    this.state = {\n      tileset: null,\n      isLoaded: false\n    };\n  }\n\n  finalizeState() {\n    this.state?.tileset?.finalize();\n  }\n\n  get isLoaded(): boolean {\n    return this.state?.tileset?.selectedTiles.every(\n      tile => tile.isLoaded && tile.layers && tile.layers.every(layer => layer.isLoaded)\n    );\n  }\n\n  shouldUpdateState({changeFlags}): boolean {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({changeFlags}: UpdateParameters<this>) {\n    let {tileset} = this.state;\n    const propsChanged = changeFlags.propsOrDataChanged || changeFlags.updateTriggersChanged;\n    const dataChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData));\n\n    if (!tileset) {\n      tileset = new this.props.TilesetClass(this._getTilesetOptions());\n      this.setState({tileset});\n    } else if (propsChanged) {\n      tileset.setOptions(this._getTilesetOptions());\n\n      if (dataChanged) {\n        // reload all tiles\n        // use cached layers until new content is loaded\n        tileset.reloadAll();\n      } else {\n        // some render options changed, regenerate sub layers now\n        this.state.tileset.tiles.forEach(tile => {\n          tile.layers = null;\n        });\n      }\n    }\n\n    this._updateTileset();\n  }\n\n  _getTilesetOptions(): Tileset2DProps {\n    const {\n      tileSize,\n      maxCacheSize,\n      maxCacheByteSize,\n      refinementStrategy,\n      extent,\n      maxZoom,\n      minZoom,\n      maxRequests,\n      zoomOffset\n    } = this.props;\n\n    return {\n      maxCacheSize,\n      maxCacheByteSize,\n      maxZoom,\n      minZoom,\n      tileSize,\n      refinementStrategy,\n      extent,\n      maxRequests,\n      zoomOffset,\n\n      getTileData: this.getTileData.bind(this),\n      onTileLoad: this._onTileLoad.bind(this),\n      onTileError: this._onTileError.bind(this),\n      onTileUnload: this._onTileUnload.bind(this)\n    };\n  }\n\n  private _updateTileset(): void {\n    const {tileset} = this.state;\n    const {zRange, modelMatrix} = this.props;\n    const frameNumber = tileset.update(this.context.viewport, {zRange, modelMatrix});\n    const {isLoaded} = tileset;\n\n    const loadingStateChanged = this.state.isLoaded !== isLoaded;\n    const tilesetChanged = this.state.frameNumber !== frameNumber;\n\n    if (isLoaded && (loadingStateChanged || tilesetChanged)) {\n      this._onViewportLoad();\n    }\n\n    if (tilesetChanged) {\n      // Save the tileset frame number - trigger a rerender\n      this.setState({frameNumber});\n    }\n    // Save the loaded state - should not trigger a rerender\n    this.state.isLoaded = isLoaded;\n  }\n\n  _onViewportLoad(): void {\n    const {tileset} = this.state;\n    const {onViewportLoad} = this.props;\n\n    if (onViewportLoad) {\n      onViewportLoad(tileset.selectedTiles);\n    }\n  }\n\n  _onTileLoad(tile: Tile2DHeader<DataT>): void {\n    this.props.onTileLoad(tile);\n    tile.layers = null;\n\n    this.setNeedsUpdate();\n  }\n\n  _onTileError(error: any, tile: Tile2DHeader<DataT>) {\n    this.props.onTileError(error);\n    tile.layers = null;\n\n    this.setNeedsUpdate();\n  }\n\n  _onTileUnload(tile: Tile2DHeader<DataT>) {\n    this.props.onTileUnload(tile);\n  }\n\n  // Methods for subclass to override\n\n  getTileData(tile: TileLoadProps): Promise<DataT> | DataT | null {\n    const {data, getTileData, fetch} = this.props;\n    const {signal} = tile;\n\n    tile.url =\n      typeof data === 'string' || Array.isArray(data) ? getURLFromTemplate(data, tile) : null;\n\n    if (getTileData) {\n      return getTileData(tile);\n    }\n    if (fetch && tile.url) {\n      return fetch(tile.url, {propName: 'data', layer: this, signal});\n    }\n    return null;\n  }\n\n  renderSubLayers(\n    props: TileLayer['props'] & {\n      id: string;\n      data: DataT;\n      _offset: number;\n      tile: Tile2DHeader<DataT>;\n    }\n  ): Layer | null | LayersList {\n    return this.props.renderSubLayers(props);\n  }\n\n  getSubLayerPropsByTile(tile: Tile2DHeader): Partial<LayerProps> | null {\n    return null;\n  }\n\n  getPickingInfo({info, sourceLayer}: GetPickingInfoParams): TiledPickingInfo<DataT> {\n    if (info.picked) {\n      (info as any).tile = (sourceLayer as any).props.tile;\n    }\n    return info;\n  }\n\n  protected _updateAutoHighlight(info: PickingInfo): void {\n    if (info.sourceLayer) {\n      info.sourceLayer.updateAutoHighlight(info);\n    }\n  }\n\n  renderLayers(): Layer | null | LayersList {\n    return this.state.tileset.tiles.map((tile: Tile2DHeader) => {\n      const subLayerProps = this.getSubLayerPropsByTile(tile);\n      // cache the rendered layer in the tile\n      if (!tile.isLoaded && !tile.content) {\n        // nothing to show\n      } else if (!tile.layers) {\n        const layers = this.renderSubLayers({\n          ...this.props,\n          id: `${this.id}-${tile.id}`,\n          data: tile.content,\n          _offset: 0,\n          tile\n        });\n        tile.layers = (flatten(layers, Boolean) as Layer<{tile?: Tile2DHeader}>[]).map(layer =>\n          layer.clone({\n            tile,\n            ...subLayerProps\n          })\n        );\n      } else if (\n        subLayerProps &&\n        tile.layers[0] &&\n        Object.keys(subLayerProps).some(\n          propName => tile.layers![0].props[propName] !== subLayerProps[propName]\n        )\n      ) {\n        tile.layers = tile.layers.map(layer => layer.clone(subLayerProps));\n      }\n      return tile.layers;\n    });\n  }\n\n  filterSubLayer({layer, cullRect}: FilterContext) {\n    const {tile} = (layer as Layer<{tile: Tile2DHeader}>).props;\n    return this.state.tileset.isTileVisible(tile, cullRect);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}