{"ast":null,"code":"/**\n * IE11-safe version of getCanonicalLocales since it's ES2016\n * @param locales locales\n */\nexport function getCanonicalLocales(locales) {\n  // IE11\n  var getCanonicalLocales = Intl.getCanonicalLocales;\n  if (typeof getCanonicalLocales === 'function') {\n    return getCanonicalLocales(locales);\n  }\n  // NOTE: we must NOT call `supportedLocalesOf` of a formatjs polyfill, or their implementation\n  // will even eventually call this method recursively. Here we use `Intl.DateTimeFormat` since it\n  // is not polyfilled by `@formatjs`.\n  // TODO: Fix TypeScript type def for this bc undefined is just fine\n  return Intl.DateTimeFormat.supportedLocalesOf(locales);\n}","map":{"version":3,"names":["getCanonicalLocales","locales","Intl","DateTimeFormat","supportedLocalesOf"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@formatjs/intl-utils/src/get-canonical-locales.ts"],"sourcesContent":["/**\n * IE11-safe version of getCanonicalLocales since it's ES2016\n * @param locales locales\n */\nexport function getCanonicalLocales(locales?: string | string[]): string[] {\n  // IE11\n  const {getCanonicalLocales} = Intl as any;\n  if (typeof getCanonicalLocales === 'function') {\n    return getCanonicalLocales(locales) as string[];\n  }\n  // NOTE: we must NOT call `supportedLocalesOf` of a formatjs polyfill, or their implementation\n  // will even eventually call this method recursively. Here we use `Intl.DateTimeFormat` since it\n  // is not polyfilled by `@formatjs`.\n  // TODO: Fix TypeScript type def for this bc undefined is just fine\n  return Intl.DateTimeFormat.supportedLocalesOf(locales!);\n}\n"],"mappings":"AAAA;;;;AAIA,OAAM,SAAUA,mBAAmBA,CAACC,OAA2B;EAC7D;EACO,IAAAD,mBAAA,GAAAE,IAAA,CAAAF,mBAAmB;EAC1B,IAAI,OAAOA,mBAAmB,KAAK,UAAU,EAAE;IAC7C,OAAOA,mBAAmB,CAACC,OAAO,CAAa;;EAEjD;EACA;EACA;EACA;EACA,OAAOC,IAAI,CAACC,cAAc,CAACC,kBAAkB,CAACH,OAAQ,CAAC;AACzD"},"metadata":{},"sourceType":"module","externalDependencies":[]}