{"ast":null,"code":"import _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { LayerExtension } from '@deck.gl/core';\nimport { shaderModule, shaderModule64 } from './shader-module';\nimport * as aggregator from './aggregator';\nimport { readPixelsToArray, clear } from '@luma.gl/core';\nvar defaultProps = {\n  getFilterValue: {\n    type: 'accessor',\n    value: 0\n  },\n  onFilteredItemsChange: {\n    type: 'function',\n    value: null,\n    compare: false\n  },\n  filterEnabled: true,\n  filterRange: [-1, 1],\n  filterSoftRange: null,\n  filterTransformSize: true,\n  filterTransformColor: true\n};\nvar DATA_TYPE_FROM_SIZE = {\n  1: 'float',\n  2: 'vec2',\n  3: 'vec3',\n  4: 'vec4'\n};\nvar DataFilterExtension = /*#__PURE__*/function (_LayerExtension) {\n  _inherits(DataFilterExtension, _LayerExtension);\n  var _super = _createSuper(DataFilterExtension);\n  function DataFilterExtension() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$filterSize = _ref.filterSize,\n      filterSize = _ref$filterSize === void 0 ? 1 : _ref$filterSize,\n      _ref$fp = _ref.fp64,\n      fp64 = _ref$fp === void 0 ? false : _ref$fp,\n      _ref$countItems = _ref.countItems,\n      countItems = _ref$countItems === void 0 ? false : _ref$countItems;\n    _classCallCheck(this, DataFilterExtension);\n    if (!DATA_TYPE_FROM_SIZE[filterSize]) {\n      throw new Error('filterSize out of range');\n    }\n    return _super.call(this, {\n      filterSize: filterSize,\n      fp64: fp64,\n      countItems: countItems\n    });\n  }\n  _createClass(DataFilterExtension, [{\n    key: \"getShaders\",\n    value: function getShaders(extension) {\n      var _extension$opts = extension.opts,\n        filterSize = _extension$opts.filterSize,\n        fp64 = _extension$opts.fp64;\n      return {\n        modules: [fp64 ? shaderModule64 : shaderModule],\n        defines: {\n          DATAFILTER_TYPE: DATA_TYPE_FROM_SIZE[filterSize],\n          DATAFILTER_DOUBLE: Boolean(fp64)\n        }\n      };\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState(context, extension) {\n      var attributeManager = this.getAttributeManager();\n      if (attributeManager) {\n        attributeManager.add({\n          filterValues: {\n            size: extension.opts.filterSize,\n            type: extension.opts.fp64 ? 5130 : 5126,\n            accessor: 'getFilterValue',\n            shaderAttributes: {\n              filterValues: {\n                divisor: 0\n              },\n              instanceFilterValues: {\n                divisor: 1\n              }\n            }\n          }\n        });\n      }\n      var gl = this.context.gl;\n      if (attributeManager && extension.opts.countItems) {\n        var useFloatTarget = aggregator.supportsFloatTarget(gl);\n        attributeManager.add({\n          filterIndices: {\n            size: useFloatTarget ? 1 : 2,\n            vertexOffset: 1,\n            type: 5121,\n            normalized: true,\n            accessor: function accessor(object, _ref2) {\n              var index = _ref2.index;\n              var i = object && object.__source ? object.__source.index : index;\n              return useFloatTarget ? (i + 1) % 255 : [(i + 1) % 255, Math.floor(i / 255) % 255];\n            },\n            shaderAttributes: {\n              filterPrevIndices: {\n                vertexOffset: 0\n              },\n              filterIndices: {\n                vertexOffset: 1\n              }\n            }\n          }\n        });\n        var filterFBO = aggregator.getFramebuffer(gl, useFloatTarget);\n        var filterModel = aggregator.getModel(gl, extension.getShaders.call(this, extension), useFloatTarget);\n        this.setState({\n          filterFBO: filterFBO,\n          filterModel: filterModel\n        });\n      }\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref3) {\n      var props = _ref3.props,\n        oldProps = _ref3.oldProps;\n      if (this.state.filterModel) {\n        var attributeManager = this.getAttributeManager();\n        var filterNeedsUpdate = attributeManager.attributes.filterValues.needsUpdate() || props.filterEnabled !== oldProps.filterEnabled || props.filterRange !== oldProps.filterRange || props.filterSoftRange !== oldProps.filterSoftRange;\n        if (filterNeedsUpdate) {\n          this.setState({\n            filterNeedsUpdate: filterNeedsUpdate\n          });\n        }\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(params, extension) {\n      var _this$state = this.state,\n        filterFBO = _this$state.filterFBO,\n        filterModel = _this$state.filterModel,\n        filterNeedsUpdate = _this$state.filterNeedsUpdate;\n      var onFilteredItemsChange = this.props.onFilteredItemsChange;\n      if (filterNeedsUpdate && onFilteredItemsChange && filterModel) {\n        var _this$getAttributeMan = this.getAttributeManager(),\n          _this$getAttributeMan2 = _this$getAttributeMan.attributes,\n          filterValues = _this$getAttributeMan2.filterValues,\n          filterIndices = _this$getAttributeMan2.filterIndices;\n        filterModel.setVertexCount(this.getNumInstances());\n        var gl = this.context.gl;\n        clear(gl, {\n          framebuffer: filterFBO,\n          color: [0, 0, 0, 0]\n        });\n        filterModel.updateModuleSettings(params.moduleParameters).setAttributes(_objectSpread(_objectSpread({}, filterValues.getShaderAttributes()), filterIndices && filterIndices.getShaderAttributes())).draw({\n          framebuffer: filterFBO,\n          parameters: _objectSpread(_objectSpread({}, aggregator.parameters), {}, {\n            viewport: [0, 0, filterFBO.width, filterFBO.height]\n          })\n        });\n        var color = readPixelsToArray(filterFBO);\n        var count = 0;\n        for (var i = 0; i < color.length; i++) {\n          count += color[i];\n        }\n        onFilteredItemsChange({\n          id: this.id,\n          count: count\n        });\n        this.state.filterNeedsUpdate = false;\n      }\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      var _this$state2 = this.state,\n        filterFBO = _this$state2.filterFBO,\n        filterModel = _this$state2.filterModel;\n      if (filterFBO) {\n        filterFBO.color.delete();\n        filterFBO.delete();\n        filterModel.delete();\n      }\n    }\n  }]);\n  return DataFilterExtension;\n}(LayerExtension);\nexport { DataFilterExtension as default };\n_defineProperty(DataFilterExtension, \"defaultProps\", defaultProps);\n_defineProperty(DataFilterExtension, \"extensionName\", 'DataFilterExtension');","map":{"version":3,"names":["LayerExtension","shaderModule","shaderModule64","aggregator","readPixelsToArray","clear","defaultProps","getFilterValue","type","value","onFilteredItemsChange","compare","filterEnabled","filterRange","filterSoftRange","filterTransformSize","filterTransformColor","DATA_TYPE_FROM_SIZE","DataFilterExtension","_LayerExtension","_inherits","_super","_createSuper","_ref","arguments","length","undefined","_ref$filterSize","filterSize","_ref$fp","fp64","_ref$countItems","countItems","_classCallCheck","Error","call","_createClass","key","getShaders","extension","_extension$opts","opts","modules","defines","DATAFILTER_TYPE","DATAFILTER_DOUBLE","Boolean","initializeState","context","attributeManager","getAttributeManager","add","filterValues","size","accessor","shaderAttributes","divisor","instanceFilterValues","gl","useFloatTarget","supportsFloatTarget","filterIndices","vertexOffset","normalized","object","_ref2","index","i","__source","Math","floor","filterPrevIndices","filterFBO","getFramebuffer","filterModel","getModel","setState","updateState","_ref3","props","oldProps","state","filterNeedsUpdate","attributes","needsUpdate","draw","params","_this$state","_this$getAttributeMan","_this$getAttributeMan2","setVertexCount","getNumInstances","framebuffer","color","updateModuleSettings","moduleParameters","setAttributes","_objectSpread","getShaderAttributes","parameters","viewport","width","height","count","id","finalizeState","_this$state2","delete","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/extensions/src/data-filter/data-filter.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LayerExtension} from '@deck.gl/core';\nimport {shaderModule, shaderModule64} from './shader-module';\nimport * as aggregator from './aggregator';\nimport {readPixelsToArray, clear} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\n\nimport type {Layer, LayerContext, Accessor, UpdateParameters} from '@deck.gl/core';\n\nconst defaultProps = {\n  getFilterValue: {type: 'accessor', value: 0},\n  onFilteredItemsChange: {type: 'function', value: null, compare: false},\n\n  filterEnabled: true,\n  filterRange: [-1, 1],\n  filterSoftRange: null,\n  filterTransformSize: true,\n  filterTransformColor: true\n};\n\nexport type DataFilterExtensionProps<DataT = any> = {\n  /**\n   * Accessor to retrieve the value for each object that it will be filtered by.\n   * Returns either a number (if `filterSize: 1`) or an array of numbers.\n   */\n  getFilterValue?: Accessor<DataT, number | number[]>;\n  /**\n   * Enable/disable the data filter. If the data filter is disabled, all objects are rendered.\n   * @default true\n   */\n  filterEnabled?: boolean;\n  /**\n   * The [min, max] bounds which defines whether an object should be rendered.\n   * If an object's filtered value is within the bounds, the object will be rendered; otherwise it will be hidden.\n   * @default [-1, 1]\n   */\n  filterRange?: [number, number] | [number, number][];\n  /**\n   * If specified, objects will be faded in/out instead of abruptly shown/hidden.\n   * When the filtered value is outside of the bounds defined by `filterSoftRange` but still within the bounds defined by `filterRange`, the object will be rendered as \"faded.\"\n   * @default null\n   */\n  filterSoftRange?: [number, number] | [number, number][] | null;\n  /**\n   * When an object is \"faded\", manipulate its size so that it appears smaller or thinner. Only works if `filterSoftRange` is specified.\n   * @default true\n   */\n  filterTransformSize?: boolean;\n  /**\n   * When an object is \"faded\", manipulate its opacity so that it appears more translucent. Only works if `filterSoftRange` is specified.\n   * @default true\n   */\n  filterTransformColor?: boolean;\n  /**\n   * Only called if the `countItems` option is enabled.\n   */\n  onFilteredItemsChange?: (evt: {\n    /** The id of the source layer. */\n    id: string;\n    /** The number of data objects that pass the filter. */\n    count: number;\n  }) => void;\n};\n\ntype DataFilterExtensionOptions = {\n  /**\n   * The size of the filter (number of columns to filter by). The data filter can show/hide data based on 1-4 numeric properties of each object.\n   * @default 1\n   */\n  filterSize: number;\n  /**\n   * Use 64-bit precision instead of 32-bit.\n   * @default false\n   */\n  fp64: boolean;\n  /**\n   * If `true`, reports the number of filtered objects with the `onFilteredItemsChange` callback.\n   * @default `false`.\n   */\n  countItems: boolean;\n};\n\nconst DATA_TYPE_FROM_SIZE = {\n  1: 'float',\n  2: 'vec2',\n  3: 'vec3',\n  4: 'vec4'\n};\n\n/** Adds GPU-based data filtering functionalities to layers. It allows the layer to show/hide objects based on user-defined properties. */\nexport default class DataFilterExtension extends LayerExtension<DataFilterExtensionOptions> {\n  static defaultProps = defaultProps;\n  static extensionName = 'DataFilterExtension';\n\n  constructor({\n    filterSize = 1,\n    fp64 = false,\n    countItems = false\n  }: Partial<DataFilterExtensionOptions> = {}) {\n    if (!DATA_TYPE_FROM_SIZE[filterSize]) {\n      throw new Error('filterSize out of range');\n    }\n\n    super({filterSize, fp64, countItems});\n  }\n\n  getShaders(this: Layer<DataFilterExtensionProps>, extension: this): any {\n    const {filterSize, fp64} = extension.opts;\n\n    return {\n      modules: [fp64 ? shaderModule64 : shaderModule],\n      defines: {\n        DATAFILTER_TYPE: DATA_TYPE_FROM_SIZE[filterSize],\n        DATAFILTER_DOUBLE: Boolean(fp64)\n      }\n    };\n  }\n\n  initializeState(this: Layer<DataFilterExtensionProps>, context: LayerContext, extension: this) {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.add({\n        filterValues: {\n          size: extension.opts.filterSize,\n          type: extension.opts.fp64 ? GL.DOUBLE : GL.FLOAT,\n          accessor: 'getFilterValue',\n          shaderAttributes: {\n            filterValues: {\n              divisor: 0\n            },\n            instanceFilterValues: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n\n    const {gl} = this.context;\n    if (attributeManager && extension.opts.countItems) {\n      const useFloatTarget = aggregator.supportsFloatTarget(gl);\n      // This attribute is needed for variable-width data, e.g. Path, SolidPolygon, Text\n      // The vertex shader checks if a vertex has the same \"index\" as the previous vertex\n      // so that we only write one count cross multiple vertices of the same object\n      attributeManager.add({\n        filterIndices: {\n          size: useFloatTarget ? 1 : 2,\n          vertexOffset: 1,\n          type: GL.UNSIGNED_BYTE,\n          normalized: true,\n          accessor: (object, {index}) => {\n            const i = object && object.__source ? object.__source.index : index;\n            return useFloatTarget ? (i + 1) % 255 : [(i + 1) % 255, Math.floor(i / 255) % 255];\n          },\n          shaderAttributes: {\n            filterPrevIndices: {\n              vertexOffset: 0\n            },\n            filterIndices: {\n              vertexOffset: 1\n            }\n          }\n        }\n      });\n\n      const filterFBO = aggregator.getFramebuffer(gl, useFloatTarget);\n      const filterModel = aggregator.getModel(\n        gl,\n        extension.getShaders.call(this, extension),\n        useFloatTarget\n      );\n      this.setState({filterFBO, filterModel});\n    }\n  }\n\n  updateState(\n    this: Layer<DataFilterExtensionProps>,\n    {props, oldProps}: UpdateParameters<Layer<DataFilterExtensionProps>>\n  ) {\n    if (this.state.filterModel) {\n      const attributeManager = this.getAttributeManager();\n      const filterNeedsUpdate =\n        // attributeManager must be defined for filterModel to be set\n        attributeManager!.attributes.filterValues.needsUpdate() ||\n        props.filterEnabled !== oldProps.filterEnabled ||\n        props.filterRange !== oldProps.filterRange ||\n        props.filterSoftRange !== oldProps.filterSoftRange;\n      if (filterNeedsUpdate) {\n        this.setState({filterNeedsUpdate});\n      }\n    }\n  }\n\n  draw(this: Layer<DataFilterExtensionProps>, params: any, extension: this) {\n    const {filterFBO, filterModel, filterNeedsUpdate} = this.state;\n    const {onFilteredItemsChange} = this.props;\n    if (filterNeedsUpdate && onFilteredItemsChange && filterModel) {\n      const {\n        attributes: {filterValues, filterIndices}\n      } = this.getAttributeManager()!;\n      filterModel.setVertexCount(this.getNumInstances());\n\n      const {gl} = this.context;\n      clear(gl, {framebuffer: filterFBO, color: [0, 0, 0, 0]});\n\n      filterModel\n        .updateModuleSettings(params.moduleParameters)\n        .setAttributes({\n          ...filterValues.getShaderAttributes(),\n          ...(filterIndices && filterIndices.getShaderAttributes())\n        })\n        .draw({\n          framebuffer: filterFBO,\n          parameters: {\n            ...aggregator.parameters,\n            viewport: [0, 0, filterFBO.width, filterFBO.height]\n          }\n        });\n      const color = readPixelsToArray(filterFBO);\n      let count = 0;\n      for (let i = 0; i < color.length; i++) {\n        count += color[i];\n      }\n      onFilteredItemsChange({id: this.id, count});\n\n      this.state.filterNeedsUpdate = false;\n    }\n  }\n\n  finalizeState(this: Layer<DataFilterExtensionProps>) {\n    const {filterFBO, filterModel} = this.state;\n    if (filterFBO) {\n      filterFBO.color.delete();\n      filterFBO.delete();\n      filterModel.delete();\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}