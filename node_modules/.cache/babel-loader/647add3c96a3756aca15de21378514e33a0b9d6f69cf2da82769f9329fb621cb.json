{"ast":null,"code":"import _defineProperty2 from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Buffer, Transform, Framebuffer, Texture2D, readPixelsToArray } from '@luma.gl/core';\nimport { padBuffer, getAttributeTypeFromSize, getSourceBufferAttribute, getAttributeBufferLength, cycleBuffers } from '../lib/attribute/attribute-transition-utils';\nimport Attribute from '../lib/attribute/attribute';\nimport Transition from './transition';\nvar GPUSpringTransition = /*#__PURE__*/function () {\n  function GPUSpringTransition(_ref) {\n    var gl = _ref.gl,\n      attribute = _ref.attribute,\n      timeline = _ref.timeline;\n    _classCallCheck(this, GPUSpringTransition);\n    _defineProperty(this, \"gl\", void 0);\n    _defineProperty(this, \"type\", 'spring');\n    _defineProperty(this, \"attributeInTransition\", void 0);\n    _defineProperty(this, \"settings\", void 0);\n    _defineProperty(this, \"attribute\", void 0);\n    _defineProperty(this, \"transition\", void 0);\n    _defineProperty(this, \"currentStartIndices\", void 0);\n    _defineProperty(this, \"currentLength\", void 0);\n    _defineProperty(this, \"texture\", void 0);\n    _defineProperty(this, \"framebuffer\", void 0);\n    _defineProperty(this, \"transform\", void 0);\n    _defineProperty(this, \"buffers\", void 0);\n    this.gl = gl;\n    this.type = 'spring';\n    this.transition = new Transition(timeline);\n    this.attribute = attribute;\n    this.attributeInTransition = new Attribute(gl, _objectSpread(_objectSpread({}, attribute.settings), {}, {\n      normalized: false\n    }));\n    this.currentStartIndices = attribute.startIndices;\n    this.currentLength = 0;\n    this.texture = getTexture(gl);\n    this.framebuffer = getFramebuffer(gl, this.texture);\n    this.transform = getTransform(gl, attribute, this.framebuffer);\n    var bufferOpts = {\n      byteLength: 0,\n      usage: 35050\n    };\n    this.buffers = [new Buffer(gl, bufferOpts), new Buffer(gl, bufferOpts), new Buffer(gl, bufferOpts)];\n  }\n  _createClass(GPUSpringTransition, [{\n    key: \"inProgress\",\n    get: function get() {\n      return this.transition.inProgress;\n    }\n  }, {\n    key: \"start\",\n    value: function start(transitionSettings, numInstances) {\n      var gl = this.gl,\n        buffers = this.buffers,\n        attribute = this.attribute;\n      var padBufferOpts = {\n        numInstances: numInstances,\n        attribute: attribute,\n        fromLength: this.currentLength,\n        fromStartIndices: this.currentStartIndices,\n        getData: transitionSettings.enter\n      };\n      var _iterator = _createForOfIteratorHelper(buffers),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var buffer = _step.value;\n          padBuffer(_objectSpread({\n            buffer: buffer\n          }, padBufferOpts));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      this.settings = transitionSettings;\n      this.currentStartIndices = attribute.startIndices;\n      this.currentLength = getAttributeBufferLength(attribute, numInstances);\n      this.attributeInTransition.setData({\n        buffer: buffers[1],\n        value: attribute.value\n      });\n      this.transition.start(_objectSpread(_objectSpread({}, transitionSettings), {}, {\n        duration: Infinity\n      }));\n      this.transform.update({\n        elementCount: Math.floor(this.currentLength / attribute.size),\n        sourceBuffers: {\n          aTo: getSourceBufferAttribute(gl, attribute)\n        }\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var buffers = this.buffers,\n        transform = this.transform,\n        framebuffer = this.framebuffer,\n        transition = this.transition;\n      var updated = transition.update();\n      if (!updated) {\n        return false;\n      }\n      var settings = this.settings;\n      transform.update({\n        sourceBuffers: {\n          aPrev: buffers[0],\n          aCur: buffers[1]\n        },\n        feedbackBuffers: {\n          vNext: buffers[2]\n        }\n      });\n      transform.run({\n        framebuffer: framebuffer,\n        discard: false,\n        clearRenderTarget: true,\n        uniforms: {\n          stiffness: settings.stiffness,\n          damping: settings.damping\n        },\n        parameters: {\n          depthTest: false,\n          blend: true,\n          viewport: [0, 0, 1, 1],\n          blendFunc: [1, 1],\n          blendEquation: [32776, 32776]\n        }\n      });\n      cycleBuffers(buffers);\n      this.attributeInTransition.setData({\n        buffer: buffers[1],\n        value: this.attribute.value\n      });\n      var isTransitioning = readPixelsToArray(framebuffer)[0] > 0;\n      if (!isTransitioning) {\n        transition.end();\n      }\n      return true;\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this.transition.cancel();\n      this.transform.delete();\n      var _iterator2 = _createForOfIteratorHelper(this.buffers),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var buffer = _step2.value;\n          buffer.delete();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      this.buffers.length = 0;\n      this.texture.delete();\n      this.framebuffer.delete();\n    }\n  }]);\n  return GPUSpringTransition;\n}();\nexport { GPUSpringTransition as default };\nfunction getTransform(gl, attribute, framebuffer) {\n  var attributeType = getAttributeTypeFromSize(attribute.size);\n  return new Transform(gl, {\n    framebuffer: framebuffer,\n    vs: \"\\n#define SHADER_NAME spring-transition-vertex-shader\\n\\n#define EPSILON 0.00001\\n\\nuniform float stiffness;\\nuniform float damping;\\nattribute ATTRIBUTE_TYPE aPrev;\\nattribute ATTRIBUTE_TYPE aCur;\\nattribute ATTRIBUTE_TYPE aTo;\\nvarying ATTRIBUTE_TYPE vNext;\\nvarying float vIsTransitioningFlag;\\n\\nATTRIBUTE_TYPE getNextValue(ATTRIBUTE_TYPE cur, ATTRIBUTE_TYPE prev, ATTRIBUTE_TYPE dest) {\\n  ATTRIBUTE_TYPE velocity = cur - prev;\\n  ATTRIBUTE_TYPE delta = dest - cur;\\n  ATTRIBUTE_TYPE spring = delta * stiffness;\\n  ATTRIBUTE_TYPE damper = velocity * -1.0 * damping;\\n  return spring + damper + velocity + cur;\\n}\\n\\nvoid main(void) {\\n  bool isTransitioning = length(aCur - aPrev) > EPSILON || length(aTo - aCur) > EPSILON;\\n  vIsTransitioningFlag = isTransitioning ? 1.0 : 0.0;\\n\\n  vNext = getNextValue(aCur, aPrev, aTo);\\n  gl_Position = vec4(0, 0, 0, 1);\\n  gl_PointSize = 100.0;\\n}\\n\",\n    fs: \"\\n#define SHADER_NAME spring-transition-is-transitioning-fragment-shader\\n\\nvarying float vIsTransitioningFlag;\\n\\nvoid main(void) {\\n  if (vIsTransitioningFlag == 0.0) {\\n    discard;\\n  }\\n  gl_FragColor = vec4(1.0);\\n}\",\n    defines: {\n      ATTRIBUTE_TYPE: attributeType\n    },\n    varyings: ['vNext']\n  });\n}\nfunction getTexture(gl) {\n  return new Texture2D(gl, {\n    data: new Uint8Array(4),\n    format: 6408,\n    type: 5121,\n    border: 0,\n    mipmaps: false,\n    dataFormat: 6408,\n    width: 1,\n    height: 1\n  });\n}\nfunction getFramebuffer(gl, texture) {\n  return new Framebuffer(gl, {\n    id: 'spring-transition-is-transitioning-framebuffer',\n    width: 1,\n    height: 1,\n    attachments: _defineProperty2({}, 36064, texture)\n  });\n}","map":{"version":3,"names":["Buffer","Transform","Framebuffer","Texture2D","readPixelsToArray","padBuffer","getAttributeTypeFromSize","getSourceBufferAttribute","getAttributeBufferLength","cycleBuffers","Attribute","Transition","GPUSpringTransition","_ref","gl","attribute","timeline","_classCallCheck","_defineProperty","type","transition","attributeInTransition","_objectSpread","settings","normalized","currentStartIndices","startIndices","currentLength","texture","getTexture","framebuffer","getFramebuffer","transform","getTransform","bufferOpts","byteLength","usage","buffers","_createClass","key","get","inProgress","value","start","transitionSettings","numInstances","padBufferOpts","fromLength","fromStartIndices","getData","enter","_iterator","_createForOfIteratorHelper","_step","s","n","done","buffer","err","e","f","setData","duration","Infinity","update","elementCount","Math","floor","size","sourceBuffers","aTo","updated","aPrev","aCur","feedbackBuffers","vNext","run","discard","clearRenderTarget","uniforms","stiffness","damping","parameters","depthTest","blend","viewport","blendFunc","blendEquation","isTransitioning","end","cancel","delete","_iterator2","_step2","length","default","attributeType","vs","fs","defines","ATTRIBUTE_TYPE","varyings","data","Uint8Array","format","border","mipmaps","dataFormat","width","height","id","attachments","_defineProperty2"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/core/src/transitions/gpu-spring-transition.ts"],"sourcesContent":["/* eslint-disable complexity, max-statements, max-params */\nimport GL from '@luma.gl/constants';\nimport {Buffer, Transform, Framebuffer, Texture2D, readPixelsToArray} from '@luma.gl/core';\nimport {\n  padBuffer,\n  getAttributeTypeFromSize,\n  getSourceBufferAttribute,\n  getAttributeBufferLength,\n  cycleBuffers,\n  SpringTransitionSettings\n} from '../lib/attribute/attribute-transition-utils';\nimport Attribute from '../lib/attribute/attribute';\nimport Transition from './transition';\n\nimport type {Timeline, Transform as LumaTransform} from '@luma.gl/engine';\nimport type {\n  Buffer as LumaBuffer,\n  Framebuffer as LumaFramebuffer,\n  Texture2D as LumaTexture2D\n} from '@luma.gl/webgl';\nimport type {NumericArray} from '../types/types';\nimport type GPUTransition from './gpu-transition';\n\nexport default class GPUSpringTransition implements GPUTransition {\n  gl: WebGLRenderingContext;\n  type = 'spring';\n  attributeInTransition: Attribute;\n\n  private settings?: SpringTransitionSettings;\n  private attribute: Attribute;\n  private transition: Transition;\n  private currentStartIndices: NumericArray | null;\n  private currentLength: number;\n  private texture: LumaTexture2D;\n  private framebuffer: LumaFramebuffer;\n  private transform: LumaTransform;\n  private buffers: LumaBuffer[];\n\n  constructor({\n    gl,\n    attribute,\n    timeline\n  }: {\n    gl: WebGLRenderingContext;\n    attribute: Attribute;\n    timeline: Timeline;\n  }) {\n    this.gl = gl;\n    this.type = 'spring';\n    this.transition = new Transition(timeline);\n    this.attribute = attribute;\n    // this is the attribute we return during the transition - note: if it is a constant\n    // attribute, it will be converted and returned as a regular attribute\n    // `attribute.userData` is the original options passed when constructing the attribute.\n    // This ensures that we set the proper `doublePrecision` flag and shader attributes.\n    this.attributeInTransition = new Attribute(gl, {...attribute.settings, normalized: false});\n    this.currentStartIndices = attribute.startIndices;\n    // storing currentLength because this.buffer may be larger than the actual length we want to use\n    // this is because we only reallocate buffers when they grow, not when they shrink,\n    // due to performance costs\n    this.currentLength = 0;\n    this.texture = getTexture(gl);\n    this.framebuffer = getFramebuffer(gl, this.texture);\n    this.transform = getTransform(gl, attribute, this.framebuffer);\n    const bufferOpts = {\n      byteLength: 0,\n      usage: GL.DYNAMIC_COPY\n    };\n    this.buffers = [\n      new Buffer(gl, bufferOpts), // previous\n      new Buffer(gl, bufferOpts), // current\n      new Buffer(gl, bufferOpts) // next\n    ];\n  }\n\n  get inProgress(): boolean {\n    return this.transition.inProgress;\n  }\n\n  // this is called when an attribute's values have changed and\n  // we need to start animating towards the new values\n  // this also correctly resizes / pads the transform's buffers\n  // in case the attribute's buffer has changed in length or in\n  // startIndices\n  start(transitionSettings: SpringTransitionSettings, numInstances: number): void {\n    const {gl, buffers, attribute} = this;\n    const padBufferOpts = {\n      numInstances,\n      attribute,\n      fromLength: this.currentLength,\n      fromStartIndices: this.currentStartIndices,\n      getData: transitionSettings.enter\n    };\n\n    for (const buffer of buffers) {\n      padBuffer({buffer, ...padBufferOpts});\n    }\n\n    this.settings = transitionSettings;\n    this.currentStartIndices = attribute.startIndices;\n    this.currentLength = getAttributeBufferLength(attribute, numInstances);\n    this.attributeInTransition.setData({\n      buffer: buffers[1],\n      // Hack: Float64Array is required for double-precision attributes\n      // to generate correct shader attributes\n      value: attribute.value as NumericArray\n    });\n\n    // when an attribute changes values, a new transition is started. These\n    // are properties that we have to store on this.transition but can change\n    // when new transitions are started, so we have to keep them up-to-date.\n    // this.transition.start() takes the latest settings and updates them.\n    this.transition.start({...transitionSettings, duration: Infinity});\n\n    this.transform.update({\n      elementCount: Math.floor(this.currentLength / attribute.size),\n      sourceBuffers: {\n        aTo: getSourceBufferAttribute(gl, attribute)\n      }\n    });\n  }\n\n  update() {\n    const {buffers, transform, framebuffer, transition} = this;\n    const updated = transition.update();\n    if (!updated) {\n      return false;\n    }\n    const settings = this.settings as SpringTransitionSettings;\n\n    transform.update({\n      sourceBuffers: {\n        aPrev: buffers[0],\n        aCur: buffers[1]\n      },\n      feedbackBuffers: {\n        vNext: buffers[2]\n      }\n    });\n    transform.run({\n      framebuffer,\n      discard: false,\n      clearRenderTarget: true,\n      uniforms: {\n        stiffness: settings.stiffness,\n        damping: settings.damping\n      },\n      parameters: {\n        depthTest: false,\n        blend: true,\n        viewport: [0, 0, 1, 1],\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: [GL.MAX, GL.MAX]\n      }\n    });\n\n    cycleBuffers(buffers);\n    this.attributeInTransition.setData({\n      buffer: buffers[1],\n      // Hack: Float64Array is required for double-precision attributes\n      // to generate correct shader attributes\n      value: this.attribute.value as NumericArray\n    });\n\n    const isTransitioning = readPixelsToArray(framebuffer)[0] > 0;\n\n    if (!isTransitioning) {\n      transition.end();\n    }\n\n    return true;\n  }\n\n  cancel() {\n    this.transition.cancel();\n    this.transform.delete();\n    for (const buffer of this.buffers) {\n      buffer.delete();\n    }\n    this.buffers.length = 0;\n    this.texture.delete();\n    this.framebuffer.delete();\n  }\n}\n\nfunction getTransform(\n  gl: WebGLRenderingContext,\n  attribute: Attribute,\n  framebuffer: LumaFramebuffer\n): LumaTransform {\n  const attributeType = getAttributeTypeFromSize(attribute.size);\n  return new Transform(gl, {\n    framebuffer,\n    vs: `\n#define SHADER_NAME spring-transition-vertex-shader\n\n#define EPSILON 0.00001\n\nuniform float stiffness;\nuniform float damping;\nattribute ATTRIBUTE_TYPE aPrev;\nattribute ATTRIBUTE_TYPE aCur;\nattribute ATTRIBUTE_TYPE aTo;\nvarying ATTRIBUTE_TYPE vNext;\nvarying float vIsTransitioningFlag;\n\nATTRIBUTE_TYPE getNextValue(ATTRIBUTE_TYPE cur, ATTRIBUTE_TYPE prev, ATTRIBUTE_TYPE dest) {\n  ATTRIBUTE_TYPE velocity = cur - prev;\n  ATTRIBUTE_TYPE delta = dest - cur;\n  ATTRIBUTE_TYPE spring = delta * stiffness;\n  ATTRIBUTE_TYPE damper = velocity * -1.0 * damping;\n  return spring + damper + velocity + cur;\n}\n\nvoid main(void) {\n  bool isTransitioning = length(aCur - aPrev) > EPSILON || length(aTo - aCur) > EPSILON;\n  vIsTransitioningFlag = isTransitioning ? 1.0 : 0.0;\n\n  vNext = getNextValue(aCur, aPrev, aTo);\n  gl_Position = vec4(0, 0, 0, 1);\n  gl_PointSize = 100.0;\n}\n`,\n    fs: `\n#define SHADER_NAME spring-transition-is-transitioning-fragment-shader\n\nvarying float vIsTransitioningFlag;\n\nvoid main(void) {\n  if (vIsTransitioningFlag == 0.0) {\n    discard;\n  }\n  gl_FragColor = vec4(1.0);\n}`,\n    defines: {\n      ATTRIBUTE_TYPE: attributeType\n    },\n    varyings: ['vNext']\n  });\n}\n\nfunction getTexture(gl: WebGLRenderingContext): LumaTexture2D {\n  return new Texture2D(gl, {\n    data: new Uint8Array(4),\n    format: GL.RGBA,\n    type: GL.UNSIGNED_BYTE,\n    border: 0,\n    mipmaps: false,\n    dataFormat: GL.RGBA,\n    width: 1,\n    height: 1\n  });\n}\n\nfunction getFramebuffer(gl: WebGLRenderingContext, texture: LumaTexture2D): LumaFramebuffer {\n  return new Framebuffer(gl, {\n    id: 'spring-transition-is-transitioning-framebuffer',\n    width: 1,\n    height: 1,\n    attachments: {\n      [GL.COLOR_ATTACHMENT0]: texture\n    }\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}