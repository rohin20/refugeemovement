{"ast":null,"code":"import _slicedToArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { COORDINATE_SYSTEM } from '../../lib/constants';\nimport { getOffsetOrigin } from './viewport-uniforms';\nimport WebMercatorViewport from '../../viewports/web-mercator-viewport';\nimport * as vec4 from 'gl-matrix/vec4';\nimport * as vec3 from 'gl-matrix/vec3';\nimport { addMetersToLngLat } from '@math.gl/web-mercator';\nfunction lngLatZToWorldPosition(lngLatZ, viewport) {\n  var offsetMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var p = viewport.projectPosition(lngLatZ);\n  if (offsetMode && viewport instanceof WebMercatorViewport) {\n    var _lngLatZ = _slicedToArray(lngLatZ, 3),\n      longitude = _lngLatZ[0],\n      latitude = _lngLatZ[1],\n      _lngLatZ$ = _lngLatZ[2],\n      z = _lngLatZ$ === void 0 ? 0 : _lngLatZ$;\n    var distanceScales = viewport.getDistanceScales([longitude, latitude]);\n    p[2] = z * distanceScales.unitsPerMeter[2];\n  }\n  return p;\n}\nfunction normalizeParameters(opts) {\n  var viewport = opts.viewport,\n    modelMatrix = opts.modelMatrix,\n    coordinateOrigin = opts.coordinateOrigin;\n  var coordinateSystem = opts.coordinateSystem,\n    fromCoordinateSystem = opts.fromCoordinateSystem,\n    fromCoordinateOrigin = opts.fromCoordinateOrigin;\n  if (coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n    coordinateSystem = viewport.isGeospatial ? COORDINATE_SYSTEM.LNGLAT : COORDINATE_SYSTEM.CARTESIAN;\n  }\n  if (fromCoordinateSystem === undefined) {\n    fromCoordinateSystem = coordinateSystem;\n  }\n  if (fromCoordinateOrigin === undefined) {\n    fromCoordinateOrigin = coordinateOrigin;\n  }\n  return {\n    viewport: viewport,\n    coordinateSystem: coordinateSystem,\n    coordinateOrigin: coordinateOrigin,\n    modelMatrix: modelMatrix,\n    fromCoordinateSystem: fromCoordinateSystem,\n    fromCoordinateOrigin: fromCoordinateOrigin\n  };\n}\nexport function getWorldPosition(position, _ref) {\n  var viewport = _ref.viewport,\n    modelMatrix = _ref.modelMatrix,\n    coordinateSystem = _ref.coordinateSystem,\n    coordinateOrigin = _ref.coordinateOrigin,\n    offsetMode = _ref.offsetMode;\n  var _position = _slicedToArray(position, 3),\n    x = _position[0],\n    y = _position[1],\n    _position$ = _position[2],\n    z = _position$ === void 0 ? 0 : _position$;\n  if (modelMatrix) {\n    var _vec4$transformMat = vec4.transformMat4([], [x, y, z, 1.0], modelMatrix);\n    var _vec4$transformMat2 = _slicedToArray(_vec4$transformMat, 3);\n    x = _vec4$transformMat2[0];\n    y = _vec4$transformMat2[1];\n    z = _vec4$transformMat2[2];\n  }\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT:\n      return lngLatZToWorldPosition([x, y, z], viewport, offsetMode);\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n      return lngLatZToWorldPosition([x + coordinateOrigin[0], y + coordinateOrigin[1], z + (coordinateOrigin[2] || 0)], viewport, offsetMode);\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n      return lngLatZToWorldPosition(addMetersToLngLat(coordinateOrigin, [x, y, z]), viewport, offsetMode);\n    case COORDINATE_SYSTEM.CARTESIAN:\n    default:\n      return viewport.isGeospatial ? [x + coordinateOrigin[0], y + coordinateOrigin[1], z + coordinateOrigin[2]] : viewport.projectPosition([x, y, z]);\n  }\n}\nexport function projectPosition(position, params) {\n  var _normalizeParameters = normalizeParameters(params),\n    viewport = _normalizeParameters.viewport,\n    coordinateSystem = _normalizeParameters.coordinateSystem,\n    coordinateOrigin = _normalizeParameters.coordinateOrigin,\n    modelMatrix = _normalizeParameters.modelMatrix,\n    fromCoordinateSystem = _normalizeParameters.fromCoordinateSystem,\n    fromCoordinateOrigin = _normalizeParameters.fromCoordinateOrigin;\n  var _getOffsetOrigin = getOffsetOrigin(viewport, coordinateSystem, coordinateOrigin),\n    geospatialOrigin = _getOffsetOrigin.geospatialOrigin,\n    shaderCoordinateOrigin = _getOffsetOrigin.shaderCoordinateOrigin,\n    offsetMode = _getOffsetOrigin.offsetMode;\n  var worldPosition = getWorldPosition(position, {\n    viewport: viewport,\n    modelMatrix: modelMatrix,\n    coordinateSystem: fromCoordinateSystem,\n    coordinateOrigin: fromCoordinateOrigin,\n    offsetMode: offsetMode\n  });\n  if (offsetMode) {\n    var positionCommonSpace = viewport.projectPosition(geospatialOrigin || shaderCoordinateOrigin);\n    vec3.sub(worldPosition, worldPosition, positionCommonSpace);\n  }\n  return worldPosition;\n}","map":{"version":3,"names":["COORDINATE_SYSTEM","getOffsetOrigin","WebMercatorViewport","vec4","vec3","addMetersToLngLat","lngLatZToWorldPosition","lngLatZ","viewport","offsetMode","arguments","length","undefined","p","projectPosition","_lngLatZ","_slicedToArray","longitude","latitude","_lngLatZ$","z","distanceScales","getDistanceScales","unitsPerMeter","normalizeParameters","opts","modelMatrix","coordinateOrigin","coordinateSystem","fromCoordinateSystem","fromCoordinateOrigin","DEFAULT","isGeospatial","LNGLAT","CARTESIAN","getWorldPosition","position","_ref","_position","x","y","_position$","_vec4$transformMat","transformMat4","_vec4$transformMat2","LNGLAT_OFFSETS","METER_OFFSETS","params","_normalizeParameters","_getOffsetOrigin","geospatialOrigin","shaderCoordinateOrigin","worldPosition","positionCommonSpace","sub"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/core/src/shaderlib/project/project-functions.ts"],"sourcesContent":["/**\n * Projection utils\n * TODO: move to Viewport class?\n */\nimport {COORDINATE_SYSTEM} from '../../lib/constants';\nimport {getOffsetOrigin} from './viewport-uniforms';\nimport WebMercatorViewport from '../../viewports/web-mercator-viewport';\n\nimport * as vec4 from 'gl-matrix/vec4';\nimport * as vec3 from 'gl-matrix/vec3';\nimport {addMetersToLngLat} from '@math.gl/web-mercator';\n\nimport type {CoordinateSystem} from '../../lib/constants';\nimport type Viewport from '../../viewports/viewport';\nimport type {NumericArray} from '../../types/types';\n\n// In project.glsl, offset modes calculate z differently from LNG_LAT mode.\n// offset modes apply the y adjustment (unitsPerMeter2) when projecting z\n// LNG_LAT mode only use the linear scale.\nfunction lngLatZToWorldPosition(\n  lngLatZ: [number, number, number],\n  viewport: Viewport,\n  offsetMode: boolean = false\n): [number, number, number] {\n  const p = viewport.projectPosition(lngLatZ);\n\n  // TODO - avoid using instanceof\n  if (offsetMode && viewport instanceof WebMercatorViewport) {\n    const [longitude, latitude, z = 0] = lngLatZ;\n    const distanceScales = viewport.getDistanceScales([longitude, latitude]);\n    p[2] = z * distanceScales.unitsPerMeter[2];\n  }\n  return p;\n}\n\nfunction normalizeParameters(opts: {\n  viewport: Viewport;\n  coordinateSystem: CoordinateSystem;\n  coordinateOrigin: [number, number, number];\n  modelMatrix?: NumericArray | null;\n  fromCoordinateSystem?: CoordinateSystem;\n  fromCoordinateOrigin?: [number, number, number];\n}): {\n  viewport: Viewport;\n  coordinateSystem: CoordinateSystem;\n  coordinateOrigin: [number, number, number];\n  modelMatrix?: NumericArray | null;\n  fromCoordinateSystem: CoordinateSystem;\n  fromCoordinateOrigin: [number, number, number];\n} {\n  const {viewport, modelMatrix, coordinateOrigin} = opts;\n  let {coordinateSystem, fromCoordinateSystem, fromCoordinateOrigin} = opts;\n\n  if (coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n    coordinateSystem = viewport.isGeospatial\n      ? COORDINATE_SYSTEM.LNGLAT\n      : COORDINATE_SYSTEM.CARTESIAN;\n  }\n\n  if (fromCoordinateSystem === undefined) {\n    fromCoordinateSystem = coordinateSystem;\n  }\n  if (fromCoordinateOrigin === undefined) {\n    fromCoordinateOrigin = coordinateOrigin;\n  }\n\n  return {\n    viewport,\n    coordinateSystem,\n    coordinateOrigin,\n    modelMatrix,\n    fromCoordinateSystem,\n    fromCoordinateOrigin\n  };\n}\n\n/** Get the common space position from world coordinates in the given coordinate system */\nexport function getWorldPosition(\n  position: number[],\n  {\n    viewport,\n    modelMatrix,\n    coordinateSystem,\n    coordinateOrigin,\n    offsetMode\n  }: {\n    viewport: Viewport;\n    modelMatrix?: NumericArray | null;\n    coordinateSystem: CoordinateSystem;\n    coordinateOrigin: [number, number, number];\n    offsetMode?: boolean;\n  }\n): [number, number, number] {\n  let [x, y, z = 0] = position;\n\n  if (modelMatrix) {\n    [x, y, z] = vec4.transformMat4([], [x, y, z, 1.0], modelMatrix);\n  }\n\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT:\n      return lngLatZToWorldPosition([x, y, z], viewport, offsetMode);\n\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n      return lngLatZToWorldPosition(\n        [x + coordinateOrigin[0], y + coordinateOrigin[1], z + (coordinateOrigin[2] || 0)],\n        viewport,\n        offsetMode\n      );\n\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n      return lngLatZToWorldPosition(\n        addMetersToLngLat(coordinateOrigin, [x, y, z]) as [number, number, number],\n        viewport,\n        offsetMode\n      );\n\n    case COORDINATE_SYSTEM.CARTESIAN:\n    default:\n      return viewport.isGeospatial\n        ? [x + coordinateOrigin[0], y + coordinateOrigin[1], z + coordinateOrigin[2]]\n        : viewport.projectPosition([x, y, z]);\n  }\n}\n\n/**\n * Equivalent to project_position in project.glsl\n * projects a user supplied position to world position directly with or without\n * a reference coordinate system\n */\nexport function projectPosition(\n  position: number[],\n  params: {\n    /** The current viewport */\n    viewport: Viewport;\n    /** The reference coordinate system used to align world position */\n    coordinateSystem: CoordinateSystem;\n    /** The reference coordinate origin used to align world position */\n    coordinateOrigin: [number, number, number];\n    /** The model matrix of the supplied position */\n    modelMatrix?: NumericArray | null;\n    /** The coordinate system that the supplied position is in. Default to the same as `coordinateSystem`. */\n    fromCoordinateSystem?: CoordinateSystem;\n    /** The coordinate origin that the supplied position is in. Default to the same as `coordinateOrigin`. */\n    fromCoordinateOrigin?: [number, number, number];\n  }\n): [number, number, number] {\n  const {\n    viewport,\n    coordinateSystem,\n    coordinateOrigin,\n    modelMatrix,\n    fromCoordinateSystem,\n    fromCoordinateOrigin\n  } = normalizeParameters(params);\n\n  const {geospatialOrigin, shaderCoordinateOrigin, offsetMode} = getOffsetOrigin(\n    viewport,\n    coordinateSystem,\n    coordinateOrigin\n  );\n\n  const worldPosition = getWorldPosition(position, {\n    viewport,\n    modelMatrix,\n    coordinateSystem: fromCoordinateSystem,\n    coordinateOrigin: fromCoordinateOrigin,\n    offsetMode\n  });\n\n  if (offsetMode) {\n    const positionCommonSpace = viewport.projectPosition(\n      geospatialOrigin || shaderCoordinateOrigin\n    );\n    vec3.sub(worldPosition, worldPosition, positionCommonSpace);\n  }\n\n  return worldPosition;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}