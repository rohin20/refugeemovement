{"ast":null,"code":"import _slicedToArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Matrix4, Vector3 } from '@math.gl/core';\nimport { Ellipsoid } from '@math.gl/geospatial';\nimport { Stats } from '@probe.gl/stats';\nimport { RequestScheduler, assert, path } from '@loaders.gl/loader-utils';\nimport { TilesetCache } from './tileset-cache';\nimport { calculateTransformProps } from './helpers/transform-utils';\nimport { getFrameState, limitSelectedTiles } from './helpers/frame-state';\nimport { getZoomFromBoundingVolume, getZoomFromExtent, getZoomFromFullExtent } from './helpers/zoom';\nimport { Tile3D } from './tile-3d';\nimport { TILESET_TYPE } from '../constants';\nimport { TilesetTraverser } from './tileset-traverser';\nimport { Tileset3DTraverser } from './format-3d-tiles/tileset-3d-traverser';\nimport { I3STilesetTraverser } from './format-i3s/i3s-tileset-traverser';\nvar DEFAULT_PROPS = {\n  description: '',\n  ellipsoid: Ellipsoid.WGS84,\n  modelMatrix: new Matrix4(),\n  throttleRequests: true,\n  maxRequests: 64,\n  maximumMemoryUsage: 32,\n  maximumTilesSelected: 0,\n  debounceTime: 0,\n  onTileLoad: function onTileLoad() {},\n  onTileUnload: function onTileUnload() {},\n  onTileError: function onTileError() {},\n  onTraversalComplete: function onTraversalComplete(selectedTiles) {\n    return selectedTiles;\n  },\n  contentLoader: undefined,\n  viewDistanceScale: 1.0,\n  maximumScreenSpaceError: 8,\n  loadTiles: true,\n  updateTransforms: true,\n  viewportTraversersMap: null,\n  loadOptions: {\n    fetch: {}\n  },\n  attributions: [],\n  basePath: '',\n  i3s: {}\n};\nvar TILES_TOTAL = 'Tiles In Tileset(s)';\nvar TILES_IN_MEMORY = 'Tiles In Memory';\nvar TILES_IN_VIEW = 'Tiles In View';\nvar TILES_RENDERABLE = 'Tiles To Render';\nvar TILES_LOADED = 'Tiles Loaded';\nvar TILES_LOADING = 'Tiles Loading';\nvar TILES_UNLOADED = 'Tiles Unloaded';\nvar TILES_LOAD_FAILED = 'Failed Tile Loads';\nvar POINTS_COUNT = 'Points/Vertices';\nvar TILES_GPU_MEMORY = 'Tile Memory Use';\nexport var Tileset3D = /*#__PURE__*/function () {\n  function Tileset3D(json, options) {\n    _classCallCheck(this, Tileset3D);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"loadOptions\", void 0);\n    _defineProperty(this, \"type\", void 0);\n    _defineProperty(this, \"tileset\", void 0);\n    _defineProperty(this, \"loader\", void 0);\n    _defineProperty(this, \"url\", void 0);\n    _defineProperty(this, \"basePath\", void 0);\n    _defineProperty(this, \"modelMatrix\", void 0);\n    _defineProperty(this, \"ellipsoid\", void 0);\n    _defineProperty(this, \"lodMetricType\", void 0);\n    _defineProperty(this, \"lodMetricValue\", void 0);\n    _defineProperty(this, \"refine\", void 0);\n    _defineProperty(this, \"root\", void 0);\n    _defineProperty(this, \"roots\", void 0);\n    _defineProperty(this, \"asset\", void 0);\n    _defineProperty(this, \"description\", void 0);\n    _defineProperty(this, \"properties\", void 0);\n    _defineProperty(this, \"extras\", void 0);\n    _defineProperty(this, \"attributions\", void 0);\n    _defineProperty(this, \"credits\", void 0);\n    _defineProperty(this, \"stats\", void 0);\n    _defineProperty(this, \"contentFormats\", {\n      draco: false,\n      meshopt: false,\n      dds: false,\n      ktx2: false\n    });\n    _defineProperty(this, \"traverseCounter\", void 0);\n    _defineProperty(this, \"geometricError\", void 0);\n    _defineProperty(this, \"selectedTiles\", void 0);\n    _defineProperty(this, \"updatePromise\", null);\n    _defineProperty(this, \"tilesetInitializationPromise\", void 0);\n    _defineProperty(this, \"cartographicCenter\", void 0);\n    _defineProperty(this, \"cartesianCenter\", void 0);\n    _defineProperty(this, \"zoom\", void 0);\n    _defineProperty(this, \"boundingVolume\", void 0);\n    _defineProperty(this, \"gpuMemoryUsageInBytes\", void 0);\n    _defineProperty(this, \"dynamicScreenSpaceErrorComputedDensity\", void 0);\n    _defineProperty(this, \"_traverser\", void 0);\n    _defineProperty(this, \"_cache\", void 0);\n    _defineProperty(this, \"_requestScheduler\", void 0);\n    _defineProperty(this, \"_frameNumber\", void 0);\n    _defineProperty(this, \"_queryParamsString\", void 0);\n    _defineProperty(this, \"_queryParams\", void 0);\n    _defineProperty(this, \"_extensionsUsed\", void 0);\n    _defineProperty(this, \"_tiles\", void 0);\n    _defineProperty(this, \"_pendingCount\", void 0);\n    _defineProperty(this, \"lastUpdatedVieports\", void 0);\n    _defineProperty(this, \"_requestedTiles\", void 0);\n    _defineProperty(this, \"_emptyTiles\", void 0);\n    _defineProperty(this, \"frameStateData\", void 0);\n    _defineProperty(this, \"maximumMemoryUsage\", void 0);\n    assert(json);\n    this.options = _objectSpread(_objectSpread({}, DEFAULT_PROPS), options);\n    this.tileset = json;\n    this.loader = json.loader;\n    this.type = json.type;\n    this.url = json.url;\n    this.basePath = json.basePath || path.dirname(this.url);\n    this.modelMatrix = this.options.modelMatrix;\n    this.ellipsoid = this.options.ellipsoid;\n    this.lodMetricType = json.lodMetricType;\n    this.lodMetricValue = json.lodMetricValue;\n    this.refine = json.root.refine;\n    this.loadOptions = this.options.loadOptions || {};\n    this.root = null;\n    this.roots = {};\n    this.cartographicCenter = null;\n    this.cartesianCenter = null;\n    this.zoom = 1;\n    this.boundingVolume = null;\n    this.traverseCounter = 0;\n    this.geometricError = 0;\n    this._traverser = this._initializeTraverser();\n    this._cache = new TilesetCache();\n    this._requestScheduler = new RequestScheduler({\n      throttleRequests: this.options.throttleRequests,\n      maxRequests: this.options.maxRequests\n    });\n    this._frameNumber = 0;\n    this._pendingCount = 0;\n    this._tiles = {};\n    this.selectedTiles = [];\n    this._emptyTiles = [];\n    this._requestedTiles = [];\n    this.frameStateData = {};\n    this.lastUpdatedVieports = null;\n    this._queryParams = {};\n    this._queryParamsString = '';\n    this.maximumMemoryUsage = this.options.maximumMemoryUsage || 32;\n    this.gpuMemoryUsageInBytes = 0;\n    this.stats = new Stats({\n      id: this.url\n    });\n    this._initializeStats();\n    this._extensionsUsed = undefined;\n    this.dynamicScreenSpaceErrorComputedDensity = 0.0;\n    this.extras = null;\n    this.asset = {};\n    this.credits = {};\n    this.description = this.options.description || '';\n    this.tilesetInitializationPromise = this._initializeTileSet(json);\n  }\n  _createClass(Tileset3D, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this._destroy();\n    }\n  }, {\n    key: \"isLoaded\",\n    value: function isLoaded() {\n      return this._pendingCount === 0 && this._frameNumber !== 0 && this._requestedTiles.length === 0;\n    }\n  }, {\n    key: \"tiles\",\n    get: function get() {\n      return Object.values(this._tiles);\n    }\n  }, {\n    key: \"frameNumber\",\n    get: function get() {\n      return this._frameNumber;\n    }\n  }, {\n    key: \"queryParams\",\n    get: function get() {\n      if (!this._queryParamsString) {\n        this._queryParamsString = getQueryParamString(this._queryParams);\n      }\n      return this._queryParamsString;\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      this.options = _objectSpread(_objectSpread({}, this.options), props);\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = _objectSpread(_objectSpread({}, this.options), options);\n    }\n  }, {\n    key: \"getTileUrl\",\n    value: function getTileUrl(tilePath) {\n      var isDataUrl = tilePath.startsWith('data:');\n      if (isDataUrl) {\n        return tilePath;\n      }\n      return \"\".concat(tilePath).concat(this.queryParams);\n    }\n  }, {\n    key: \"hasExtension\",\n    value: function hasExtension(extensionName) {\n      return Boolean(this._extensionsUsed && this._extensionsUsed.indexOf(extensionName) > -1);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this = this;\n      var viewports = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      this.tilesetInitializationPromise.then(function () {\n        if (!viewports && _this.lastUpdatedVieports) {\n          viewports = _this.lastUpdatedVieports;\n        } else {\n          _this.lastUpdatedVieports = viewports;\n        }\n        if (viewports) {\n          _this.doUpdate(viewports);\n        }\n      });\n    }\n  }, {\n    key: \"selectTiles\",\n    value: function () {\n      var _selectTiles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this2 = this;\n        var viewports,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              viewports = _args.length > 0 && _args[0] !== undefined ? _args[0] : null;\n              _context.next = 3;\n              return this.tilesetInitializationPromise;\n            case 3:\n              if (viewports) {\n                this.lastUpdatedVieports = viewports;\n              }\n              if (!this.updatePromise) {\n                this.updatePromise = new Promise(function (resolve) {\n                  setTimeout(function () {\n                    if (_this2.lastUpdatedVieports) {\n                      _this2.doUpdate(_this2.lastUpdatedVieports);\n                    }\n                    resolve(_this2._frameNumber);\n                    _this2.updatePromise = null;\n                  }, _this2.options.debounceTime);\n                });\n              }\n              return _context.abrupt(\"return\", this.updatePromise);\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function selectTiles() {\n        return _selectTiles.apply(this, arguments);\n      }\n      return selectTiles;\n    }()\n  }, {\n    key: \"doUpdate\",\n    value: function doUpdate(viewports) {\n      if ('loadTiles' in this.options && !this.options.loadTiles) {\n        return;\n      }\n      if (this.traverseCounter > 0) {\n        return;\n      }\n      var preparedViewports = viewports instanceof Array ? viewports : [viewports];\n      this._cache.reset();\n      this._frameNumber++;\n      this.traverseCounter = preparedViewports.length;\n      var viewportsToTraverse = [];\n      var _iterator = _createForOfIteratorHelper(preparedViewports),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var viewport = _step.value;\n          var id = viewport.id;\n          if (this._needTraverse(id)) {\n            viewportsToTraverse.push(id);\n          } else {\n            this.traverseCounter--;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var _iterator2 = _createForOfIteratorHelper(preparedViewports),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _viewport = _step2.value;\n          var _id = _viewport.id;\n          if (!this.roots[_id]) {\n            this.roots[_id] = this._initializeTileHeaders(this.tileset, null);\n          }\n          if (!viewportsToTraverse.includes(_id)) {\n            continue;\n          }\n          var frameState = getFrameState(_viewport, this._frameNumber);\n          this._traverser.traverse(this.roots[_id], frameState, this.options);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"_needTraverse\",\n    value: function _needTraverse(viewportId) {\n      var traverserId = viewportId;\n      if (this.options.viewportTraversersMap) {\n        traverserId = this.options.viewportTraversersMap[viewportId];\n      }\n      if (traverserId !== viewportId) {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"_onTraversalEnd\",\n    value: function _onTraversalEnd(frameState) {\n      var id = frameState.viewport.id;\n      if (!this.frameStateData[id]) {\n        this.frameStateData[id] = {\n          selectedTiles: [],\n          _requestedTiles: [],\n          _emptyTiles: []\n        };\n      }\n      var currentFrameStateData = this.frameStateData[id];\n      var selectedTiles = Object.values(this._traverser.selectedTiles);\n      var _limitSelectedTiles = limitSelectedTiles(selectedTiles, frameState, this.options.maximumTilesSelected),\n        _limitSelectedTiles2 = _slicedToArray(_limitSelectedTiles, 2),\n        filteredSelectedTiles = _limitSelectedTiles2[0],\n        unselectedTiles = _limitSelectedTiles2[1];\n      currentFrameStateData.selectedTiles = filteredSelectedTiles;\n      var _iterator3 = _createForOfIteratorHelper(unselectedTiles),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var tile = _step3.value;\n          tile.unselect();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      currentFrameStateData._requestedTiles = Object.values(this._traverser.requestedTiles);\n      currentFrameStateData._emptyTiles = Object.values(this._traverser.emptyTiles);\n      this.traverseCounter--;\n      if (this.traverseCounter > 0) {\n        return;\n      }\n      this._updateTiles();\n    }\n  }, {\n    key: \"_updateTiles\",\n    value: function _updateTiles() {\n      this.selectedTiles = [];\n      this._requestedTiles = [];\n      this._emptyTiles = [];\n      for (var frameStateKey in this.frameStateData) {\n        var frameStateDataValue = this.frameStateData[frameStateKey];\n        this.selectedTiles = this.selectedTiles.concat(frameStateDataValue.selectedTiles);\n        this._requestedTiles = this._requestedTiles.concat(frameStateDataValue._requestedTiles);\n        this._emptyTiles = this._emptyTiles.concat(frameStateDataValue._emptyTiles);\n      }\n      this.selectedTiles = this.options.onTraversalComplete(this.selectedTiles);\n      var _iterator4 = _createForOfIteratorHelper(this.selectedTiles),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var tile = _step4.value;\n          this._tiles[tile.id] = tile;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      this._loadTiles();\n      this._unloadTiles();\n      this._updateStats();\n    }\n  }, {\n    key: \"_tilesChanged\",\n    value: function _tilesChanged(oldSelectedTiles, selectedTiles) {\n      if (oldSelectedTiles.length !== selectedTiles.length) {\n        return true;\n      }\n      var set1 = new Set(oldSelectedTiles.map(function (t) {\n        return t.id;\n      }));\n      var set2 = new Set(selectedTiles.map(function (t) {\n        return t.id;\n      }));\n      var changed = oldSelectedTiles.filter(function (x) {\n        return !set2.has(x.id);\n      }).length > 0;\n      changed = changed || selectedTiles.filter(function (x) {\n        return !set1.has(x.id);\n      }).length > 0;\n      return changed;\n    }\n  }, {\n    key: \"_loadTiles\",\n    value: function _loadTiles() {\n      var _iterator5 = _createForOfIteratorHelper(this._requestedTiles),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var tile = _step5.value;\n          if (tile.contentUnloaded) {\n            this._loadTile(tile);\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, {\n    key: \"_unloadTiles\",\n    value: function _unloadTiles() {\n      this._cache.unloadTiles(this, function (tileset, tile) {\n        return tileset._unloadTile(tile);\n      });\n    }\n  }, {\n    key: \"_updateStats\",\n    value: function _updateStats() {\n      var tilesRenderable = 0;\n      var pointsRenderable = 0;\n      var _iterator6 = _createForOfIteratorHelper(this.selectedTiles),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var tile = _step6.value;\n          if (tile.contentAvailable && tile.content) {\n            tilesRenderable++;\n            if (tile.content.pointCount) {\n              pointsRenderable += tile.content.pointCount;\n            } else {\n              pointsRenderable += tile.content.vertexCount;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      this.stats.get(TILES_IN_VIEW).count = this.selectedTiles.length;\n      this.stats.get(TILES_RENDERABLE).count = tilesRenderable;\n      this.stats.get(POINTS_COUNT).count = pointsRenderable;\n    }\n  }, {\n    key: \"_initializeTileSet\",\n    value: function () {\n      var _initializeTileSet2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(tilesetJson) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(this.type === TILESET_TYPE.I3S)) {\n                _context2.next = 5;\n                break;\n              }\n              this.calculateViewPropsI3S();\n              _context2.next = 4;\n              return tilesetJson.root;\n            case 4:\n              tilesetJson.root = _context2.sent;\n            case 5:\n              this.root = this._initializeTileHeaders(tilesetJson, null);\n              if (this.type === TILESET_TYPE.TILES3D) {\n                this._initializeTiles3DTileset(tilesetJson);\n                this.calculateViewPropsTiles3D();\n              }\n              if (this.type === TILESET_TYPE.I3S) {\n                this._initializeI3STileset();\n              }\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function _initializeTileSet(_x) {\n        return _initializeTileSet2.apply(this, arguments);\n      }\n      return _initializeTileSet;\n    }()\n  }, {\n    key: \"calculateViewPropsI3S\",\n    value: function calculateViewPropsI3S() {\n      var _this$tileset$store;\n      var fullExtent = this.tileset.fullExtent;\n      if (fullExtent) {\n        var xmin = fullExtent.xmin,\n          xmax = fullExtent.xmax,\n          ymin = fullExtent.ymin,\n          ymax = fullExtent.ymax,\n          zmin = fullExtent.zmin,\n          zmax = fullExtent.zmax;\n        this.cartographicCenter = new Vector3(xmin + (xmax - xmin) / 2, ymin + (ymax - ymin) / 2, zmin + (zmax - zmin) / 2);\n        this.cartesianCenter = Ellipsoid.WGS84.cartographicToCartesian(this.cartographicCenter, new Vector3());\n        this.zoom = getZoomFromFullExtent(fullExtent, this.cartographicCenter, this.cartesianCenter);\n        return;\n      }\n      var extent = (_this$tileset$store = this.tileset.store) === null || _this$tileset$store === void 0 ? void 0 : _this$tileset$store.extent;\n      if (extent) {\n        var _extent = _slicedToArray(extent, 4),\n          _xmin = _extent[0],\n          _ymin = _extent[1],\n          _xmax = _extent[2],\n          _ymax = _extent[3];\n        this.cartographicCenter = new Vector3(_xmin + (_xmax - _xmin) / 2, _ymin + (_ymax - _ymin) / 2, 0);\n        this.cartesianCenter = Ellipsoid.WGS84.cartographicToCartesian(this.cartographicCenter, new Vector3());\n        this.zoom = getZoomFromExtent(extent, this.cartographicCenter, this.cartesianCenter);\n        return;\n      }\n      console.warn('Extent is not defined in the tileset header');\n      this.cartographicCenter = new Vector3();\n      this.zoom = 1;\n      return;\n    }\n  }, {\n    key: \"calculateViewPropsTiles3D\",\n    value: function calculateViewPropsTiles3D() {\n      var root = this.root;\n      assert(root);\n      var center = root.boundingVolume.center;\n      if (!center) {\n        console.warn('center was not pre-calculated for the root tile');\n        this.cartographicCenter = new Vector3();\n        this.zoom = 1;\n        return;\n      }\n      if (center[0] !== 0 || center[1] !== 0 || center[2] !== 0) {\n        this.cartographicCenter = Ellipsoid.WGS84.cartesianToCartographic(center, new Vector3());\n      } else {\n        this.cartographicCenter = new Vector3(0, 0, -Ellipsoid.WGS84.radii[0]);\n      }\n      this.cartesianCenter = center;\n      this.zoom = getZoomFromBoundingVolume(root.boundingVolume, this.cartographicCenter);\n    }\n  }, {\n    key: \"_initializeStats\",\n    value: function _initializeStats() {\n      this.stats.get(TILES_TOTAL);\n      this.stats.get(TILES_LOADING);\n      this.stats.get(TILES_IN_MEMORY);\n      this.stats.get(TILES_IN_VIEW);\n      this.stats.get(TILES_RENDERABLE);\n      this.stats.get(TILES_LOADED);\n      this.stats.get(TILES_UNLOADED);\n      this.stats.get(TILES_LOAD_FAILED);\n      this.stats.get(POINTS_COUNT);\n      this.stats.get(TILES_GPU_MEMORY, 'memory');\n    }\n  }, {\n    key: \"_initializeTileHeaders\",\n    value: function _initializeTileHeaders(tilesetJson, parentTileHeader) {\n      var rootTile = new Tile3D(this, tilesetJson.root, parentTileHeader);\n      if (parentTileHeader) {\n        parentTileHeader.children.push(rootTile);\n        rootTile.depth = parentTileHeader.depth + 1;\n      }\n      if (this.type === TILESET_TYPE.TILES3D) {\n        var stack = [];\n        stack.push(rootTile);\n        while (stack.length > 0) {\n          var tile = stack.pop();\n          this.stats.get(TILES_TOTAL).incrementCount();\n          var children = tile.header.children || [];\n          var _iterator7 = _createForOfIteratorHelper(children),\n            _step7;\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var childHeader = _step7.value;\n              var childTile = new Tile3D(this, childHeader, tile);\n              tile.children.push(childTile);\n              childTile.depth = tile.depth + 1;\n              stack.push(childTile);\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n        }\n      }\n      return rootTile;\n    }\n  }, {\n    key: \"_initializeTraverser\",\n    value: function _initializeTraverser() {\n      var TraverserClass;\n      var type = this.type;\n      switch (type) {\n        case TILESET_TYPE.TILES3D:\n          TraverserClass = Tileset3DTraverser;\n          break;\n        case TILESET_TYPE.I3S:\n          TraverserClass = I3STilesetTraverser;\n          break;\n        default:\n          TraverserClass = TilesetTraverser;\n      }\n      return new TraverserClass({\n        basePath: this.basePath,\n        onTraversalEnd: this._onTraversalEnd.bind(this)\n      });\n    }\n  }, {\n    key: \"_destroyTileHeaders\",\n    value: function _destroyTileHeaders(parentTile) {\n      this._destroySubtree(parentTile);\n    }\n  }, {\n    key: \"_loadTile\",\n    value: function () {\n      var _loadTile2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(tile) {\n        var loaded;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              this._onStartTileLoading();\n              _context3.next = 4;\n              return tile.loadContent();\n            case 4:\n              loaded = _context3.sent;\n              _context3.next = 10;\n              break;\n            case 7:\n              _context3.prev = 7;\n              _context3.t0 = _context3[\"catch\"](0);\n              this._onTileLoadError(tile, _context3.t0);\n            case 10:\n              _context3.prev = 10;\n              this._onEndTileLoading();\n              this._onTileLoad(tile, loaded);\n              return _context3.finish(10);\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[0, 7, 10, 14]]);\n      }));\n      function _loadTile(_x2) {\n        return _loadTile2.apply(this, arguments);\n      }\n      return _loadTile;\n    }()\n  }, {\n    key: \"_onTileLoadError\",\n    value: function _onTileLoadError(tile, error) {\n      this.stats.get(TILES_LOAD_FAILED).incrementCount();\n      var message = error.message || error.toString();\n      var url = tile.url;\n      console.error(\"A 3D tile failed to load: \".concat(tile.url, \" \").concat(message));\n      this.options.onTileError(tile, message, url);\n    }\n  }, {\n    key: \"_onTileLoad\",\n    value: function _onTileLoad(tile, loaded) {\n      if (!loaded) {\n        return;\n      }\n      if (this.type === TILESET_TYPE.I3S) {\n        var _this$tileset, _this$tileset$nodePag;\n        var nodesInNodePages = ((_this$tileset = this.tileset) === null || _this$tileset === void 0 ? void 0 : (_this$tileset$nodePag = _this$tileset.nodePagesTile) === null || _this$tileset$nodePag === void 0 ? void 0 : _this$tileset$nodePag.nodesInNodePages) || 0;\n        this.stats.get(TILES_TOTAL).reset();\n        this.stats.get(TILES_TOTAL).addCount(nodesInNodePages);\n      }\n      if (tile && tile.content) {\n        calculateTransformProps(tile, tile.content);\n      }\n      this.updateContentTypes(tile);\n      this._addTileToCache(tile);\n      this.options.onTileLoad(tile);\n    }\n  }, {\n    key: \"updateContentTypes\",\n    value: function updateContentTypes(tile) {\n      if (this.type === TILESET_TYPE.I3S) {\n        if (tile.header.isDracoGeometry) {\n          this.contentFormats.draco = true;\n        }\n        switch (tile.header.textureFormat) {\n          case 'dds':\n            this.contentFormats.dds = true;\n            break;\n          case 'ktx2':\n            this.contentFormats.ktx2 = true;\n            break;\n          default:\n        }\n      } else if (this.type === TILESET_TYPE.TILES3D) {\n        var _tile$content;\n        var _ref = ((_tile$content = tile.content) === null || _tile$content === void 0 ? void 0 : _tile$content.gltf) || {},\n          _ref$extensionsRemove = _ref.extensionsRemoved,\n          extensionsRemoved = _ref$extensionsRemove === void 0 ? [] : _ref$extensionsRemove;\n        if (extensionsRemoved.includes('KHR_draco_mesh_compression')) {\n          this.contentFormats.draco = true;\n        }\n        if (extensionsRemoved.includes('EXT_meshopt_compression')) {\n          this.contentFormats.meshopt = true;\n        }\n        if (extensionsRemoved.includes('KHR_texture_basisu')) {\n          this.contentFormats.ktx2 = true;\n        }\n      }\n    }\n  }, {\n    key: \"_onStartTileLoading\",\n    value: function _onStartTileLoading() {\n      this._pendingCount++;\n      this.stats.get(TILES_LOADING).incrementCount();\n    }\n  }, {\n    key: \"_onEndTileLoading\",\n    value: function _onEndTileLoading() {\n      this._pendingCount--;\n      this.stats.get(TILES_LOADING).decrementCount();\n    }\n  }, {\n    key: \"_addTileToCache\",\n    value: function _addTileToCache(tile) {\n      this._cache.add(this, tile, function (tileset) {\n        return tileset._updateCacheStats(tile);\n      });\n    }\n  }, {\n    key: \"_updateCacheStats\",\n    value: function _updateCacheStats(tile) {\n      this.stats.get(TILES_LOADED).incrementCount();\n      this.stats.get(TILES_IN_MEMORY).incrementCount();\n      this.gpuMemoryUsageInBytes += tile.content.byteLength || 0;\n      this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n    }\n  }, {\n    key: \"_unloadTile\",\n    value: function _unloadTile(tile) {\n      this.gpuMemoryUsageInBytes -= tile.content && tile.content.byteLength || 0;\n      this.stats.get(TILES_IN_MEMORY).decrementCount();\n      this.stats.get(TILES_UNLOADED).incrementCount();\n      this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n      this.options.onTileUnload(tile);\n      tile.unloadContent();\n    }\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {\n      var stack = [];\n      if (this.root) {\n        stack.push(this.root);\n      }\n      while (stack.length > 0) {\n        var tile = stack.pop();\n        var _iterator8 = _createForOfIteratorHelper(tile.children),\n          _step8;\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            var child = _step8.value;\n            stack.push(child);\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n        this._destroyTile(tile);\n      }\n      this.root = null;\n    }\n  }, {\n    key: \"_destroySubtree\",\n    value: function _destroySubtree(tile) {\n      var root = tile;\n      var stack = [];\n      stack.push(root);\n      while (stack.length > 0) {\n        tile = stack.pop();\n        var _iterator9 = _createForOfIteratorHelper(tile.children),\n          _step9;\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var child = _step9.value;\n            stack.push(child);\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n        if (tile !== root) {\n          this._destroyTile(tile);\n        }\n      }\n      root.children = [];\n    }\n  }, {\n    key: \"_destroyTile\",\n    value: function _destroyTile(tile) {\n      this._cache.unloadTile(this, tile);\n      this._unloadTile(tile);\n      tile.destroy();\n    }\n  }, {\n    key: \"_initializeTiles3DTileset\",\n    value: function _initializeTiles3DTileset(tilesetJson) {\n      this.asset = tilesetJson.asset;\n      if (!this.asset) {\n        throw new Error('Tileset must have an asset property.');\n      }\n      if (this.asset.version !== '0.0' && this.asset.version !== '1.0') {\n        throw new Error('The tileset must be 3D Tiles version 0.0 or 1.0.');\n      }\n      if ('tilesetVersion' in this.asset) {\n        this._queryParams.v = this.asset.tilesetVersion;\n      }\n      this.credits = {\n        attributions: this.options.attributions || []\n      };\n      this.description = this.options.description || '';\n      this.properties = tilesetJson.properties;\n      this.geometricError = tilesetJson.geometricError;\n      this._extensionsUsed = tilesetJson.extensionsUsed;\n      this.extras = tilesetJson.extras;\n    }\n  }, {\n    key: \"_initializeI3STileset\",\n    value: function _initializeI3STileset() {\n      if (this.loadOptions.i3s && 'token' in this.loadOptions.i3s) {\n        this._queryParams.token = this.loadOptions.i3s.token;\n      }\n    }\n  }]);\n  return Tileset3D;\n}();\nfunction getQueryParamString(queryParams) {\n  var queryParamStrings = [];\n  for (var _i = 0, _Object$keys = Object.keys(queryParams); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    queryParamStrings.push(\"\".concat(key, \"=\").concat(queryParams[key]));\n  }\n  switch (queryParamStrings.length) {\n    case 0:\n      return '';\n    case 1:\n      return \"?\".concat(queryParamStrings[0]);\n    default:\n      return \"?\".concat(queryParamStrings.join('&'));\n  }\n}","map":{"version":3,"names":["Matrix4","Vector3","Ellipsoid","Stats","RequestScheduler","assert","path","TilesetCache","calculateTransformProps","getFrameState","limitSelectedTiles","getZoomFromBoundingVolume","getZoomFromExtent","getZoomFromFullExtent","Tile3D","TILESET_TYPE","TilesetTraverser","Tileset3DTraverser","I3STilesetTraverser","DEFAULT_PROPS","description","ellipsoid","WGS84","modelMatrix","throttleRequests","maxRequests","maximumMemoryUsage","maximumTilesSelected","debounceTime","onTileLoad","onTileUnload","onTileError","onTraversalComplete","selectedTiles","contentLoader","undefined","viewDistanceScale","maximumScreenSpaceError","loadTiles","updateTransforms","viewportTraversersMap","loadOptions","fetch","attributions","basePath","i3s","TILES_TOTAL","TILES_IN_MEMORY","TILES_IN_VIEW","TILES_RENDERABLE","TILES_LOADED","TILES_LOADING","TILES_UNLOADED","TILES_LOAD_FAILED","POINTS_COUNT","TILES_GPU_MEMORY","Tileset3D","json","options","_classCallCheck","_defineProperty","draco","meshopt","dds","ktx2","_objectSpread","tileset","loader","type","url","dirname","lodMetricType","lodMetricValue","refine","root","roots","cartographicCenter","cartesianCenter","zoom","boundingVolume","traverseCounter","geometricError","_traverser","_initializeTraverser","_cache","_requestScheduler","_frameNumber","_pendingCount","_tiles","_emptyTiles","_requestedTiles","frameStateData","lastUpdatedVieports","_queryParams","_queryParamsString","gpuMemoryUsageInBytes","stats","id","_initializeStats","_extensionsUsed","dynamicScreenSpaceErrorComputedDensity","extras","asset","credits","tilesetInitializationPromise","_initializeTileSet","_createClass","key","value","destroy","_destroy","isLoaded","length","get","Object","values","getQueryParamString","setProps","props","setOptions","getTileUrl","tilePath","isDataUrl","startsWith","concat","queryParams","hasExtension","extensionName","Boolean","indexOf","update","_this","viewports","arguments","then","doUpdate","_selectTiles","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this2","_args","wrap","_callee$","_context","prev","next","updatePromise","Promise","resolve","setTimeout","abrupt","stop","selectTiles","apply","preparedViewports","Array","reset","viewportsToTraverse","_iterator","_createForOfIteratorHelper","_step","s","n","done","viewport","_needTraverse","push","err","e","f","_iterator2","_step2","_initializeTileHeaders","includes","frameState","traverse","viewportId","traverserId","_onTraversalEnd","currentFrameStateData","_limitSelectedTiles","_limitSelectedTiles2","_slicedToArray","filteredSelectedTiles","unselectedTiles","_iterator3","_step3","tile","unselect","requestedTiles","emptyTiles","_updateTiles","frameStateKey","frameStateDataValue","_iterator4","_step4","_loadTiles","_unloadTiles","_updateStats","_tilesChanged","oldSelectedTiles","set1","Set","map","t","set2","changed","filter","x","has","_iterator5","_step5","contentUnloaded","_loadTile","unloadTiles","_unloadTile","tilesRenderable","pointsRenderable","_iterator6","_step6","contentAvailable","content","pointCount","vertexCount","count","_initializeTileSet2","_callee2","tilesetJson","_callee2$","_context2","I3S","calculateViewPropsI3S","sent","TILES3D","_initializeTiles3DTileset","calculateViewPropsTiles3D","_initializeI3STileset","_x","_this$tileset$store","fullExtent","xmin","xmax","ymin","ymax","zmin","zmax","cartographicToCartesian","extent","store","_extent","console","warn","center","cartesianToCartographic","radii","parentTileHeader","rootTile","children","depth","stack","pop","incrementCount","header","_iterator7","_step7","childHeader","childTile","TraverserClass","onTraversalEnd","bind","_destroyTileHeaders","parentTile","_destroySubtree","_loadTile2","_callee3","loaded","_callee3$","_context3","_onStartTileLoading","loadContent","t0","_onTileLoadError","_onEndTileLoading","_onTileLoad","finish","_x2","error","message","toString","_this$tileset","_this$tileset$nodePag","nodesInNodePages","nodePagesTile","addCount","updateContentTypes","_addTileToCache","isDracoGeometry","contentFormats","textureFormat","_tile$content","_ref","gltf","_ref$extensionsRemove","extensionsRemoved","decrementCount","add","_updateCacheStats","byteLength","unloadContent","_iterator8","_step8","child","_destroyTile","_iterator9","_step9","unloadTile","Error","version","v","tilesetVersion","properties","extensionsUsed","token","queryParamStrings","_i","_Object$keys","keys","join"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/geo-layers/node_modules/@loaders.gl/tiles/src/tileset/tileset-3d.ts"],"sourcesContent":["// loaders.gl, MIT license\n\n// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/*\n\n  The Tileset loading and rendering flow is as below,\n  A rendered (i.e. deck.gl `Tile3DLayer`) triggers `tileset.update()` after a `tileset` is loaded\n  `tileset` starts traversing the tile tree and update `requestTiles` (tiles of which content need\n  to be fetched) and `selectedTiles` (tiles ready for rendering under the current viewport).\n  `Tile3DLayer` will update rendering based on `selectedTiles`.\n  `Tile3DLayer` also listens to `onTileLoad` callback and trigger another round of `update and then traversal`\n  when new tiles are loaded.\n\n  As I3S tileset have stored `tileHeader` file (metadata) and tile content files (geometry, texture, ...) separately.\n  During each traversal, it issues `tilHeader` requests if that `tileHeader` is not yet fetched,\n  after the tile header is fulfilled, it will resume the traversal starting from the tile just fetched (not root).\n\n  Tile3DLayer\n       |\n   await load(tileset)\n       |\n   tileset.update()\n       |                async load tileHeader\n   tileset.traverse() -------------------------- Queued\n       |        resume traversal after fetched  |\n       |----------------------------------------|\n       |\n       |                     async load tile content\n  tilset.requestedTiles  ----------------------------- RequestScheduler\n                                                              |\n  tilset.selectedTiles (ready for rendering)                  |\n       |         Listen to                                    |\n    Tile3DLayer ----------- onTileLoad  ----------------------|\n       |                         |   notify new tile is available\n    updateLayers                 |\n                        tileset.update // trigger another round of update\n*/\n\nimport {Matrix4, Vector3} from '@math.gl/core';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {Stats} from '@probe.gl/stats';\nimport {\n  RequestScheduler,\n  assert,\n  path,\n  LoaderWithParser,\n  LoaderOptions\n} from '@loaders.gl/loader-utils';\nimport {TilesetCache} from './tileset-cache';\nimport {calculateTransformProps} from './helpers/transform-utils';\nimport {FrameState, getFrameState, limitSelectedTiles} from './helpers/frame-state';\nimport {getZoomFromBoundingVolume, getZoomFromExtent, getZoomFromFullExtent} from './helpers/zoom';\nimport {Tile3D} from './tile-3d';\nimport {TILESET_TYPE} from '../constants';\nimport {GeospatialViewport, Viewport} from '../types';\n\nimport {TilesetTraverser} from './tileset-traverser';\n\n// TODO - these should be moved into their respective modules\nimport {Tileset3DTraverser} from './format-3d-tiles/tileset-3d-traverser';\nimport {I3STilesetTraverser} from './format-i3s/i3s-tileset-traverser';\n\nexport type Tileset3DProps = {\n  // loading\n  throttleRequests?: boolean;\n  maxRequests?: number;\n  loadOptions?: LoaderOptions;\n  loadTiles?: boolean;\n  basePath?: string;\n  maximumMemoryUsage?: number;\n  maximumTilesSelected?: number;\n  debounceTime?: number;\n\n  // Metadata\n  description?: string;\n  attributions?: string[];\n\n  // Transforms\n  ellipsoid?: object;\n  modelMatrix?: Matrix4;\n\n  // Traversal\n  maximumScreenSpaceError?: number;\n  viewportTraversersMap?: any;\n  updateTransforms?: boolean;\n  viewDistanceScale?: number;\n\n  // Callbacks\n  onTileLoad?: (tile: Tile3D) => any;\n  onTileUnload?: (tile: Tile3D) => any;\n  onTileError?: (tile: Tile3D, message: string, url: string) => any;\n  contentLoader?: (tile: Tile3D) => Promise<void>;\n  onTraversalComplete?: (selectedTiles: Tile3D[]) => Tile3D[];\n};\n\ntype Props = {\n  description: string;\n  ellipsoid: object;\n  modelMatrix: Matrix4;\n  throttleRequests: boolean;\n  maximumMemoryUsage: number;\n  maximumTilesSelected: number;\n  debounceTime: number;\n  onTileLoad: (tile: Tile3D) => any;\n  onTileUnload: (tile: Tile3D) => any;\n  onTileError: (tile: Tile3D, message: string, url: string) => any;\n  onTraversalComplete: (selectedTiles: Tile3D[]) => Tile3D[];\n  maximumScreenSpaceError: number;\n  viewportTraversersMap: any;\n  attributions: string[];\n  maxRequests: number;\n  loadTiles: boolean;\n  loadOptions: LoaderOptions;\n  updateTransforms: boolean;\n  viewDistanceScale: number;\n  basePath: string;\n  contentLoader?: (tile: Tile3D) => Promise<void>;\n  i3s: {[key: string]: any};\n};\n\nconst DEFAULT_PROPS: Props = {\n  description: '',\n\n  ellipsoid: Ellipsoid.WGS84,\n  // A 4x4 transformation matrix this transforms the entire tileset.\n  modelMatrix: new Matrix4(),\n\n  // Set to false to disable network request throttling\n  throttleRequests: true,\n\n  // Number of simultaneous requsts, if throttleRequests is true\n  maxRequests: 64,\n\n  maximumMemoryUsage: 32,\n  /** Maximum number limit of tiles selected for show. 0 means no limit */\n  maximumTilesSelected: 0,\n  /** Delay time before the tileset traversal. It prevents traversal requests spam.*/\n  debounceTime: 0,\n\n  /**\n   * Callback. Indicates this a tile's content was loaded\n   * @param tile {TileHeader}\n   */\n  onTileLoad: () => {},\n  /**\n   * Callback. Indicates this a tile's content was unloaded\n   * @param tile {TileHeader}\n   */\n  onTileUnload: () => {},\n  onTileError: () => {},\n  /**\n   * Callback. Allows post-process selectedTiles right after traversal.\n   * @param selectedTiles {TileHeader[]}\n   * @returns TileHeader[] - output array of tiles to return to deck.gl\n   */\n  onTraversalComplete: (selectedTiles: Tile3D[]) => selectedTiles,\n\n  // Optional async tile content loader\n  contentLoader: undefined,\n\n  // View distance scale modifier\n  viewDistanceScale: 1.0,\n\n  // The maximum screen space error used to drive level of detail refinement.\n  maximumScreenSpaceError: 8,\n\n  loadTiles: true,\n  updateTransforms: true,\n  viewportTraversersMap: null,\n\n  loadOptions: {fetch: {}},\n\n  attributions: [],\n  basePath: '',\n\n  i3s: {}\n};\n\n// Tracked Stats\nconst TILES_TOTAL = 'Tiles In Tileset(s)';\nconst TILES_IN_MEMORY = 'Tiles In Memory';\nconst TILES_IN_VIEW = 'Tiles In View';\nconst TILES_RENDERABLE = 'Tiles To Render';\nconst TILES_LOADED = 'Tiles Loaded';\nconst TILES_LOADING = 'Tiles Loading';\nconst TILES_UNLOADED = 'Tiles Unloaded';\nconst TILES_LOAD_FAILED = 'Failed Tile Loads';\nconst POINTS_COUNT = 'Points/Vertices';\nconst TILES_GPU_MEMORY = 'Tile Memory Use';\n\nexport class Tileset3D {\n  // props: Tileset3DProps;\n  options: Props;\n  loadOptions: {[key: string]: any};\n\n  type: string;\n  tileset: {[key: string]: any};\n  loader: LoaderWithParser;\n  url: string;\n  basePath: string;\n  modelMatrix: Matrix4;\n  ellipsoid: any;\n  lodMetricType: string;\n  lodMetricValue: number;\n  refine: string;\n  root: Tile3D | null;\n  roots: {[key: string]: Tile3D};\n  asset: {[key: string]: any};\n\n  description: string;\n  properties: any;\n  extras: any;\n  attributions: any;\n  credits: any;\n\n  stats: Stats;\n\n  /** flags that contain information about data types in nested tiles */\n  contentFormats = {draco: false, meshopt: false, dds: false, ktx2: false};\n\n  traverseCounter: number;\n  geometricError: number;\n  selectedTiles: Tile3D[];\n  private updatePromise: Promise<number> | null = null;\n  tilesetInitializationPromise: Promise<void>;\n\n  cartographicCenter: Vector3 | null;\n  cartesianCenter: Vector3 | null;\n  zoom: number;\n  boundingVolume: any;\n\n  // METRICS\n  // The maximum amount of GPU memory (in MB) that may be used to cache tiles.\n  // Tiles not in view are unloaded to enforce private\n  // The total amount of GPU memory in bytes used by the tileset.\n  gpuMemoryUsageInBytes: any;\n  dynamicScreenSpaceErrorComputedDensity: any;\n\n  // TRAVERSAL\n  _traverser: TilesetTraverser;\n  private _cache: TilesetCache;\n  _requestScheduler: RequestScheduler;\n\n  _frameNumber: number;\n  private _queryParamsString: string;\n  private _queryParams: any;\n  private _extensionsUsed: any;\n  private _tiles: {[id: string]: Tile3D};\n\n  // counter for tracking tiles requests\n  private _pendingCount: any;\n\n  // HOLD TRAVERSAL RESULTS\n  private lastUpdatedVieports: Viewport[] | Viewport | null;\n  private _requestedTiles: any;\n  private _emptyTiles: any;\n  private frameStateData: any;\n\n  maximumMemoryUsage: number;\n\n  /**\n   * Create a new Tileset3D\n   * @param json\n   * @param props\n   */\n  // eslint-disable-next-line max-statements\n  constructor(json: any, options?: Tileset3DProps) {\n    assert(json);\n\n    // PUBLIC MEMBERS\n    this.options = {...DEFAULT_PROPS, ...options};\n    // raw data\n    this.tileset = json;\n    this.loader = json.loader;\n    // could be  3d tiles, i3s\n    this.type = json.type;\n    // The url to a tileset JSON file.\n    this.url = json.url;\n    this.basePath = json.basePath || path.dirname(this.url);\n    this.modelMatrix = this.options.modelMatrix;\n    this.ellipsoid = this.options.ellipsoid;\n\n    // Geometric error when the tree is not rendered at all\n    this.lodMetricType = json.lodMetricType;\n    this.lodMetricValue = json.lodMetricValue;\n    this.refine = json.root.refine;\n\n    this.loadOptions = this.options.loadOptions || {};\n\n    this.root = null;\n    this.roots = {};\n    // view props\n    this.cartographicCenter = null;\n    this.cartesianCenter = null;\n    this.zoom = 1;\n    this.boundingVolume = null;\n\n    // TRAVERSAL\n    this.traverseCounter = 0;\n    this.geometricError = 0;\n    this._traverser = this._initializeTraverser();\n    this._cache = new TilesetCache();\n    this._requestScheduler = new RequestScheduler({\n      throttleRequests: this.options.throttleRequests,\n      maxRequests: this.options.maxRequests\n    });\n    // update tracker\n    // increase in each update cycle\n    this._frameNumber = 0;\n\n    // counter for tracking tiles requests\n    this._pendingCount = 0;\n\n    // HOLD TRAVERSAL RESULTS\n    this._tiles = {};\n    this.selectedTiles = [];\n    this._emptyTiles = [];\n    this._requestedTiles = [];\n    this.frameStateData = {};\n    this.lastUpdatedVieports = null;\n\n    this._queryParams = {};\n    this._queryParamsString = '';\n\n    // METRICS\n    // The maximum amount of GPU memory (in MB) that may be used to cache tiles.\n    // Tiles not in view are unloaded to enforce this.\n    this.maximumMemoryUsage = this.options.maximumMemoryUsage || 32;\n    // The total amount of GPU memory in bytes used by the tileset.\n    this.gpuMemoryUsageInBytes = 0;\n    this.stats = new Stats({id: this.url});\n    this._initializeStats();\n\n    // EXTRACTED FROM TILESET\n    this._extensionsUsed = undefined;\n    this.dynamicScreenSpaceErrorComputedDensity = 0.0; // Updated based on the camera position and direction\n    // Metadata for the entire tileset\n    this.extras = null;\n    this.asset = {};\n    this.credits = {};\n    this.description = this.options.description || '';\n\n    this.tilesetInitializationPromise = this._initializeTileSet(json);\n  }\n\n  /** Release resources */\n  destroy(): void {\n    this._destroy();\n  }\n\n  /** Is the tileset loaded (update needs to have been called at least once) */\n  isLoaded(): boolean {\n    // Check that `_frameNumber !== 0` which means that update was called at least once\n    return this._pendingCount === 0 && this._frameNumber !== 0 && this._requestedTiles.length === 0;\n  }\n\n  get tiles(): object[] {\n    return Object.values(this._tiles);\n  }\n\n  get frameNumber(): number {\n    return this._frameNumber;\n  }\n\n  get queryParams(): string {\n    if (!this._queryParamsString) {\n      this._queryParamsString = getQueryParamString(this._queryParams);\n    }\n    return this._queryParamsString;\n  }\n\n  setProps(props: Tileset3DProps): void {\n    this.options = {...this.options, ...props};\n  }\n\n  /** @deprecated */\n  setOptions(options: Tileset3DProps): void {\n    this.options = {...this.options, ...options};\n  }\n\n  /**\n   * Return a loadable tile url for a specific tile subpath\n   * @param tilePath a tile subpath\n   */\n  getTileUrl(tilePath: string): string {\n    const isDataUrl = tilePath.startsWith('data:');\n    if (isDataUrl) {\n      return tilePath;\n    }\n    return `${tilePath}${this.queryParams}`;\n  }\n\n  // TODO CESIUM specific\n  hasExtension(extensionName: string): boolean {\n    return Boolean(this._extensionsUsed && this._extensionsUsed.indexOf(extensionName) > -1);\n  }\n\n  /**\n   * Update visible tiles relying on a list of viewports\n   * @param viewports - list of viewports\n   * @deprecated\n   */\n  update(viewports: Viewport[] | Viewport | null = null) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.tilesetInitializationPromise.then(() => {\n      if (!viewports && this.lastUpdatedVieports) {\n        viewports = this.lastUpdatedVieports;\n      } else {\n        this.lastUpdatedVieports = viewports;\n      }\n      if (viewports) {\n        this.doUpdate(viewports);\n      }\n    });\n  }\n\n  /**\n   * Update visible tiles relying on a list of viewports.\n   * Do it with debounce delay to prevent update spam\n   * @param viewports viewports\n   * @returns Promise of new frameNumber\n   */\n  async selectTiles(viewports: Viewport[] | Viewport | null = null): Promise<number> {\n    await this.tilesetInitializationPromise;\n    if (viewports) {\n      this.lastUpdatedVieports = viewports;\n    }\n    if (!this.updatePromise) {\n      this.updatePromise = new Promise<number>((resolve) => {\n        setTimeout(() => {\n          if (this.lastUpdatedVieports) {\n            this.doUpdate(this.lastUpdatedVieports);\n          }\n          resolve(this._frameNumber);\n          this.updatePromise = null;\n        }, this.options.debounceTime);\n      });\n    }\n    return this.updatePromise;\n  }\n\n  /**\n   * Update visible tiles relying on a list of viewports\n   * @param viewports viewports\n   */\n  // eslint-disable-next-line max-statements, complexity\n  private doUpdate(viewports: Viewport[] | Viewport): void {\n    if ('loadTiles' in this.options && !this.options.loadTiles) {\n      return;\n    }\n    if (this.traverseCounter > 0) {\n      return;\n    }\n    const preparedViewports = viewports instanceof Array ? viewports : [viewports];\n\n    this._cache.reset();\n    this._frameNumber++;\n    this.traverseCounter = preparedViewports.length;\n    const viewportsToTraverse: string[] = [];\n    // First loop to decrement traverseCounter\n    for (const viewport of preparedViewports) {\n      const id = viewport.id;\n      if (this._needTraverse(id)) {\n        viewportsToTraverse.push(id);\n      } else {\n        this.traverseCounter--;\n      }\n    }\n\n    // Second loop to traverse\n    for (const viewport of preparedViewports) {\n      const id = viewport.id;\n      if (!this.roots[id]) {\n        this.roots[id] = this._initializeTileHeaders(this.tileset, null);\n      }\n\n      if (!viewportsToTraverse.includes(id)) {\n        continue; // eslint-disable-line no-continue\n      }\n      const frameState = getFrameState(viewport as GeospatialViewport, this._frameNumber);\n      this._traverser.traverse(this.roots[id], frameState, this.options);\n    }\n  }\n\n  /**\n   * Check if traversal is needed for particular viewport\n   * @param {string} viewportId - id of a viewport\n   * @return {boolean}\n   */\n  _needTraverse(viewportId: string): boolean {\n    let traverserId = viewportId;\n    if (this.options.viewportTraversersMap) {\n      traverserId = this.options.viewportTraversersMap[viewportId];\n    }\n    if (traverserId !== viewportId) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * The callback to post-process tiles after traversal procedure\n   * @param frameState - frame state for tile culling\n   */\n  _onTraversalEnd(frameState: FrameState): void {\n    const id = frameState.viewport.id;\n    if (!this.frameStateData[id]) {\n      this.frameStateData[id] = {selectedTiles: [], _requestedTiles: [], _emptyTiles: []};\n    }\n    const currentFrameStateData = this.frameStateData[id];\n    const selectedTiles = Object.values(this._traverser.selectedTiles);\n    const [filteredSelectedTiles, unselectedTiles] = limitSelectedTiles(\n      selectedTiles,\n      frameState,\n      this.options.maximumTilesSelected\n    );\n    currentFrameStateData.selectedTiles = filteredSelectedTiles;\n    for (const tile of unselectedTiles) {\n      tile.unselect();\n    }\n\n    currentFrameStateData._requestedTiles = Object.values(this._traverser.requestedTiles);\n    currentFrameStateData._emptyTiles = Object.values(this._traverser.emptyTiles);\n\n    this.traverseCounter--;\n    if (this.traverseCounter > 0) {\n      return;\n    }\n\n    this._updateTiles();\n  }\n\n  /**\n   * Update tiles relying on data from all traversers\n   */\n  _updateTiles(): void {\n    this.selectedTiles = [];\n    this._requestedTiles = [];\n    this._emptyTiles = [];\n\n    for (const frameStateKey in this.frameStateData) {\n      const frameStateDataValue = this.frameStateData[frameStateKey];\n      this.selectedTiles = this.selectedTiles.concat(frameStateDataValue.selectedTiles);\n      this._requestedTiles = this._requestedTiles.concat(frameStateDataValue._requestedTiles);\n      this._emptyTiles = this._emptyTiles.concat(frameStateDataValue._emptyTiles);\n    }\n\n    this.selectedTiles = this.options.onTraversalComplete(this.selectedTiles);\n\n    for (const tile of this.selectedTiles) {\n      this._tiles[tile.id] = tile;\n    }\n\n    this._loadTiles();\n    this._unloadTiles();\n    this._updateStats();\n  }\n\n  _tilesChanged(oldSelectedTiles, selectedTiles) {\n    if (oldSelectedTiles.length !== selectedTiles.length) {\n      return true;\n    }\n    const set1 = new Set(oldSelectedTiles.map((t) => t.id));\n    const set2 = new Set(selectedTiles.map((t) => t.id));\n    let changed = oldSelectedTiles.filter((x) => !set2.has(x.id)).length > 0;\n    changed = changed || selectedTiles.filter((x) => !set1.has(x.id)).length > 0;\n    return changed;\n  }\n\n  _loadTiles() {\n    // Sort requests by priority before making any requests.\n    // This makes it less likely this requests will be cancelled after being issued.\n    // requestedTiles.sort((a, b) => a._priority - b._priority);\n    for (const tile of this._requestedTiles) {\n      if (tile.contentUnloaded) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this._loadTile(tile);\n      }\n    }\n  }\n\n  _unloadTiles() {\n    // unload tiles from cache when hit maximumMemoryUsage\n    this._cache.unloadTiles(this, (tileset, tile) => tileset._unloadTile(tile));\n  }\n\n  _updateStats() {\n    let tilesRenderable = 0;\n    let pointsRenderable = 0;\n    for (const tile of this.selectedTiles) {\n      if (tile.contentAvailable && tile.content) {\n        tilesRenderable++;\n        if (tile.content.pointCount) {\n          pointsRenderable += tile.content.pointCount;\n        } else {\n          // Calculate vertices for non point cloud tiles.\n          pointsRenderable += tile.content.vertexCount;\n        }\n      }\n    }\n\n    this.stats.get(TILES_IN_VIEW).count = this.selectedTiles.length;\n    this.stats.get(TILES_RENDERABLE).count = tilesRenderable;\n    this.stats.get(POINTS_COUNT).count = pointsRenderable;\n  }\n\n  async _initializeTileSet(tilesetJson) {\n    if (this.type === TILESET_TYPE.I3S) {\n      this.calculateViewPropsI3S();\n      tilesetJson.root = await tilesetJson.root;\n    }\n    this.root = this._initializeTileHeaders(tilesetJson, null);\n\n    if (this.type === TILESET_TYPE.TILES3D) {\n      this._initializeTiles3DTileset(tilesetJson);\n      this.calculateViewPropsTiles3D();\n    }\n\n    if (this.type === TILESET_TYPE.I3S) {\n      this._initializeI3STileset();\n    }\n  }\n\n  /**\n   * Called during initialize Tileset to initialize the tileset's cartographic center (longitude, latitude) and zoom.\n   * These metrics help apps center view on tileset\n   * For I3S there is extent (<1.8 version) or fullExtent (>=1.8 version) to calculate view props\n   * @returns\n   */\n  private calculateViewPropsI3S() {\n    // for I3S 1.8 try to calculate with fullExtent\n    const fullExtent = this.tileset.fullExtent;\n    if (fullExtent) {\n      const {xmin, xmax, ymin, ymax, zmin, zmax} = fullExtent;\n      this.cartographicCenter = new Vector3(\n        xmin + (xmax - xmin) / 2,\n        ymin + (ymax - ymin) / 2,\n        zmin + (zmax - zmin) / 2\n      );\n      this.cartesianCenter = Ellipsoid.WGS84.cartographicToCartesian(\n        this.cartographicCenter,\n        new Vector3()\n      );\n      this.zoom = getZoomFromFullExtent(fullExtent, this.cartographicCenter, this.cartesianCenter);\n      return;\n    }\n    // for I3S 1.6-1.7 try to calculate with extent\n    const extent = this.tileset.store?.extent;\n    if (extent) {\n      const [xmin, ymin, xmax, ymax] = extent;\n      this.cartographicCenter = new Vector3(xmin + (xmax - xmin) / 2, ymin + (ymax - ymin) / 2, 0);\n      this.cartesianCenter = Ellipsoid.WGS84.cartographicToCartesian(\n        this.cartographicCenter,\n        new Vector3()\n      );\n      this.zoom = getZoomFromExtent(extent, this.cartographicCenter, this.cartesianCenter);\n      return;\n    }\n    // eslint-disable-next-line no-console\n    console.warn('Extent is not defined in the tileset header');\n    this.cartographicCenter = new Vector3();\n    this.zoom = 1;\n    return;\n  }\n\n  /**\n   * Called during initialize Tileset to initialize the tileset's cartographic center (longitude, latitude) and zoom.\n   * These metrics help apps center view on tileset.\n   * For 3DTiles the root tile data is used to calculate view props.\n   * @returns\n   */\n  private calculateViewPropsTiles3D() {\n    const root = this.root as Tile3D;\n    assert(root);\n    const {center} = root.boundingVolume;\n    // TODO - handle all cases\n    if (!center) {\n      // eslint-disable-next-line no-console\n      console.warn('center was not pre-calculated for the root tile');\n      this.cartographicCenter = new Vector3();\n      this.zoom = 1;\n      return;\n    }\n\n    // cartographic coordinates are undefined at the center of the ellipsoid\n    if (center[0] !== 0 || center[1] !== 0 || center[2] !== 0) {\n      this.cartographicCenter = Ellipsoid.WGS84.cartesianToCartographic(center, new Vector3());\n    } else {\n      this.cartographicCenter = new Vector3(0, 0, -Ellipsoid.WGS84.radii[0]);\n    }\n    this.cartesianCenter = center;\n    this.zoom = getZoomFromBoundingVolume(root.boundingVolume, this.cartographicCenter);\n  }\n\n  _initializeStats() {\n    this.stats.get(TILES_TOTAL);\n    this.stats.get(TILES_LOADING);\n    this.stats.get(TILES_IN_MEMORY);\n    this.stats.get(TILES_IN_VIEW);\n    this.stats.get(TILES_RENDERABLE);\n    this.stats.get(TILES_LOADED);\n    this.stats.get(TILES_UNLOADED);\n    this.stats.get(TILES_LOAD_FAILED);\n    this.stats.get(POINTS_COUNT);\n    this.stats.get(TILES_GPU_MEMORY, 'memory');\n  }\n\n  // Installs the main tileset JSON file or a tileset JSON file referenced from a tile.\n  // eslint-disable-next-line max-statements\n  _initializeTileHeaders(tilesetJson, parentTileHeader) {\n    // A tileset JSON file referenced from a tile may exist in a different directory than the root tileset.\n    // Get the basePath relative to the external tileset.\n    const rootTile = new Tile3D(this, tilesetJson.root, parentTileHeader); // resource\n\n    // If there is a parentTileHeader, add the root of the currently loading tileset\n    // to parentTileHeader's children, and update its depth.\n    if (parentTileHeader) {\n      parentTileHeader.children.push(rootTile);\n      rootTile.depth = parentTileHeader.depth + 1;\n    }\n\n    // 3DTiles knows the hierarchy beforehand\n    if (this.type === TILESET_TYPE.TILES3D) {\n      const stack: Tile3D[] = [];\n      stack.push(rootTile);\n\n      while (stack.length > 0) {\n        const tile = stack.pop() as Tile3D;\n        this.stats.get(TILES_TOTAL).incrementCount();\n        const children = tile.header.children || [];\n        for (const childHeader of children) {\n          const childTile = new Tile3D(this, childHeader, tile);\n          tile.children.push(childTile);\n          childTile.depth = tile.depth + 1;\n          stack.push(childTile);\n        }\n      }\n    }\n\n    return rootTile;\n  }\n\n  _initializeTraverser() {\n    let TraverserClass;\n    const type = this.type;\n    switch (type) {\n      case TILESET_TYPE.TILES3D:\n        TraverserClass = Tileset3DTraverser;\n        break;\n      case TILESET_TYPE.I3S:\n        TraverserClass = I3STilesetTraverser;\n        break;\n      default:\n        TraverserClass = TilesetTraverser;\n    }\n\n    return new TraverserClass({\n      basePath: this.basePath,\n      onTraversalEnd: this._onTraversalEnd.bind(this)\n    });\n  }\n\n  _destroyTileHeaders(parentTile) {\n    this._destroySubtree(parentTile);\n  }\n\n  async _loadTile(tile) {\n    let loaded;\n    try {\n      this._onStartTileLoading();\n      loaded = await tile.loadContent();\n    } catch (error) {\n      this._onTileLoadError(tile, error);\n    } finally {\n      this._onEndTileLoading();\n      this._onTileLoad(tile, loaded);\n    }\n  }\n\n  _onTileLoadError(tile, error) {\n    this.stats.get(TILES_LOAD_FAILED).incrementCount();\n\n    const message = error.message || error.toString();\n    const url = tile.url;\n    // TODO - Allow for probe log to be injected instead of console?\n    console.error(`A 3D tile failed to load: ${tile.url} ${message}`); // eslint-disable-line\n    this.options.onTileError(tile, message, url);\n  }\n\n  _onTileLoad(tile, loaded) {\n    if (!loaded) {\n      return;\n    }\n\n    if (this.type === TILESET_TYPE.I3S) {\n      // We can't calculate tiles total in I3S in advance so we calculate it dynamically.\n      const nodesInNodePages = this.tileset?.nodePagesTile?.nodesInNodePages || 0;\n      this.stats.get(TILES_TOTAL).reset();\n      this.stats.get(TILES_TOTAL).addCount(nodesInNodePages);\n    }\n\n    // add coordinateOrigin and modelMatrix to tile\n    if (tile && tile.content) {\n      calculateTransformProps(tile, tile.content);\n    }\n\n    this.updateContentTypes(tile);\n    this._addTileToCache(tile);\n    this.options.onTileLoad(tile);\n  }\n\n  /**\n   * Update information about data types in nested tiles\n   * @param tile instance of a nested Tile3D\n   */\n  private updateContentTypes(tile: Tile3D) {\n    if (this.type === TILESET_TYPE.I3S) {\n      if (tile.header.isDracoGeometry) {\n        this.contentFormats.draco = true;\n      }\n      switch (tile.header.textureFormat) {\n        case 'dds':\n          this.contentFormats.dds = true;\n          break;\n        case 'ktx2':\n          this.contentFormats.ktx2 = true;\n          break;\n        default:\n      }\n    } else if (this.type === TILESET_TYPE.TILES3D) {\n      const {extensionsRemoved = []} = tile.content?.gltf || {};\n      if (extensionsRemoved.includes('KHR_draco_mesh_compression')) {\n        this.contentFormats.draco = true;\n      }\n      if (extensionsRemoved.includes('EXT_meshopt_compression')) {\n        this.contentFormats.meshopt = true;\n      }\n      if (extensionsRemoved.includes('KHR_texture_basisu')) {\n        this.contentFormats.ktx2 = true;\n      }\n    }\n  }\n\n  _onStartTileLoading() {\n    this._pendingCount++;\n    this.stats.get(TILES_LOADING).incrementCount();\n  }\n\n  _onEndTileLoading() {\n    this._pendingCount--;\n    this.stats.get(TILES_LOADING).decrementCount();\n  }\n\n  _addTileToCache(tile) {\n    this._cache.add(this, tile, (tileset) => tileset._updateCacheStats(tile));\n  }\n\n  _updateCacheStats(tile) {\n    this.stats.get(TILES_LOADED).incrementCount();\n    this.stats.get(TILES_IN_MEMORY).incrementCount();\n\n    // Good enough? Just use the raw binary ArrayBuffer's byte length.\n    this.gpuMemoryUsageInBytes += tile.content.byteLength || 0;\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n  }\n\n  _unloadTile(tile) {\n    this.gpuMemoryUsageInBytes -= (tile.content && tile.content.byteLength) || 0;\n\n    this.stats.get(TILES_IN_MEMORY).decrementCount();\n    this.stats.get(TILES_UNLOADED).incrementCount();\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n\n    this.options.onTileUnload(tile);\n    tile.unloadContent();\n  }\n\n  // Traverse the tree and destroy all tiles\n  _destroy() {\n    const stack: Tile3D[] = [];\n\n    if (this.root) {\n      stack.push(this.root);\n    }\n\n    while (stack.length > 0) {\n      const tile: Tile3D = stack.pop() as Tile3D;\n\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n\n      this._destroyTile(tile);\n    }\n    this.root = null;\n  }\n\n  // Traverse the tree and destroy all sub tiles\n  _destroySubtree(tile) {\n    const root = tile;\n    const stack: Tile3D[] = [];\n    stack.push(root);\n    while (stack.length > 0) {\n      tile = stack.pop();\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n      if (tile !== root) {\n        this._destroyTile(tile);\n      }\n    }\n    root.children = [];\n  }\n\n  _destroyTile(tile) {\n    this._cache.unloadTile(this, tile);\n    this._unloadTile(tile);\n    tile.destroy();\n  }\n\n  _initializeTiles3DTileset(tilesetJson) {\n    this.asset = tilesetJson.asset;\n    if (!this.asset) {\n      throw new Error('Tileset must have an asset property.');\n    }\n    if (this.asset.version !== '0.0' && this.asset.version !== '1.0') {\n      throw new Error('The tileset must be 3D Tiles version 0.0 or 1.0.');\n    }\n\n    // Note: `asset.tilesetVersion` is version of the tileset itself (not the version of the 3D TILES standard)\n    // We add this version as a `v=1.0` query param to fetch the right version and not get an older cached version\n    if ('tilesetVersion' in this.asset) {\n      this._queryParams.v = this.asset.tilesetVersion;\n    }\n\n    // TODO - ion resources have a credits property we can use for additional attribution.\n    this.credits = {\n      attributions: this.options.attributions || []\n    };\n    this.description = this.options.description || '';\n\n    // Gets the tileset's properties dictionary object, which contains metadata about per-feature properties.\n    this.properties = tilesetJson.properties;\n    this.geometricError = tilesetJson.geometricError;\n    this._extensionsUsed = tilesetJson.extensionsUsed;\n    // Returns the extras property at the top of the tileset JSON (application specific metadata).\n    this.extras = tilesetJson.extras;\n  }\n\n  _initializeI3STileset() {\n    if (this.loadOptions.i3s && 'token' in this.loadOptions.i3s) {\n      this._queryParams.token = this.loadOptions.i3s.token;\n    }\n  }\n}\n\nfunction getQueryParamString(queryParams): string {\n  const queryParamStrings: string[] = [];\n  for (const key of Object.keys(queryParams)) {\n    queryParamStrings.push(`${key}=${queryParams[key]}`);\n  }\n  switch (queryParamStrings.length) {\n    case 0:\n      return '';\n    case 1:\n      return `?${queryParamStrings[0]}`;\n    default:\n      return `?${queryParamStrings.join('&')}`;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}