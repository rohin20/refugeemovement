{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.KeplerGLSchema = exports.reducerSchema = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _window = require(\"global/window\");\nvar _datasetSchema = _interopRequireDefault(require(\"./dataset-schema\"));\nvar _mapStyleSchema = _interopRequireDefault(require(\"./map-style-schema\"));\nvar _mapStateSchema = _interopRequireDefault(require(\"./map-state-schema\"));\nvar _visStateSchema = require(\"./vis-state-schema\");\nvar _versions = require(\"./versions\");\nvar _utils = require(\"@kepler.gl/utils\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar reducerSchema = {\n  visState: _visStateSchema.visStateSchema,\n  mapState: _mapStateSchema[\"default\"],\n  mapStyle: _mapStyleSchema[\"default\"]\n};\nexports.reducerSchema = reducerSchema;\nvar KeplerGLSchema = /*#__PURE__*/function () {\n  function KeplerGLSchema() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$reducers = _ref.reducers,\n      reducers = _ref$reducers === void 0 ? reducerSchema : _ref$reducers,\n      _ref$datasets = _ref.datasets,\n      datasets = _ref$datasets === void 0 ? _datasetSchema[\"default\"] : _ref$datasets,\n      _ref$validVersions = _ref.validVersions,\n      validVersions = _ref$validVersions === void 0 ? _versions.VERSIONS : _ref$validVersions,\n      _ref$version = _ref.version,\n      version = _ref$version === void 0 ? _versions.CURRENT_VERSION : _ref$version;\n    (0, _classCallCheck2[\"default\"])(this, KeplerGLSchema);\n    (0, _defineProperty2[\"default\"])(this, \"_validVersions\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"_version\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"_reducerSchemas\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"_datasetSchema\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"_datasetLastSaved\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"_savedDataset\", void 0);\n    this._validVersions = validVersions;\n    this._version = version;\n    this._reducerSchemas = reducers;\n    this._datasetSchema = datasets;\n    this._datasetLastSaved = null;\n    this._savedDataset = null;\n  }\n  /**\n   * stateToSave = {\n   *   datasets: [\n   *     {\n   *       version: 'v0',\n   *       data: {id, label, color, allData, fields}\n   *     },\n   *     {\n   *       version: 'v0',\n   *       data: {id, label, color, allData, fields}\n   *     }\n   *   ],\n   *   config: {\n   *     version: 'v0',\n   *     config: {}\n   *   },\n   *   info: {\n   *     app: 'kepler.gl',\n   *     create_at: 'Mon May 28 2018 21:04:46 GMT-0700 (PDT)'\n   *   }\n   * }\n   *\n   * Get config and data of current map to save\n   * @param state\n   * @returns app state to save\n   */\n\n  (0, _createClass2[\"default\"])(KeplerGLSchema, [{\n    key: \"save\",\n    value: function save(state) {\n      return {\n        datasets: this.getDatasetToSave(state),\n        config: this.getConfigToSave(state),\n        info: _objectSpread({\n          app: 'kepler.gl',\n          created_at: new Date().toString()\n        }, this.getMapInfo(state))\n      };\n    }\n  }, {\n    key: \"getMapInfo\",\n    value: function getMapInfo(state) {\n      return state.visState.mapInfo;\n    }\n    /**\n     *  Load saved map, argument can be (datasets, config) or ({datasets, config})\n     * @param savedDatasets\n     * @param savedConfig\n     */\n  }, {\n    key: \"load\",\n    value: function load(savedDatasets, savedConfig) {\n      // if pass dataset and config in as a single object\n      if (arguments.length === 1 && (0, _utils.isPlainObject)(arguments[0]) && (Array.isArray(arguments[0].datasets) || (0, _utils.isPlainObject)(arguments[0].config))) {\n        return this.load(arguments[0].datasets, arguments[0].config);\n      }\n      return _objectSpread(_objectSpread({}, Array.isArray(savedDatasets) ? {\n        datasets: this.parseSavedData(savedDatasets)\n      } : {}), savedConfig ? {\n        config: this.parseSavedConfig(savedConfig)\n      } : {});\n    }\n    /**\n     * Get data to save\n     * @param state - app state\n     * @returns - dataset to save\n     */\n  }, {\n    key: \"getDatasetToSave\",\n    value: function getDatasetToSave(state) {\n      var _this = this;\n      var dataChangedSinceLastSave = this.hasDataChanged(state);\n      if (!dataChangedSinceLastSave) {\n        // @ts-expect-error\n        return this._savedDataset;\n      }\n      var visState = state.visState;\n      var datasets = Object.values(visState.datasets).map(function (ds) {\n        return {\n          version: _this._version,\n          data: _this._datasetSchema[_this._version].save(ds)\n        };\n      }); // keep a copy of formatted datasets to save\n\n      this._datasetLastSaved = visState.datasets;\n      this._savedDataset = datasets;\n      return datasets;\n    }\n    /**\n     * Get App config to save\n     * @param {Object} state - app state\n     * @returns {{version: String, config: Object}} - config to save\n     */\n  }, {\n    key: \"getConfigToSave\",\n    value: function getConfigToSave(state) {\n      var _this2 = this;\n      var config = Object.keys(this._reducerSchemas).reduce(function (accu, key) {\n        return _objectSpread(_objectSpread({}, accu), state[key] ? _this2._reducerSchemas[key][_this2._version].save(state[key]) : {});\n      }, {});\n      return {\n        version: this._version,\n        // @ts-expect-error\n        config: config\n      };\n    }\n    /**\n     * Parse saved data\n     * @param datasets\n     * @returns - dataset to pass to addDataToMap\n     */\n  }, {\n    key: \"parseSavedData\",\n    value: function parseSavedData(datasets) {\n      var _this3 = this;\n      return datasets.reduce(function (accu, ds) {\n        var validVersion = _this3.validateVersion(ds.version);\n        if (!validVersion) {\n          return accu;\n        }\n        accu.push(_this3._datasetSchema[validVersion].load(ds.data));\n        return accu;\n      }, []);\n    }\n    /**\n     * Parse saved App config\n     */\n  }, {\n    key: \"parseSavedConfig\",\n    value: function parseSavedConfig(_ref2) {\n      var _this4 = this;\n      var version = _ref2.version,\n        config = _ref2.config;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var validVersion = this.validateVersion(version);\n      if (!validVersion) {\n        return null;\n      } // @ts-expect-error\n\n      return Object.keys(config).reduce(function (accu, key) {\n        return _objectSpread(_objectSpread({}, accu), key in _this4._reducerSchemas ? _this4._reducerSchemas[key][validVersion].load(config[key]) : {});\n      }, {});\n    }\n    /**\n     * Validate version\n     * @param version\n     * @returns validVersion\n     */\n  }, {\n    key: \"validateVersion\",\n    value: function validateVersion(version) {\n      if (!version) {\n        _window.console.error('There is no version number associated with this saved map');\n        return null;\n      }\n      if (!this._validVersions[version]) {\n        _window.console.error(\"\".concat(version, \" is not a valid version\"));\n        return null;\n      }\n      return version;\n    }\n    /**\n     * Check if data has changed since last save\n     * @param state\n     * @returns - whether data has changed or not\n     */\n  }, {\n    key: \"hasDataChanged\",\n    value: function hasDataChanged(state) {\n      return true; // return this._datasetLastSaved !== state.visState.datasets;\n    }\n  }]);\n\n  return KeplerGLSchema;\n}();\nexports.KeplerGLSchema = KeplerGLSchema;\nvar KeplerGLSchemaManager = new KeplerGLSchema();\nvar _default = KeplerGLSchemaManager;\nexports[\"default\"] = _default;","map":{"version":3,"names":["value","exports","KeplerGLSchema","reducerSchema","_defineProperty2","_interopRequireDefault","require","_window","_datasetSchema","_mapStateSchema","_visStateSchema","_versions","_utils","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","visState","visStateSchema","mapState","mapStyle","_mapStyleSchema","_reducerSchemas","_ref","arguments","length","undefined","_ref$reducers","reducers","_ref$datasets","datasets","_ref$validVersions","validVersions","VERSIONS","_ref$version","version","CURRENT_VERSION","_classCallCheck2","_validVersions","_version","_datasetLastSaved","_savedDataset","_createClass2","key","getConfigToSave","state","info","_objectSpread","app","created_at","Date","toString","getMapInfo","mapInfo","load","savedDatasets","savedConfig","config","Array","isArray","parseSavedData","getDatasetToSave","_this","dataChangedSinceLastSave","hasDataChanged","values","map","ds","data","save","_this2","reduce","accu","_this3","validVersion","validateVersion","parseSavedConfig","_ref2","_this4"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/schemas/src/schema-manager.ts"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {console as Console} from 'global/window';\n\nimport {Datasets} from '@kepler.gl/table';\nimport datasetSchema from './dataset-schema';\nimport mapStyleSchema from './map-style-schema';\nimport mapStateSchema from './map-state-schema';\nimport {SavedDatasetV1, ParsedDataset} from './dataset-schema';\nimport {visStateSchema} from './vis-state-schema';\n\nimport {CURRENT_VERSION, VERSIONS} from './versions';\nimport {isPlainObject} from '@kepler.gl/utils';\n\nimport {MapInfo, ParsedVisState, RGBColor, SavedVisState} from '@kepler.gl/types';\n\nexport type SavedMapState = {\n  bearing: number;\n  dragRotate: boolean;\n  latitude: number;\n  longitude: number;\n  pitch: number;\n  zoom: number;\n  isSplit: boolean;\n};\n\nexport type SavedLayerGroups = {\n  [key: string]: boolean;\n};\n\nexport type SavedCustomMapStyle = {\n  [key: string]: {\n    accessToken: string;\n    custom: boolean;\n    icon: string;\n    id: string;\n    label: string;\n    url: string;\n  };\n};\n\nexport type SavedMapStyle = {\n  styleType: string;\n  topLayerGroups: SavedLayerGroups;\n  visibleLayerGroups: SavedLayerGroups;\n  threeDBuildingColor: RGBColor;\n  mapStyles: SavedCustomMapStyle;\n};\n\n/** Schema for v1 saved configuration */\nexport type SavedConfigV1 = {\n  version: 'v1';\n  config: {\n    visState: SavedVisState;\n    mapState: SavedMapState;\n    mapStyle: SavedMapStyle;\n  };\n};\n\n/** Schema for a parsed configuration (\"normalized\" across versions) */\nexport type ParsedConfig = {\n  version: string;\n  visState?: ParsedVisState;\n  mapState?: Partial<SavedMapState>;\n  mapStyle?: Partial<SavedMapStyle>;\n};\n\nexport type SavedMap = {\n  datasets: SavedDatasetV1[];\n  config: SavedConfigV1;\n  info: {\n    app: string;\n    created_at: string;\n    title: string;\n    description: string;\n  };\n};\n\nexport type LoadedMap = {datasets?: ParsedDataset[] | null; config?: ParsedConfig | null};\n\nexport const reducerSchema: {\n  [key: string]: typeof mapStateSchema | typeof visStateSchema | typeof mapStyleSchema;\n} = {\n  visState: visStateSchema,\n  mapState: mapStateSchema,\n  mapStyle: mapStyleSchema\n};\n\nexport class KeplerGLSchema {\n  _validVersions: typeof VERSIONS;\n  _version: 'v1';\n  _reducerSchemas: typeof reducerSchema;\n  _datasetSchema: typeof datasetSchema;\n  _datasetLastSaved: SavedDatasetV1[] | null;\n  _savedDataset: SavedDatasetV1[] | null;\n\n  constructor({\n    reducers = reducerSchema,\n    datasets = datasetSchema,\n    validVersions = VERSIONS,\n    version = CURRENT_VERSION\n  }: {\n    reducers?: typeof reducerSchema;\n    datasets?: typeof datasetSchema;\n    validVersions?: typeof VERSIONS;\n    version?: 'v1';\n  } = {}) {\n    this._validVersions = validVersions;\n    this._version = version;\n    this._reducerSchemas = reducers;\n    this._datasetSchema = datasets;\n\n    this._datasetLastSaved = null;\n    this._savedDataset = null;\n  }\n\n  /**\n   * stateToSave = {\n   *   datasets: [\n   *     {\n   *       version: 'v0',\n   *       data: {id, label, color, allData, fields}\n   *     },\n   *     {\n   *       version: 'v0',\n   *       data: {id, label, color, allData, fields}\n   *     }\n   *   ],\n   *   config: {\n   *     version: 'v0',\n   *     config: {}\n   *   },\n   *   info: {\n   *     app: 'kepler.gl',\n   *     create_at: 'Mon May 28 2018 21:04:46 GMT-0700 (PDT)'\n   *   }\n   * }\n   *\n   * Get config and data of current map to save\n   * @param state\n   * @returns app state to save\n   */\n  save(state: any): SavedMap {\n    return {\n      datasets: this.getDatasetToSave(state),\n      config: this.getConfigToSave(state),\n      info: {\n        app: 'kepler.gl',\n        created_at: new Date().toString(),\n        ...this.getMapInfo(state)\n      }\n    };\n  }\n\n  getMapInfo(state: any): MapInfo {\n    return state.visState.mapInfo;\n  }\n  /**\n   *  Load saved map, argument can be (datasets, config) or ({datasets, config})\n   * @param savedDatasets\n   * @param savedConfig\n   */\n  load(\n    savedDatasets: SavedMap | SavedMap['datasets'] | any,\n    savedConfig: SavedMap['config'] | any\n  ): LoadedMap {\n    // if pass dataset and config in as a single object\n    if (\n      arguments.length === 1 &&\n      isPlainObject(arguments[0]) &&\n      (Array.isArray(arguments[0].datasets) || isPlainObject(arguments[0].config))\n    ) {\n      return this.load(arguments[0].datasets, arguments[0].config);\n    }\n\n    return {\n      ...(Array.isArray(savedDatasets) ? {datasets: this.parseSavedData(savedDatasets)} : {}),\n      ...(savedConfig ? {config: this.parseSavedConfig(savedConfig)} : {})\n    };\n  }\n\n  /**\n   * Get data to save\n   * @param state - app state\n   * @returns - dataset to save\n   */\n  getDatasetToSave(state: any): SavedDatasetV1[] {\n    const dataChangedSinceLastSave = this.hasDataChanged(state);\n    if (!dataChangedSinceLastSave) {\n      // @ts-expect-error\n      return this._savedDataset;\n    }\n\n    const {visState} = state;\n\n    const datasets = Object.values(visState.datasets as Datasets).map(ds => ({\n      version: this._version,\n      data: this._datasetSchema[this._version].save(ds)\n    }));\n\n    // keep a copy of formatted datasets to save\n    this._datasetLastSaved = visState.datasets;\n    this._savedDataset = datasets;\n\n    return datasets;\n  }\n\n  /**\n   * Get App config to save\n   * @param {Object} state - app state\n   * @returns {{version: String, config: Object}} - config to save\n   */\n  getConfigToSave(state: any): SavedConfigV1 {\n    const config = Object.keys(this._reducerSchemas).reduce(\n      (accu, key) => ({\n        ...accu,\n        ...(state[key] ? this._reducerSchemas[key][this._version].save(state[key]) : {})\n      }),\n      {}\n    );\n\n    return {\n      version: this._version,\n      // @ts-expect-error\n      config\n    };\n  }\n\n  /**\n   * Parse saved data\n   * @param datasets\n   * @returns - dataset to pass to addDataToMap\n   */\n  parseSavedData(datasets: any): ParsedDataset[] | null {\n    return datasets.reduce((accu, ds) => {\n      const validVersion = this.validateVersion(ds.version);\n      if (!validVersion) {\n        return accu;\n      }\n      accu.push(this._datasetSchema[validVersion].load(ds.data));\n      return accu;\n    }, []);\n  }\n\n  /**\n   * Parse saved App config\n   */\n  parseSavedConfig({version, config}, state = {}): ParsedConfig | null {\n    const validVersion = this.validateVersion(version);\n    if (!validVersion) {\n      return null;\n    }\n\n    // @ts-expect-error\n    return Object.keys(config).reduce(\n      (accu, key) => ({\n        ...accu,\n        ...(key in this._reducerSchemas\n          ? this._reducerSchemas[key][validVersion].load(config[key])\n          : {})\n      }),\n      {}\n    );\n  }\n\n  /**\n   * Validate version\n   * @param version\n   * @returns validVersion\n   */\n  validateVersion(version: any): string | null {\n    if (!version) {\n      Console.error('There is no version number associated with this saved map');\n      return null;\n    }\n\n    if (!this._validVersions[version]) {\n      Console.error(`${version} is not a valid version`);\n      return null;\n    }\n\n    return version;\n  }\n\n  /**\n   * Check if data has changed since last save\n   * @param state\n   * @returns - whether data has changed or not\n   */\n  hasDataChanged(state: any): boolean {\n    return true;\n    // return this._datasetLastSaved !== state.visState.datasets;\n  }\n}\n\nconst KeplerGLSchemaManager = new KeplerGLSchema();\n\nexport default KeplerGLSchemaManager;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}