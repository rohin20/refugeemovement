{"ast":null,"code":"import { sliceArrayBuffer } from './array-buffer-utils';\nexport function padTo4Bytes(byteLength) {\n  return byteLength + 3 & ~3;\n}\nexport function getZeroOffsetArrayBuffer(arrayBuffer, byteOffset, byteLength) {\n  return sliceArrayBuffer(arrayBuffer, byteOffset, byteLength);\n}\nexport function copyArrayBuffer(targetBuffer, sourceBuffer, byteOffset) {\n  var byteLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : sourceBuffer.byteLength;\n  var targetArray = new Uint8Array(targetBuffer, byteOffset, byteLength);\n  var sourceArray = new Uint8Array(sourceBuffer);\n  targetArray.set(sourceArray);\n  return targetBuffer;\n}\nexport function copyToArray(source, target, targetOffset) {\n  var sourceArray;\n  if (source instanceof ArrayBuffer) {\n    sourceArray = new Uint8Array(source);\n  } else {\n    var srcByteOffset = source.byteOffset;\n    var srcByteLength = source.byteLength;\n    sourceArray = new Uint8Array(source.buffer, srcByteOffset, srcByteLength);\n  }\n  target.set(sourceArray, targetOffset);\n  return targetOffset + padTo4Bytes(sourceArray.byteLength);\n}","map":{"version":3,"names":["sliceArrayBuffer","padTo4Bytes","byteLength","getZeroOffsetArrayBuffer","arrayBuffer","byteOffset","copyArrayBuffer","targetBuffer","sourceBuffer","arguments","length","undefined","targetArray","Uint8Array","sourceArray","set","copyToArray","source","target","targetOffset","ArrayBuffer","srcByteOffset","srcByteLength","buffer"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/json/node_modules/@loaders.gl/loader-utils/src/lib/binary-utils/memory-copy-utils.js"],"sourcesContent":["import {sliceArrayBuffer} from './array-buffer-utils';\n\nexport function padTo4Bytes(byteLength) {\n  return (byteLength + 3) & ~3;\n}\n\nexport function getZeroOffsetArrayBuffer(arrayBuffer, byteOffset, byteLength) {\n  return sliceArrayBuffer(arrayBuffer, byteOffset, byteLength);\n}\n\n/* Creates a new Uint8Array based on two different ArrayBuffers\n * @private\n * @param {ArrayBuffers} buffer1 The first buffer.\n * @param {ArrayBuffers} buffer2 The second buffer.\n * @return {ArrayBuffers} The new ArrayBuffer created out of the two.\n */\nexport function copyArrayBuffer(\n  targetBuffer,\n  sourceBuffer,\n  byteOffset,\n  byteLength = sourceBuffer.byteLength\n) {\n  const targetArray = new Uint8Array(targetBuffer, byteOffset, byteLength);\n  const sourceArray = new Uint8Array(sourceBuffer);\n  targetArray.set(sourceArray);\n  return targetBuffer;\n}\n\n/**\n * Copy from source to target at the targetOffset\n *\n * @param {ArrayBuffer|any} source - The data to copy\n * @param {any} target - The destination to copy data into\n * @param {Number} targetOffset - The start offset into target to place the copied data\n *\n * @return {Number} Returns the new offset taking into account proper padding\n */\nexport function copyToArray(source, target, targetOffset) {\n  let sourceArray;\n\n  if (source instanceof ArrayBuffer) {\n    sourceArray = new Uint8Array(source);\n  } else {\n    // Pack buffer onto the big target array\n    //\n    // 'source.data.buffer' could be a view onto a larger buffer.\n    // We MUST use this constructor to ensure the byteOffset and byteLength is\n    // set to correct values from 'source.data' and not the underlying\n    // buffer for target.set() to work properly.\n    const srcByteOffset = source.byteOffset;\n    const srcByteLength = source.byteLength;\n    sourceArray = new Uint8Array(source.buffer, srcByteOffset, srcByteLength);\n  }\n\n  // Pack buffer onto the big target array\n  target.set(sourceArray, targetOffset);\n\n  return targetOffset + padTo4Bytes(sourceArray.byteLength);\n}\n"],"mappings":"AAAA,SAAQA,gBAAR,QAA+B,sBAA/B;AAEA,OAAO,SAASC,WAATA,CAAqBC,UAArB,EAAiC;EACtC,OAAQA,UAAU,GAAG,CAAd,GAAmB,CAAC,CAA3B;AACD;AAED,OAAO,SAASC,wBAATA,CAAkCC,WAAlC,EAA+CC,UAA/C,EAA2DH,UAA3D,EAAuE;EAC5E,OAAOF,gBAAgB,CAACI,WAAD,EAAcC,UAAd,EAA0BH,UAA1B,CAAvB;AACD;AAQD,OAAO,SAASI,eAATA,CACLC,YADK,EAELC,YAFK,EAGLH,UAHK,EAKL;EAAA,IADAH,UACA,GAAAO,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MADaD,YAAY,CAACN,UAC1B;EACA,IAAMU,WAAW,GAAG,IAAIC,UAAJ,CAAeN,YAAf,EAA6BF,UAA7B,EAAyCH,UAAzC,CAApB;EACA,IAAMY,WAAW,GAAG,IAAID,UAAJ,CAAeL,YAAf,CAApB;EACAI,WAAW,CAACG,GAAZ,CAAgBD,WAAhB;EACA,OAAOP,YAAP;AACD;AAWD,OAAO,SAASS,WAATA,CAAqBC,MAArB,EAA6BC,MAA7B,EAAqCC,YAArC,EAAmD;EACxD,IAAIL,WAAJ;EAEA,IAAIG,MAAM,YAAYG,WAAtB,EAAmC;IACjCN,WAAW,GAAG,IAAID,UAAJ,CAAeI,MAAf,CAAd;EACD,CAFD,MAEO;IAOL,IAAMI,aAAa,GAAGJ,MAAM,CAACZ,UAA7B;IACA,IAAMiB,aAAa,GAAGL,MAAM,CAACf,UAA7B;IACAY,WAAW,GAAG,IAAID,UAAJ,CAAeI,MAAM,CAACM,MAAtB,EAA8BF,aAA9B,EAA6CC,aAA7C,CAAd;EACD;EAGDJ,MAAM,CAACH,GAAP,CAAWD,WAAX,EAAwBK,YAAxB;EAEA,OAAOA,YAAY,GAAGlB,WAAW,CAACa,WAAW,CAACZ,UAAb,CAAjC;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}