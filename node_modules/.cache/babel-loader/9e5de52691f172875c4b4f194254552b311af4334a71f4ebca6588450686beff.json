{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.arcVisConfigs = exports.arcColumnLabels = exports.arcRequiredColumns = exports.arcPosAccessor = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _baseLayer = _interopRequireDefault(require(\"../base-layer\"));\nvar _extensions = require(\"@deck.gl/extensions\");\nvar _layers = require(\"@deck.gl/layers\");\nvar _utils = require(\"@kepler.gl/utils\");\nvar _arcLayerIcon = _interopRequireDefault(require(\"./arc-layer-icon\"));\nvar _constants = require(\"@kepler.gl/constants\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar arcPosAccessor = function arcPosAccessor(_ref) {\n  var lat0 = _ref.lat0,\n    lng0 = _ref.lng0,\n    lat1 = _ref.lat1,\n    lng1 = _ref.lng1;\n  return function (dc) {\n    return function (d) {\n      return [dc.valueAt(d.index, lng0.fieldIdx), dc.valueAt(d.index, lat0.fieldIdx), 0, dc.valueAt(d.index, lng1.fieldIdx), dc.valueAt(d.index, lat1.fieldIdx), 0];\n    };\n  };\n};\nexports.arcPosAccessor = arcPosAccessor;\nvar arcRequiredColumns = ['lat0', 'lng0', 'lat1', 'lng1'];\nexports.arcRequiredColumns = arcRequiredColumns;\nvar arcColumnLabels = {\n  lat0: 'arc.lat0',\n  lng0: 'arc.lng0',\n  lat1: 'arc.lat1',\n  lng1: 'arc.lng1'\n};\nexports.arcColumnLabels = arcColumnLabels;\nvar arcVisConfigs = {\n  opacity: 'opacity',\n  thickness: 'thickness',\n  colorRange: 'colorRange',\n  sizeRange: 'strokeWidthRange',\n  targetColor: 'targetColor'\n};\nexports.arcVisConfigs = arcVisConfigs;\nvar ArcLayer = /*#__PURE__*/function (_Layer) {\n  (0, _inherits2[\"default\"])(ArcLayer, _Layer);\n  var _super = _createSuper(ArcLayer);\n  function ArcLayer(props) {\n    var _this;\n    (0, _classCallCheck2[\"default\"])(this, ArcLayer);\n    _this = _super.call(this, props);\n    _this.registerVisConfig(arcVisConfigs);\n    _this.getPositionAccessor = function (dataContainer) {\n      return arcPosAccessor(_this.config.columns)(dataContainer);\n    };\n    return _this;\n  }\n  (0, _createClass2[\"default\"])(ArcLayer, [{\n    key: \"type\",\n    get: function get() {\n      return 'arc';\n    }\n  }, {\n    key: \"isAggregated\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"layerIcon\",\n    get: function get() {\n      return _arcLayerIcon[\"default\"];\n    }\n  }, {\n    key: \"requiredLayerColumns\",\n    get: function get() {\n      return arcRequiredColumns;\n    }\n  }, {\n    key: \"columnLabels\",\n    get: function get() {\n      return arcColumnLabels;\n    }\n  }, {\n    key: \"columnPairs\",\n    get: function get() {\n      return this.defaultLinkColumnPairs;\n    }\n  }, {\n    key: \"visualChannels\",\n    get: function get() {\n      return {\n        sourceColor: _objectSpread(_objectSpread({}, (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(ArcLayer.prototype), \"visualChannels\", this).color), {}, {\n          property: 'color',\n          key: 'sourceColor',\n          accessor: 'getSourceColor',\n          defaultValue: function defaultValue(config) {\n            return config.color;\n          }\n        }),\n        targetColor: _objectSpread(_objectSpread({}, (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(ArcLayer.prototype), \"visualChannels\", this).color), {}, {\n          property: 'targetColor',\n          key: 'targetColor',\n          accessor: 'getTargetColor',\n          defaultValue: function defaultValue(config) {\n            return config.visConfig.targetColor || config.color;\n          }\n        }),\n        size: _objectSpread(_objectSpread({}, (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(ArcLayer.prototype), \"visualChannels\", this).size), {}, {\n          accessor: 'getWidth',\n          property: 'stroke'\n        })\n      };\n    }\n  }, {\n    key: \"calculateDataAttribute\",\n    value: function calculateDataAttribute(_ref2, getPosition) {\n      var dataContainer = _ref2.dataContainer,\n        filteredIndex = _ref2.filteredIndex;\n      var data = [];\n      for (var i = 0; i < filteredIndex.length; i++) {\n        var index = filteredIndex[i];\n        var pos = getPosition({\n          index: index\n        }); // if doesn't have point lat or lng, do not add the point\n        // deck.gl can't handle position = null\n\n        if (pos.every(Number.isFinite)) {\n          data.push({\n            index: index,\n            sourcePosition: [pos[0], pos[1], pos[2]],\n            targetPosition: [pos[3], pos[4], pos[5]]\n          });\n        }\n      }\n      return data;\n    }\n  }, {\n    key: \"formatLayerData\",\n    value: function formatLayerData(datasets, oldLayerData) {\n      if (this.config.dataId === null) {\n        return {};\n      }\n      var _datasets$this$config = datasets[this.config.dataId],\n        gpuFilter = _datasets$this$config.gpuFilter,\n        dataContainer = _datasets$this$config.dataContainer;\n      var _this$updateData = this.updateData(datasets, oldLayerData),\n        data = _this$updateData.data;\n      var accessors = this.getAttributeAccessors({\n        dataContainer: dataContainer\n      });\n      return _objectSpread({\n        data: data,\n        getFilterValue: gpuFilter.filterValueAccessor(dataContainer)()\n      }, accessors);\n    }\n    /* eslint-enable complexity */\n  }, {\n    key: \"updateLayerMeta\",\n    value: function updateLayerMeta(dataContainer) {\n      // get bounds from arcs\n      var getPosition = this.getPositionAccessor(dataContainer);\n      var sBounds = this.getPointsBounds(dataContainer, function (d, i) {\n        var pos = getPosition(d);\n        return [pos[0], pos[1]];\n      });\n      var tBounds = this.getPointsBounds(dataContainer, function (d, i) {\n        var pos = getPosition(d);\n        return [pos[3], pos[4]];\n      });\n      var bounds = tBounds && sBounds ? [Math.min(sBounds[0], tBounds[0]), Math.min(sBounds[1], tBounds[1]), Math.max(sBounds[2], tBounds[2]), Math.max(sBounds[3], tBounds[3])] : sBounds || tBounds;\n      this.updateMeta({\n        bounds: bounds\n      });\n    }\n  }, {\n    key: \"renderLayer\",\n    value: function renderLayer(opts) {\n      var data = opts.data,\n        gpuFilter = opts.gpuFilter,\n        objectHovered = opts.objectHovered,\n        interactionConfig = opts.interactionConfig;\n      var updateTriggers = _objectSpread({\n        getPosition: this.config.columns,\n        getFilterValue: gpuFilter.filterValueUpdateTriggers\n      }, this.getVisualChannelUpdateTriggers());\n      var widthScale = this.config.visConfig.thickness * _constants.PROJECTED_PIXEL_SIZE_MULTIPLIER;\n      var defaultLayerProps = this.getDefaultDeckLayerProps(opts);\n      var hoveredObject = this.hasHoveredObject(objectHovered);\n      return [new _layers.ArcLayer(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, defaultLayerProps), this.getBrushingExtensionProps(interactionConfig, 'source_target')), data), {}, {\n        widthScale: widthScale,\n        updateTriggers: updateTriggers,\n        extensions: [].concat((0, _toConsumableArray2[\"default\"])(defaultLayerProps.extensions), [new _extensions.BrushingExtension()])\n      }))].concat((0, _toConsumableArray2[\"default\"])(hoveredObject ? [new _layers.ArcLayer(_objectSpread(_objectSpread({}, this.getDefaultHoverLayerProps()), {}, {\n        data: [hoveredObject],\n        widthScale: widthScale,\n        getSourceColor: this.config.highlightColor,\n        getTargetColor: this.config.highlightColor,\n        getWidth: data.getWidth\n      }))] : []));\n    }\n  }], [{\n    key: \"findDefaultLayerProps\",\n    value: function findDefaultLayerProps(_ref3) {\n      var _ref3$fieldPairs = _ref3.fieldPairs,\n        fieldPairs = _ref3$fieldPairs === void 0 ? [] : _ref3$fieldPairs;\n      if (fieldPairs.length < 2) {\n        return {\n          props: []\n        };\n      }\n      var props = {\n        color: (0, _utils.hexToRgb)(_constants.DEFAULT_LAYER_COLOR.tripArc),\n        // connect the first two point layer with arc\n        columns: {\n          lat0: fieldPairs[0].pair.lat,\n          lng0: fieldPairs[0].pair.lng,\n          lat1: fieldPairs[1].pair.lat,\n          lng1: fieldPairs[1].pair.lng\n        },\n        label: \"\".concat(fieldPairs[0].defaultName, \" -> \").concat(fieldPairs[1].defaultName, \" arc\")\n      };\n      return {\n        props: [props]\n      };\n    }\n  }]);\n  return ArcLayer;\n}(_baseLayer[\"default\"]);\nexports[\"default\"] = ArcLayer;","map":{"version":3,"names":["value","exports","arcVisConfigs","arcColumnLabels","arcRequiredColumns","arcPosAccessor","_toConsumableArray2","_interopRequireDefault","require","_defineProperty2","_classCallCheck2","_createClass2","_baseLayer","_extensions","_layers","_utils","_arcLayerIcon","_constants","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","prototype","valueOf","call","e","_ref","lng0","lat1","lng1","dc","d","valueAt","index","fieldIdx","lat0","thickness","colorRange","sizeRange","_super","ArcLayer","_this","props","getPositionAccessor","dataContainer","config","columns","get","key","targetColor","defaultLinkColumnPairs","sourceColor","_objectSpread","_get2","color","property","defaultValue","accessor","visConfig","size","_ref2","filteredIndex","i","length","pos","getPosition","every","Number","isFinite","sourcePosition","data","formatLayerData","datasets","oldLayerData","_datasets$this$config","dataId","gpuFilter","_this$updateData","updateData","accessors","getAttributeAccessors","getFilterValue","filterValueAccessor","updateLayerMeta","tBounds","getPointsBounds","bounds","sBounds","Math","min","max","updateMeta","renderLayer","widthScale","opts","objectHovered","interactionConfig","filterValueUpdateTriggers","getVisualChannelUpdateTriggers","defaultLayerProps","getDefaultDeckLayerProps","hoveredObject","hasHoveredObject","getBrushingExtensionProps","updateTriggers","concat","getDefaultHoverLayerProps","getSourceColor","highlightColor","getTargetColor","getWidth","findDefaultLayerProps","_ref3","_ref3$fieldPairs","fieldPairs"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/layers/src/arc-layer/arc-layer.ts"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport Layer, {\n  LayerColumn,\n  LayerBaseConfig,\n  LayerColorConfig,\n  LayerSizeConfig,\n  LayerBounds\n} from '../base-layer';\nimport {BrushingExtension} from '@deck.gl/extensions';\nimport {ArcLayer as DeckArcLayer} from '@deck.gl/layers';\n\nimport {hexToRgb, DataContainerInterface} from '@kepler.gl/utils';\nimport ArcLayerIcon from './arc-layer-icon';\nimport {\n  DEFAULT_LAYER_COLOR,\n  ColorRange,\n  PROJECTED_PIXEL_SIZE_MULTIPLIER\n} from '@kepler.gl/constants';\n\nimport {\n  RGBColor,\n  Merge,\n  VisConfigColorRange,\n  VisConfigColorSelect,\n  VisConfigNumber,\n  VisConfigRange\n} from '@kepler.gl/types';\nimport {KeplerTable} from '@kepler.gl/table';\n\nexport type ArcLayerVisConfigSettings = {\n  opacity: VisConfigNumber;\n  thickness: VisConfigNumber;\n  colorRange: VisConfigColorRange;\n  sizeRange: VisConfigRange;\n  targetColor: VisConfigColorSelect;\n};\n\nexport type ArcLayerColumnsConfig = {\n  lat0: LayerColumn;\n  lat1: LayerColumn;\n  lng0: LayerColumn;\n  lng1: LayerColumn;\n};\n\nexport type ArcLayerVisConfig = {\n  colorRange: ColorRange;\n  opacity: number;\n  sizeRange: [number, number];\n  targetColor: RGBColor;\n  thickness: number;\n};\n\nexport type ArcLayerVisualChannelConfig = LayerColorConfig & LayerSizeConfig;\nexport type ArcLayerConfig = Merge<\n  LayerBaseConfig,\n  {columns: ArcLayerColumnsConfig; visConfig: ArcLayerVisConfig}\n> &\n  ArcLayerVisualChannelConfig;\n\nexport type ArcLayerData = {\n  index: number;\n  sourcePosition: [number, number, number];\n  targetPosition: [number, number, number];\n};\n\nexport type ArcLayerMeta = {\n  bounds: LayerBounds;\n};\nexport const arcPosAccessor = ({lat0, lng0, lat1, lng1}: ArcLayerColumnsConfig) => (\n  dc: DataContainerInterface\n) => d => [\n  dc.valueAt(d.index, lng0.fieldIdx),\n  dc.valueAt(d.index, lat0.fieldIdx),\n  0,\n  dc.valueAt(d.index, lng1.fieldIdx),\n  dc.valueAt(d.index, lat1.fieldIdx),\n  0\n];\n\nexport const arcRequiredColumns = ['lat0', 'lng0', 'lat1', 'lng1'];\nexport const arcColumnLabels = {\n  lat0: 'arc.lat0',\n  lng0: 'arc.lng0',\n  lat1: 'arc.lat1',\n  lng1: 'arc.lng1'\n};\n\nexport const arcVisConfigs: {\n  opacity: 'opacity';\n  thickness: 'thickness';\n  colorRange: 'colorRange';\n  sizeRange: 'strokeWidthRange';\n  targetColor: 'targetColor';\n} = {\n  opacity: 'opacity',\n  thickness: 'thickness',\n  colorRange: 'colorRange',\n  sizeRange: 'strokeWidthRange',\n  targetColor: 'targetColor'\n};\n\nexport default class ArcLayer extends Layer {\n  declare visConfigSettings: ArcLayerVisConfigSettings;\n  declare config: ArcLayerConfig;\n  declare meta: ArcLayerMeta;\n\n  constructor(props) {\n    super(props);\n\n    this.registerVisConfig(arcVisConfigs);\n    this.getPositionAccessor = (dataContainer: DataContainerInterface) =>\n      arcPosAccessor(this.config.columns)(dataContainer);\n  }\n\n  get type() {\n    return 'arc';\n  }\n\n  get isAggregated() {\n    return false;\n  }\n\n  get layerIcon() {\n    return ArcLayerIcon;\n  }\n\n  get requiredLayerColumns() {\n    return arcRequiredColumns;\n  }\n\n  get columnLabels() {\n    return arcColumnLabels;\n  }\n  get columnPairs() {\n    return this.defaultLinkColumnPairs;\n  }\n\n  get visualChannels() {\n    return {\n      sourceColor: {\n        ...super.visualChannels.color,\n        property: 'color',\n        key: 'sourceColor',\n        accessor: 'getSourceColor',\n        defaultValue: config => config.color\n      },\n      targetColor: {\n        ...super.visualChannels.color,\n        property: 'targetColor',\n        key: 'targetColor',\n        accessor: 'getTargetColor',\n        defaultValue: config => config.visConfig.targetColor || config.color\n      },\n      size: {\n        ...super.visualChannels.size,\n        accessor: 'getWidth',\n        property: 'stroke'\n      }\n    };\n  }\n\n  static findDefaultLayerProps({\n    fieldPairs = []\n  }: KeplerTable): {props: {color?: RGBColor; columns: ArcLayerColumnsConfig; label: string}[]} {\n    if (fieldPairs.length < 2) {\n      return {props: []};\n    }\n\n    const props: {color: RGBColor; columns: ArcLayerColumnsConfig; label: string} = {\n      color: hexToRgb(DEFAULT_LAYER_COLOR.tripArc),\n      // connect the first two point layer with arc\n      columns: {\n        lat0: fieldPairs[0].pair.lat,\n        lng0: fieldPairs[0].pair.lng,\n        lat1: fieldPairs[1].pair.lat,\n        lng1: fieldPairs[1].pair.lng\n      },\n      label: `${fieldPairs[0].defaultName} -> ${fieldPairs[1].defaultName} arc`\n    };\n\n    return {props: [props]};\n  }\n\n  calculateDataAttribute({dataContainer, filteredIndex}, getPosition) {\n    const data: ArcLayerData[] = [];\n    for (let i = 0; i < filteredIndex.length; i++) {\n      const index = filteredIndex[i];\n      const pos = getPosition({index});\n\n      // if doesn't have point lat or lng, do not add the point\n      // deck.gl can't handle position = null\n      if (pos.every(Number.isFinite)) {\n        data.push({\n          index,\n          sourcePosition: [pos[0], pos[1], pos[2]],\n          targetPosition: [pos[3], pos[4], pos[5]]\n        });\n      }\n    }\n\n    return data;\n  }\n\n  formatLayerData(datasets, oldLayerData) {\n    if (this.config.dataId === null) {\n      return {};\n    }\n    const {gpuFilter, dataContainer} = datasets[this.config.dataId];\n    const {data} = this.updateData(datasets, oldLayerData);\n    const accessors = this.getAttributeAccessors({dataContainer});\n    return {\n      data,\n      getFilterValue: gpuFilter.filterValueAccessor(dataContainer)(),\n      ...accessors\n    };\n  }\n  /* eslint-enable complexity */\n\n  updateLayerMeta(dataContainer) {\n    // get bounds from arcs\n    const getPosition = this.getPositionAccessor(dataContainer);\n\n    const sBounds = this.getPointsBounds(dataContainer, (d, i) => {\n      const pos = getPosition(d);\n      return [pos[0], pos[1]];\n    });\n    const tBounds = this.getPointsBounds(dataContainer, (d, i) => {\n      const pos = getPosition(d);\n      return [pos[3], pos[4]];\n    });\n\n    const bounds =\n      tBounds && sBounds\n        ? [\n            Math.min(sBounds[0], tBounds[0]),\n            Math.min(sBounds[1], tBounds[1]),\n            Math.max(sBounds[2], tBounds[2]),\n            Math.max(sBounds[3], tBounds[3])\n          ]\n        : sBounds || tBounds;\n\n    this.updateMeta({bounds});\n  }\n\n  renderLayer(opts) {\n    const {data, gpuFilter, objectHovered, interactionConfig} = opts;\n    const updateTriggers = {\n      getPosition: this.config.columns,\n      getFilterValue: gpuFilter.filterValueUpdateTriggers,\n      ...this.getVisualChannelUpdateTriggers()\n    };\n    const widthScale = this.config.visConfig.thickness * PROJECTED_PIXEL_SIZE_MULTIPLIER;\n    const defaultLayerProps = this.getDefaultDeckLayerProps(opts);\n    const hoveredObject = this.hasHoveredObject(objectHovered);\n    return [\n      new DeckArcLayer({\n        ...defaultLayerProps,\n        ...this.getBrushingExtensionProps(interactionConfig, 'source_target'),\n        ...data,\n        widthScale,\n        updateTriggers,\n        extensions: [...defaultLayerProps.extensions, new BrushingExtension()]\n      }),\n      // hover layer\n      ...(hoveredObject\n        ? [\n            new DeckArcLayer({\n              ...this.getDefaultHoverLayerProps(),\n              data: [hoveredObject],\n              widthScale,\n              getSourceColor: this.config.highlightColor,\n              getTargetColor: this.config.highlightColor,\n              getWidth: data.getWidth\n            })\n          ]\n        : [])\n    ];\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}