{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\nvar _styledComponents = require(\"../common/styled-components\");\nvar _icons = require(\"../common/icons\");\nvar _mapLayerSelector = _interopRequireDefault(require(\"../common/map-layer-selector\"));\nvar _mapControlTooltip = _interopRequireDefault(require(\"./map-control-tooltip\"));\nvar _mapControlPanel = _interopRequireDefault(require(\"./map-control-panel\"));\nLayerSelectorPanelFactory.deps = [_mapControlTooltip[\"default\"], _mapControlPanel[\"default\"]];\nfunction LayerSelectorPanelFactory(MapControlTooltip, MapControlPanel) {\n  /** @type {import('./layer-selector-panel').LayerSelectorPanelComponent} */\n  var LayerSelectorPanel = function LayerSelectorPanel(_ref) {\n    var onMapToggleLayer = _ref.onMapToggleLayer,\n      onToggleMapControl = _ref.onToggleMapControl,\n      layers = _ref.layers,\n      layersToRender = _ref.layersToRender,\n      isSplit = _ref.isSplit,\n      mapControls = _ref.mapControls,\n      readOnly = _ref.readOnly;\n    var visibleLayers = (mapControls === null || mapControls === void 0 ? void 0 : mapControls.visibleLayers) || {};\n    var _ref2 = visibleLayers || {},\n      isActive = _ref2.active,\n      show = _ref2.show,\n      disableClose = _ref2.disableClose;\n    var legendLayers = (0, _react.useMemo)(function () {\n      return layers.filter(function (_ref3) {\n        var config = _ref3.config;\n        return config.isVisible;\n      }).map(function (_ref4) {\n        var id = _ref4.id,\n          config = _ref4.config;\n        return {\n          id: id,\n          name: config.label,\n          // layer\n          isVisible: layersToRender[id]\n        };\n      });\n    }, [layers, layersToRender]);\n    var isVisible = (0, _react.useMemo)(function () {\n      return isSplit && show && readOnly !== true;\n    }, [isSplit, show, readOnly]);\n    var onToggleMenuPanel = (0, _react.useCallback)(function (event) {\n      event.preventDefault();\n      onToggleMapControl('visibleLayers');\n    }, [onToggleMapControl]);\n    return isVisible ? !isActive ? /*#__PURE__*/_react[\"default\"].createElement(_styledComponents.MapControlButton, {\n      key: 1,\n      onClick: onToggleMenuPanel,\n      className: (0, _classnames[\"default\"])('map-control-button', 'toggle-layer', {\n        isActive: isActive\n      }),\n      \"data-tip\": true,\n      \"data-for\": \"toggle-layer\"\n    }, /*#__PURE__*/_react[\"default\"].createElement(_icons.Layers, {\n      height: \"22px\"\n    }), /*#__PURE__*/_react[\"default\"].createElement(MapControlTooltip, {\n      id: \"toggle-layer\",\n      message: isActive ? 'tooltip.hideLayerPanel' : 'tooltip.showLayerPanel'\n    })) : /*#__PURE__*/_react[\"default\"].createElement(MapControlPanel, {\n      header: \"header.visibleLayers\",\n      onClick: onToggleMenuPanel,\n      disableClose: disableClose\n    }, /*#__PURE__*/_react[\"default\"].createElement(_mapLayerSelector[\"default\"], {\n      layers: legendLayers,\n      onMapToggleLayer: onMapToggleLayer\n    })) : null;\n  };\n  LayerSelectorPanel.displayName = 'LayerSelectorPanel';\n  return /*#__PURE__*/_react[\"default\"].memo(LayerSelectorPanel);\n}\nvar _default = LayerSelectorPanelFactory;\nexports[\"default\"] = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","_react","_interopRequireWildcard","require","_classnames","_interopRequireDefault","_styledComponents","_icons","_mapLayerSelector","_mapControlTooltip","_mapControlPanel","LayerSelectorPanelFactory","deps","LayerSelectorPanel","_ref","onMapToggleLayer","onToggleMapControl","layers","layersToRender","isSplit","mapControls","readOnly","visibleLayers","isActive","_ref2","active","show","disableClose","filter","_ref3","config","isVisible","map","_ref4","id","name","label","useMemo","onToggleMenuPanel","useCallback","event","preventDefault","createElement","MapControlButton","key","onClick","className","Layers","height","MapControlTooltip","message","MapControlPanel","header","legendLayers","memo","_default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/components/src/map/layer-selector-panel.tsx"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport React, {useCallback, useMemo} from 'react';\nimport classnames from 'classnames';\n\nimport {MapControlButton} from '../common/styled-components';\nimport {Layers} from '../common/icons';\nimport MapLayerSelector from '../common/map-layer-selector';\nimport MapControlTooltipFactory from './map-control-tooltip';\nimport MapControlPanelFactory from './map-control-panel';\nimport {Layer} from '@kepler.gl/layers';\nimport {MapControl, MapControls} from '@kepler.gl/types';\n\nLayerSelectorPanelFactory.deps = [MapControlTooltipFactory, MapControlPanelFactory];\n\nexport type LayerSelectorPanelProps = {\n  onMapToggleLayer: (layerId: string) => void;\n  onToggleMapControl: (control: string) => void;\n  layers: ReadonlyArray<Layer>;\n  layersToRender: {[key: string]: boolean};\n  isSplit: boolean;\n  mapControls: MapControls;\n  readOnly: boolean;\n};\n\nfunction LayerSelectorPanelFactory(\n  MapControlTooltip: ReturnType<typeof MapControlTooltipFactory>,\n  MapControlPanel: ReturnType<typeof MapControlPanelFactory>\n) {\n  /** @type {import('./layer-selector-panel').LayerSelectorPanelComponent} */\n  const LayerSelectorPanel: React.FC<LayerSelectorPanelProps> = ({\n    onMapToggleLayer,\n    onToggleMapControl,\n    layers,\n    layersToRender,\n    isSplit,\n    mapControls,\n    readOnly\n  }) => {\n    const visibleLayers = mapControls?.visibleLayers || ({} as MapControl);\n    const {active: isActive, show, disableClose} = visibleLayers || {};\n\n    const legendLayers = useMemo(\n      () =>\n        layers\n          .filter(({config}) => config.isVisible)\n          .map(({id, config}) => ({\n            id,\n            name: config.label,\n            // layer\n            isVisible: layersToRender[id]\n          })),\n      [layers, layersToRender]\n    );\n\n    const isVisible = useMemo(() => isSplit && show && readOnly !== true, [\n      isSplit,\n      show,\n      readOnly\n    ]);\n\n    const onToggleMenuPanel = useCallback(\n      event => {\n        event.preventDefault();\n        onToggleMapControl('visibleLayers');\n      },\n      [onToggleMapControl]\n    );\n\n    return isVisible ? (\n      !isActive ? (\n        <MapControlButton\n          key={1}\n          onClick={onToggleMenuPanel}\n          className={classnames('map-control-button', 'toggle-layer', {isActive})}\n          data-tip\n          data-for=\"toggle-layer\"\n        >\n          <Layers height=\"22px\" />\n          <MapControlTooltip\n            id=\"toggle-layer\"\n            message={isActive ? 'tooltip.hideLayerPanel' : 'tooltip.showLayerPanel'}\n          />\n        </MapControlButton>\n      ) : (\n        <MapControlPanel\n          header=\"header.visibleLayers\"\n          onClick={onToggleMenuPanel}\n          disableClose={disableClose}\n        >\n          <MapLayerSelector layers={legendLayers} onMapToggleLayer={onMapToggleLayer} />\n        </MapControlPanel>\n      )\n    ) : null;\n  };\n\n  LayerSelectorPanel.displayName = 'LayerSelectorPanel';\n\n  return React.memo(LayerSelectorPanel);\n}\n\nexport default LayerSelectorPanelFactory;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}