{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { getImageSize } from '../category-api/parsed-image-api';\nvar _encodeImageNode = globalThis._encodeImageNode;\nexport function encodeImage(_x, _x2) {\n  return _encodeImage.apply(this, arguments);\n}\nfunction _encodeImage() {\n  _encodeImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(image, options) {\n    return _regeneratorRuntime().wrap(function _callee$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          options = options || {};\n          options.image = options.image || {};\n          return _context2.abrupt(\"return\", _encodeImageNode ? _encodeImageNode(image, {\n            type: options.image.mimeType\n          }) : encodeImageInBrowser(image, options));\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee);\n  }));\n  return _encodeImage.apply(this, arguments);\n}\nvar qualityParamSupported = true;\nfunction encodeImageInBrowser(_x3, _x4) {\n  return _encodeImageInBrowser.apply(this, arguments);\n}\nfunction _encodeImageInBrowser() {\n  _encodeImageInBrowser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(image, options) {\n    var _options$image, mimeType, jpegQuality, _getImageSize, width, height, canvas, blob;\n    return _regeneratorRuntime().wrap(function _callee2$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _options$image = options.image, mimeType = _options$image.mimeType, jpegQuality = _options$image.jpegQuality;\n          _getImageSize = getImageSize(image), width = _getImageSize.width, height = _getImageSize.height;\n          canvas = document.createElement('canvas');\n          canvas.width = width;\n          canvas.height = height;\n          drawImageToCanvas(image, canvas);\n          _context3.next = 8;\n          return new Promise(function (resolve) {\n            if (jpegQuality && qualityParamSupported) {\n              try {\n                canvas.toBlob(resolve, mimeType, jpegQuality);\n                return;\n              } catch (error) {\n                qualityParamSupported = false;\n              }\n            }\n            canvas.toBlob(resolve, mimeType);\n          });\n        case 8:\n          blob = _context3.sent;\n          if (blob) {\n            _context3.next = 11;\n            break;\n          }\n          throw new Error('image encoding failed');\n        case 11:\n          _context3.next = 13;\n          return blob.arrayBuffer();\n        case 13:\n          return _context3.abrupt(\"return\", _context3.sent);\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee2);\n  }));\n  return _encodeImageInBrowser.apply(this, arguments);\n}\nfunction drawImageToCanvas(image, canvas) {\n  var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  if (x === 0 && y === 0 && typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    var _context = canvas.getContext('bitmaprenderer');\n    if (_context) {\n      _context.transferFromImageBitmap(image);\n      return canvas;\n    }\n  }\n  var context = canvas.getContext('2d');\n  if (image.data) {\n    var clampedArray = new Uint8ClampedArray(image.data);\n    var imageData = new ImageData(clampedArray, image.width, image.height);\n    context.putImageData(imageData, 0, 0);\n    return canvas;\n  }\n  context.drawImage(image, 0, 0);\n  return canvas;\n}","map":{"version":3,"names":["getImageSize","_encodeImageNode","globalThis","encodeImage","_x","_x2","_encodeImage","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","image","options","wrap","_callee$","_context2","prev","next","abrupt","type","mimeType","encodeImageInBrowser","stop","qualityParamSupported","_x3","_x4","_encodeImageInBrowser","_callee2","_options$image","jpegQuality","_getImageSize","width","height","canvas","blob","_callee2$","_context3","document","createElement","drawImageToCanvas","Promise","resolve","toBlob","error","sent","Error","arrayBuffer","x","length","undefined","y","ImageBitmap","context","getContext","transferFromImageBitmap","data","clampedArray","Uint8ClampedArray","imageData","ImageData","putImageData","drawImage"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/images/src/lib/encoders/encode-image.ts"],"sourcesContent":["// Image loading/saving for browser and Node.js\nimport {getImageSize} from '../category-api/parsed-image-api';\n\n// @ts-ignore TS2339: Property does not exist on type\nconst {_encodeImageNode} = globalThis;\n\n/**\n * Returns data bytes representing a compressed image in PNG or JPG format,\n * This data can be saved using file system (f) methods or used in a request.\n * @param image - ImageBitmap Image or Canvas\n * @param options\n * param opt.type='png' - png, jpg or image/png, image/jpg are valid\n * param mimeType= - Whether to include a data URI header\n */\nexport async function encodeImage(\n  image: any,\n  options?: {[key: string]: any}\n): Promise<ArrayBuffer> {\n  options = options || {};\n  options.image = options.image || ({} as {[key: string]: any});\n\n  return _encodeImageNode\n    ? _encodeImageNode(image, {type: options.image.mimeType})\n    : encodeImageInBrowser(image, options);\n}\n\n// In case we get exceptions from canvas.toBlob(resolve, type, quality)\nlet qualityParamSupported = true;\n\n/**\n *\n * @param image\n * @param options\n * @note Based on canvas.toBlob\n * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob\n */\nasync function encodeImageInBrowser(image, options) {\n  const {mimeType, jpegQuality} = options.image;\n\n  const {width, height} = getImageSize(image);\n\n  // create a canvas and resize it to the size of our image\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n\n  drawImageToCanvas(image, canvas);\n\n  // The actual encoding is done asynchronously with `canvas.toBlob()`\n  const blob = await new Promise<Blob | null>((resolve) => {\n    // get it back as a Blob\n    if (jpegQuality && qualityParamSupported) {\n      try {\n        canvas.toBlob(resolve, mimeType, jpegQuality);\n        return;\n      } catch (error) {\n        qualityParamSupported = false;\n      }\n    }\n    canvas.toBlob(resolve, mimeType);\n  });\n\n  if (!blob) {\n    throw new Error('image encoding failed');\n  }\n\n  return await blob.arrayBuffer();\n}\n\nfunction drawImageToCanvas(image, canvas, x = 0, y = 0) {\n  // Try optimized path for ImageBitmaps via bitmaprenderer context\n  if (x === 0 && y === 0 && typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    const context = canvas.getContext('bitmaprenderer');\n    if (context) {\n      // transfer the ImageBitmap to it\n      context.transferFromImageBitmap(image);\n      return canvas;\n    }\n  }\n\n  // Available on most platforms, except IE11 and Andriod WebViews...\n  const context = canvas.getContext('2d');\n  if (image.data) {\n    // ImageData constructor expects clamped array even though getImageData does not return a clamped array...\n    const clampedArray = new Uint8ClampedArray(image.data);\n    const imageData = new ImageData(clampedArray, image.width, image.height);\n    context.putImageData(imageData, 0, 0);\n    return canvas;\n  }\n\n  // Fall back to generic image/image bitmap rendering path\n  context.drawImage(image, 0, 0);\n  return canvas;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}