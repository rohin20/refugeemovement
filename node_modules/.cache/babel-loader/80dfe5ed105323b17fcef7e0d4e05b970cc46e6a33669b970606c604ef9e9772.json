{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseGeoJsonRawFeature = parseGeoJsonRawFeature;\nexports.getGeojsonDataMaps = getGeojsonDataMaps;\nexports.parseGeometryFromString = parseGeometryFromString;\nexports.getGeojsonBounds = getGeojsonBounds;\nexports.getGeojsonFeatureTypes = getGeojsonFeatureTypes;\nexports.featureToDeckGlGeoType = exports.FeatureTypes = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _wellknown = _interopRequireDefault(require(\"wellknown\"));\nvar _geojsonNormalize = _interopRequireDefault(require(\"@mapbox/geojson-normalize\"));\nvar _bbox = _interopRequireDefault(require(\"@turf/bbox\"));\nvar _utils = require(\"@kepler.gl/utils\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\n\n/* eslint-disable */\n// TODO: Re-enable eslint when we upgrade to handle enums and type maps\nvar FeatureTypes;\nexports.FeatureTypes = FeatureTypes;\n(function (FeatureTypes) {\n  FeatureTypes[\"Point\"] = \"Point\";\n  FeatureTypes[\"MultiPoint\"] = \"MultiPoint\";\n  FeatureTypes[\"LineString\"] = \"LineString\";\n  FeatureTypes[\"MultiLineString\"] = \"MultiLineString\";\n  FeatureTypes[\"Polygon\"] = \"Polygon\";\n  FeatureTypes[\"MultiPolygon\"] = \"MultiPolygon\";\n})(FeatureTypes || (exports.FeatureTypes = FeatureTypes = {}));\n\n/* eslint-enable */\nfunction parseGeoJsonRawFeature(rawFeature) {\n  if ((0, _typeof2[\"default\"])(rawFeature) === 'object') {\n    // Support GeoJson feature as object\n    // probably need to normalize it as well\n    var normalized = (0, _geojsonNormalize[\"default\"])(rawFeature);\n    if (!normalized || !Array.isArray(normalized.features)) {\n      // fail to normalize GeoJson\n      return null;\n    }\n    return normalized.features[0];\n  } else if (typeof rawFeature === 'string') {\n    return parseGeometryFromString(rawFeature);\n  } else if (Array.isArray(rawFeature)) {\n    // Support GeoJson  LineString as an array of points\n    return {\n      type: 'Feature',\n      geometry: {\n        // why do we need to flip it...\n        coordinates: rawFeature.map(function (pts) {\n          return [pts[1], pts[0]];\n        }),\n        type: 'LineString'\n      },\n      properties: {}\n    };\n  }\n  return null;\n}\n/**\n * Parse raw data to GeoJson feature\n * @param dataContainer\n * @param getFeature\n * @returns {{}}\n */\n\nfunction getGeojsonDataMaps(dataContainer, getFeature) {\n  var acceptableTypes = ['Point', 'MultiPoint', 'LineString', 'MultiLineString', 'Polygon', 'MultiPolygon', 'GeometryCollection'];\n  var dataToFeature = [];\n  for (var index = 0; index < dataContainer.numRows(); index++) {\n    var feature = parseGeoJsonRawFeature(getFeature({\n      index: index\n    }));\n    if (feature && feature.geometry && acceptableTypes.includes(feature.geometry.type)) {\n      var cleaned = _objectSpread(_objectSpread({}, feature), {}, {\n        // store index of the data in feature properties\n        properties: _objectSpread(_objectSpread({}, feature.properties), {}, {\n          index: index\n        })\n      });\n      dataToFeature[index] = cleaned;\n    } else {\n      dataToFeature[index] = null;\n    }\n  }\n  return dataToFeature;\n}\n/**\n * Parse geojson from string\n * @param {String} geoString\n * @returns {null | Object} geojson object or null if failed\n */\n\nfunction parseGeometryFromString(geoString) {\n  var parsedGeo; // try parse as geojson string\n  // {\"type\":\"Polygon\",\"coordinates\":[[[-74.158491,40.83594]]]}\n\n  try {\n    parsedGeo = JSON.parse(geoString);\n  } catch (e) {// keep trying to parse\n  } // try parse as wkt\n\n  if (!parsedGeo) {\n    try {\n      parsedGeo = (0, _wellknown[\"default\"])(geoString);\n    } catch (e) {\n      return null;\n    }\n  }\n  if (!parsedGeo) {\n    return null;\n  }\n  var normalized = (0, _geojsonNormalize[\"default\"])(parsedGeo);\n  if (!normalized || !Array.isArray(normalized.features)) {\n    // fail to normalize geojson\n    return null;\n  }\n  return normalized.features[0];\n}\nfunction getGeojsonBounds() {\n  var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  // 70 ms for 10,000 polygons\n  // here we only pick couple\n  var maxCount = 10000;\n  var samples = features.length > maxCount ? (0, _utils.getSampleData)(features, maxCount) : features;\n  var nonEmpty = samples.filter(function (d) {\n    return d && d.geometry && d.geometry.coordinates && d.geometry.coordinates.length;\n  });\n  try {\n    return (0, _bbox[\"default\"])({\n      type: 'FeatureCollection',\n      features: nonEmpty\n    });\n  } catch (e) {\n    return null;\n  }\n}\nvar featureToDeckGlGeoType = {\n  Point: 'point',\n  MultiPoint: 'point',\n  LineString: 'line',\n  MultiLineString: 'line',\n  Polygon: 'polygon',\n  MultiPolygon: 'polygon'\n};\n/**\n * Parse geojson from string\n * @param {Array<Object>} allFeatures\n * @returns {Object} mapping of feature type existence\n */\n\nexports.featureToDeckGlGeoType = featureToDeckGlGeoType;\nfunction getGeojsonFeatureTypes(allFeatures) {\n  // @ts-expect-error\n  var featureTypes = {};\n  for (var f = 0; f < allFeatures.length; f++) {\n    var feature = allFeatures[f];\n    if (feature) {\n      var geoType = featureToDeckGlGeoType[feature.geometry && feature.geometry.type];\n      if (geoType) {\n        featureTypes[geoType] = true;\n      }\n    }\n  }\n  return featureTypes;\n}","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","getGeojsonBounds","getGeojsonFeatureTypes","featureToDeckGlGeoType","_typeof2","_wellknown","_geojsonNormalize","_bbox","_utils","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","getOwnPropertyDescriptors","defineProperties","FeatureTypes","parseGeoJsonRawFeature","coordinates","rawFeature","normalized","Array","isArray","features","parseGeometryFromString","map","pts","type","properties","getGeojsonDataMaps","dataContainer","getFeature","acceptableTypes","index","numRows","feature","geometry","includes","dataToFeature","cleaned","geoString","parsedGeo","JSON","parse","e","undefined","maxCount","samples","getSampleData","nonEmpty","d","Point","LineString","MultiLineString","MultiPolygon"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/layers/src/geojson-layer/geojson-utils.ts"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport wktParser from 'wellknown';\nimport normalize from '@mapbox/geojson-normalize';\nimport bbox from '@turf/bbox';\n\nimport {Feature, BBox} from 'geojson';\nimport {getSampleData} from '@kepler.gl/utils';\n\nexport type GetFeature = (d: any) => Feature;\nexport type GeojsonDataMaps = Array<Feature | null>;\n\n/* eslint-disable */\n// TODO: Re-enable eslint when we upgrade to handle enums and type maps\nexport enum FeatureTypes {\n  Point = 'Point',\n  MultiPoint = 'MultiPoint',\n  LineString = 'LineString',\n  MultiLineString = 'MultiLineString',\n  Polygon = 'Polygon',\n  MultiPolygon = 'MultiPolygon'\n}\n\ntype FeatureTypeMap = {\n  [key in FeatureTypes]: boolean;\n};\n/* eslint-enable */\n\nexport function parseGeoJsonRawFeature(rawFeature: unknown): Feature | null {\n  if (typeof rawFeature === 'object') {\n    // Support GeoJson feature as object\n    // probably need to normalize it as well\n    const normalized = normalize(rawFeature);\n    if (!normalized || !Array.isArray(normalized.features)) {\n      // fail to normalize GeoJson\n      return null;\n    }\n\n    return normalized.features[0];\n  } else if (typeof rawFeature === 'string') {\n    return parseGeometryFromString(rawFeature);\n  } else if (Array.isArray(rawFeature)) {\n    // Support GeoJson  LineString as an array of points\n    return {\n      type: 'Feature',\n      geometry: {\n        // why do we need to flip it...\n        coordinates: rawFeature.map(pts => [pts[1], pts[0]]),\n        type: 'LineString'\n      },\n      properties: {}\n    };\n  }\n\n  return null;\n}\n/**\n * Parse raw data to GeoJson feature\n * @param dataContainer\n * @param getFeature\n * @returns {{}}\n */\nexport function getGeojsonDataMaps(dataContainer: any, getFeature: GetFeature): GeojsonDataMaps {\n  const acceptableTypes = [\n    'Point',\n    'MultiPoint',\n    'LineString',\n    'MultiLineString',\n    'Polygon',\n    'MultiPolygon',\n    'GeometryCollection'\n  ];\n\n  const dataToFeature: GeojsonDataMaps = [];\n\n  for (let index = 0; index < dataContainer.numRows(); index++) {\n    const feature = parseGeoJsonRawFeature(getFeature({index}));\n\n    if (feature && feature.geometry && acceptableTypes.includes(feature.geometry.type)) {\n      const cleaned = {\n        ...feature,\n        // store index of the data in feature properties\n        properties: {\n          ...feature.properties,\n          index\n        }\n      };\n\n      dataToFeature[index] = cleaned;\n    } else {\n      dataToFeature[index] = null;\n    }\n  }\n\n  return dataToFeature;\n}\n\n/**\n * Parse geojson from string\n * @param {String} geoString\n * @returns {null | Object} geojson object or null if failed\n */\nexport function parseGeometryFromString(geoString: string): Feature | null {\n  let parsedGeo;\n\n  // try parse as geojson string\n  // {\"type\":\"Polygon\",\"coordinates\":[[[-74.158491,40.83594]]]}\n  try {\n    parsedGeo = JSON.parse(geoString);\n  } catch (e) {\n    // keep trying to parse\n  }\n\n  // try parse as wkt\n  if (!parsedGeo) {\n    try {\n      parsedGeo = wktParser(geoString);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  if (!parsedGeo) {\n    return null;\n  }\n\n  const normalized = normalize(parsedGeo);\n\n  if (!normalized || !Array.isArray(normalized.features)) {\n    // fail to normalize geojson\n    return null;\n  }\n\n  return normalized.features[0];\n}\n\nexport function getGeojsonBounds(features: GeojsonDataMaps = []): BBox | null {\n  // 70 ms for 10,000 polygons\n  // here we only pick couple\n  const maxCount = 10000;\n  const samples = features.length > maxCount ? getSampleData(features, maxCount) : features;\n\n  const nonEmpty = samples.filter(\n    d => d && d.geometry && d.geometry.coordinates && d.geometry.coordinates.length\n  );\n\n  try {\n    return bbox({\n      type: 'FeatureCollection',\n      features: nonEmpty\n    });\n  } catch (e) {\n    return null;\n  }\n}\n\nexport const featureToDeckGlGeoType = {\n  Point: 'point',\n  MultiPoint: 'point',\n  LineString: 'line',\n  MultiLineString: 'line',\n  Polygon: 'polygon',\n  MultiPolygon: 'polygon'\n};\n\n/**\n * Parse geojson from string\n * @param {Array<Object>} allFeatures\n * @returns {Object} mapping of feature type existence\n */\nexport function getGeojsonFeatureTypes(allFeatures: GeojsonDataMaps): FeatureTypeMap {\n  // @ts-expect-error\n  const featureTypes: FeatureTypeMap = {};\n  for (let f = 0; f < allFeatures.length; f++) {\n    const feature = allFeatures[f];\n    if (feature) {\n      const geoType = featureToDeckGlGeoType[feature.geometry && feature.geometry.type];\n      if (geoType) {\n        featureTypes[geoType] = true;\n      }\n    }\n  }\n\n  return featureTypes;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAoBA;;AACA;;AACA,IAAAA,sBAAA,GAAAC,OAAA;AAGAC,MAAA,CAAAC,cAAA,CAAAC,OAAA;;;;;;AAKAA,OAAA,CAAAC,gBAAA,GAAAA,gBAAA;AACAD,OAAA,CAAAE,sBAAA,GAAAA,sBAAA;OACY,CAAAC,sB;;AAAA,IAAAC,QAAA,G;AAAA,IAAAC,U;AAAA,IAAAC,iB;IAAAC,KAAA,GAAAX,sB,SAAA,Y;AAYZ,IAAAY,MAAA,GAAAX,OAAA;AAGE,SAAIY,QAAAC,MAAA,EAAAC,cAAO,EAAP;EAAA,IAAsBC,IAAA,GAAAd,MAAU,CAAAc,IAAA,CAAAF,MAAA;EAAA,IAAAZ,MAAA,CAAAe,qBAAA;IAAA,IAAAC,OAAA,GAAAhB,MAAA,CAAAe,qBAAA,CAAAH,MAAA;IAAA,IAAAC,cAAA,EAAAG,OAAA,GAAAA,OAAA,CAAAC,MAAA,WAAAC,GAAA;MAAA,OAAAlB,MAAA,CAAAmB,wBAAA,CAAAP,MAAA,EAAAM,GAAA,EAAAE,UAAA;IAAA;IAAAN,IAAA,CAAAO,IAAA,CAAAC,KAAA,CAAAR,IAAA,EAAAE,OAAA;EAAA;EAAA,OAAAF,IAAA;AAAA;AAElC,SAAAS,cAAAC,MAAA;EAAA,SAAAC,CAAA,MAAAA,CAAA,GAAAC,SAAA,CAAAC,MAAA,EAAAF,CAAA;IAAA,IAAAG,MAAA,GAAAF,SAAA,CAAAD,CAAA,YAAAC,SAAA,CAAAD,CAAA;IAAA,IAAAA,CAAA;MAAAd,OAAA,CAAAX,MAAA,CAAA4B,MAAA,SAAAC,OAAA,WAAAC,GAAA;QAAA,IAAAC,gBAAA,aAAAP,MAAA,EAAAM,GAAA,EAAAF,MAAA,CAAAE,GAAA;MAAA;IAAA,WAAA9B,MAAA,CAAAgC,yBAAA;MAAAhC,MAAA,CAAAiC,gBAAA,CAAAT,MAAA,EAAAxB,MAAA,CAAAgC,yBAAA,CAAAJ,MAAA;IAAA;MAAAjB,OAAA,CAAAX,MAAA,CAAA4B,MAAA,GAAAC,OAAA,WAAAC,GAAA;QAAA9B,MAAA,CAAAC,cAAA,CAAAuB,MAAA,EAAAM,GAAA,EAAA9B,MAAA,CAAAmB,wBAAA,CAAAS,MAAA,EAAAE,GAAA;MAAA;IAAA;EAAA;EAAA,OAAAN,MAAA;AAAA;;;AAEA;AACE,IAAAU,YAAA;AACAhC,OAAA,CAAAgC,YAAA,GAAAA,YAAA;;EAGFA,YAAO,QAAW,WAAlB;EACDA,YAAU,aAAO,IAAP,YAAJ;EACLA,YAAO,6BAAwB;EAChCA,YAAU,kBAAc,qBAAa;EACpCA,YAAA;EACAA,YAAO;AACL,GAAAA,YAAM,KAAAhC,OADD,CAAAgC,YAAA,GAAAA,YAAA;;AAGH;AACA,SAAAC,sBAAuBC,CAACC,UAAI;EAAG,QAAA/B,QAAK,UAAQ,CAAG,EAAA+B,UAAhB;IAAA;IAC/B;IAHQ,IAFLC,UAAA,OAAA9B,iBAAA,aAAA6B,UAAA;IAAA,IAAP,CAAAC,UAAA,KAAAC,KAAA,CAAAC,OAAA,CAAAF,UAAA,CAAAG,QAAA;MASD;;IAED;IAEF,OAAAH,UAAA,CAAAG,QAAA;EACA,kBAAAJ,UAAA;IACA,OAAAK,uBAAA,CAAAL,UAAA;EACA,WAAAE,KAAA,CAAAC,OAAA,CAAAH,UAAA;IACA;IACA;;;QACO;QACCD,WAAA,EAAeC,UACnB,CADsBM,GAEtB,WAFsBC,GAGtB;UAOI,QAAAA,GAA8B,CAAG,EAAvC,EAAAA,GAAA;;QAEKC,IAAI;MACP;MAAmDC,UAAA;IAAD,CAAD;;EAG/C,WAAM;AAEJ;AACA;AAEE;AAFQ;AAHC;;AASb;;AAGD,SAAAC,mBAAAC,aAAA,EAAAC,UAAA;EACF,IAAAC,eAAA;;EAGF,SAAAC,KAAA,MAAAA,KAAA,GAAAH,aAAA,CAAAI,OAAA,IAAAD,KAAA;IAED,IAAAE,OAAA,GAAAlB,sBAAA,CAAAc,UAAA;MACAE,KAAA,EAAAA;IACA;IAEA,IAAAE,OAAA,IAAAA,OAAA,CAAAC,QAAA,IAAAJ,eAAA,CAAAK,QAAA,CAAAF,OAAA,CAAAC,QAAA,CAAAT,IAAA;;;QACOC,UAAS,EAAAvB,aAAwB,CAAAA,aAAmC,KAAA8B,OAAA,CAAAP,UAAA;UACrEK,KAAJ,EAEAA;QACA;;MAEEK,aAAY,CAAIL,KAAC,CAAL,GAAWM,OAAX;IACZ,OAAO;MAITD,aAAA,CAAAL,KAAA;;;EAEE,OAAIK,aAAA;AACF;AACD;AACC;AACD;AACF;;;AAIA,SAAAd,wBAAAgB,SAAA;;EAED;;EAEA,IAAI;IACFC,SAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAH,SAAA;EACA,SAAOI,CAAA,GAAP;EAAA,CACD;;EAGF,KAAAH,SAAA;;MAEMA,SAAS,OAAApD,UAA8D,aAAAmD,SAAA;IAAA,EAA7C,OAAAI,CAA6C;MAC5E;IACA;EACA;EAGA,IAAM,CAAAH,SAAQ,EAAG;IACd,OAAI,IAAC;EAAL;EAGH,IAAIrB,UAAA,OAAA9B,iBAAA,aAAAmD,SAAA;EAEA,KAAArB,UAAM,KAAAC,KAAA,CAAAC,OADI,CAAAF,UAAA,CAAAG,QAAA;IAEV;IAFU,OAAZ;EAID;EAEA,OAAAH,UAAA,CAAAG,QAAA;AACF;AAEM,SAAMtC,iBAAA,EAAsB;EACjC,IAAAsC,QAAO,GAD6Bf,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAqC,SAAA,GAAArC,SAAA;EAEpC;EACA;EACA,IAAAsC,QAAA,GAAe,KAAE;EACjB,IAAAC,OAAS,GAAAxB,QAL2B,CAAAd,MAAA,GAAAqC,QAAA,OAAAtD,MAAA,CAAAwD,aAAA,EAAAzB,QAAA,EAAAuB,QAAA,IAAAvB,QAAA;EAMpC,IAAA0B,QAAY,GAAEF,OAAA,CAAAhD,MAAA,WAAAmD,CAAA;IANT,OAAAA,CAAA,IAAAA,CAAA,CAAAd,QAAA,IAAAc,CAAA,CAAAd,QAAA,CAAAlB,WAAA,IAAAgC,CAAA,CAAAd,QAAA,CAAAlB,WAAA,CAAAT,MAAA;EASP;EAEA;IACA,WAAAlB,KAAA;MACAoC,IAAA;;;;IACO,OAAS;EACd;AACA;AACA,IAAAxC,sBAAoB;EAClBgE,KAAA,EAAM,OAAO;;EACbC,UAAI,QAAS;EACXC,eAAa,QAAG;;EAChBC,YAAI;AACF;AACD;AACF;AACF;;AAED"},"metadata":{},"sourceType":"script","externalDependencies":[]}