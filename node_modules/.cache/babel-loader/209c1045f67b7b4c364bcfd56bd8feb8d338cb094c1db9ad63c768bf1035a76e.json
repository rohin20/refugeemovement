{"ast":null,"code":"import _defineProperty from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { decomposeCompositeGLType } from '../webgl-utils/attribute-utils';\nimport { assert } from '../utils/assert';\nvar ERR_ARGUMENT = 'UniformBufferLayout illegal argument';\nvar GL_FLOAT = 0x1406;\nvar GL_INT = 0x1404;\nvar GL_UNSIGNED_INT = 0x1405;\nvar UniformBufferLayout = /*#__PURE__*/function () {\n  function UniformBufferLayout(layout) {\n    var _this$typedArray;\n    _classCallCheck(this, UniformBufferLayout);\n    this.layout = {};\n    this.size = 0;\n    for (var key in layout) {\n      this._addUniform(key, layout[key]);\n    }\n    this.size += (4 - this.size % 4) % 4;\n    var data = new Float32Array(this.size);\n    this.typedArray = (_this$typedArray = {}, _defineProperty(_this$typedArray, GL_FLOAT, data), _defineProperty(_this$typedArray, GL_INT, new Int32Array(data.buffer)), _defineProperty(_this$typedArray, GL_UNSIGNED_INT, new Uint32Array(data.buffer)), _this$typedArray);\n  }\n  _createClass(UniformBufferLayout, [{\n    key: \"getBytes\",\n    value: function getBytes() {\n      return this.size * 4;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      return this.typedArray[GL_FLOAT];\n    }\n  }, {\n    key: \"getSubData\",\n    value: function getSubData(index) {\n      var data;\n      var offset;\n      if (index === undefined) {\n        data = this.data;\n        offset = 0;\n      } else {\n        var begin = this.offsets[index];\n        var end = begin + this.sizes[index];\n        data = this.data.subarray(begin, end);\n        offset = begin * 4;\n      }\n      return {\n        data: data,\n        offset: offset\n      };\n    }\n  }, {\n    key: \"setUniforms\",\n    value: function setUniforms(values) {\n      for (var key in values) {\n        this._setValue(key, values[key]);\n      }\n      return this;\n    }\n  }, {\n    key: \"_setValue\",\n    value: function _setValue(key, value) {\n      var layout = this.layout[key];\n      assert(layout, 'UniformLayoutStd140 illegal argument');\n      var typedArray = this.typedArray[layout.type];\n      if (layout.size === 1) {\n        typedArray[layout.offset] = value;\n      } else {\n        typedArray.set(value, layout.offset);\n      }\n    }\n  }, {\n    key: \"_addUniform\",\n    value: function _addUniform(key, uniformType) {\n      var typeAndComponents = decomposeCompositeGLType(uniformType);\n      assert(typeAndComponents, ERR_ARGUMENT);\n      var type = typeAndComponents.type,\n        count = typeAndComponents.components;\n      this.size = this._alignTo(this.size, count);\n      var offset = this.size;\n      this.size += count;\n      this.layout[key] = {\n        type: type,\n        size: count,\n        offset: offset\n      };\n    }\n  }, {\n    key: \"_alignTo\",\n    value: function _alignTo(size, count) {\n      switch (count) {\n        case 1:\n          return size;\n        case 2:\n          return size + size % 2;\n        default:\n          return size + (4 - size % 4) % 4;\n      }\n    }\n  }]);\n  return UniformBufferLayout;\n}();\nexport { UniformBufferLayout as default };","map":{"version":3,"names":["decomposeCompositeGLType","assert","ERR_ARGUMENT","GL_FLOAT","GL_INT","GL_UNSIGNED_INT","UniformBufferLayout","layout","_this$typedArray","_classCallCheck","size","key","_addUniform","data","Float32Array","typedArray","_defineProperty","Int32Array","buffer","Uint32Array","_createClass","value","getBytes","getData","getSubData","index","offset","undefined","begin","offsets","end","sizes","subarray","setUniforms","values","_setValue","type","set","uniformType","typeAndComponents","count","components","_alignTo","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@luma.gl/webgl/src/classes/uniform-buffer-layout.js"],"sourcesContent":["// @ts-nocheck\n\n/* eslint-disable camelcase */\nimport {decomposeCompositeGLType} from '../webgl-utils/attribute-utils';\nimport {assert} from '../utils/assert';\n\nconst ERR_ARGUMENT = 'UniformBufferLayout illegal argument';\n\n// Local constants - these will \"collapse\" during minification\nconst GL_FLOAT = 0x1406;\nconst GL_INT = 0x1404;\nconst GL_UNSIGNED_INT = 0x1405;\n\n// Std140 layout for uniforms\nexport default class UniformBufferLayout {\n  constructor(layout) {\n    this.layout = {};\n    this.size = 0;\n\n    // Add layout (type, size and offset) definitions for each uniform in the layout\n    for (const key in layout) {\n      this._addUniform(key, layout[key]);\n    }\n\n    this.size += (4 - (this.size % 4)) % 4;\n\n    // Allocate three typed arrays pointing at same memory\n    const data = new Float32Array(this.size);\n    this.typedArray = {\n      [GL_FLOAT]: data,\n      [GL_INT]: new Int32Array(data.buffer),\n      [GL_UNSIGNED_INT]: new Uint32Array(data.buffer)\n    };\n  }\n\n  // Get number of bytes needed for buffer allocation\n  getBytes() {\n    return this.size * 4;\n  }\n\n  // Get the current data as Float32Array, for bufferSubData\n  getData() {\n    return this.typedArray[GL_FLOAT];\n  }\n\n  // Get offset and data for one object (for bufferSubData)\n  getSubData(index) {\n    let data;\n    let offset;\n    if (index === undefined) {\n      data = this.data;\n      offset = 0;\n    } else {\n      const begin = this.offsets[index];\n      const end = begin + this.sizes[index];\n      data = this.data.subarray(begin, end);\n      offset = begin * 4;\n    }\n    return {data, offset};\n  }\n\n  // Set a map of values\n  setUniforms(values) {\n    for (const key in values) {\n      this._setValue(key, values[key]);\n    }\n    return this;\n  }\n\n  _setValue(key, value) {\n    const layout = this.layout[key];\n    assert(layout, 'UniformLayoutStd140 illegal argument');\n    const typedArray = this.typedArray[layout.type];\n    if (layout.size === 1) {\n      // single value -> just set it\n      typedArray[layout.offset] = value;\n    } else {\n      // vector/matrix -> copy the supplied (typed) array, starting from offset\n      typedArray.set(value, layout.offset);\n    }\n  }\n\n  _addUniform(key, uniformType) {\n    const typeAndComponents = decomposeCompositeGLType(uniformType);\n    assert(typeAndComponents, ERR_ARGUMENT);\n    const {type, components: count} = typeAndComponents;\n\n    // First, align (bump) current offset to an even multiple of current object (1, 2, 4)\n    this.size = this._alignTo(this.size, count);\n    // Use the aligned size as the offset of the current uniform.\n    const offset = this.size;\n    // Then, add our object's padded size ((1, 2, multiple of 4) to the current offset\n    this.size += count;\n\n    this.layout[key] = {type, size: count, offset};\n  }\n\n  // Align offset to 1, 2 or 4 elements (4, 8 or 16 bytes)\n  _alignTo(size, count) {\n    switch (count) {\n      case 1:\n        return size; // Pad upwards to even multiple of 2\n      case 2:\n        return size + (size % 2); // Pad upwards to even multiple of 2\n      default:\n        return size + ((4 - (size % 4)) % 4); // Pad upwards to even multiple of 4\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}