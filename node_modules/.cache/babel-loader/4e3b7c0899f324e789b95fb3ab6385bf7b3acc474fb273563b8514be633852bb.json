{"ast":null,"code":"import _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _GL_TYPE_TO_ARRAY_TYP;\nimport { GL_TYPE as GL } from '../constants';\nvar GL_TYPE_TO_ARRAY_TYPE = (_GL_TYPE_TO_ARRAY_TYP = {}, _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.DOUBLE, Float64Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.FLOAT, Float32Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.UNSIGNED_SHORT, Uint16Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.UNSIGNED_INT, Uint32Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.UNSIGNED_BYTE, Uint8Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.BYTE, Int8Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.SHORT, Int16Array), _defineProperty(_GL_TYPE_TO_ARRAY_TYP, GL.INT, Int32Array), _GL_TYPE_TO_ARRAY_TYP);\nvar NAME_TO_GL_TYPE = {\n  DOUBLE: GL.DOUBLE,\n  FLOAT: GL.FLOAT,\n  UNSIGNED_SHORT: GL.UNSIGNED_SHORT,\n  UNSIGNED_INT: GL.UNSIGNED_INT,\n  UNSIGNED_BYTE: GL.UNSIGNED_BYTE,\n  BYTE: GL.BYTE,\n  SHORT: GL.SHORT,\n  INT: GL.INT\n};\nvar ERR_TYPE_CONVERSION = 'Failed to convert GL type';\nvar GLType = /*#__PURE__*/function () {\n  function GLType() {\n    _classCallCheck(this, GLType);\n  }\n  _createClass(GLType, null, [{\n    key: \"fromTypedArray\",\n    value: function fromTypedArray(arrayOrType) {\n      arrayOrType = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n      for (var glType in GL_TYPE_TO_ARRAY_TYPE) {\n        var ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n        if (ArrayType === arrayOrType) {\n          return glType;\n        }\n      }\n      throw new Error(ERR_TYPE_CONVERSION);\n    }\n  }, {\n    key: \"fromName\",\n    value: function fromName(name) {\n      var glType = NAME_TO_GL_TYPE[name];\n      if (!glType) {\n        throw new Error(ERR_TYPE_CONVERSION);\n      }\n      return glType;\n    }\n  }, {\n    key: \"getArrayType\",\n    value: function getArrayType(glType) {\n      switch (glType) {\n        case GL.UNSIGNED_SHORT_5_6_5:\n        case GL.UNSIGNED_SHORT_4_4_4_4:\n        case GL.UNSIGNED_SHORT_5_5_5_1:\n          return Uint16Array;\n        default:\n          var ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n          if (!ArrayType) {\n            throw new Error(ERR_TYPE_CONVERSION);\n          }\n          return ArrayType;\n      }\n    }\n  }, {\n    key: \"getByteSize\",\n    value: function getByteSize(glType) {\n      var ArrayType = GLType.getArrayType(glType);\n      return ArrayType.BYTES_PER_ELEMENT;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(glType) {\n      return Boolean(GLType.getArrayType(glType));\n    }\n  }, {\n    key: \"createTypedArray\",\n    value: function createTypedArray(glType, buffer) {\n      var byteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var length = arguments.length > 3 ? arguments[3] : undefined;\n      if (length === undefined) {\n        length = (buffer.byteLength - byteOffset) / GLType.getByteSize(glType);\n      }\n      var ArrayType = GLType.getArrayType(glType);\n      return new ArrayType(buffer, byteOffset, length);\n    }\n  }]);\n  return GLType;\n}();\nexport { GLType as default };","map":{"version":3,"names":["GL_TYPE","GL","GL_TYPE_TO_ARRAY_TYPE","_GL_TYPE_TO_ARRAY_TYP","_defineProperty","DOUBLE","Float64Array","FLOAT","Float32Array","UNSIGNED_SHORT","Uint16Array","UNSIGNED_INT","Uint32Array","UNSIGNED_BYTE","Uint8Array","BYTE","Int8Array","SHORT","Int16Array","INT","Int32Array","NAME_TO_GL_TYPE","ERR_TYPE_CONVERSION","GLType","_classCallCheck","_createClass","key","value","fromTypedArray","arrayOrType","ArrayBuffer","isView","constructor","glType","ArrayType","Error","fromName","name","getArrayType","UNSIGNED_SHORT_5_6_5","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","getByteSize","BYTES_PER_ELEMENT","validate","Boolean","createTypedArray","buffer","byteOffset","arguments","length","undefined","byteLength","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/geo-layers/node_modules/@loaders.gl/math/src/geometry/gl/gl-type.ts"],"sourcesContent":["import type {TypedArray} from '@math.gl/core';\nimport {GL_TYPE as GL} from '../constants';\n\nconst GL_TYPE_TO_ARRAY_TYPE = {\n  [GL.DOUBLE]: Float64Array,\n  [GL.FLOAT]: Float32Array,\n  [GL.UNSIGNED_SHORT]: Uint16Array,\n  [GL.UNSIGNED_INT]: Uint32Array,\n  [GL.UNSIGNED_BYTE]: Uint8Array,\n  [GL.BYTE]: Int8Array,\n  [GL.SHORT]: Int16Array,\n  [GL.INT]: Int32Array\n};\ntype GlTypeMap = {\n  [index: string]: number;\n};\nconst NAME_TO_GL_TYPE: GlTypeMap = {\n  DOUBLE: GL.DOUBLE,\n  FLOAT: GL.FLOAT,\n  UNSIGNED_SHORT: GL.UNSIGNED_SHORT,\n  UNSIGNED_INT: GL.UNSIGNED_INT,\n  UNSIGNED_BYTE: GL.UNSIGNED_BYTE,\n  BYTE: GL.BYTE,\n  SHORT: GL.SHORT,\n  INT: GL.INT\n};\nconst ERR_TYPE_CONVERSION = 'Failed to convert GL type';\n// Converts TYPED ARRAYS to corresponding GL constant\n// Used to auto deduce gl parameter types\nexport default class GLType {\n  // Signature: fromTypedArray(new Uint8Array())\n  // Signature: fromTypedArray(Uint8Array)\n  /**\n   * Returns the size, in bytes, of the corresponding datatype\n   * @param arrayOrType\n   * @returns glType a a string\n   */\n  static fromTypedArray(arrayOrType: TypedArray | Function): string {\n    // If typed array, look up constructor\n    arrayOrType = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n    for (const glType in GL_TYPE_TO_ARRAY_TYPE) {\n      const ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n      if (ArrayType === arrayOrType) {\n        return glType;\n      }\n    }\n    throw new Error(ERR_TYPE_CONVERSION);\n  }\n  /**\n   * Extracts name for glType from array NAME_TO_GL_TYPE\n   * @param name\n   * @returns glType as a number\n   */\n  static fromName(name: string): number {\n    const glType = NAME_TO_GL_TYPE[name];\n    if (!glType) {\n      throw new Error(ERR_TYPE_CONVERSION);\n    }\n    return glType;\n  }\n  // Converts GL constant to corresponding typed array type\n  // eslint-disable-next-line complexity\n  static getArrayType(glType: number) {\n    switch (glType) {\n      /*eslint-disable*/\n      // @ts-ignore\n      case GL.UNSIGNED_SHORT_5_6_5:\n      // @ts-ignore\n      case GL.UNSIGNED_SHORT_4_4_4_4:\n      // @ts-ignore\n      case GL.UNSIGNED_SHORT_5_5_5_1:\n        /* eslint-enable*/\n        return Uint16Array;\n      default:\n        const ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n        if (!ArrayType) {\n          throw new Error(ERR_TYPE_CONVERSION);\n        }\n        return ArrayType;\n    }\n  }\n  /**\n   * Returns the size in bytes of one element of the provided WebGL type\n   * @param glType\n   * @returns size of glType\n   */\n  static getByteSize(glType: number): number {\n    const ArrayType = GLType.getArrayType(glType);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n  /**\n   * Returns `true` if `glType` is a valid WebGL data type.\n   * @param glType\n   * @returns boolean\n   */\n  static validate(glType: number): boolean {\n    return Boolean(GLType.getArrayType(glType));\n  }\n  /**\n   * Creates a typed view of an array of bytes\n   * @param glType The type of typed array (ArrayBuffer view) to create\n   * @param buffer The buffer storage to use for the view.\n   * @param byteOffset The offset, in bytes, to the first element in the view\n   * @param length The number of elements in the view. Defaults to buffer length\n   * @returns A typed array view of the buffer\n   */\n  static createTypedArray(\n    glType: number,\n    buffer: TypedArray,\n    byteOffset: number = 0,\n    length?: number\n  ): TypedArray {\n    if (length === undefined) {\n      length = (buffer.byteLength - byteOffset) / GLType.getByteSize(glType);\n    }\n    const ArrayType = GLType.getArrayType(glType);\n    return new ArrayType(buffer, byteOffset, length);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}