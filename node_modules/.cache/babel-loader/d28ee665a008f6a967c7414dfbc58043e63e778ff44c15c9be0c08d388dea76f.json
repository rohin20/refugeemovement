{"ast":null,"code":"var arrayBuffer = null;\nexport function getScratchArrayBuffer(byteLength) {\n  if (!arrayBuffer || arrayBuffer.byteLength < byteLength) {\n    arrayBuffer = new ArrayBuffer(byteLength);\n  }\n  return arrayBuffer;\n}\nexport function getScratchArray(Type, length) {\n  var scratchArrayBuffer = getScratchArrayBuffer(Type.BYTES_PER_ELEMENT * length);\n  return new Type(scratchArrayBuffer, 0, length);\n}\nexport function fillArray(_ref) {\n  var target = _ref.target,\n    source = _ref.source,\n    _ref$start = _ref.start,\n    start = _ref$start === void 0 ? 0 : _ref$start,\n    _ref$count = _ref.count,\n    count = _ref$count === void 0 ? 1 : _ref$count;\n  var length = source.length;\n  var total = count * length;\n  var copied = 0;\n  for (var i = start; copied < length; copied++) {\n    target[i++] = source[copied];\n  }\n  while (copied < total) {\n    if (copied < total - copied) {\n      target.copyWithin(start + copied, start, start + copied);\n      copied *= 2;\n    } else {\n      target.copyWithin(start + copied, start, start + total - copied);\n      copied = total;\n    }\n  }\n  return target;\n}","map":{"version":3,"names":["arrayBuffer","getScratchArrayBuffer","byteLength","ArrayBuffer","getScratchArray","Type","length","scratchArrayBuffer","BYTES_PER_ELEMENT","fillArray","_ref","target","source","_ref$start","start","_ref$count","count","total","copied","i","copyWithin"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@luma.gl/webgl/src/utils/array-utils-flat.js"],"sourcesContent":["let arrayBuffer = null;\n\nexport function getScratchArrayBuffer(byteLength) {\n  if (!arrayBuffer || arrayBuffer.byteLength < byteLength) {\n    arrayBuffer = new ArrayBuffer(byteLength);\n  }\n  return arrayBuffer;\n}\n\nexport function getScratchArray(Type, length) {\n  const scratchArrayBuffer = getScratchArrayBuffer(Type.BYTES_PER_ELEMENT * length);\n  return new Type(scratchArrayBuffer, 0, length); // arrayBuffer, byteOffset, length (in elements)\n}\n\n// Uses copyWithin to significantly speed up typed array value filling\nexport function fillArray({target, source, start = 0, count = 1}) {\n  const length = source.length;\n  const total = count * length;\n  let copied = 0;\n  for (let i = start; copied < length; copied++) {\n    target[i++] = source[copied];\n  }\n\n  while (copied < total) {\n    // If we have copied less than half, copy everything we got\n    // else copy remaining in one operation\n    if (copied < total - copied) {\n      target.copyWithin(start + copied, start, start + copied);\n      copied *= 2;\n    } else {\n      target.copyWithin(start + copied, start, start + total - copied);\n      copied = total;\n    }\n  }\n\n  return target;\n}\n\n/*\n\n// Creates a new Uint8Array based on two different ArrayBuffers\n// @private\n// @param {ArrayBuffers} buffer1 The first buffer.\n// @param {ArrayBuffers} buffer2 The second buffer.\n// @return {ArrayBuffers} The new ArrayBuffer created out of the two.\n//\nexport function copyArrayBuffer(\n  targetBuffer, sourceBuffer, byteOffset, byteLength = sourceBuffer.byteLength\n) {\n  const targetArray = new Uint8Array(targetBuffer, byteOffset, byteLength);\n  const sourceArray = new Uint8Array(sourceBuffer);\n  targetArray.set(sourceArray);\n  return targetBuffer;\n}\n\n*/\n"],"mappings":"AAAA,IAAIA,WAAW,GAAG,IAAlB;AAEA,OAAO,SAASC,qBAATA,CAA+BC,UAA/B,EAA2C;EAChD,IAAI,CAACF,WAAD,IAAgBA,WAAW,CAACE,UAAZ,GAAyBA,UAA7C,EAAyD;IACvDF,WAAW,GAAG,IAAIG,WAAJ,CAAgBD,UAAhB,CAAd;EACD;EACD,OAAOF,WAAP;AACD;AAED,OAAO,SAASI,eAATA,CAAyBC,IAAzB,EAA+BC,MAA/B,EAAuC;EAC5C,IAAMC,kBAAkB,GAAGN,qBAAqB,CAACI,IAAI,CAACG,iBAAL,GAAyBF,MAA1B,CAAhD;EACA,OAAO,IAAID,IAAJ,CAASE,kBAAT,EAA6B,CAA7B,EAAgCD,MAAhC,CAAP;AACD;AAGD,OAAO,SAASG,SAATA,CAAAC,IAAA,EAA2D;EAAA,IAAvCC,MAAD,GAAwCD,IAAA,CAAvCC,MAAD;IAASC,MAAT,GAAwCF,IAAA,CAA/BE,MAAT;IAAAC,UAAA,GAAwCH,IAAA,CAAvBI,KAAK;IAALA,KAAK,GAAAD,UAAA,cAAG,CAAzB,GAAAA,UAAA;IAAAE,UAAA,GAAwCL,IAAA,CAAZM,KAAK;IAALA,KAAK,GAAAD,UAAA,cAAG,IAAAA,UAAA;EAC5D,IAAMT,MAAM,GAAGM,MAAM,CAACN,MAAtB;EACA,IAAMW,KAAK,GAAGD,KAAK,GAAGV,MAAtB;EACA,IAAIY,MAAM,GAAG,CAAb;EACA,KAAK,IAAIC,CAAC,GAAGL,KAAb,EAAoBI,MAAM,GAAGZ,MAA7B,EAAqCY,MAAM,EAA3C,EAA+C;IAC7CP,MAAM,CAACQ,CAAC,EAAF,CAAN,GAAcP,MAAM,CAACM,MAAD,CAApB;EACD;EAED,OAAOA,MAAM,GAAGD,KAAhB,EAAuB;IAGrB,IAAIC,MAAM,GAAGD,KAAK,GAAGC,MAArB,EAA6B;MAC3BP,MAAM,CAACS,UAAP,CAAkBN,KAAK,GAAGI,MAA1B,EAAkCJ,KAAlC,EAAyCA,KAAK,GAAGI,MAAjD;MACAA,MAAM,IAAI,CAAV;IACD,CAHD,MAGO;MACLP,MAAM,CAACS,UAAP,CAAkBN,KAAK,GAAGI,MAA1B,EAAkCJ,KAAlC,EAAyCA,KAAK,GAAGG,KAAR,GAAgBC,MAAzD;MACAA,MAAM,GAAGD,KAAT;IACD;EACF;EAED,OAAON,MAAP;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}