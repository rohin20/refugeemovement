{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport WorkerPool from './worker-pool';\nimport WorkerThread from './worker-thread';\nvar DEFAULT_PROPS = {\n  maxConcurrency: 3,\n  maxMobileConcurrency: 1,\n  reuseWorkers: true,\n  onDebug: function onDebug() {}\n};\nvar WorkerFarm = /*#__PURE__*/function () {\n  function WorkerFarm(props) {\n    _classCallCheck(this, WorkerFarm);\n    _defineProperty(this, \"props\", void 0);\n    _defineProperty(this, \"workerPools\", new Map());\n    this.props = _objectSpread({}, DEFAULT_PROPS);\n    this.setProps(props);\n    this.workerPools = new Map();\n  }\n  _createClass(WorkerFarm, [{\n    key: \"destroy\",\n    value: function destroy() {\n      var _iterator = _createForOfIteratorHelper(this.workerPools.values()),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var workerPool = _step.value;\n          workerPool.destroy();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      this.workerPools = new Map();\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      this.props = _objectSpread(_objectSpread({}, this.props), props);\n      var _iterator2 = _createForOfIteratorHelper(this.workerPools.values()),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var workerPool = _step2.value;\n          workerPool.setProps(this._getWorkerPoolProps());\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"getWorkerPool\",\n    value: function getWorkerPool(options) {\n      var name = options.name,\n        source = options.source,\n        url = options.url;\n      var workerPool = this.workerPools.get(name);\n      if (!workerPool) {\n        workerPool = new WorkerPool({\n          name: name,\n          source: source,\n          url: url\n        });\n        workerPool.setProps(this._getWorkerPoolProps());\n        this.workerPools.set(name, workerPool);\n      }\n      return workerPool;\n    }\n  }, {\n    key: \"_getWorkerPoolProps\",\n    value: function _getWorkerPoolProps() {\n      return {\n        maxConcurrency: this.props.maxConcurrency,\n        maxMobileConcurrency: this.props.maxMobileConcurrency,\n        reuseWorkers: this.props.reuseWorkers,\n        onDebug: this.props.onDebug\n      };\n    }\n  }], [{\n    key: \"isSupported\",\n    value: function isSupported() {\n      return WorkerThread.isSupported();\n    }\n  }, {\n    key: \"getWorkerFarm\",\n    value: function getWorkerFarm() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      WorkerFarm._workerFarm = WorkerFarm._workerFarm || new WorkerFarm({});\n      WorkerFarm._workerFarm.setProps(props);\n      return WorkerFarm._workerFarm;\n    }\n  }]);\n  return WorkerFarm;\n}();\nexport { WorkerFarm as default };\n_defineProperty(WorkerFarm, \"_workerFarm\", void 0);","map":{"version":3,"names":["WorkerPool","WorkerThread","DEFAULT_PROPS","maxConcurrency","maxMobileConcurrency","reuseWorkers","onDebug","WorkerFarm","props","_classCallCheck","_defineProperty","Map","_objectSpread","setProps","workerPools","_createClass","key","value","destroy","_iterator","_createForOfIteratorHelper","values","_step","s","n","done","workerPool","err","e","f","_iterator2","_step2","_getWorkerPoolProps","getWorkerPool","options","name","source","url","get","set","isSupported","getWorkerFarm","arguments","length","undefined","_workerFarm","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/worker-utils/src/lib/worker-farm/worker-farm.ts"],"sourcesContent":["import WorkerPool from './worker-pool';\nimport WorkerThread from './worker-thread';\n\n/**\n * @param maxConcurrency - max count of workers\n * @param maxMobileConcurrency - max count of workers on mobile\n * @param maxConcurrency - max count of workers\n * @param reuseWorkers - if false, destroys workers when task is completed\n * @param onDebug - callback intended to allow application to log worker pool activity\n */\nexport type WorkerFarmProps = {\n  maxConcurrency?: number;\n  maxMobileConcurrency?: number;\n  reuseWorkers?: boolean;\n  onDebug?: () => void;\n};\n\nconst DEFAULT_PROPS: Required<WorkerFarmProps> = {\n  maxConcurrency: 3,\n  maxMobileConcurrency: 1,\n  reuseWorkers: true,\n  onDebug: () => {}\n};\n\n/**\n * Process multiple jobs with a \"farm\" of different workers in worker pools.\n */\nexport default class WorkerFarm {\n  private props: WorkerFarmProps;\n  private workerPools = new Map<string, WorkerPool>();\n  // singleton\n  private static _workerFarm?: WorkerFarm;\n\n  /** Checks if workers are supported on this platform */\n  static isSupported(): boolean {\n    return WorkerThread.isSupported();\n  }\n\n  /** Get the singleton instance of the global worker farm */\n  static getWorkerFarm(props: WorkerFarmProps = {}): WorkerFarm {\n    WorkerFarm._workerFarm = WorkerFarm._workerFarm || new WorkerFarm({});\n    WorkerFarm._workerFarm.setProps(props);\n    return WorkerFarm._workerFarm;\n  }\n\n  /** get global instance with WorkerFarm.getWorkerFarm() */\n  private constructor(props: WorkerFarmProps) {\n    this.props = {...DEFAULT_PROPS};\n    this.setProps(props);\n    /** @type Map<string, WorkerPool>} */\n    this.workerPools = new Map();\n  }\n\n  /**\n   * Terminate all workers in the farm\n   * @note Can free up significant memory\n   */\n  destroy(): void {\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.destroy();\n    }\n    this.workerPools = new Map<string, WorkerPool>();\n  }\n\n  /**\n   * Set props used when initializing worker pools\n   * @param props\n   */\n  setProps(props: WorkerFarmProps): void {\n    this.props = {...this.props, ...props};\n    // Update worker pool props\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.setProps(this._getWorkerPoolProps());\n    }\n  }\n\n  /**\n   * Returns a worker pool for the specified worker\n   * @param options - only used first time for a specific worker name\n   * @param options.name - the name of the worker - used to identify worker pool\n   * @param options.url -\n   * @param options.source -\n   * @example\n   *   const job = WorkerFarm.getWorkerFarm().getWorkerPool({name, url}).startJob(...);\n   */\n  getWorkerPool(options: {name: string; source?: string; url?: string}): WorkerPool {\n    const {name, source, url} = options;\n    let workerPool = this.workerPools.get(name);\n    if (!workerPool) {\n      workerPool = new WorkerPool({\n        name,\n        source,\n        url\n      });\n      workerPool.setProps(this._getWorkerPoolProps());\n      this.workerPools.set(name, workerPool);\n    }\n    return workerPool;\n  }\n\n  _getWorkerPoolProps() {\n    return {\n      maxConcurrency: this.props.maxConcurrency,\n      maxMobileConcurrency: this.props.maxMobileConcurrency,\n      reuseWorkers: this.props.reuseWorkers,\n      onDebug: this.props.onDebug\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}