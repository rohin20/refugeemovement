{"ast":null,"code":"// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n'use strict';\n\nvar CONSTANT = require('./constant');\nvar RegexList = require('./regex-list');\nvar TimeRegex = require('./time-regex');\n/* eslint-disable max-len*/\n\n/**\n* Generate a function to discover which time format a value is\n* @param {Regex} formatRegex - the filter to be checked and processed\n* @param {Object} regexMap - Map between regex and associated format\n* @return {Func} to the format checker\n*/\nfunction whichFormatGenerator(formatRegex, regexMap) {\n  return function whichFormat(value) {\n    if (formatRegex.test(value)) {\n      var regexes = Object.keys(regexMap);\n      for (var i = 0; i < regexes.length; i++) {\n        var regex = regexes[i];\n        var format = regexMap[regex];\n        var newRegex = new RegExp(regex);\n        if (newRegex.test(value)) {\n          return format;\n        }\n      }\n    }\n    return false;\n  };\n}\nvar whichFormatTime = whichFormatGenerator(TimeRegex.ALL_TIME_FORMAT_REGEX, TimeRegex.TIME_FORMAT_REGEX_MAP);\nvar whichFormatDate = whichFormatGenerator(TimeRegex.DATE_FORMAT_REGEX, TimeRegex.DATE_FORMAT_REGEX_MAP);\nvar whichFormatDateTime = whichFormatGenerator(TimeRegex.ALL_DATE_TIME_REGEX, TimeRegex.DATE_TIME_MAP);\nvar Utils = {\n  buildRegexCheck: function buildRegexCheck(regexId) {\n    return function check(value) {\n      return RegexList[regexId].test(value.toString());\n    };\n  },\n  detectTimeFormat: function detectTimeFormat(value, type) {\n    switch (type) {\n      case CONSTANT.DATA_TYPES.DATETIME:\n        return whichFormatDateTime(value);\n      case CONSTANT.DATA_TYPES.DATE:\n      default:\n        return whichFormatDate(value);\n      case CONSTANT.DATA_TYPES.TIME:\n        return whichFormatTime(value);\n    }\n  },\n  findFirstNonNullValue: function findFirstNonNullValue(data, column) {\n    for (var i = 0; i < data.length; i++) {\n      if (data[i][column] !== null && data[i][column] !== CONSTANT.NULL) {\n        return data[i][column];\n      }\n    }\n    return null;\n  },\n  isBoolean: function isBoolean(value) {\n    return CONSTANT.BOOLEAN_TRUE_VALUES.concat(CONSTANT.BOOLEAN_FALSE_VALUES).indexOf(String(value).toLowerCase()) > -1;\n  },\n  isGeographic: function isGeographic(value) {\n    return Boolean(value) && typeof value === 'object' && value.hasOwnProperty('type') && value.hasOwnProperty('coordinates');\n  },\n  // string types\n  isString: function isString(value) {\n    return typeof value === 'string';\n  },\n  isArray: function isArray(value) {\n    return Array.isArray(value);\n  },\n  isDateObject: function isDateObject(value) {\n    // Note: invalid Dates return true as well as valid Dates.\n    return value instanceof Date;\n  },\n  isObject: function isObject(value) {\n    return value === Object(value) && typeof value !== 'function' && !Array.isArray(value);\n  },\n  whichFormatTime: whichFormatTime,\n  whichFormatDate: whichFormatDate,\n  whichFormatDateTime: whichFormatDateTime\n};\n\n/* eslint-enable max-len*/\n\nmodule.exports = Utils;","map":{"version":3,"names":["CONSTANT","require","RegexList","TimeRegex","whichFormatGenerator","formatRegex","regexMap","whichFormat","value","test","regexes","Object","keys","i","length","regex","format","newRegex","RegExp","whichFormatTime","ALL_TIME_FORMAT_REGEX","TIME_FORMAT_REGEX_MAP","whichFormatDate","DATE_FORMAT_REGEX","DATE_FORMAT_REGEX_MAP","whichFormatDateTime","ALL_DATE_TIME_REGEX","DATE_TIME_MAP","Utils","buildRegexCheck","regexId","check","toString","detectTimeFormat","type","DATA_TYPES","DATETIME","DATE","TIME","findFirstNonNullValue","data","column","NULL","isBoolean","BOOLEAN_TRUE_VALUES","concat","BOOLEAN_FALSE_VALUES","indexOf","String","toLowerCase","isGeographic","Boolean","hasOwnProperty","isString","isArray","Array","isDateObject","Date","isObject","module","exports"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/type-analyzer/src/utils.js"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n'use strict';\n\nvar CONSTANT = require('./constant');\nvar RegexList = require('./regex-list');\nvar TimeRegex = require('./time-regex');\n/* eslint-disable max-len*/\n\n/**\n* Generate a function to discover which time format a value is\n* @param {Regex} formatRegex - the filter to be checked and processed\n* @param {Object} regexMap - Map between regex and associated format\n* @return {Func} to the format checker\n*/\nfunction whichFormatGenerator(formatRegex, regexMap) {\n  return function whichFormat(value) {\n    if (formatRegex.test(value)) {\n      var regexes = Object.keys(regexMap);\n      for (var i = 0; i < regexes.length; i++) {\n        var regex = regexes[i];\n        var format = regexMap[regex];\n        var newRegex = new RegExp(regex);\n        if (newRegex.test(value)) {\n          return format;\n        }\n      }\n    }\n    return false;\n  };\n}\n\nvar whichFormatTime = whichFormatGenerator(TimeRegex.ALL_TIME_FORMAT_REGEX, TimeRegex.TIME_FORMAT_REGEX_MAP);\nvar whichFormatDate = whichFormatGenerator(TimeRegex.DATE_FORMAT_REGEX, TimeRegex.DATE_FORMAT_REGEX_MAP);\nvar whichFormatDateTime = whichFormatGenerator(TimeRegex.ALL_DATE_TIME_REGEX, TimeRegex.DATE_TIME_MAP);\n\nvar Utils = {\n  buildRegexCheck: function buildRegexCheck(regexId) {\n    return function check(value) {\n      return RegexList[regexId].test(value.toString());\n    };\n  },\n\n  detectTimeFormat: function detectTimeFormat(value, type) {\n    switch (type) {\n    case CONSTANT.DATA_TYPES.DATETIME:\n      return whichFormatDateTime(value);\n    case CONSTANT.DATA_TYPES.DATE:\n    default:\n      return whichFormatDate(value);\n    case CONSTANT.DATA_TYPES.TIME:\n      return whichFormatTime(value);\n    }\n  },\n\n  findFirstNonNullValue: function findFirstNonNullValue(data, column) {\n    for (var i = 0; i < data.length; i++) {\n      if (data[i][column] !== null && data[i][column] !== CONSTANT.NULL) {\n        return data[i][column];\n      }\n    }\n    return null;\n  },\n\n  isBoolean: function isBoolean(value) {\n    return CONSTANT.BOOLEAN_TRUE_VALUES\n      .concat(CONSTANT.BOOLEAN_FALSE_VALUES)\n      .indexOf(String(value).toLowerCase()) > -1;\n  },\n\n  isGeographic: function isGeographic(value) {\n    return Boolean(value) && typeof value === 'object' &&\n        value.hasOwnProperty('type') && value.hasOwnProperty('coordinates');\n  },\n\n  // string types\n  isString: function isString(value) {\n    return typeof value === 'string';\n  },\n\n  isArray: function isArray(value) {\n    return Array.isArray(value);\n  },\n\n  isDateObject: function isDateObject(value) {\n    // Note: invalid Dates return true as well as valid Dates.\n    return value instanceof Date;\n  },\n\n  isObject: function isObject(value) {\n    return value === Object(value) && typeof value !== 'function' && !Array.isArray(value)\n  },\n\n  whichFormatTime: whichFormatTime,\n  whichFormatDate: whichFormatDate,\n  whichFormatDateTime: whichFormatDateTime\n};\n\n/* eslint-enable max-len*/\n\nmodule.exports = Utils;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAY,CAAC;AACpC,IAAIC,SAAS,GAAGD,OAAO,CAAC,cAAc,CAAC;AACvC,IAAIE,SAAS,GAAGF,OAAO,CAAC,cAAc,CAAC;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,oBAAoBA,CAACC,WAAW,EAAEC,QAAQ,EAAE;EACnD,OAAO,SAASC,WAAWA,CAACC,KAAK,EAAE;IACjC,IAAIH,WAAW,CAACI,IAAI,CAACD,KAAK,CAAC,EAAE;MAC3B,IAAIE,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACN,QAAQ,CAAC;MACnC,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,OAAO,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;QACvC,IAAIE,KAAK,GAAGL,OAAO,CAACG,CAAC,CAAC;QACtB,IAAIG,MAAM,GAAGV,QAAQ,CAACS,KAAK,CAAC;QAC5B,IAAIE,QAAQ,GAAG,IAAIC,MAAM,CAACH,KAAK,CAAC;QAChC,IAAIE,QAAQ,CAACR,IAAI,CAACD,KAAK,CAAC,EAAE;UACxB,OAAOQ,MAAM;QACf;MACF;IACF;IACA,OAAO,KAAK;EACd,CAAC;AACH;AAEA,IAAIG,eAAe,GAAGf,oBAAoB,CAACD,SAAS,CAACiB,qBAAqB,EAAEjB,SAAS,CAACkB,qBAAqB,CAAC;AAC5G,IAAIC,eAAe,GAAGlB,oBAAoB,CAACD,SAAS,CAACoB,iBAAiB,EAAEpB,SAAS,CAACqB,qBAAqB,CAAC;AACxG,IAAIC,mBAAmB,GAAGrB,oBAAoB,CAACD,SAAS,CAACuB,mBAAmB,EAAEvB,SAAS,CAACwB,aAAa,CAAC;AAEtG,IAAIC,KAAK,GAAG;EACVC,eAAe,EAAE,SAASA,eAAeA,CAACC,OAAO,EAAE;IACjD,OAAO,SAASC,KAAKA,CAACvB,KAAK,EAAE;MAC3B,OAAON,SAAS,CAAC4B,OAAO,CAAC,CAACrB,IAAI,CAACD,KAAK,CAACwB,QAAQ,EAAE,CAAC;IAClD,CAAC;EACH,CAAC;EAEDC,gBAAgB,EAAE,SAASA,gBAAgBA,CAACzB,KAAK,EAAE0B,IAAI,EAAE;IACvD,QAAQA,IAAI;MACZ,KAAKlC,QAAQ,CAACmC,UAAU,CAACC,QAAQ;QAC/B,OAAOX,mBAAmB,CAACjB,KAAK,CAAC;MACnC,KAAKR,QAAQ,CAACmC,UAAU,CAACE,IAAI;MAC7B;QACE,OAAOf,eAAe,CAACd,KAAK,CAAC;MAC/B,KAAKR,QAAQ,CAACmC,UAAU,CAACG,IAAI;QAC3B,OAAOnB,eAAe,CAACX,KAAK,CAAC;IAAC;EAElC,CAAC;EAED+B,qBAAqB,EAAE,SAASA,qBAAqBA,CAACC,IAAI,EAAEC,MAAM,EAAE;IAClE,KAAK,IAAI5B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2B,IAAI,CAAC1B,MAAM,EAAED,CAAC,EAAE,EAAE;MACpC,IAAI2B,IAAI,CAAC3B,CAAC,CAAC,CAAC4B,MAAM,CAAC,KAAK,IAAI,IAAID,IAAI,CAAC3B,CAAC,CAAC,CAAC4B,MAAM,CAAC,KAAKzC,QAAQ,CAAC0C,IAAI,EAAE;QACjE,OAAOF,IAAI,CAAC3B,CAAC,CAAC,CAAC4B,MAAM,CAAC;MACxB;IACF;IACA,OAAO,IAAI;EACb,CAAC;EAEDE,SAAS,EAAE,SAASA,SAASA,CAACnC,KAAK,EAAE;IACnC,OAAOR,QAAQ,CAAC4C,mBAAmB,CAChCC,MAAM,CAAC7C,QAAQ,CAAC8C,oBAAoB,CAAC,CACrCC,OAAO,CAACC,MAAM,CAACxC,KAAK,CAAC,CAACyC,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC;EAC9C,CAAC;EAEDC,YAAY,EAAE,SAASA,YAAYA,CAAC1C,KAAK,EAAE;IACzC,OAAO2C,OAAO,CAAC3C,KAAK,CAAC,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAC9CA,KAAK,CAAC4C,cAAc,CAAC,MAAM,CAAC,IAAI5C,KAAK,CAAC4C,cAAc,CAAC,aAAa,CAAC;EACzE,CAAC;EAED;EACAC,QAAQ,EAAE,SAASA,QAAQA,CAAC7C,KAAK,EAAE;IACjC,OAAO,OAAOA,KAAK,KAAK,QAAQ;EAClC,CAAC;EAED8C,OAAO,EAAE,SAASA,OAAOA,CAAC9C,KAAK,EAAE;IAC/B,OAAO+C,KAAK,CAACD,OAAO,CAAC9C,KAAK,CAAC;EAC7B,CAAC;EAEDgD,YAAY,EAAE,SAASA,YAAYA,CAAChD,KAAK,EAAE;IACzC;IACA,OAAOA,KAAK,YAAYiD,IAAI;EAC9B,CAAC;EAEDC,QAAQ,EAAE,SAASA,QAAQA,CAAClD,KAAK,EAAE;IACjC,OAAOA,KAAK,KAAKG,MAAM,CAACH,KAAK,CAAC,IAAI,OAAOA,KAAK,KAAK,UAAU,IAAI,CAAC+C,KAAK,CAACD,OAAO,CAAC9C,KAAK,CAAC;EACxF,CAAC;EAEDW,eAAe,EAAEA,eAAe;EAChCG,eAAe,EAAEA,eAAe;EAChCG,mBAAmB,EAAEA;AACvB,CAAC;;AAED;;AAEAkC,MAAM,CAACC,OAAO,GAAGhC,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}