{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DEFAULT_COLOR_RANGE = exports.COLOR_RANGES = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _colorbrewer = _interopRequireDefault(require(\"colorbrewer\"));\nvar _customColorRanges = require(\"./custom-color-ranges\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\n\n// Add colorbrewer color schemes (Data Science requirement)\n// See http://colorbrewer2.org/\nvar colorBrewerMap = Object.entries(_colorbrewer[\"default\"].schemeGroups).reduce(function (accu, _ref) {\n  var _ref2 = (0, _slicedToArray2[\"default\"])(_ref, 2),\n    type = _ref2[0],\n    palettes = _ref2[1];\n  return _objectSpread(_objectSpread({}, accu), palettes.reduce(function (group, name) {\n    return _objectSpread(_objectSpread({}, group), {}, (0, _defineProperty2[\"default\"])({}, name, type));\n  }, {}));\n}, {});\nvar colorRanges = (0, _toConsumableArray2[\"default\"])(_customColorRanges.VizColorPalette);\nfor (var _i = 0, _Object$entries = Object.entries(_colorbrewer[\"default\"]); _i < _Object$entries.length; _i++) {\n  var _Object$entries$_i = (0, _slicedToArray2[\"default\"])(_Object$entries[_i], 2),\n    keyName = _Object$entries$_i[0],\n    colorScheme = _Object$entries$_i[1];\n  if (keyName !== 'schemeGroups') {\n    for (var _i2 = 0, _Object$entries2 = Object.entries(colorScheme); _i2 < _Object$entries2.length; _i2++) {\n      var _Object$entries2$_i = (0, _slicedToArray2[\"default\"])(_Object$entries2[_i2], 2),\n        lenKey = _Object$entries2$_i[0],\n        colors = _Object$entries2$_i[1];\n      colorRanges.push({\n        name: \"ColorBrewer \".concat(keyName, \"-\").concat(lenKey),\n        type: colorBrewerMap[keyName],\n        category: 'ColorBrewer',\n        colors: colors\n      });\n    }\n  }\n}\nvar COLOR_RANGES = colorRanges;\nexports.COLOR_RANGES = COLOR_RANGES;\nvar DEFAULT_COLOR_RANGE = colorRanges.find(function (_ref3) {\n  var name = _ref3.name;\n  return name === 'Global Warming';\n}) || {\n  name: 'Global Warming',\n  type: 'SEQ',\n  category: 'Uber',\n  colors: ['#5A1846', '#900C3F', '#C70039', '#E3611C', '#F1920E', '#FFC300']\n};\nexports.DEFAULT_COLOR_RANGE = DEFAULT_COLOR_RANGE;","map":{"version":3,"names":["Object","defineProperty","exports","value","DEFAULT_COLOR_RANGE","COLOR_RANGES","_defineProperty2","_interopRequireDefault","require","_slicedToArray2","_customColorRanges","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","keyName","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","colorBrewerMap","entries","_colorbrewer","schemeGroups","reduce","accu","_ref","type","_ref2","palettes","group","name","colorRanges","_toConsumableArray2","VizColorPalette","_Object$entries$_i","_Object$entries","_i","colorScheme","_i2","_Object$entries2","_Object$entries2$_i","lenKey","colors"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/constants/src/color-ranges.ts"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport colorbrewer from 'colorbrewer';\nimport {HexColor} from '@kepler.gl/types';\nimport {VizColorPalette} from './custom-color-ranges';\n\nexport type ColorMap = [string | number | null, HexColor][];\n// Key is HexColor but as key we can use only string\nexport type ColorLegends = {[key: string]: string};\n\nexport type ColorRange = {\n  name?: string;\n  type?: string;\n  category?: string;\n  colors: HexColor[];\n  reversed?: boolean;\n  colorMap?: ColorMap;\n  colorLegends?: ColorLegends;\n};\n\n// Add colorbrewer color schemes (Data Science requirement)\n// See http://colorbrewer2.org/\n\nconst colorBrewerMap = Object.entries(colorbrewer.schemeGroups).reduce(\n  (accu, [type, palettes]: [string, any]) => ({\n    ...accu,\n    ...palettes.reduce(\n      (group, name) => ({\n        ...group,\n        [name]: type\n      }),\n      {}\n    )\n  }),\n  {}\n);\n\nconst colorRanges: ColorRange[] = [...VizColorPalette];\n\nfor (const [keyName, colorScheme] of Object.entries(colorbrewer)) {\n  if (keyName !== 'schemeGroups') {\n    for (const [lenKey, colors] of Object.entries(colorScheme as any)) {\n      colorRanges.push({\n        name: `ColorBrewer ${keyName}-${lenKey}`,\n        type: colorBrewerMap[keyName],\n        category: 'ColorBrewer',\n        colors: colors as HexColor[]\n      });\n    }\n  }\n}\n\nexport const COLOR_RANGES = colorRanges;\n\nexport const DEFAULT_COLOR_RANGE = colorRanges.find(({name}) => name === 'Global Warming') || {\n  name: 'Global Warming',\n  type: 'SEQ',\n  category: 'Uber',\n  colors: ['#5A1846', '#900C3F', '#C70039', '#E3611C', '#F1920E', '#FFC300']\n};\n"],"mappings":";;;;;;;;;;;;;;;AAoBA;;AAEA;;;;;;AAiBAA,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAEAC,KAAM;AACJ;AAAAD,OAAQ,CAAAE,mBAAR,GAAAF,OAAA,CAAAG,YAAA;;AAGI,IAAAC,gBAAA,GAAAC,sBACK,CAAAC,OADL,wCAEG;AALP,IAUAC,eAXF,GAAAF,sBAAA,CAAAC,OAAA;;AAgBkE,IAAAE,kBAAA,GAAAF,OAAA;AAAA,SAA7CG,QAA6CC,MAAA,EAAAC,cAAA;EAAA,IAAAC,IAAA,GAAAd,MAAA,CAAAc,IAAA,CAAAF,MAAA;EAAA,IAAAZ,MAAA,CAAAe,qBAAA;IAAA,IAAAC,OAAA,GAAAhB,MAAA,CAAAe,qBAAA,CAAAH,MAAA;IAAA,IAAAC,cAAA,EAAAG,OAAA,GAAAA,OAAA,CAAAC,MAAA,WAAAC,GAAA;MAAA,OAAAlB,MAAA,CAAAmB,wBAAA,CAAAP,MAAA,EAAAM,GAAA,EAAAE,UAAA;IAAA;IAAAN,IAAA,CAAAO,IAAA,CAAAC,KAAA,CAAAR,IAAA,EAAAE,OAAA;EAAA;EAAA,OAAAF,IAAA;AAAA;AAChE,SAAIS,aAAYC,CAAAC,MAAA;EAAhB,KAAgC,IAAAC,CAAA,MAAAA,CAAA,GAAAC,SAAA,CAAAC,MAAA,EAAAF,CAAA;IAAA,IAAAG,MAAA,GAAAF,SAAA,CAAAD,CAAA,YAAAC,SAAA,CAAAD,CAAA;IAAA,IAAAA,CAAA;MAAAf,OAAA,CAAAX,MAAA,CAAA6B,MAAA,SAAAC,OAAA,WAAAC,GAAA;QAAA,IAAAzB,gBAAA,aAAAmB,MAAA,EAAAM,GAAA,EAAAF,MAAA,CAAAE,GAAA;MAAA;IAAA,WAAA/B,MAAA,CAAAgC,yBAAA;MAAAhC,MAAA,CAAAiC,gBAAA,CAAAR,MAAA,EAAAzB,MAAA,CAAAgC,yBAAA,CAAAH,MAAA;IAAA;MAAAlB,OAAA,CAAAX,MAAA,CAAA6B,MAAA,GAAAC,OAAA,WAAAC,GAAA;QAAA/B,MAAA,CAAAC,cAAA,CAAAwB,MAAA,EAAAM,GAAA,EAAA/B,MAAA,CAAAmB,wBAAA,CAAAU,MAAA,EAAAE,GAAA;MAAA;IAAA;EAAA;EAAA,OAAAN,MAAA;AAAA;;AACqC;AAAA;AAAA,IAAAS,cAAA,GAAAlC,MAAA,CAAAmC,OAAA,CAAAC,YAAA,YAAAC,YAAA,EAAAC,MAAA,WAAAC,IAAA,EAAAC,IAAA;;IACjEC,IAAA,GAAAC,KAAY;IACVC,QAAI,GAAAD,KAAA;EAEJ,OAAAnB,aAAU,CAAAA,aAHK,KAAAgB,IAAA,GAAAI,QAAA,CAAAL,MAAA,WAAAM,KAAA,EAAAC,IAAA;IAIf,OAAAtB,aAAQ,CAAAA,aAAA,KAAAqB,KAAA,WAAAtC,gBAAA,iBAAAuC,IAAA,EAAAJ,IAAA;EAJO,KAAjB;AAMD;AACF,IAAAK,WAAA,OAAAC,mBAAA,aAAArC,kBAAA,CAAAsC,eAAA;;EAGI,IAAMC,kBAAe,OAArBxC,eAAA,aAAAyC,eAAA,CAAAC,EAAA;;IAEMC,WAAA,GAAAH,kBAAkC;EAAK,IAAAzB,OAAgB,KAAK,gBAArB;IAAjB,KAA2D,IAAA6B,GAAA,MAAAC,gBAAA,GAAAtD,MAAA,CAAAmC,OAAA,CAAAiB,WAAA,GAAAC,GAAA,GAAAC,gBAAA,CAAA1B,MAAA,EAAAyB,GAAA;MACxF,IAAEE,mBADsF,OAAA9C,eAAA,aAAA6C,gBAAA,CAAAD,GAAA;QAEtFG,MAFsF,GAAAD,mBAAA;QAGpFE,MAAE,GAHkFF,mBAAA;MAAvFT,WAAA,CAAAzB,IAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}