{"ast":null,"code":"import _slicedToArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { assert } from '../utils';\nvar FS100 = \"void main() {gl_FragColor = vec4(0);}\";\nvar FS_GLES = \"out vec4 transform_output;\\nvoid main() {\\n  transform_output = vec4(0);\\n}\";\nvar FS300 = \"#version 300 es\\n\".concat(FS_GLES);\nexport function getQualifierDetails(line, qualifiers) {\n  qualifiers = Array.isArray(qualifiers) ? qualifiers : [qualifiers];\n  var words = line.replace(/^\\s+/, '').split(/\\s+/);\n  var _words = _slicedToArray(words, 3),\n    qualifier = _words[0],\n    type = _words[1],\n    definition = _words[2];\n  if (!qualifiers.includes(qualifier) || !type || !definition) {\n    return null;\n  }\n  var name = definition.split(';')[0];\n  return {\n    qualifier: qualifier,\n    type: type,\n    name: name\n  };\n}\nexport function getPassthroughFS() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _options$version = options.version,\n    version = _options$version === void 0 ? 100 : _options$version,\n    input = options.input,\n    inputType = options.inputType,\n    output = options.output;\n  if (!input) {\n    if (version === 300) {\n      return FS300;\n    } else if (version > 300) {\n      return \"#version \".concat(version, \"\\n\").concat(FS_GLES);\n    }\n    return FS100;\n  }\n  var outputValue = convertToVec4(input, inputType);\n  if (version >= 300) {\n    return \"#version \".concat(version, \" \").concat(version === 300 ? 'es' : '', \"\\nin \").concat(inputType, \" \").concat(input, \";\\nout vec4 \").concat(output, \";\\nvoid main() {\\n  \").concat(output, \" = \").concat(outputValue, \";\\n}\");\n  }\n  return \"varying \".concat(inputType, \" \").concat(input, \";\\nvoid main() {\\n  gl_FragColor = \").concat(outputValue, \";\\n}\");\n}\nexport function typeToChannelSuffix(type) {\n  switch (type) {\n    case 'float':\n      return 'x';\n    case 'vec2':\n      return 'xy';\n    case 'vec3':\n      return 'xyz';\n    case 'vec4':\n      return 'xyzw';\n    default:\n      assert(false);\n      return null;\n  }\n}\nexport function typeToChannelCount(type) {\n  switch (type) {\n    case 'float':\n      return 1;\n    case 'vec2':\n      return 2;\n    case 'vec3':\n      return 3;\n    case 'vec4':\n      return 4;\n    default:\n      assert(false);\n      return null;\n  }\n}\nexport function convertToVec4(variable, type) {\n  switch (type) {\n    case 'float':\n      return \"vec4(\".concat(variable, \", 0.0, 0.0, 1.0)\");\n    case 'vec2':\n      return \"vec4(\".concat(variable, \", 0.0, 1.0)\");\n    case 'vec3':\n      return \"vec4(\".concat(variable, \", 1.0)\");\n    case 'vec4':\n      return variable;\n    default:\n      assert(false);\n      return null;\n  }\n}","map":{"version":3,"names":["assert","FS100","FS_GLES","FS300","concat","getQualifierDetails","line","qualifiers","Array","isArray","words","replace","split","_words","_slicedToArray","qualifier","type","definition","includes","name","getPassthroughFS","options","arguments","length","undefined","_options$version","version","input","inputType","output","outputValue","convertToVec4","typeToChannelSuffix","typeToChannelCount","variable"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@luma.gl/shadertools/src/utils/shader-utils.js"],"sourcesContent":["import {assert} from '../utils';\nconst FS100 = `void main() {gl_FragColor = vec4(0);}`;\nconst FS_GLES = `\\\nout vec4 transform_output;\nvoid main() {\n  transform_output = vec4(0);\n}`;\nconst FS300 = `#version 300 es\\n${FS_GLES}`;\n\n// Prase given glsl line and return qualifier details or null\nexport function getQualifierDetails(line, qualifiers) {\n  qualifiers = Array.isArray(qualifiers) ? qualifiers : [qualifiers];\n  const words = line.replace(/^\\s+/, '').split(/\\s+/);\n  // TODO add support for precession qualifiers (highp, mediump and lowp)\n  const [qualifier, type, definition] = words;\n  if (!qualifiers.includes(qualifier) || !type || !definition) {\n    return null;\n  }\n  const name = definition.split(';')[0];\n  return {qualifier, type, name};\n}\n\n// Given the shader version, input and output variable names,\n// builds and return a pass through fragment shader.\nexport function getPassthroughFS(options = {}) {\n  const {version = 100, input, inputType, output} = options;\n  if (!input) {\n    if (version === 300) {\n      // Fast-path for WebGL 2.0\n      return FS300;\n    } else if (version > 300) {\n      // Use the supplied version for OpenGL/ES 3.2+\n      return `#version ${version}\\n${FS_GLES}`;\n    }\n    // Fast-path for WebGL 1.0\n    return FS100;\n  }\n  const outputValue = convertToVec4(input, inputType);\n  if (version >= 300) {\n    // If version is 300, assume WebGL 2.0\n    return `\\\n#version ${version} ${version === 300 ? 'es' : ''}\nin ${inputType} ${input};\nout vec4 ${output};\nvoid main() {\n  ${output} = ${outputValue};\n}`;\n  }\n  // WebGL 1.0\n  return `\\\nvarying ${inputType} ${input};\nvoid main() {\n  gl_FragColor = ${outputValue};\n}`;\n}\n\n// convert glsl type to suffix\nexport function typeToChannelSuffix(type) {\n  switch (type) {\n    case 'float':\n      return 'x';\n    case 'vec2':\n      return 'xy';\n    case 'vec3':\n      return 'xyz';\n    case 'vec4':\n      return 'xyzw';\n    default:\n      assert(false);\n      return null;\n  }\n}\n\n// convert glsl type to channel count\nexport function typeToChannelCount(type) {\n  switch (type) {\n    case 'float':\n      return 1;\n    case 'vec2':\n      return 2;\n    case 'vec3':\n      return 3;\n    case 'vec4':\n      return 4;\n    default:\n      assert(false);\n      return null;\n  }\n}\n\n// Returns glsl instruction for converting to vec4\nexport function convertToVec4(variable, type) {\n  switch (type) {\n    case 'float':\n      return `vec4(${variable}, 0.0, 0.0, 1.0)`;\n    case 'vec2':\n      return `vec4(${variable}, 0.0, 1.0)`;\n    case 'vec3':\n      return `vec4(${variable}, 1.0)`;\n    case 'vec4':\n      return variable;\n    default:\n      assert(false);\n      return null;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}