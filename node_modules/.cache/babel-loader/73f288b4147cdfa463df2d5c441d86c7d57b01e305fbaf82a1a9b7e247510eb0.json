{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _asyncIterator from \"@babel/runtime/helpers/esm/asyncIterator\";\nimport { concatenateArrayBuffers } from '../binary-utils/array-buffer-utils';\nimport assert from '../env-utils/assert';\nexport function forEach(_x, _x2) {\n  return _forEach.apply(this, arguments);\n}\nfunction _forEach() {\n  _forEach = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(iterator, visitor) {\n    var _yield$iterator$next, done, value, cancel;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!true) {\n              _context.next = 14;\n              break;\n            }\n            _context.next = 3;\n            return iterator.next();\n          case 3:\n            _yield$iterator$next = _context.sent;\n            done = _yield$iterator$next.done;\n            value = _yield$iterator$next.value;\n            if (!done) {\n              _context.next = 9;\n              break;\n            }\n            iterator[\"return\"]();\n            return _context.abrupt(\"return\");\n          case 9:\n            cancel = visitor(value);\n            if (!cancel) {\n              _context.next = 12;\n              break;\n            }\n            return _context.abrupt(\"return\");\n          case 12:\n            _context.next = 0;\n            break;\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _forEach.apply(this, arguments);\n}\nexport function concatenateChunksAsync(_x3) {\n  return _concatenateChunksAsync.apply(this, arguments);\n}\nfunction _concatenateChunksAsync() {\n  _concatenateChunksAsync = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(asyncIterator) {\n    var arrayBuffers, strings, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            arrayBuffers = [];\n            strings = [];\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context2.prev = 4;\n            _iterator = _asyncIterator(asyncIterator);\n          case 6:\n            _context2.next = 8;\n            return _iterator.next();\n          case 8:\n            _step = _context2.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context2.next = 12;\n            return _step.value;\n          case 12:\n            _value = _context2.sent;\n            if (_iteratorNormalCompletion) {\n              _context2.next = 19;\n              break;\n            }\n            chunk = _value;\n            if (typeof chunk === 'string') {\n              strings.push(chunk);\n            } else {\n              arrayBuffers.push(chunk);\n            }\n          case 16:\n            _iteratorNormalCompletion = true;\n            _context2.next = 6;\n            break;\n          case 19:\n            _context2.next = 25;\n            break;\n          case 21:\n            _context2.prev = 21;\n            _context2.t0 = _context2[\"catch\"](4);\n            _didIteratorError = true;\n            _iteratorError = _context2.t0;\n          case 25:\n            _context2.prev = 25;\n            _context2.prev = 26;\n            if (!(!_iteratorNormalCompletion && _iterator[\"return\"] != null)) {\n              _context2.next = 30;\n              break;\n            }\n            _context2.next = 30;\n            return _iterator[\"return\"]();\n          case 30:\n            _context2.prev = 30;\n            if (!_didIteratorError) {\n              _context2.next = 33;\n              break;\n            }\n            throw _iteratorError;\n          case 33:\n            return _context2.finish(30);\n          case 34:\n            return _context2.finish(25);\n          case 35:\n            if (!(strings.length > 0)) {\n              _context2.next = 38;\n              break;\n            }\n            assert(arrayBuffers.length === 0);\n            return _context2.abrupt(\"return\", strings.join(''));\n          case 38:\n            return _context2.abrupt(\"return\", concatenateArrayBuffers.apply(void 0, arrayBuffers));\n          case 39:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[4, 21, 25, 35], [26,, 30, 34]]);\n  }));\n  return _concatenateChunksAsync.apply(this, arguments);\n}","map":{"version":3,"names":["concatenateArrayBuffers","assert","forEach","_x","_x2","_forEach","apply","arguments","_callee","iterator","visitor","_yield$iterator$next","done","value","cancel","_regeneratorRuntime","wrap","_callee$","_context","prev","next","sent","abrupt","stop","concatenateChunksAsync","_x3","_concatenateChunksAsync","_callee2","asyncIterator","arrayBuffers","strings","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_value","chunk","_callee2$","_context2","_asyncIterator","push","t0","finish","length","join"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/json/node_modules/@loaders.gl/loader-utils/src/lib/iterator-utils/async-iteration.js"],"sourcesContent":["import {concatenateArrayBuffers} from '../binary-utils/array-buffer-utils';\nimport assert from '../env-utils/assert';\n\n// GENERAL UTILITIES\n\n/**\n * Iterate over async iterator, without resetting iterator if end is not reached\n * - forEach intentionally does not reset iterator if exiting loop prematurely\n *   so that iteration can continue in a second loop\n * - It is recommended to use a standard for-await as last loop to ensure\n *   iterator gets properly reset\n *\n * TODO - optimize using sync iteration if argument is an Iterable?\n *\n * @param iterator\n * @param visitor\n */\nexport async function forEach(iterator, visitor) {\n  // eslint-disable-next-line\n  while (true) {\n    const {done, value} = await iterator.next();\n    if (done) {\n      iterator.return();\n      return;\n    }\n    const cancel = visitor(value);\n    if (cancel) {\n      return;\n    }\n  }\n}\n\n// Breaking big data into iterable chunks, concatenating iterable chunks into big data objects\n\n/**\n * Concatenates all data chunks yielded by an (async) iterator\n * Supports strings and ArrayBuffers\n *\n * This function can e.g. be used to enable atomic parsers to work on (async) iterator inputs\n */\nexport async function concatenateChunksAsync(asyncIterator) {\n  /** @type {ArrayBuffer[]} */\n  const arrayBuffers = [];\n  /** @type {string[]} */\n  const strings = [];\n  for await (const chunk of asyncIterator) {\n    if (typeof chunk === 'string') {\n      strings.push(chunk);\n    } else {\n      arrayBuffers.push(chunk);\n    }\n  }\n\n  if (strings.length > 0) {\n    assert(arrayBuffers.length === 0);\n    return strings.join('');\n  }\n\n  return concatenateArrayBuffers(...arrayBuffers);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}