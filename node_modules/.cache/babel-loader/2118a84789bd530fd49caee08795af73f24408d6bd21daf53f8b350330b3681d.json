{"ast":null,"code":"/*\n * Copyright (c) 2009 Nicholas C. Zakas. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/*\n * Base 64 implementation in JavaScript\n * Original source available at https://raw.github.com/nzakas/computer-science-in-javascript/02a2745b4aa8214f2cae1bf0b15b447ca1a91b23/encodings/base64/base64.js\n *\n * Linter refinement by Scott Andrews\n */\n\n'use strict';\n\n/*jshint bitwise: false */\nvar digits = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n/**\n * Base64-encodes a string of text.\n *\n * @param {string} text The text to encode.\n * @return {string} The base64-encoded string.\n */\nfunction base64Encode(text) {\n  if (/([^\\u0000-\\u00ff])/.test(text)) {\n    throw new Error('Can\\'t base64 encode non-ASCII characters.');\n  }\n  var i = 0,\n    cur,\n    prev,\n    byteNum,\n    result = [];\n  while (i < text.length) {\n    cur = text.charCodeAt(i);\n    byteNum = i % 3;\n    switch (byteNum) {\n      case 0:\n        //first byte\n        result.push(digits.charAt(cur >> 2));\n        break;\n      case 1:\n        //second byte\n        result.push(digits.charAt((prev & 3) << 4 | cur >> 4));\n        break;\n      case 2:\n        //third byte\n        result.push(digits.charAt((prev & 0x0f) << 2 | cur >> 6));\n        result.push(digits.charAt(cur & 0x3f));\n        break;\n    }\n    prev = cur;\n    i += 1;\n  }\n  if (byteNum === 0) {\n    result.push(digits.charAt((prev & 3) << 4));\n    result.push('==');\n  } else if (byteNum === 1) {\n    result.push(digits.charAt((prev & 0x0f) << 2));\n    result.push('=');\n  }\n  return result.join('');\n}\n\n/**\n * Base64-decodes a string of text.\n *\n * @param {string} text The text to decode.\n * @return {string} The base64-decoded string.\n */\nfunction base64Decode(text) {\n  //ignore white space\n  text = text.replace(/\\s/g, '');\n\n  //first check for any unexpected input\n  if (!/^[a-z0-9\\+\\/\\s]+\\={0,2}$/i.test(text) || text.length % 4 > 0) {\n    throw new Error('Not a base64-encoded string.');\n  }\n\n  //local variables\n  var cur,\n    prev,\n    digitNum,\n    i = 0,\n    result = [];\n\n  //remove any equals signs\n  text = text.replace(/\\=/g, '');\n\n  //loop over each character\n  while (i < text.length) {\n    cur = digits.indexOf(text.charAt(i));\n    digitNum = i % 4;\n    switch (digitNum) {\n      //case 0: first digit - do nothing, not enough info to work with\n\n      case 1:\n        //second digit\n        result.push(String.fromCharCode(prev << 2 | cur >> 4));\n        break;\n      case 2:\n        //third digit\n        result.push(String.fromCharCode((prev & 0x0f) << 4 | cur >> 2));\n        break;\n      case 3:\n        //fourth digit\n        result.push(String.fromCharCode((prev & 3) << 6 | cur));\n        break;\n    }\n    prev = cur;\n    i += 1;\n  }\n\n  //return a string\n  return result.join('');\n}\nmodule.exports = {\n  encode: base64Encode,\n  decode: base64Decode\n};","map":{"version":3,"names":["digits","base64Encode","text","test","Error","i","cur","prev","byteNum","result","length","charCodeAt","push","charAt","join","base64Decode","replace","digitNum","indexOf","String","fromCharCode","module","exports","encode","decode"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/rest/util/base64.js"],"sourcesContent":["/*\n * Copyright (c) 2009 Nicholas C. Zakas. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/*\n * Base 64 implementation in JavaScript\n * Original source available at https://raw.github.com/nzakas/computer-science-in-javascript/02a2745b4aa8214f2cae1bf0b15b447ca1a91b23/encodings/base64/base64.js\n *\n * Linter refinement by Scott Andrews\n */\n\n'use strict';\n\n/*jshint bitwise: false */\n\nvar digits = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n/**\n * Base64-encodes a string of text.\n *\n * @param {string} text The text to encode.\n * @return {string} The base64-encoded string.\n */\nfunction base64Encode(text) {\n\n\tif (/([^\\u0000-\\u00ff])/.test(text)) {\n\t\tthrow new Error('Can\\'t base64 encode non-ASCII characters.');\n\t}\n\n\tvar i = 0,\n\t\tcur, prev, byteNum,\n\t\tresult = [];\n\n\twhile (i < text.length) {\n\n\t\tcur = text.charCodeAt(i);\n\t\tbyteNum = i % 3;\n\n\t\tswitch (byteNum) {\n\t\tcase 0: //first byte\n\t\t\tresult.push(digits.charAt(cur >> 2));\n\t\t\tbreak;\n\n\t\tcase 1: //second byte\n\t\t\tresult.push(digits.charAt((prev & 3) << 4 | (cur >> 4)));\n\t\t\tbreak;\n\n\t\tcase 2: //third byte\n\t\t\tresult.push(digits.charAt((prev & 0x0f) << 2 | (cur >> 6)));\n\t\t\tresult.push(digits.charAt(cur & 0x3f));\n\t\t\tbreak;\n\t\t}\n\n\t\tprev = cur;\n\t\ti += 1;\n\t}\n\n\tif (byteNum === 0) {\n\t\tresult.push(digits.charAt((prev & 3) << 4));\n\t\tresult.push('==');\n\t} else if (byteNum === 1) {\n\t\tresult.push(digits.charAt((prev & 0x0f) << 2));\n\t\tresult.push('=');\n\t}\n\n\treturn result.join('');\n}\n\n/**\n * Base64-decodes a string of text.\n *\n * @param {string} text The text to decode.\n * @return {string} The base64-decoded string.\n */\nfunction base64Decode(text) {\n\n\t//ignore white space\n\ttext = text.replace(/\\s/g, '');\n\n\t//first check for any unexpected input\n\tif (!(/^[a-z0-9\\+\\/\\s]+\\={0,2}$/i.test(text)) || text.length % 4 > 0) {\n\t\tthrow new Error('Not a base64-encoded string.');\n\t}\n\n\t//local variables\n\tvar cur, prev, digitNum,\n\t\ti = 0,\n\t\tresult = [];\n\n\t//remove any equals signs\n\ttext = text.replace(/\\=/g, '');\n\n\t//loop over each character\n\twhile (i < text.length) {\n\n\t\tcur = digits.indexOf(text.charAt(i));\n\t\tdigitNum = i % 4;\n\n\t\tswitch (digitNum) {\n\n\t\t//case 0: first digit - do nothing, not enough info to work with\n\n\t\tcase 1: //second digit\n\t\t\tresult.push(String.fromCharCode(prev << 2 | cur >> 4));\n\t\t\tbreak;\n\n\t\tcase 2: //third digit\n\t\t\tresult.push(String.fromCharCode((prev & 0x0f) << 4 | cur >> 2));\n\t\t\tbreak;\n\n\t\tcase 3: //fourth digit\n\t\t\tresult.push(String.fromCharCode((prev & 3) << 6 | cur));\n\t\t\tbreak;\n\t\t}\n\n\t\tprev = cur;\n\t\ti += 1;\n\t}\n\n\t//return a string\n\treturn result.join('');\n\n}\n\nmodule.exports = {\n\tencode: base64Encode,\n\tdecode: base64Decode\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}