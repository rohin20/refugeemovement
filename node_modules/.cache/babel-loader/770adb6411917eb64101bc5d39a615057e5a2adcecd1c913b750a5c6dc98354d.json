{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _asyncIterator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport Papa from './papaparse';\nvar ChunkStreamer = Papa.ChunkStreamer;\nexport default function AsyncIteratorStreamer(config) {\n  config = config || {};\n  ChunkStreamer.call(this, config);\n  this.textDecoder = new TextDecoder(this._config.encoding);\n  this.stream = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(asyncIterator) {\n      var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            this._input = asyncIterator;\n            _context.prev = 1;\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 4;\n            _iterator = _asyncIterator(asyncIterator);\n          case 6:\n            _context.next = 8;\n            return _iterator.next();\n          case 8:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 14;\n              break;\n            }\n            chunk = _step.value;\n            this.parseChunk(this.getStringChunk(chunk));\n          case 11:\n            _iteratorAbruptCompletion = false;\n            _context.next = 6;\n            break;\n          case 14:\n            _context.next = 20;\n            break;\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](4);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n          case 20:\n            _context.prev = 20;\n            _context.prev = 21;\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 25;\n              break;\n            }\n            _context.next = 25;\n            return _iterator.return();\n          case 25:\n            _context.prev = 25;\n            if (!_didIteratorError) {\n              _context.next = 28;\n              break;\n            }\n            throw _iteratorError;\n          case 28:\n            return _context.finish(25);\n          case 29:\n            return _context.finish(20);\n          case 30:\n            this._finished = true;\n            this.parseChunk('');\n            _context.next = 37;\n            break;\n          case 34:\n            _context.prev = 34;\n            _context.t1 = _context[\"catch\"](1);\n            this._sendError(_context.t1);\n          case 37:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, this, [[1, 34], [4, 16, 20, 30], [21,, 25, 29]]);\n    }));\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  this._nextChunk = function nextChunk() {};\n  this.getStringChunk = function (chunk) {\n    return typeof chunk === 'string' ? chunk : this.textDecoder.decode(chunk, {\n      stream: true\n    });\n  };\n}\nAsyncIteratorStreamer.prototype = Object.create(ChunkStreamer.prototype);\nAsyncIteratorStreamer.prototype.constructor = AsyncIteratorStreamer;","map":{"version":3,"names":["Papa","ChunkStreamer","AsyncIteratorStreamer","config","call","textDecoder","TextDecoder","_config","encoding","stream","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","asyncIterator","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","chunk","wrap","_callee$","_context","prev","next","_input","_asyncIterator","sent","done","value","parseChunk","getStringChunk","t0","return","finish","_finished","t1","_sendError","stop","_x","apply","arguments","_nextChunk","nextChunk","decode","prototype","Object","create","constructor"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/processors/node_modules/@loaders.gl/csv/src/papaparse/async-iterator-streamer.ts"],"sourcesContent":["// @ts-nocheck\n// A custom papaparse `Streamer` for async iterators\n// Ideally this can be contributed back to papaparse\n// Or papaparse can expose Streamer API so we can extend without forking.\n\n/* eslint-disable no-invalid-this */\n\n// Note: papaparse is not an ES6 module\nimport Papa from './papaparse';\nconst {ChunkStreamer} = Papa;\n\nexport default function AsyncIteratorStreamer(config) {\n  config = config || {};\n\n  ChunkStreamer.call(this, config);\n\n  this.textDecoder = new TextDecoder(this._config.encoding);\n\n  // Implement ChunkStreamer base class methods\n\n  // this.pause = function() {\n  //   ChunkStreamer.prototype.pause.apply(this, arguments);\n  // };\n\n  // this.resume = function() {\n  //   ChunkStreamer.prototype.resume.apply(this, arguments);\n  //   this._input.resume();\n  // };\n\n  this.stream = async function (asyncIterator) {\n    this._input = asyncIterator;\n\n    try {\n      // ES2018 version\n      // TODO - check for pause and abort flags?\n      for await (const chunk of asyncIterator) {\n        this.parseChunk(this.getStringChunk(chunk));\n      }\n\n      // ES5 VERSION\n      // while (true) {\n      //   asyncIterator.next().then(function(value) {\n      //     if (value.done) {\n      //       // finalize iterator?\n      //     }\n      //   }\n      //   const  = await ;\n      //   if (done) return total;\n      //   total += value.length;\n      // }\n\n      this._finished = true;\n      this.parseChunk('');\n    } catch (error) {\n      // Inform ChunkStreamer base class of error\n      this._sendError(error);\n    }\n  };\n\n  this._nextChunk = function nextChunk() {\n    // Left empty, as async iterator automatically pulls next chunk\n  };\n\n  // HELPER METHODS\n  this.getStringChunk = function (chunk) {\n    return typeof chunk === 'string' ? chunk : this.textDecoder.decode(chunk, {stream: true});\n  };\n}\n\nAsyncIteratorStreamer.prototype = Object.create(ChunkStreamer.prototype);\nAsyncIteratorStreamer.prototype.constructor = AsyncIteratorStreamer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}