{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nvar logState = {\n  attributeUpdateStart: -1,\n  attributeManagerUpdateStart: -1,\n  attributeUpdateMessages: []\n};\nvar LOG_LEVEL_MAJOR_UPDATE = 1;\nvar LOG_LEVEL_MINOR_UPDATE = 2;\nvar LOG_LEVEL_UPDATE_DETAIL = 3;\nvar LOG_LEVEL_INFO = 4;\nvar LOG_LEVEL_DRAW = 2;\nexport var getLoggers = function getLoggers(log) {\n  return {\n    'layer.changeFlag': function layerChangeFlag(layer, key, flags) {\n      log.log(LOG_LEVEL_UPDATE_DETAIL, \"\".concat(layer.id, \" \").concat(key, \": \"), flags[key])();\n    },\n    'layer.initialize': function layerInitialize(layer) {\n      log.log(LOG_LEVEL_MAJOR_UPDATE, \"Initializing \".concat(layer))();\n    },\n    'layer.update': function layerUpdate(layer, needsUpdate) {\n      if (needsUpdate) {\n        var flags = layer.getChangeFlags();\n        log.log(LOG_LEVEL_MINOR_UPDATE, \"Updating \".concat(layer, \" because: \").concat(Object.keys(flags).filter(function (key) {\n          return flags[key];\n        }).join(', ')))();\n      } else {\n        log.log(LOG_LEVEL_INFO, \"\".concat(layer, \" does not need update\"))();\n      }\n    },\n    'layer.matched': function layerMatched(layer, changed) {\n      if (changed) {\n        log.log(LOG_LEVEL_INFO, \"Matched \".concat(layer, \", state transfered\"))();\n      }\n    },\n    'layer.finalize': function layerFinalize(layer) {\n      log.log(LOG_LEVEL_MAJOR_UPDATE, \"Finalizing \".concat(layer))();\n    },\n    'compositeLayer.renderLayers': function compositeLayerRenderLayers(layer, updated, subLayers) {\n      if (updated) {\n        log.log(LOG_LEVEL_MINOR_UPDATE, \"Composite layer rendered new subLayers \".concat(layer), subLayers)();\n      } else {\n        log.log(LOG_LEVEL_INFO, \"Composite layer reused subLayers \".concat(layer), subLayers)();\n      }\n    },\n    'layerManager.setLayers': function layerManagerSetLayers(layerManager, updated, layers) {\n      if (updated) {\n        log.log(LOG_LEVEL_MINOR_UPDATE, \"Updating \".concat(layers.length, \" deck layers\"))();\n      }\n    },\n    'layerManager.activateViewport': function layerManagerActivateViewport(layerManager, viewport) {\n      log.log(LOG_LEVEL_UPDATE_DETAIL, 'Viewport changed', viewport)();\n    },\n    'attributeManager.invalidate': function attributeManagerInvalidate(attributeManager, trigger, attributeNames) {\n      log.log(LOG_LEVEL_MAJOR_UPDATE, attributeNames ? \"invalidated attributes \".concat(attributeNames, \" (\").concat(trigger, \") for \").concat(attributeManager.id) : \"invalidated all attributes for \".concat(attributeManager.id))();\n    },\n    'attributeManager.updateStart': function attributeManagerUpdateStart(attributeManager) {\n      logState.attributeUpdateMessages.length = 0;\n      logState.attributeManagerUpdateStart = Date.now();\n    },\n    'attributeManager.updateEnd': function attributeManagerUpdateEnd(attributeManager, numInstances) {\n      var timeMs = Math.round(Date.now() - logState.attributeManagerUpdateStart);\n      log.groupCollapsed(LOG_LEVEL_MINOR_UPDATE, \"Updated attributes for \".concat(numInstances, \" instances in \").concat(attributeManager.id, \" in \").concat(timeMs, \"ms\"))();\n      var _iterator = _createForOfIteratorHelper(logState.attributeUpdateMessages),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var updateMessage = _step.value;\n          log.log(LOG_LEVEL_UPDATE_DETAIL, updateMessage)();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      log.groupEnd(LOG_LEVEL_MINOR_UPDATE)();\n    },\n    'attribute.updateStart': function attributeUpdateStart(attribute) {\n      logState.attributeUpdateStart = Date.now();\n    },\n    'attribute.allocate': function attributeAllocate(attribute, numInstances) {\n      var message = \"\".concat(attribute.id, \" allocated \").concat(numInstances);\n      logState.attributeUpdateMessages.push(message);\n    },\n    'attribute.updateEnd': function attributeUpdateEnd(attribute, numInstances) {\n      var timeMs = Math.round(Date.now() - logState.attributeUpdateStart);\n      var message = \"\".concat(attribute.id, \" updated \").concat(numInstances, \" in \").concat(timeMs, \"ms\");\n      logState.attributeUpdateMessages.push(message);\n    },\n    'deckRenderer.renderLayers': function deckRendererRenderLayers(deckRenderer, renderStats, opts) {\n      var pass = opts.pass,\n        redrawReason = opts.redrawReason,\n        stats = opts.stats;\n      var _iterator2 = _createForOfIteratorHelper(renderStats),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var status = _step2.value;\n          var totalCount = status.totalCount,\n            visibleCount = status.visibleCount,\n            compositeCount = status.compositeCount,\n            pickableCount = status.pickableCount;\n          var primitiveCount = totalCount - compositeCount;\n          var hiddenCount = primitiveCount - visibleCount;\n          log.log(LOG_LEVEL_DRAW, \"RENDER #\".concat(deckRenderer.renderCount, \"   \").concat(visibleCount, \" (of \").concat(totalCount, \" layers) to \").concat(pass, \" because \").concat(redrawReason, \"   (\").concat(hiddenCount, \" hidden, \").concat(compositeCount, \" composite \").concat(pickableCount, \" pickable)\"))();\n          if (stats) {\n            stats.get('Redraw Layers').add(visibleCount);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  };\n};","map":{"version":3,"names":["logState","attributeUpdateStart","attributeManagerUpdateStart","attributeUpdateMessages","LOG_LEVEL_MAJOR_UPDATE","LOG_LEVEL_MINOR_UPDATE","LOG_LEVEL_UPDATE_DETAIL","LOG_LEVEL_INFO","LOG_LEVEL_DRAW","getLoggers","log","layerChangeFlag","layer","key","flags","concat","id","layerInitialize","layerUpdate","needsUpdate","getChangeFlags","Object","keys","filter","join","layerMatched","changed","layerFinalize","compositeLayerRenderLayers","updated","subLayers","layerManagerSetLayers","layerManager","layers","length","layerManagerActivateViewport","viewport","attributeManagerInvalidate","attributeManager","trigger","attributeNames","Date","now","attributeManagerUpdateEnd","numInstances","timeMs","Math","round","groupCollapsed","_iterator","_createForOfIteratorHelper","_step","s","n","done","updateMessage","value","err","e","f","groupEnd","attribute","attributeAllocate","message","push","attributeUpdateEnd","deckRendererRenderLayers","deckRenderer","renderStats","opts","pass","redrawReason","stats","_iterator2","_step2","status","totalCount","visibleCount","compositeCount","pickableCount","primitiveCount","hiddenCount","renderCount","get","add"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/core/src/debug/loggers.ts"],"sourcesContent":["import type {Log} from '@probe.gl/log';\n\nconst logState: {\n  attributeUpdateStart: number;\n  attributeManagerUpdateStart: number;\n  attributeUpdateMessages: string[];\n} = {\n  attributeUpdateStart: -1,\n  attributeManagerUpdateStart: -1,\n  attributeUpdateMessages: []\n};\n\nconst LOG_LEVEL_MAJOR_UPDATE = 1; // Events with direct perf impact\nconst LOG_LEVEL_MINOR_UPDATE = 2; // Events that may affect perf\nconst LOG_LEVEL_UPDATE_DETAIL = 3;\nconst LOG_LEVEL_INFO = 4;\nconst LOG_LEVEL_DRAW = 2;\n\nexport const getLoggers = (log: Log): Record<string, Function> => ({\n  /* Layer events */\n\n  'layer.changeFlag': (layer, key, flags) => {\n    log.log(LOG_LEVEL_UPDATE_DETAIL, `${layer.id} ${key}: `, flags[key])();\n  },\n\n  'layer.initialize': layer => {\n    log.log(LOG_LEVEL_MAJOR_UPDATE, `Initializing ${layer}`)();\n  },\n  'layer.update': (layer, needsUpdate) => {\n    if (needsUpdate) {\n      const flags = layer.getChangeFlags();\n      log.log(\n        LOG_LEVEL_MINOR_UPDATE,\n        `Updating ${layer} because: ${Object.keys(flags)\n          .filter(key => flags[key])\n          .join(', ')}`\n      )();\n    } else {\n      log.log(LOG_LEVEL_INFO, `${layer} does not need update`)();\n    }\n  },\n  'layer.matched': (layer, changed) => {\n    if (changed) {\n      log.log(LOG_LEVEL_INFO, `Matched ${layer}, state transfered`)();\n    }\n  },\n  'layer.finalize': layer => {\n    log.log(LOG_LEVEL_MAJOR_UPDATE, `Finalizing ${layer}`)();\n  },\n\n  /* CompositeLayer events */\n\n  'compositeLayer.renderLayers': (layer, updated, subLayers) => {\n    if (updated) {\n      log.log(\n        LOG_LEVEL_MINOR_UPDATE,\n        `Composite layer rendered new subLayers ${layer}`,\n        subLayers\n      )();\n    } else {\n      log.log(LOG_LEVEL_INFO, `Composite layer reused subLayers ${layer}`, subLayers)();\n    }\n  },\n\n  /* LayerManager events */\n\n  'layerManager.setLayers': (layerManager, updated, layers) => {\n    if (updated) {\n      log.log(LOG_LEVEL_MINOR_UPDATE, `Updating ${layers.length} deck layers`)();\n    }\n  },\n\n  'layerManager.activateViewport': (layerManager, viewport) => {\n    log.log(LOG_LEVEL_UPDATE_DETAIL, 'Viewport changed', viewport)();\n  },\n\n  /* AttributeManager events */\n\n  'attributeManager.invalidate': (attributeManager, trigger, attributeNames) => {\n    log.log(\n      LOG_LEVEL_MAJOR_UPDATE,\n      attributeNames\n        ? `invalidated attributes ${attributeNames} (${trigger}) for ${attributeManager.id}`\n        : `invalidated all attributes for ${attributeManager.id}`\n    )();\n  },\n\n  'attributeManager.updateStart': attributeManager => {\n    logState.attributeUpdateMessages.length = 0;\n    logState.attributeManagerUpdateStart = Date.now();\n  },\n  'attributeManager.updateEnd': (attributeManager, numInstances) => {\n    const timeMs = Math.round(Date.now() - logState.attributeManagerUpdateStart);\n    log.groupCollapsed(\n      LOG_LEVEL_MINOR_UPDATE,\n      `Updated attributes for ${numInstances} instances in ${attributeManager.id} in ${timeMs}ms`\n    )();\n    for (const updateMessage of logState.attributeUpdateMessages) {\n      log.log(LOG_LEVEL_UPDATE_DETAIL, updateMessage)();\n    }\n    log.groupEnd(LOG_LEVEL_MINOR_UPDATE)();\n  },\n\n  /* Attribute events */\n\n  'attribute.updateStart': attribute => {\n    logState.attributeUpdateStart = Date.now();\n  },\n  'attribute.allocate': (attribute, numInstances) => {\n    const message = `${attribute.id} allocated ${numInstances}`;\n    logState.attributeUpdateMessages.push(message);\n  },\n  'attribute.updateEnd': (attribute, numInstances) => {\n    const timeMs = Math.round(Date.now() - logState.attributeUpdateStart);\n    const message = `${attribute.id} updated ${numInstances} in ${timeMs}ms`;\n    logState.attributeUpdateMessages.push(message);\n  },\n\n  /* Render events */\n\n  'deckRenderer.renderLayers': (deckRenderer, renderStats, opts) => {\n    const {pass, redrawReason, stats} = opts;\n    for (const status of renderStats) {\n      const {totalCount, visibleCount, compositeCount, pickableCount} = status;\n      const primitiveCount = totalCount - compositeCount;\n      const hiddenCount = primitiveCount - visibleCount;\n\n      log.log(\n        LOG_LEVEL_DRAW,\n        `RENDER #${deckRenderer.renderCount} \\\n  ${visibleCount} (of ${totalCount} layers) to ${pass} because ${redrawReason} \\\n  (${hiddenCount} hidden, ${compositeCount} composite ${pickableCount} pickable)`\n      )();\n\n      if (stats) {\n        stats.get('Redraw Layers').add(visibleCount);\n      }\n    }\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}