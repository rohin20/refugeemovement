{"ast":null,"code":"import _slicedToArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty2 from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _STRATEGIES;\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Tile2DHeader from './tile-2d-header';\nimport { getTileIndices as _getTileIndices, tileToBoundingBox, getCullBounds } from './utils';\nimport { RequestScheduler } from '@loaders.gl/loader-utils';\nimport { Matrix4, equals } from '@math.gl/core';\nimport { _memoize as memoize } from '@deck.gl/core';\nvar TILE_STATE_VISITED = 1;\nvar TILE_STATE_VISIBLE = 2;\nexport var STRATEGY_NEVER = 'never';\nexport var STRATEGY_REPLACE = 'no-overlap';\nexport var STRATEGY_DEFAULT = 'best-available';\nvar DEFAULT_CACHE_SCALE = 5;\nvar STRATEGIES = (_STRATEGIES = {}, _defineProperty2(_STRATEGIES, STRATEGY_DEFAULT, updateTileStateDefault), _defineProperty2(_STRATEGIES, STRATEGY_REPLACE, updateTileStateReplace), _defineProperty2(_STRATEGIES, STRATEGY_NEVER, function () {}), _STRATEGIES);\nvar Tileset2D = /*#__PURE__*/function () {\n  function Tileset2D(opts) {\n    var _this = this;\n    _classCallCheck(this, Tileset2D);\n    _defineProperty(this, \"opts\", void 0);\n    _defineProperty(this, \"_requestScheduler\", void 0);\n    _defineProperty(this, \"_cache\", void 0);\n    _defineProperty(this, \"_dirty\", void 0);\n    _defineProperty(this, \"_tiles\", void 0);\n    _defineProperty(this, \"_cacheByteSize\", void 0);\n    _defineProperty(this, \"_viewport\", void 0);\n    _defineProperty(this, \"_zRange\", void 0);\n    _defineProperty(this, \"_selectedTiles\", void 0);\n    _defineProperty(this, \"_frameNumber\", void 0);\n    _defineProperty(this, \"_modelMatrix\", void 0);\n    _defineProperty(this, \"_modelMatrixInverse\", void 0);\n    _defineProperty(this, \"_maxZoom\", void 0);\n    _defineProperty(this, \"_minZoom\", void 0);\n    _defineProperty(this, \"onTileLoad\", void 0);\n    _defineProperty(this, \"_getCullBounds\", memoize(getCullBounds));\n    this.opts = opts;\n    this.onTileLoad = function (tile) {\n      _this.opts.onTileLoad(tile);\n      if (_this.opts.maxCacheByteSize) {\n        _this._cacheByteSize += tile.byteLength;\n        _this._resizeCache();\n      }\n    };\n    this._requestScheduler = new RequestScheduler({\n      maxRequests: opts.maxRequests,\n      throttleRequests: opts.maxRequests > 0\n    });\n    this._cache = new Map();\n    this._tiles = [];\n    this._dirty = false;\n    this._cacheByteSize = 0;\n    this._viewport = null;\n    this._selectedTiles = null;\n    this._frameNumber = 0;\n    this._modelMatrix = new Matrix4();\n    this._modelMatrixInverse = new Matrix4();\n    this.setOptions(opts);\n  }\n  _createClass(Tileset2D, [{\n    key: \"tiles\",\n    get: function get() {\n      return this._tiles;\n    }\n  }, {\n    key: \"selectedTiles\",\n    get: function get() {\n      return this._selectedTiles;\n    }\n  }, {\n    key: \"isLoaded\",\n    get: function get() {\n      return this._selectedTiles !== null && this._selectedTiles.every(function (tile) {\n        return tile.isLoaded;\n      });\n    }\n  }, {\n    key: \"needsReload\",\n    get: function get() {\n      return this._selectedTiles !== null && this._selectedTiles.some(function (tile) {\n        return tile.needsReload;\n      });\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(opts) {\n      Object.assign(this.opts, opts);\n      if (Number.isFinite(opts.maxZoom)) {\n        this._maxZoom = Math.floor(opts.maxZoom);\n      }\n      if (Number.isFinite(opts.minZoom)) {\n        this._minZoom = Math.ceil(opts.minZoom);\n      }\n    }\n  }, {\n    key: \"finalize\",\n    value: function finalize() {\n      var _iterator = _createForOfIteratorHelper(this._cache.values()),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var tile = _step.value;\n          if (tile.isLoading) {\n            tile.abort();\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      this._cache.clear();\n      this._tiles = [];\n      this._selectedTiles = null;\n    }\n  }, {\n    key: \"reloadAll\",\n    value: function reloadAll() {\n      var _iterator2 = _createForOfIteratorHelper(this._cache.keys()),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var id = _step2.value;\n          var tile = this._cache.get(id);\n          if (!this._selectedTiles || !this._selectedTiles.includes(tile)) {\n            this._cache.delete(id);\n          } else {\n            tile.setNeedsReload();\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(viewport) {\n      var _this2 = this;\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        zRange = _ref.zRange,\n        modelMatrix = _ref.modelMatrix;\n      var modelMatrixAsMatrix4 = new Matrix4(modelMatrix);\n      var isModelMatrixNew = !modelMatrixAsMatrix4.equals(this._modelMatrix);\n      if (!this._viewport || !viewport.equals(this._viewport) || !equals(this._zRange, zRange) || isModelMatrixNew) {\n        if (isModelMatrixNew) {\n          this._modelMatrixInverse = modelMatrixAsMatrix4.clone().invert();\n          this._modelMatrix = modelMatrixAsMatrix4;\n        }\n        this._viewport = viewport;\n        this._zRange = zRange;\n        var tileIndices = this.getTileIndices({\n          viewport: viewport,\n          maxZoom: this._maxZoom,\n          minZoom: this._minZoom,\n          zRange: zRange,\n          modelMatrix: this._modelMatrix,\n          modelMatrixInverse: this._modelMatrixInverse\n        });\n        this._selectedTiles = tileIndices.map(function (index) {\n          return _this2._getTile(index, true);\n        });\n        if (this._dirty) {\n          this._rebuildTree();\n        }\n      } else if (this.needsReload) {\n        this._selectedTiles = this._selectedTiles.map(function (tile) {\n          return _this2._getTile(tile.index, true);\n        });\n      }\n      var changed = this.updateTileStates();\n      this._pruneRequests();\n      if (this._dirty) {\n        this._resizeCache();\n      }\n      if (changed) {\n        this._frameNumber++;\n      }\n      return this._frameNumber;\n    }\n  }, {\n    key: \"isTileVisible\",\n    value: function isTileVisible(tile, cullRect) {\n      if (!tile.isVisible) {\n        return false;\n      }\n      if (cullRect && this._viewport) {\n        var boundsArr = this._getCullBounds({\n          viewport: this._viewport,\n          z: this._zRange,\n          cullRect: cullRect\n        });\n        var bbox = tile.bbox;\n        var _iterator3 = _createForOfIteratorHelper(boundsArr),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _step3$value = _slicedToArray(_step3.value, 4),\n              minX = _step3$value[0],\n              minY = _step3$value[1],\n              maxX = _step3$value[2],\n              maxY = _step3$value[3];\n            var overlaps = void 0;\n            if ('west' in bbox) {\n              overlaps = bbox.west < maxX && bbox.east > minX && bbox.south < maxY && bbox.north > minY;\n            } else {\n              var y0 = Math.min(bbox.top, bbox.bottom);\n              var y1 = Math.max(bbox.top, bbox.bottom);\n              overlaps = bbox.left < maxX && bbox.right > minX && y0 < maxY && y1 > minY;\n            }\n            if (overlaps) {\n              return true;\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"getTileIndices\",\n    value: function getTileIndices(_ref2) {\n      var viewport = _ref2.viewport,\n        maxZoom = _ref2.maxZoom,\n        minZoom = _ref2.minZoom,\n        zRange = _ref2.zRange,\n        modelMatrix = _ref2.modelMatrix,\n        modelMatrixInverse = _ref2.modelMatrixInverse;\n      var _this$opts = this.opts,\n        tileSize = _this$opts.tileSize,\n        extent = _this$opts.extent,\n        zoomOffset = _this$opts.zoomOffset;\n      return _getTileIndices({\n        viewport: viewport,\n        maxZoom: maxZoom,\n        minZoom: minZoom,\n        zRange: zRange,\n        tileSize: tileSize,\n        extent: extent,\n        modelMatrix: modelMatrix,\n        modelMatrixInverse: modelMatrixInverse,\n        zoomOffset: zoomOffset\n      });\n    }\n  }, {\n    key: \"getTileId\",\n    value: function getTileId(index) {\n      return \"\".concat(index.x, \"-\").concat(index.y, \"-\").concat(index.z);\n    }\n  }, {\n    key: \"getTileZoom\",\n    value: function getTileZoom(index) {\n      return index.z;\n    }\n  }, {\n    key: \"getTileMetadata\",\n    value: function getTileMetadata(index) {\n      var tileSize = this.opts.tileSize;\n      return {\n        bbox: tileToBoundingBox(this._viewport, index.x, index.y, index.z, tileSize)\n      };\n    }\n  }, {\n    key: \"getParentIndex\",\n    value: function getParentIndex(index) {\n      var x = Math.floor(index.x / 2);\n      var y = Math.floor(index.y / 2);\n      var z = index.z - 1;\n      return {\n        x: x,\n        y: y,\n        z: z\n      };\n    }\n  }, {\n    key: \"updateTileStates\",\n    value: function updateTileStates() {\n      var refinementStrategy = this.opts.refinementStrategy || STRATEGY_DEFAULT;\n      var visibilities = new Array(this._cache.size);\n      var i = 0;\n      var _iterator4 = _createForOfIteratorHelper(this._cache.values()),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var tile = _step4.value;\n          visibilities[i++] = tile.isVisible;\n          tile.isSelected = false;\n          tile.isVisible = false;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      var _iterator5 = _createForOfIteratorHelper(this._selectedTiles),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _tile = _step5.value;\n          _tile.isSelected = true;\n          _tile.isVisible = true;\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      (typeof refinementStrategy === 'function' ? refinementStrategy : STRATEGIES[refinementStrategy])(Array.from(this._cache.values()));\n      i = 0;\n      var _iterator6 = _createForOfIteratorHelper(this._cache.values()),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _tile2 = _step6.value;\n          if (visibilities[i++] !== _tile2.isVisible) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      return false;\n    }\n  }, {\n    key: \"_pruneRequests\",\n    value: function _pruneRequests() {\n      var maxRequests = this.opts.maxRequests;\n      var abortCandidates = [];\n      var ongoingRequestCount = 0;\n      var _iterator7 = _createForOfIteratorHelper(this._cache.values()),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _tile3 = _step7.value;\n          if (_tile3.isLoading) {\n            ongoingRequestCount++;\n            if (!_tile3.isSelected && !_tile3.isVisible) {\n              abortCandidates.push(_tile3);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      while (maxRequests > 0 && ongoingRequestCount > maxRequests && abortCandidates.length > 0) {\n        var tile = abortCandidates.shift();\n        tile.abort();\n        ongoingRequestCount--;\n      }\n    }\n  }, {\n    key: \"_rebuildTree\",\n    value: function _rebuildTree() {\n      var _cache = this._cache;\n      var _iterator8 = _createForOfIteratorHelper(_cache.values()),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var tile = _step8.value;\n          tile.parent = null;\n          if (tile.children) {\n            tile.children.length = 0;\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n      var _iterator9 = _createForOfIteratorHelper(_cache.values()),\n        _step9;\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var _tile4 = _step9.value;\n          var parent = this._getNearestAncestor(_tile4);\n          _tile4.parent = parent;\n          if (parent !== null && parent !== void 0 && parent.children) {\n            parent.children.push(_tile4);\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n    }\n  }, {\n    key: \"_resizeCache\",\n    value: function _resizeCache() {\n      var _cache = this._cache,\n        opts = this.opts;\n      var maxCacheSize = opts.maxCacheSize || (opts.maxCacheByteSize ? Infinity : DEFAULT_CACHE_SCALE * this.selectedTiles.length);\n      var maxCacheByteSize = opts.maxCacheByteSize || Infinity;\n      var overflown = _cache.size > maxCacheSize || this._cacheByteSize > maxCacheByteSize;\n      if (overflown) {\n        var _iterator10 = _createForOfIteratorHelper(_cache),\n          _step10;\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var _step10$value = _slicedToArray(_step10.value, 2),\n              id = _step10$value[0],\n              tile = _step10$value[1];\n            if (!tile.isVisible && !tile.isSelected) {\n              this._cacheByteSize -= opts.maxCacheByteSize ? tile.byteLength : 0;\n              _cache.delete(id);\n              this.opts.onTileUnload(tile);\n            }\n            if (_cache.size <= maxCacheSize && this._cacheByteSize <= maxCacheByteSize) {\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n        this._rebuildTree();\n        this._dirty = true;\n      }\n      if (this._dirty) {\n        this._tiles = Array.from(this._cache.values()).sort(function (t1, t2) {\n          return t1.zoom - t2.zoom;\n        });\n        this._dirty = false;\n      }\n    }\n  }, {\n    key: \"_getTile\",\n    value: function _getTile(index, create) {\n      var id = this.getTileId(index);\n      var tile = this._cache.get(id);\n      var needsReload = false;\n      if (!tile && create) {\n        tile = new Tile2DHeader(index);\n        Object.assign(tile, this.getTileMetadata(tile.index));\n        Object.assign(tile, {\n          id: id,\n          zoom: this.getTileZoom(tile.index)\n        });\n        needsReload = true;\n        this._cache.set(id, tile);\n        this._dirty = true;\n      } else if (tile && tile.needsReload) {\n        needsReload = true;\n      }\n      if (tile && needsReload) {\n        tile.loadData({\n          getData: this.opts.getTileData,\n          requestScheduler: this._requestScheduler,\n          onLoad: this.onTileLoad,\n          onError: this.opts.onTileError\n        });\n      }\n      return tile;\n    }\n  }, {\n    key: \"_getNearestAncestor\",\n    value: function _getNearestAncestor(tile) {\n      var _this$_minZoom = this._minZoom,\n        _minZoom = _this$_minZoom === void 0 ? 0 : _this$_minZoom;\n      var index = tile.index;\n      while (this.getTileZoom(index) > _minZoom) {\n        index = this.getParentIndex(index);\n        var parent = this._getTile(index);\n        if (parent) {\n          return parent;\n        }\n      }\n      return null;\n    }\n  }]);\n  return Tileset2D;\n}();\nexport { Tileset2D as default };\nfunction updateTileStateDefault(allTiles) {\n  var _iterator11 = _createForOfIteratorHelper(allTiles),\n    _step11;\n  try {\n    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n      var tile = _step11.value;\n      tile.state = 0;\n    }\n  } catch (err) {\n    _iterator11.e(err);\n  } finally {\n    _iterator11.f();\n  }\n  var _iterator12 = _createForOfIteratorHelper(allTiles),\n    _step12;\n  try {\n    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n      var _tile5 = _step12.value;\n      if (_tile5.isSelected && !getPlaceholderInAncestors(_tile5)) {\n        getPlaceholderInChildren(_tile5);\n      }\n    }\n  } catch (err) {\n    _iterator12.e(err);\n  } finally {\n    _iterator12.f();\n  }\n  var _iterator13 = _createForOfIteratorHelper(allTiles),\n    _step13;\n  try {\n    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n      var _tile6 = _step13.value;\n      _tile6.isVisible = Boolean(_tile6.state & TILE_STATE_VISIBLE);\n    }\n  } catch (err) {\n    _iterator13.e(err);\n  } finally {\n    _iterator13.f();\n  }\n}\nfunction updateTileStateReplace(allTiles) {\n  var _iterator14 = _createForOfIteratorHelper(allTiles),\n    _step14;\n  try {\n    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n      var tile = _step14.value;\n      tile.state = 0;\n    }\n  } catch (err) {\n    _iterator14.e(err);\n  } finally {\n    _iterator14.f();\n  }\n  var _iterator15 = _createForOfIteratorHelper(allTiles),\n    _step15;\n  try {\n    for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n      var _tile7 = _step15.value;\n      if (_tile7.isSelected) {\n        getPlaceholderInAncestors(_tile7);\n      }\n    }\n  } catch (err) {\n    _iterator15.e(err);\n  } finally {\n    _iterator15.f();\n  }\n  var sortedTiles = Array.from(allTiles).sort(function (t1, t2) {\n    return t1.zoom - t2.zoom;\n  });\n  var _iterator16 = _createForOfIteratorHelper(sortedTiles),\n    _step16;\n  try {\n    for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n      var _tile8 = _step16.value;\n      _tile8.isVisible = Boolean(_tile8.state & TILE_STATE_VISIBLE);\n      if (_tile8.children && (_tile8.isVisible || _tile8.state & TILE_STATE_VISITED)) {\n        var _iterator17 = _createForOfIteratorHelper(_tile8.children),\n          _step17;\n        try {\n          for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n            var child = _step17.value;\n            child.state = TILE_STATE_VISITED;\n          }\n        } catch (err) {\n          _iterator17.e(err);\n        } finally {\n          _iterator17.f();\n        }\n      } else if (_tile8.isSelected) {\n        getPlaceholderInChildren(_tile8);\n      }\n    }\n  } catch (err) {\n    _iterator16.e(err);\n  } finally {\n    _iterator16.f();\n  }\n}\nfunction getPlaceholderInAncestors(startTile) {\n  var tile = startTile;\n  while (tile) {\n    if (tile.isLoaded || tile.content) {\n      tile.state |= TILE_STATE_VISIBLE;\n      return true;\n    }\n    tile = tile.parent;\n  }\n  return false;\n}\nfunction getPlaceholderInChildren(tile) {\n  var _iterator18 = _createForOfIteratorHelper(tile.children),\n    _step18;\n  try {\n    for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n      var child = _step18.value;\n      if (child.isLoaded || child.content) {\n        child.state |= TILE_STATE_VISIBLE;\n      } else {\n        getPlaceholderInChildren(child);\n      }\n    }\n  } catch (err) {\n    _iterator18.e(err);\n  } finally {\n    _iterator18.f();\n  }\n}","map":{"version":3,"names":["Tile2DHeader","getTileIndices","tileToBoundingBox","getCullBounds","RequestScheduler","Matrix4","equals","_memoize","memoize","TILE_STATE_VISITED","TILE_STATE_VISIBLE","STRATEGY_NEVER","STRATEGY_REPLACE","STRATEGY_DEFAULT","DEFAULT_CACHE_SCALE","STRATEGIES","_STRATEGIES","_defineProperty2","updateTileStateDefault","updateTileStateReplace","Tileset2D","opts","_this","_classCallCheck","_defineProperty","onTileLoad","tile","maxCacheByteSize","_cacheByteSize","byteLength","_resizeCache","_requestScheduler","maxRequests","throttleRequests","_cache","Map","_tiles","_dirty","_viewport","_selectedTiles","_frameNumber","_modelMatrix","_modelMatrixInverse","setOptions","_createClass","key","get","every","isLoaded","some","needsReload","value","Object","assign","Number","isFinite","maxZoom","_maxZoom","Math","floor","minZoom","_minZoom","ceil","finalize","_iterator","_createForOfIteratorHelper","values","_step","s","n","done","isLoading","abort","err","e","f","clear","reloadAll","_iterator2","keys","_step2","id","includes","delete","setNeedsReload","update","viewport","_this2","_ref","arguments","length","undefined","zRange","modelMatrix","modelMatrixAsMatrix4","isModelMatrixNew","_zRange","clone","invert","tileIndices","modelMatrixInverse","map","index","_getTile","_rebuildTree","changed","updateTileStates","_pruneRequests","isTileVisible","cullRect","isVisible","boundsArr","_getCullBounds","z","bbox","_iterator3","_step3","_step3$value","_slicedToArray","minX","minY","maxX","maxY","overlaps","west","east","south","north","y0","min","top","bottom","y1","max","left","right","_ref2","_this$opts","tileSize","extent","zoomOffset","getTileId","concat","x","y","getTileZoom","getTileMetadata","getParentIndex","refinementStrategy","visibilities","Array","size","i","_iterator4","_step4","isSelected","_iterator5","_step5","from","_iterator6","_step6","abortCandidates","ongoingRequestCount","_iterator7","_step7","push","shift","_iterator8","_step8","parent","children","_iterator9","_step9","_getNearestAncestor","maxCacheSize","Infinity","selectedTiles","overflown","_iterator10","_step10","_step10$value","onTileUnload","sort","t1","t2","zoom","create","set","loadData","getData","getTileData","requestScheduler","onLoad","onError","onTileError","_this$_minZoom","default","allTiles","_iterator11","_step11","state","_iterator12","_step12","getPlaceholderInAncestors","getPlaceholderInChildren","_iterator13","_step13","Boolean","_iterator14","_step14","_iterator15","_step15","sortedTiles","_iterator16","_step16","_iterator17","_step17","child","startTile","content","_iterator18","_step18"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/geo-layers/src/tile-layer/tileset-2d.ts"],"sourcesContent":["import Tile2DHeader from './tile-2d-header';\nimport {getTileIndices, tileToBoundingBox, getCullBounds} from './utils';\nimport {RequestScheduler} from '@loaders.gl/loader-utils';\nimport {Matrix4, equals} from '@math.gl/core';\nimport {Viewport} from '@deck.gl/core';\nimport {Bounds, TileIndex, ZRange} from './types';\nimport {TileLayerProps} from './tile-layer';\nimport {_memoize as memoize} from '@deck.gl/core';\n\n// bit masks\nconst TILE_STATE_VISITED = 1;\nconst TILE_STATE_VISIBLE = 2;\n/*\n   show cached parent tile if children are loading\n   +-----------+       +-----+            +-----+-----+\n   |           |       |     |            |     |     |\n   |           |       |     |            |     |     |\n   |           |  -->  +-----+-----+  ->  +-----+-----+\n   |           |             |     |      |     |     |\n   |           |             |     |      |     |     |\n   +-----------+             +-----+      +-----+-----+\n\n   show cached children tiles when parent is loading\n   +-------+----       +------------\n   |       |           |\n   |       |           |\n   |       |           |\n   +-------+----  -->  |\n   |       |           |\n */\n\nexport const STRATEGY_NEVER = 'never';\nexport const STRATEGY_REPLACE = 'no-overlap';\nexport const STRATEGY_DEFAULT = 'best-available';\n\nexport type RefinementStrategyFunction = (tiles: Tile2DHeader[]) => void;\nexport type RefinementStrategy =\n  | typeof STRATEGY_NEVER\n  | typeof STRATEGY_REPLACE\n  | typeof STRATEGY_DEFAULT\n  | RefinementStrategyFunction;\n\nconst DEFAULT_CACHE_SCALE = 5;\n\nconst STRATEGIES = {\n  [STRATEGY_DEFAULT]: updateTileStateDefault,\n  [STRATEGY_REPLACE]: updateTileStateReplace,\n  [STRATEGY_NEVER]: () => {}\n};\n\nexport type Tileset2DProps = Pick<\n  Required<TileLayerProps>,\n  | 'tileSize'\n  | 'maxCacheSize'\n  | 'maxCacheByteSize'\n  | 'refinementStrategy'\n  | 'extent'\n  | 'maxZoom'\n  | 'minZoom'\n  | 'maxRequests'\n  | 'zoomOffset'\n> & {\n  getTileData: NonNullable<TileLayerProps['getTileData']>;\n  onTileLoad: (tile: Tile2DHeader) => void;\n  onTileUnload: (tile: Tile2DHeader) => void;\n  onTileError: (error: any, tile: Tile2DHeader) => void;\n};\n\n/**\n * Manages loading and purging of tile data. This class caches recently visited tiles\n * and only creates new tiles if they are present.\n */\nexport default class Tileset2D {\n  private opts: Tileset2DProps;\n  private _requestScheduler: RequestScheduler;\n  private _cache: Map<string, Tile2DHeader>;\n  private _dirty: boolean;\n  private _tiles: Tile2DHeader[];\n\n  private _cacheByteSize: number;\n  private _viewport: Viewport | null;\n  private _zRange?: ZRange;\n  private _selectedTiles: Tile2DHeader[] | null;\n  private _frameNumber: number;\n  private _modelMatrix: Matrix4;\n  private _modelMatrixInverse: Matrix4;\n\n  private _maxZoom?: number;\n  private _minZoom?: number;\n\n  private onTileLoad: (tile: Tile2DHeader) => void;\n\n  /**\n   * Takes in a function that returns tile data, a cache size, and a max and a min zoom level.\n   * Cache size defaults to 5 * number of tiles in the current viewport\n   */\n  constructor(opts: Tileset2DProps) {\n    this.opts = opts;\n\n    this.onTileLoad = tile => {\n      this.opts.onTileLoad(tile);\n      if (this.opts.maxCacheByteSize) {\n        this._cacheByteSize += tile.byteLength;\n        this._resizeCache();\n      }\n    };\n\n    this._requestScheduler = new RequestScheduler({\n      maxRequests: opts.maxRequests,\n      throttleRequests: opts.maxRequests > 0\n    });\n\n    // Maps tile id in string {z}-{x}-{y} to a Tile object\n    this._cache = new Map();\n    this._tiles = [];\n    this._dirty = false;\n    this._cacheByteSize = 0;\n\n    // Cache the last processed viewport\n    this._viewport = null;\n    this._selectedTiles = null;\n    this._frameNumber = 0;\n\n    this._modelMatrix = new Matrix4();\n    this._modelMatrixInverse = new Matrix4();\n\n    this.setOptions(opts);\n  }\n\n  /* Public API */\n  get tiles() {\n    return this._tiles;\n  }\n\n  get selectedTiles(): Tile2DHeader[] | null {\n    return this._selectedTiles;\n  }\n\n  get isLoaded(): boolean {\n    return this._selectedTiles !== null && this._selectedTiles.every(tile => tile.isLoaded);\n  }\n\n  get needsReload(): boolean {\n    return this._selectedTiles !== null && this._selectedTiles.some(tile => tile.needsReload);\n  }\n\n  setOptions(opts: Tileset2DProps): void {\n    Object.assign(this.opts, opts);\n    if (Number.isFinite(opts.maxZoom)) {\n      this._maxZoom = Math.floor(opts.maxZoom as number);\n    }\n    if (Number.isFinite(opts.minZoom)) {\n      this._minZoom = Math.ceil(opts.minZoom as number);\n    }\n  }\n\n  // Clean up any outstanding tile requests.\n  finalize(): void {\n    for (const tile of this._cache.values()) {\n      if (tile.isLoading) {\n        tile.abort();\n      }\n    }\n    this._cache.clear();\n    this._tiles = [];\n    this._selectedTiles = null;\n  }\n\n  reloadAll(): void {\n    for (const id of this._cache.keys()) {\n      const tile = this._cache.get(id) as Tile2DHeader;\n      if (!this._selectedTiles || !this._selectedTiles.includes(tile)) {\n        this._cache.delete(id);\n      } else {\n        tile.setNeedsReload();\n      }\n    }\n  }\n\n  /**\n   * Update the cache with the given viewport and model matrix and triggers callback onUpdate.\n   */\n  update(\n    viewport: Viewport,\n    {zRange, modelMatrix}: {zRange?: ZRange; modelMatrix?: Matrix4} = {}\n  ): number {\n    const modelMatrixAsMatrix4 = new Matrix4(modelMatrix);\n    const isModelMatrixNew = !modelMatrixAsMatrix4.equals(this._modelMatrix);\n    if (\n      !this._viewport ||\n      !viewport.equals(this._viewport) ||\n      !equals(this._zRange, zRange) ||\n      isModelMatrixNew\n    ) {\n      if (isModelMatrixNew) {\n        this._modelMatrixInverse = modelMatrixAsMatrix4.clone().invert();\n        this._modelMatrix = modelMatrixAsMatrix4;\n      }\n      this._viewport = viewport;\n      this._zRange = zRange;\n      const tileIndices = this.getTileIndices({\n        viewport,\n        maxZoom: this._maxZoom,\n        minZoom: this._minZoom,\n        zRange,\n        modelMatrix: this._modelMatrix,\n        modelMatrixInverse: this._modelMatrixInverse\n      });\n      this._selectedTiles = tileIndices.map(index => this._getTile(index, true));\n\n      if (this._dirty) {\n        // Some new tiles are added\n        this._rebuildTree();\n      }\n      // Check for needed reloads explicitly even if the view/matrix has not changed.\n    } else if (this.needsReload) {\n      this._selectedTiles = this._selectedTiles!.map(tile => this._getTile(tile.index, true));\n    }\n\n    // Update tile states\n    const changed = this.updateTileStates();\n    this._pruneRequests();\n\n    if (this._dirty) {\n      // cache size is either the user defined maxSize or 5 * number of current tiles in the viewport.\n      this._resizeCache();\n    }\n\n    if (changed) {\n      this._frameNumber++;\n    }\n\n    return this._frameNumber;\n  }\n\n  isTileVisible(\n    tile: Tile2DHeader,\n    cullRect?: {x: number; y: number; width: number; height: number}\n  ): boolean {\n    if (!tile.isVisible) {\n      return false;\n    }\n\n    if (cullRect && this._viewport) {\n      const boundsArr = this._getCullBounds({\n        viewport: this._viewport,\n        z: this._zRange,\n        cullRect\n      });\n      const {bbox} = tile;\n      for (const [minX, minY, maxX, maxY] of boundsArr) {\n        let overlaps;\n        if ('west' in bbox) {\n          overlaps = bbox.west < maxX && bbox.east > minX && bbox.south < maxY && bbox.north > minY;\n        } else {\n          // top/bottom could be swapped depending on the indexing system\n          const y0 = Math.min(bbox.top, bbox.bottom);\n          const y1 = Math.max(bbox.top, bbox.bottom);\n          overlaps = bbox.left < maxX && bbox.right > minX && y0 < maxY && y1 > minY;\n        }\n        if (overlaps) {\n          return true;\n        }\n      }\n      return false;\n    }\n    return true;\n  }\n\n  /* Public interface for subclassing */\n\n  /** Returns array of tile indices in the current viewport */\n  getTileIndices({\n    viewport,\n    maxZoom,\n    minZoom,\n    zRange,\n    modelMatrix,\n    modelMatrixInverse\n  }: {\n    viewport: Viewport;\n    maxZoom?: number;\n    minZoom?: number;\n    zRange: ZRange | undefined;\n    tileSize?: number;\n    modelMatrix?: Matrix4;\n    modelMatrixInverse?: Matrix4;\n    zoomOffset?: number;\n  }): TileIndex[] {\n    const {tileSize, extent, zoomOffset} = this.opts;\n    return getTileIndices({\n      viewport,\n      maxZoom,\n      minZoom,\n      zRange,\n      tileSize,\n      extent: extent as Bounds | undefined,\n      modelMatrix,\n      modelMatrixInverse,\n      zoomOffset\n    });\n  }\n\n  /** Returns unique string key for a tile index */\n  getTileId(index: TileIndex) {\n    return `${index.x}-${index.y}-${index.z}`;\n  }\n\n  /** Returns a zoom level for a tile index */\n  getTileZoom(index: TileIndex) {\n    return index.z;\n  }\n\n  /** Returns additional metadata to add to tile, bbox by default */\n  getTileMetadata(index: TileIndex): Record<string, any> {\n    const {tileSize} = this.opts;\n    // @ts-expect-error\n    return {bbox: tileToBoundingBox(this._viewport, index.x, index.y, index.z, tileSize)};\n  }\n\n  /** Returns index of the parent tile */\n  getParentIndex(index: TileIndex) {\n    const x = Math.floor(index.x / 2);\n    const y = Math.floor(index.y / 2);\n    const z = index.z - 1;\n    return {x, y, z};\n  }\n\n  // Returns true if any tile's visibility changed\n  private updateTileStates() {\n    const refinementStrategy = this.opts.refinementStrategy || STRATEGY_DEFAULT;\n\n    const visibilities = new Array(this._cache.size);\n    let i = 0;\n    // Reset state\n    for (const tile of this._cache.values()) {\n      // save previous state\n      visibilities[i++] = tile.isVisible;\n      tile.isSelected = false;\n      tile.isVisible = false;\n    }\n    // @ts-expect-error called only when _selectedTiles is already defined\n    for (const tile of this._selectedTiles) {\n      tile.isSelected = true;\n      tile.isVisible = true;\n    }\n\n    // Strategy-specific state logic\n    (typeof refinementStrategy === 'function'\n      ? refinementStrategy\n      : STRATEGIES[refinementStrategy])(Array.from(this._cache.values()));\n\n    i = 0;\n    // Check if any visibility has changed\n    for (const tile of this._cache.values()) {\n      if (visibilities[i++] !== tile.isVisible) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /* Private methods */\n\n  private _getCullBounds = memoize(getCullBounds);\n\n  private _pruneRequests(): void {\n    const {maxRequests} = this.opts;\n\n    const abortCandidates: Tile2DHeader[] = [];\n    let ongoingRequestCount = 0;\n    for (const tile of this._cache.values()) {\n      // Keep track of all the ongoing requests\n      if (tile.isLoading) {\n        ongoingRequestCount++;\n        if (!tile.isSelected && !tile.isVisible) {\n          abortCandidates.push(tile);\n        }\n      }\n    }\n\n    while (maxRequests > 0 && ongoingRequestCount > maxRequests && abortCandidates.length > 0) {\n      // There are too many ongoing requests, so abort some that are unselected\n      const tile = abortCandidates.shift()!;\n      tile.abort();\n      ongoingRequestCount--;\n    }\n  }\n\n  // This needs to be called every time some tiles have been added/removed from cache\n  private _rebuildTree() {\n    const {_cache} = this;\n\n    // Reset states\n    for (const tile of _cache.values()) {\n      tile.parent = null;\n      if (tile.children) {\n        tile.children.length = 0;\n      }\n    }\n\n    // Rebuild tree\n    for (const tile of _cache.values()) {\n      const parent = this._getNearestAncestor(tile);\n      tile.parent = parent;\n      if (parent?.children) {\n        parent.children.push(tile);\n      }\n    }\n  }\n\n  /**\n   * Clear tiles that are not visible when the cache is full\n   */\n  /* eslint-disable complexity */\n  private _resizeCache() {\n    const {_cache, opts} = this;\n\n    const maxCacheSize =\n      opts.maxCacheSize ||\n      // @ts-expect-error called only when selectedTiles is initialized\n      (opts.maxCacheByteSize ? Infinity : DEFAULT_CACHE_SCALE * this.selectedTiles.length);\n    const maxCacheByteSize = opts.maxCacheByteSize || Infinity;\n\n    const overflown = _cache.size > maxCacheSize || this._cacheByteSize > maxCacheByteSize;\n\n    if (overflown) {\n      for (const [id, tile] of _cache) {\n        if (!tile.isVisible && !tile.isSelected) {\n          // delete tile\n          this._cacheByteSize -= opts.maxCacheByteSize ? tile.byteLength : 0;\n          _cache.delete(id);\n          this.opts.onTileUnload(tile);\n        }\n        if (_cache.size <= maxCacheSize && this._cacheByteSize <= maxCacheByteSize) {\n          break;\n        }\n      }\n      this._rebuildTree();\n      this._dirty = true;\n    }\n    if (this._dirty) {\n      // sort by zoom level so that smaller tiles are displayed on top\n      this._tiles = Array.from(this._cache.values()).sort((t1, t2) => t1.zoom - t2.zoom);\n\n      this._dirty = false;\n    }\n  }\n  /* eslint-enable complexity */\n\n  private _getTile(index: TileIndex, create: true): Tile2DHeader;\n  private _getTile(index: TileIndex, create?: false): Tile2DHeader | undefined;\n  private _getTile(index: TileIndex, create?: boolean): Tile2DHeader | undefined {\n    const id = this.getTileId(index);\n    let tile = this._cache.get(id);\n    let needsReload = false;\n\n    if (!tile && create) {\n      tile = new Tile2DHeader(index);\n      Object.assign(tile, this.getTileMetadata(tile.index));\n      Object.assign(tile, {id, zoom: this.getTileZoom(tile.index)});\n      needsReload = true;\n      this._cache.set(id, tile);\n      this._dirty = true;\n    } else if (tile && tile.needsReload) {\n      needsReload = true;\n    }\n    if (tile && needsReload) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      tile.loadData({\n        getData: this.opts.getTileData,\n        requestScheduler: this._requestScheduler,\n        onLoad: this.onTileLoad,\n        onError: this.opts.onTileError\n      });\n    }\n\n    return tile;\n  }\n\n  _getNearestAncestor(tile: Tile2DHeader): Tile2DHeader | null {\n    const {_minZoom = 0} = this;\n\n    let index = tile.index;\n    while (this.getTileZoom(index) > _minZoom) {\n      index = this.getParentIndex(index);\n      const parent = this._getTile(index);\n      if (parent) {\n        return parent;\n      }\n    }\n    return null;\n  }\n}\n\n/* -- Refinement strategies --*/\n/* eslint-disable max-depth */\n\n// For all the selected && pending tiles:\n// - pick the closest ancestor as placeholder\n// - if no ancestor is visible, pick the closest children as placeholder\nfunction updateTileStateDefault(allTiles: Tile2DHeader[]) {\n  for (const tile of allTiles) {\n    tile.state = 0;\n  }\n  for (const tile of allTiles) {\n    if (tile.isSelected && !getPlaceholderInAncestors(tile)) {\n      getPlaceholderInChildren(tile);\n    }\n  }\n  for (const tile of allTiles) {\n    tile.isVisible = Boolean(tile.state! & TILE_STATE_VISIBLE);\n  }\n}\n\n// Until a selected tile and all its selected siblings are loaded, use the closest ancestor as placeholder\nfunction updateTileStateReplace(allTiles: Tile2DHeader[]) {\n  for (const tile of allTiles) {\n    tile.state = 0;\n  }\n  for (const tile of allTiles) {\n    if (tile.isSelected) {\n      getPlaceholderInAncestors(tile);\n    }\n  }\n  // Always process parents first\n  const sortedTiles = Array.from(allTiles).sort((t1, t2) => t1.zoom - t2.zoom);\n  for (const tile of sortedTiles) {\n    tile.isVisible = Boolean(tile.state! & TILE_STATE_VISIBLE);\n\n    if (tile.children && (tile.isVisible || tile.state! & TILE_STATE_VISITED)) {\n      // If the tile is rendered, or if the tile has been explicitly hidden, hide all of its children\n      for (const child of tile.children) {\n        child.state = TILE_STATE_VISITED;\n      }\n    } else if (tile.isSelected) {\n      getPlaceholderInChildren(tile);\n    }\n  }\n}\n\n// Walk up the tree until we find one ancestor that is loaded. Returns true if successful.\nfunction getPlaceholderInAncestors(startTile: Tile2DHeader) {\n  let tile: Tile2DHeader | null = startTile;\n  while (tile) {\n    if (tile.isLoaded || tile.content) {\n      tile.state! |= TILE_STATE_VISIBLE;\n      return true;\n    }\n    tile = tile.parent;\n  }\n  return false;\n}\n\n// Recursively set children as placeholder\nfunction getPlaceholderInChildren(tile) {\n  for (const child of tile.children) {\n    if (child.isLoaded || child.content) {\n      child.state |= TILE_STATE_VISIBLE;\n    } else {\n      getPlaceholderInChildren(child);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}