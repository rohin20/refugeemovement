{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nvar env = {};\nexport var EVENTS = ['value', 'string', 'key', 'openobject', 'closeobject', 'openarray', 'closearray', 'error', 'end', 'ready'];\nvar MAX_BUFFER_LENGTH = Number.MAX_SAFE_INTEGER;\nvar DEBUG = env.CDEBUG === 'debug';\nvar buffers = {\n  textNode: undefined,\n  numberNode: ''\n};\nvar S = 0;\nvar STATE = {\n  BEGIN: S++,\n  VALUE: S++,\n  OPEN_OBJECT: S++,\n  CLOSE_OBJECT: S++,\n  OPEN_ARRAY: S++,\n  CLOSE_ARRAY: S++,\n  TEXT_ESCAPE: S++,\n  STRING: S++,\n  BACKSLASH: S++,\n  END: S++,\n  OPEN_KEY: S++,\n  CLOSE_KEY: S++,\n  TRUE: S++,\n  TRUE2: S++,\n  TRUE3: S++,\n  FALSE: S++,\n  FALSE2: S++,\n  FALSE3: S++,\n  FALSE4: S++,\n  NULL: S++,\n  NULL2: S++,\n  NULL3: S++,\n  NUMBER_DECIMAL_POINT: S++,\n  NUMBER_DIGIT: S++\n};\nfor (var s_ in STATE) {\n  STATE[STATE[s_]] = s_;\n}\nS = STATE;\nvar Char = {\n  tab: 0x09,\n  lineFeed: 0x0a,\n  carriageReturn: 0x0d,\n  space: 0x20,\n  doubleQuote: 0x22,\n  plus: 0x2b,\n  comma: 0x2c,\n  minus: 0x2d,\n  period: 0x2e,\n  _0: 0x30,\n  _9: 0x39,\n  colon: 0x3a,\n  E: 0x45,\n  openBracket: 0x5b,\n  backslash: 0x5c,\n  closeBracket: 0x5d,\n  a: 0x61,\n  b: 0x62,\n  e: 0x65,\n  f: 0x66,\n  l: 0x6c,\n  n: 0x6e,\n  r: 0x72,\n  s: 0x73,\n  t: 0x74,\n  u: 0x75,\n  openBrace: 0x7b,\n  closeBrace: 0x7d\n};\nfunction checkBufferLength(parser) {\n  var maxAllowed = Math.max(MAX_BUFFER_LENGTH, 10);\n  var maxActual = 0;\n  for (var buffer in buffers) {\n    var len = parser[buffer] === undefined ? 0 : parser[buffer].length;\n    if (len > maxAllowed) {\n      switch (buffer) {\n        case 'text':\n          closeText(parser);\n          break;\n        default:\n          error(parser, 'Max buffer length exceeded: ' + buffer);\n      }\n    }\n    maxActual = Math.max(maxActual, len);\n  }\n  parser.bufferCheckPosition = MAX_BUFFER_LENGTH - maxActual + parser.position;\n}\nvar stringTokenPattern = /[\\\\\"\\n]/g;\nvar ClarinetParser = function () {\n  function ClarinetParser() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, ClarinetParser);\n    this._initialize(options);\n  }\n  _createClass(ClarinetParser, [{\n    key: \"_initialize\",\n    value: function _initialize(options) {\n      this._clearBuffers(this);\n      this.bufferCheckPosition = MAX_BUFFER_LENGTH;\n      this.q = '';\n      this.c = '';\n      this.p = '';\n      this.options = options || {};\n      this.closed = false;\n      this.closedRoot = false;\n      this.sawRoot = false;\n      this.tag = null;\n      this.error = null;\n      this.state = S.BEGIN;\n      this.stack = new Array();\n      this.position = this.column = 0;\n      this.line = 1;\n      this.slashed = false;\n      this.unicodeI = 0;\n      this.unicodeS = null;\n      this.depth = 0;\n      if ('onready' in options) {\n        this.onready = options.onready;\n      }\n      if ('onopenobject' in options) {\n        this.onopenobject = options.onopenobject;\n      }\n      if ('onkey' in options) {\n        this.onkey = options.onkey;\n      }\n      if ('oncloseobject' in options) {\n        this.oncloseobject = options.oncloseobject;\n      }\n      if ('onopenarray' in options) {\n        this.onopenarray = options.onopenarray;\n      }\n      if ('onclosearray' in options) {\n        this.onclosearray = options.onclosearray;\n      }\n      if ('onvalue' in options) {\n        this.onvalue = options.onvalue;\n      }\n      if ('onerror' in options) {\n        this.onerror = options.onerror;\n      }\n      if ('onend' in options) {\n        this.onend = options.onend;\n      }\n      if ('onchunkparsed' in options) {\n        this.onchunkparsed = options.onchunkparsed;\n      }\n      emit(this, 'onready');\n    }\n  }, {\n    key: \"_clearBuffers\",\n    value: function _clearBuffers() {\n      for (var buffer in buffers) {\n        this[buffer] = buffers[buffer];\n      }\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      if (this.state !== S.VALUE || this.depth !== 0) error(this, 'Unexpected end');\n      closeValue(this);\n      this.c = '';\n      this.closed = true;\n      emit(this, 'onend');\n      this._initialize(this.options);\n      return this;\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      this.error = null;\n      return this;\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.write(null);\n    }\n  }, {\n    key: \"write\",\n    value: function write(chunk) {\n      if (this.error) {\n        throw this.error;\n      }\n      if (this.closed) {\n        return error(this, 'Cannot write after close. Assign an onready handler.');\n      }\n      if (chunk === null) {\n        return this.end();\n      }\n      var i = 0,\n        c = chunk.charCodeAt(0),\n        p = this.p;\n      if (DEBUG) console.log('write -> [' + chunk + ']');\n      while (c) {\n        p = c;\n        this.c = c = chunk.charCodeAt(i++);\n        if (p !== c) {\n          this.p = p;\n        } else {\n          p = this.p;\n        }\n        if (!c) break;\n        if (DEBUG) console.log(i, c, STATE[this.state]);\n        this.position++;\n        if (c === Char.lineFeed) {\n          this.line++;\n          this.column = 0;\n        } else this.column++;\n        switch (this.state) {\n          case S.BEGIN:\n            if (c === Char.openBrace) this.state = S.OPEN_OBJECT;else if (c === Char.openBracket) this.state = S.OPEN_ARRAY;else if (!isWhitespace(c)) {\n              error(this, 'Non-whitespace before {[.');\n            }\n            continue;\n          case S.OPEN_KEY:\n          case S.OPEN_OBJECT:\n            if (isWhitespace(c)) continue;\n            if (this.state === S.OPEN_KEY) this.stack.push(S.CLOSE_KEY);else {\n              if (c === Char.closeBrace) {\n                emit(this, 'onopenobject');\n                this.depth++;\n                emit(this, 'oncloseobject');\n                this.depth--;\n                this.state = this.stack.pop() || S.VALUE;\n                continue;\n              } else this.stack.push(S.CLOSE_OBJECT);\n            }\n            if (c === Char.doubleQuote) this.state = S.STRING;else error(this, 'Malformed object key should start with \"');\n            continue;\n          case S.CLOSE_KEY:\n          case S.CLOSE_OBJECT:\n            if (isWhitespace(c)) continue;\n            var event = this.state === S.CLOSE_KEY ? 'key' : 'object';\n            if (c === Char.colon) {\n              if (this.state === S.CLOSE_OBJECT) {\n                this.stack.push(S.CLOSE_OBJECT);\n                closeValue(this, 'onopenobject');\n                this.depth++;\n              } else closeValue(this, 'onkey');\n              this.state = S.VALUE;\n            } else if (c === Char.closeBrace) {\n              emitNode(this, 'oncloseobject');\n              this.depth--;\n              this.state = this.stack.pop() || S.VALUE;\n            } else if (c === Char.comma) {\n              if (this.state === S.CLOSE_OBJECT) this.stack.push(S.CLOSE_OBJECT);\n              closeValue(this);\n              this.state = S.OPEN_KEY;\n            } else error(this, 'Bad object');\n            continue;\n          case S.OPEN_ARRAY:\n          case S.VALUE:\n            if (isWhitespace(c)) continue;\n            if (this.state === S.OPEN_ARRAY) {\n              emit(this, 'onopenarray');\n              this.depth++;\n              this.state = S.VALUE;\n              if (c === Char.closeBracket) {\n                emit(this, 'onclosearray');\n                this.depth--;\n                this.state = this.stack.pop() || S.VALUE;\n                continue;\n              } else {\n                this.stack.push(S.CLOSE_ARRAY);\n              }\n            }\n            if (c === Char.doubleQuote) this.state = S.STRING;else if (c === Char.openBrace) this.state = S.OPEN_OBJECT;else if (c === Char.openBracket) this.state = S.OPEN_ARRAY;else if (c === Char.t) this.state = S.TRUE;else if (c === Char.f) this.state = S.FALSE;else if (c === Char.n) this.state = S.NULL;else if (c === Char.minus) {\n              this.numberNode += '-';\n            } else if (Char._0 <= c && c <= Char._9) {\n              this.numberNode += String.fromCharCode(c);\n              this.state = S.NUMBER_DIGIT;\n            } else error(this, 'Bad value');\n            continue;\n          case S.CLOSE_ARRAY:\n            if (c === Char.comma) {\n              this.stack.push(S.CLOSE_ARRAY);\n              closeValue(this, 'onvalue');\n              this.state = S.VALUE;\n            } else if (c === Char.closeBracket) {\n              emitNode(this, 'onclosearray');\n              this.depth--;\n              this.state = this.stack.pop() || S.VALUE;\n            } else if (isWhitespace(c)) continue;else error(this, 'Bad array');\n            continue;\n          case S.STRING:\n            if (this.textNode === undefined) {\n              this.textNode = '';\n            }\n            var starti = i - 1,\n              slashed = this.slashed,\n              unicodeI = this.unicodeI;\n            STRING_BIGLOOP: while (true) {\n              if (DEBUG) console.log(i, c, STATE[this.state], slashed);\n              while (unicodeI > 0) {\n                this.unicodeS += String.fromCharCode(c);\n                c = chunk.charCodeAt(i++);\n                this.position++;\n                if (unicodeI === 4) {\n                  this.textNode += String.fromCharCode(parseInt(this.unicodeS, 16));\n                  unicodeI = 0;\n                  starti = i - 1;\n                } else {\n                  unicodeI++;\n                }\n                if (!c) break STRING_BIGLOOP;\n              }\n              if (c === Char.doubleQuote && !slashed) {\n                this.state = this.stack.pop() || S.VALUE;\n                this.textNode += chunk.substring(starti, i - 1);\n                this.position += i - 1 - starti;\n                break;\n              }\n              if (c === Char.backslash && !slashed) {\n                slashed = true;\n                this.textNode += chunk.substring(starti, i - 1);\n                this.position += i - 1 - starti;\n                c = chunk.charCodeAt(i++);\n                this.position++;\n                if (!c) break;\n              }\n              if (slashed) {\n                slashed = false;\n                if (c === Char.n) {\n                  this.textNode += '\\n';\n                } else if (c === Char.r) {\n                  this.textNode += '\\r';\n                } else if (c === Char.t) {\n                  this.textNode += '\\t';\n                } else if (c === Char.f) {\n                  this.textNode += '\\f';\n                } else if (c === Char.b) {\n                  this.textNode += '\\b';\n                } else if (c === Char.u) {\n                  unicodeI = 1;\n                  this.unicodeS = '';\n                } else {\n                  this.textNode += String.fromCharCode(c);\n                }\n                c = chunk.charCodeAt(i++);\n                this.position++;\n                starti = i - 1;\n                if (!c) break;else continue;\n              }\n              stringTokenPattern.lastIndex = i;\n              var reResult = stringTokenPattern.exec(chunk);\n              if (reResult === null) {\n                i = chunk.length + 1;\n                this.textNode += chunk.substring(starti, i - 1);\n                this.position += i - 1 - starti;\n                break;\n              }\n              i = reResult.index + 1;\n              c = chunk.charCodeAt(reResult.index);\n              if (!c) {\n                this.textNode += chunk.substring(starti, i - 1);\n                this.position += i - 1 - starti;\n                break;\n              }\n            }\n            this.slashed = slashed;\n            this.unicodeI = unicodeI;\n            continue;\n          case S.TRUE:\n            if (c === Char.r) this.state = S.TRUE2;else error(this, 'Invalid true started with t' + c);\n            continue;\n          case S.TRUE2:\n            if (c === Char.u) this.state = S.TRUE3;else error(this, 'Invalid true started with tr' + c);\n            continue;\n          case S.TRUE3:\n            if (c === Char.e) {\n              emit(this, 'onvalue', true);\n              this.state = this.stack.pop() || S.VALUE;\n            } else error(this, 'Invalid true started with tru' + c);\n            continue;\n          case S.FALSE:\n            if (c === Char.a) this.state = S.FALSE2;else error(this, 'Invalid false started with f' + c);\n            continue;\n          case S.FALSE2:\n            if (c === Char.l) this.state = S.FALSE3;else error(this, 'Invalid false started with fa' + c);\n            continue;\n          case S.FALSE3:\n            if (c === Char.s) this.state = S.FALSE4;else error(this, 'Invalid false started with fal' + c);\n            continue;\n          case S.FALSE4:\n            if (c === Char.e) {\n              emit(this, 'onvalue', false);\n              this.state = this.stack.pop() || S.VALUE;\n            } else error(this, 'Invalid false started with fals' + c);\n            continue;\n          case S.NULL:\n            if (c === Char.u) this.state = S.NULL2;else error(this, 'Invalid null started with n' + c);\n            continue;\n          case S.NULL2:\n            if (c === Char.l) this.state = S.NULL3;else error(this, 'Invalid null started with nu' + c);\n            continue;\n          case S.NULL3:\n            if (c === Char.l) {\n              emit(this, 'onvalue', null);\n              this.state = this.stack.pop() || S.VALUE;\n            } else error(this, 'Invalid null started with nul' + c);\n            continue;\n          case S.NUMBER_DECIMAL_POINT:\n            if (c === Char.period) {\n              this.numberNode += '.';\n              this.state = S.NUMBER_DIGIT;\n            } else error(this, 'Leading zero not followed by .');\n            continue;\n          case S.NUMBER_DIGIT:\n            if (Char._0 <= c && c <= Char._9) this.numberNode += String.fromCharCode(c);else if (c === Char.period) {\n              if (this.numberNode.indexOf('.') !== -1) error(this, 'Invalid number has two dots');\n              this.numberNode += '.';\n            } else if (c === Char.e || c === Char.E) {\n              if (this.numberNode.indexOf('e') !== -1 || this.numberNode.indexOf('E') !== -1) error(this, 'Invalid number has two exponential');\n              this.numberNode += 'e';\n            } else if (c === Char.plus || c === Char.minus) {\n              if (!(p === Char.e || p === Char.E)) error(this, 'Invalid symbol in number');\n              this.numberNode += String.fromCharCode(c);\n            } else {\n              closeNumber(this);\n              i--;\n              this.state = this.stack.pop() || S.VALUE;\n            }\n            continue;\n          default:\n            error(this, 'Unknown state: ' + this.state);\n        }\n      }\n      if (this.position >= this.bufferCheckPosition) {\n        checkBufferLength(this);\n      }\n      emit(this, 'onchunkparsed');\n      return this;\n    }\n  }]);\n  return ClarinetParser;\n}();\nexport { ClarinetParser as default };\nfunction emit(parser, event, data) {\n  if (DEBUG) {\n    console.log('-- emit', event, data);\n  }\n  if (parser[event]) {\n    parser[event](data, parser);\n  }\n}\nfunction emitNode(parser, event, data) {\n  closeValue(parser);\n  emit(parser, event, data);\n}\nfunction closeValue(parser, event) {\n  parser.textNode = textopts(parser.options, parser.textNode);\n  if (parser.textNode !== undefined) {\n    emit(parser, event ? event : 'onvalue', parser.textNode);\n  }\n  parser.textNode = undefined;\n}\nfunction closeNumber(parser) {\n  if (parser.numberNode) emit(parser, 'onvalue', parseFloat(parser.numberNode));\n  parser.numberNode = '';\n}\nfunction textopts(opt, text) {\n  if (text === undefined) {\n    return text;\n  }\n  if (opt.trim) text = text.trim();\n  if (opt.normalize) text = text.replace(/\\s+/g, ' ');\n  return text;\n}\nfunction error(parser, er) {\n  closeValue(parser);\n  er += '\\nLine: ' + parser.line + '\\nColumn: ' + parser.column + '\\nChar: ' + parser.c;\n  er = new Error(er);\n  parser.error = er;\n  emit(parser, 'onerror', er);\n  return parser;\n}\nfunction isWhitespace(c) {\n  return c === Char.carriageReturn || c === Char.lineFeed || c === Char.space || c === Char.tab;\n}","map":{"version":3,"names":["env","EVENTS","MAX_BUFFER_LENGTH","Number","MAX_SAFE_INTEGER","DEBUG","CDEBUG","buffers","textNode","undefined","numberNode","S","STATE","BEGIN","VALUE","OPEN_OBJECT","CLOSE_OBJECT","OPEN_ARRAY","CLOSE_ARRAY","TEXT_ESCAPE","STRING","BACKSLASH","END","OPEN_KEY","CLOSE_KEY","TRUE","TRUE2","TRUE3","FALSE","FALSE2","FALSE3","FALSE4","NULL","NULL2","NULL3","NUMBER_DECIMAL_POINT","NUMBER_DIGIT","s_","Char","tab","lineFeed","carriageReturn","space","doubleQuote","plus","comma","minus","period","_0","_9","colon","E","openBracket","backslash","closeBracket","a","b","e","f","l","n","r","s","t","u","openBrace","closeBrace","checkBufferLength","parser","maxAllowed","Math","max","maxActual","buffer","len","length","closeText","error","bufferCheckPosition","position","stringTokenPattern","ClarinetParser","options","arguments","_classCallCheck","_initialize","_clearBuffers","q","c","p","closed","closedRoot","sawRoot","tag","state","stack","Array","column","line","slashed","unicodeI","unicodeS","depth","onready","onopenobject","onkey","oncloseobject","onopenarray","onclosearray","onvalue","onerror","onend","onchunkparsed","emit","closeValue","write","chunk","end","i","charCodeAt","console","log","isWhitespace","push","pop","event","emitNode","String","fromCharCode","starti","STRING_BIGLOOP","parseInt","substring","lastIndex","reResult","exec","index","indexOf","closeNumber","data","textopts","parseFloat","opt","text","trim","normalize","replace","er","Error"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/json/src/lib/clarinet/clarinet.js"],"sourcesContent":["/* eslint-disable */\n// @ts-nocheck\nconst env = {};\n\nexport const EVENTS = [\n  'value',\n  'string',\n  'key',\n  'openobject',\n  'closeobject',\n  'openarray',\n  'closearray',\n  'error',\n  'end',\n  'ready'\n];\n\n// Removes the MAX_BUFFER_LENGTH, originally set to 64 * 1024\nconst MAX_BUFFER_LENGTH = Number.MAX_SAFE_INTEGER;\nconst DEBUG = env.CDEBUG === 'debug';\n\nconst buffers = {\n  textNode: undefined,\n  numberNode: ''\n};\n\nlet S = 0;\n\nconst STATE = {\n  BEGIN: S++,\n  VALUE: S++, // general stuff\n  OPEN_OBJECT: S++, // {\n  CLOSE_OBJECT: S++, // }\n  OPEN_ARRAY: S++, // [\n  CLOSE_ARRAY: S++, // ]\n  TEXT_ESCAPE: S++, // \\ stuff\n  STRING: S++, // \"\"\n  BACKSLASH: S++,\n  END: S++, // No more stack\n  OPEN_KEY: S++, // , \"a\"\n  CLOSE_KEY: S++, // :\n  TRUE: S++, // r\n  TRUE2: S++, // u\n  TRUE3: S++, // e\n  FALSE: S++, // a\n  FALSE2: S++, // l\n  FALSE3: S++, // s\n  FALSE4: S++, // e\n  NULL: S++, // u\n  NULL2: S++, // l\n  NULL3: S++, // l\n  NUMBER_DECIMAL_POINT: S++, // .\n  NUMBER_DIGIT: S++ // [0-9]\n};\n\nfor (var s_ in STATE) STATE[STATE[s_]] = s_;\n\n// switcharoo\nS = STATE;\n\nconst Char = {\n  tab: 0x09, // \\t\n  lineFeed: 0x0a, // \\n\n  carriageReturn: 0x0d, // \\r\n  space: 0x20, // \" \"\n\n  doubleQuote: 0x22, // \"\n  plus: 0x2b, // +\n  comma: 0x2c, // ,\n  minus: 0x2d, // -\n  period: 0x2e, // .\n\n  _0: 0x30, // 0\n  _9: 0x39, // 9\n\n  colon: 0x3a, // :\n\n  E: 0x45, // E\n\n  openBracket: 0x5b, // [\n  backslash: 0x5c, // \\\n  closeBracket: 0x5d, // ]\n\n  a: 0x61, // a\n  b: 0x62, // b\n  e: 0x65, // e\n  f: 0x66, // f\n  l: 0x6c, // l\n  n: 0x6e, // n\n  r: 0x72, // r\n  s: 0x73, // s\n  t: 0x74, // t\n  u: 0x75, // u\n\n  openBrace: 0x7b, // {\n  closeBrace: 0x7d // }\n};\n\nfunction checkBufferLength(parser) {\n  const maxAllowed = Math.max(MAX_BUFFER_LENGTH, 10);\n  let maxActual = 0;\n\n  for (var buffer in buffers) {\n    var len = parser[buffer] === undefined ? 0 : parser[buffer].length;\n    if (len > maxAllowed) {\n      switch (buffer) {\n        case 'text':\n          closeText(parser);\n          break;\n\n        default:\n          error(parser, 'Max buffer length exceeded: ' + buffer);\n      }\n    }\n    maxActual = Math.max(maxActual, len);\n  }\n  parser.bufferCheckPosition = MAX_BUFFER_LENGTH - maxActual + parser.position;\n}\n\nvar stringTokenPattern = /[\\\\\"\\n]/g;\n\nexport default class ClarinetParser {\n  constructor(options = {}) {\n    this._initialize(options);\n  }\n\n  _initialize(options) {\n    this._clearBuffers(this);\n    this.bufferCheckPosition = MAX_BUFFER_LENGTH;\n    this.q = '';\n    this.c = '';\n    this.p = '';\n    this.options = options || {};\n    this.closed = false;\n    this.closedRoot = false;\n    this.sawRoot = false;\n    this.tag = null;\n    this.error = null;\n    this.state = S.BEGIN;\n    this.stack = new Array();\n    // mostly just for error reporting\n    this.position = this.column = 0;\n    this.line = 1;\n    this.slashed = false;\n    this.unicodeI = 0;\n    this.unicodeS = null;\n    this.depth = 0;\n\n    // install callbacks\n    if ('onready' in options) {\n      this.onready = options.onready;\n    }\n\n    if ('onopenobject' in options) {\n      this.onopenobject = options.onopenobject;\n    }\n\n    if ('onkey' in options) {\n      this.onkey = options.onkey;\n    }\n\n    if ('oncloseobject' in options) {\n      this.oncloseobject = options.oncloseobject;\n    }\n\n    if ('onopenarray' in options) {\n      this.onopenarray = options.onopenarray;\n    }\n\n    if ('onclosearray' in options) {\n      this.onclosearray = options.onclosearray;\n    }\n\n    if ('onvalue' in options) {\n      this.onvalue = options.onvalue;\n    }\n\n    if ('onerror' in options) {\n      this.onerror = options.onerror;\n    }\n\n    if ('onend' in options) {\n      this.onend = options.onend;\n    }\n\n    if ('onchunkparsed' in options) {\n      this.onchunkparsed = options.onchunkparsed;\n    }\n\n    emit(this, 'onready');\n  }\n\n  _clearBuffers() {\n    for (var buffer in buffers) {\n      this[buffer] = buffers[buffer];\n    }\n  }\n\n  end() {\n    if (this.state !== S.VALUE || this.depth !== 0) error(this, 'Unexpected end');\n\n    closeValue(this);\n    this.c = '';\n    this.closed = true;\n    emit(this, 'onend');\n    this._initialize(this.options);\n    return this;\n  }\n\n  resume() {\n    this.error = null;\n    return this;\n  }\n\n  close() {\n    return this.write(null);\n  }\n\n  write(chunk) {\n    if (this.error) {\n      throw this.error;\n    }\n    if (this.closed) {\n      return error(this, 'Cannot write after close. Assign an onready handler.');\n    }\n    if (chunk === null) {\n      return this.end();\n    }\n    var i = 0,\n      c = chunk.charCodeAt(0),\n      p = this.p;\n    if (DEBUG) console.log('write -> [' + chunk + ']');\n    while (c) {\n      p = c;\n      this.c = c = chunk.charCodeAt(i++);\n      // if chunk doesnt have next, like streaming char by char\n      // this way we need to check if previous is really previous\n      // if not we need to reset to what the this says is the previous\n      // from buffer\n      if (p !== c) {\n        this.p = p;\n      } else {\n        p = this.p;\n      }\n\n      if (!c) break;\n\n      if (DEBUG) console.log(i, c, STATE[this.state]);\n      this.position++;\n      if (c === Char.lineFeed) {\n        this.line++;\n        this.column = 0;\n      } else this.column++;\n\n      switch (this.state) {\n        case S.BEGIN:\n          if (c === Char.openBrace) this.state = S.OPEN_OBJECT;\n          else if (c === Char.openBracket) this.state = S.OPEN_ARRAY;\n          else if (!isWhitespace(c)) {\n            error(this, 'Non-whitespace before {[.');\n          }\n          continue;\n\n        case S.OPEN_KEY:\n        case S.OPEN_OBJECT:\n          if (isWhitespace(c)) continue;\n          if (this.state === S.OPEN_KEY) this.stack.push(S.CLOSE_KEY);\n          else {\n            if (c === Char.closeBrace) {\n              emit(this, 'onopenobject');\n              this.depth++;\n              emit(this, 'oncloseobject');\n              this.depth--;\n              this.state = this.stack.pop() || S.VALUE;\n              continue;\n            } else this.stack.push(S.CLOSE_OBJECT);\n          }\n          if (c === Char.doubleQuote) this.state = S.STRING;\n          else error(this, 'Malformed object key should start with \"');\n          continue;\n\n        case S.CLOSE_KEY:\n        case S.CLOSE_OBJECT:\n          if (isWhitespace(c)) continue;\n          var event = this.state === S.CLOSE_KEY ? 'key' : 'object';\n          if (c === Char.colon) {\n            if (this.state === S.CLOSE_OBJECT) {\n              this.stack.push(S.CLOSE_OBJECT);\n              closeValue(this, 'onopenobject');\n              this.depth++;\n            } else closeValue(this, 'onkey');\n            this.state = S.VALUE;\n          } else if (c === Char.closeBrace) {\n            emitNode(this, 'oncloseobject');\n            this.depth--;\n            this.state = this.stack.pop() || S.VALUE;\n          } else if (c === Char.comma) {\n            if (this.state === S.CLOSE_OBJECT) this.stack.push(S.CLOSE_OBJECT);\n            closeValue(this);\n            this.state = S.OPEN_KEY;\n          } else error(this, 'Bad object');\n          continue;\n\n        case S.OPEN_ARRAY: // after an array there always a value\n        case S.VALUE:\n          if (isWhitespace(c)) continue;\n          if (this.state === S.OPEN_ARRAY) {\n            emit(this, 'onopenarray');\n            this.depth++;\n            this.state = S.VALUE;\n            if (c === Char.closeBracket) {\n              emit(this, 'onclosearray');\n              this.depth--;\n              this.state = this.stack.pop() || S.VALUE;\n              continue;\n            } else {\n              this.stack.push(S.CLOSE_ARRAY);\n            }\n          }\n          if (c === Char.doubleQuote) this.state = S.STRING;\n          else if (c === Char.openBrace) this.state = S.OPEN_OBJECT;\n          else if (c === Char.openBracket) this.state = S.OPEN_ARRAY;\n          else if (c === Char.t) this.state = S.TRUE;\n          else if (c === Char.f) this.state = S.FALSE;\n          else if (c === Char.n) this.state = S.NULL;\n          else if (c === Char.minus) {\n            // keep and continue\n            this.numberNode += '-';\n          } else if (Char._0 <= c && c <= Char._9) {\n            this.numberNode += String.fromCharCode(c);\n            this.state = S.NUMBER_DIGIT;\n          } else error(this, 'Bad value');\n          continue;\n\n        case S.CLOSE_ARRAY:\n          if (c === Char.comma) {\n            this.stack.push(S.CLOSE_ARRAY);\n            closeValue(this, 'onvalue');\n            this.state = S.VALUE;\n          } else if (c === Char.closeBracket) {\n            emitNode(this, 'onclosearray');\n            this.depth--;\n            this.state = this.stack.pop() || S.VALUE;\n          } else if (isWhitespace(c)) continue;\n          else error(this, 'Bad array');\n          continue;\n\n        case S.STRING:\n          if (this.textNode === undefined) {\n            this.textNode = '';\n          }\n\n          // thanks thejh, this is an about 50% performance improvement.\n          var starti = i - 1,\n            slashed = this.slashed,\n            unicodeI = this.unicodeI;\n          STRING_BIGLOOP: while (true) {\n            if (DEBUG) console.log(i, c, STATE[this.state], slashed);\n            // zero means \"no unicode active\". 1-4 mean \"parse some more\". end after 4.\n            while (unicodeI > 0) {\n              this.unicodeS += String.fromCharCode(c);\n              c = chunk.charCodeAt(i++);\n              this.position++;\n              if (unicodeI === 4) {\n                // TODO this might be slow? well, probably not used too often anyway\n                this.textNode += String.fromCharCode(parseInt(this.unicodeS, 16));\n                unicodeI = 0;\n                starti = i - 1;\n              } else {\n                unicodeI++;\n              }\n              // we can just break here: no stuff we skipped that still has to be sliced out or so\n              if (!c) break STRING_BIGLOOP;\n            }\n            if (c === Char.doubleQuote && !slashed) {\n              this.state = this.stack.pop() || S.VALUE;\n              this.textNode += chunk.substring(starti, i - 1);\n              this.position += i - 1 - starti;\n              break;\n            }\n            if (c === Char.backslash && !slashed) {\n              slashed = true;\n              this.textNode += chunk.substring(starti, i - 1);\n              this.position += i - 1 - starti;\n              c = chunk.charCodeAt(i++);\n              this.position++;\n              if (!c) break;\n            }\n            if (slashed) {\n              slashed = false;\n              if (c === Char.n) {\n                this.textNode += '\\n';\n              } else if (c === Char.r) {\n                this.textNode += '\\r';\n              } else if (c === Char.t) {\n                this.textNode += '\\t';\n              } else if (c === Char.f) {\n                this.textNode += '\\f';\n              } else if (c === Char.b) {\n                this.textNode += '\\b';\n              } else if (c === Char.u) {\n                // \\uxxxx. meh!\n                unicodeI = 1;\n                this.unicodeS = '';\n              } else {\n                this.textNode += String.fromCharCode(c);\n              }\n              c = chunk.charCodeAt(i++);\n              this.position++;\n              starti = i - 1;\n              if (!c) break;\n              else continue;\n            }\n\n            stringTokenPattern.lastIndex = i;\n            var reResult = stringTokenPattern.exec(chunk);\n            if (reResult === null) {\n              i = chunk.length + 1;\n              this.textNode += chunk.substring(starti, i - 1);\n              this.position += i - 1 - starti;\n              break;\n            }\n            i = reResult.index + 1;\n            c = chunk.charCodeAt(reResult.index);\n            if (!c) {\n              this.textNode += chunk.substring(starti, i - 1);\n              this.position += i - 1 - starti;\n              break;\n            }\n          }\n          this.slashed = slashed;\n          this.unicodeI = unicodeI;\n          continue;\n\n        case S.TRUE:\n          if (c === Char.r) this.state = S.TRUE2;\n          else error(this, 'Invalid true started with t' + c);\n          continue;\n\n        case S.TRUE2:\n          if (c === Char.u) this.state = S.TRUE3;\n          else error(this, 'Invalid true started with tr' + c);\n          continue;\n\n        case S.TRUE3:\n          if (c === Char.e) {\n            emit(this, 'onvalue', true);\n            this.state = this.stack.pop() || S.VALUE;\n          } else error(this, 'Invalid true started with tru' + c);\n          continue;\n\n        case S.FALSE:\n          if (c === Char.a) this.state = S.FALSE2;\n          else error(this, 'Invalid false started with f' + c);\n          continue;\n\n        case S.FALSE2:\n          if (c === Char.l) this.state = S.FALSE3;\n          else error(this, 'Invalid false started with fa' + c);\n          continue;\n\n        case S.FALSE3:\n          if (c === Char.s) this.state = S.FALSE4;\n          else error(this, 'Invalid false started with fal' + c);\n          continue;\n\n        case S.FALSE4:\n          if (c === Char.e) {\n            emit(this, 'onvalue', false);\n            this.state = this.stack.pop() || S.VALUE;\n          } else error(this, 'Invalid false started with fals' + c);\n          continue;\n\n        case S.NULL:\n          if (c === Char.u) this.state = S.NULL2;\n          else error(this, 'Invalid null started with n' + c);\n          continue;\n\n        case S.NULL2:\n          if (c === Char.l) this.state = S.NULL3;\n          else error(this, 'Invalid null started with nu' + c);\n          continue;\n\n        case S.NULL3:\n          if (c === Char.l) {\n            emit(this, 'onvalue', null);\n            this.state = this.stack.pop() || S.VALUE;\n          } else error(this, 'Invalid null started with nul' + c);\n          continue;\n\n        case S.NUMBER_DECIMAL_POINT:\n          if (c === Char.period) {\n            this.numberNode += '.';\n            this.state = S.NUMBER_DIGIT;\n          } else error(this, 'Leading zero not followed by .');\n          continue;\n\n        case S.NUMBER_DIGIT:\n          if (Char._0 <= c && c <= Char._9) this.numberNode += String.fromCharCode(c);\n          else if (c === Char.period) {\n            if (this.numberNode.indexOf('.') !== -1) error(this, 'Invalid number has two dots');\n            this.numberNode += '.';\n          } else if (c === Char.e || c === Char.E) {\n            if (this.numberNode.indexOf('e') !== -1 || this.numberNode.indexOf('E') !== -1)\n              error(this, 'Invalid number has two exponential');\n            this.numberNode += 'e';\n          } else if (c === Char.plus || c === Char.minus) {\n            if (!(p === Char.e || p === Char.E)) error(this, 'Invalid symbol in number');\n            this.numberNode += String.fromCharCode(c);\n          } else {\n            closeNumber(this);\n            i--; // go back one\n            this.state = this.stack.pop() || S.VALUE;\n          }\n          continue;\n\n        default:\n          error(this, 'Unknown state: ' + this.state);\n      }\n    }\n    if (this.position >= this.bufferCheckPosition) {\n      checkBufferLength(this);\n    }\n\n    emit(this, 'onchunkparsed');\n\n    return this;\n  }\n}\n\nfunction emit(parser, event, data) {\n  if (DEBUG) {\n    console.log('-- emit', event, data);\n  }\n  if (parser[event]) {\n    parser[event](data, parser);\n  }\n}\n\nfunction emitNode(parser, event, data) {\n  closeValue(parser);\n  emit(parser, event, data);\n}\n\nfunction closeValue(parser, event) {\n  parser.textNode = textopts(parser.options, parser.textNode);\n  if (parser.textNode !== undefined) {\n    emit(parser, event ? event : 'onvalue', parser.textNode);\n  }\n  parser.textNode = undefined;\n}\n\nfunction closeNumber(parser) {\n  if (parser.numberNode) emit(parser, 'onvalue', parseFloat(parser.numberNode));\n  parser.numberNode = '';\n}\n\nfunction textopts(opt, text) {\n  if (text === undefined) {\n    return text;\n  }\n  if (opt.trim) text = text.trim();\n  if (opt.normalize) text = text.replace(/\\s+/g, ' ');\n  return text;\n}\n\nfunction error(parser, er) {\n  closeValue(parser);\n  er += '\\nLine: ' + parser.line + '\\nColumn: ' + parser.column + '\\nChar: ' + parser.c;\n  er = new Error(er);\n  parser.error = er;\n  emit(parser, 'onerror', er);\n  return parser;\n}\n\nfunction isWhitespace(c) {\n  return c === Char.carriageReturn || c === Char.lineFeed || c === Char.space || c === Char.tab;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}