{"ast":null,"code":"import { assert } from '@loaders.gl/loader-utils';\nimport { selectLoaderSync } from './select-loader';\nimport { isLoaderObject } from '../loader-utils/normalize-loader';\nimport { normalizeOptions } from '../loader-utils/option-utils';\nimport { getArrayBufferOrStringFromDataSync } from '../loader-utils/get-data';\nimport { getLoaders, getLoaderContext } from '../loader-utils/context-utils';\nimport { getResourceUrlAndType } from '../utils/resource-utils';\nexport function parseSync(data, loaders, options, context) {\n  assert(!context || typeof context !== 'string', 'parseSync no longer accepts final url');\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = options;\n    options = loaders;\n    loaders = null;\n  }\n  options = options || {};\n  var candidateLoaders = getLoaders(loaders, context);\n  var loader = selectLoaderSync(data, candidateLoaders, options);\n  if (!loader) {\n    return null;\n  }\n  options = normalizeOptions(options, loader, candidateLoaders);\n  var _getResourceUrlAndTyp = getResourceUrlAndType(data),\n    url = _getResourceUrlAndTyp.url;\n  context = getLoaderContext({\n    url: url,\n    parseSync: parseSync,\n    loaders: loaders\n  }, options);\n  return parseWithLoaderSync(loader, data, options, context);\n}\nfunction parseWithLoaderSync(loader, data, options, context) {\n  data = getArrayBufferOrStringFromDataSync(data, loader);\n  if (loader.parseTextSync && typeof data === 'string') {\n    return loader.parseTextSync(data, options, context, loader);\n  }\n  if (loader.parseSync) {\n    return loader.parseSync(data, options, context, loader);\n  }\n  throw new Error(\"\".concat(loader.name, \" loader: 'parseSync' not supported by this loader, use 'parse' instead. \").concat(context.url || ''));\n}","map":{"version":3,"names":["assert","selectLoaderSync","isLoaderObject","normalizeOptions","getArrayBufferOrStringFromDataSync","getLoaders","getLoaderContext","getResourceUrlAndType","parseSync","data","loaders","options","context","Array","isArray","candidateLoaders","loader","_getResourceUrlAndTyp","url","parseWithLoaderSync","parseTextSync","Error","concat","name"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/kepler.gl/node_modules/@loaders.gl/core/src/lib/api/parse-sync.js"],"sourcesContent":["import {assert} from '@loaders.gl/loader-utils';\nimport {selectLoaderSync} from './select-loader';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {normalizeOptions} from '../loader-utils/option-utils';\nimport {getArrayBufferOrStringFromDataSync} from '../loader-utils/get-data';\nimport {getLoaders, getLoaderContext} from '../loader-utils/context-utils';\nimport {getResourceUrlAndType} from '../utils/resource-utils';\n\nexport function parseSync(data, loaders, options, context) {\n  assert(!context || typeof context !== 'string', 'parseSync no longer accepts final url');\n\n  // Signature: parseSync(data, options)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  options = options || {};\n\n  // Chooses a loader (and normalizes it)\n  // Also use any loaders in the context, new loaders take priority\n  const candidateLoaders = getLoaders(loaders, context);\n  const loader = selectLoaderSync(data, candidateLoaders, options);\n  // Note: if nothrow option was set, it is possible that no loader was found, if so just return null\n  if (!loader) {\n    return null;\n  }\n\n  // Normalize options\n  options = normalizeOptions(options, loader, candidateLoaders);\n\n  // Extract a url for auto detection\n  const {url} = getResourceUrlAndType(data);\n\n  context = getLoaderContext({url, parseSync, loaders}, options);\n\n  return parseWithLoaderSync(loader, data, options, context);\n}\n\n// TODO - should accept loader.parseSync/parse and generate 1 chunk asyncIterator\nfunction parseWithLoaderSync(loader, data, options, context) {\n  data = getArrayBufferOrStringFromDataSync(data, loader);\n\n  if (loader.parseTextSync && typeof data === 'string') {\n    return loader.parseTextSync(data, options, context, loader);\n  }\n\n  if (loader.parseSync) {\n    return loader.parseSync(data, options, context, loader);\n  }\n\n  // TBD - If synchronous parser not available, return null\n  throw new Error(\n    `${\n      loader.name\n    } loader: 'parseSync' not supported by this loader, use 'parse' instead. ${context.url || ''}`\n  );\n}\n"],"mappings":"AAAA,SAAQA,MAAR,QAAqB,0BAArB;AACA,SAAQC,gBAAR,QAA+B,iBAA/B;AACA,SAAQC,cAAR,QAA6B,kCAA7B;AACA,SAAQC,gBAAR,QAA+B,8BAA/B;AACA,SAAQC,kCAAR,QAAiD,0BAAjD;AACA,SAAQC,UAAR,EAAoBC,gBAApB,QAA2C,+BAA3C;AACA,SAAQC,qBAAR,QAAoC,yBAApC;AAEA,OAAO,SAASC,SAATA,CAAmBC,IAAnB,EAAyBC,OAAzB,EAAkCC,OAAlC,EAA2CC,OAA3C,EAAoD;EACzDZ,MAAM,CAAC,CAACY,OAAD,IAAY,OAAOA,OAAP,KAAmB,QAAhC,EAA0C,uCAA1C,CAAN;EAIA,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcJ,OAAd,CAAD,IAA2B,CAACR,cAAc,CAACQ,OAAD,CAA9C,EAAyD;IACvDE,OAAO,GAAGD,OAAV;IACAA,OAAO,GAAGD,OAAV;IACAA,OAAO,GAAG,IAAV;EACD;EAEDC,OAAO,GAAGA,OAAO,IAAI,EAArB;EAIA,IAAMI,gBAAgB,GAAGV,UAAU,CAACK,OAAD,EAAUE,OAAV,CAAnC;EACA,IAAMI,MAAM,GAAGf,gBAAgB,CAACQ,IAAD,EAAOM,gBAAP,EAAyBJ,OAAzB,CAA/B;EAEA,IAAI,CAACK,MAAL,EAAa;IACX,OAAO,IAAP;EACD;EAGDL,OAAO,GAAGR,gBAAgB,CAACQ,OAAD,EAAUK,MAAV,EAAkBD,gBAAlB,CAA1B;EAvByD,IAAAE,qBAAA,GA0B3CV,qBAAqB,CAACE,IAAD,CA1BsB;IA0BlDS,GA1BkD,GAAAD,qBAAA,CA0BlDC,GA1BkD;EA4BzDN,OAAO,GAAGN,gBAAgB,CAAC;IAACY,GAAG,EAAHA,GAAD;IAAMV,SAAS,EAATA,SAAN;IAAiBE,OAAO,EAAPA;EAAjB,CAAD,EAA4BC,OAA5B,CAA1B;EAEA,OAAOQ,mBAAmB,CAACH,MAAD,EAASP,IAAT,EAAeE,OAAf,EAAwBC,OAAxB,CAA1B;AACD;AAGD,SAASO,mBAATA,CAA6BH,MAA7B,EAAqCP,IAArC,EAA2CE,OAA3C,EAAoDC,OAApD,EAA6D;EAC3DH,IAAI,GAAGL,kCAAkC,CAACK,IAAD,EAAOO,MAAP,CAAzC;EAEA,IAAIA,MAAM,CAACI,aAAP,IAAwB,OAAOX,IAAP,KAAgB,QAA5C,EAAsD;IACpD,OAAOO,MAAM,CAACI,aAAP,CAAqBX,IAArB,EAA2BE,OAA3B,EAAoCC,OAApC,EAA6CI,MAA7C,CAAP;EACD;EAED,IAAIA,MAAM,CAACR,SAAX,EAAsB;IACpB,OAAOQ,MAAM,CAACR,SAAP,CAAiBC,IAAjB,EAAuBE,OAAvB,EAAgCC,OAAhC,EAAyCI,MAAzC,CAAP;EACD;EAGD,MAAM,IAAIK,KAAJ,IAAAC,MAAA,CAEFN,MAAM,CAACO,IAFL,8EAAAD,MAAA,CAGuEV,OAAO,CAACM,GAAR,IAAe,EAHtF,EAAN;AAKD"},"metadata":{},"sourceType":"module","externalDependencies":[]}