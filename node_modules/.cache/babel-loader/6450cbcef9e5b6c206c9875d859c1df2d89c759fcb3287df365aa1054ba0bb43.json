{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { getBinaryImageMetadata } from '@loaders.gl/images';\nimport { padToNBytes, copyToArray } from '@loaders.gl/loader-utils';\nimport { assert } from '../utils/assert';\nimport { getAccessorArrayTypeAndLength, getAccessorTypeFromSize, getComponentTypeFromArray } from '../gltf-utils/gltf-utils';\nvar DEFAULT_GLTF_JSON = {\n  asset: {\n    version: '2.0',\n    generator: 'loaders.gl'\n  },\n  buffers: []\n};\nvar GLTFScenegraph = /*#__PURE__*/function () {\n  function GLTFScenegraph(gltf) {\n    _classCallCheck(this, GLTFScenegraph);\n    _defineProperty(this, \"gltf\", void 0);\n    _defineProperty(this, \"sourceBuffers\", void 0);\n    _defineProperty(this, \"byteLength\", void 0);\n    this.gltf = gltf || {\n      json: _objectSpread({}, DEFAULT_GLTF_JSON),\n      buffers: []\n    };\n    this.sourceBuffers = [];\n    this.byteLength = 0;\n    if (this.gltf.buffers && this.gltf.buffers[0]) {\n      this.byteLength = this.gltf.buffers[0].byteLength;\n      this.sourceBuffers = [this.gltf.buffers[0]];\n    }\n  }\n  _createClass(GLTFScenegraph, [{\n    key: \"json\",\n    get: function get() {\n      return this.gltf.json;\n    }\n  }, {\n    key: \"getApplicationData\",\n    value: function getApplicationData(key) {\n      var data = this.json[key];\n      return data;\n    }\n  }, {\n    key: \"getExtraData\",\n    value: function getExtraData(key) {\n      var extras = this.json.extras || {};\n      return extras[key];\n    }\n  }, {\n    key: \"getExtension\",\n    value: function getExtension(extensionName) {\n      var isExtension = this.getUsedExtensions().find(function (name) {\n        return name === extensionName;\n      });\n      var extensions = this.json.extensions || {};\n      return isExtension ? extensions[extensionName] || true : null;\n    }\n  }, {\n    key: \"getRequiredExtension\",\n    value: function getRequiredExtension(extensionName) {\n      var isRequired = this.getRequiredExtensions().find(function (name) {\n        return name === extensionName;\n      });\n      return isRequired ? this.getExtension(extensionName) : null;\n    }\n  }, {\n    key: \"getRequiredExtensions\",\n    value: function getRequiredExtensions() {\n      return this.json.extensionsRequired || [];\n    }\n  }, {\n    key: \"getUsedExtensions\",\n    value: function getUsedExtensions() {\n      return this.json.extensionsUsed || [];\n    }\n  }, {\n    key: \"getRemovedExtensions\",\n    value: function getRemovedExtensions() {\n      return this.json.extensionsRemoved || [];\n    }\n  }, {\n    key: \"getObjectExtension\",\n    value: function getObjectExtension(object, extensionName) {\n      var extensions = object.extensions || {};\n      return extensions[extensionName];\n    }\n  }, {\n    key: \"getScene\",\n    value: function getScene(index) {\n      return this.getObject('scenes', index);\n    }\n  }, {\n    key: \"getNode\",\n    value: function getNode(index) {\n      return this.getObject('nodes', index);\n    }\n  }, {\n    key: \"getSkin\",\n    value: function getSkin(index) {\n      return this.getObject('skins', index);\n    }\n  }, {\n    key: \"getMesh\",\n    value: function getMesh(index) {\n      return this.getObject('meshes', index);\n    }\n  }, {\n    key: \"getMaterial\",\n    value: function getMaterial(index) {\n      return this.getObject('materials', index);\n    }\n  }, {\n    key: \"getAccessor\",\n    value: function getAccessor(index) {\n      return this.getObject('accessors', index);\n    }\n  }, {\n    key: \"getTexture\",\n    value: function getTexture(index) {\n      return this.getObject('textures', index);\n    }\n  }, {\n    key: \"getSampler\",\n    value: function getSampler(index) {\n      return this.getObject('samplers', index);\n    }\n  }, {\n    key: \"getImage\",\n    value: function getImage(index) {\n      return this.getObject('images', index);\n    }\n  }, {\n    key: \"getBufferView\",\n    value: function getBufferView(index) {\n      return this.getObject('bufferViews', index);\n    }\n  }, {\n    key: \"getBuffer\",\n    value: function getBuffer(index) {\n      return this.getObject('buffers', index);\n    }\n  }, {\n    key: \"getObject\",\n    value: function getObject(array, index) {\n      if (typeof index === 'object') {\n        return index;\n      }\n      var object = this.json[array] && this.json[array][index];\n      if (!object) {\n        throw new Error(\"glTF file error: Could not find \".concat(array, \"[\").concat(index, \"]\"));\n      }\n      return object;\n    }\n  }, {\n    key: \"getTypedArrayForBufferView\",\n    value: function getTypedArrayForBufferView(bufferView) {\n      bufferView = this.getBufferView(bufferView);\n      var bufferIndex = bufferView.buffer;\n      var binChunk = this.gltf.buffers[bufferIndex];\n      assert(binChunk);\n      var byteOffset = (bufferView.byteOffset || 0) + binChunk.byteOffset;\n      return new Uint8Array(binChunk.arrayBuffer, byteOffset, bufferView.byteLength);\n    }\n  }, {\n    key: \"getTypedArrayForAccessor\",\n    value: function getTypedArrayForAccessor(accessor) {\n      accessor = this.getAccessor(accessor);\n      var bufferView = this.getBufferView(accessor.bufferView);\n      var buffer = this.getBuffer(bufferView.buffer);\n      var arrayBuffer = buffer.data;\n      var _getAccessorArrayType = getAccessorArrayTypeAndLength(accessor, bufferView),\n        ArrayType = _getAccessorArrayType.ArrayType,\n        length = _getAccessorArrayType.length;\n      var byteOffset = bufferView.byteOffset + accessor.byteOffset;\n      return new ArrayType(arrayBuffer, byteOffset, length);\n    }\n  }, {\n    key: \"getTypedArrayForImageData\",\n    value: function getTypedArrayForImageData(image) {\n      image = this.getAccessor(image);\n      var bufferView = this.getBufferView(image.bufferView);\n      var buffer = this.getBuffer(bufferView.buffer);\n      var arrayBuffer = buffer.data;\n      var byteOffset = bufferView.byteOffset || 0;\n      return new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n    }\n  }, {\n    key: \"addApplicationData\",\n    value: function addApplicationData(key, data) {\n      this.json[key] = data;\n      return this;\n    }\n  }, {\n    key: \"addExtraData\",\n    value: function addExtraData(key, data) {\n      this.json.extras = this.json.extras || {};\n      this.json.extras[key] = data;\n      return this;\n    }\n  }, {\n    key: \"addObjectExtension\",\n    value: function addObjectExtension(object, extensionName, data) {\n      object.extensions = object.extensions || {};\n      object.extensions[extensionName] = data;\n      this.registerUsedExtension(extensionName);\n      return this;\n    }\n  }, {\n    key: \"setObjectExtension\",\n    value: function setObjectExtension(object, extensionName, data) {\n      var extensions = object.extensions || {};\n      extensions[extensionName] = data;\n    }\n  }, {\n    key: \"removeObjectExtension\",\n    value: function removeObjectExtension(object, extensionName) {\n      var extensions = object.extensions || {};\n      var extension = extensions[extensionName];\n      delete extensions[extensionName];\n      return extension;\n    }\n  }, {\n    key: \"addExtension\",\n    value: function addExtension(extensionName) {\n      var extensionData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      assert(extensionData);\n      this.json.extensions = this.json.extensions || {};\n      this.json.extensions[extensionName] = extensionData;\n      this.registerUsedExtension(extensionName);\n      return extensionData;\n    }\n  }, {\n    key: \"addRequiredExtension\",\n    value: function addRequiredExtension(extensionName) {\n      var extensionData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      assert(extensionData);\n      this.addExtension(extensionName, extensionData);\n      this.registerRequiredExtension(extensionName);\n      return extensionData;\n    }\n  }, {\n    key: \"registerUsedExtension\",\n    value: function registerUsedExtension(extensionName) {\n      this.json.extensionsUsed = this.json.extensionsUsed || [];\n      if (!this.json.extensionsUsed.find(function (ext) {\n        return ext === extensionName;\n      })) {\n        this.json.extensionsUsed.push(extensionName);\n      }\n    }\n  }, {\n    key: \"registerRequiredExtension\",\n    value: function registerRequiredExtension(extensionName) {\n      this.registerUsedExtension(extensionName);\n      this.json.extensionsRequired = this.json.extensionsRequired || [];\n      if (!this.json.extensionsRequired.find(function (ext) {\n        return ext === extensionName;\n      })) {\n        this.json.extensionsRequired.push(extensionName);\n      }\n    }\n  }, {\n    key: \"removeExtension\",\n    value: function removeExtension(extensionName) {\n      if (!this.getExtension(extensionName)) {\n        return;\n      }\n      if (this.json.extensionsRequired) {\n        this._removeStringFromArray(this.json.extensionsRequired, extensionName);\n      }\n      if (this.json.extensionsUsed) {\n        this._removeStringFromArray(this.json.extensionsUsed, extensionName);\n      }\n      if (this.json.extensions) {\n        delete this.json.extensions[extensionName];\n      }\n      if (!Array.isArray(this.json.extensionsRemoved)) {\n        this.json.extensionsRemoved = [];\n      }\n      var extensionsRemoved = this.json.extensionsRemoved;\n      if (!extensionsRemoved.includes(extensionName)) {\n        extensionsRemoved.push(extensionName);\n      }\n    }\n  }, {\n    key: \"setDefaultScene\",\n    value: function setDefaultScene(sceneIndex) {\n      this.json.scene = sceneIndex;\n    }\n  }, {\n    key: \"addScene\",\n    value: function addScene(scene) {\n      var nodeIndices = scene.nodeIndices;\n      this.json.scenes = this.json.scenes || [];\n      this.json.scenes.push({\n        nodes: nodeIndices\n      });\n      return this.json.scenes.length - 1;\n    }\n  }, {\n    key: \"addNode\",\n    value: function addNode(node) {\n      var meshIndex = node.meshIndex,\n        matrix = node.matrix;\n      this.json.nodes = this.json.nodes || [];\n      var nodeData = {\n        mesh: meshIndex\n      };\n      if (matrix) {\n        nodeData.matrix = matrix;\n      }\n      this.json.nodes.push(nodeData);\n      return this.json.nodes.length - 1;\n    }\n  }, {\n    key: \"addMesh\",\n    value: function addMesh(mesh) {\n      var attributes = mesh.attributes,\n        indices = mesh.indices,\n        material = mesh.material,\n        _mesh$mode = mesh.mode,\n        mode = _mesh$mode === void 0 ? 4 : _mesh$mode;\n      var accessors = this._addAttributes(attributes);\n      var glTFMesh = {\n        primitives: [{\n          attributes: accessors,\n          mode: mode\n        }]\n      };\n      if (indices) {\n        var indicesAccessor = this._addIndices(indices);\n        glTFMesh.primitives[0].indices = indicesAccessor;\n      }\n      if (Number.isFinite(material)) {\n        glTFMesh.primitives[0].material = material;\n      }\n      this.json.meshes = this.json.meshes || [];\n      this.json.meshes.push(glTFMesh);\n      return this.json.meshes.length - 1;\n    }\n  }, {\n    key: \"addPointCloud\",\n    value: function addPointCloud(attributes) {\n      var accessorIndices = this._addAttributes(attributes);\n      var glTFMesh = {\n        primitives: [{\n          attributes: accessorIndices,\n          mode: 0\n        }]\n      };\n      this.json.meshes = this.json.meshes || [];\n      this.json.meshes.push(glTFMesh);\n      return this.json.meshes.length - 1;\n    }\n  }, {\n    key: \"addImage\",\n    value: function addImage(imageData, mimeTypeOpt) {\n      var metadata = getBinaryImageMetadata(imageData);\n      var mimeType = mimeTypeOpt || (metadata === null || metadata === void 0 ? void 0 : metadata.mimeType);\n      var bufferViewIndex = this.addBufferView(imageData);\n      var glTFImage = {\n        bufferView: bufferViewIndex,\n        mimeType: mimeType\n      };\n      this.json.images = this.json.images || [];\n      this.json.images.push(glTFImage);\n      return this.json.images.length - 1;\n    }\n  }, {\n    key: \"addBufferView\",\n    value: function addBufferView(buffer) {\n      var byteLength = buffer.byteLength;\n      assert(Number.isFinite(byteLength));\n      this.sourceBuffers = this.sourceBuffers || [];\n      this.sourceBuffers.push(buffer);\n      var glTFBufferView = {\n        buffer: 0,\n        byteOffset: this.byteLength,\n        byteLength: byteLength\n      };\n      this.byteLength += padToNBytes(byteLength, 4);\n      this.json.bufferViews = this.json.bufferViews || [];\n      this.json.bufferViews.push(glTFBufferView);\n      return this.json.bufferViews.length - 1;\n    }\n  }, {\n    key: \"addAccessor\",\n    value: function addAccessor(bufferViewIndex, accessor) {\n      var glTFAccessor = {\n        bufferView: bufferViewIndex,\n        type: getAccessorTypeFromSize(accessor.size),\n        componentType: accessor.componentType,\n        count: accessor.count,\n        max: accessor.max,\n        min: accessor.min\n      };\n      this.json.accessors = this.json.accessors || [];\n      this.json.accessors.push(glTFAccessor);\n      return this.json.accessors.length - 1;\n    }\n  }, {\n    key: \"addBinaryBuffer\",\n    value: function addBinaryBuffer(sourceBuffer) {\n      var accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        size: 3\n      };\n      var bufferViewIndex = this.addBufferView(sourceBuffer);\n      var minMax = {\n        min: accessor.min,\n        max: accessor.max\n      };\n      if (!minMax.min || !minMax.max) {\n        minMax = this._getAccessorMinMax(sourceBuffer, accessor.size);\n      }\n      var accessorDefaults = {\n        size: accessor.size,\n        componentType: getComponentTypeFromArray(sourceBuffer),\n        count: Math.round(sourceBuffer.length / accessor.size),\n        min: minMax.min,\n        max: minMax.max\n      };\n      return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));\n    }\n  }, {\n    key: \"addTexture\",\n    value: function addTexture(texture) {\n      var imageIndex = texture.imageIndex;\n      var glTFTexture = {\n        source: imageIndex\n      };\n      this.json.textures = this.json.textures || [];\n      this.json.textures.push(glTFTexture);\n      return this.json.textures.length - 1;\n    }\n  }, {\n    key: \"addMaterial\",\n    value: function addMaterial(pbrMaterialInfo) {\n      this.json.materials = this.json.materials || [];\n      this.json.materials.push(pbrMaterialInfo);\n      return this.json.materials.length - 1;\n    }\n  }, {\n    key: \"createBinaryChunk\",\n    value: function createBinaryChunk() {\n      var _this$json, _this$json$buffers;\n      this.gltf.buffers = [];\n      var totalByteLength = this.byteLength;\n      var arrayBuffer = new ArrayBuffer(totalByteLength);\n      var targetArray = new Uint8Array(arrayBuffer);\n      var dstByteOffset = 0;\n      var _iterator = _createForOfIteratorHelper(this.sourceBuffers || []),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var sourceBuffer = _step.value;\n          dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if ((_this$json = this.json) !== null && _this$json !== void 0 && (_this$json$buffers = _this$json.buffers) !== null && _this$json$buffers !== void 0 && _this$json$buffers[0]) {\n        this.json.buffers[0].byteLength = totalByteLength;\n      } else {\n        this.json.buffers = [{\n          byteLength: totalByteLength\n        }];\n      }\n      this.gltf.binary = arrayBuffer;\n      this.sourceBuffers = [arrayBuffer];\n    }\n  }, {\n    key: \"_removeStringFromArray\",\n    value: function _removeStringFromArray(array, string) {\n      var found = true;\n      while (found) {\n        var index = array.indexOf(string);\n        if (index > -1) {\n          array.splice(index, 1);\n        } else {\n          found = false;\n        }\n      }\n    }\n  }, {\n    key: \"_addAttributes\",\n    value: function _addAttributes() {\n      var attributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var result = {};\n      for (var attributeKey in attributes) {\n        var attributeData = attributes[attributeKey];\n        var attrName = this._getGltfAttributeName(attributeKey);\n        var accessor = this.addBinaryBuffer(attributeData.value, attributeData);\n        result[attrName] = accessor;\n      }\n      return result;\n    }\n  }, {\n    key: \"_addIndices\",\n    value: function _addIndices(indices) {\n      return this.addBinaryBuffer(indices, {\n        size: 1\n      });\n    }\n  }, {\n    key: \"_getGltfAttributeName\",\n    value: function _getGltfAttributeName(attributeName) {\n      switch (attributeName.toLowerCase()) {\n        case 'position':\n        case 'positions':\n        case 'vertices':\n          return 'POSITION';\n        case 'normal':\n        case 'normals':\n          return 'NORMAL';\n        case 'color':\n        case 'colors':\n          return 'COLOR_0';\n        case 'texcoord':\n        case 'texcoords':\n          return 'TEXCOORD_0';\n        default:\n          return attributeName;\n      }\n    }\n  }, {\n    key: \"_getAccessorMinMax\",\n    value: function _getAccessorMinMax(buffer, size) {\n      var result = {\n        min: null,\n        max: null\n      };\n      if (buffer.length < size) {\n        return result;\n      }\n      result.min = [];\n      result.max = [];\n      var initValues = buffer.subarray(0, size);\n      var _iterator2 = _createForOfIteratorHelper(initValues),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var value = _step2.value;\n          result.min.push(value);\n          result.max.push(value);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      for (var index = size; index < buffer.length; index += size) {\n        for (var componentIndex = 0; componentIndex < size; componentIndex++) {\n          result.min[0 + componentIndex] = Math.min(result.min[0 + componentIndex], buffer[index + componentIndex]);\n          result.max[0 + componentIndex] = Math.max(result.max[0 + componentIndex], buffer[index + componentIndex]);\n        }\n      }\n      return result;\n    }\n  }]);\n  return GLTFScenegraph;\n}();\nexport { GLTFScenegraph as default };","map":{"version":3,"names":["getBinaryImageMetadata","padToNBytes","copyToArray","assert","getAccessorArrayTypeAndLength","getAccessorTypeFromSize","getComponentTypeFromArray","DEFAULT_GLTF_JSON","asset","version","generator","buffers","GLTFScenegraph","gltf","_classCallCheck","_defineProperty","json","_objectSpread","sourceBuffers","byteLength","_createClass","key","get","value","getApplicationData","data","getExtraData","extras","getExtension","extensionName","isExtension","getUsedExtensions","find","name","extensions","getRequiredExtension","isRequired","getRequiredExtensions","extensionsRequired","extensionsUsed","getRemovedExtensions","extensionsRemoved","getObjectExtension","object","getScene","index","getObject","getNode","getSkin","getMesh","getMaterial","getAccessor","getTexture","getSampler","getImage","getBufferView","getBuffer","array","Error","concat","getTypedArrayForBufferView","bufferView","bufferIndex","buffer","binChunk","byteOffset","Uint8Array","arrayBuffer","getTypedArrayForAccessor","accessor","_getAccessorArrayType","ArrayType","length","getTypedArrayForImageData","image","addApplicationData","addExtraData","addObjectExtension","registerUsedExtension","setObjectExtension","removeObjectExtension","extension","addExtension","extensionData","arguments","undefined","addRequiredExtension","registerRequiredExtension","ext","push","removeExtension","_removeStringFromArray","Array","isArray","includes","setDefaultScene","sceneIndex","scene","addScene","nodeIndices","scenes","nodes","addNode","node","meshIndex","matrix","nodeData","mesh","addMesh","attributes","indices","material","_mesh$mode","mode","accessors","_addAttributes","glTFMesh","primitives","indicesAccessor","_addIndices","Number","isFinite","meshes","addPointCloud","accessorIndices","addImage","imageData","mimeTypeOpt","metadata","mimeType","bufferViewIndex","addBufferView","glTFImage","images","glTFBufferView","bufferViews","addAccessor","glTFAccessor","type","size","componentType","count","max","min","addBinaryBuffer","sourceBuffer","minMax","_getAccessorMinMax","accessorDefaults","Math","round","Object","assign","addTexture","texture","imageIndex","glTFTexture","source","textures","addMaterial","pbrMaterialInfo","materials","createBinaryChunk","_this$json","_this$json$buffers","totalByteLength","ArrayBuffer","targetArray","dstByteOffset","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","e","f","binary","string","found","indexOf","splice","result","attributeKey","attributeData","attrName","_getGltfAttributeName","attributeName","toLowerCase","initValues","subarray","_iterator2","_step2","componentIndex","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/gltf/src/lib/api/gltf-scenegraph.ts"],"sourcesContent":["import type {\n  GLTF,\n  GLTFScene,\n  GLTFNode,\n  GLTFMesh,\n  GLTFSkin,\n  GLTFMaterial,\n  GLTFAccessor,\n  GLTFSampler,\n  GLTFTexture,\n  GLTFImage,\n  GLTFBuffer,\n  GLTFBufferView,\n  GLTFWithBuffers\n} from '../types/gltf-types';\n\nimport {getBinaryImageMetadata} from '@loaders.gl/images';\nimport {padToNBytes, copyToArray} from '@loaders.gl/loader-utils';\nimport {assert} from '../utils/assert';\nimport {\n  getAccessorArrayTypeAndLength,\n  getAccessorTypeFromSize,\n  getComponentTypeFromArray\n} from '../gltf-utils/gltf-utils';\n\nconst DEFAULT_GLTF_JSON: GLTF = {\n  asset: {\n    version: '2.0',\n    generator: 'loaders.gl'\n  },\n  buffers: []\n};\n\ntype Extension = {[key: string]: any};\n/**\n * Class for structured access to GLTF data\n */\nexport default class GLTFScenegraph {\n  // internal\n  gltf: GLTFWithBuffers;\n  sourceBuffers: any[];\n  byteLength: number;\n\n  constructor(gltf?: {json: GLTF; buffers?: any[]}) {\n    // @ts-ignore\n    this.gltf = gltf || {\n      json: {...DEFAULT_GLTF_JSON},\n      buffers: []\n    };\n    this.sourceBuffers = [];\n    this.byteLength = 0;\n\n    // Initialize buffers\n    if (this.gltf.buffers && this.gltf.buffers[0]) {\n      this.byteLength = this.gltf.buffers[0].byteLength;\n      this.sourceBuffers = [this.gltf.buffers[0]];\n    }\n  }\n\n  // Accessors\n\n  get json(): GLTF {\n    return this.gltf.json;\n  }\n\n  getApplicationData(key: string): unknown {\n    // TODO - Data is already unpacked by GLBParser\n    const data = this.json[key];\n    return data;\n  }\n\n  getExtraData(key: string): {[key: string]: unknown} {\n    // TODO - Data is already unpacked by GLBParser\n    const extras = this.json.extras || {};\n    return extras[key];\n  }\n\n  getExtension<T = Extension>(extensionName: string): T | null {\n    const isExtension = this.getUsedExtensions().find((name) => name === extensionName);\n    const extensions = this.json.extensions || {};\n    return isExtension ? extensions[extensionName] || true : null;\n  }\n\n  getRequiredExtension<T = Extension>(extensionName: string): T | null {\n    const isRequired = this.getRequiredExtensions().find((name) => name === extensionName);\n    return isRequired ? this.getExtension(extensionName) : null;\n  }\n\n  getRequiredExtensions(): string[] {\n    return this.json.extensionsRequired || [];\n  }\n\n  getUsedExtensions(): string[] {\n    return this.json.extensionsUsed || [];\n  }\n\n  getRemovedExtensions(): string[] {\n    return (this.json.extensionsRemoved || []) as string[];\n  }\n\n  getObjectExtension<T = Extension>(object: {[key: string]: any}, extensionName: string): T | null {\n    const extensions = object.extensions || {};\n    return extensions[extensionName];\n  }\n\n  getScene(index: number): GLTFScene {\n    return this.getObject('scenes', index) as GLTFScene;\n  }\n\n  getNode(index: number): GLTFNode {\n    return this.getObject('nodes', index) as GLTFNode;\n  }\n\n  getSkin(index: number): GLTFSkin {\n    return this.getObject('skins', index) as GLTFSkin;\n  }\n\n  getMesh(index: number): GLTFMesh {\n    return this.getObject('meshes', index) as GLTFMesh;\n  }\n\n  getMaterial(index: number): GLTFMaterial {\n    return this.getObject('materials', index) as GLTFMaterial;\n  }\n\n  getAccessor(index: number): GLTFAccessor {\n    return this.getObject('accessors', index) as GLTFAccessor;\n  }\n\n  // getCamera(index: number): object | null {\n  //   return null; // TODO: fix thi: object  as null;\n  // }\n\n  getTexture(index: number): GLTFTexture {\n    return this.getObject('textures', index) as GLTFTexture;\n  }\n\n  getSampler(index: number): GLTFSampler {\n    return this.getObject('samplers', index) as GLTFSampler;\n  }\n\n  getImage(index: number): GLTFImage {\n    return this.getObject('images', index) as GLTFImage;\n  }\n\n  getBufferView(index: number | object): GLTFBufferView {\n    return this.getObject('bufferViews', index) as GLTFBufferView;\n  }\n\n  getBuffer(index: number): GLTFBuffer {\n    return this.getObject('buffers', index) as GLTFBuffer;\n  }\n\n  getObject(array: string, index: number | object): object {\n    // check if already resolved\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = this.json[array] && (this.json[array] as {}[])[index];\n    if (!object) {\n      throw new Error(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  /**\n   * Accepts buffer view index or buffer view object\n   * @returns a `Uint8Array`\n   */\n  getTypedArrayForBufferView(bufferView: number | object): Uint8Array {\n    bufferView = this.getBufferView(bufferView);\n    // @ts-ignore\n    const bufferIndex = bufferView.buffer;\n\n    // Get hold of the arrayBuffer\n    // const buffer = this.getBuffer(bufferIndex);\n    const binChunk = this.gltf.buffers[bufferIndex];\n    assert(binChunk);\n\n    // @ts-ignore\n    const byteOffset = (bufferView.byteOffset || 0) + binChunk.byteOffset;\n    // @ts-ignore\n    return new Uint8Array(binChunk.arrayBuffer, byteOffset, bufferView.byteLength);\n  }\n\n  /** Accepts accessor index or accessor object\n   * @returns a typed array with type that matches the types\n   */\n  getTypedArrayForAccessor(accessor: number | object): any {\n    // @ts-ignore\n    accessor = this.getAccessor(accessor);\n    // @ts-ignore\n    const bufferView = this.getBufferView(accessor.bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    // @ts-ignore\n    const arrayBuffer = buffer.data;\n\n    // Create a new typed array as a view into the combined buffer\n    const {ArrayType, length} = getAccessorArrayTypeAndLength(accessor, bufferView);\n    // @ts-ignore\n    const byteOffset = bufferView.byteOffset + accessor.byteOffset;\n    return new ArrayType(arrayBuffer, byteOffset, length);\n  }\n\n  /** accepts accessor index or accessor object\n   * returns a `Uint8Array`\n   */\n  getTypedArrayForImageData(image: number | object): Uint8Array {\n    // @ts-ignore\n    image = this.getAccessor(image);\n    // @ts-ignore\n    const bufferView = this.getBufferView(image.bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    // @ts-ignore\n    const arrayBuffer = buffer.data;\n\n    const byteOffset = bufferView.byteOffset || 0;\n    return new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n  }\n\n  // MODIFERS\n\n  /**\n   * Add an extra application-defined key to the top-level data structure\n   */\n  addApplicationData(key: string, data: object): GLTFScenegraph {\n    this.json[key] = data;\n    return this;\n  }\n\n  /**\n   * `extras` - Standard GLTF field for storing application specific data\n   */\n  addExtraData(key: string, data: object): GLTFScenegraph {\n    this.json.extras = this.json.extras || {};\n    (this.json.extras as Record<string, unknown>)[key] = data;\n    return this;\n  }\n\n  addObjectExtension(object: object, extensionName: string, data: object): GLTFScenegraph {\n    // @ts-ignore\n    object.extensions = object.extensions || {};\n    // TODO - clobber or merge?\n    // @ts-ignore\n    object.extensions[extensionName] = data;\n    this.registerUsedExtension(extensionName);\n    return this;\n  }\n\n  setObjectExtension(object: object, extensionName: string, data: object): void {\n    // @ts-ignore\n    const extensions = object.extensions || {};\n    extensions[extensionName] = data;\n    // TODO - add to usedExtensions...\n  }\n\n  removeObjectExtension(object: object, extensionName: string): object {\n    // @ts-ignore\n    const extensions = object.extensions || {};\n    const extension = extensions[extensionName];\n    delete extensions[extensionName];\n    return extension;\n  }\n\n  /**\n   * Add to standard GLTF top level extension object, mark as used\n   */\n  addExtension(extensionName: string, extensionData: object = {}): object {\n    assert(extensionData);\n    this.json.extensions = this.json.extensions || {};\n    (this.json.extensions as Record<string, unknown>)[extensionName] = extensionData;\n    this.registerUsedExtension(extensionName);\n    return extensionData;\n  }\n\n  /**\n   * Standard GLTF top level extension object, mark as used and required\n   */\n  addRequiredExtension(extensionName, extensionData: object = {}): object {\n    assert(extensionData);\n    this.addExtension(extensionName, extensionData);\n    this.registerRequiredExtension(extensionName);\n    return extensionData;\n  }\n\n  /**\n   * Add extensionName to list of used extensions\n   */\n  registerUsedExtension(extensionName: string): void {\n    this.json.extensionsUsed = this.json.extensionsUsed || [];\n    if (!this.json.extensionsUsed.find((ext) => ext === extensionName)) {\n      this.json.extensionsUsed.push(extensionName);\n    }\n  }\n\n  /**\n   * Add extensionName to list of required extensions\n   */\n  registerRequiredExtension(extensionName: string): void {\n    this.registerUsedExtension(extensionName);\n    this.json.extensionsRequired = this.json.extensionsRequired || [];\n    if (!this.json.extensionsRequired.find((ext) => ext === extensionName)) {\n      this.json.extensionsRequired.push(extensionName);\n    }\n  }\n\n  /**\n   * Removes an extension from the top-level list\n   */\n  removeExtension(extensionName: string): void {\n    if (!this.getExtension(extensionName)) {\n      return;\n    }\n    if (this.json.extensionsRequired) {\n      this._removeStringFromArray(this.json.extensionsRequired, extensionName);\n    }\n    if (this.json.extensionsUsed) {\n      this._removeStringFromArray(this.json.extensionsUsed, extensionName);\n    }\n    if (this.json.extensions) {\n      delete this.json.extensions[extensionName];\n    }\n    if (!Array.isArray(this.json.extensionsRemoved)) {\n      this.json.extensionsRemoved = [];\n    }\n    const extensionsRemoved = this.json.extensionsRemoved as string[];\n    if (!extensionsRemoved.includes(extensionName)) {\n      extensionsRemoved.push(extensionName);\n    }\n  }\n\n  /**\n   *  Set default scene which is to be displayed at load time\n   */\n  setDefaultScene(sceneIndex: number): void {\n    this.json.scene = sceneIndex;\n  }\n\n  /**\n   * @todo: add more properties for scene initialization:\n   *   name`, `extensions`, `extras`\n   *   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#reference-scene\n   */\n  addScene(scene: {nodeIndices: number[]}): number {\n    const {nodeIndices} = scene;\n    this.json.scenes = this.json.scenes || [];\n    this.json.scenes.push({nodes: nodeIndices});\n    return this.json.scenes.length - 1;\n  }\n\n  /**\n   * @todo: add more properties for node initialization:\n   *   `name`, `extensions`, `extras`, `camera`, `children`, `skin`, `rotation`, `scale`, `translation`, `weights`\n   *   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#node\n   */\n  addNode(node: {meshIndex: number; matrix?: number[]}): number {\n    const {meshIndex, matrix} = node;\n    this.json.nodes = this.json.nodes || [];\n    const nodeData = {mesh: meshIndex};\n    if (matrix) {\n      // @ts-ignore\n      nodeData.matrix = matrix;\n    }\n    this.json.nodes.push(nodeData);\n    return this.json.nodes.length - 1;\n  }\n\n  /** Adds a mesh to the json part */\n  addMesh(mesh: {attributes: object; indices?: object; material?: number; mode?: number}): number {\n    const {attributes, indices, material, mode = 4} = mesh;\n    const accessors = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessors,\n          mode\n        }\n      ]\n    };\n\n    if (indices) {\n      const indicesAccessor = this._addIndices(indices);\n      // @ts-ignore\n      glTFMesh.primitives[0].indices = indicesAccessor;\n    }\n\n    if (Number.isFinite(material)) {\n      // @ts-ignore\n      glTFMesh.primitives[0].material = material;\n    }\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  addPointCloud(attributes: object): number {\n    // @ts-ignore\n    const accessorIndices = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessorIndices,\n          mode: 0 // GL.POINTS\n        }\n      ]\n    };\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  /**\n   * Adds a binary image. Builds glTF \"JSON metadata\" and saves buffer reference\n   * Buffer will be copied into BIN chunk during \"pack\"\n   * Currently encodes as glTF image\n   * @param imageData\n   * @param mimeType\n   */\n  addImage(imageData: any, mimeTypeOpt?: string): number {\n    // If image is referencing a bufferView instead of URI, mimeType must be defined:\n    //   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#images\n    //   \"a reference to a bufferView; in that case mimeType must be defined.\"\n    const metadata = getBinaryImageMetadata(imageData);\n    const mimeType = mimeTypeOpt || metadata?.mimeType;\n\n    const bufferViewIndex = this.addBufferView(imageData);\n\n    const glTFImage = {\n      bufferView: bufferViewIndex,\n      mimeType\n    };\n\n    this.json.images = this.json.images || [];\n    this.json.images.push(glTFImage);\n    return this.json.images.length - 1;\n  }\n\n  /**\n   * Add one untyped source buffer, create a matching glTF `bufferView`, and return its index\n   * @param buffer\n   */\n  addBufferView(buffer: any): number {\n    const byteLength = buffer.byteLength;\n    assert(Number.isFinite(byteLength));\n\n    // Add this buffer to the list of buffers to be written to the body.\n    this.sourceBuffers = this.sourceBuffers || [];\n    this.sourceBuffers.push(buffer);\n\n    const glTFBufferView = {\n      buffer: 0,\n      // Write offset from the start of the binary body\n      byteOffset: this.byteLength,\n      byteLength\n    };\n\n    // We've now added the contents to the body, so update the total length\n    // Every sub-chunk needs to be 4-byte align ed\n    this.byteLength += padToNBytes(byteLength, 4);\n\n    // Add a bufferView indicating start and length of this binary sub-chunk\n    this.json.bufferViews = this.json.bufferViews || [];\n    this.json.bufferViews.push(glTFBufferView);\n    return this.json.bufferViews.length - 1;\n  }\n\n  /**\n   * Adds an accessor to a bufferView\n   * @param bufferViewIndex\n   * @param accessor\n   */\n  addAccessor(bufferViewIndex: number, accessor: object): number {\n    const glTFAccessor = {\n      bufferView: bufferViewIndex,\n      // @ts-ignore\n      type: getAccessorTypeFromSize(accessor.size),\n      // @ts-ignore\n      componentType: accessor.componentType,\n      // @ts-ignore\n      count: accessor.count,\n      // @ts-ignore\n      max: accessor.max,\n      // @ts-ignore\n      min: accessor.min\n    };\n\n    this.json.accessors = this.json.accessors || [];\n    this.json.accessors.push(glTFAccessor);\n    return this.json.accessors.length - 1;\n  }\n\n  /**\n   * Add a binary buffer. Builds glTF \"JSON metadata\" and saves buffer reference\n   * Buffer will be copied into BIN chunk during \"pack\"\n   * Currently encodes buffers as glTF accessors, but this could be optimized\n   * @param sourceBuffer\n   * @param accessor\n   */\n  addBinaryBuffer(sourceBuffer: any, accessor: object = {size: 3}): number {\n    const bufferViewIndex = this.addBufferView(sourceBuffer);\n    // @ts-ignore\n    let minMax = {min: accessor.min, max: accessor.max};\n    if (!minMax.min || !minMax.max) {\n      // @ts-ignore\n      minMax = this._getAccessorMinMax(sourceBuffer, accessor.size);\n    }\n\n    const accessorDefaults = {\n      // @ts-ignore\n      size: accessor.size,\n      componentType: getComponentTypeFromArray(sourceBuffer),\n      // @ts-ignore\n      count: Math.round(sourceBuffer.length / accessor.size),\n      min: minMax.min,\n      max: minMax.max\n    };\n\n    return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));\n  }\n\n  /**\n   * Adds a texture to the json part\n   * @todo: add more properties for texture initialization\n   * `sampler`, `name`, `extensions`, `extras`\n   * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#texture\n   */\n  addTexture(texture: {imageIndex: number}): number {\n    const {imageIndex} = texture;\n    const glTFTexture = {\n      source: imageIndex\n    };\n\n    this.json.textures = this.json.textures || [];\n    this.json.textures.push(glTFTexture);\n    return this.json.textures.length - 1;\n  }\n\n  /** Adds a material to the json part */\n  addMaterial(pbrMaterialInfo: Object): number {\n    this.json.materials = this.json.materials || [];\n    this.json.materials.push(pbrMaterialInfo);\n    return this.json.materials.length - 1;\n  }\n\n  /** Pack the binary chunk */\n  createBinaryChunk(): void {\n    // Encoder expects this array undefined or empty\n    this.gltf.buffers = [];\n\n    // Allocate total array\n    const totalByteLength = this.byteLength;\n    const arrayBuffer = new ArrayBuffer(totalByteLength);\n    const targetArray = new Uint8Array(arrayBuffer);\n\n    // Copy each array into\n    let dstByteOffset = 0;\n    for (const sourceBuffer of this.sourceBuffers || []) {\n      dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);\n    }\n\n    // Update the glTF BIN CHUNK byte length\n    if (this.json?.buffers?.[0]) {\n      this.json.buffers[0].byteLength = totalByteLength;\n    } else {\n      this.json.buffers = [{byteLength: totalByteLength}];\n    }\n\n    // Save generated arrayBuffer\n    this.gltf.binary = arrayBuffer;\n\n    // Put arrayBuffer to sourceBuffers for possible additional writing data in the chunk\n    this.sourceBuffers = [arrayBuffer];\n  }\n\n  // PRIVATE\n\n  _removeStringFromArray(array, string) {\n    let found = true;\n    while (found) {\n      const index = array.indexOf(string);\n      if (index > -1) {\n        array.splice(index, 1);\n      } else {\n        found = false;\n      }\n    }\n  }\n\n  /**\n   * Add attributes to buffers and create `attributes` object which is part of `mesh`\n   */\n  _addAttributes(attributes = {}) {\n    const result = {};\n    for (const attributeKey in attributes) {\n      const attributeData = attributes[attributeKey];\n      const attrName = this._getGltfAttributeName(attributeKey);\n      const accessor = this.addBinaryBuffer(attributeData.value, attributeData);\n      result[attrName] = accessor;\n    }\n    return result;\n  }\n\n  /**\n   * Add indices to buffers\n   */\n  _addIndices(indices) {\n    return this.addBinaryBuffer(indices, {size: 1});\n  }\n\n  /**\n   * Deduce gltf specific attribue name from input attribute name\n   */\n  _getGltfAttributeName(attributeName) {\n    switch (attributeName.toLowerCase()) {\n      case 'position':\n      case 'positions':\n      case 'vertices':\n        return 'POSITION';\n      case 'normal':\n      case 'normals':\n        return 'NORMAL';\n      case 'color':\n      case 'colors':\n        return 'COLOR_0';\n      case 'texcoord':\n      case 'texcoords':\n        return 'TEXCOORD_0';\n      default:\n        return attributeName;\n    }\n  }\n\n  /**\n   * Calculate `min` and `max` arrays of accessor according to spec:\n   * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#reference-accessor\n   */\n  _getAccessorMinMax(buffer, size) {\n    const result = {min: null, max: null};\n    if (buffer.length < size) {\n      return result;\n    }\n    // @ts-ignore\n    result.min = [];\n    // @ts-ignore\n    result.max = [];\n    const initValues = buffer.subarray(0, size);\n    for (const value of initValues) {\n      // @ts-ignore\n      result.min.push(value);\n      // @ts-ignore\n      result.max.push(value);\n    }\n\n    for (let index = size; index < buffer.length; index += size) {\n      for (let componentIndex = 0; componentIndex < size; componentIndex++) {\n        // @ts-ignore\n        result.min[0 + componentIndex] = Math.min(\n          // @ts-ignore\n          result.min[0 + componentIndex],\n          buffer[index + componentIndex]\n        );\n        // @ts-ignore\n        result.max[0 + componentIndex] = Math.max(\n          // @ts-ignore\n          result.max[0 + componentIndex],\n          buffer[index + componentIndex]\n        );\n      }\n    }\n    return result;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}