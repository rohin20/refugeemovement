{"ast":null,"code":"'use strict';\n\nvar makeClient = require('./make_service');\nvar xtend = require('../vendor/xtend').extendMutable;\nvar getUser = require('./get_user');\nvar MapboxGeocoding = require('./services/geocoding');\nvar MapboxSurface = require('./services/surface');\nvar MapboxDirections = require('./services/directions');\nvar MapboxUploads = require('./services/uploads');\nvar MapboxMatching = require('./services/matching');\nvar MapboxDatasets = require('./services/datasets');\nvar MapboxMatrix = require('./services/matrix');\nvar MapboxTilestats = require('./services/tilestats');\nvar MapboxStyles = require('./services/styles');\nvar MapboxStatic = require('./services/static');\nvar MapboxTilesets = require('./services/tilesets');\nvar MapboxTokens = require('./services/tokens');\n\n/**\n * The JavaScript API to Mapbox services\n *\n * @class\n * @throws {Error} if accessToken is not provided\n * @param {string} accessToken a private or public access token\n * @param {Object} options additional options provided for configuration\n * @param {string} [options.endpoint=https://api.mapbox.com] location\n * of the Mapbox API pointed-to. This can be customized to point to a\n * Mapbox Atlas Server instance, or a different service, a mock,\n * or a staging endpoint. Usually you don't need to customize this.\n * @param {string} [options.account] account id to use for api\n * requests. If not is specified, the account defaults to the owner\n * of the provided accessToken.\n * @example\n * var client = new MapboxClient('ACCESSTOKEN');\n */\nvar MapboxClient = makeClient('MapboxClient');\n\n// Combine all client APIs into one API for when people require()\n// the main mapbox-sdk-js library.\nxtend(MapboxClient.prototype, MapboxGeocoding.prototype, MapboxSurface.prototype, MapboxDirections.prototype, MapboxMatrix.prototype, MapboxMatching.prototype, MapboxDatasets.prototype, MapboxUploads.prototype, MapboxTilestats.prototype, MapboxStyles.prototype, MapboxStatic.prototype, MapboxTilesets.prototype, MapboxTokens.prototype);\nMapboxClient.getUser = getUser;\nmodule.exports = MapboxClient;","map":{"version":3,"names":["makeClient","require","xtend","extendMutable","getUser","MapboxGeocoding","MapboxSurface","MapboxDirections","MapboxUploads","MapboxMatching","MapboxDatasets","MapboxMatrix","MapboxTilestats","MapboxStyles","MapboxStatic","MapboxTilesets","MapboxTokens","MapboxClient","prototype","module","exports"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/mapbox/lib/mapbox.js"],"sourcesContent":["'use strict';\n\nvar makeClient = require('./make_service');\nvar xtend = require('../vendor/xtend').extendMutable;\nvar getUser = require('./get_user');\nvar MapboxGeocoding = require('./services/geocoding');\nvar MapboxSurface = require('./services/surface');\nvar MapboxDirections = require('./services/directions');\nvar MapboxUploads = require('./services/uploads');\nvar MapboxMatching = require('./services/matching');\nvar MapboxDatasets = require('./services/datasets');\nvar MapboxMatrix = require('./services/matrix');\nvar MapboxTilestats = require('./services/tilestats');\nvar MapboxStyles = require('./services/styles');\nvar MapboxStatic = require('./services/static');\nvar MapboxTilesets = require('./services/tilesets');\nvar MapboxTokens = require('./services/tokens');\n\n\n/**\n * The JavaScript API to Mapbox services\n *\n * @class\n * @throws {Error} if accessToken is not provided\n * @param {string} accessToken a private or public access token\n * @param {Object} options additional options provided for configuration\n * @param {string} [options.endpoint=https://api.mapbox.com] location\n * of the Mapbox API pointed-to. This can be customized to point to a\n * Mapbox Atlas Server instance, or a different service, a mock,\n * or a staging endpoint. Usually you don't need to customize this.\n * @param {string} [options.account] account id to use for api\n * requests. If not is specified, the account defaults to the owner\n * of the provided accessToken.\n * @example\n * var client = new MapboxClient('ACCESSTOKEN');\n */\nvar MapboxClient = makeClient('MapboxClient');\n\n// Combine all client APIs into one API for when people require()\n// the main mapbox-sdk-js library.\nxtend(\n  MapboxClient.prototype,\n  MapboxGeocoding.prototype,\n  MapboxSurface.prototype,\n  MapboxDirections.prototype,\n  MapboxMatrix.prototype,\n  MapboxMatching.prototype,\n  MapboxDatasets.prototype,\n  MapboxUploads.prototype,\n  MapboxTilestats.prototype,\n  MapboxStyles.prototype,\n  MapboxStatic.prototype,\n  MapboxTilesets.prototype,\n  MapboxTokens.prototype\n);\n\nMapboxClient.getUser = getUser;\n\nmodule.exports = MapboxClient;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,UAAU,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAC1C,IAAIC,KAAK,GAAGD,OAAO,CAAC,iBAAiB,CAAC,CAACE,aAAa;AACpD,IAAIC,OAAO,GAAGH,OAAO,CAAC,YAAY,CAAC;AACnC,IAAII,eAAe,GAAGJ,OAAO,CAAC,sBAAsB,CAAC;AACrD,IAAIK,aAAa,GAAGL,OAAO,CAAC,oBAAoB,CAAC;AACjD,IAAIM,gBAAgB,GAAGN,OAAO,CAAC,uBAAuB,CAAC;AACvD,IAAIO,aAAa,GAAGP,OAAO,CAAC,oBAAoB,CAAC;AACjD,IAAIQ,cAAc,GAAGR,OAAO,CAAC,qBAAqB,CAAC;AACnD,IAAIS,cAAc,GAAGT,OAAO,CAAC,qBAAqB,CAAC;AACnD,IAAIU,YAAY,GAAGV,OAAO,CAAC,mBAAmB,CAAC;AAC/C,IAAIW,eAAe,GAAGX,OAAO,CAAC,sBAAsB,CAAC;AACrD,IAAIY,YAAY,GAAGZ,OAAO,CAAC,mBAAmB,CAAC;AAC/C,IAAIa,YAAY,GAAGb,OAAO,CAAC,mBAAmB,CAAC;AAC/C,IAAIc,cAAc,GAAGd,OAAO,CAAC,qBAAqB,CAAC;AACnD,IAAIe,YAAY,GAAGf,OAAO,CAAC,mBAAmB,CAAC;;AAG/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIgB,YAAY,GAAGjB,UAAU,CAAC,cAAc,CAAC;;AAE7C;AACA;AACAE,KAAK,CACHe,YAAY,CAACC,SAAS,EACtBb,eAAe,CAACa,SAAS,EACzBZ,aAAa,CAACY,SAAS,EACvBX,gBAAgB,CAACW,SAAS,EAC1BP,YAAY,CAACO,SAAS,EACtBT,cAAc,CAACS,SAAS,EACxBR,cAAc,CAACQ,SAAS,EACxBV,aAAa,CAACU,SAAS,EACvBN,eAAe,CAACM,SAAS,EACzBL,YAAY,CAACK,SAAS,EACtBJ,YAAY,CAACI,SAAS,EACtBH,cAAc,CAACG,SAAS,EACxBF,YAAY,CAACE,SAAS,CACvB;AAEDD,YAAY,CAACb,OAAO,GAAGA,OAAO;AAE9Be,MAAM,CAACC,OAAO,GAAGH,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}