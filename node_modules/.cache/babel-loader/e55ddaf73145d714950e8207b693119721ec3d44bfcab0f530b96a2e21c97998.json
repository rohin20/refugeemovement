{"ast":null,"code":"import _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { log } from '@deck.gl/core';\nimport { Geometry, uid } from '@luma.gl/core';\nimport { modifyPolygonWindingDirection, WINDING } from '@math.gl/polygon';\nvar ColumnGeometry = /*#__PURE__*/function (_Geometry) {\n  _inherits(ColumnGeometry, _Geometry);\n  var _super = _createSuper(ColumnGeometry);\n  function ColumnGeometry(props) {\n    _classCallCheck(this, ColumnGeometry);\n    var _props$id = props.id,\n      id = _props$id === void 0 ? uid('column-geometry') : _props$id;\n    var _tesselateColumn = tesselateColumn(props),\n      indices = _tesselateColumn.indices,\n      attributes = _tesselateColumn.attributes;\n    return _super.call(this, _objectSpread(_objectSpread({}, props), {}, {\n      id: id,\n      indices: indices,\n      attributes: attributes\n    }));\n  }\n  return _createClass(ColumnGeometry);\n}(Geometry);\nexport { ColumnGeometry as default };\nfunction tesselateColumn(props) {\n  var radius = props.radius,\n    _props$height = props.height,\n    height = _props$height === void 0 ? 1 : _props$height,\n    _props$nradial = props.nradial,\n    nradial = _props$nradial === void 0 ? 10 : _props$nradial;\n  var vertices = props.vertices;\n  if (vertices) {\n    log.assert(vertices.length >= nradial);\n    vertices = vertices.flatMap(function (v) {\n      return [v[0], v[1]];\n    });\n    modifyPolygonWindingDirection(vertices, WINDING.COUNTER_CLOCKWISE);\n  }\n  var isExtruded = height > 0;\n  var vertsAroundEdge = nradial + 1;\n  var numVertices = isExtruded ? vertsAroundEdge * 3 + 1 : nradial;\n  var stepAngle = Math.PI * 2 / nradial;\n  var indices = new Uint16Array(isExtruded ? nradial * 3 * 2 : 0);\n  var positions = new Float32Array(numVertices * 3);\n  var normals = new Float32Array(numVertices * 3);\n  var i = 0;\n  if (isExtruded) {\n    for (var j = 0; j < vertsAroundEdge; j++) {\n      var a = j * stepAngle;\n      var vertexIndex = j % nradial;\n      var sin = Math.sin(a);\n      var cos = Math.cos(a);\n      for (var k = 0; k < 2; k++) {\n        positions[i + 0] = vertices ? vertices[vertexIndex * 2] : cos * radius;\n        positions[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin * radius;\n        positions[i + 2] = (1 / 2 - k) * height;\n        normals[i + 0] = vertices ? vertices[vertexIndex * 2] : cos;\n        normals[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin;\n        i += 3;\n      }\n    }\n    positions[i + 0] = positions[i - 3];\n    positions[i + 1] = positions[i - 2];\n    positions[i + 2] = positions[i - 1];\n    i += 3;\n  }\n  for (var _j = isExtruded ? 0 : 1; _j < vertsAroundEdge; _j++) {\n    var v = Math.floor(_j / 2) * Math.sign(0.5 - _j % 2);\n    var _a = v * stepAngle;\n    var _vertexIndex = (v + nradial) % nradial;\n    var _sin = Math.sin(_a);\n    var _cos = Math.cos(_a);\n    positions[i + 0] = vertices ? vertices[_vertexIndex * 2] : _cos * radius;\n    positions[i + 1] = vertices ? vertices[_vertexIndex * 2 + 1] : _sin * radius;\n    positions[i + 2] = height / 2;\n    normals[i + 2] = 1;\n    i += 3;\n  }\n  if (isExtruded) {\n    var index = 0;\n    for (var _j2 = 0; _j2 < nradial; _j2++) {\n      indices[index++] = _j2 * 2 + 0;\n      indices[index++] = _j2 * 2 + 2;\n      indices[index++] = _j2 * 2 + 0;\n      indices[index++] = _j2 * 2 + 1;\n      indices[index++] = _j2 * 2 + 1;\n      indices[index++] = _j2 * 2 + 3;\n    }\n  }\n  return {\n    indices: indices,\n    attributes: {\n      POSITION: {\n        size: 3,\n        value: positions\n      },\n      NORMAL: {\n        size: 3,\n        value: normals\n      }\n    }\n  };\n}","map":{"version":3,"names":["log","Geometry","uid","modifyPolygonWindingDirection","WINDING","ColumnGeometry","_Geometry","_inherits","_super","_createSuper","props","_classCallCheck","_props$id","id","_tesselateColumn","tesselateColumn","indices","attributes","call","_objectSpread","_createClass","default","radius","_props$height","height","_props$nradial","nradial","vertices","assert","length","flatMap","v","COUNTER_CLOCKWISE","isExtruded","vertsAroundEdge","numVertices","stepAngle","Math","PI","Uint16Array","positions","Float32Array","normals","i","j","a","vertexIndex","sin","cos","k","floor","sign","index","POSITION","size","value","NORMAL"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/layers/src/column-layer/column-geometry.ts"],"sourcesContent":["import {log, BinaryAttribute} from '@deck.gl/core';\nimport {Geometry, uid} from '@luma.gl/core';\nimport {modifyPolygonWindingDirection, WINDING} from '@math.gl/polygon';\n\ntype ColumnGeometryProps = {\n  id?: string;\n  radius: number;\n  height?: number;\n  nradial?: number;\n  vertices?: number[];\n};\n\nexport default class ColumnGeometry extends Geometry {\n  constructor(props: ColumnGeometryProps) {\n    const {id = uid('column-geometry')} = props;\n    const {indices, attributes} = tesselateColumn(props);\n    super({\n      ...props,\n      id,\n      indices,\n      attributes\n    });\n  }\n}\n\n/* eslint-disable max-statements, complexity */\nfunction tesselateColumn(props: ColumnGeometryProps): {\n  indices: Uint16Array;\n  attributes: Record<string, BinaryAttribute>;\n} {\n  const {radius, height = 1, nradial = 10} = props;\n  let {vertices} = props;\n\n  if (vertices) {\n    log.assert(vertices.length >= nradial); // `vertices` must contain at least `diskResolution` points\n    vertices = vertices.flatMap(v => [v[0], v[1]]);\n    modifyPolygonWindingDirection(vertices, WINDING.COUNTER_CLOCKWISE);\n  }\n\n  const isExtruded = height > 0;\n  const vertsAroundEdge = nradial + 1; // loop\n  const numVertices = isExtruded\n    ? vertsAroundEdge * 3 + 1 // top, side top edge, side bottom edge, one additional degenerage vertex\n    : nradial; // top\n\n  const stepAngle = (Math.PI * 2) / nradial;\n\n  // Used for wireframe\n  const indices = new Uint16Array(isExtruded ? nradial * 3 * 2 : 0); // top loop, side vertical, bottom loop\n\n  const positions = new Float32Array(numVertices * 3);\n  const normals = new Float32Array(numVertices * 3);\n\n  let i = 0;\n\n  // side tesselation: 0, 1, 2, 3, 4, 5, ...\n  //\n  // 0 - 2 - 4  ... top\n  // | / | / |\n  // 1 - 3 - 5  ... bottom\n  //\n  if (isExtruded) {\n    for (let j = 0; j < vertsAroundEdge; j++) {\n      const a = j * stepAngle;\n      const vertexIndex = j % nradial;\n      const sin = Math.sin(a);\n      const cos = Math.cos(a);\n\n      for (let k = 0; k < 2; k++) {\n        positions[i + 0] = vertices ? vertices[vertexIndex * 2] : cos * radius;\n        positions[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin * radius;\n        positions[i + 2] = (1 / 2 - k) * height;\n\n        normals[i + 0] = vertices ? vertices[vertexIndex * 2] : cos;\n        normals[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin;\n\n        i += 3;\n      }\n    }\n\n    // duplicate the last vertex to create proper degenerate triangle.\n    positions[i + 0] = positions[i - 3];\n    positions[i + 1] = positions[i - 2];\n    positions[i + 2] = positions[i - 1];\n    i += 3;\n  }\n\n  // The column geometry is rendered as a triangle strip, so\n  // in order to render sides and top in one go we need to use degenerate triangles.\n  // Duplicate last vertex of side trinagles and first vertex of the top cap to preserve winding order.\n\n  // top tesselation: 0, -1, 1, -2, 2, -3, 3, ...\n  //\n  //    0 -- 1\n  //   /      \\\n  // -1        2\n  //  |        |\n  // -2        3\n  //   \\      /\n  //   -3 -- 4\n  //\n  for (let j = isExtruded ? 0 : 1; j < vertsAroundEdge; j++) {\n    const v = Math.floor(j / 2) * Math.sign(0.5 - (j % 2));\n    const a = v * stepAngle;\n    const vertexIndex = (v + nradial) % nradial;\n    const sin = Math.sin(a);\n    const cos = Math.cos(a);\n\n    positions[i + 0] = vertices ? vertices[vertexIndex * 2] : cos * radius;\n    positions[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin * radius;\n    positions[i + 2] = height / 2;\n\n    normals[i + 2] = 1;\n\n    i += 3;\n  }\n\n  if (isExtruded) {\n    let index = 0;\n    for (let j = 0; j < nradial; j++) {\n      // top loop\n      indices[index++] = j * 2 + 0;\n      indices[index++] = j * 2 + 2;\n      // side vertical\n      indices[index++] = j * 2 + 0;\n      indices[index++] = j * 2 + 1;\n      // bottom loop\n      indices[index++] = j * 2 + 1;\n      indices[index++] = j * 2 + 3;\n    }\n  }\n\n  return {\n    indices,\n    attributes: {\n      POSITION: {size: 3, value: positions},\n      NORMAL: {size: 3, value: normals}\n    }\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}