{"ast":null,"code":"'use strict';\n\nvar invariant = require('../../vendor/invariant');\nvar makeService = require('../make_service');\n\n/**\n * @class MapboxMatching\n */\nvar MapboxMatching = makeService('MapboxMatching');\nvar API_MATCHING = '/matching/v5/{account}/{profile}/{coordinates}.json{?access_token,geometries,radiuses,steps,overview,timestamps,annotations}';\n\n/**\n * Snap recorded location traces to roads and paths from OpenStreetMap.\n * Consult the [Map Matching API](https://www.mapbox.com/api-documentation/#map-matching)\n * for more documentation.\n *\n * @param {Array<Array<number>>} coordinates an array of coordinate pairs\n * in [longitude, latitude] order. Up to 100 coordinates can be specified.\n * @param {Object} [options={}] additional options meant to tune\n * the request\n * @param {string} [options.profile=driving] the directions\n * profile, which determines how to prioritize different routes.\n * Options are `'driving'`, which assumes transportation via an\n * automobile and will use highways, `'walking'`, which avoids\n * streets without sidewalks, and `'cycling'`, which prefers streets\n * with bicycle lanes and lower speed limits for transportation via\n * bicycle.\n * @param {string} [options.geometries=geojson] format of the returned geometry.\n * Allowed values are: `'geojson'` (as LineString), `'polyline'` with\n * precision 5, `'polyline6'`. `'polyline'` yields more compact responses which\n * can be decoded on the client side. [GeoJSON](http://geojson.org/), the\n * default, is compatible with libraries like\n * [Mapbox GL](https://www.mapbox.com/mapbox-gl/), Leaflet and\n * [Mapbox.js](https://www.mapbox.com/mapbox.js/).\n * @param {Array<number>} [options.radiuses] an array of integers in meters\n * indicating the assumed precision of the used tracking device. There must be\n * as many radiuses as there are coordinates in the request. Values can be a\n * number between 0 and 30. Use higher numbers (20-30) for noisy traces and\n * lower numbers (1-10) for clean traces. The default value is 5.\n * @param {boolean} [options.steps=false] Whether to return steps and\n * turn-by-turn instructions. Can be `true` or `false`.\n * @param {string|boolean} [options.overview=simplified] type of returned\n * overview geometry. Can be `'full'` (the most detailed geometry available),\n * `'simplified'` (a simplified version of the full geometry), or `false`.\n * @param {Array<number>} [options.timestamps] an array of timestamps\n * corresponding to each coordinate provided in the request; must be numbers in\n * [Unix time](https://en.wikipedia.org/wiki/Unix_time)\n * (seconds since the Unix epoch). There must be as many timestamps as there\n * are coordinates in the request.\n * @param {Array<string>} [options.annotations] an array of fields that return\n * additional metadata for each coordinate along the match geometry. Can be any\n * of `'duration'`, `'distance'`, or `'nodes'`.\n * @param {Function} callback called with (err, results)\n * @returns {Promise} response\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n * mapboxClient.matching([\n *   [-95.4431142, 33.6875431],\n *   [-95.0431142, 33.6875431],\n *   [-95.0431142, 33.0875431],\n *   [-95.0431142, 33.0175431],\n *   [-95.4831142, 33.6875431]\n * ], {\n *  overview: 'full'\n * }, function(err, res) {\n *   // res is a match response object\n * });\n */\nMapboxMatching.prototype.matching = function (coordinates, options, callback) {\n  // permit the options argument to be omitted\n  if (callback === undefined && typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  // typecheck arguments\n  invariant(Array.isArray(coordinates), 'coordinates must be an array');\n  var params = {\n    profile: 'driving',\n    account: 'mapbox',\n    geometries: 'geojson',\n    coordinates: coordinates.join(';')\n  };\n  if (options.profile) {\n    invariant(typeof options.profile === 'string', 'profile option must be string');\n    params.profile = options.profile;\n  }\n  var allowedGeometries = ['polyline', 'geojson'];\n  if (options.geometries) {\n    invariant(allowedGeometries.indexOf(options.geometries) !== -1, 'geometries option must be ' + allowedGeometries);\n    params.geometries = options.geometries;\n  }\n  if (options.radiuses) {\n    invariant(Array.isArray(options.radiuses), 'radiuses must be an array');\n    invariant(options.radiuses.length === coordinates.length, 'There must be as many radiuses as there are coordinates in the request');\n    params.radiuses = options.radiuses.join(';');\n  }\n  if (typeof options.steps !== 'undefined') {\n    invariant(typeof options.steps === 'boolean', 'steps option must be boolean');\n    params.steps = options.steps;\n  }\n  var allowedOverview = ['full', 'simplified'];\n  if (typeof options.overview !== 'undefined') {\n    invariant(allowedOverview.indexOf(options.overview) !== -1 || options.overview === false, 'overview option must be ' + allowedOverview + ' or false');\n    params.overview = options.overview;\n  }\n  if (options.timestamps) {\n    invariant(Array.isArray(options.timestamps), 'timestamps must be an array');\n    invariant(options.timestamps.length === coordinates.length, 'There must be as many timestamps as there are coordinates in the request');\n    params.timestamps = options.timestamps.join(';');\n  }\n  if (options.annotations) {\n    invariant(Array.isArray(options.annotations), 'annotations must be an array');\n    params.annotations = options.annotations.join();\n  }\n  return this.client({\n    path: API_MATCHING,\n    params: params,\n    method: 'get',\n    callback: callback\n  });\n};\nmodule.exports = MapboxMatching;","map":{"version":3,"names":["invariant","require","makeService","MapboxMatching","API_MATCHING","prototype","matching","coordinates","options","callback","undefined","Array","isArray","params","profile","account","geometries","join","allowedGeometries","indexOf","radiuses","length","steps","allowedOverview","overview","timestamps","annotations","client","path","method","module","exports"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/mapbox/lib/services/matching.js"],"sourcesContent":["'use strict';\n\nvar invariant = require('../../vendor/invariant');\nvar makeService = require('../make_service');\n\n/**\n * @class MapboxMatching\n */\nvar MapboxMatching = makeService('MapboxMatching');\n\nvar API_MATCHING = '/matching/v5/{account}/{profile}/{coordinates}.json{?access_token,geometries,radiuses,steps,overview,timestamps,annotations}';\n\n/**\n * Snap recorded location traces to roads and paths from OpenStreetMap.\n * Consult the [Map Matching API](https://www.mapbox.com/api-documentation/#map-matching)\n * for more documentation.\n *\n * @param {Array<Array<number>>} coordinates an array of coordinate pairs\n * in [longitude, latitude] order. Up to 100 coordinates can be specified.\n * @param {Object} [options={}] additional options meant to tune\n * the request\n * @param {string} [options.profile=driving] the directions\n * profile, which determines how to prioritize different routes.\n * Options are `'driving'`, which assumes transportation via an\n * automobile and will use highways, `'walking'`, which avoids\n * streets without sidewalks, and `'cycling'`, which prefers streets\n * with bicycle lanes and lower speed limits for transportation via\n * bicycle.\n * @param {string} [options.geometries=geojson] format of the returned geometry.\n * Allowed values are: `'geojson'` (as LineString), `'polyline'` with\n * precision 5, `'polyline6'`. `'polyline'` yields more compact responses which\n * can be decoded on the client side. [GeoJSON](http://geojson.org/), the\n * default, is compatible with libraries like\n * [Mapbox GL](https://www.mapbox.com/mapbox-gl/), Leaflet and\n * [Mapbox.js](https://www.mapbox.com/mapbox.js/).\n * @param {Array<number>} [options.radiuses] an array of integers in meters\n * indicating the assumed precision of the used tracking device. There must be\n * as many radiuses as there are coordinates in the request. Values can be a\n * number between 0 and 30. Use higher numbers (20-30) for noisy traces and\n * lower numbers (1-10) for clean traces. The default value is 5.\n * @param {boolean} [options.steps=false] Whether to return steps and\n * turn-by-turn instructions. Can be `true` or `false`.\n * @param {string|boolean} [options.overview=simplified] type of returned\n * overview geometry. Can be `'full'` (the most detailed geometry available),\n * `'simplified'` (a simplified version of the full geometry), or `false`.\n * @param {Array<number>} [options.timestamps] an array of timestamps\n * corresponding to each coordinate provided in the request; must be numbers in\n * [Unix time](https://en.wikipedia.org/wiki/Unix_time)\n * (seconds since the Unix epoch). There must be as many timestamps as there\n * are coordinates in the request.\n * @param {Array<string>} [options.annotations] an array of fields that return\n * additional metadata for each coordinate along the match geometry. Can be any\n * of `'duration'`, `'distance'`, or `'nodes'`.\n * @param {Function} callback called with (err, results)\n * @returns {Promise} response\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n * mapboxClient.matching([\n *   [-95.4431142, 33.6875431],\n *   [-95.0431142, 33.6875431],\n *   [-95.0431142, 33.0875431],\n *   [-95.0431142, 33.0175431],\n *   [-95.4831142, 33.6875431]\n * ], {\n *  overview: 'full'\n * }, function(err, res) {\n *   // res is a match response object\n * });\n */\nMapboxMatching.prototype.matching = function(coordinates, options, callback) {\n\n  // permit the options argument to be omitted\n  if (callback === undefined && typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  // typecheck arguments\n  invariant(Array.isArray(coordinates), 'coordinates must be an array');\n\n  var params = {\n    profile: 'driving',\n    account: 'mapbox',\n    geometries: 'geojson',\n    coordinates: coordinates.join(';')\n  };\n\n  if (options.profile) {\n    invariant(typeof options.profile === 'string', 'profile option must be string');\n    params.profile = options.profile;\n  }\n\n  var allowedGeometries = ['polyline', 'geojson'];\n  if (options.geometries) {\n    invariant(allowedGeometries.indexOf(options.geometries) !== -1, 'geometries option must be ' + allowedGeometries);\n    params.geometries = options.geometries;\n  }\n\n  if (options.radiuses) {\n    invariant(Array.isArray(options.radiuses), 'radiuses must be an array');\n    invariant(options.radiuses.length === coordinates.length, 'There must be as many radiuses as there are coordinates in the request');\n    params.radiuses = options.radiuses.join(';');\n  }\n\n  if (typeof options.steps !== 'undefined') {\n    invariant(typeof options.steps === 'boolean', 'steps option must be boolean');\n    params.steps = options.steps;\n  }\n\n  var allowedOverview = ['full', 'simplified'];\n  if (typeof options.overview !== 'undefined') {\n    invariant(allowedOverview.indexOf(options.overview) !== -1 || options.overview === false, 'overview option must be ' + allowedOverview + ' or false');\n    params.overview = options.overview;\n  }\n\n  if (options.timestamps) {\n    invariant(Array.isArray(options.timestamps), 'timestamps must be an array');\n    invariant(options.timestamps.length === coordinates.length, 'There must be as many timestamps as there are coordinates in the request');\n    params.timestamps = options.timestamps.join(';');\n  }\n\n  if (options.annotations) {\n    invariant(Array.isArray(options.annotations), 'annotations must be an array');\n    params.annotations = options.annotations.join();\n  }\n\n  return this.client({\n    path: API_MATCHING,\n    params: params,\n    method: 'get',\n    callback: callback\n  });\n};\n\nmodule.exports = MapboxMatching;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AACjD,IAAIC,WAAW,GAAGD,OAAO,CAAC,iBAAiB,CAAC;;AAE5C;AACA;AACA;AACA,IAAIE,cAAc,GAAGD,WAAW,CAAC,gBAAgB,CAAC;AAElD,IAAIE,YAAY,GAAG,8HAA8H;;AAEjJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,cAAc,CAACE,SAAS,CAACC,QAAQ,GAAG,UAASC,WAAW,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EAE3E;EACA,IAAIA,QAAQ,KAAKC,SAAS,IAAI,OAAOF,OAAO,KAAK,UAAU,EAAE;IAC3DC,QAAQ,GAAGD,OAAO;IAClBA,OAAO,GAAG,CAAC,CAAC;EACd;;EAEA;EACAR,SAAS,CAACW,KAAK,CAACC,OAAO,CAACL,WAAW,CAAC,EAAE,8BAA8B,CAAC;EAErE,IAAIM,MAAM,GAAG;IACXC,OAAO,EAAE,SAAS;IAClBC,OAAO,EAAE,QAAQ;IACjBC,UAAU,EAAE,SAAS;IACrBT,WAAW,EAAEA,WAAW,CAACU,IAAI,CAAC,GAAG;EACnC,CAAC;EAED,IAAIT,OAAO,CAACM,OAAO,EAAE;IACnBd,SAAS,CAAC,OAAOQ,OAAO,CAACM,OAAO,KAAK,QAAQ,EAAE,+BAA+B,CAAC;IAC/ED,MAAM,CAACC,OAAO,GAAGN,OAAO,CAACM,OAAO;EAClC;EAEA,IAAII,iBAAiB,GAAG,CAAC,UAAU,EAAE,SAAS,CAAC;EAC/C,IAAIV,OAAO,CAACQ,UAAU,EAAE;IACtBhB,SAAS,CAACkB,iBAAiB,CAACC,OAAO,CAACX,OAAO,CAACQ,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,4BAA4B,GAAGE,iBAAiB,CAAC;IACjHL,MAAM,CAACG,UAAU,GAAGR,OAAO,CAACQ,UAAU;EACxC;EAEA,IAAIR,OAAO,CAACY,QAAQ,EAAE;IACpBpB,SAAS,CAACW,KAAK,CAACC,OAAO,CAACJ,OAAO,CAACY,QAAQ,CAAC,EAAE,2BAA2B,CAAC;IACvEpB,SAAS,CAACQ,OAAO,CAACY,QAAQ,CAACC,MAAM,KAAKd,WAAW,CAACc,MAAM,EAAE,wEAAwE,CAAC;IACnIR,MAAM,CAACO,QAAQ,GAAGZ,OAAO,CAACY,QAAQ,CAACH,IAAI,CAAC,GAAG,CAAC;EAC9C;EAEA,IAAI,OAAOT,OAAO,CAACc,KAAK,KAAK,WAAW,EAAE;IACxCtB,SAAS,CAAC,OAAOQ,OAAO,CAACc,KAAK,KAAK,SAAS,EAAE,8BAA8B,CAAC;IAC7ET,MAAM,CAACS,KAAK,GAAGd,OAAO,CAACc,KAAK;EAC9B;EAEA,IAAIC,eAAe,GAAG,CAAC,MAAM,EAAE,YAAY,CAAC;EAC5C,IAAI,OAAOf,OAAO,CAACgB,QAAQ,KAAK,WAAW,EAAE;IAC3CxB,SAAS,CAACuB,eAAe,CAACJ,OAAO,CAACX,OAAO,CAACgB,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAIhB,OAAO,CAACgB,QAAQ,KAAK,KAAK,EAAE,0BAA0B,GAAGD,eAAe,GAAG,WAAW,CAAC;IACrJV,MAAM,CAACW,QAAQ,GAAGhB,OAAO,CAACgB,QAAQ;EACpC;EAEA,IAAIhB,OAAO,CAACiB,UAAU,EAAE;IACtBzB,SAAS,CAACW,KAAK,CAACC,OAAO,CAACJ,OAAO,CAACiB,UAAU,CAAC,EAAE,6BAA6B,CAAC;IAC3EzB,SAAS,CAACQ,OAAO,CAACiB,UAAU,CAACJ,MAAM,KAAKd,WAAW,CAACc,MAAM,EAAE,0EAA0E,CAAC;IACvIR,MAAM,CAACY,UAAU,GAAGjB,OAAO,CAACiB,UAAU,CAACR,IAAI,CAAC,GAAG,CAAC;EAClD;EAEA,IAAIT,OAAO,CAACkB,WAAW,EAAE;IACvB1B,SAAS,CAACW,KAAK,CAACC,OAAO,CAACJ,OAAO,CAACkB,WAAW,CAAC,EAAE,8BAA8B,CAAC;IAC7Eb,MAAM,CAACa,WAAW,GAAGlB,OAAO,CAACkB,WAAW,CAACT,IAAI,EAAE;EACjD;EAEA,OAAO,IAAI,CAACU,MAAM,CAAC;IACjBC,IAAI,EAAExB,YAAY;IAClBS,MAAM,EAAEA,MAAM;IACdgB,MAAM,EAAE,KAAK;IACbpB,QAAQ,EAAEA;EACZ,CAAC,CAAC;AACJ,CAAC;AAEDqB,MAAM,CAACC,OAAO,GAAG5B,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}