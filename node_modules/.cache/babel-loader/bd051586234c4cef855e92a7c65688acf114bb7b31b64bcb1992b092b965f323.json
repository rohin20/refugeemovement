{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _asyncIterator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport AsyncQueue from '../async-queue/async-queue';\nimport WorkerBody from '../worker-farm/worker-body';\nvar requestId = 0;\nvar inputBatches;\nvar options;\nexport function createWorker(process, processInBatches) {\n  if (!WorkerBody.inWorkerThread()) {\n    return;\n  }\n  var context = {\n    process: processOnMainThread\n  };\n  WorkerBody.onmessage = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(type, payload) {\n      var result, resultIterator, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, batch, message;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.t0 = type;\n            _context.next = _context.t0 === 'process' ? 4 : _context.t0 === 'process-in-batches' ? 11 : _context.t0 === 'input-batch' ? 46 : _context.t0 === 'input-done' ? 48 : 50;\n            break;\n          case 4:\n            if (process) {\n              _context.next = 6;\n              break;\n            }\n            throw new Error('Worker does not support atomic processing');\n          case 6:\n            _context.next = 8;\n            return process(payload.input, payload.options || {}, context);\n          case 8:\n            result = _context.sent;\n            WorkerBody.postMessage('done', {\n              result: result\n            });\n            return _context.abrupt(\"break\", 50);\n          case 11:\n            if (processInBatches) {\n              _context.next = 13;\n              break;\n            }\n            throw new Error('Worker does not support batched processing');\n          case 13:\n            inputBatches = new AsyncQueue();\n            options = payload.options || {};\n            resultIterator = processInBatches(inputBatches, options, context);\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 18;\n            _iterator = _asyncIterator(resultIterator);\n          case 20:\n            _context.next = 22;\n            return _iterator.next();\n          case 22:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 28;\n              break;\n            }\n            batch = _step.value;\n            WorkerBody.postMessage('output-batch', {\n              result: batch\n            });\n          case 25:\n            _iteratorAbruptCompletion = false;\n            _context.next = 20;\n            break;\n          case 28:\n            _context.next = 34;\n            break;\n          case 30:\n            _context.prev = 30;\n            _context.t1 = _context[\"catch\"](18);\n            _didIteratorError = true;\n            _iteratorError = _context.t1;\n          case 34:\n            _context.prev = 34;\n            _context.prev = 35;\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 39;\n              break;\n            }\n            _context.next = 39;\n            return _iterator.return();\n          case 39:\n            _context.prev = 39;\n            if (!_didIteratorError) {\n              _context.next = 42;\n              break;\n            }\n            throw _iteratorError;\n          case 42:\n            return _context.finish(39);\n          case 43:\n            return _context.finish(34);\n          case 44:\n            WorkerBody.postMessage('done', {});\n            return _context.abrupt(\"break\", 50);\n          case 46:\n            inputBatches.push(payload.input);\n            return _context.abrupt(\"break\", 50);\n          case 48:\n            inputBatches.close();\n            return _context.abrupt(\"break\", 50);\n          case 50:\n            _context.next = 56;\n            break;\n          case 52:\n            _context.prev = 52;\n            _context.t2 = _context[\"catch\"](0);\n            message = _context.t2 instanceof Error ? _context.t2.message : '';\n            WorkerBody.postMessage('error', {\n              error: message\n            });\n          case 56:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[0, 52], [18, 30, 34, 44], [35,, 39, 43]]);\n    }));\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}\nfunction processOnMainThread(arrayBuffer) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise(function (resolve, reject) {\n    var id = requestId++;\n    var onMessage = function onMessage(type, payload) {\n      if (payload.id !== id) {\n        return;\n      }\n      switch (type) {\n        case 'done':\n          WorkerBody.removeEventListener(onMessage);\n          resolve(payload.result);\n          break;\n        case 'error':\n          WorkerBody.removeEventListener(onMessage);\n          reject(payload.error);\n          break;\n        default:\n      }\n    };\n    WorkerBody.addEventListener(onMessage);\n    var payload = {\n      id: id,\n      input: arrayBuffer,\n      options: options\n    };\n    WorkerBody.postMessage('process', payload);\n  });\n}","map":{"version":3,"names":["AsyncQueue","WorkerBody","requestId","inputBatches","options","createWorker","process","processInBatches","inWorkerThread","context","processOnMainThread","onmessage","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","type","payload","result","resultIterator","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","batch","message","wrap","_callee$","_context","prev","next","t0","Error","input","sent","postMessage","abrupt","_asyncIterator","done","value","t1","return","finish","push","close","t2","error","stop","_x","_x2","apply","arguments","arrayBuffer","length","undefined","Promise","resolve","reject","id","onMessage","removeEventListener","addEventListener"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/worker-utils/src/lib/worker-api/create-worker.ts"],"sourcesContent":["import type {\n  WorkerMessageType,\n  WorkerMessagePayload,\n  WorkerContext,\n  Process,\n  ProcessInBatches\n} from '../../types';\nimport AsyncQueue from '../async-queue/async-queue';\nimport WorkerBody from '../worker-farm/worker-body';\n// import {validateWorkerVersion} from './validate-worker-version';\n\n/** Counter for jobs */\nlet requestId = 0;\nlet inputBatches: AsyncQueue<any>;\nlet options: {[key: string]: any};\n\nexport type ProcessOnMainThread = (\n  data: any,\n  options?: {[key: string]: any},\n  context?: WorkerContext\n) => any;\n\n/**\n * Set up a WebWorkerGlobalScope to talk with the main thread\n */\nexport function createWorker(process: Process, processInBatches?: ProcessInBatches): void {\n  if (!WorkerBody.inWorkerThread()) {\n    return;\n  }\n\n  const context: WorkerContext = {\n    process: processOnMainThread\n  };\n\n  // eslint-disable-next-line complexity\n  WorkerBody.onmessage = async (type: WorkerMessageType, payload: WorkerMessagePayload) => {\n    try {\n      switch (type) {\n        case 'process':\n          if (!process) {\n            throw new Error('Worker does not support atomic processing');\n          }\n          const result = await process(payload.input, payload.options || {}, context);\n          WorkerBody.postMessage('done', {result});\n          break;\n\n        case 'process-in-batches':\n          if (!processInBatches) {\n            throw new Error('Worker does not support batched processing');\n          }\n          inputBatches = new AsyncQueue<any>();\n          options = payload.options || {};\n          const resultIterator = processInBatches(inputBatches, options, context);\n          for await (const batch of resultIterator) {\n            WorkerBody.postMessage('output-batch', {result: batch});\n          }\n          WorkerBody.postMessage('done', {});\n          break;\n\n        case 'input-batch':\n          inputBatches.push(payload.input);\n          break;\n\n        case 'input-done':\n          inputBatches.close();\n          break;\n\n        default:\n      }\n    } catch (error) {\n      const message = error instanceof Error ? error.message : '';\n      WorkerBody.postMessage('error', {error: message});\n    }\n  };\n}\n\nfunction processOnMainThread(arrayBuffer: ArrayBuffer, options = {}) {\n  return new Promise((resolve, reject) => {\n    const id = requestId++;\n\n    /**\n     */\n    const onMessage = (type: string, payload: WorkerMessagePayload) => {\n      if (payload.id !== id) {\n        // not ours\n        return;\n      }\n\n      switch (type) {\n        case 'done':\n          WorkerBody.removeEventListener(onMessage);\n          resolve(payload.result);\n          break;\n\n        case 'error':\n          WorkerBody.removeEventListener(onMessage);\n          reject(payload.error);\n          break;\n\n        default:\n        // ignore\n      }\n    };\n\n    WorkerBody.addEventListener(onMessage);\n\n    // Ask the main thread to decode data\n    const payload = {id, input: arrayBuffer, options};\n    WorkerBody.postMessage('process', payload);\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}