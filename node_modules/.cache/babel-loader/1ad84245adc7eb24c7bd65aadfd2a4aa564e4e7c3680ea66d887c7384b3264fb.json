{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { load } from '@loaders.gl/core';\nimport { TilesetTraverser } from '../tileset-traverser';\nimport { getLodStatus } from '../helpers/i3s-lod';\nimport { Tile3D } from '../tile-3d';\nimport { I3STileManager } from './i3s-tile-manager';\nexport var I3STilesetTraverser = /*#__PURE__*/function (_TilesetTraverser) {\n  _inherits(I3STilesetTraverser, _TilesetTraverser);\n  var _super = _createSuper(I3STilesetTraverser);\n  function I3STilesetTraverser(options) {\n    var _this;\n    _classCallCheck(this, I3STilesetTraverser);\n    _this = _super.call(this, options);\n    _defineProperty(_assertThisInitialized(_this), \"_tileManager\", void 0);\n    _this._tileManager = new I3STileManager();\n    return _this;\n  }\n  _createClass(I3STilesetTraverser, [{\n    key: \"traversalFinished\",\n    value: function traversalFinished(frameState) {\n      return !this._tileManager.hasPendingTiles(frameState.viewport.id, this._frameNumber || 0);\n    }\n  }, {\n    key: \"shouldRefine\",\n    value: function shouldRefine(tile, frameState) {\n      tile._lodJudge = getLodStatus(tile, frameState);\n      return tile._lodJudge === 'DIG';\n    }\n  }, {\n    key: \"updateChildTiles\",\n    value: function updateChildTiles(tile, frameState) {\n      var _this2 = this;\n      var children = tile.header.children || [];\n      var childTiles = tile.children;\n      var tileset = tile.tileset;\n      var _iterator = _createForOfIteratorHelper(children),\n        _step;\n      try {\n        var _loop = function _loop() {\n          var child = _step.value;\n          var extendedId = \"\".concat(child.id, \"-\").concat(frameState.viewport.id);\n          var childTile = childTiles && childTiles.find(function (t) {\n            return t.id === extendedId;\n          });\n          if (!childTile) {\n            var request = function request() {\n              return _this2._loadTile(child.id, tileset);\n            };\n            var cachedRequest = _this2._tileManager.find(extendedId);\n            if (!cachedRequest) {\n              if (tileset.tileset.nodePages) {\n                request = function request() {\n                  return tileset.tileset.nodePagesTile.formTileFromNodePages(child.id);\n                };\n              }\n              _this2._tileManager.add(request, extendedId, function (header) {\n                return _this2._onTileLoad(header, tile, extendedId);\n              }, frameState);\n            } else {\n              _this2._tileManager.update(extendedId, frameState);\n            }\n          } else if (childTile) {\n            _this2.updateTile(childTile, frameState);\n          }\n        };\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return false;\n    }\n  }, {\n    key: \"_loadTile\",\n    value: function () {\n      var _loadTile2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(nodeId, tileset) {\n        var loader, nodeUrl, options;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              loader = tileset.loader;\n              nodeUrl = tileset.getTileUrl(\"\".concat(tileset.url, \"/nodes/\").concat(nodeId));\n              options = _objectSpread(_objectSpread({}, tileset.loadOptions), {}, {\n                i3s: _objectSpread(_objectSpread({}, tileset.loadOptions.i3s), {}, {\n                  isTileHeader: true\n                })\n              });\n              _context.next = 5;\n              return load(nodeUrl, loader, options);\n            case 5:\n              return _context.abrupt(\"return\", _context.sent);\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function _loadTile(_x, _x2) {\n        return _loadTile2.apply(this, arguments);\n      }\n      return _loadTile;\n    }()\n  }, {\n    key: \"_onTileLoad\",\n    value: function _onTileLoad(header, tile, extendedId) {\n      var childTile = new Tile3D(tile.tileset, header, tile, extendedId);\n      tile.children.push(childTile);\n      var frameState = this._tileManager.find(childTile.id).frameState;\n      this.updateTile(childTile, frameState);\n      if (this._frameNumber === frameState.frameNumber && (this.traversalFinished(frameState) || new Date().getTime() - this.lastUpdate > this.updateDebounceTime)) {\n        this.executeTraversal(childTile, frameState);\n      }\n    }\n  }]);\n  return I3STilesetTraverser;\n}(TilesetTraverser);","map":{"version":3,"names":["load","TilesetTraverser","getLodStatus","Tile3D","I3STileManager","I3STilesetTraverser","_TilesetTraverser","_inherits","_super","_createSuper","options","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","_tileManager","_createClass","key","value","traversalFinished","frameState","hasPendingTiles","viewport","id","_frameNumber","shouldRefine","tile","_lodJudge","updateChildTiles","_this2","children","header","childTiles","tileset","_iterator","_createForOfIteratorHelper","_step","_loop","child","extendedId","concat","childTile","find","t","request","_loadTile","cachedRequest","nodePages","nodePagesTile","formTileFromNodePages","add","_onTileLoad","update","updateTile","s","n","done","err","e","f","_loadTile2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","nodeId","loader","nodeUrl","wrap","_callee$","_context","prev","next","getTileUrl","url","_objectSpread","loadOptions","i3s","isTileHeader","abrupt","sent","stop","_x","_x2","apply","arguments","push","frameNumber","Date","getTime","lastUpdate","updateDebounceTime","executeTraversal"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/geo-layers/node_modules/@loaders.gl/tiles/src/tileset/format-i3s/i3s-tileset-traverser.ts"],"sourcesContent":["import {load} from '@loaders.gl/core';\nimport {TilesetTraverser} from '../tileset-traverser';\n\nimport {getLodStatus} from '../helpers/i3s-lod';\nimport {Tile3D} from '../tile-3d';\nimport {I3STileManager} from './i3s-tile-manager';\nimport {FrameState} from '../helpers/frame-state';\n\nexport class I3STilesetTraverser extends TilesetTraverser {\n  private _tileManager: I3STileManager;\n\n  constructor(options) {\n    super(options);\n    this._tileManager = new I3STileManager();\n  }\n\n  /**\n   * Check if there are no penging tile header requests,\n   * that means the traversal is finished and we can call\n   * following-up callbacks.\n   */\n  traversalFinished(frameState: FrameState): boolean {\n    return !this._tileManager.hasPendingTiles(frameState.viewport.id, this._frameNumber || 0);\n  }\n\n  shouldRefine(tile, frameState: FrameState) {\n    tile._lodJudge = getLodStatus(tile, frameState);\n    return tile._lodJudge === 'DIG';\n  }\n\n  updateChildTiles(tile, frameState: FrameState): boolean {\n    const children = tile.header.children || [];\n    // children which are already fetched and constructed as Tile3D instances\n    const childTiles = tile.children;\n    const tileset = tile.tileset;\n\n    for (const child of children) {\n      const extendedId = `${child.id}-${frameState.viewport.id}`;\n      // if child tile is not fetched\n      const childTile = childTiles && childTiles.find((t) => t.id === extendedId);\n      if (!childTile) {\n        let request = () => this._loadTile(child.id, tileset);\n        const cachedRequest = this._tileManager.find(extendedId);\n        if (!cachedRequest) {\n          // eslint-disable-next-line max-depth\n          if (tileset.tileset.nodePages) {\n            request = () => tileset.tileset.nodePagesTile.formTileFromNodePages(child.id);\n          }\n          this._tileManager.add(\n            request,\n            extendedId,\n            (header) => this._onTileLoad(header, tile, extendedId),\n            frameState\n          );\n        } else {\n          // update frameNumber since it is still needed in current frame\n          this._tileManager.update(extendedId, frameState);\n        }\n      } else if (childTile) {\n        // if child tile is fetched and available\n        this.updateTile(childTile, frameState);\n      }\n    }\n    return false;\n  }\n\n  async _loadTile(nodeId, tileset) {\n    const {loader} = tileset;\n    const nodeUrl = tileset.getTileUrl(`${tileset.url}/nodes/${nodeId}`);\n    // load metadata\n    const options = {\n      ...tileset.loadOptions,\n      i3s: {\n        ...tileset.loadOptions.i3s,\n        isTileHeader: true\n      }\n    };\n\n    return await load(nodeUrl, loader, options);\n  }\n\n  /**\n   * The callback to init Tile3D instance after loading the tile JSON\n   * @param {Object} header - the tile JSON from a dataset\n   * @param {Tile3D} tile - the parent Tile3D instance\n   * @param {string} extendedId - optional ID to separate copies of a tile for different viewports.\n   *                              const extendedId = `${tile.id}-${frameState.viewport.id}`;\n   * @return {void}\n   */\n  _onTileLoad(header, tile, extendedId) {\n    // after child tile is fetched\n    const childTile = new Tile3D(tile.tileset, header, tile, extendedId);\n    tile.children.push(childTile);\n    const frameState = this._tileManager.find(childTile.id).frameState;\n    this.updateTile(childTile, frameState);\n\n    // after tile fetched, resume traversal if still in current update/traversal frame\n    if (\n      this._frameNumber === frameState.frameNumber &&\n      (this.traversalFinished(frameState) ||\n        new Date().getTime() - this.lastUpdate > this.updateDebounceTime)\n    ) {\n      this.executeTraversal(childTile, frameState);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}