{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { assert } from '@loaders.gl/loader-utils';\nimport { isImageTypeSupported, getDefaultImageType } from '../category-api/image-type';\nimport { getImageData } from '../category-api/parsed-image-api';\nimport parseToImage from './parse-to-image';\nimport parseToImageBitmap from './parse-to-image-bitmap';\nimport parseToNodeImage from './parse-to-node-image';\nexport default function parseImage(_x, _x2, _x3) {\n  return _parseImage.apply(this, arguments);\n}\nfunction _parseImage() {\n  _parseImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(arrayBuffer, options, context) {\n    var imageOptions, imageType, _ref, url, loadType, image;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          options = options || {};\n          imageOptions = options.image || {};\n          imageType = imageOptions.type || 'auto';\n          _ref = context || {}, url = _ref.url;\n          loadType = getLoadableImageType(imageType);\n          _context.t0 = loadType;\n          _context.next = _context.t0 === 'imagebitmap' ? 8 : _context.t0 === 'image' ? 12 : _context.t0 === 'data' ? 16 : 20;\n          break;\n        case 8:\n          _context.next = 10;\n          return parseToImageBitmap(arrayBuffer, options, url);\n        case 10:\n          image = _context.sent;\n          return _context.abrupt(\"break\", 21);\n        case 12:\n          _context.next = 14;\n          return parseToImage(arrayBuffer, options, url);\n        case 14:\n          image = _context.sent;\n          return _context.abrupt(\"break\", 21);\n        case 16:\n          _context.next = 18;\n          return parseToNodeImage(arrayBuffer, options);\n        case 18:\n          image = _context.sent;\n          return _context.abrupt(\"break\", 21);\n        case 20:\n          assert(false);\n        case 21:\n          if (imageType === 'data') {\n            image = getImageData(image);\n          }\n          return _context.abrupt(\"return\", image);\n        case 23:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _parseImage.apply(this, arguments);\n}\nfunction getLoadableImageType(type) {\n  switch (type) {\n    case 'auto':\n    case 'data':\n      return getDefaultImageType();\n    default:\n      isImageTypeSupported(type);\n      return type;\n  }\n}","map":{"version":3,"names":["assert","isImageTypeSupported","getDefaultImageType","getImageData","parseToImage","parseToImageBitmap","parseToNodeImage","parseImage","_x","_x2","_x3","_parseImage","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","arrayBuffer","options","context","imageOptions","imageType","_ref","url","loadType","image","wrap","_callee$","_context","prev","next","type","getLoadableImageType","t0","sent","abrupt","stop"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/images/src/lib/parsers/parse-image.ts"],"sourcesContent":["import type {LoaderContext} from '@loaders.gl/loader-utils';\nimport {assert} from '@loaders.gl/loader-utils';\nimport type {ImageType} from '../../types';\nimport type {ImageLoaderOptions} from '../../image-loader';\nimport {isImageTypeSupported, getDefaultImageType} from '../category-api/image-type';\nimport {getImageData} from '../category-api/parsed-image-api';\nimport parseToImage from './parse-to-image';\nimport parseToImageBitmap from './parse-to-image-bitmap';\nimport parseToNodeImage from './parse-to-node-image';\n\n// Parse to platform defined image type (data on node, ImageBitmap or HTMLImage on browser)\n// eslint-disable-next-line complexity\nexport default async function parseImage(\n  arrayBuffer: ArrayBuffer,\n  options?: ImageLoaderOptions,\n  context?: LoaderContext\n): Promise<ImageType> {\n  options = options || {};\n  const imageOptions = options.image || {};\n\n  // The user can request a specific output format via `options.image.type`\n  const imageType = imageOptions.type || 'auto';\n\n  const {url} = context || {};\n\n  // Note: For options.image.type === `data`, we may still need to load as `image` or `imagebitmap`\n  const loadType = getLoadableImageType(imageType);\n\n  let image;\n  switch (loadType) {\n    case 'imagebitmap':\n      image = await parseToImageBitmap(arrayBuffer, options, url);\n      break;\n    case 'image':\n      image = await parseToImage(arrayBuffer, options, url);\n      break;\n    case 'data':\n      // Node.js loads imagedata directly\n      image = await parseToNodeImage(arrayBuffer, options);\n      break;\n    default:\n      assert(false);\n  }\n\n  // Browser: if options.image.type === 'data', we can now extract data from the loaded image\n  if (imageType === 'data') {\n    image = getImageData(image);\n  }\n\n  return image;\n}\n\n// Get a loadable image type from image type\nfunction getLoadableImageType(type) {\n  switch (type) {\n    case 'auto':\n    case 'data':\n      // Browser: For image data we need still need to load using an image format\n      // Node: the default image type is `data`.\n      return getDefaultImageType();\n    default:\n      // Throw an error if not supported\n      isImageTypeSupported(type);\n      return type;\n  }\n}\n"],"mappings":";;AACA,SAAQA,MAAM,QAAO,0BAA0B;AAG/C,SAAQC,oBAAoB,EAAEC,mBAAmB,QAAO,4BAA4B;AACpF,SAAQC,YAAY,QAAO,kCAAkC;AAC7D,OAAOC,YAAY,MAAM,kBAAkB;AAC3C,OAAOC,kBAAkB,MAAM,yBAAyB;AACxD,OAAOC,gBAAgB,MAAM,uBAAuB;AAIpD,wBAA8BC,UAAUA,CAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,WAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAsCxC,SAAAF,YAAA;EAAAA,WAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAtCe,SAAAC,QACbC,WAAwB,EACxBC,OAA4B,EAC5BC,OAAuB;IAAA,IAAAC,YAAA,EAAAC,SAAA,EAAAC,IAAA,EAAAC,GAAA,EAAAC,QAAA,EAAAC,KAAA;IAAA,OAAAX,mBAAA,GAAAY,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAEvBZ,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;UACjBE,YAAY,GAAGF,OAAO,CAACO,KAAK,IAAI,CAAC,CAAC;UAGlCJ,SAAS,GAAGD,YAAY,CAACW,IAAI,IAAI,MAAM;UAAAT,IAAA,GAE/BH,OAAO,IAAI,CAAC,CAAC,EAApBI,GAAA,GAAAD,IAAA,CAAAC,GAAA;UAGDC,QAAQ,GAAGQ,oBAAoB,CAACX,SAAS,CAAC;UAAAO,QAAA,CAAAK,EAAA,GAGxCT,QAAQ;UAAAI,QAAA,CAAAE,IAAA,GAAAF,QAAA,CAAAK,EAAA,KACT,aAAa,OAAAL,QAAA,CAAAK,EAAA,KAGb,OAAO,QAAAL,QAAA,CAAAK,EAAA,KAGP,MAAM;UAAA;QAAA;UAAAL,QAAA,CAAAE,IAAA;UAAA,OALK1B,kBAAkB,CAACa,WAAW,EAAEC,OAAO,EAAEK,GAAG,CAAC;QAAA;UAA3DE,KAAK,GAAAG,QAAA,CAAAM,IAAA;UAAA,OAAAN,QAAA,CAAAO,MAAA;QAAA;UAAAP,QAAA,CAAAE,IAAA;UAAA,OAGS3B,YAAY,CAACc,WAAW,EAAEC,OAAO,EAAEK,GAAG,CAAC;QAAA;UAArDE,KAAK,GAAAG,QAAA,CAAAM,IAAA;UAAA,OAAAN,QAAA,CAAAO,MAAA;QAAA;UAAAP,QAAA,CAAAE,IAAA;UAAA,OAISzB,gBAAgB,CAACY,WAAW,EAAEC,OAAO,CAAC;QAAA;UAApDO,KAAK,GAAAG,QAAA,CAAAM,IAAA;UAAA,OAAAN,QAAA,CAAAO,MAAA;QAAA;UAGLpC,MAAM,CAAC,KAAK,CAAC;QAAA;UAIjB,IAAIsB,SAAS,KAAK,MAAM,EAAE;YACxBI,KAAK,GAAGvB,YAAY,CAACuB,KAAK,CAAC;UAC7B;UAAA,OAAAG,QAAA,CAAAO,MAAA,WAEOV,KAAK;QAAA;QAAA;UAAA,OAAAG,QAAA,CAAAQ,IAAA;MAAA;IAAA,GAAApB,OAAA;EAAA,CACd;EAAA,OAAAN,WAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAGA,SAASoB,oBAAoBA,CAACD,IAAI,EAAE;EAClC,QAAQA,IAAI;IACV,KAAK,MAAM;IACX,KAAK,MAAM;MAGT,OAAO9B,mBAAmB,EAAE;IAC9B;MAEED,oBAAoB,CAAC+B,IAAI,CAAC;MAC1B,OAAOA,IAAI;EAAA;AAEjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}