{"ast":null,"code":"import _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty2 from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _DEFAULT_TEXTURE_PARA;\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Texture2D, copyToTexture } from '@luma.gl/core';\nimport { ImageLoader } from '@loaders.gl/images';\nimport { load } from '@loaders.gl/core';\nimport { createIterable } from '@deck.gl/core';\nvar DEFAULT_CANVAS_WIDTH = 1024;\nvar DEFAULT_BUFFER = 4;\nvar noop = function noop() {};\nvar DEFAULT_TEXTURE_PARAMETERS = (_DEFAULT_TEXTURE_PARA = {}, _defineProperty2(_DEFAULT_TEXTURE_PARA, 10241, 9987), _defineProperty2(_DEFAULT_TEXTURE_PARA, 10240, 9729), _defineProperty2(_DEFAULT_TEXTURE_PARA, 10242, 33071), _defineProperty2(_DEFAULT_TEXTURE_PARA, 10243, 33071), _DEFAULT_TEXTURE_PARA);\nfunction nextPowOfTwo(number) {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\nfunction resizeImage(ctx, imageData, width, height) {\n  if (width === imageData.width && height === imageData.height) {\n    return imageData;\n  }\n  ctx.canvas.height = height;\n  ctx.canvas.width = width;\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  ctx.drawImage(imageData, 0, 0, imageData.width, imageData.height, 0, 0, width, height);\n  return ctx.canvas;\n}\nfunction getIconId(icon) {\n  return icon && (icon.id || icon.url);\n}\nfunction resizeTexture(texture, width, height, parameters) {\n  var oldWidth = texture.width;\n  var oldHeight = texture.height;\n  var newTexture = new Texture2D(texture.gl, {\n    width: width,\n    height: height,\n    parameters: parameters\n  });\n  copyToTexture(texture, newTexture, {\n    targetY: 0,\n    width: oldWidth,\n    height: oldHeight\n  });\n  texture.delete();\n  return newTexture;\n}\nfunction buildRowMapping(mapping, columns, yOffset) {\n  for (var i = 0; i < columns.length; i++) {\n    var _columns$i = columns[i],\n      icon = _columns$i.icon,\n      xOffset = _columns$i.xOffset;\n    var id = getIconId(icon);\n    mapping[id] = _objectSpread(_objectSpread({}, icon), {}, {\n      x: xOffset,\n      y: yOffset\n    });\n  }\n}\nexport function buildMapping(_ref) {\n  var icons = _ref.icons,\n    buffer = _ref.buffer,\n    _ref$mapping = _ref.mapping,\n    mapping = _ref$mapping === void 0 ? {} : _ref$mapping,\n    _ref$xOffset = _ref.xOffset,\n    xOffset = _ref$xOffset === void 0 ? 0 : _ref$xOffset,\n    _ref$yOffset = _ref.yOffset,\n    yOffset = _ref$yOffset === void 0 ? 0 : _ref$yOffset,\n    _ref$rowHeight = _ref.rowHeight,\n    rowHeight = _ref$rowHeight === void 0 ? 0 : _ref$rowHeight,\n    canvasWidth = _ref.canvasWidth;\n  var columns = [];\n  for (var i = 0; i < icons.length; i++) {\n    var icon = icons[i];\n    var id = getIconId(icon);\n    if (!mapping[id]) {\n      var height = icon.height,\n        width = icon.width;\n      if (xOffset + width + buffer > canvasWidth) {\n        buildRowMapping(mapping, columns, yOffset);\n        xOffset = 0;\n        yOffset = rowHeight + yOffset + buffer;\n        rowHeight = 0;\n        columns = [];\n      }\n      columns.push({\n        icon: icon,\n        xOffset: xOffset\n      });\n      xOffset = xOffset + width + buffer;\n      rowHeight = Math.max(rowHeight, height);\n    }\n  }\n  if (columns.length > 0) {\n    buildRowMapping(mapping, columns, yOffset);\n  }\n  return {\n    mapping: mapping,\n    rowHeight: rowHeight,\n    xOffset: xOffset,\n    yOffset: yOffset,\n    canvasWidth: canvasWidth,\n    canvasHeight: nextPowOfTwo(rowHeight + yOffset + buffer)\n  };\n}\nexport function getDiffIcons(data, getIcon, cachedIcons) {\n  if (!data || !getIcon) {\n    return null;\n  }\n  cachedIcons = cachedIcons || {};\n  var icons = {};\n  var _createIterable = createIterable(data),\n    iterable = _createIterable.iterable,\n    objectInfo = _createIterable.objectInfo;\n  var _iterator = _createForOfIteratorHelper(iterable),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var object = _step.value;\n      objectInfo.index++;\n      var icon = getIcon(object, objectInfo);\n      var id = getIconId(icon);\n      if (!icon) {\n        throw new Error('Icon is missing.');\n      }\n      if (!icon.url) {\n        throw new Error('Icon url is missing.');\n      }\n      if (!icons[id] && (!cachedIcons[id] || icon.url !== cachedIcons[id].url)) {\n        icons[id] = _objectSpread(_objectSpread({}, icon), {}, {\n          source: object,\n          sourceIndex: objectInfo.index\n        });\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return icons;\n}\nvar IconManager = /*#__PURE__*/function () {\n  function IconManager(gl, _ref2) {\n    var _ref2$onUpdate = _ref2.onUpdate,\n      onUpdate = _ref2$onUpdate === void 0 ? noop : _ref2$onUpdate,\n      _ref2$onError = _ref2.onError,\n      onError = _ref2$onError === void 0 ? noop : _ref2$onError;\n    _classCallCheck(this, IconManager);\n    _defineProperty(this, \"gl\", void 0);\n    _defineProperty(this, \"onUpdate\", void 0);\n    _defineProperty(this, \"onError\", void 0);\n    _defineProperty(this, \"_loadOptions\", null);\n    _defineProperty(this, \"_texture\", null);\n    _defineProperty(this, \"_externalTexture\", null);\n    _defineProperty(this, \"_mapping\", {});\n    _defineProperty(this, \"_textureParameters\", null);\n    _defineProperty(this, \"_pendingCount\", 0);\n    _defineProperty(this, \"_autoPacking\", false);\n    _defineProperty(this, \"_xOffset\", 0);\n    _defineProperty(this, \"_yOffset\", 0);\n    _defineProperty(this, \"_rowHeight\", 0);\n    _defineProperty(this, \"_buffer\", DEFAULT_BUFFER);\n    _defineProperty(this, \"_canvasWidth\", DEFAULT_CANVAS_WIDTH);\n    _defineProperty(this, \"_canvasHeight\", 0);\n    _defineProperty(this, \"_canvas\", null);\n    this.gl = gl;\n    this.onUpdate = onUpdate;\n    this.onError = onError;\n  }\n  _createClass(IconManager, [{\n    key: \"finalize\",\n    value: function finalize() {\n      var _this$_texture;\n      (_this$_texture = this._texture) === null || _this$_texture === void 0 ? void 0 : _this$_texture.delete();\n    }\n  }, {\n    key: \"getTexture\",\n    value: function getTexture() {\n      return this._texture || this._externalTexture;\n    }\n  }, {\n    key: \"getIconMapping\",\n    value: function getIconMapping(icon) {\n      var id = this._autoPacking ? getIconId(icon) : icon;\n      return this._mapping[id] || {};\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(_ref3) {\n      var loadOptions = _ref3.loadOptions,\n        autoPacking = _ref3.autoPacking,\n        iconAtlas = _ref3.iconAtlas,\n        iconMapping = _ref3.iconMapping,\n        textureParameters = _ref3.textureParameters;\n      if (loadOptions) {\n        this._loadOptions = loadOptions;\n      }\n      if (autoPacking !== undefined) {\n        this._autoPacking = autoPacking;\n      }\n      if (iconMapping) {\n        this._mapping = iconMapping;\n      }\n      if (iconAtlas) {\n        var _this$_texture2;\n        (_this$_texture2 = this._texture) === null || _this$_texture2 === void 0 ? void 0 : _this$_texture2.delete();\n        this._texture = null;\n        this._externalTexture = iconAtlas;\n      }\n      if (textureParameters) {\n        this._textureParameters = textureParameters;\n      }\n    }\n  }, {\n    key: \"isLoaded\",\n    get: function get() {\n      return this._pendingCount === 0;\n    }\n  }, {\n    key: \"packIcons\",\n    value: function packIcons(data, getIcon) {\n      if (!this._autoPacking || typeof document === 'undefined') {\n        return;\n      }\n      var icons = Object.values(getDiffIcons(data, getIcon, this._mapping) || {});\n      if (icons.length > 0) {\n        var _buildMapping = buildMapping({\n            icons: icons,\n            buffer: this._buffer,\n            canvasWidth: this._canvasWidth,\n            mapping: this._mapping,\n            rowHeight: this._rowHeight,\n            xOffset: this._xOffset,\n            yOffset: this._yOffset\n          }),\n          mapping = _buildMapping.mapping,\n          xOffset = _buildMapping.xOffset,\n          yOffset = _buildMapping.yOffset,\n          rowHeight = _buildMapping.rowHeight,\n          canvasHeight = _buildMapping.canvasHeight;\n        this._rowHeight = rowHeight;\n        this._mapping = mapping;\n        this._xOffset = xOffset;\n        this._yOffset = yOffset;\n        this._canvasHeight = canvasHeight;\n        if (!this._texture) {\n          this._texture = new Texture2D(this.gl, {\n            width: this._canvasWidth,\n            height: this._canvasHeight,\n            parameters: this._textureParameters || DEFAULT_TEXTURE_PARAMETERS\n          });\n        }\n        if (this._texture.height !== this._canvasHeight) {\n          this._texture = resizeTexture(this._texture, this._canvasWidth, this._canvasHeight, this._textureParameters || DEFAULT_TEXTURE_PARAMETERS);\n        }\n        this.onUpdate();\n        this._canvas = this._canvas || document.createElement('canvas');\n        this._loadIcons(icons);\n      }\n    }\n  }, {\n    key: \"_loadIcons\",\n    value: function _loadIcons(icons) {\n      var _this = this;\n      var ctx = this._canvas.getContext('2d');\n      var _iterator2 = _createForOfIteratorHelper(icons),\n        _step2;\n      try {\n        var _loop = function _loop() {\n          var icon = _step2.value;\n          _this._pendingCount++;\n          load(icon.url, ImageLoader, _this._loadOptions).then(function (imageData) {\n            var id = getIconId(icon);\n            var _this$_mapping$id = _this._mapping[id],\n              x = _this$_mapping$id.x,\n              y = _this$_mapping$id.y,\n              width = _this$_mapping$id.width,\n              height = _this$_mapping$id.height;\n            var data = resizeImage(ctx, imageData, width, height);\n            _this._texture.setSubImageData({\n              data: data,\n              x: x,\n              y: y,\n              width: width,\n              height: height\n            });\n            _this._texture.generateMipmap();\n            _this.onUpdate();\n          }).catch(function (error) {\n            _this.onError({\n              url: icon.url,\n              source: icon.source,\n              sourceIndex: icon.sourceIndex,\n              loadOptions: _this._loadOptions,\n              error: error\n            });\n          }).finally(function () {\n            _this._pendingCount--;\n          });\n        };\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }]);\n  return IconManager;\n}();\nexport { IconManager as default };","map":{"version":3,"names":["Texture2D","copyToTexture","ImageLoader","load","createIterable","DEFAULT_CANVAS_WIDTH","DEFAULT_BUFFER","noop","DEFAULT_TEXTURE_PARAMETERS","_DEFAULT_TEXTURE_PARA","_defineProperty2","nextPowOfTwo","number","Math","pow","ceil","log2","resizeImage","ctx","imageData","width","height","canvas","clearRect","drawImage","getIconId","icon","id","url","resizeTexture","texture","parameters","oldWidth","oldHeight","newTexture","gl","targetY","delete","buildRowMapping","mapping","columns","yOffset","i","length","_columns$i","xOffset","_objectSpread","x","y","buildMapping","_ref","icons","buffer","_ref$mapping","_ref$xOffset","_ref$yOffset","_ref$rowHeight","rowHeight","canvasWidth","push","max","canvasHeight","getDiffIcons","data","getIcon","cachedIcons","_createIterable","iterable","objectInfo","_iterator","_createForOfIteratorHelper","_step","s","n","done","object","value","index","Error","source","sourceIndex","err","e","f","IconManager","_ref2","_ref2$onUpdate","onUpdate","_ref2$onError","onError","_classCallCheck","_defineProperty","_createClass","key","finalize","_this$_texture","_texture","getTexture","_externalTexture","getIconMapping","_autoPacking","_mapping","setProps","_ref3","loadOptions","autoPacking","iconAtlas","iconMapping","textureParameters","_loadOptions","undefined","_this$_texture2","_textureParameters","get","_pendingCount","packIcons","document","Object","values","_buildMapping","_buffer","_canvasWidth","_rowHeight","_xOffset","_yOffset","_canvasHeight","_canvas","createElement","_loadIcons","_this","getContext","_iterator2","_step2","_loop","then","_this$_mapping$id","setSubImageData","generateMipmap","catch","error","finally","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/layers/src/icon-layer/icon-manager.ts"],"sourcesContent":["/* global document */\nimport GL from '@luma.gl/constants';\nimport {Texture2D, copyToTexture} from '@luma.gl/core';\nimport {ImageLoader} from '@loaders.gl/images';\nimport {load} from '@loaders.gl/core';\nimport {createIterable} from '@deck.gl/core';\n\nimport type {AccessorFunction} from '@deck.gl/core';\n\nconst DEFAULT_CANVAS_WIDTH = 1024;\nconst DEFAULT_BUFFER = 4;\n\nconst noop = () => {};\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n  // GL.LINEAR is the default value but explicitly set it here\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  // for texture boundary artifact\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\ntype IconDef = {\n  /** Width of the icon */\n  width: number;\n  /** Height of the icon */\n  height: number;\n  /** Horizontal position of icon anchor. Default: half width. */\n  anchorX?: number;\n  /** Vertical position of icon anchor. Default: half height. */\n  anchorY?: number;\n  /**\n   * Whether the icon is treated as a transparency mask.\n   * If `true`, color defined by `getColor` is applied.\n   * If `false`, pixel color from the icon image is applied.\n   * @default false\n   */\n  mask?: boolean;\n};\n\nexport type UnpackedIcon = {\n  /** Url to fetch the icon */\n  url: string;\n  /** Unique identifier of the icon. Icons of the same id are only fetched once. Fallback to `url` if not specified. */\n  id?: string;\n} & IconDef;\n\ntype PrepackedIcon = {\n  /** Left position of the icon on the atlas */\n  x: number;\n  /** Top position of the icon on the atlas */\n  y: number;\n} & IconDef;\n\nexport type IconMapping = Record<string, PrepackedIcon>;\n\nexport type LoadIconErrorContext = {\n  error: Error;\n  /** The URL that was trying to fetch */\n  url: string;\n  /** The original data object that requested this icon */\n  source: any;\n  /** The index of the original data object that requested this icon */\n  sourceIndex: number;\n  /** The load options used for the fetch */\n  loadOptions: any;\n};\n\nfunction nextPowOfTwo(number: number): number {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\n// update comment to create a new texture and copy original data.\nfunction resizeImage(\n  ctx: CanvasRenderingContext2D,\n  imageData: HTMLImageElement | ImageBitmap,\n  width: number,\n  height: number\n): HTMLImageElement | HTMLCanvasElement | ImageBitmap {\n  if (width === imageData.width && height === imageData.height) {\n    return imageData;\n  }\n\n  ctx.canvas.height = height;\n  ctx.canvas.width = width;\n\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  // image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight\n  ctx.drawImage(imageData, 0, 0, imageData.width, imageData.height, 0, 0, width, height);\n\n  return ctx.canvas;\n}\n\nfunction getIconId(icon: UnpackedIcon): string {\n  return icon && (icon.id || icon.url);\n}\n\n// resize texture without losing original data\nfunction resizeTexture(\n  texture: Texture2D,\n  width: number,\n  height: number,\n  parameters: any\n): Texture2D {\n  const oldWidth = texture.width;\n  const oldHeight = texture.height;\n\n  const newTexture = new Texture2D(texture.gl, {width, height, parameters});\n  copyToTexture(texture, newTexture, {\n    targetY: 0,\n    width: oldWidth,\n    height: oldHeight\n  });\n\n  texture.delete();\n  return newTexture;\n}\n\n// traverse icons in a row of icon atlas\n// extend each icon with left-top coordinates\nfunction buildRowMapping(\n  mapping: IconMapping,\n  columns: {\n    icon: UnpackedIcon;\n    xOffset: number;\n  }[],\n  yOffset: number\n): void {\n  for (let i = 0; i < columns.length; i++) {\n    const {icon, xOffset} = columns[i];\n    const id = getIconId(icon);\n    mapping[id] = {\n      ...icon,\n      x: xOffset,\n      y: yOffset\n    };\n  }\n}\n\n/**\n * Generate coordinate mapping to retrieve icon left-top position from an icon atlas\n */\nexport function buildMapping({\n  icons,\n  buffer,\n  mapping = {},\n  xOffset = 0,\n  yOffset = 0,\n  rowHeight = 0,\n  canvasWidth\n}: {\n  /** list of icon definitions */\n  icons: UnpackedIcon[];\n  /** add bleeding buffer to the right and bottom side of the image */\n  buffer: number;\n  /** right position of last icon in old mapping */\n  xOffset: number;\n  /** top position in last icon in old mapping */\n  yOffset: number;\n  /** height of the last icon's row */\n  rowHeight: number;\n  /** max width of canvas */\n  canvasWidth: number;\n  mapping: IconMapping;\n}): {\n  mapping: IconMapping;\n  rowHeight: number;\n  xOffset: number;\n  yOffset: number;\n  canvasWidth: number;\n  canvasHeight: number;\n} {\n  let columns: {\n    icon: UnpackedIcon;\n    xOffset: number;\n  }[] = [];\n  // Strategy to layout all the icons into a texture:\n  // traverse the icons sequentially, layout the icons from left to right, top to bottom\n  // when the sum of the icons width is equal or larger than canvasWidth,\n  // move to next row starting from total height so far plus max height of the icons in previous row\n  // row width is equal to canvasWidth\n  // row height is decided by the max height of the icons in that row\n  // mapping coordinates of each icon is its left-top position in the texture\n  for (let i = 0; i < icons.length; i++) {\n    const icon = icons[i];\n    const id = getIconId(icon);\n\n    if (!mapping[id]) {\n      const {height, width} = icon;\n\n      // fill one row\n      if (xOffset + width + buffer > canvasWidth) {\n        buildRowMapping(mapping, columns, yOffset);\n\n        xOffset = 0;\n        yOffset = rowHeight + yOffset + buffer;\n        rowHeight = 0;\n        columns = [];\n      }\n\n      columns.push({\n        icon,\n        xOffset\n      });\n\n      xOffset = xOffset + width + buffer;\n      rowHeight = Math.max(rowHeight, height);\n    }\n  }\n\n  if (columns.length > 0) {\n    buildRowMapping(mapping, columns, yOffset);\n  }\n\n  return {\n    mapping,\n    rowHeight,\n    xOffset,\n    yOffset,\n    canvasWidth,\n    canvasHeight: nextPowOfTwo(rowHeight + yOffset + buffer)\n  };\n}\n\n// extract icons from data\n// return icons should be unique, and not cached or cached but url changed\nexport function getDiffIcons(\n  data: any,\n  getIcon: AccessorFunction<any, UnpackedIcon> | null,\n  cachedIcons: Record<string, PrepackedIcon & {url?: string}>\n): Record<\n  string,\n  UnpackedIcon & {\n    source: any;\n    sourceIndex: number;\n  }\n> | null {\n  if (!data || !getIcon) {\n    return null;\n  }\n\n  cachedIcons = cachedIcons || {};\n  const icons = {};\n  const {iterable, objectInfo} = createIterable(data);\n  for (const object of iterable) {\n    objectInfo.index++;\n    const icon = getIcon(object, objectInfo);\n    const id = getIconId(icon);\n\n    if (!icon) {\n      throw new Error('Icon is missing.');\n    }\n\n    if (!icon.url) {\n      throw new Error('Icon url is missing.');\n    }\n\n    if (!icons[id] && (!cachedIcons[id] || icon.url !== cachedIcons[id].url)) {\n      icons[id] = {...icon, source: object, sourceIndex: objectInfo.index};\n    }\n  }\n  return icons;\n}\n\nexport default class IconManager {\n  gl: WebGLRenderingContext;\n\n  private onUpdate: () => void;\n  private onError: (context: LoadIconErrorContext) => void;\n  private _loadOptions: any = null;\n  private _texture: Texture2D | null = null;\n  private _externalTexture: Texture2D | null = null;\n  private _mapping: IconMapping = {};\n  private _textureParameters: Record<number, number> | null = null;\n\n  /** count of pending requests to fetch icons */\n  private _pendingCount: number = 0;\n\n  private _autoPacking: boolean = false;\n\n  // / internal state used for autoPacking\n\n  private _xOffset: number = 0;\n  private _yOffset: number = 0;\n  private _rowHeight: number = 0;\n  private _buffer: number = DEFAULT_BUFFER;\n  private _canvasWidth: number = DEFAULT_CANVAS_WIDTH;\n  private _canvasHeight: number = 0;\n  private _canvas: HTMLCanvasElement | null = null;\n\n  constructor(\n    gl: WebGLRenderingContext,\n    {\n      onUpdate = noop,\n      onError = noop\n    }: {\n      /** Callback when the texture updates */\n      onUpdate: () => void;\n      /** Callback when an error is encountered */\n      onError: (context: LoadIconErrorContext) => void;\n    }\n  ) {\n    this.gl = gl;\n    this.onUpdate = onUpdate;\n    this.onError = onError;\n  }\n\n  finalize(): void {\n    this._texture?.delete();\n  }\n\n  getTexture(): Texture2D | null {\n    return this._texture || this._externalTexture;\n  }\n\n  getIconMapping(icon: string | UnpackedIcon): PrepackedIcon {\n    const id = this._autoPacking ? getIconId(icon as UnpackedIcon) : (icon as string);\n    return this._mapping[id] || {};\n  }\n\n  setProps({\n    loadOptions,\n    autoPacking,\n    iconAtlas,\n    iconMapping,\n    textureParameters\n  }: {\n    loadOptions?: any;\n    autoPacking?: boolean;\n    iconAtlas?: Texture2D | null;\n    iconMapping?: IconMapping | null;\n    textureParameters?: Record<number, number> | null;\n  }) {\n    if (loadOptions) {\n      this._loadOptions = loadOptions;\n    }\n\n    if (autoPacking !== undefined) {\n      this._autoPacking = autoPacking;\n    }\n\n    if (iconMapping) {\n      this._mapping = iconMapping;\n    }\n\n    if (iconAtlas) {\n      this._texture?.delete();\n      this._texture = null;\n      this._externalTexture = iconAtlas;\n    }\n\n    if (textureParameters) {\n      this._textureParameters = textureParameters;\n    }\n  }\n\n  get isLoaded(): boolean {\n    return this._pendingCount === 0;\n  }\n\n  packIcons(data: any, getIcon: AccessorFunction<any, UnpackedIcon>): void {\n    if (!this._autoPacking || typeof document === 'undefined') {\n      return;\n    }\n\n    const icons = Object.values(getDiffIcons(data, getIcon, this._mapping) || {});\n\n    if (icons.length > 0) {\n      // generate icon mapping\n      const {mapping, xOffset, yOffset, rowHeight, canvasHeight} = buildMapping({\n        icons,\n        buffer: this._buffer,\n        canvasWidth: this._canvasWidth,\n        mapping: this._mapping,\n        rowHeight: this._rowHeight,\n        xOffset: this._xOffset,\n        yOffset: this._yOffset\n      });\n\n      this._rowHeight = rowHeight;\n      this._mapping = mapping;\n      this._xOffset = xOffset;\n      this._yOffset = yOffset;\n      this._canvasHeight = canvasHeight;\n\n      // create new texture\n      if (!this._texture) {\n        this._texture = new Texture2D(this.gl, {\n          width: this._canvasWidth,\n          height: this._canvasHeight,\n          parameters: this._textureParameters || DEFAULT_TEXTURE_PARAMETERS\n        });\n      }\n\n      if (this._texture.height !== this._canvasHeight) {\n        this._texture = resizeTexture(\n          this._texture,\n          this._canvasWidth,\n          this._canvasHeight,\n          this._textureParameters || DEFAULT_TEXTURE_PARAMETERS\n        );\n      }\n\n      this.onUpdate();\n\n      // load images\n      this._canvas = this._canvas || document.createElement('canvas');\n      this._loadIcons(icons);\n    }\n  }\n\n  private _loadIcons(\n    icons: (UnpackedIcon & {\n      source: any;\n      sourceIndex: number;\n    })[]\n  ): void {\n    // This method is only called in the auto packing case, where _canvas is defined\n    const ctx = this._canvas!.getContext('2d') as CanvasRenderingContext2D;\n\n    for (const icon of icons) {\n      this._pendingCount++;\n      load(icon.url, ImageLoader, this._loadOptions)\n        .then(imageData => {\n          const id = getIconId(icon);\n          const {x, y, width, height} = this._mapping[id];\n\n          const data = resizeImage(ctx, imageData, width, height);\n\n          this._texture.setSubImageData({\n            data,\n            x,\n            y,\n            width,\n            height\n          });\n\n          // Call to regenerate mipmaps after modifying texture(s)\n          this._texture.generateMipmap();\n\n          this.onUpdate();\n        })\n        .catch(error => {\n          this.onError({\n            url: icon.url,\n            source: icon.source,\n            sourceIndex: icon.sourceIndex,\n            loadOptions: this._loadOptions,\n            error\n          });\n        })\n        .finally(() => {\n          this._pendingCount--;\n        });\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}