{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport WorkerFarm from '../worker-farm/worker-farm';\nimport { getWorkerURL, getWorkerName } from './get-worker-url';\nimport { getTransferListForWriter } from '../worker-utils/get-transfer-list';\nexport function canProcessOnWorker(worker, options) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n  return worker.worker && (options === null || options === void 0 ? void 0 : options.worker);\n}\nexport function processOnWorker(_x, _x2) {\n  return _processOnWorker.apply(this, arguments);\n}\nfunction _processOnWorker() {\n  _processOnWorker = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(worker, data) {\n    var options,\n      context,\n      name,\n      workerFarm,\n      source,\n      workerPoolProps,\n      workerPool,\n      jobName,\n      job,\n      transferableOptions,\n      result,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n          context = _args.length > 3 && _args[3] !== undefined ? _args[3] : {};\n          name = getWorkerName(worker);\n          workerFarm = WorkerFarm.getWorkerFarm(options);\n          source = options.source;\n          workerPoolProps = {\n            name: name,\n            source: source\n          };\n          if (!source) {\n            workerPoolProps.url = getWorkerURL(worker, options);\n          }\n          workerPool = workerFarm.getWorkerPool(workerPoolProps);\n          jobName = options.jobName || worker.name;\n          _context.next = 11;\n          return workerPool.startJob(jobName, onMessage.bind(null, context));\n        case 11:\n          job = _context.sent;\n          transferableOptions = getTransferListForWriter(options);\n          job.postMessage('process', {\n            input: data,\n            options: transferableOptions\n          });\n          _context.next = 16;\n          return job.result;\n        case 16:\n          result = _context.sent;\n          return _context.abrupt(\"return\", result.result);\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _processOnWorker.apply(this, arguments);\n}\nfunction onMessage(_x3, _x4, _x5, _x6) {\n  return _onMessage.apply(this, arguments);\n}\nfunction _onMessage() {\n  _onMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(context, job, type, payload) {\n    var id, input, options, result, message;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.t0 = type;\n          _context2.next = _context2.t0 === 'done' ? 3 : _context2.t0 === 'error' ? 5 : _context2.t0 === 'process' ? 7 : 23;\n          break;\n        case 3:\n          job.done(payload);\n          return _context2.abrupt(\"break\", 24);\n        case 5:\n          job.error(new Error(payload.error));\n          return _context2.abrupt(\"break\", 24);\n        case 7:\n          id = payload.id, input = payload.input, options = payload.options;\n          _context2.prev = 8;\n          if (context.process) {\n            _context2.next = 12;\n            break;\n          }\n          job.postMessage('error', {\n            id: id,\n            error: 'Worker not set up to process on main thread'\n          });\n          return _context2.abrupt(\"return\");\n        case 12:\n          _context2.next = 14;\n          return context.process(input, options);\n        case 14:\n          result = _context2.sent;\n          job.postMessage('done', {\n            id: id,\n            result: result\n          });\n          _context2.next = 22;\n          break;\n        case 18:\n          _context2.prev = 18;\n          _context2.t1 = _context2[\"catch\"](8);\n          message = _context2.t1 instanceof Error ? _context2.t1.message : 'unknown error';\n          job.postMessage('error', {\n            id: id,\n            error: message\n          });\n        case 22:\n          return _context2.abrupt(\"break\", 24);\n        case 23:\n          console.warn(\"process-on-worker: unknown message \".concat(type));\n        case 24:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[8, 18]]);\n  }));\n  return _onMessage.apply(this, arguments);\n}","map":{"version":3,"names":["WorkerFarm","getWorkerURL","getWorkerName","getTransferListForWriter","canProcessOnWorker","worker","options","isSupported","processOnWorker","_x","_x2","_processOnWorker","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","context","name","workerFarm","source","workerPoolProps","workerPool","jobName","job","transferableOptions","result","_args","wrap","_callee$","_context","prev","next","length","undefined","getWorkerFarm","url","getWorkerPool","startJob","onMessage","bind","sent","postMessage","input","abrupt","stop","_x3","_x4","_x5","_x6","_onMessage","_callee2","type","payload","id","message","_callee2$","_context2","t0","done","error","Error","process","t1","console","warn","concat"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/worker-utils/src/lib/worker-api/process-on-worker.ts"],"sourcesContent":["import type {\n  WorkerObject,\n  WorkerOptions,\n  WorkerContext,\n  WorkerMessageType,\n  WorkerMessagePayload\n} from '../../types';\nimport type WorkerJob from '../worker-farm/worker-job';\nimport WorkerFarm from '../worker-farm/worker-farm';\nimport {getWorkerURL, getWorkerName} from './get-worker-url';\nimport {getTransferListForWriter} from '../worker-utils/get-transfer-list';\n\ntype ProcessOnWorkerOptions = WorkerOptions & {\n  jobName?: string;\n  [key: string]: any;\n};\n\n/**\n * Determines if we can parse with worker\n * @param loader\n * @param data\n * @param options\n */\nexport function canProcessOnWorker(worker: WorkerObject, options?: WorkerOptions) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n\n  return worker.worker && options?.worker;\n}\n\n/**\n * This function expects that the worker thread sends certain messages,\n * Creating such a worker can be automated if the worker is wrapper by a call to\n * createWorker in @loaders.gl/worker-utils.\n */\nexport async function processOnWorker(\n  worker: WorkerObject,\n  data: any,\n  options: ProcessOnWorkerOptions = {},\n  context: WorkerContext = {}\n): Promise<any> {\n  const name = getWorkerName(worker);\n\n  const workerFarm = WorkerFarm.getWorkerFarm(options);\n  const {source} = options;\n  const workerPoolProps: {name: string; source?: string; url?: string} = {name, source};\n  if (!source) {\n    workerPoolProps.url = getWorkerURL(worker, options);\n  }\n  const workerPool = workerFarm.getWorkerPool(workerPoolProps);\n\n  const jobName = options.jobName || worker.name;\n  const job = await workerPool.startJob(\n    jobName,\n    // eslint-disable-next-line\n    onMessage.bind(null, context)\n  );\n\n  // Kick off the processing in the worker\n  const transferableOptions = getTransferListForWriter(options);\n  job.postMessage('process', {input: data, options: transferableOptions});\n\n  const result = await job.result;\n  return result.result;\n}\n\n/**\n * Job completes when we receive the result\n * @param job\n * @param message\n */\nasync function onMessage(\n  context: WorkerContext,\n  job: WorkerJob,\n  type: WorkerMessageType,\n  payload: WorkerMessagePayload\n) {\n  switch (type) {\n    case 'done':\n      // Worker is done\n      job.done(payload);\n      break;\n\n    case 'error':\n      // Worker encountered an error\n      job.error(new Error(payload.error));\n      break;\n\n    case 'process':\n      // Worker is asking for us (main thread) to process something\n      const {id, input, options} = payload;\n      try {\n        if (!context.process) {\n          job.postMessage('error', {id, error: 'Worker not set up to process on main thread'});\n          return;\n        }\n        const result = await context.process(input, options);\n        job.postMessage('done', {id, result});\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'unknown error';\n        job.postMessage('error', {id, error: message});\n      }\n      break;\n\n    default:\n      // eslint-disable-next-line\n      console.warn(`process-on-worker: unknown message ${type}`);\n  }\n}\n"],"mappings":";;AAQA,OAAOA,UAAU,MAAM,4BAA4B;AACnD,SAAQC,YAAY,EAAEC,aAAa,QAAO,kBAAkB;AAC5D,SAAQC,wBAAwB,QAAO,mCAAmC;AAa1E,OAAO,SAASC,kBAAkBA,CAACC,MAAoB,EAAEC,OAAuB,EAAE;EAChF,IAAI,CAACN,UAAU,CAACO,WAAW,EAAE,EAAE;IAC7B,OAAO,KAAK;EACd;EAEA,OAAOF,MAAM,CAACA,MAAM,KAAIC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAED,MAAM;AACzC;AAOA,gBAAsBG,eAAeA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,gBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AA6BrC,SAAAF,iBAAA;EAAAA,gBAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CA7BO,SAAAC,QACLZ,MAAoB,EACpBa,IAAS;IAAA,IAAAZ,OAAA;MAAAa,OAAA;MAAAC,IAAA;MAAAC,UAAA;MAAAC,MAAA;MAAAC,eAAA;MAAAC,UAAA;MAAAC,OAAA;MAAAC,GAAA;MAAAC,mBAAA;MAAAC,MAAA;MAAAC,KAAA,GAAAhB,SAAA;IAAA,OAAAE,mBAAA,GAAAe,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UACT5B,OAA+B,GAAAuB,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAAG,CAAC,CAAC;UACpCV,OAAsB,GAAAU,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAAG,CAAC,CAAC;UAErBT,IAAI,GAAGlB,aAAa,CAACG,MAAM,CAAC;UAE5BgB,UAAU,GAAGrB,UAAU,CAACqC,aAAa,CAAC/B,OAAO,CAAC;UAC7CgB,MAAA,GAAUhB,OAAO,CAAjBgB,MAAA;UACDC,eAA8D,GAAG;YAACH,IAAI,EAAJA,IAAI;YAAEE,MAAA,EAAAA;UAAM,CAAC;UACrF,IAAI,CAACA,MAAM,EAAE;YACXC,eAAe,CAACe,GAAG,GAAGrC,YAAY,CAACI,MAAM,EAAEC,OAAO,CAAC;UACrD;UACMkB,UAAU,GAAGH,UAAU,CAACkB,aAAa,CAAChB,eAAe,CAAC;UAEtDE,OAAO,GAAGnB,OAAO,CAACmB,OAAO,IAAIpB,MAAM,CAACe,IAAI;UAAAY,QAAA,CAAAE,IAAA;UAAA,OAC5BV,UAAU,CAACgB,QAAQ,CACnCf,OAAO,EAEPgB,SAAS,CAACC,IAAI,CAAC,IAAI,EAAEvB,OAAO,CAAC,CAC9B;QAAA;UAJKO,GAAG,GAAAM,QAAA,CAAAW,IAAA;UAOHhB,mBAAmB,GAAGxB,wBAAwB,CAACG,OAAO,CAAC;UAC7DoB,GAAG,CAACkB,WAAW,CAAC,SAAS,EAAE;YAACC,KAAK,EAAE3B,IAAI;YAAEZ,OAAO,EAAEqB;UAAmB,CAAC,CAAC;UAAAK,QAAA,CAAAE,IAAA;UAAA,OAElDR,GAAG,CAACE,MAAM;QAAA;UAAzBA,MAAM,GAAAI,QAAA,CAAAW,IAAA;UAAA,OAAAX,QAAA,CAAAc,MAAA,WACLlB,MAAM,CAACA,MAAM;QAAA;QAAA;UAAA,OAAAI,QAAA,CAAAe,IAAA;MAAA;IAAA,GAAA9B,OAAA;EAAA,CACtB;EAAA,OAAAN,gBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAOe4B,SAASA,CAAAO,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,UAAA,CAAAxC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAuC,WAAA;EAAAA,UAAA,GAAAtC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAxB,SAAAqC,SACElC,OAAsB,EACtBO,GAAc,EACd4B,IAAuB,EACvBC,OAA6B;IAAA,IAAAC,EAAA,EAAAX,KAAA,EAAAvC,OAAA,EAAAsB,MAAA,EAAA6B,OAAA;IAAA,OAAA1C,mBAAA,GAAAe,IAAA,UAAA4B,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAA1B,IAAA,GAAA0B,SAAA,CAAAzB,IAAA;QAAA;UAAAyB,SAAA,CAAAC,EAAA,GAErBN,IAAI;UAAAK,SAAA,CAAAzB,IAAA,GAAAyB,SAAA,CAAAC,EAAA,KACL,MAAM,OAAAD,SAAA,CAAAC,EAAA,KAKN,OAAO,OAAAD,SAAA,CAAAC,EAAA,KAKP,SAAS;UAAA;QAAA;UARZlC,GAAG,CAACmC,IAAI,CAACN,OAAO,CAAC;UAAA,OAAAI,SAAA,CAAAb,MAAA;QAAA;UAKjBpB,GAAG,CAACoC,KAAK,CAAC,IAAIC,KAAK,CAACR,OAAO,CAACO,KAAK,CAAC,CAAC;UAAA,OAAAH,SAAA,CAAAb,MAAA;QAAA;UAK5BU,EAAE,GAAoBD,OAAO,CAA7BC,EAAE,EAAEX,KAAK,GAAaU,OAAO,CAAzBV,KAAK,EAAEvC,OAAA,GAAWiD,OAAO,CAAlBjD,OAAA;UAAAqD,SAAA,CAAA1B,IAAA;UAAA,IAEXd,OAAO,CAAC6C,OAAO;YAAAL,SAAA,CAAAzB,IAAA;YAAA;UAAA;UAClBR,GAAG,CAACkB,WAAW,CAAC,OAAO,EAAE;YAACY,EAAE,EAAFA,EAAE;YAAEM,KAAK,EAAE;UAA6C,CAAC,CAAC;UAAA,OAAAH,SAAA,CAAAb,MAAA;QAAA;UAAAa,SAAA,CAAAzB,IAAA;UAAA,OAGjEf,OAAO,CAAC6C,OAAO,CAACnB,KAAK,EAAEvC,OAAO,CAAC;QAAA;UAA9CsB,MAAM,GAAA+B,SAAA,CAAAhB,IAAA;UACZjB,GAAG,CAACkB,WAAW,CAAC,MAAM,EAAE;YAACY,EAAE,EAAFA,EAAE;YAAE5B,MAAA,EAAAA;UAAM,CAAC,CAAC;UAAA+B,SAAA,CAAAzB,IAAA;UAAA;QAAA;UAAAyB,SAAA,CAAA1B,IAAA;UAAA0B,SAAA,CAAAM,EAAA,GAAAN,SAAA;UAE/BF,OAAO,GAAGE,SAAA,CAAAM,EAAA,YAAiBF,KAAK,GAAGJ,SAAA,CAAAM,EAAA,CAAMR,OAAO,GAAG,eAAe;UACxE/B,GAAG,CAACkB,WAAW,CAAC,OAAO,EAAE;YAACY,EAAE,EAAFA,EAAE;YAAEM,KAAK,EAAEL;UAAO,CAAC,CAAC;QAAA;UAAA,OAAAE,SAAA,CAAAb,MAAA;QAAA;UAMhDoB,OAAO,CAACC,IAAI,uCAAAC,MAAA,CAAuCd,IAAI,EAAG;QAAA;QAAA;UAAA,OAAAK,SAAA,CAAAZ,IAAA;MAAA;IAAA,GAAAM,QAAA;EAAA,CAEhE;EAAA,OAAAD,UAAA,CAAAxC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}