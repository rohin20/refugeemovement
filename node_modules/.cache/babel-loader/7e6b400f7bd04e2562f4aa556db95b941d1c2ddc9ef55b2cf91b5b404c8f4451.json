{"ast":null,"code":"import _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Vector3, Matrix4, assert } from '@math.gl/core';\nimport CullingVolume from './culling-volume';\nimport Plane from './plane';\nvar scratchPlaneUpVector = new Vector3();\nvar scratchPlaneRightVector = new Vector3();\nvar scratchPlaneNearCenter = new Vector3();\nvar scratchPlaneFarCenter = new Vector3();\nvar scratchPlaneNormal = new Vector3();\nvar PerspectiveOffCenterFrustum = /*#__PURE__*/function () {\n  function PerspectiveOffCenterFrustum() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, PerspectiveOffCenterFrustum);\n    _defineProperty(this, \"left\", void 0);\n    _defineProperty(this, \"_left\", void 0);\n    _defineProperty(this, \"right\", void 0);\n    _defineProperty(this, \"_right\", void 0);\n    _defineProperty(this, \"top\", void 0);\n    _defineProperty(this, \"_top\", void 0);\n    _defineProperty(this, \"bottom\", void 0);\n    _defineProperty(this, \"_bottom\", void 0);\n    _defineProperty(this, \"near\", void 0);\n    _defineProperty(this, \"_near\", void 0);\n    _defineProperty(this, \"far\", void 0);\n    _defineProperty(this, \"_far\", void 0);\n    _defineProperty(this, \"_cullingVolume\", new CullingVolume([new Plane(), new Plane(), new Plane(), new Plane(), new Plane(), new Plane()]));\n    _defineProperty(this, \"_perspectiveMatrix\", new Matrix4());\n    _defineProperty(this, \"_infinitePerspective\", new Matrix4());\n    var _options$near = options.near,\n      near = _options$near === void 0 ? 1.0 : _options$near,\n      _options$far = options.far,\n      far = _options$far === void 0 ? 500000000.0 : _options$far;\n    this.left = options.left;\n    this._left = undefined;\n    this.right = options.right;\n    this._right = undefined;\n    this.top = options.top;\n    this._top = undefined;\n    this.bottom = options.bottom;\n    this._bottom = undefined;\n    this.near = near;\n    this._near = near;\n    this.far = far;\n    this._far = far;\n  }\n  _createClass(PerspectiveOffCenterFrustum, [{\n    key: \"clone\",\n    value: function clone() {\n      return new PerspectiveOffCenterFrustum({\n        right: this.right,\n        left: this.left,\n        top: this.top,\n        bottom: this.bottom,\n        near: this.near,\n        far: this.far\n      });\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return other && other instanceof PerspectiveOffCenterFrustum && this.right === other.right && this.left === other.left && this.top === other.top && this.bottom === other.bottom && this.near === other.near && this.far === other.far;\n    }\n  }, {\n    key: \"projectionMatrix\",\n    get: function get() {\n      this._update();\n      return this._perspectiveMatrix;\n    }\n  }, {\n    key: \"infiniteProjectionMatrix\",\n    get: function get() {\n      this._update();\n      return this._infinitePerspective;\n    }\n  }, {\n    key: \"computeCullingVolume\",\n    value: function computeCullingVolume(position, direction, up) {\n      assert(position, 'position is required.');\n      assert(direction, 'direction is required.');\n      assert(up, 'up is required.');\n      var planes = this._cullingVolume.planes;\n      up = scratchPlaneUpVector.copy(up).normalize();\n      var right = scratchPlaneRightVector.copy(direction).cross(up).normalize();\n      var nearCenter = scratchPlaneNearCenter.copy(direction).multiplyByScalar(this.near).add(position);\n      var farCenter = scratchPlaneFarCenter.copy(direction).multiplyByScalar(this.far).add(position);\n      var normal = scratchPlaneNormal;\n      normal.copy(right).multiplyByScalar(this.left).add(nearCenter).subtract(position).cross(up);\n      planes[0].fromPointNormal(position, normal);\n      normal.copy(right).multiplyByScalar(this.right).add(nearCenter).subtract(position).cross(up).negate();\n      planes[1].fromPointNormal(position, normal);\n      normal.copy(up).multiplyByScalar(this.bottom).add(nearCenter).subtract(position).cross(right).negate();\n      planes[2].fromPointNormal(position, normal);\n      normal.copy(up).multiplyByScalar(this.top).add(nearCenter).subtract(position).cross(right);\n      planes[3].fromPointNormal(position, normal);\n      normal = new Vector3().copy(direction);\n      planes[4].fromPointNormal(nearCenter, normal);\n      normal.negate();\n      planes[5].fromPointNormal(farCenter, normal);\n      return this._cullingVolume;\n    }\n  }, {\n    key: \"getPixelDimensions\",\n    value: function getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, result) {\n      this._update();\n      assert(Number.isFinite(drawingBufferWidth) && Number.isFinite(drawingBufferHeight));\n      assert(drawingBufferWidth > 0);\n      assert(drawingBufferHeight > 0);\n      assert(distance > 0);\n      assert(result);\n      var inverseNear = 1.0 / this.near;\n      var tanTheta = this.top * inverseNear;\n      var pixelHeight = 2.0 * distance * tanTheta / drawingBufferHeight;\n      tanTheta = this.right * inverseNear;\n      var pixelWidth = 2.0 * distance * tanTheta / drawingBufferWidth;\n      result.x = pixelWidth;\n      result.y = pixelHeight;\n      return result;\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      assert(Number.isFinite(this.right) && Number.isFinite(this.left) && Number.isFinite(this.top) && Number.isFinite(this.bottom) && Number.isFinite(this.near) && Number.isFinite(this.far));\n      var top = this.top,\n        bottom = this.bottom,\n        right = this.right,\n        left = this.left,\n        near = this.near,\n        far = this.far;\n      if (top !== this._top || bottom !== this._bottom || left !== this._left || right !== this._right || near !== this._near || far !== this._far) {\n        assert(this.near > 0 && this.near < this.far, 'near must be greater than zero and less than far.');\n        this._left = left;\n        this._right = right;\n        this._top = top;\n        this._bottom = bottom;\n        this._near = near;\n        this._far = far;\n        this._perspectiveMatrix = new Matrix4().frustum({\n          left: left,\n          right: right,\n          bottom: bottom,\n          top: top,\n          near: near,\n          far: far\n        });\n        this._infinitePerspective = new Matrix4().frustum({\n          left: left,\n          right: right,\n          bottom: bottom,\n          top: top,\n          near: near,\n          far: Infinity\n        });\n      }\n    }\n  }]);\n  return PerspectiveOffCenterFrustum;\n}();\nexport { PerspectiveOffCenterFrustum as default };","map":{"version":3,"names":["Vector3","Matrix4","assert","CullingVolume","Plane","scratchPlaneUpVector","scratchPlaneRightVector","scratchPlaneNearCenter","scratchPlaneFarCenter","scratchPlaneNormal","PerspectiveOffCenterFrustum","options","arguments","length","undefined","_classCallCheck","_defineProperty","_options$near","near","_options$far","far","left","_left","right","_right","top","_top","bottom","_bottom","_near","_far","_createClass","key","value","clone","equals","other","get","_update","_perspectiveMatrix","_infinitePerspective","computeCullingVolume","position","direction","up","planes","_cullingVolume","copy","normalize","cross","nearCenter","multiplyByScalar","add","farCenter","normal","subtract","fromPointNormal","negate","getPixelDimensions","drawingBufferWidth","drawingBufferHeight","distance","result","Number","isFinite","inverseNear","tanTheta","pixelHeight","pixelWidth","x","y","frustum","Infinity","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@math.gl/culling/src/lib/perspective-off-center-frustum.ts"],"sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n// Note: This class is still an experimental export, mainly used by other test cases\n// - It has not been fully adapted to math.gl conventions\n// - Documentation has not been ported\n\nimport {Vector3, Vector2, Matrix4, assert, NumericArray} from '@math.gl/core';\nimport CullingVolume from './culling-volume';\nimport Plane from './plane';\n\nconst scratchPlaneUpVector = new Vector3();\nconst scratchPlaneRightVector = new Vector3();\nconst scratchPlaneNearCenter = new Vector3();\nconst scratchPlaneFarCenter = new Vector3();\nconst scratchPlaneNormal = new Vector3();\n\ntype PerspectiveOffCenterFrustumOptions = {\n  left?: number;\n  right?: number;\n  top?: number;\n  bottom?: number;\n  near?: number;\n  far?: number;\n};\n\nexport default class PerspectiveOffCenterFrustum {\n  /**\n   * Defines the left clipping plane.\n   * @type {Number}\n   * @default undefined\n   */\n  left?: number;\n  private _left?: number;\n  /**\n   * Defines the right clipping plane.\n   * @type {Number}\n   * @default undefined\n   */\n  right?: number;\n  private _right?: number;\n  /**\n   * Defines the top clipping plane.\n   * @type {Number}\n   * @default undefined\n   */\n  top?: number;\n  private _top?: number;\n  /**\n   * Defines the bottom clipping plane.\n   * @type {Number}\n   * @default undefined\n   */\n  bottom?: number;\n  private _bottom?: number;\n  /**\n   * The distance of the near plane.\n   * @type {Number}\n   * @default 1.0\n   */\n  near: number;\n  private _near: number;\n  /**\n   * The distance of the far plane.\n   * @type {Number}\n   * @default 500000000.0\n   */\n  far: number;\n  private _far: number;\n\n  private _cullingVolume = new CullingVolume([\n    new Plane(),\n    new Plane(),\n    new Plane(),\n    new Plane(),\n    new Plane(),\n    new Plane()\n  ]);\n  private _perspectiveMatrix = new Matrix4();\n  private _infinitePerspective = new Matrix4();\n\n  /**\n   * The viewing frustum is defined by 6 planes.\n   * Each plane is represented by a {@link Vector4} object, where the x, y, and z components\n   * define the unit vector normal to the plane, and the w component is the distance of the\n   * plane from the origin/camera position.\n   *\n   * @alias PerspectiveOffCenterFrustum\n   *\n   * @example\n   * const frustum = new PerspectiveOffCenterFrustum({\n   *     left : -1.0,\n   *     right : 1.0,\n   *     top : 1.0,\n   *     bottom : -1.0,\n   *     near : 1.0,\n   *     far : 100.0\n   * });\n   *\n   * @see PerspectiveFrustum\n   */\n  constructor(options: PerspectiveOffCenterFrustumOptions = {}) {\n    const {near = 1.0, far = 500000000.0} = options;\n\n    this.left = options.left;\n    this._left = undefined;\n\n    this.right = options.right;\n    this._right = undefined;\n\n    this.top = options.top;\n    this._top = undefined;\n\n    this.bottom = options.bottom;\n    this._bottom = undefined;\n\n    this.near = near;\n    this._near = near;\n\n    this.far = far;\n    this._far = far;\n  }\n\n  /**\n   * Returns a duplicate of a PerspectiveOffCenterFrustum instance.\n   * @returns {PerspectiveOffCenterFrustum} A new PerspectiveFrustum instance.\n   * */\n  clone(): PerspectiveOffCenterFrustum {\n    return new PerspectiveOffCenterFrustum({\n      right: this.right,\n      left: this.left,\n      top: this.top,\n      bottom: this.bottom,\n      near: this.near,\n      far: this.far\n    });\n  }\n\n  /**\n   * Compares the provided PerspectiveOffCenterFrustum componentwise and returns\n   * <code>true</code> if they are equal, <code>false</code> otherwise.\n   *\n   * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n   */\n  equals(other: PerspectiveOffCenterFrustum): boolean {\n    return (\n      other &&\n      other instanceof PerspectiveOffCenterFrustum &&\n      this.right === other.right &&\n      this.left === other.left &&\n      this.top === other.top &&\n      this.bottom === other.bottom &&\n      this.near === other.near &&\n      this.far === other.far\n    );\n  }\n\n  /**\n   * Gets the perspective projection matrix computed from the view frustum.\n   * @memberof PerspectiveOffCenterFrustum.prototype\n   * @type {Matrix4}\n   *\n   * @see PerspectiveOffCenterFrustum#infiniteProjectionMatrix\n   */\n  get projectionMatrix(): Matrix4 {\n    this._update();\n    return this._perspectiveMatrix;\n  }\n\n  /**\n   * Gets the perspective projection matrix computed from the view frustum with an infinite far plane.\n   * @memberof PerspectiveOffCenterFrustum.prototype\n   * @type {Matrix4}\n   *\n   * @see PerspectiveOffCenterFrustum#projectionMatrix\n   */\n  get infiniteProjectionMatrix(): Matrix4 {\n    this._update();\n    return this._infinitePerspective;\n  }\n\n  /**\n   * Creates a culling volume for this frustum.\n   * @returns {CullingVolume} A culling volume at the given position and orientation.\n   *\n   * @example\n   * // Check if a bounding volume intersects the frustum.\n   * const cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\n   * const intersect = cullingVolume.computeVisibility(boundingVolume);\n   */\n  // eslint-disable-next-line complexity, max-statements\n  computeCullingVolume(\n    /** A Vector3 defines the eye position. */\n    position: Readonly<NumericArray>,\n    /** A Vector3 defines the view direction. */\n    direction: Readonly<NumericArray>,\n    /** A Vector3 defines the up direction. */\n    up: Readonly<NumericArray>\n  ): CullingVolume {\n    assert(position, 'position is required.');\n    assert(direction, 'direction is required.');\n    assert(up, 'up is required.');\n\n    const planes = this._cullingVolume.planes;\n\n    up = scratchPlaneUpVector.copy(up).normalize();\n    const right = scratchPlaneRightVector.copy(direction).cross(up).normalize();\n\n    const nearCenter = scratchPlaneNearCenter\n      .copy(direction)\n      .multiplyByScalar(this.near)\n      .add(position);\n\n    const farCenter = scratchPlaneFarCenter\n      .copy(direction)\n      .multiplyByScalar(this.far)\n      .add(position);\n\n    let normal = scratchPlaneNormal;\n\n    // Left plane computation\n    normal.copy(right).multiplyByScalar(this.left).add(nearCenter).subtract(position).cross(up);\n\n    planes[0].fromPointNormal(position, normal);\n\n    // Right plane computation\n    normal\n      .copy(right)\n      .multiplyByScalar(this.right)\n      .add(nearCenter)\n      .subtract(position)\n      .cross(up)\n      .negate();\n\n    planes[1].fromPointNormal(position, normal);\n\n    // Bottom plane computation\n    normal\n      .copy(up)\n      .multiplyByScalar(this.bottom)\n      .add(nearCenter)\n      .subtract(position)\n      .cross(right)\n      .negate();\n\n    planes[2].fromPointNormal(position, normal);\n\n    // Top plane computation\n    normal.copy(up).multiplyByScalar(this.top).add(nearCenter).subtract(position).cross(right);\n\n    planes[3].fromPointNormal(position, normal);\n\n    normal = new Vector3().copy(direction);\n\n    // Near plane computation\n    planes[4].fromPointNormal(nearCenter, normal);\n\n    // Far plane computation\n    normal.negate();\n\n    planes[5].fromPointNormal(farCenter, normal);\n\n    return this._cullingVolume;\n  }\n\n  /**\n   * Returns the pixel's width and height in meters.\n   *\n   * @returns {Vector2} The modified result parameter or a new instance of {@link Vector2} with the pixel's width and height in the x and y properties, respectively.\n   *\n   * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\n   * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\n   *\n   * @example\n   * // Example 1\n   * // Get the width and height of a pixel.\n   * const pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 1.0, new Vector2());\n   *\n   * @example\n   * // Example 2\n   * // Get the width and height of a pixel if the near plane was set to 'distance'.\n   * // For example, get the size of a pixel of an image on a billboard.\n   * const position = camera.position;\n   * const direction = camera.direction;\n   * const toCenter = Vector3.subtract(primitive.boundingVolume.center, position, new Vector3());      // vector from camera to a primitive\n   * const toCenterProj = Vector3.multiplyByScalar(direction, Vector3.dot(direction, toCenter), new Vector3()); // project vector onto camera direction vector\n   * const distance = Vector3.magnitude(toCenterProj);\n   * const pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, distance, new Vector2());\n   */\n  getPixelDimensions(\n    /** The width of the drawing buffer. */\n    drawingBufferWidth: number,\n    /** The height of the drawing buffer. */\n    drawingBufferHeight: number,\n    /** The distance to the near plane in meters. */\n    distance: number,\n    /** The object onto which to store the result. */\n    result: Vector2\n  ): Vector2 {\n    this._update();\n\n    assert(Number.isFinite(drawingBufferWidth) && Number.isFinite(drawingBufferHeight));\n    // 'Both drawingBufferWidth and drawingBufferHeight are required.'\n    assert(drawingBufferWidth > 0);\n    // 'drawingBufferWidth must be greater than zero.'\n    assert(drawingBufferHeight > 0);\n    // 'drawingBufferHeight must be greater than zero.'\n    assert(distance > 0);\n    // 'distance is required.');\n    assert(result);\n    // 'A result object is required.');\n\n    const inverseNear = 1.0 / this.near;\n    let tanTheta = this.top * inverseNear;\n    const pixelHeight = (2.0 * distance * tanTheta) / drawingBufferHeight;\n    tanTheta = this.right * inverseNear;\n    const pixelWidth = (2.0 * distance * tanTheta) / drawingBufferWidth;\n\n    result.x = pixelWidth;\n    result.y = pixelHeight;\n    return result;\n  }\n\n  // eslint-disable-next-line complexity, max-statements\n  private _update() {\n    assert(\n      Number.isFinite(this.right) &&\n        Number.isFinite(this.left) &&\n        Number.isFinite(this.top) &&\n        Number.isFinite(this.bottom) &&\n        Number.isFinite(this.near) &&\n        Number.isFinite(this.far)\n    );\n    // throw new DeveloperError('right, left, top, bottom, near, or far parameters are not set.');\n\n    const {top, bottom, right, left, near, far} = this;\n\n    if (\n      top !== this._top ||\n      bottom !== this._bottom ||\n      left !== this._left ||\n      right !== this._right ||\n      near !== this._near ||\n      far !== this._far\n    ) {\n      assert(\n        this.near > 0 && this.near < this.far,\n        'near must be greater than zero and less than far.'\n      );\n\n      this._left = left;\n      this._right = right;\n      this._top = top;\n      this._bottom = bottom;\n      this._near = near;\n      this._far = far;\n      this._perspectiveMatrix = new Matrix4().frustum({\n        left,\n        right,\n        bottom,\n        top,\n        near,\n        far\n      });\n      this._infinitePerspective = new Matrix4().frustum({\n        left,\n        right,\n        bottom,\n        top,\n        near,\n        far: Infinity\n      });\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}