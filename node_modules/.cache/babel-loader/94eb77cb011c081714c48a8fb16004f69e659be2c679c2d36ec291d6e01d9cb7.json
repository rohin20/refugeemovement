{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { CompositeLayer, createIterable, log } from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\nimport { replaceInRange } from '../utils';\nvar defaultLineColor = [0, 0, 0, 255];\nvar defaultFillColor = [0, 0, 0, 255];\nvar defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n  getPolygon: {\n    type: 'accessor',\n    value: function value(f) {\n      return f.polygon;\n    }\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: defaultFillColor\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: defaultLineColor\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  material: true\n};\nvar PolygonLayer = /*#__PURE__*/function (_CompositeLayer) {\n  _inherits(PolygonLayer, _CompositeLayer);\n  var _super = _createSuper(PolygonLayer);\n  function PolygonLayer() {\n    _classCallCheck(this, PolygonLayer);\n    return _super.apply(this, arguments);\n  }\n  _createClass(PolygonLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        paths: []\n      };\n      if (this.props.getLineDashArray) {\n        log.removed('getLineDashArray', 'PathStyleExtension')();\n      }\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var _this = this;\n      var changeFlags = _ref.changeFlags;\n      var geometryChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon);\n      if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {\n        var paths = this.state.paths.slice();\n        var pathsDiff = changeFlags.dataChanged.map(function (dataRange) {\n          return replaceInRange({\n            data: paths,\n            getIndex: function getIndex(p) {\n              return p.__source.index;\n            },\n            dataRange: dataRange,\n            replace: _this._getPaths(dataRange)\n          });\n        });\n        this.setState({\n          paths: paths,\n          pathsDiff: pathsDiff\n        });\n      } else if (geometryChanged) {\n        this.setState({\n          paths: this._getPaths(),\n          pathsDiff: null\n        });\n      }\n    }\n  }, {\n    key: \"_getPaths\",\n    value: function _getPaths() {\n      var dataRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _this$props = this.props,\n        data = _this$props.data,\n        getPolygon = _this$props.getPolygon,\n        positionFormat = _this$props.positionFormat,\n        _normalize = _this$props._normalize;\n      var paths = [];\n      var positionSize = positionFormat === 'XY' ? 2 : 3;\n      var startRow = dataRange.startRow,\n        endRow = dataRange.endRow;\n      var _createIterable = createIterable(data, startRow, endRow),\n        iterable = _createIterable.iterable,\n        objectInfo = _createIterable.objectInfo;\n      var _iterator = _createForOfIteratorHelper(iterable),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var object = _step.value;\n          objectInfo.index++;\n          var polygon = getPolygon(object, objectInfo);\n          if (_normalize) {\n            polygon = Polygon.normalize(polygon, positionSize);\n          }\n          var _polygon = polygon,\n            holeIndices = _polygon.holeIndices;\n          var positions = polygon.positions || polygon;\n          if (holeIndices) {\n            for (var i = 0; i <= holeIndices.length; i++) {\n              var path = positions.slice(holeIndices[i - 1] || 0, holeIndices[i] || positions.length);\n              paths.push(this.getSubLayerRow({\n                path: path\n              }, object, objectInfo.index));\n            }\n          } else {\n            paths.push(this.getSubLayerRow({\n              path: positions\n            }, object, objectInfo.index));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return paths;\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props2 = this.props,\n        data = _this$props2.data,\n        _dataDiff = _this$props2._dataDiff,\n        stroked = _this$props2.stroked,\n        filled = _this$props2.filled,\n        extruded = _this$props2.extruded,\n        wireframe = _this$props2.wireframe,\n        _normalize = _this$props2._normalize,\n        _windingOrder = _this$props2._windingOrder,\n        elevationScale = _this$props2.elevationScale,\n        transitions = _this$props2.transitions,\n        positionFormat = _this$props2.positionFormat;\n      var _this$props3 = this.props,\n        lineWidthUnits = _this$props3.lineWidthUnits,\n        lineWidthScale = _this$props3.lineWidthScale,\n        lineWidthMinPixels = _this$props3.lineWidthMinPixels,\n        lineWidthMaxPixels = _this$props3.lineWidthMaxPixels,\n        lineJointRounded = _this$props3.lineJointRounded,\n        lineMiterLimit = _this$props3.lineMiterLimit,\n        lineDashJustified = _this$props3.lineDashJustified;\n      var _this$props4 = this.props,\n        getFillColor = _this$props4.getFillColor,\n        getLineColor = _this$props4.getLineColor,\n        getLineWidth = _this$props4.getLineWidth,\n        getLineDashArray = _this$props4.getLineDashArray,\n        getElevation = _this$props4.getElevation,\n        getPolygon = _this$props4.getPolygon,\n        updateTriggers = _this$props4.updateTriggers,\n        material = _this$props4.material;\n      var _this$state = this.state,\n        paths = _this$state.paths,\n        pathsDiff = _this$state.pathsDiff;\n      var FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n      var StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n      var polygonLayer = this.shouldRenderSubLayer('fill', paths) && new FillLayer({\n        _dataDiff: _dataDiff,\n        extruded: extruded,\n        elevationScale: elevationScale,\n        filled: filled,\n        wireframe: wireframe,\n        _normalize: _normalize,\n        _windingOrder: _windingOrder,\n        getElevation: getElevation,\n        getFillColor: getFillColor,\n        getLineColor: extruded && wireframe ? getLineColor : defaultLineColor,\n        material: material,\n        transitions: transitions\n      }, this.getSubLayerProps({\n        id: 'fill',\n        updateTriggers: updateTriggers && {\n          getPolygon: updateTriggers.getPolygon,\n          getElevation: updateTriggers.getElevation,\n          getFillColor: updateTriggers.getFillColor,\n          lineColors: extruded && wireframe,\n          getLineColor: updateTriggers.getLineColor\n        }\n      }), {\n        data: data,\n        positionFormat: positionFormat,\n        getPolygon: getPolygon\n      });\n      var polygonLineLayer = !extruded && stroked && this.shouldRenderSubLayer('stroke', paths) && new StrokeLayer({\n        _dataDiff: pathsDiff && function () {\n          return pathsDiff;\n        },\n        widthUnits: lineWidthUnits,\n        widthScale: lineWidthScale,\n        widthMinPixels: lineWidthMinPixels,\n        widthMaxPixels: lineWidthMaxPixels,\n        jointRounded: lineJointRounded,\n        miterLimit: lineMiterLimit,\n        dashJustified: lineDashJustified,\n        _pathType: 'loop',\n        transitions: transitions && {\n          getWidth: transitions.getLineWidth,\n          getColor: transitions.getLineColor,\n          getPath: transitions.getPolygon\n        },\n        getColor: this.getSubLayerAccessor(getLineColor),\n        getWidth: this.getSubLayerAccessor(getLineWidth),\n        getDashArray: this.getSubLayerAccessor(getLineDashArray)\n      }, this.getSubLayerProps({\n        id: 'stroke',\n        updateTriggers: updateTriggers && {\n          getWidth: updateTriggers.getLineWidth,\n          getColor: updateTriggers.getLineColor,\n          getDashArray: updateTriggers.getLineDashArray\n        }\n      }), {\n        data: paths,\n        positionFormat: positionFormat,\n        getPath: function getPath(x) {\n          return x.path;\n        }\n      });\n      return [!extruded && polygonLayer, polygonLineLayer, extruded && polygonLayer];\n    }\n  }]);\n  return PolygonLayer;\n}(CompositeLayer);\nexport { PolygonLayer as default };\n_defineProperty(PolygonLayer, \"layerName\", 'PolygonLayer');\n_defineProperty(PolygonLayer, \"defaultProps\", defaultProps);","map":{"version":3,"names":["CompositeLayer","createIterable","log","SolidPolygonLayer","PathLayer","Polygon","replaceInRange","defaultLineColor","defaultFillColor","defaultProps","stroked","filled","extruded","elevationScale","wireframe","_normalize","_windingOrder","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","getPolygon","type","value","f","polygon","getFillColor","getLineColor","getLineWidth","getElevation","material","PolygonLayer","_CompositeLayer","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","initializeState","state","paths","props","getLineDashArray","removed","updateState","_ref","_this","changeFlags","geometryChanged","dataChanged","updateTriggersChanged","all","Array","isArray","slice","pathsDiff","map","dataRange","data","getIndex","p","__source","index","replace","_getPaths","setState","length","undefined","_this$props","positionFormat","positionSize","startRow","endRow","_createIterable","iterable","objectInfo","_iterator","_createForOfIteratorHelper","_step","s","n","done","object","normalize","_polygon","holeIndices","positions","i","path","push","getSubLayerRow","err","e","renderLayers","_this$props2","_dataDiff","transitions","_this$props3","lineDashJustified","_this$props4","updateTriggers","_this$state","FillLayer","getSubLayerClass","StrokeLayer","polygonLayer","shouldRenderSubLayer","getSubLayerProps","id","lineColors","polygonLineLayer","widthUnits","widthScale","widthMinPixels","widthMaxPixels","jointRounded","miterLimit","dashJustified","_pathType","getWidth","getColor","getPath","getSubLayerAccessor","getDashArray","x","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/layers/src/polygon-layer/polygon-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Accessor,\n  AccessorFunction,\n  Color,\n  CompositeLayer,\n  CompositeLayerProps,\n  createIterable,\n  Layer,\n  LayersList,\n  log,\n  Unit,\n  Material,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\nimport {replaceInRange} from '../utils';\n\n/**\n * All properties supported by `PolygonLayer`.\n */\nexport type PolygonLayerProps<DataT = any> = _PolygonLayerProps<DataT> & CompositeLayerProps<DataT>;\n\n/**\n * Properties added by `PolygonLayer`.\n */\ntype _PolygonLayerProps<DataT = any> = {\n  /**\n   * Whether to draw an outline around the polygon (solid fill).\n   *\n   * Note that both the outer polygon as well the outlines of any holes will be drawn.\n   *\n   * @default true\n   */\n  stroked?: boolean;\n\n  /**\n   * Whether to draw a filled polygon (solid fill).\n   *\n   * Note that only the area between the outer polygon and any holes will be filled.\n   *\n   * @default true\n   */\n  filled?: boolean;\n\n  /**\n   * Whether to extrude the polygons.\n   *\n   * Based on the elevations provided by the `getElevation` accessor.\n   *\n   * If set to `false`, all polygons will be flat, this generates less geometry and is faster\n   * than simply returning 0 from getElevation.\n   *\n   * @default false\n   */\n  extruded?: boolean;\n\n  /**\n   * Elevation multiplier.\n   *\n   * The final elevation is calculated by `elevationScale * getElevation(d)`.\n   * `elevationScale` is a handy property to scale all elevation without updating the data.\n   *\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /**\n   * Whether to generate a line wireframe of the hexagon.\n   *\n   * The outline will have \"horizontal\" lines closing the top and bottom polygons and a vertical\n   * line (a \"strut\") for each vertex on the polygon.\n   *\n   * @default false\n   */\n  wireframe?: boolean;\n\n  /**\n   * The units of the line width, one of `meters`, `common`, and `pixels`.\n   *\n   * @default 'meters'\n   * @see Unit.\n   */\n  lineWidthUnits?: Unit;\n\n  /**\n   * The line width multiplier that multiplied to all outlines of `Polygon` and `MultiPolygon`\n   * features if the stroked attribute is true.\n   *\n   * @default 1\n   */\n  lineWidthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   *\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels\n   *\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Type of joint. If `true`, draw round joints. Otherwise draw miter joints.\n   *\n   * @default false\n   */\n  lineJointRounded?: boolean;\n\n  /**\n   * The maximum extent of a joint in ratio to the stroke width.\n   *\n   * Only works if `lineJointRounded` is false.\n   *\n   * @default 4\n   */\n  lineMiterLimit?: number;\n\n  lineDashJustified?: boolean;\n\n  /** Called on each object in the data stream to retrieve its corresponding polygon. */\n  getPolygon?: AccessorFunction<DataT, any>;\n\n  /**\n   * Fill collor value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line color value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line width value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineWidth?: Accessor<DataT, number>;\n\n  /**\n   * Elevation valur or accessor.\n   *\n   * Only used if `extruded: true`.\n   *\n   * @default 1000\n   */\n  getElevation?: Accessor<DataT, number>;\n\n  /**\n   * This property has been moved to `PathStyleExtension`.\n   *\n   * @deprecated\n   */\n  getLineDashArray?: Accessor<DataT, number> | null;\n\n  /**\n   * If `false`, will skip normalizing the coordinates returned by `getPolygon`.\n   *\n   * **Note**: This prop is experimental\n   *\n   * @default true\n   */\n  _normalize?: boolean;\n\n  /**\n   * Specifies the winding order of rings in the polygon data.\n   *\n   * **Note**: This prop is experimental\n   *\n   * @default 'CW'\n   */\n  _windingOrder?: 'CW' | 'CCW';\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n};\n\nconst defaultLineColor: [number, number, number, number] = [0, 0, 0, 255];\nconst defaultFillColor: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<PolygonLayerProps> = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point, line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n\n  // Optional material for 'lighting' shader module\n  material: true\n};\n\n/** A composite layer that renders filled, stroked and/or extruded polygons. */\nexport default class PolygonLayer<DataT = any, ExtraProps = {}> extends CompositeLayer<\n  Required<_PolygonLayerProps<DataT>> & ExtraProps\n> {\n  static layerName = 'PolygonLayer';\n  static defaultProps = defaultProps;\n\n  initializeState(): void {\n    this.state = {\n      paths: []\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({changeFlags}: UpdateParameters<this>) {\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {\n      const paths = this.state.paths.slice();\n      const pathsDiff = changeFlags.dataChanged.map(dataRange =>\n        replaceInRange({\n          data: paths,\n          getIndex: p => p.__source.index,\n          dataRange,\n          replace: this._getPaths(dataRange)\n        })\n      );\n      this.setState({paths, pathsDiff});\n    } else if (geometryChanged) {\n      this.setState({\n        paths: this._getPaths(),\n        pathsDiff: null\n      });\n    }\n  }\n\n  private _getPaths(dataRange: {startRow?: number; endRow?: number} = {}): {path: number[]}[] {\n    const {data, getPolygon, positionFormat, _normalize} = this.props;\n    const paths: {path: number[]}[] = [];\n    const positionSize = positionFormat === 'XY' ? 2 : 3;\n    const {startRow, endRow} = dataRange;\n\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      let polygon = getPolygon(object, objectInfo);\n      if (_normalize) {\n        polygon = Polygon.normalize(polygon, positionSize);\n      }\n      const {holeIndices} = polygon;\n      const positions = polygon.positions || polygon;\n\n      if (holeIndices) {\n        // split the positions array into `holeIndices.length + 1` rings\n        // holeIndices[-1] falls back to 0\n        // holeIndices[holeIndices.length] falls back to positions.length\n        for (let i = 0; i <= holeIndices.length; i++) {\n          const path = positions.slice(holeIndices[i - 1] || 0, holeIndices[i] || positions.length);\n          paths.push(this.getSubLayerRow({path}, object, objectInfo.index));\n        }\n      } else {\n        paths.push(this.getSubLayerRow({path: positions}, object, objectInfo.index));\n      }\n    }\n    return paths;\n  }\n\n  /* eslint-disable complexity */\n  renderLayers(): Layer | null | LayersList {\n    // Layer composition props\n    const {\n      data,\n      _dataDiff,\n      stroked,\n      filled,\n      extruded,\n      wireframe,\n      _normalize,\n      _windingOrder,\n      elevationScale,\n      transitions,\n      positionFormat\n    } = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      material\n    } = this.props;\n\n    const {paths, pathsDiff} = this.state;\n\n    const FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n    const StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n\n    // Filled Polygon Layer\n    const polygonLayer =\n      this.shouldRenderSubLayer('fill', paths) &&\n      new FillLayer(\n        {\n          _dataDiff,\n          extruded,\n          elevationScale,\n\n          filled,\n          wireframe,\n          _normalize,\n          _windingOrder,\n\n          getElevation,\n          getFillColor,\n          getLineColor: extruded && wireframe ? getLineColor : defaultLineColor,\n\n          material,\n          transitions\n        },\n        this.getSubLayerProps({\n          id: 'fill',\n          updateTriggers: updateTriggers && {\n            getPolygon: updateTriggers.getPolygon,\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            // using a legacy API to invalid lineColor attributes\n            // if (extruded && wireframe) has changed\n            lineColors: extruded && wireframe,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data,\n          positionFormat,\n          getPolygon\n        }\n      );\n\n    // Polygon line layer\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('stroke', paths) &&\n      new StrokeLayer(\n        {\n          _dataDiff: pathsDiff && (() => pathsDiff),\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          jointRounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          // Already normalized\n          _pathType: 'loop',\n\n          transitions: transitions && {\n            getWidth: transitions.getLineWidth,\n            getColor: transitions.getLineColor,\n            getPath: transitions.getPolygon\n          },\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray)\n        },\n        this.getSubLayerProps({\n          id: 'stroke',\n          updateTriggers: updateTriggers && {\n            getWidth: updateTriggers.getLineWidth,\n            getColor: updateTriggers.getLineColor,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: paths,\n          positionFormat,\n          getPath: x => x.path\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonLayer,\n      polygonLineLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}