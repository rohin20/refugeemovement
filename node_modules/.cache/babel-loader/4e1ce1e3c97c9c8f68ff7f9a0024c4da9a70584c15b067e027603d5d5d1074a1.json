{"ast":null,"code":"import { assert } from '@loaders.gl/loader-utils';\nexport function encode3DTileHeader(tile, dataView, byteOffset) {\n  var HEADER_SIZE = 12;\n  if (!dataView) {\n    return byteOffset + HEADER_SIZE;\n  }\n  var magic = tile.magic,\n    _tile$version = tile.version,\n    version = _tile$version === void 0 ? 1 : _tile$version,\n    _tile$byteLength = tile.byteLength,\n    byteLength = _tile$byteLength === void 0 ? 12 : _tile$byteLength;\n  assert(Array.isArray(magic) && Number.isFinite(version) && Number.isFinite(byteLength));\n  dataView.setUint8(byteOffset + 0, magic[0]);\n  dataView.setUint8(byteOffset + 1, magic[1]);\n  dataView.setUint8(byteOffset + 2, magic[2]);\n  dataView.setUint8(byteOffset + 3, magic[3]);\n  dataView.setUint32(byteOffset + 4, version, true);\n  dataView.setUint32(byteOffset + 8, byteLength, true);\n  byteOffset += HEADER_SIZE;\n  return byteOffset;\n}\nexport function encode3DTileByteLength(dataView, byteOffsetTileStart, byteLength) {\n  if (!dataView) {\n    return;\n  }\n  dataView.setUint32(byteOffsetTileStart + 8, byteLength, true);\n}","map":{"version":3,"names":["assert","encode3DTileHeader","tile","dataView","byteOffset","HEADER_SIZE","magic","_tile$version","version","_tile$byteLength","byteLength","Array","isArray","Number","isFinite","setUint8","setUint32","encode3DTileByteLength","byteOffsetTileStart"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/geo-layers/node_modules/@loaders.gl/3d-tiles/src/lib/encoders/helpers/encode-3d-tile-header.ts"],"sourcesContent":["// HELPER ENCODERS\nimport {assert} from '@loaders.gl/loader-utils';\n\nexport function encode3DTileHeader(tile, dataView, byteOffset) {\n  const HEADER_SIZE = 12;\n\n  if (!dataView) {\n    return byteOffset + HEADER_SIZE;\n  }\n\n  const {magic, version = 1, byteLength = 12} = tile;\n\n  assert(Array.isArray(magic) && Number.isFinite(version) && Number.isFinite(byteLength));\n\n  dataView.setUint8(byteOffset + 0, magic[0]);\n  dataView.setUint8(byteOffset + 1, magic[1]);\n  dataView.setUint8(byteOffset + 2, magic[2]);\n  dataView.setUint8(byteOffset + 3, magic[3]);\n  dataView.setUint32(byteOffset + 4, version, true); // version\n  dataView.setUint32(byteOffset + 8, byteLength, true); // byteLength\n\n  byteOffset += HEADER_SIZE;\n\n  return byteOffset;\n}\n\n// Bytelength is sometimes only known at the end of writing a tile\nexport function encode3DTileByteLength(dataView, byteOffsetTileStart, byteLength) {\n  if (!dataView) {\n    return;\n  }\n\n  dataView.setUint32(byteOffsetTileStart + 8, byteLength, true); // byteLength\n}\n"],"mappings":"AACA,SAAQA,MAAM,QAAO,0BAA0B;AAE/C,OAAO,SAASC,kBAAkBA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,UAAU,EAAE;EAC7D,IAAMC,WAAW,GAAG,EAAE;EAEtB,IAAI,CAACF,QAAQ,EAAE;IACb,OAAOC,UAAU,GAAGC,WAAW;EACjC;EAEA,IAAOC,KAAK,GAAkCJ,IAAI,CAA3CI,KAAK;IAAAC,aAAA,GAAkCL,IAAI,CAApCM,OAAO;IAAPA,OAAO,GAAAD,aAAA,cAAG,CAAC,GAAAA,aAAA;IAAAE,gBAAA,GAAqBP,IAAI,CAAvBQ,UAAU;IAAVA,UAAU,GAAAD,gBAAA,cAAG,KAAAA,gBAAA;EAExCT,MAAM,CAACW,KAAK,CAACC,OAAO,CAACN,KAAK,CAAC,IAAIO,MAAM,CAACC,QAAQ,CAACN,OAAO,CAAC,IAAIK,MAAM,CAACC,QAAQ,CAACJ,UAAU,CAAC,CAAC;EAEvFP,QAAQ,CAACY,QAAQ,CAACX,UAAU,GAAG,CAAC,EAAEE,KAAK,CAAC,CAAC,CAAC,CAAC;EAC3CH,QAAQ,CAACY,QAAQ,CAACX,UAAU,GAAG,CAAC,EAAEE,KAAK,CAAC,CAAC,CAAC,CAAC;EAC3CH,QAAQ,CAACY,QAAQ,CAACX,UAAU,GAAG,CAAC,EAAEE,KAAK,CAAC,CAAC,CAAC,CAAC;EAC3CH,QAAQ,CAACY,QAAQ,CAACX,UAAU,GAAG,CAAC,EAAEE,KAAK,CAAC,CAAC,CAAC,CAAC;EAC3CH,QAAQ,CAACa,SAAS,CAACZ,UAAU,GAAG,CAAC,EAAEI,OAAO,EAAE,IAAI,CAAC;EACjDL,QAAQ,CAACa,SAAS,CAACZ,UAAU,GAAG,CAAC,EAAEM,UAAU,EAAE,IAAI,CAAC;EAEpDN,UAAU,IAAIC,WAAW;EAEzB,OAAOD,UAAU;AACnB;AAGA,OAAO,SAASa,sBAAsBA,CAACd,QAAQ,EAAEe,mBAAmB,EAAER,UAAU,EAAE;EAChF,IAAI,CAACP,QAAQ,EAAE;IACb;EACF;EAEAA,QAAQ,CAACa,SAAS,CAACE,mBAAmB,GAAG,CAAC,EAAER,UAAU,EAAE,IAAI,CAAC;AAC/D"},"metadata":{},"sourceType":"module","externalDependencies":[]}