{"ast":null,"code":"import _slicedToArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _defineProperty from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _asyncToGenerator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(makeMeshPrimitiveIterator);\nimport { DracoLoader } from '@loaders.gl/draco';\nimport { sliceArrayBuffer } from '@loaders.gl/loader-utils';\nimport { default as Scenegraph } from '../api/gltf-scenegraph';\nimport { getGLTFAccessors, getGLTFAccessor } from '../gltf-utils/gltf-attribute-utils';\nvar KHR_DRACO_MESH_COMPRESSION = 'KHR_draco_mesh_compression';\nexport var name = KHR_DRACO_MESH_COMPRESSION;\nexport function preprocess(gltfData, options, context) {\n  var scenegraph = new Scenegraph(gltfData);\n  var _iterator = _createForOfIteratorHelper(makeMeshPrimitiveIterator(scenegraph)),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var primitive = _step.value;\n      if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {}\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\nexport function decode(_x, _x2, _x3) {\n  return _decode.apply(this, arguments);\n}\nfunction _decode() {\n  _decode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(gltfData, options, context) {\n    var _options$gltf, scenegraph, promises, _iterator5, _step5, primitive;\n    return _regeneratorRuntime().wrap(function _callee$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (options !== null && options !== void 0 && (_options$gltf = options.gltf) !== null && _options$gltf !== void 0 && _options$gltf.decompressMeshes) {\n            _context2.next = 2;\n            break;\n          }\n          return _context2.abrupt(\"return\");\n        case 2:\n          scenegraph = new Scenegraph(gltfData);\n          promises = [];\n          _iterator5 = _createForOfIteratorHelper(makeMeshPrimitiveIterator(scenegraph));\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              primitive = _step5.value;\n              if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {\n                promises.push(decompressPrimitive(scenegraph, primitive, options, context));\n              }\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n          _context2.next = 8;\n          return Promise.all(promises);\n        case 8:\n          scenegraph.removeExtension(KHR_DRACO_MESH_COMPRESSION);\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee);\n  }));\n  return _decode.apply(this, arguments);\n}\nexport function encode(gltfData) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var scenegraph = new Scenegraph(gltfData);\n  var _iterator2 = _createForOfIteratorHelper(scenegraph.json.meshes || []),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var mesh = _step2.value;\n      compressMesh(mesh, options);\n      scenegraph.addRequiredExtension(KHR_DRACO_MESH_COMPRESSION);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n}\nfunction decompressPrimitive(_x4, _x5, _x6, _x7) {\n  return _decompressPrimitive.apply(this, arguments);\n}\nfunction _decompressPrimitive() {\n  _decompressPrimitive = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(scenegraph, primitive, options, context) {\n    var dracoExtension, buffer, bufferCopy, parse, dracoOptions, decodedData, decodedAttributes, _i, _Object$entries, _Object$entries$_i, attributeName, decodedAttribute, accessorIndex, accessor;\n    return _regeneratorRuntime().wrap(function _callee2$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          dracoExtension = scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION);\n          if (dracoExtension) {\n            _context3.next = 3;\n            break;\n          }\n          return _context3.abrupt(\"return\");\n        case 3:\n          buffer = scenegraph.getTypedArrayForBufferView(dracoExtension.bufferView);\n          bufferCopy = sliceArrayBuffer(buffer.buffer, buffer.byteOffset);\n          parse = context.parse;\n          dracoOptions = _objectSpread({}, options);\n          delete dracoOptions['3d-tiles'];\n          _context3.next = 10;\n          return parse(bufferCopy, DracoLoader, dracoOptions, context);\n        case 10:\n          decodedData = _context3.sent;\n          decodedAttributes = getGLTFAccessors(decodedData.attributes);\n          for (_i = 0, _Object$entries = Object.entries(decodedAttributes); _i < _Object$entries.length; _i++) {\n            _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), attributeName = _Object$entries$_i[0], decodedAttribute = _Object$entries$_i[1];\n            if (attributeName in primitive.attributes) {\n              accessorIndex = primitive.attributes[attributeName];\n              accessor = scenegraph.getAccessor(accessorIndex);\n              if (accessor !== null && accessor !== void 0 && accessor.min && accessor !== null && accessor !== void 0 && accessor.max) {\n                decodedAttribute.min = accessor.min;\n                decodedAttribute.max = accessor.max;\n              }\n            }\n          }\n          primitive.attributes = decodedAttributes;\n          if (decodedData.indices) {\n            primitive.indices = getGLTFAccessor(decodedData.indices);\n          }\n          checkPrimitive(primitive);\n        case 16:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee2);\n  }));\n  return _decompressPrimitive.apply(this, arguments);\n}\nfunction compressMesh(attributes, indices) {\n  var _context$parseSync;\n  var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n  var options = arguments.length > 3 ? arguments[3] : undefined;\n  var context = arguments.length > 4 ? arguments[4] : undefined;\n  if (!options.DracoWriter) {\n    throw new Error('options.gltf.DracoWriter not provided');\n  }\n  var compressedData = options.DracoWriter.encodeSync({\n    attributes: attributes\n  });\n  var decodedData = context === null || context === void 0 ? void 0 : (_context$parseSync = context.parseSync) === null || _context$parseSync === void 0 ? void 0 : _context$parseSync.call(context, {\n    attributes: attributes\n  });\n  var fauxAccessors = options._addFauxAttributes(decodedData.attributes);\n  var bufferViewIndex = options.addBufferView(compressedData);\n  var glTFMesh = {\n    primitives: [{\n      attributes: fauxAccessors,\n      mode: mode,\n      extensions: _defineProperty({}, KHR_DRACO_MESH_COMPRESSION, {\n        bufferView: bufferViewIndex,\n        attributes: fauxAccessors\n      })\n    }]\n  };\n  return glTFMesh;\n}\nfunction checkPrimitive(primitive) {\n  if (!primitive.attributes && Object.keys(primitive.attributes).length > 0) {\n    throw new Error('glTF: Empty primitive detected: Draco decompression failure?');\n  }\n}\nfunction makeMeshPrimitiveIterator(scenegraph) {\n  var _iterator3, _step3, mesh, _iterator4, _step4, primitive;\n  return _regeneratorRuntime().wrap(function makeMeshPrimitiveIterator$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _iterator3 = _createForOfIteratorHelper(scenegraph.json.meshes || []);\n        _context.prev = 1;\n        _iterator3.s();\n      case 3:\n        if ((_step3 = _iterator3.n()).done) {\n          _context.next = 24;\n          break;\n        }\n        mesh = _step3.value;\n        _iterator4 = _createForOfIteratorHelper(mesh.primitives);\n        _context.prev = 6;\n        _iterator4.s();\n      case 8:\n        if ((_step4 = _iterator4.n()).done) {\n          _context.next = 14;\n          break;\n        }\n        primitive = _step4.value;\n        _context.next = 12;\n        return primitive;\n      case 12:\n        _context.next = 8;\n        break;\n      case 14:\n        _context.next = 19;\n        break;\n      case 16:\n        _context.prev = 16;\n        _context.t0 = _context[\"catch\"](6);\n        _iterator4.e(_context.t0);\n      case 19:\n        _context.prev = 19;\n        _iterator4.f();\n        return _context.finish(19);\n      case 22:\n        _context.next = 3;\n        break;\n      case 24:\n        _context.next = 29;\n        break;\n      case 26:\n        _context.prev = 26;\n        _context.t1 = _context[\"catch\"](1);\n        _iterator3.e(_context.t1);\n      case 29:\n        _context.prev = 29;\n        _iterator3.f();\n        return _context.finish(29);\n      case 32:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked, null, [[1, 26, 29, 32], [6, 16, 19, 22]]);\n}","map":{"version":3,"names":["makeMeshPrimitiveIterator","DracoLoader","sliceArrayBuffer","default","Scenegraph","getGLTFAccessors","getGLTFAccessor","KHR_DRACO_MESH_COMPRESSION","name","preprocess","gltfData","options","context","scenegraph","_iterator","_createForOfIteratorHelper","_step","s","n","done","primitive","value","getObjectExtension","err","e","f","decode","_x","_x2","_x3","_decode","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_options$gltf","promises","_iterator5","_step5","wrap","_callee$","_context2","prev","next","gltf","decompressMeshes","abrupt","push","decompressPrimitive","Promise","all","removeExtension","stop","encode","length","undefined","_iterator2","json","meshes","_step2","mesh","compressMesh","addRequiredExtension","_x4","_x5","_x6","_x7","_decompressPrimitive","_callee2","dracoExtension","buffer","bufferCopy","parse","dracoOptions","decodedData","decodedAttributes","_i","_Object$entries","_Object$entries$_i","attributeName","decodedAttribute","accessorIndex","accessor","_callee2$","_context3","getTypedArrayForBufferView","bufferView","byteOffset","_objectSpread","sent","attributes","Object","entries","_slicedToArray","getAccessor","min","max","indices","checkPrimitive","_context$parseSync","mode","DracoWriter","Error","compressedData","encodeSync","parseSync","call","fauxAccessors","_addFauxAttributes","bufferViewIndex","addBufferView","glTFMesh","primitives","extensions","_defineProperty","keys","_iterator3","_step3","_iterator4","_step4","makeMeshPrimitiveIterator$","_context","t0","finish","t1","_marked"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/gltf/src/lib/extensions/KHR_draco_mesh_compression.ts"],"sourcesContent":["// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression\n// Only TRIANGLES: 0x0004 and TRIANGLE_STRIP: 0x0005 are supported\n/* eslint-disable camelcase */\n\n/* eslint-disable camelcase */\nimport type {\n  GLTF,\n  GLTFAccessor,\n  GLTFMeshPrimitive,\n  GLTF_KHR_draco_mesh_compression\n} from '../types/gltf-types';\nimport type {GLTFLoaderOptions} from '../../gltf-loader';\n\nimport type {LoaderContext} from '@loaders.gl/loader-utils';\nimport {DracoLoader} from '@loaders.gl/draco';\nimport {DracoLoaderOptions, DracoMesh} from '@loaders.gl/draco';\nimport {sliceArrayBuffer} from '@loaders.gl/loader-utils';\nimport {default as Scenegraph} from '../api/gltf-scenegraph';\nimport {getGLTFAccessors, getGLTFAccessor} from '../gltf-utils/gltf-attribute-utils';\n\nconst KHR_DRACO_MESH_COMPRESSION = 'KHR_draco_mesh_compression';\n\n/** Extension name */\nexport const name = KHR_DRACO_MESH_COMPRESSION;\n\nexport function preprocess(\n  gltfData: {json: GLTF},\n  options: GLTFLoaderOptions,\n  context: LoaderContext\n): void {\n  const scenegraph = new Scenegraph(gltfData);\n  for (const primitive of makeMeshPrimitiveIterator(scenegraph)) {\n    if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {\n      // TODO - Remove fallback accessors to make sure we don't load unnecessary buffers\n    }\n  }\n}\n\nexport async function decode(\n  gltfData: {json: GLTF},\n  options: GLTFLoaderOptions,\n  context: LoaderContext\n): Promise<void> {\n  if (!options?.gltf?.decompressMeshes) {\n    return;\n  }\n\n  const scenegraph = new Scenegraph(gltfData);\n  const promises: Promise<void>[] = [];\n  for (const primitive of makeMeshPrimitiveIterator(scenegraph)) {\n    if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {\n      promises.push(decompressPrimitive(scenegraph, primitive, options, context));\n    }\n  }\n\n  // Decompress meshes in parallel\n  await Promise.all(promises);\n\n  // We have now decompressed all primitives, so remove the top-level extension\n  scenegraph.removeExtension(KHR_DRACO_MESH_COMPRESSION);\n}\n\nexport function encode(gltfData, options: GLTFLoaderOptions = {}): void {\n  const scenegraph = new Scenegraph(gltfData);\n\n  for (const mesh of scenegraph.json.meshes || []) {\n    // eslint-disable-next-line camelcase\n    // @ts-ignore\n    compressMesh(mesh, options);\n    // NOTE: Only add the extension if something was actually compressed\n    scenegraph.addRequiredExtension(KHR_DRACO_MESH_COMPRESSION);\n  }\n}\n\n// DECODE\n\n// Unpacks one mesh primitive and removes the extension from the primitive\n// DracoDecoder needs to be imported and registered by app\n// Returns: Promise that resolves when all pending draco decoder jobs for this mesh complete\n\n// TODO - Implement fallback behavior per KHR_DRACO_MESH_COMPRESSION spec\n\nasync function decompressPrimitive(\n  scenegraph: Scenegraph,\n  primitive: GLTFMeshPrimitive,\n  options: GLTFLoaderOptions,\n  context: LoaderContext\n): Promise<void> {\n  const dracoExtension = scenegraph.getObjectExtension<GLTF_KHR_draco_mesh_compression>(\n    primitive,\n    KHR_DRACO_MESH_COMPRESSION\n  );\n  if (!dracoExtension) {\n    return;\n  }\n\n  const buffer = scenegraph.getTypedArrayForBufferView(dracoExtension.bufferView);\n  // TODO - parse does not yet deal well with byte offsets embedded in typed arrays. Copy buffer\n  // TODO - remove when `parse` is fixed to handle `byteOffset`s\n  const bufferCopy = sliceArrayBuffer(buffer.buffer, buffer.byteOffset); // , buffer.byteLength);\n\n  const {parse} = context;\n  const dracoOptions: DracoLoaderOptions = {...options};\n\n  // TODO - remove hack: The entire tileset might be included, too expensive to serialize\n  delete dracoOptions['3d-tiles'];\n  const decodedData = (await parse(bufferCopy, DracoLoader, dracoOptions, context)) as DracoMesh;\n\n  const decodedAttributes: {[key: string]: GLTFAccessor} = getGLTFAccessors(decodedData.attributes);\n\n  // Restore min/max values\n  for (const [attributeName, decodedAttribute] of Object.entries(decodedAttributes)) {\n    if (attributeName in primitive.attributes) {\n      const accessorIndex: number = primitive.attributes[attributeName];\n      const accessor = scenegraph.getAccessor(accessorIndex);\n      if (accessor?.min && accessor?.max) {\n        decodedAttribute.min = accessor.min;\n        decodedAttribute.max = accessor.max;\n      }\n    }\n  }\n\n  // @ts-ignore\n  primitive.attributes = decodedAttributes;\n  if (decodedData.indices) {\n    // @ts-ignore\n    primitive.indices = getGLTFAccessor(decodedData.indices);\n  }\n\n  // Extension has been processed, delete it\n  // delete primitive.extensions[KHR_DRACO_MESH_COMPRESSION];\n\n  checkPrimitive(primitive);\n}\n\n// ENCODE\n\n// eslint-disable-next-line max-len\n// Only TRIANGLES: 0x0004 and TRIANGLE_STRIP: 0x0005 are supported\nfunction compressMesh(attributes, indices, mode: number = 4, options, context: LoaderContext) {\n  if (!options.DracoWriter) {\n    throw new Error('options.gltf.DracoWriter not provided');\n  }\n\n  // TODO - use DracoWriter using encode w/ registered DracoWriter...\n  const compressedData = options.DracoWriter.encodeSync({attributes});\n\n  // Draco compression may change the order and number of vertices in a mesh.\n  // To satisfy the requirement that accessors properties be correct for both\n  // compressed and uncompressed data, generators should create uncompressed\n  // attributes and indices using data that has been decompressed from the Draco buffer,\n  // rather than the original source data.\n  // @ts-ignore TODO this needs to be fixed\n  const decodedData = context?.parseSync?.({attributes});\n  const fauxAccessors = options._addFauxAttributes(decodedData.attributes);\n\n  const bufferViewIndex = options.addBufferView(compressedData);\n\n  const glTFMesh = {\n    primitives: [\n      {\n        attributes: fauxAccessors, // TODO - verify with spec\n        mode, // GL.POINTS\n        extensions: {\n          [KHR_DRACO_MESH_COMPRESSION]: {\n            bufferView: bufferViewIndex,\n            attributes: fauxAccessors // TODO - verify with spec\n          }\n        }\n      }\n    ]\n  };\n\n  return glTFMesh;\n}\n\n// UTILS\n\nfunction checkPrimitive(primitive: GLTFMeshPrimitive) {\n  if (!primitive.attributes && Object.keys(primitive.attributes).length > 0) {\n    throw new Error('glTF: Empty primitive detected: Draco decompression failure?');\n  }\n}\n\nfunction* makeMeshPrimitiveIterator(scenegraph) {\n  for (const mesh of scenegraph.json.meshes || []) {\n    for (const primitive of mesh.primitives) {\n      yield primitive;\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}