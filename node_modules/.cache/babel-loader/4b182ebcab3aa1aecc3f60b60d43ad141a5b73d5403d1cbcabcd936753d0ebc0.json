{"ast":null,"code":"import _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { deepEqual } from '../utils/deep-equal';\nimport log from '../utils/log';\nimport { flatten } from '../utils/flatten';\nvar ViewManager = /*#__PURE__*/function () {\n  function ViewManager(props) {\n    _classCallCheck(this, ViewManager);\n    _defineProperty(this, \"width\", void 0);\n    _defineProperty(this, \"height\", void 0);\n    _defineProperty(this, \"views\", void 0);\n    _defineProperty(this, \"viewState\", void 0);\n    _defineProperty(this, \"controllers\", void 0);\n    _defineProperty(this, \"timeline\", void 0);\n    _defineProperty(this, \"_viewports\", void 0);\n    _defineProperty(this, \"_viewportMap\", void 0);\n    _defineProperty(this, \"_isUpdating\", void 0);\n    _defineProperty(this, \"_needsRedraw\", void 0);\n    _defineProperty(this, \"_needsUpdate\", void 0);\n    _defineProperty(this, \"_eventManager\", void 0);\n    _defineProperty(this, \"_eventCallbacks\", void 0);\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = {};\n    this.controllers = {};\n    this.timeline = props.timeline;\n    this._viewports = [];\n    this._viewportMap = {};\n    this._isUpdating = false;\n    this._needsRedraw = 'First render';\n    this._needsUpdate = 'Initialize';\n    this._eventManager = props.eventManager;\n    this._eventCallbacks = {\n      onViewStateChange: props.onViewStateChange,\n      onInteractionStateChange: props.onInteractionStateChange\n    };\n    Object.seal(this);\n    this.setProps(props);\n  }\n  _createClass(ViewManager, [{\n    key: \"finalize\",\n    value: function finalize() {\n      for (var key in this.controllers) {\n        var controller = this.controllers[key];\n        if (controller) {\n          controller.finalize();\n        }\n      }\n      this.controllers = {};\n    }\n  }, {\n    key: \"needsRedraw\",\n    value: function needsRedraw() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        clearRedrawFlags: false\n      };\n      var redraw = this._needsRedraw;\n      if (opts.clearRedrawFlags) {\n        this._needsRedraw = false;\n      }\n      return redraw;\n    }\n  }, {\n    key: \"setNeedsUpdate\",\n    value: function setNeedsUpdate(reason) {\n      this._needsUpdate = this._needsUpdate || reason;\n      this._needsRedraw = this._needsRedraw || reason;\n    }\n  }, {\n    key: \"updateViewStates\",\n    value: function updateViewStates() {\n      for (var viewId in this.controllers) {\n        var controller = this.controllers[viewId];\n        if (controller) {\n          controller.updateTransition();\n        }\n      }\n    }\n  }, {\n    key: \"getViewports\",\n    value: function getViewports(rect) {\n      if (rect) {\n        return this._viewports.filter(function (viewport) {\n          return viewport.containsPixel(rect);\n        });\n      }\n      return this._viewports;\n    }\n  }, {\n    key: \"getViews\",\n    value: function getViews() {\n      var viewMap = {};\n      this.views.forEach(function (view) {\n        viewMap[view.id] = view;\n      });\n      return viewMap;\n    }\n  }, {\n    key: \"getView\",\n    value: function getView(viewId) {\n      return this.views.find(function (view) {\n        return view.id === viewId;\n      });\n    }\n  }, {\n    key: \"getViewState\",\n    value: function getViewState(viewOrViewId) {\n      var view = typeof viewOrViewId === 'string' ? this.getView(viewOrViewId) : viewOrViewId;\n      var viewState = view && this.viewState[view.getViewStateId()] || this.viewState;\n      return view ? view.filterViewState(viewState) : viewState;\n    }\n  }, {\n    key: \"getViewport\",\n    value: function getViewport(viewId) {\n      return this._viewportMap[viewId];\n    }\n  }, {\n    key: \"unproject\",\n    value: function unproject(xyz, opts) {\n      var viewports = this.getViewports();\n      var pixel = {\n        x: xyz[0],\n        y: xyz[1]\n      };\n      for (var i = viewports.length - 1; i >= 0; --i) {\n        var viewport = viewports[i];\n        if (viewport.containsPixel(pixel)) {\n          var p = xyz.slice();\n          p[0] -= viewport.x;\n          p[1] -= viewport.y;\n          return viewport.unproject(p, opts);\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      if (props.views) {\n        this._setViews(props.views);\n      }\n      if (props.viewState) {\n        this._setViewState(props.viewState);\n      }\n      if ('width' in props || 'height' in props) {\n        this._setSize(props.width, props.height);\n      }\n      if (!this._isUpdating) {\n        this._update();\n      }\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      this._isUpdating = true;\n      if (this._needsUpdate) {\n        this._needsUpdate = false;\n        this._rebuildViewports();\n      }\n      if (this._needsUpdate) {\n        this._needsUpdate = false;\n        this._rebuildViewports();\n      }\n      this._isUpdating = false;\n    }\n  }, {\n    key: \"_setSize\",\n    value: function _setSize(width, height) {\n      if (width !== this.width || height !== this.height) {\n        this.width = width;\n        this.height = height;\n        this.setNeedsUpdate('Size changed');\n      }\n    }\n  }, {\n    key: \"_setViews\",\n    value: function _setViews(views) {\n      views = flatten(views, Boolean);\n      var viewsChanged = this._diffViews(views, this.views);\n      if (viewsChanged) {\n        this.setNeedsUpdate('views changed');\n      }\n      this.views = views;\n    }\n  }, {\n    key: \"_setViewState\",\n    value: function _setViewState(viewState) {\n      if (viewState) {\n        var viewStateChanged = !deepEqual(viewState, this.viewState);\n        if (viewStateChanged) {\n          this.setNeedsUpdate('viewState changed');\n        }\n        this.viewState = viewState;\n      } else {\n        log.warn('missing `viewState` or `initialViewState`')();\n      }\n    }\n  }, {\n    key: \"_onViewStateChange\",\n    value: function _onViewStateChange(viewId, event) {\n      if (this._eventCallbacks.onViewStateChange) {\n        this._eventCallbacks.onViewStateChange(_objectSpread(_objectSpread({}, event), {}, {\n          viewId: viewId\n        }));\n      }\n    }\n  }, {\n    key: \"_createController\",\n    value: function _createController(view, props) {\n      var _this = this;\n      var Controller = props.type;\n      var controller = new Controller({\n        timeline: this.timeline,\n        eventManager: this._eventManager,\n        onViewStateChange: this._onViewStateChange.bind(this, props.id),\n        onStateChange: this._eventCallbacks.onInteractionStateChange,\n        makeViewport: function makeViewport(viewState) {\n          var _this$getView;\n          return (_this$getView = _this.getView(view.id)) === null || _this$getView === void 0 ? void 0 : _this$getView.makeViewport({\n            viewState: viewState,\n            width: _this.width,\n            height: _this.height\n          });\n        }\n      });\n      return controller;\n    }\n  }, {\n    key: \"_updateController\",\n    value: function _updateController(view, viewState, viewport, controller) {\n      var controllerProps = view.controller;\n      if (controllerProps) {\n        var resolvedProps = _objectSpread(_objectSpread(_objectSpread({}, viewState), controllerProps), {}, {\n          id: view.id,\n          x: viewport.x,\n          y: viewport.y,\n          width: viewport.width,\n          height: viewport.height\n        });\n        if (!controller) {\n          controller = this._createController(view, resolvedProps);\n        }\n        if (controller) {\n          controller.setProps(resolvedProps);\n        }\n        return controller;\n      }\n      return null;\n    }\n  }, {\n    key: \"_rebuildViewports\",\n    value: function _rebuildViewports() {\n      var views = this.views;\n      var oldControllers = this.controllers;\n      this._viewports = [];\n      this.controllers = {};\n      var invalidateControllers = false;\n      for (var i = views.length; i--;) {\n        var view = views[i];\n        var viewState = this.getViewState(view);\n        var viewport = view.makeViewport({\n          viewState: viewState,\n          width: this.width,\n          height: this.height\n        });\n        var oldController = oldControllers[view.id];\n        var hasController = Boolean(view.controller);\n        if (hasController && !oldController) {\n          invalidateControllers = true;\n        }\n        if ((invalidateControllers || !hasController) && oldController) {\n          oldController.finalize();\n          oldController = null;\n        }\n        this.controllers[view.id] = this._updateController(view, viewState, viewport, oldController);\n        this._viewports.unshift(viewport);\n      }\n      for (var id in oldControllers) {\n        var _oldController = oldControllers[id];\n        if (_oldController && !this.controllers[id]) {\n          _oldController.finalize();\n        }\n      }\n      this._buildViewportMap();\n    }\n  }, {\n    key: \"_buildViewportMap\",\n    value: function _buildViewportMap() {\n      var _this2 = this;\n      this._viewportMap = {};\n      this._viewports.forEach(function (viewport) {\n        if (viewport.id) {\n          _this2._viewportMap[viewport.id] = _this2._viewportMap[viewport.id] || viewport;\n        }\n      });\n    }\n  }, {\n    key: \"_diffViews\",\n    value: function _diffViews(newViews, oldViews) {\n      if (newViews.length !== oldViews.length) {\n        return true;\n      }\n      return newViews.some(function (_, i) {\n        return !newViews[i].equals(oldViews[i]);\n      });\n    }\n  }]);\n  return ViewManager;\n}();\nexport { ViewManager as default };","map":{"version":3,"names":["deepEqual","log","flatten","ViewManager","props","_classCallCheck","_defineProperty","views","width","height","viewState","controllers","timeline","_viewports","_viewportMap","_isUpdating","_needsRedraw","_needsUpdate","_eventManager","eventManager","_eventCallbacks","onViewStateChange","onInteractionStateChange","Object","seal","setProps","_createClass","key","value","finalize","controller","needsRedraw","opts","arguments","length","undefined","clearRedrawFlags","redraw","setNeedsUpdate","reason","updateViewStates","viewId","updateTransition","getViewports","rect","filter","viewport","containsPixel","getViews","viewMap","forEach","view","id","getView","find","getViewState","viewOrViewId","getViewStateId","filterViewState","getViewport","unproject","xyz","viewports","pixel","x","y","i","p","slice","_setViews","_setViewState","_setSize","_update","_rebuildViewports","Boolean","viewsChanged","_diffViews","viewStateChanged","warn","_onViewStateChange","event","_objectSpread","_createController","_this","Controller","type","bind","onStateChange","makeViewport","_this$getView","_updateController","controllerProps","resolvedProps","oldControllers","invalidateControllers","oldController","hasController","unshift","_buildViewportMap","_this2","newViews","oldViews","some","_","equals","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/core/src/lib/view-manager.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {deepEqual} from '../utils/deep-equal';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\n\nimport type Controller from '../controllers/controller';\nimport type {ViewStateChangeParameters, InteractionState} from '../controllers/controller';\nimport type Viewport from '../viewports/viewport';\nimport type View from '../views/view';\nimport type {Timeline} from '@luma.gl/engine';\nimport type {EventManager} from 'mjolnir.js';\nimport type {ConstructorOf} from '../types/types';\n\nexport default class ViewManager {\n  width: number;\n  height: number;\n  views: View[];\n  viewState: any;\n  controllers: {[viewId: string]: Controller<any> | null};\n  timeline: Timeline;\n\n  private _viewports: Viewport[];\n  private _viewportMap: {[viewId: string]: Viewport};\n  private _isUpdating: boolean;\n  private _needsRedraw: string | false;\n  private _needsUpdate: string | false;\n  private _eventManager: EventManager;\n  private _eventCallbacks: {\n    onViewStateChange?: (params: ViewStateChangeParameters & {viewId: string}) => void;\n    onInteractionStateChange?: (state: InteractionState) => void;\n  };\n\n  constructor(props: {\n    // Initial options\n    timeline: Timeline;\n    eventManager: EventManager;\n    onViewStateChange?: (params: ViewStateChangeParameters & {viewId: string}) => void;\n    onInteractionStateChange?: (state: InteractionState) => void;\n    // Props\n    views?: View[];\n    viewState?: any;\n    width?: number;\n    height?: number;\n  }) {\n    // List of view descriptors, gets re-evaluated when width/height changes\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = {};\n    this.controllers = {};\n    this.timeline = props.timeline;\n\n    this._viewports = []; // Generated viewports\n    this._viewportMap = {};\n    this._isUpdating = false;\n    this._needsRedraw = 'First render';\n    this._needsUpdate = 'Initialize';\n\n    this._eventManager = props.eventManager;\n    this._eventCallbacks = {\n      onViewStateChange: props.onViewStateChange,\n      onInteractionStateChange: props.onInteractionStateChange\n    };\n\n    Object.seal(this);\n\n    // Init with default map viewport\n    this.setProps(props);\n  }\n\n  /** Remove all resources and event listeners */\n  finalize(): void {\n    for (const key in this.controllers) {\n      const controller = this.controllers[key];\n      if (controller) {\n        controller.finalize();\n      }\n    }\n    this.controllers = {};\n  }\n\n  /** Check if a redraw is needed */\n  needsRedraw(\n    opts: {\n      /** Reset redraw flags to false */\n      clearRedrawFlags?: boolean;\n    } = {clearRedrawFlags: false}\n  ): string | false {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  /** Mark the manager as dirty. Will rebuild all viewports and update controllers. */\n  setNeedsUpdate(reason: string): void {\n    this._needsUpdate = this._needsUpdate || reason;\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  /** Checks each viewport for transition updates */\n  updateViewStates(): void {\n    for (const viewId in this.controllers) {\n      const controller = this.controllers[viewId];\n      if (controller) {\n        controller.updateTransition();\n      }\n    }\n  }\n\n  /** Get a set of viewports for a given width and height\n   * TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props\n   * @param rect (object, optional) - filter the viewports\n   *   + not provided - return all viewports\n   *   + {x, y} - only return viewports that contain this pixel\n   *   + {x, y, width, height} - only return viewports that overlap with this rectangle\n   */\n  getViewports(rect?: {x: number; y: number; width?: number; height?: number}): Viewport[] {\n    if (rect) {\n      return this._viewports.filter(viewport => viewport.containsPixel(rect));\n    }\n    return this._viewports;\n  }\n\n  /** Get a map of all views */\n  getViews(): {[viewId: string]: View} {\n    const viewMap = {};\n    this.views.forEach(view => {\n      viewMap[view.id] = view;\n    });\n    return viewMap;\n  }\n\n  /** Resolves a viewId string to a View */\n  getView(viewId: string): View | undefined {\n    return this.views.find(view => view.id === viewId);\n  }\n\n  /** Returns the viewState for a specific viewId. Matches the viewState by\n    1. view.viewStateId\n    2. view.id\n    3. root viewState\n    then applies the view's filter if any */\n  getViewState(viewOrViewId: string | View): any {\n    const view: View | undefined =\n      typeof viewOrViewId === 'string' ? this.getView(viewOrViewId) : viewOrViewId;\n    // Backward compatibility: view state for single view\n    const viewState = (view && this.viewState[view.getViewStateId()]) || this.viewState;\n    return view ? view.filterViewState(viewState) : viewState;\n  }\n\n  getViewport(viewId: string): Viewport | undefined {\n    return this._viewportMap[viewId];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz: number[], opts?: {topLeft?: boolean}): number[] | null {\n    const viewports = this.getViewports();\n    const pixel = {x: xyz[0], y: xyz[1]};\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n      if (viewport.containsPixel(pixel)) {\n        const p = xyz.slice();\n        p[0] -= viewport.x;\n        p[1] -= viewport.y;\n        return viewport.unproject(p, opts);\n      }\n    }\n    return null;\n  }\n\n  /** Update the manager with new Deck props */\n  setProps(props: {views?: View[]; viewState?: any; width?: number; height?: number}) {\n    if (props.views) {\n      this._setViews(props.views);\n    }\n\n    if (props.viewState) {\n      this._setViewState(props.viewState);\n    }\n\n    if ('width' in props || 'height' in props) {\n      this._setSize(props.width as number, props.height as number);\n    }\n\n    // Important: avoid invoking _update() inside itself\n    // Nested updates result in unexpected side effects inside _rebuildViewports()\n    // when using auto control in pure-js\n    if (!this._isUpdating) {\n      this._update();\n    }\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  private _update(): void {\n    this._isUpdating = true;\n\n    // Only rebuild viewports if the update flag is set\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    // If viewport transition(s) are triggered during viewports update, controller(s)\n    // will immediately call `onViewStateChange` which calls `viewManager.setProps` again.\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    this._isUpdating = false;\n  }\n\n  private _setSize(width: number, height: number): void {\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.setNeedsUpdate('Size changed');\n    }\n  }\n\n  // Update the view descriptor list and set change flag if needed\n  // Does not actually rebuild the `Viewport`s until `getViewports` is called\n  private _setViews(views: View[]): void {\n    views = flatten(views, Boolean);\n\n    const viewsChanged = this._diffViews(views, this.views);\n    if (viewsChanged) {\n      this.setNeedsUpdate('views changed');\n    }\n\n    this.views = views;\n  }\n\n  private _setViewState(viewState: any): void {\n    if (viewState) {\n      const viewStateChanged = !deepEqual(viewState, this.viewState);\n\n      if (viewStateChanged) {\n        this.setNeedsUpdate('viewState changed');\n      }\n\n      this.viewState = viewState;\n    } else {\n      log.warn('missing `viewState` or `initialViewState`')();\n    }\n  }\n\n  private _onViewStateChange(viewId: string, event: ViewStateChangeParameters) {\n    if (this._eventCallbacks.onViewStateChange) {\n      this._eventCallbacks.onViewStateChange({...event, viewId});\n    }\n  }\n\n  private _createController(\n    view: View,\n    props: {id: string; type: ConstructorOf<Controller<any>>}\n  ): Controller<any> {\n    const Controller = props.type;\n\n    const controller = new Controller({\n      timeline: this.timeline,\n      eventManager: this._eventManager,\n      // Set an internal callback that calls the prop callback if provided\n      onViewStateChange: this._onViewStateChange.bind(this, props.id),\n      onStateChange: this._eventCallbacks.onInteractionStateChange,\n      makeViewport: viewState =>\n        this.getView(view.id)?.makeViewport({\n          viewState,\n          width: this.width,\n          height: this.height\n        })\n    });\n\n    return controller;\n  }\n\n  private _updateController(\n    view: View,\n    viewState: any,\n    viewport: Viewport,\n    controller?: Controller<any> | null\n  ): Controller<any> | null {\n    const controllerProps = view.controller;\n    if (controllerProps) {\n      const resolvedProps = {\n        ...viewState,\n        ...controllerProps,\n        id: view.id,\n        x: viewport.x,\n        y: viewport.y,\n        width: viewport.width,\n        height: viewport.height\n      };\n\n      // TODO - check if view / controller type has changed, and replace the controller\n      if (!controller) {\n        controller = this._createController(view, resolvedProps);\n      }\n      if (controller) {\n        controller.setProps(resolvedProps);\n      }\n      return controller;\n    }\n    return null;\n  }\n\n  // Rebuilds viewports from descriptors towards a certain window size\n  private _rebuildViewports(): void {\n    const {views} = this;\n\n    const oldControllers = this.controllers;\n    this._viewports = [];\n    this.controllers = {};\n\n    let invalidateControllers = false;\n    // Create controllers in reverse order, so that views on top receive events first\n    for (let i = views.length; i--; ) {\n      const view = views[i];\n      const viewState = this.getViewState(view);\n      const viewport = view.makeViewport({viewState, width: this.width, height: this.height});\n\n      let oldController = oldControllers[view.id];\n      const hasController = Boolean(view.controller);\n      if (hasController && !oldController) {\n        // When a new controller is added, invalidate all controllers below it so that\n        // events are registered in the correct order\n        invalidateControllers = true;\n      }\n      if ((invalidateControllers || !hasController) && oldController) {\n        // Remove and reattach invalidated controller\n        oldController.finalize();\n        oldController = null;\n      }\n\n      // Update the controller\n      this.controllers[view.id] = this._updateController(view, viewState, viewport, oldController);\n\n      this._viewports.unshift(viewport);\n    }\n\n    // Remove unused controllers\n    for (const id in oldControllers) {\n      const oldController = oldControllers[id];\n      if (oldController && !this.controllers[id]) {\n        oldController.finalize();\n      }\n    }\n\n    this._buildViewportMap();\n  }\n\n  _buildViewportMap(): void {\n    // Build a view id to view index\n    this._viewportMap = {};\n    this._viewports.forEach(viewport => {\n      if (viewport.id) {\n        // TODO - issue warning if multiple viewports use same id\n        this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;\n      }\n    });\n  }\n\n  // Check if viewport array has changed, returns true if any change\n  // Note that descriptors can be the same\n  _diffViews(newViews: View[], oldViews: View[]): boolean {\n    if (newViews.length !== oldViews.length) {\n      return true;\n    }\n\n    return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}