{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _marked = _regeneratorRuntime.mark(makeArrayBufferIterator);\nexport function makeArrayBufferIterator(arrayBuffer) {\n  var options,\n    _options$chunkSize,\n    chunkSize,\n    byteOffset,\n    chunkByteLength,\n    chunk,\n    sourceArray,\n    chunkArray,\n    _args = arguments;\n  return _regeneratorRuntime.wrap(function makeArrayBufferIterator$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          _options$chunkSize = options.chunkSize, chunkSize = _options$chunkSize === void 0 ? 256 * 1024 : _options$chunkSize;\n          byteOffset = 0;\n        case 3:\n          if (!(byteOffset < arrayBuffer.byteLength)) {\n            _context.next = 14;\n            break;\n          }\n          chunkByteLength = Math.min(arrayBuffer.byteLength - byteOffset, chunkSize);\n          chunk = new ArrayBuffer(chunkByteLength);\n          sourceArray = new Uint8Array(arrayBuffer, byteOffset, chunkByteLength);\n          chunkArray = new Uint8Array(chunk);\n          chunkArray.set(sourceArray);\n          byteOffset += chunkByteLength;\n          _context.next = 12;\n          return chunk;\n        case 12:\n          _context.next = 3;\n          break;\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"names":["makeArrayBufferIterator","arrayBuffer","options","_options$chunkSize","chunkSize","byteOffset","chunkByteLength","chunk","sourceArray","chunkArray","_args","arguments","_regeneratorRuntime","wrap","makeArrayBufferIterator$","_context","prev","next","length","undefined","byteLength","Math","min","ArrayBuffer","Uint8Array","set","stop","_marked"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/kepler.gl/node_modules/@loaders.gl/core/src/iterator-utils/make-iterator/array-buffer-iterator.js"],"sourcesContent":["export function* makeArrayBufferIterator(arrayBuffer, options = {}) {\n  const {chunkSize = 256 * 1024} = options;\n\n  let byteOffset = 0;\n\n  while (byteOffset < arrayBuffer.byteLength) {\n    // Create a chunk of the right size\n    const chunkByteLength = Math.min(arrayBuffer.byteLength - byteOffset, chunkSize);\n    const chunk = new ArrayBuffer(chunkByteLength);\n\n    // Copy data from the big chunk\n    const sourceArray = new Uint8Array(arrayBuffer, byteOffset, chunkByteLength);\n    const chunkArray = new Uint8Array(chunk);\n    chunkArray.set(sourceArray);\n\n    // yield the chunk\n    byteOffset += chunkByteLength;\n    yield chunk;\n  }\n}\n"],"mappings":";uCAAiBA,uB;AAAjB,OAAO,SAAUA,uBAAVA,CAAkCC,WAAlC;EAAA,IAAAC,OAAA;IAAAC,kBAAA;IAAAC,SAAA;IAAAC,UAAA;IAAAC,eAAA;IAAAC,KAAA;IAAAC,WAAA;IAAAC,UAAA;IAAAC,KAAA,GAAAC,SAAA;EAAA,OAAAC,mBAAA,CAAAC,IAAA,UAAAC,yBAAAC,QAAA;IAAA;MAAA,QAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAA+Cf,OAA/C,GAAAQ,KAAA,CAAAQ,MAAA,QAAAR,KAAA,QAAAS,SAAA,GAAAT,KAAA,MAAyD,EAAzD;UAAAP,kBAAA,GAC4BD,OAD5B,CACEE,SADF,EACEA,SADF,GAAAD,kBAAA,cACc,MAAM,IADpB,GAAAA,kBAAA;UAGDE,UAHC,GAGY,CAHZ;QAAA;UAAA,MAKEA,UAAU,GAAGJ,WAAW,CAACmB,UAL3B;YAAAL,QAAA,CAAAE,IAAA;YAAA;UAAA;UAOGX,eAPH,GAOqBe,IAAI,CAACC,GAAL,CAASrB,WAAW,CAACmB,UAAZ,GAAyBf,UAAlC,EAA8CD,SAA9C,CAPrB;UAQGG,KARH,GAQW,IAAIgB,WAAJ,CAAgBjB,eAAhB,CARX;UAWGE,WAXH,GAWiB,IAAIgB,UAAJ,CAAevB,WAAf,EAA4BI,UAA5B,EAAwCC,eAAxC,CAXjB;UAYGG,UAZH,GAYgB,IAAIe,UAAJ,CAAejB,KAAf,CAZhB;UAaHE,UAAU,CAACgB,GAAX,CAAejB,WAAf;UAGAH,UAAU,IAAIC,eAAd;UAhBGS,QAAA,CAAAE,IAAA;UAiBH,OAAMV,KAAN;QAjBG;UAAAQ,QAAA,CAAAE,IAAA;UAAA;QAAA;QAAA;UAAA,OAAAF,QAAA,CAAAW,IAAA;MAAA;IAAA;EAAA,GAAAC,OAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}