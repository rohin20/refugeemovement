{"ast":null,"code":"import _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport PathTesselator from './path-tesselator';\nimport vs from './path-layer-vertex.glsl';\nimport fs from './path-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  widthUnits: 'meters',\n  widthScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  widthMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  widthMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  jointRounded: false,\n  capRounded: false,\n  miterLimit: {\n    type: 'number',\n    min: 0,\n    value: 4\n  },\n  billboard: false,\n  _pathType: null,\n  getPath: {\n    type: 'accessor',\n    value: function value(object) {\n      return object.path;\n    }\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  rounded: {\n    deprecatedFor: ['jointRounded', 'capRounded']\n  }\n};\nvar ATTRIBUTE_TRANSITION = {\n  enter: function enter(value, chunk) {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\nvar PathLayer = /*#__PURE__*/function (_Layer) {\n  _inherits(PathLayer, _Layer);\n  var _super = _createSuper(PathLayer);\n  function PathLayer() {\n    var _this;\n    _classCallCheck(this, PathLayer);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"state\", void 0);\n    return _this;\n  }\n  _createClass(PathLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _get(_getPrototypeOf(PathLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, picking]\n      });\n    }\n  }, {\n    key: \"wrapLongitude\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var _this2 = this;\n      var noAlloc = true;\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        positions: {\n          size: 3,\n          vertexOffset: 1,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: ATTRIBUTE_TRANSITION,\n          accessor: 'getPath',\n          update: this.calculatePositions,\n          noAlloc: noAlloc,\n          shaderAttributes: {\n            instanceLeftPositions: {\n              vertexOffset: 0\n            },\n            instanceStartPositions: {\n              vertexOffset: 1\n            },\n            instanceEndPositions: {\n              vertexOffset: 2\n            },\n            instanceRightPositions: {\n              vertexOffset: 3\n            }\n          }\n        },\n        instanceTypes: {\n          size: 1,\n          type: 5121,\n          update: this.calculateSegmentTypes,\n          noAlloc: noAlloc\n        },\n        instanceStrokeWidths: {\n          size: 1,\n          accessor: 'getWidth',\n          transition: ATTRIBUTE_TRANSITION,\n          defaultValue: 1\n        },\n        instanceColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          accessor: 'getColor',\n          transition: ATTRIBUTE_TRANSITION,\n          defaultValue: DEFAULT_COLOR\n        },\n        instancePickingColors: {\n          size: 3,\n          type: 5121,\n          accessor: function accessor(object, _ref) {\n            var index = _ref.index,\n              value = _ref.target;\n            return _this2.encodePickingColor(object && object.__source ? object.__source.index : index, value);\n          }\n        }\n      });\n      this.setState({\n        pathTesselator: new PathTesselator({\n          fp64: this.use64bitPositions()\n        })\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(params) {\n      _get(_getPrototypeOf(PathLayer.prototype), \"updateState\", this).call(this, params);\n      var props = params.props,\n        changeFlags = params.changeFlags;\n      var attributeManager = this.getAttributeManager();\n      var geometryChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath);\n      if (geometryChanged) {\n        var pathTesselator = this.state.pathTesselator;\n        var buffers = props.data.attributes || {};\n        pathTesselator.updateGeometry({\n          data: props.data,\n          geometryBuffer: buffers.getPath,\n          buffers: buffers,\n          normalize: !props._pathType,\n          loop: props._pathType === 'loop',\n          getGeometry: props.getPath,\n          positionFormat: props.positionFormat,\n          wrapLongitude: props.wrapLongitude,\n          resolution: this.context.viewport.resolution,\n          dataChanged: changeFlags.dataChanged\n        });\n        this.setState({\n          numInstances: pathTesselator.instanceCount,\n          startIndices: pathTesselator.vertexStarts\n        });\n        if (!changeFlags.dataChanged) {\n          attributeManager.invalidateAll();\n        }\n      }\n      if (changeFlags.extensionsChanged) {\n        var _this$state$model;\n        var gl = this.context.gl;\n        (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n        this.state.model = this._getModel(gl);\n        attributeManager.invalidateAll();\n      }\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(params) {\n      var info = _get(_getPrototypeOf(PathLayer.prototype), \"getPickingInfo\", this).call(this, params);\n      var index = info.index;\n      var data = this.props.data;\n      if (data[0] && data[0].__source) {\n        info.object = data.find(function (d) {\n          return d.__source.index === index;\n        });\n      }\n      return info;\n    }\n  }, {\n    key: \"disablePickingIndex\",\n    value: function disablePickingIndex(objectIndex) {\n      var data = this.props.data;\n      if (data[0] && data[0].__source) {\n        for (var i = 0; i < data.length; i++) {\n          if (data[i].__source.index === objectIndex) {\n            this._disablePickingIndex(i);\n          }\n        }\n      } else {\n        this._disablePickingIndex(objectIndex);\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var _this$props = this.props,\n        jointRounded = _this$props.jointRounded,\n        capRounded = _this$props.capRounded,\n        billboard = _this$props.billboard,\n        miterLimit = _this$props.miterLimit,\n        widthUnits = _this$props.widthUnits,\n        widthScale = _this$props.widthScale,\n        widthMinPixels = _this$props.widthMinPixels,\n        widthMaxPixels = _this$props.widthMaxPixels;\n      this.state.model.setUniforms(uniforms).setUniforms({\n        jointType: Number(jointRounded),\n        capType: Number(capRounded),\n        billboard: billboard,\n        widthUnits: UNIT[widthUnits],\n        widthScale: widthScale,\n        miterLimit: miterLimit,\n        widthMinPixels: widthMinPixels,\n        widthMaxPixels: widthMaxPixels\n      }).draw();\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var SEGMENT_INDICES = [0, 1, 2, 1, 4, 2, 1, 3, 4, 3, 5, 4];\n      var SEGMENT_POSITIONS = [0, 0, 0, -1, 0, 1, 1, -1, 1, 1, 1, 0];\n      return new Model(gl, _objectSpread(_objectSpread({}, this.getShaders()), {}, {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 4,\n          attributes: {\n            indices: new Uint16Array(SEGMENT_INDICES),\n            positions: {\n              value: new Float32Array(SEGMENT_POSITIONS),\n              size: 2\n            }\n          }\n        }),\n        isInstanced: true\n      }));\n    }\n  }, {\n    key: \"calculatePositions\",\n    value: function calculatePositions(attribute) {\n      var pathTesselator = this.state.pathTesselator;\n      attribute.startIndices = pathTesselator.vertexStarts;\n      attribute.value = pathTesselator.get('positions');\n    }\n  }, {\n    key: \"calculateSegmentTypes\",\n    value: function calculateSegmentTypes(attribute) {\n      var pathTesselator = this.state.pathTesselator;\n      attribute.startIndices = pathTesselator.vertexStarts;\n      attribute.value = pathTesselator.get('segmentTypes');\n    }\n  }]);\n  return PathLayer;\n}(Layer);\nexport { PathLayer as default };\n_defineProperty(PathLayer, \"defaultProps\", defaultProps);\n_defineProperty(PathLayer, \"layerName\", 'PathLayer');","map":{"version":3,"names":["Layer","project32","picking","UNIT","Model","Geometry","PathTesselator","vs","fs","DEFAULT_COLOR","defaultProps","widthUnits","widthScale","type","min","value","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","jointRounded","capRounded","miterLimit","billboard","_pathType","getPath","object","path","getColor","getWidth","rounded","deprecatedFor","ATTRIBUTE_TRANSITION","enter","chunk","length","subarray","PathLayer","_Layer","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","concat","_defineProperty","_assertThisInitialized","_createClass","key","getShaders","_get","_getPrototypeOf","prototype","modules","get","initializeState","_this2","noAlloc","attributeManager","getAttributeManager","addInstanced","positions","size","vertexOffset","fp64","use64bitPositions","transition","accessor","update","calculatePositions","shaderAttributes","instanceLeftPositions","instanceStartPositions","instanceEndPositions","instanceRightPositions","instanceTypes","calculateSegmentTypes","instanceStrokeWidths","defaultValue","instanceColors","props","colorFormat","normalized","instancePickingColors","_ref","index","target","encodePickingColor","__source","setState","pathTesselator","updateState","params","changeFlags","geometryChanged","dataChanged","updateTriggersChanged","all","state","buffers","data","attributes","updateGeometry","geometryBuffer","normalize","loop","getGeometry","positionFormat","wrapLongitude","resolution","context","viewport","numInstances","instanceCount","startIndices","vertexStarts","invalidateAll","extensionsChanged","_this$state$model","gl","model","delete","_getModel","getPickingInfo","info","find","d","disablePickingIndex","objectIndex","i","_disablePickingIndex","draw","_ref2","uniforms","_this$props","setUniforms","jointType","capType","SEGMENT_INDICES","SEGMENT_POSITIONS","_objectSpread","id","geometry","drawMode","indices","Uint16Array","Float32Array","isInstanced","attribute","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/layers/src/path-layer/path-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\nimport PathTesselator from './path-tesselator';\n\nimport vs from './path-layer-vertex.glsl';\nimport fs from './path-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  Color,\n  Accessor,\n  AccessorFunction,\n  Unit,\n  UpdateParameters,\n  GetPickingInfoParams,\n  PickingInfo,\n  DefaultProps\n} from '@deck.gl/core';\nimport type {PathGeometry} from './path';\n\ntype _PathLayerProps<DataT> = {\n  /** The units of the line width, one of `'meters'`, `'common'`, and `'pixels'`\n   * @default 'meters'\n   */\n  widthUnits?: Unit;\n  /**\n   * Path width multiplier.\n   * @default 1\n   */\n  widthScale?: number;\n  /**\n   * The minimum path width in pixels. This prop can be used to prevent the path from getting too thin when zoomed out.\n   * @default 0\n   */\n  widthMinPixels?: number;\n  /**\n   * The maximum path width in pixels. This prop can be used to prevent the path from getting too thick when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  widthMaxPixels?: number;\n  /**\n   * Type of joint. If `true`, draw round joints. Otherwise draw miter joints.\n   * @default false\n   */\n  jointRounded?: boolean;\n  /**\n   * Type of caps. If `true`, draw round caps. Otherwise draw square caps.\n   * @default false\n   */\n  capRounded?: boolean;\n  /**\n   * The maximum extent of a joint in ratio to the stroke width. Only works if `jointRounded` is `false`.\n   * @default 4\n   */\n  miterLimit?: number;\n  /**\n   * If `true`, extrude the path in screen space (width always faces the camera).\n   * If `false`, the width always faces up (z).\n   * @default false\n   */\n  billboard?: boolean;\n  /**\n   * (Experimental) If `'loop'` or `'open'`, will skip normalizing the coordinates returned by `getPath` and instead assume all paths are to be loops or open paths.\n   * When normalization is disabled, paths must be specified in the format of flat array. Open paths must contain at least 2 vertices and closed paths must contain at least 3 vertices.\n   * @default null\n   */\n  _pathType?: null | 'loop' | 'open';\n  /**\n   * Path geometry accessor.\n   */\n  getPath?: AccessorFunction<DataT, PathGeometry>;\n  /**\n   * Path color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color | Color[]>;\n  /**\n   * Path width accessor.\n   * @default 1\n   */\n  getWidth?: Accessor<DataT, number | number[]>;\n  /**\n   * @deprecated Use `jointRounded` and `capRounded` instead\n   */\n  rounded?: boolean;\n};\n\nexport type PathLayerProps<DataT = any> = _PathLayerProps<DataT> & LayerProps<DataT>;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<PathLayerProps> = {\n  widthUnits: 'meters',\n  widthScale: {type: 'number', min: 0, value: 1},\n  widthMinPixels: {type: 'number', min: 0, value: 0},\n  widthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n  jointRounded: false,\n  capRounded: false,\n  miterLimit: {type: 'number', min: 0, value: 4},\n  billboard: false,\n  _pathType: null,\n\n  getPath: {type: 'accessor', value: object => object.path},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n\n  // deprecated props\n  rounded: {deprecatedFor: ['jointRounded', 'capRounded']}\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\n/** Render lists of coordinate points as extruded polylines with mitering. */\nexport default class PathLayer<DataT = any, ExtraPropsT = {}> extends Layer<\n  ExtraPropsT & Required<_PathLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'PathLayer';\n\n  state!: {\n    model?: Model;\n    pathTesselator: PathTesselator;\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]}); // 'project' module added by default.\n  }\n\n  get wrapLongitude(): boolean {\n    return false;\n  }\n\n  initializeState() {\n    const noAlloc = true;\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager!.addInstanced({\n      positions: {\n        size: 3,\n        // Start filling buffer from 1 vertex in\n        vertexOffset: 1,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPath',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          instanceLeftPositions: {\n            vertexOffset: 0\n          },\n          instanceStartPositions: {\n            vertexOffset: 1\n          },\n          instanceEndPositions: {\n            vertexOffset: 2\n          },\n          instanceRightPositions: {\n            vertexOffset: 3\n          }\n        }\n      },\n      instanceTypes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculateSegmentTypes,\n        noAlloc\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getWidth',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: 1\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        accessor: 'getColor',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: DEFAULT_COLOR\n      },\n      instancePickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value)\n      }\n    });\n    /* eslint-enable max-len */\n\n    this.setState({\n      pathTesselator: new PathTesselator({\n        fp64: this.use64bitPositions()\n      })\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {props, changeFlags} = params;\n\n    const attributeManager = this.getAttributeManager();\n\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath));\n\n    if (geometryChanged) {\n      const {pathTesselator} = this.state;\n      const buffers = (props.data as any).attributes || {};\n\n      pathTesselator.updateGeometry({\n        data: props.data,\n        geometryBuffer: buffers.getPath,\n        buffers,\n        normalize: !props._pathType,\n        loop: props._pathType === 'loop',\n        getGeometry: props.getPath,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        dataChanged: changeFlags.dataChanged\n      });\n      this.setState({\n        numInstances: pathTesselator.instanceCount,\n        startIndices: pathTesselator.vertexStarts\n      });\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        attributeManager!.invalidateAll();\n      }\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      attributeManager!.invalidateAll();\n    }\n  }\n\n  getPickingInfo(params: GetPickingInfoParams): PickingInfo {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      info.object = (data as any[]).find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  /** Override base Layer method */\n  disablePickingIndex(objectIndex: number) {\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      for (let i = 0; i < (data as any[]).length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      this._disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw({uniforms}) {\n    const {\n      jointRounded,\n      capRounded,\n      billboard,\n      miterLimit,\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels\n    } = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        jointType: Number(jointRounded),\n        capType: Number(capRounded),\n        billboard,\n        widthUnits: UNIT[widthUnits],\n        widthScale,\n        miterLimit,\n        widthMinPixels,\n        widthMaxPixels\n      })\n      .draw();\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    /*\n     *       _\n     *        \"-_ 1                   3                       5\n     *     _     \"o---------------------o-------------------_-o\n     *       -   / \"\"--..__              '.             _.-' /\n     *   _     \"@- - - - - \"\"--..__- - - - x - - - -_.@'    /\n     *    \"-_  /                   \"\"--..__ '.  _,-` :     /\n     *       \"o----------------------------\"\"-o'    :     /\n     *      0,2                            4 / '.  :     /\n     *                                      /   '.:     /\n     *                                     /     :'.   /\n     *                                    /     :  ', /\n     *                                   /     :     o\n     */\n\n    // prettier-ignore\n    const SEGMENT_INDICES = [\n      // start corner\n      0, 1, 2,\n      // body\n      1, 4, 2,\n      1, 3, 4,\n      // end corner\n      3, 5, 4\n    ];\n\n    // [0] position on segment - 0: start, 1: end\n    // [1] side of path - -1: left, 0: center (joint), 1: right\n    // prettier-ignore\n    const SEGMENT_POSITIONS = [\n      // bevel start corner\n      0, 0,\n      // start inner corner\n      0, -1,\n      // start outer corner\n      0, 1,\n      // end inner corner\n      1, -1,\n      // end outer corner\n      1, 1,\n      // bevel end corner\n      1, 0\n    ];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLES,\n        attributes: {\n          indices: new Uint16Array(SEGMENT_INDICES),\n          positions: {value: new Float32Array(SEGMENT_POSITIONS), size: 2}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  protected calculatePositions(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('positions');\n  }\n\n  protected calculateSegmentTypes(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('segmentTypes');\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}