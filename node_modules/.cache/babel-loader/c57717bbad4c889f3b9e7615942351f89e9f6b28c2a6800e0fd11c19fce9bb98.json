{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { Vector3 } from '@math.gl/core';\nimport BoundingSphere from '../bounding-volumes/bounding-sphere';\nvar fromPointsXMin = new Vector3();\nvar fromPointsYMin = new Vector3();\nvar fromPointsZMin = new Vector3();\nvar fromPointsXMax = new Vector3();\nvar fromPointsYMax = new Vector3();\nvar fromPointsZMax = new Vector3();\nvar fromPointsCurrentPos = new Vector3();\nvar fromPointsScratch = new Vector3();\nvar fromPointsRitterCenter = new Vector3();\nvar fromPointsMinBoxPt = new Vector3();\nvar fromPointsMaxBoxPt = new Vector3();\nvar fromPointsNaiveCenterScratch = new Vector3();\nvar volumeConstant = 4.0 / 3.0 * Math.PI;\nexport default function makeBoundingSphereFromPoints(positions) {\n  var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new BoundingSphere();\n  if (!positions || positions.length === 0) {\n    return result.fromCenterRadius([0, 0, 0], 0);\n  }\n  var currentPos = fromPointsCurrentPos.copy(positions[0]);\n  var xMin = fromPointsXMin.copy(currentPos);\n  var yMin = fromPointsYMin.copy(currentPos);\n  var zMin = fromPointsZMin.copy(currentPos);\n  var xMax = fromPointsXMax.copy(currentPos);\n  var yMax = fromPointsYMax.copy(currentPos);\n  var zMax = fromPointsZMax.copy(currentPos);\n  var _iterator = _createForOfIteratorHelper(positions),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var position = _step.value;\n      currentPos.copy(position);\n      var x = currentPos.x;\n      var y = currentPos.y;\n      var z = currentPos.z;\n      if (x < xMin.x) {\n        xMin.copy(currentPos);\n      }\n      if (x > xMax.x) {\n        xMax.copy(currentPos);\n      }\n      if (y < yMin.y) {\n        yMin.copy(currentPos);\n      }\n      if (y > yMax.y) {\n        yMax.copy(currentPos);\n      }\n      if (z < zMin.z) {\n        zMin.copy(currentPos);\n      }\n      if (z > zMax.z) {\n        zMax.copy(currentPos);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var xSpan = fromPointsScratch.copy(xMax).subtract(xMin).magnitudeSquared();\n  var ySpan = fromPointsScratch.copy(yMax).subtract(yMin).magnitudeSquared();\n  var zSpan = fromPointsScratch.copy(zMax).subtract(zMin).magnitudeSquared();\n  var diameter1 = xMin;\n  var diameter2 = xMax;\n  var maxSpan = xSpan;\n  if (ySpan > maxSpan) {\n    maxSpan = ySpan;\n    diameter1 = yMin;\n    diameter2 = yMax;\n  }\n  if (zSpan > maxSpan) {\n    maxSpan = zSpan;\n    diameter1 = zMin;\n    diameter2 = zMax;\n  }\n  var ritterCenter = fromPointsRitterCenter;\n  ritterCenter.x = (diameter1.x + diameter2.x) * 0.5;\n  ritterCenter.y = (diameter1.y + diameter2.y) * 0.5;\n  ritterCenter.z = (diameter1.z + diameter2.z) * 0.5;\n  var radiusSquared = fromPointsScratch.copy(diameter2).subtract(ritterCenter).magnitudeSquared();\n  var ritterRadius = Math.sqrt(radiusSquared);\n  var minBoxPt = fromPointsMinBoxPt;\n  minBoxPt.x = xMin.x;\n  minBoxPt.y = yMin.y;\n  minBoxPt.z = zMin.z;\n  var maxBoxPt = fromPointsMaxBoxPt;\n  maxBoxPt.x = xMax.x;\n  maxBoxPt.y = yMax.y;\n  maxBoxPt.z = zMax.z;\n  var naiveCenter = fromPointsNaiveCenterScratch.copy(minBoxPt).add(maxBoxPt).multiplyByScalar(0.5);\n  var naiveRadius = 0;\n  var _iterator2 = _createForOfIteratorHelper(positions),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _position = _step2.value;\n      currentPos.copy(_position);\n      var r = fromPointsScratch.copy(currentPos).subtract(naiveCenter).magnitude();\n      if (r > naiveRadius) {\n        naiveRadius = r;\n      }\n      var oldCenterToPointSquared = fromPointsScratch.copy(currentPos).subtract(ritterCenter).magnitudeSquared();\n      if (oldCenterToPointSquared > radiusSquared) {\n        var oldCenterToPoint = Math.sqrt(oldCenterToPointSquared);\n        ritterRadius = (ritterRadius + oldCenterToPoint) * 0.5;\n        radiusSquared = ritterRadius * ritterRadius;\n        var oldToNew = oldCenterToPoint - ritterRadius;\n        ritterCenter.x = (ritterRadius * ritterCenter.x + oldToNew * currentPos.x) / oldCenterToPoint;\n        ritterCenter.y = (ritterRadius * ritterCenter.y + oldToNew * currentPos.y) / oldCenterToPoint;\n        ritterCenter.z = (ritterRadius * ritterCenter.z + oldToNew * currentPos.z) / oldCenterToPoint;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  if (ritterRadius < naiveRadius) {\n    ritterCenter.to(result.center);\n    result.radius = ritterRadius;\n  } else {\n    naiveCenter.to(result.center);\n    result.radius = naiveRadius;\n  }\n  return result;\n}","map":{"version":3,"names":["Vector3","BoundingSphere","fromPointsXMin","fromPointsYMin","fromPointsZMin","fromPointsXMax","fromPointsYMax","fromPointsZMax","fromPointsCurrentPos","fromPointsScratch","fromPointsRitterCenter","fromPointsMinBoxPt","fromPointsMaxBoxPt","fromPointsNaiveCenterScratch","volumeConstant","Math","PI","makeBoundingSphereFromPoints","positions","result","arguments","length","undefined","fromCenterRadius","currentPos","copy","xMin","yMin","zMin","xMax","yMax","zMax","_iterator","_createForOfIteratorHelper","_step","s","n","done","position","value","x","y","z","err","e","f","xSpan","subtract","magnitudeSquared","ySpan","zSpan","diameter1","diameter2","maxSpan","ritterCenter","radiusSquared","ritterRadius","sqrt","minBoxPt","maxBoxPt","naiveCenter","add","multiplyByScalar","naiveRadius","_iterator2","_step2","r","magnitude","oldCenterToPointSquared","oldCenterToPoint","oldToNew","to","center","radius"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@math.gl/culling/src/lib/algorithms/bounding-sphere-from-points.ts"],"sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Vector3} from '@math.gl/core';\nimport BoundingSphere from '../bounding-volumes/bounding-sphere';\n\n/* eslint-disable */\nconst fromPointsXMin = new Vector3();\nconst fromPointsYMin = new Vector3();\nconst fromPointsZMin = new Vector3();\nconst fromPointsXMax = new Vector3();\nconst fromPointsYMax = new Vector3();\nconst fromPointsZMax = new Vector3();\nconst fromPointsCurrentPos = new Vector3();\nconst fromPointsScratch = new Vector3();\nconst fromPointsRitterCenter = new Vector3();\nconst fromPointsMinBoxPt = new Vector3();\nconst fromPointsMaxBoxPt = new Vector3();\nconst fromPointsNaiveCenterScratch = new Vector3();\nconst volumeConstant = (4.0 / 3.0) * Math.PI;\n\n/**\n * Computes a tight-fitting bounding sphere enclosing a list of 3D Cartesian points.\n *\n * The bounding sphere is computed by running two algorithms, a naive algorithm and\n * Ritter's algorithm. The smaller of the two spheres is used to ensure a tight fit.\n * Bounding sphere computation article http://blogs.agi.com/insight3d/index.php/2008/02/04/a-bounding\n *\n * @param positions An array of points that the bounding sphere will enclose.\n * @param result Optional object onto which to store the result.\n * @returns The modified result parameter or a new `BoundingSphere` instance if not provided.\n */\nexport default function makeBoundingSphereFromPoints(\n  positions: number[][],\n  result: BoundingSphere = new BoundingSphere()\n): BoundingSphere {\n  if (!positions || positions.length === 0) {\n    return result.fromCenterRadius([0, 0, 0], 0);\n  }\n\n  const currentPos = fromPointsCurrentPos.copy(positions[0]);\n\n  const xMin = fromPointsXMin.copy(currentPos);\n  const yMin = fromPointsYMin.copy(currentPos);\n  const zMin = fromPointsZMin.copy(currentPos);\n\n  const xMax = fromPointsXMax.copy(currentPos);\n  const yMax = fromPointsYMax.copy(currentPos);\n  const zMax = fromPointsZMax.copy(currentPos);\n\n  for (const position of positions) {\n    currentPos.copy(position);\n\n    const x = currentPos.x;\n    const y = currentPos.y;\n    const z = currentPos.z;\n\n    // Store points containing the the smallest and largest components\n    if (x < xMin.x) {\n      xMin.copy(currentPos);\n    }\n\n    if (x > xMax.x) {\n      xMax.copy(currentPos);\n    }\n\n    if (y < yMin.y) {\n      yMin.copy(currentPos);\n    }\n\n    if (y > yMax.y) {\n      yMax.copy(currentPos);\n    }\n\n    if (z < zMin.z) {\n      zMin.copy(currentPos);\n    }\n\n    if (z > zMax.z) {\n      zMax.copy(currentPos);\n    }\n  }\n\n  // Compute x-, y-, and z-spans (Squared distances b/n each component's min. and max.).\n  const xSpan = fromPointsScratch.copy(xMax).subtract(xMin).magnitudeSquared();\n  const ySpan = fromPointsScratch.copy(yMax).subtract(yMin).magnitudeSquared();\n  const zSpan = fromPointsScratch.copy(zMax).subtract(zMin).magnitudeSquared();\n\n  // Set the diameter endpoints to the largest span.\n  let diameter1 = xMin;\n  let diameter2 = xMax;\n  let maxSpan = xSpan;\n  if (ySpan > maxSpan) {\n    maxSpan = ySpan;\n    diameter1 = yMin;\n    diameter2 = yMax;\n  }\n  if (zSpan > maxSpan) {\n    maxSpan = zSpan;\n    diameter1 = zMin;\n    diameter2 = zMax;\n  }\n\n  // Calculate the center of the initial sphere found by Ritter's algorithm\n  const ritterCenter = fromPointsRitterCenter;\n  ritterCenter.x = (diameter1.x + diameter2.x) * 0.5;\n  ritterCenter.y = (diameter1.y + diameter2.y) * 0.5;\n  ritterCenter.z = (diameter1.z + diameter2.z) * 0.5;\n\n  // Calculate the radius of the initial sphere found by Ritter's algorithm\n  let radiusSquared = fromPointsScratch.copy(diameter2).subtract(ritterCenter).magnitudeSquared();\n  let ritterRadius = Math.sqrt(radiusSquared);\n\n  // Find the center of the sphere found using the Naive method.\n  const minBoxPt = fromPointsMinBoxPt;\n  minBoxPt.x = xMin.x;\n  minBoxPt.y = yMin.y;\n  minBoxPt.z = zMin.z;\n\n  const maxBoxPt = fromPointsMaxBoxPt;\n  maxBoxPt.x = xMax.x;\n  maxBoxPt.y = yMax.y;\n  maxBoxPt.z = zMax.z;\n\n  const naiveCenter = fromPointsNaiveCenterScratch\n    .copy(minBoxPt)\n    .add(maxBoxPt)\n    .multiplyByScalar(0.5);\n\n  // Begin 2nd pass to find naive radius and modify the ritter sphere.\n  let naiveRadius = 0;\n  for (const position of positions) {\n    currentPos.copy(position);\n\n    // Find the furthest point from the naive center to calculate the naive radius.\n    const r = fromPointsScratch.copy(currentPos).subtract(naiveCenter).magnitude();\n    if (r > naiveRadius) {\n      naiveRadius = r;\n    }\n\n    // Make adjustments to the Ritter Sphere to include all points.\n    const oldCenterToPointSquared = fromPointsScratch\n      .copy(currentPos)\n      .subtract(ritterCenter)\n      .magnitudeSquared();\n\n    if (oldCenterToPointSquared > radiusSquared) {\n      const oldCenterToPoint = Math.sqrt(oldCenterToPointSquared);\n      // Calculate new radius to include the point that lies outside\n      ritterRadius = (ritterRadius + oldCenterToPoint) * 0.5;\n      radiusSquared = ritterRadius * ritterRadius;\n      // Calculate center of new Ritter sphere\n      const oldToNew = oldCenterToPoint - ritterRadius;\n      ritterCenter.x = (ritterRadius * ritterCenter.x + oldToNew * currentPos.x) / oldCenterToPoint;\n      ritterCenter.y = (ritterRadius * ritterCenter.y + oldToNew * currentPos.y) / oldCenterToPoint;\n      ritterCenter.z = (ritterRadius * ritterCenter.z + oldToNew * currentPos.z) / oldCenterToPoint;\n    }\n  }\n\n  if (ritterRadius < naiveRadius) {\n    ritterCenter.to(result.center);\n    result.radius = ritterRadius;\n  } else {\n    naiveCenter.to(result.center);\n    result.radius = naiveRadius;\n  }\n\n  return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}