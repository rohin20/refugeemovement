{"ast":null,"code":"import _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport MathArray from './base/math-array';\nimport { checkNumber, checkVector } from '../lib/validators';\nimport Vector4 from './vector4';\nimport * as quat from 'gl-matrix/quat';\nimport * as vec4 from 'gl-matrix/vec4';\nvar IDENTITY_QUATERNION = [0, 0, 0, 1];\nvar Quaternion = /*#__PURE__*/function (_MathArray) {\n  _inherits(Quaternion, _MathArray);\n  var _super = _createSuper(Quaternion);\n  function Quaternion() {\n    var _this;\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    _classCallCheck(this, Quaternion);\n    _this = _super.call(this, -0, -0, -0, -0);\n    if (Array.isArray(x) && arguments.length === 1) {\n      _this.copy(x);\n    } else {\n      _this.set(x, y, z, w);\n    }\n    return _this;\n  }\n  _createClass(Quaternion, [{\n    key: \"copy\",\n    value: function copy(array) {\n      this[0] = array[0];\n      this[1] = array[1];\n      this[2] = array[2];\n      this[3] = array[3];\n      return this.check();\n    }\n  }, {\n    key: \"set\",\n    value: function set(x, y, z, w) {\n      this[0] = x;\n      this[1] = y;\n      this[2] = z;\n      this[3] = w;\n      return this.check();\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(object) {\n      this[0] = object.x;\n      this[1] = object.y;\n      this[2] = object.z;\n      this[3] = object.w;\n      return this.check();\n    }\n  }, {\n    key: \"fromMatrix3\",\n    value: function fromMatrix3(m) {\n      quat.fromMat3(this, m);\n      return this.check();\n    }\n  }, {\n    key: \"fromAxisRotation\",\n    value: function fromAxisRotation(axis, rad) {\n      quat.setAxisAngle(this, axis, rad);\n      return this.check();\n    }\n  }, {\n    key: \"identity\",\n    value: function identity() {\n      quat.identity(this);\n      return this.check();\n    }\n  }, {\n    key: \"setAxisAngle\",\n    value: function setAxisAngle(axis, rad) {\n      return this.fromAxisRotation(axis, rad);\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 4;\n    }\n  }, {\n    key: \"x\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      this[0] = checkNumber(value);\n    }\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      this[1] = checkNumber(value);\n    }\n  }, {\n    key: \"z\",\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      this[2] = checkNumber(value);\n    }\n  }, {\n    key: \"w\",\n    get: function get() {\n      return this[3];\n    },\n    set: function set(value) {\n      this[3] = checkNumber(value);\n    }\n  }, {\n    key: \"len\",\n    value: function len() {\n      return quat.length(this);\n    }\n  }, {\n    key: \"lengthSquared\",\n    value: function lengthSquared() {\n      return quat.squaredLength(this);\n    }\n  }, {\n    key: \"dot\",\n    value: function dot(a) {\n      return quat.dot(this, a);\n    }\n  }, {\n    key: \"rotationTo\",\n    value: function rotationTo(vectorA, vectorB) {\n      quat.rotationTo(this, vectorA, vectorB);\n      return this.check();\n    }\n  }, {\n    key: \"add\",\n    value: function add(a) {\n      quat.add(this, this, a);\n      return this.check();\n    }\n  }, {\n    key: \"calculateW\",\n    value: function calculateW() {\n      quat.calculateW(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"conjugate\",\n    value: function conjugate() {\n      quat.conjugate(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      quat.invert(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"lerp\",\n    value: function lerp(a, b, t) {\n      if (t === undefined) {\n        return this.lerp(this, a, b);\n      }\n      quat.lerp(this, a, b, t);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyRight\",\n    value: function multiplyRight(a) {\n      quat.multiply(this, this, a);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyLeft\",\n    value: function multiplyLeft(a) {\n      quat.multiply(this, a, this);\n      return this.check();\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      var length = this.len();\n      var l = length > 0 ? 1 / length : 0;\n      this[0] = this[0] * l;\n      this[1] = this[1] * l;\n      this[2] = this[2] * l;\n      this[3] = this[3] * l;\n      if (length === 0) {\n        this[3] = 1;\n      }\n      return this.check();\n    }\n  }, {\n    key: \"rotateX\",\n    value: function rotateX(rad) {\n      quat.rotateX(this, this, rad);\n      return this.check();\n    }\n  }, {\n    key: \"rotateY\",\n    value: function rotateY(rad) {\n      quat.rotateY(this, this, rad);\n      return this.check();\n    }\n  }, {\n    key: \"rotateZ\",\n    value: function rotateZ(rad) {\n      quat.rotateZ(this, this, rad);\n      return this.check();\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(b) {\n      quat.scale(this, this, b);\n      return this.check();\n    }\n  }, {\n    key: \"slerp\",\n    value: function slerp(arg0, arg1, arg2) {\n      var start;\n      var target;\n      var ratio;\n      switch (arguments.length) {\n        case 1:\n          var _arg0$start = arg0.start;\n          start = _arg0$start === void 0 ? IDENTITY_QUATERNION : _arg0$start;\n          target = arg0.target;\n          ratio = arg0.ratio;\n          break;\n        case 2:\n          start = this;\n          target = arg0;\n          ratio = arg1;\n          break;\n        default:\n          start = arg0;\n          target = arg1;\n          ratio = arg2;\n      }\n      quat.slerp(this, start, target, ratio);\n      return this.check();\n    }\n  }, {\n    key: \"transformVector4\",\n    value: function transformVector4(vector) {\n      var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector4();\n      vec4.transformQuat(result, vector, this);\n      return checkVector(result, 4);\n    }\n  }, {\n    key: \"lengthSq\",\n    value: function lengthSq() {\n      return this.lengthSquared();\n    }\n  }, {\n    key: \"setFromAxisAngle\",\n    value: function setFromAxisAngle(axis, rad) {\n      return this.setAxisAngle(axis, rad);\n    }\n  }, {\n    key: \"premultiply\",\n    value: function premultiply(a) {\n      return this.multiplyLeft(a);\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(a) {\n      return this.multiplyRight(a);\n    }\n  }]);\n  return Quaternion;\n}(MathArray);\nexport { Quaternion as default };","map":{"version":3,"names":["MathArray","checkNumber","checkVector","Vector4","quat","vec4","IDENTITY_QUATERNION","Quaternion","_MathArray","_inherits","_super","_createSuper","_this","x","arguments","length","undefined","y","z","w","_classCallCheck","call","Array","isArray","copy","set","_createClass","key","value","array","check","fromObject","object","fromMatrix3","m","fromMat3","fromAxisRotation","axis","rad","setAxisAngle","identity","get","len","lengthSquared","squaredLength","dot","a","rotationTo","vectorA","vectorB","add","calculateW","conjugate","invert","lerp","b","t","multiplyRight","multiply","multiplyLeft","normalize","l","rotateX","rotateY","rotateZ","scale","slerp","arg0","arg1","arg2","start","target","ratio","_arg0$start","transformVector4","vector","result","transformQuat","lengthSq","setFromAxisAngle","premultiply","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@math.gl/core/src/classes/quaternion.ts"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport MathArray from './base/math-array';\nimport {checkNumber, checkVector} from '../lib/validators';\nimport Vector4 from './vector4';\nimport * as quat from 'gl-matrix/quat';\nimport * as vec4 from 'gl-matrix/vec4';\nimport {NumericArray} from '@math.gl/types';\n\nconst IDENTITY_QUATERNION = [0, 0, 0, 1] as const;\n\nexport default class Quaternion extends MathArray {\n  constructor(x: number | Readonly<NumericArray> = 0, y = 0, z = 0, w = 1) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0);\n    // eslint-disable-next-line prefer-rest-params\n    if (Array.isArray(x) && arguments.length === 1) {\n      this.copy(x);\n    } else {\n      this.set(x as number, y, z, w);\n    }\n  }\n\n  copy(array: Readonly<NumericArray>): this {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    return this.check();\n  }\n\n  set(x: number, y: number, z: number, w: number): this {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = w;\n    return this.check();\n  }\n\n  fromObject(object: {x: number; y: number; z: number; w: number}): this {\n    this[0] = object.x;\n    this[1] = object.y;\n    this[2] = object.z;\n    this[3] = object.w;\n    return this.check();\n  }\n\n  /**\n   * Creates a quaternion from the given 3x3 rotation matrix.\n   * NOTE: The resultant quaternion is not normalized, so you should\n   * be sure to renormalize the quaternion yourself where necessary.\n   * @param m\n   * @returns\n   */\n  fromMatrix3(m: Readonly<NumericArray>): this {\n    quat.fromMat3(this, m);\n    return this.check();\n  }\n\n  fromAxisRotation(axis: Readonly<NumericArray>, rad: number): this {\n    quat.setAxisAngle(this, axis, rad);\n    return this.check();\n  }\n\n  /** Set a quat to the identity quaternion */\n  identity(): this {\n    quat.identity(this);\n    return this.check();\n  }\n\n  // Set the components of a quat to the given values\n  // set(i, j, k, l) {\n  //   quat.set(this, i, j, k, l);\n  //   return this.check();\n  // }\n\n  // Sets a quat from the given angle and rotation axis, then returns it.\n  setAxisAngle(axis: Readonly<NumericArray>, rad: number): this {\n    return this.fromAxisRotation(axis, rad);\n  }\n\n  // Getters/setters\n  get ELEMENTS(): number {\n    return 4;\n  }\n\n  get x(): number {\n    return this[0];\n  }\n  set x(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get y(): number {\n    return this[1];\n  }\n  set y(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get z(): number {\n    return this[2];\n  }\n  set z(value: number) {\n    this[2] = checkNumber(value);\n  }\n\n  get w(): number {\n    return this[3];\n  }\n  set w(value: number) {\n    this[3] = checkNumber(value);\n  }\n\n  // Calculates the length of a quat\n  len(): number {\n    return quat.length(this);\n  }\n\n  // Calculates the squared length of a quat\n  lengthSquared(): number {\n    return quat.squaredLength(this);\n  }\n\n  // Calculates the dot product of two quat's\n  // @return {Number}\n  dot(a: Readonly<NumericArray>): number {\n    return quat.dot(this, a);\n  }\n\n  // Gets the rotation axis and angle for a given quaternion.\n  // If a quaternion is created with setAxisAngle, this method will\n  // return the same values as providied in the original parameter\n  // list OR functionally equivalent values.\n  // Example: The quaternion formed by axis [0, 0, 1] and angle -90\n  // is the same as the quaternion formed by [0, 0, 1] and 270.\n  // This method favors the latter.\n  // @return {{[x,y,z], Number}}\n  // getAxisAngle() {\n  //   const axis = [];\n  //   const angle = quat.getAxisAngle(axis, this);\n  //   return {axis, angle};\n  // }\n  // MODIFIERS\n  // Sets a quaternion to represent the shortest rotation from one vector\n  // to another. Both vectors are assumed to be unit length.\n  rotationTo(vectorA: NumericArray, vectorB: NumericArray): this {\n    quat.rotationTo(this, vectorA, vectorB);\n    return this.check();\n  }\n\n  // Sets the specified quaternion with values corresponding to the given axes.\n  // Each axis is a vec3 and is expected to be unit length and perpendicular\n  // to all other specified axes.\n  // setAxes() {\n  //   Number\n  // }\n  // Performs a spherical linear interpolation with two control points\n  // sqlerp() {\n  //   Number;\n  // }\n  // Adds two quat's\n  add(a: Readonly<NumericArray>): this {\n    quat.add(this, this, a);\n    return this.check();\n  }\n\n  // Calculates the W component of a quat from the X, Y, and Z components.\n  // Any existing W component will be ignored.\n  calculateW(): this {\n    quat.calculateW(this, this);\n    return this.check();\n  }\n\n  // Calculates the conjugate of a quat If the quaternion is normalized,\n  // this function is faster than quat.inverse and produces the same result.\n  conjugate(): this {\n    quat.conjugate(this, this);\n    return this.check();\n  }\n\n  // Calculates the inverse of a quat\n  invert(): this {\n    quat.invert(this, this);\n    return this.check();\n  }\n\n  // Performs a linear interpolation between two quat's\n  lerp(a: Readonly<NumericArray>, b: Readonly<NumericArray> | number, t?: number): this {\n    if (t === undefined) {\n      return this.lerp(this, a, b as number);\n    }\n    quat.lerp(this, a, b as NumericArray, t);\n    return this.check();\n  }\n\n  // Multiplies two quat's\n  multiplyRight(a: Readonly<NumericArray>): this {\n    quat.multiply(this, this, a);\n    return this.check();\n  }\n\n  multiplyLeft(a: Readonly<NumericArray>): this {\n    quat.multiply(this, a, this);\n    return this.check();\n  }\n\n  // Normalize a quat\n  normalize(): this {\n    // Handle 0 case\n    const length = this.len();\n    const l = length > 0 ? 1 / length : 0;\n    this[0] = this[0] * l;\n    this[1] = this[1] * l;\n    this[2] = this[2] * l;\n    this[3] = this[3] * l;\n    // Set to [0, 0, 0, 1] if length is 0\n    if (length === 0) {\n      this[3] = 1;\n    }\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the X axis\n  rotateX(rad: number): this {\n    quat.rotateX(this, this, rad);\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the Y axis\n  rotateY(rad: number): this {\n    quat.rotateY(this, this, rad);\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the Z axis\n  rotateZ(rad: number): this {\n    quat.rotateZ(this, this, rad);\n    return this.check();\n  }\n\n  // Scales a quat by a scalar number\n  scale(b: number): this {\n    quat.scale(this, this, b);\n    return this.check();\n  }\n\n  slerp(target: Readonly<NumericArray>, ratio: number): this;\n  slerp(start: Readonly<NumericArray>, target: Readonly<NumericArray>, ratio: number): this;\n  slerp(params: {\n    start: Readonly<NumericArray>;\n    target: Readonly<NumericArray>;\n    ratio: number;\n  }): this;\n\n  // Performs a spherical linear interpolation between two quat\n  slerp(\n    arg0:\n      | Readonly<NumericArray>\n      | {\n          start: Readonly<NumericArray>;\n          target: Readonly<NumericArray>;\n          ratio: number;\n        },\n    arg1?: Readonly<NumericArray> | number,\n    arg2?: number\n  ): this {\n    let start: Readonly<NumericArray>;\n    let target: Readonly<NumericArray>;\n    let ratio: number;\n    // eslint-disable-next-line prefer-rest-params\n    switch (arguments.length) {\n      case 1: // Deprecated signature ({start, target, ratio})\n        // eslint-disable-next-line prefer-rest-params\n        ({\n          start = IDENTITY_QUATERNION,\n          target,\n          ratio\n        } = arg0 as {\n          start: Readonly<NumericArray>;\n          target: Readonly<NumericArray>;\n          ratio: number;\n        });\n        break;\n      case 2: // THREE.js compatibility signature (target, ration)\n        start = this; // eslint-disable-line\n        target = arg0 as Readonly<NumericArray>;\n        ratio = arg1 as number;\n        break;\n      default:\n        // Default signature: (start, target, ratio)\n        start = arg0 as Readonly<NumericArray>;\n        target = arg1 as Readonly<NumericArray>;\n        ratio = arg2;\n    }\n    quat.slerp(this, start, target, ratio);\n    return this.check();\n  }\n\n  transformVector4(\n    vector: Readonly<NumericArray>,\n    result: NumericArray = new Vector4()\n  ): NumericArray {\n    vec4.transformQuat(result, vector, this);\n    return checkVector(result, 4);\n  }\n\n  // THREE.js Math API compatibility\n  lengthSq(): number {\n    return this.lengthSquared();\n  }\n\n  setFromAxisAngle(axis: Readonly<NumericArray>, rad: number): this {\n    return this.setAxisAngle(axis, rad);\n  }\n\n  premultiply(a: Readonly<NumericArray>): this {\n    return this.multiplyLeft(a);\n  }\n\n  multiply(a: Readonly<NumericArray>): this {\n    return this.multiplyRight(a);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}