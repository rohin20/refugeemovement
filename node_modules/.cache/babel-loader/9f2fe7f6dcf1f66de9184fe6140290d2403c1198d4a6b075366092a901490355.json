{"ast":null,"code":"import _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport Accessor from './accessor';\nimport { isWebGL2 } from '@luma.gl/gltools';\nimport { decomposeCompositeGLType } from '../webgl-utils/attribute-utils';\nvar ProgramConfiguration = /*#__PURE__*/function () {\n  function ProgramConfiguration(program) {\n    _classCallCheck(this, ProgramConfiguration);\n    this.id = program.id;\n    this.attributeInfos = [];\n    this.attributeInfosByName = {};\n    this.attributeInfosByLocation = [];\n    this.varyingInfos = [];\n    this.varyingInfosByName = {};\n    Object.seal(this);\n    this._readAttributesFromProgram(program);\n    this._readVaryingsFromProgram(program);\n  }\n  _createClass(ProgramConfiguration, [{\n    key: \"getAttributeInfo\",\n    value: function getAttributeInfo(locationOrName) {\n      var location = Number(locationOrName);\n      if (Number.isFinite(location)) {\n        return this.attributeInfosByLocation[location];\n      }\n      return this.attributeInfosByName[locationOrName] || null;\n    }\n  }, {\n    key: \"getAttributeLocation\",\n    value: function getAttributeLocation(locationOrName) {\n      var attributeInfo = this.getAttributeInfo(locationOrName);\n      return attributeInfo ? attributeInfo.location : -1;\n    }\n  }, {\n    key: \"getAttributeAccessor\",\n    value: function getAttributeAccessor(locationOrName) {\n      var attributeInfo = this.getAttributeInfo(locationOrName);\n      return attributeInfo ? attributeInfo.accessor : null;\n    }\n  }, {\n    key: \"getVaryingInfo\",\n    value: function getVaryingInfo(locationOrName) {\n      var location = Number(locationOrName);\n      if (Number.isFinite(location)) {\n        return this.varyingInfos[location];\n      }\n      return this.varyingInfosByName[locationOrName] || null;\n    }\n  }, {\n    key: \"getVaryingIndex\",\n    value: function getVaryingIndex(locationOrName) {\n      var varying = this.getVaryingInfo();\n      return varying ? varying.location : -1;\n    }\n  }, {\n    key: \"getVaryingAccessor\",\n    value: function getVaryingAccessor(locationOrName) {\n      var varying = this.getVaryingInfo();\n      return varying ? varying.accessor : null;\n    }\n  }, {\n    key: \"_readAttributesFromProgram\",\n    value: function _readAttributesFromProgram(program) {\n      var gl = program.gl;\n      var count = gl.getProgramParameter(program.handle, 35721);\n      for (var index = 0; index < count; index++) {\n        var _gl$getActiveAttrib = gl.getActiveAttrib(program.handle, index),\n          name = _gl$getActiveAttrib.name,\n          type = _gl$getActiveAttrib.type,\n          size = _gl$getActiveAttrib.size;\n        var location = gl.getAttribLocation(program.handle, name);\n        if (location >= 0) {\n          this._addAttribute(location, name, type, size);\n        }\n      }\n      this.attributeInfos.sort(function (a, b) {\n        return a.location - b.location;\n      });\n    }\n  }, {\n    key: \"_readVaryingsFromProgram\",\n    value: function _readVaryingsFromProgram(program) {\n      var gl = program.gl;\n      if (!isWebGL2(gl)) {\n        return;\n      }\n      var count = gl.getProgramParameter(program.handle, 35971);\n      for (var location = 0; location < count; location++) {\n        var _gl$getTransformFeedb = gl.getTransformFeedbackVarying(program.handle, location),\n          name = _gl$getTransformFeedb.name,\n          type = _gl$getTransformFeedb.type,\n          size = _gl$getTransformFeedb.size;\n        this._addVarying(location, name, type, size);\n      }\n      this.varyingInfos.sort(function (a, b) {\n        return a.location - b.location;\n      });\n    }\n  }, {\n    key: \"_addAttribute\",\n    value: function _addAttribute(location, name, compositeType, size) {\n      var _decomposeCompositeGL = decomposeCompositeGLType(compositeType),\n        type = _decomposeCompositeGL.type,\n        components = _decomposeCompositeGL.components;\n      var accessor = {\n        type: type,\n        size: size * components\n      };\n      this._inferProperties(location, name, accessor);\n      var attributeInfo = {\n        location: location,\n        name: name,\n        accessor: new Accessor(accessor)\n      };\n      this.attributeInfos.push(attributeInfo);\n      this.attributeInfosByLocation[location] = attributeInfo;\n      this.attributeInfosByName[attributeInfo.name] = attributeInfo;\n    }\n  }, {\n    key: \"_inferProperties\",\n    value: function _inferProperties(location, name, accessor) {\n      if (/instance/i.test(name)) {\n        accessor.divisor = 1;\n      }\n    }\n  }, {\n    key: \"_addVarying\",\n    value: function _addVarying(location, name, compositeType, size) {\n      var _decomposeCompositeGL2 = decomposeCompositeGLType(compositeType),\n        type = _decomposeCompositeGL2.type,\n        components = _decomposeCompositeGL2.components;\n      var accessor = new Accessor({\n        type: type,\n        size: size * components\n      });\n      var varying = {\n        location: location,\n        name: name,\n        accessor: accessor\n      };\n      this.varyingInfos.push(varying);\n      this.varyingInfosByName[varying.name] = varying;\n    }\n  }]);\n  return ProgramConfiguration;\n}();\nexport { ProgramConfiguration as default };","map":{"version":3,"names":["Accessor","isWebGL2","decomposeCompositeGLType","ProgramConfiguration","program","_classCallCheck","id","attributeInfos","attributeInfosByName","attributeInfosByLocation","varyingInfos","varyingInfosByName","Object","seal","_readAttributesFromProgram","_readVaryingsFromProgram","_createClass","key","value","getAttributeInfo","locationOrName","location","Number","isFinite","getAttributeLocation","attributeInfo","getAttributeAccessor","accessor","getVaryingInfo","getVaryingIndex","varying","getVaryingAccessor","gl","count","getProgramParameter","handle","index","_gl$getActiveAttrib","getActiveAttrib","name","type","size","getAttribLocation","_addAttribute","sort","a","b","_gl$getTransformFeedb","getTransformFeedbackVarying","_addVarying","compositeType","_decomposeCompositeGL","components","_inferProperties","push","test","divisor","_decomposeCompositeGL2","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@luma.gl/webgl/src/classes/program-configuration.js"],"sourcesContent":["// Contains metadata describing attribute configurations for a program's shaders\n// Much of this is automatically extracted from shaders after program linking\nimport Accessor from './accessor';\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {decomposeCompositeGLType} from '../webgl-utils/attribute-utils';\n\nexport default class ProgramConfiguration {\n  constructor(program) {\n    this.id = program.id;\n    this.attributeInfos = [];\n    this.attributeInfosByName = {};\n\n    // Locations may not be contiguous the case of matrix attributes\n    // so keep a separate location->attribute map.\n    this.attributeInfosByLocation = [];\n    this.varyingInfos = [];\n    this.varyingInfosByName = {};\n    Object.seal(this);\n    this._readAttributesFromProgram(program);\n    this._readVaryingsFromProgram(program);\n  }\n\n  getAttributeInfo(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return this.attributeInfosByLocation[location];\n    }\n    return this.attributeInfosByName[locationOrName] || null;\n  }\n\n  // Resolves an attribute name or index to an index\n  getAttributeLocation(locationOrName) {\n    const attributeInfo = this.getAttributeInfo(locationOrName);\n    return attributeInfo ? attributeInfo.location : -1;\n  }\n\n  getAttributeAccessor(locationOrName) {\n    const attributeInfo = this.getAttributeInfo(locationOrName);\n    return attributeInfo ? attributeInfo.accessor : null;\n  }\n\n  getVaryingInfo(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return this.varyingInfos[location];\n    }\n    return this.varyingInfosByName[locationOrName] || null;\n  }\n\n  getVaryingIndex(locationOrName) {\n    const varying = this.getVaryingInfo();\n    return varying ? varying.location : -1;\n  }\n\n  getVaryingAccessor(locationOrName) {\n    const varying = this.getVaryingInfo();\n    return varying ? varying.accessor : null;\n  }\n\n  // PRIVATE METHODS\n\n  // linkProgram needs to have been called, although linking does not need to have been successful\n  _readAttributesFromProgram(program) {\n    const {gl} = program;\n    const count = gl.getProgramParameter(program.handle, gl.ACTIVE_ATTRIBUTES);\n\n    for (let index = 0; index < count; index++) {\n      const {name, type, size} = gl.getActiveAttrib(program.handle, index);\n      const location = gl.getAttribLocation(program.handle, name);\n      // Add only user provided attributes, for built-in attributes like\n      // `gl_InstanceID` locaiton will be < 0\n      if (location >= 0) {\n        this._addAttribute(location, name, type, size);\n      }\n    }\n\n    this.attributeInfos.sort((a, b) => a.location - b.location);\n  }\n\n  // linkProgram needs to have been called, although linking does not need to have been successful\n  _readVaryingsFromProgram(program) {\n    const {gl} = program;\n    if (!isWebGL2(gl)) {\n      return;\n    }\n\n    const count = gl.getProgramParameter(program.handle, gl.TRANSFORM_FEEDBACK_VARYINGS);\n    for (let location = 0; location < count; location++) {\n      const {name, type, size} = gl.getTransformFeedbackVarying(program.handle, location);\n      this._addVarying(location, name, type, size);\n    }\n\n    this.varyingInfos.sort((a, b) => a.location - b.location);\n  }\n\n  _addAttribute(location, name, compositeType, size) {\n    const {type, components} = decomposeCompositeGLType(compositeType);\n    const accessor = {type, size: size * components};\n    this._inferProperties(location, name, accessor);\n\n    const attributeInfo = {location, name, accessor: new Accessor(accessor)}; // Base values\n    this.attributeInfos.push(attributeInfo);\n    this.attributeInfosByLocation[location] = attributeInfo; // For quick location based lookup\n    this.attributeInfosByName[attributeInfo.name] = attributeInfo; // For quick name based lookup\n  }\n\n  // Extract additional attribute metadata from shader names (based on attribute naming conventions)\n  _inferProperties(location, name, accessor) {\n    if (/instance/i.test(name)) {\n      // Any attribute containing the word \"instance\" will be assumed to be instanced\n      accessor.divisor = 1;\n    }\n  }\n\n  _addVarying(location, name, compositeType, size) {\n    const {type, components} = decomposeCompositeGLType(compositeType);\n    const accessor = new Accessor({type, size: size * components});\n\n    const varying = {location, name, accessor}; // Base values\n    this.varyingInfos.push(varying);\n    this.varyingInfosByName[varying.name] = varying; // For quick name based lookup\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}