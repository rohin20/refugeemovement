{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getGlobalTaskQueue = getGlobalTaskQueue;\nexports.updateGlobalTaskQueue = updateGlobalTaskQueue;\nexports.getLastWithTaskCall = getLastWithTaskCall;\nexports.setLastWithTaskCall = setLastWithTaskCall;\nexports.clearLastWithTaskCall = clearLastWithTaskCall;\n\n/**\n * For apps using Redux, we provide `withTasks` for `lift`ing tasks\n * out of a \"sub-reducer\" into the top-level app's space. This helps remove\n * extra plumbing that would potentially add boilerplate.\n *\n * To support this, we create a global record to collect tasks (and debug info).\n * Although this queue is global, we reset it between dispatches to the store.\n * You can think of this queue as a \"thread local.\"\n *\n * We also want to make sure that if multiple versions of react-palm are loaded,\n * that we're able to have just a single queue.\n *\n * End users should not use any of these APIs directly. Instead, use the\n * redux middleware.\n */\n// We attach an object to `window` or `global` with this name.\nvar GLOBAL_TASK_STATE = '___GLOBAL_TASK_STATE_e3b0c442';\n// Try to determine the object representing the global namespace.\nvar GLOBAL = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {};\nif (typeof GLOBAL[GLOBAL_TASK_STATE] !== 'undefined') {\n  console.warn('More than one copy of react-palm was loaded. This may cause problems.');\n} else {\n  Object.defineProperty(GLOBAL, GLOBAL_TASK_STATE, {\n    ennumerable: false,\n    value: {\n      tasks: [],\n      lastWithTaskCall: null\n    }\n  });\n}\n/*\n * Getters and setters used by test utils and redux middlware.\n * Again, you probably don't need to ever use these directly.\n */\n\nfunction getGlobalTaskQueue() {\n  return GLOBAL[GLOBAL_TASK_STATE].tasks;\n}\nfunction updateGlobalTaskQueue(newQueue) {\n  GLOBAL[GLOBAL_TASK_STATE].tasks = newQueue;\n}\nfunction getLastWithTaskCall() {\n  return GLOBAL[GLOBAL_TASK_STATE].lastWithTaskCall;\n}\nfunction setLastWithTaskCall(last) {\n  GLOBAL[GLOBAL_TASK_STATE].lastWithTaskCall = last;\n}\nfunction clearLastWithTaskCall() {\n  GLOBAL[GLOBAL_TASK_STATE].lastWithTaskCall = null;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","getGlobalTaskQueue","updateGlobalTaskQueue","getLastWithTaskCall","setLastWithTaskCall","clearLastWithTaskCall","GLOBAL_TASK_STATE","GLOBAL","window","global","console","warn","ennumerable","tasks","lastWithTaskCall","newQueue","last"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/react-palm/tasks/global.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getGlobalTaskQueue = getGlobalTaskQueue;\nexports.updateGlobalTaskQueue = updateGlobalTaskQueue;\nexports.getLastWithTaskCall = getLastWithTaskCall;\nexports.setLastWithTaskCall = setLastWithTaskCall;\nexports.clearLastWithTaskCall = clearLastWithTaskCall;\n\n/**\n * For apps using Redux, we provide `withTasks` for `lift`ing tasks\n * out of a \"sub-reducer\" into the top-level app's space. This helps remove\n * extra plumbing that would potentially add boilerplate.\n *\n * To support this, we create a global record to collect tasks (and debug info).\n * Although this queue is global, we reset it between dispatches to the store.\n * You can think of this queue as a \"thread local.\"\n *\n * We also want to make sure that if multiple versions of react-palm are loaded,\n * that we're able to have just a single queue.\n *\n * End users should not use any of these APIs directly. Instead, use the\n * redux middleware.\n */\n// We attach an object to `window` or `global` with this name.\nvar GLOBAL_TASK_STATE = '___GLOBAL_TASK_STATE_e3b0c442';\n// Try to determine the object representing the global namespace.\nvar GLOBAL = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {};\n\nif (typeof GLOBAL[GLOBAL_TASK_STATE] !== 'undefined') {\n  console.warn('More than one copy of react-palm was loaded. This may cause problems.');\n} else {\n  Object.defineProperty(GLOBAL, GLOBAL_TASK_STATE, {\n    ennumerable: false,\n    value: {\n      tasks: [],\n      lastWithTaskCall: null\n    }\n  });\n}\n/*\n * Getters and setters used by test utils and redux middlware.\n * Again, you probably don't need to ever use these directly.\n */\n\n\nfunction getGlobalTaskQueue() {\n  return GLOBAL[GLOBAL_TASK_STATE].tasks;\n}\n\nfunction updateGlobalTaskQueue(newQueue) {\n  GLOBAL[GLOBAL_TASK_STATE].tasks = newQueue;\n}\n\nfunction getLastWithTaskCall() {\n  return GLOBAL[GLOBAL_TASK_STATE].lastWithTaskCall;\n}\n\nfunction setLastWithTaskCall(last) {\n  GLOBAL[GLOBAL_TASK_STATE].lastWithTaskCall = last;\n}\n\nfunction clearLastWithTaskCall() {\n  GLOBAL[GLOBAL_TASK_STATE].lastWithTaskCall = null;\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB;AAC/CF,OAAO,CAACG,qBAAqB,GAAGA,qBAAqB;AACrDH,OAAO,CAACI,mBAAmB,GAAGA,mBAAmB;AACjDJ,OAAO,CAACK,mBAAmB,GAAGA,mBAAmB;AACjDL,OAAO,CAACM,qBAAqB,GAAGA,qBAAqB;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,iBAAiB,GAAG,+BAA+B;AACvD;AACA,IAAIC,MAAM,GAAG,OAAOC,MAAM,KAAK,WAAW,GAAGA,MAAM,GAAG,OAAOC,MAAM,KAAK,WAAW,GAAGA,MAAM,GAAG,CAAC,CAAC;AAEjG,IAAI,OAAOF,MAAM,CAACD,iBAAiB,CAAC,KAAK,WAAW,EAAE;EACpDI,OAAO,CAACC,IAAI,CAAC,uEAAuE,CAAC;AACvF,CAAC,MAAM;EACLd,MAAM,CAACC,cAAc,CAACS,MAAM,EAAED,iBAAiB,EAAE;IAC/CM,WAAW,EAAE,KAAK;IAClBZ,KAAK,EAAE;MACLa,KAAK,EAAE,EAAE;MACTC,gBAAgB,EAAE;IACpB;EACF,CAAC,CAAC;AACJ;AACA;AACA;AACA;AACA;;AAGA,SAASb,kBAAkBA,CAAA,EAAG;EAC5B,OAAOM,MAAM,CAACD,iBAAiB,CAAC,CAACO,KAAK;AACxC;AAEA,SAASX,qBAAqBA,CAACa,QAAQ,EAAE;EACvCR,MAAM,CAACD,iBAAiB,CAAC,CAACO,KAAK,GAAGE,QAAQ;AAC5C;AAEA,SAASZ,mBAAmBA,CAAA,EAAG;EAC7B,OAAOI,MAAM,CAACD,iBAAiB,CAAC,CAACQ,gBAAgB;AACnD;AAEA,SAASV,mBAAmBA,CAACY,IAAI,EAAE;EACjCT,MAAM,CAACD,iBAAiB,CAAC,CAACQ,gBAAgB,GAAGE,IAAI;AACnD;AAEA,SAASX,qBAAqBA,CAAA,EAAG;EAC/BE,MAAM,CAACD,iBAAiB,CAAC,CAACQ,gBAAgB,GAAG,IAAI;AACnD"},"metadata":{},"sourceType":"script","externalDependencies":[]}