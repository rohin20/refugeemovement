{"ast":null,"code":"import { ascending, min, sum } from \"d3-array\";\nimport { map, nest } from \"d3-collection\";\nimport { justify } from \"./align\";\nimport constant from \"./constant\";\nfunction ascendingSourceBreadth(a, b) {\n  return ascendingBreadth(a.source, b.source) || a.index - b.index;\n}\nfunction ascendingTargetBreadth(a, b) {\n  return ascendingBreadth(a.target, b.target) || a.index - b.index;\n}\nfunction ascendingBreadth(a, b) {\n  return a.y0 - b.y0;\n}\nfunction value(d) {\n  return d.value;\n}\nfunction nodeCenter(node) {\n  return (node.y0 + node.y1) / 2;\n}\nfunction weightedSource(link) {\n  return nodeCenter(link.source) * link.value;\n}\nfunction weightedTarget(link) {\n  return nodeCenter(link.target) * link.value;\n}\nfunction defaultId(d) {\n  return d.index;\n}\nfunction defaultNodes(graph) {\n  return graph.nodes;\n}\nfunction defaultLinks(graph) {\n  return graph.links;\n}\nfunction find(nodeById, id) {\n  var node = nodeById.get(id);\n  if (!node) throw new Error(\"missing: \" + id);\n  return node;\n}\nexport default function () {\n  var x0 = 0,\n    y0 = 0,\n    x1 = 1,\n    y1 = 1,\n    // extent\n    dx = 24,\n    // nodeWidth\n    py = 8,\n    // nodePadding\n    id = defaultId,\n    align = justify,\n    nodes = defaultNodes,\n    links = defaultLinks,\n    iterations = 32;\n  function sankey() {\n    var graph = {\n      nodes: nodes.apply(null, arguments),\n      links: links.apply(null, arguments)\n    };\n    computeNodeLinks(graph);\n    computeNodeValues(graph);\n    computeNodeDepths(graph);\n    computeNodeBreadths(graph, iterations);\n    computeLinkBreadths(graph);\n    return graph;\n  }\n  sankey.update = function (graph) {\n    computeLinkBreadths(graph);\n    return graph;\n  };\n  sankey.nodeId = function (_) {\n    return arguments.length ? (id = typeof _ === \"function\" ? _ : constant(_), sankey) : id;\n  };\n  sankey.nodeAlign = function (_) {\n    return arguments.length ? (align = typeof _ === \"function\" ? _ : constant(_), sankey) : align;\n  };\n  sankey.nodeWidth = function (_) {\n    return arguments.length ? (dx = +_, sankey) : dx;\n  };\n  sankey.nodePadding = function (_) {\n    return arguments.length ? (py = +_, sankey) : py;\n  };\n  sankey.nodes = function (_) {\n    return arguments.length ? (nodes = typeof _ === \"function\" ? _ : constant(_), sankey) : nodes;\n  };\n  sankey.links = function (_) {\n    return arguments.length ? (links = typeof _ === \"function\" ? _ : constant(_), sankey) : links;\n  };\n  sankey.size = function (_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], sankey) : [x1 - x0, y1 - y0];\n  };\n  sankey.extent = function (_) {\n    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], sankey) : [[x0, y0], [x1, y1]];\n  };\n  sankey.iterations = function (_) {\n    return arguments.length ? (iterations = +_, sankey) : iterations;\n  };\n\n  // Populate the sourceLinks and targetLinks for each node.\n  // Also, if the source and target are not objects, assume they are indices.\n  function computeNodeLinks(graph) {\n    graph.nodes.forEach(function (node, i) {\n      node.index = i;\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    });\n    var nodeById = map(graph.nodes, id);\n    graph.links.forEach(function (link, i) {\n      link.index = i;\n      var source = link.source,\n        target = link.target;\n      if (typeof source !== \"object\") source = link.source = find(nodeById, source);\n      if (typeof target !== \"object\") target = link.target = find(nodeById, target);\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    });\n  }\n\n  // Compute the value (size) of each node by summing the associated links.\n  function computeNodeValues(graph) {\n    graph.nodes.forEach(function (node) {\n      node.value = Math.max(sum(node.sourceLinks, value), sum(node.targetLinks, value));\n    });\n  }\n\n  // Iteratively assign the depth (x-position) for each node.\n  // Nodes are assigned the maximum depth of incoming neighbors plus one;\n  // nodes with no incoming links are assigned depth zero, while\n  // nodes with no outgoing links are assigned the maximum depth.\n  function computeNodeDepths(graph) {\n    var nodes, next, x;\n    for (nodes = graph.nodes, next = [], x = 0; nodes.length; ++x, nodes = next, next = []) {\n      nodes.forEach(function (node) {\n        node.depth = x;\n        node.sourceLinks.forEach(function (link) {\n          if (next.indexOf(link.target) < 0) {\n            next.push(link.target);\n          }\n        });\n      });\n    }\n    for (nodes = graph.nodes, next = [], x = 0; nodes.length; ++x, nodes = next, next = []) {\n      nodes.forEach(function (node) {\n        node.height = x;\n        node.targetLinks.forEach(function (link) {\n          if (next.indexOf(link.source) < 0) {\n            next.push(link.source);\n          }\n        });\n      });\n    }\n    var kx = (x1 - x0 - dx) / (x - 1);\n    graph.nodes.forEach(function (node) {\n      node.x1 = (node.x0 = x0 + Math.max(0, Math.min(x - 1, Math.floor(align.call(null, node, x)))) * kx) + dx;\n    });\n  }\n  function computeNodeBreadths(graph) {\n    var columns = nest().key(function (d) {\n      return d.x0;\n    }).sortKeys(ascending).entries(graph.nodes).map(function (d) {\n      return d.values;\n    });\n\n    //\n    initializeNodeBreadth();\n    resolveCollisions();\n    for (var alpha = 1, n = iterations; n > 0; --n) {\n      relaxRightToLeft(alpha *= 0.99);\n      resolveCollisions();\n      relaxLeftToRight(alpha);\n      resolveCollisions();\n    }\n    function initializeNodeBreadth() {\n      var ky = min(columns, function (nodes) {\n        return (y1 - y0 - (nodes.length - 1) * py) / sum(nodes, value);\n      });\n      columns.forEach(function (nodes) {\n        nodes.forEach(function (node, i) {\n          node.y1 = (node.y0 = i) + node.value * ky;\n        });\n      });\n      graph.links.forEach(function (link) {\n        link.width = link.value * ky;\n      });\n    }\n    function relaxLeftToRight(alpha) {\n      columns.forEach(function (nodes) {\n        nodes.forEach(function (node) {\n          if (node.targetLinks.length) {\n            var dy = (sum(node.targetLinks, weightedSource) / sum(node.targetLinks, value) - nodeCenter(node)) * alpha;\n            node.y0 += dy, node.y1 += dy;\n          }\n        });\n      });\n    }\n    function relaxRightToLeft(alpha) {\n      columns.slice().reverse().forEach(function (nodes) {\n        nodes.forEach(function (node) {\n          if (node.sourceLinks.length) {\n            var dy = (sum(node.sourceLinks, weightedTarget) / sum(node.sourceLinks, value) - nodeCenter(node)) * alpha;\n            node.y0 += dy, node.y1 += dy;\n          }\n        });\n      });\n    }\n    function resolveCollisions() {\n      columns.forEach(function (nodes) {\n        var node,\n          dy,\n          y = y0,\n          n = nodes.length,\n          i;\n\n        // Push any overlapping nodes down.\n        nodes.sort(ascendingBreadth);\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          dy = y - node.y0;\n          if (dy > 0) node.y0 += dy, node.y1 += dy;\n          y = node.y1 + py;\n        }\n\n        // If the bottommost node goes outside the bounds, push it back up.\n        dy = y - py - y1;\n        if (dy > 0) {\n          y = node.y0 -= dy, node.y1 -= dy;\n\n          // Push any overlapping nodes back up.\n          for (i = n - 2; i >= 0; --i) {\n            node = nodes[i];\n            dy = node.y1 + py - y;\n            if (dy > 0) node.y0 -= dy, node.y1 -= dy;\n            y = node.y0;\n          }\n        }\n      });\n    }\n  }\n  function computeLinkBreadths(graph) {\n    graph.nodes.forEach(function (node) {\n      node.sourceLinks.sort(ascendingTargetBreadth);\n      node.targetLinks.sort(ascendingSourceBreadth);\n    });\n    graph.nodes.forEach(function (node) {\n      var y0 = node.y0,\n        y1 = y0;\n      node.sourceLinks.forEach(function (link) {\n        link.y0 = y0 + link.width / 2, y0 += link.width;\n      });\n      node.targetLinks.forEach(function (link) {\n        link.y1 = y1 + link.width / 2, y1 += link.width;\n      });\n    });\n  }\n  return sankey;\n}","map":{"version":3,"names":["ascending","min","sum","map","nest","justify","constant","ascendingSourceBreadth","a","b","ascendingBreadth","source","index","ascendingTargetBreadth","target","y0","value","d","nodeCenter","node","y1","weightedSource","link","weightedTarget","defaultId","defaultNodes","graph","nodes","defaultLinks","links","find","nodeById","id","get","Error","x0","x1","dx","py","align","iterations","sankey","apply","arguments","computeNodeLinks","computeNodeValues","computeNodeDepths","computeNodeBreadths","computeLinkBreadths","update","nodeId","_","length","nodeAlign","nodeWidth","nodePadding","size","extent","forEach","i","sourceLinks","targetLinks","push","Math","max","next","x","depth","indexOf","height","kx","floor","call","columns","key","sortKeys","entries","values","initializeNodeBreadth","resolveCollisions","alpha","n","relaxRightToLeft","relaxLeftToRight","ky","width","dy","slice","reverse","y","sort"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/d3-sankey/src/sankey.js"],"sourcesContent":["import {ascending, min, sum} from \"d3-array\";\nimport {map, nest} from \"d3-collection\";\nimport {justify} from \"./align\";\nimport constant from \"./constant\";\n\nfunction ascendingSourceBreadth(a, b) {\n  return ascendingBreadth(a.source, b.source) || a.index - b.index;\n}\n\nfunction ascendingTargetBreadth(a, b) {\n  return ascendingBreadth(a.target, b.target) || a.index - b.index;\n}\n\nfunction ascendingBreadth(a, b) {\n  return a.y0 - b.y0;\n}\n\nfunction value(d) {\n  return d.value;\n}\n\nfunction nodeCenter(node) {\n  return (node.y0 + node.y1) / 2;\n}\n\nfunction weightedSource(link) {\n  return nodeCenter(link.source) * link.value;\n}\n\nfunction weightedTarget(link) {\n  return nodeCenter(link.target) * link.value;\n}\n\nfunction defaultId(d) {\n  return d.index;\n}\n\nfunction defaultNodes(graph) {\n  return graph.nodes;\n}\n\nfunction defaultLinks(graph) {\n  return graph.links;\n}\n\nfunction find(nodeById, id) {\n  var node = nodeById.get(id);\n  if (!node) throw new Error(\"missing: \" + id);\n  return node;\n}\n\nexport default function() {\n  var x0 = 0, y0 = 0, x1 = 1, y1 = 1, // extent\n      dx = 24, // nodeWidth\n      py = 8, // nodePadding\n      id = defaultId,\n      align = justify,\n      nodes = defaultNodes,\n      links = defaultLinks,\n      iterations = 32;\n\n  function sankey() {\n    var graph = {nodes: nodes.apply(null, arguments), links: links.apply(null, arguments)};\n    computeNodeLinks(graph);\n    computeNodeValues(graph);\n    computeNodeDepths(graph);\n    computeNodeBreadths(graph, iterations);\n    computeLinkBreadths(graph);\n    return graph;\n  }\n\n  sankey.update = function(graph) {\n    computeLinkBreadths(graph);\n    return graph;\n  };\n\n  sankey.nodeId = function(_) {\n    return arguments.length ? (id = typeof _ === \"function\" ? _ : constant(_), sankey) : id;\n  };\n\n  sankey.nodeAlign = function(_) {\n    return arguments.length ? (align = typeof _ === \"function\" ? _ : constant(_), sankey) : align;\n  };\n\n  sankey.nodeWidth = function(_) {\n    return arguments.length ? (dx = +_, sankey) : dx;\n  };\n\n  sankey.nodePadding = function(_) {\n    return arguments.length ? (py = +_, sankey) : py;\n  };\n\n  sankey.nodes = function(_) {\n    return arguments.length ? (nodes = typeof _ === \"function\" ? _ : constant(_), sankey) : nodes;\n  };\n\n  sankey.links = function(_) {\n    return arguments.length ? (links = typeof _ === \"function\" ? _ : constant(_), sankey) : links;\n  };\n\n  sankey.size = function(_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], sankey) : [x1 - x0, y1 - y0];\n  };\n\n  sankey.extent = function(_) {\n    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], sankey) : [[x0, y0], [x1, y1]];\n  };\n\n  sankey.iterations = function(_) {\n    return arguments.length ? (iterations = +_, sankey) : iterations;\n  };\n\n  // Populate the sourceLinks and targetLinks for each node.\n  // Also, if the source and target are not objects, assume they are indices.\n  function computeNodeLinks(graph) {\n    graph.nodes.forEach(function(node, i) {\n      node.index = i;\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    });\n    var nodeById = map(graph.nodes, id);\n    graph.links.forEach(function(link, i) {\n      link.index = i;\n      var source = link.source, target = link.target;\n      if (typeof source !== \"object\") source = link.source = find(nodeById, source);\n      if (typeof target !== \"object\") target = link.target = find(nodeById, target);\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    });\n  }\n\n  // Compute the value (size) of each node by summing the associated links.\n  function computeNodeValues(graph) {\n    graph.nodes.forEach(function(node) {\n      node.value = Math.max(\n        sum(node.sourceLinks, value),\n        sum(node.targetLinks, value)\n      );\n    });\n  }\n\n  // Iteratively assign the depth (x-position) for each node.\n  // Nodes are assigned the maximum depth of incoming neighbors plus one;\n  // nodes with no incoming links are assigned depth zero, while\n  // nodes with no outgoing links are assigned the maximum depth.\n  function computeNodeDepths(graph) {\n    var nodes, next, x;\n\n    for (nodes = graph.nodes, next = [], x = 0; nodes.length; ++x, nodes = next, next = []) {\n      nodes.forEach(function(node) {\n        node.depth = x;\n        node.sourceLinks.forEach(function(link) {\n          if (next.indexOf(link.target) < 0) {\n            next.push(link.target);\n          }\n        });\n      });\n    }\n\n    for (nodes = graph.nodes, next = [], x = 0; nodes.length; ++x, nodes = next, next = []) {\n      nodes.forEach(function(node) {\n        node.height = x;\n        node.targetLinks.forEach(function(link) {\n          if (next.indexOf(link.source) < 0) {\n            next.push(link.source);\n          }\n        });\n      });\n    }\n\n    var kx = (x1 - x0 - dx) / (x - 1);\n    graph.nodes.forEach(function(node) {\n      node.x1 = (node.x0 = x0 + Math.max(0, Math.min(x - 1, Math.floor(align.call(null, node, x)))) * kx) + dx;\n    });\n  }\n\n  function computeNodeBreadths(graph) {\n    var columns = nest()\n        .key(function(d) { return d.x0; })\n        .sortKeys(ascending)\n        .entries(graph.nodes)\n        .map(function(d) { return d.values; });\n\n    //\n    initializeNodeBreadth();\n    resolveCollisions();\n    for (var alpha = 1, n = iterations; n > 0; --n) {\n      relaxRightToLeft(alpha *= 0.99);\n      resolveCollisions();\n      relaxLeftToRight(alpha);\n      resolveCollisions();\n    }\n\n    function initializeNodeBreadth() {\n      var ky = min(columns, function(nodes) {\n        return (y1 - y0 - (nodes.length - 1) * py) / sum(nodes, value);\n      });\n\n      columns.forEach(function(nodes) {\n        nodes.forEach(function(node, i) {\n          node.y1 = (node.y0 = i) + node.value * ky;\n        });\n      });\n\n      graph.links.forEach(function(link) {\n        link.width = link.value * ky;\n      });\n    }\n\n    function relaxLeftToRight(alpha) {\n      columns.forEach(function(nodes) {\n        nodes.forEach(function(node) {\n          if (node.targetLinks.length) {\n            var dy = (sum(node.targetLinks, weightedSource) / sum(node.targetLinks, value) - nodeCenter(node)) * alpha;\n            node.y0 += dy, node.y1 += dy;\n          }\n        });\n      });\n    }\n\n    function relaxRightToLeft(alpha) {\n      columns.slice().reverse().forEach(function(nodes) {\n        nodes.forEach(function(node) {\n          if (node.sourceLinks.length) {\n            var dy = (sum(node.sourceLinks, weightedTarget) / sum(node.sourceLinks, value) - nodeCenter(node)) * alpha;\n            node.y0 += dy, node.y1 += dy;\n          }\n        });\n      });\n    }\n\n    function resolveCollisions() {\n      columns.forEach(function(nodes) {\n        var node,\n            dy,\n            y = y0,\n            n = nodes.length,\n            i;\n\n        // Push any overlapping nodes down.\n        nodes.sort(ascendingBreadth);\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          dy = y - node.y0;\n          if (dy > 0) node.y0 += dy, node.y1 += dy;\n          y = node.y1 + py;\n        }\n\n        // If the bottommost node goes outside the bounds, push it back up.\n        dy = y - py - y1;\n        if (dy > 0) {\n          y = (node.y0 -= dy), node.y1 -= dy;\n\n          // Push any overlapping nodes back up.\n          for (i = n - 2; i >= 0; --i) {\n            node = nodes[i];\n            dy = node.y1 + py - y;\n            if (dy > 0) node.y0 -= dy, node.y1 -= dy;\n            y = node.y0;\n          }\n        }\n      });\n    }\n  }\n\n  function computeLinkBreadths(graph) {\n    graph.nodes.forEach(function(node) {\n      node.sourceLinks.sort(ascendingTargetBreadth);\n      node.targetLinks.sort(ascendingSourceBreadth);\n    });\n    graph.nodes.forEach(function(node) {\n      var y0 = node.y0, y1 = y0;\n      node.sourceLinks.forEach(function(link) {\n        link.y0 = y0 + link.width / 2, y0 += link.width;\n      });\n      node.targetLinks.forEach(function(link) {\n        link.y1 = y1 + link.width / 2, y1 += link.width;\n      });\n    });\n  }\n\n  return sankey;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}