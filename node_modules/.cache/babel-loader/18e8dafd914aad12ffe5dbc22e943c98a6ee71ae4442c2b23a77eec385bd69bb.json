{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.set3dBuildingColor = exports.loadCustomMapStyle = exports.mapStyleChange = exports.loadMapStyleErr = exports.loadMapStyles = exports.requestMapStyles = exports.mapConfigChange = exports.inputMapStyle = exports.addCustomMapStyle = void 0;\nvar _toolkit = require(\"@reduxjs/toolkit\");\nvar _actionTypes = _interopRequireDefault(require(\"./action-types\")); /**\n                                                                      * Add map style from user input to reducer and set it to current style\n                                                                      * This action is called when user click confirm after putting in a valid style url in the custom map style dialog.\n                                                                      * It should not be called from outside kepler.gl without a valid `inputStyle` in the `mapStyle` reducer.\n                                                                      * param {void}\n                                                                      * @memberof mapStyleActions\n                                                                      * @public\n                                                                      */\nvar addCustomMapStyle = (0, _toolkit.createAction)(_actionTypes[\"default\"].ADD_CUSTOM_MAP_STYLE);\n/** INPUT_MAP_STYLE */\n\nexports.addCustomMapStyle = addCustomMapStyle;\n\n/**\n * Input a custom map style object\n * @memberof mapStyleActions\n * @param inputStyle\n * @param inputStyle.url - style url e.g. `'mapbox://styles/heshan/xxxxxyyyyzzz'`\n * @param inputStyle.id - style id e.g. `'custom_style_1'`\n * @param inputStyle.style - actual mapbox style json\n * @param inputStyle.label - style name\n * @param inputStyle.accessToken - mapbox access token\n * @param inputStyle.icon - icon image data url\n * @param [mapState] - mapState is optional\n * @public\n */\nvar inputMapStyle = (0, _toolkit.createAction)(_actionTypes[\"default\"].INPUT_MAP_STYLE, function (inputStyle, mapState) {\n  return {\n    payload: {\n      inputStyle: inputStyle,\n      mapState: mapState\n    }\n  };\n});\n/** MAP_CONFIG_CHANGE */\n\nexports.inputMapStyle = inputMapStyle;\n\n/**\n * Update `visibleLayerGroups`to change layer group visibility\n * @memberof mapStyleActions\n * @param mapStyle new config `{visibleLayerGroups: {label: false, road: true, background: true}}`\n * @public\n */\nvar mapConfigChange = (0, _toolkit.createAction)(_actionTypes[\"default\"].MAP_CONFIG_CHANGE, function (mapStyle) {\n  return {\n    payload: mapStyle\n  };\n});\n/** REQUEST_MAP_STYLES */\n\nexports.mapConfigChange = mapConfigChange;\n\n/**\n * Request map style style object based on style.url.\n * @memberof mapStyleActions\n * @public\n */\nvar requestMapStyles = (0, _toolkit.createAction)(_actionTypes[\"default\"].REQUEST_MAP_STYLES, function (mapStyles) {\n  return {\n    payload: mapStyles\n  };\n});\n/** LOAD_MAP_STYLES */\n\nexports.requestMapStyles = requestMapStyles;\n\n/**\n * Callback when load map style success\n * @memberof mapStyleActions\n * @param newStyles a `{[id]: style}` mapping\n * @public\n */\nvar loadMapStyles = (0, _toolkit.createAction)(_actionTypes[\"default\"].LOAD_MAP_STYLES, function (newStyles) {\n  return {\n    payload: newStyles\n  };\n});\n/** LOAD_MAP_STYLE_ERR */\n\nexports.loadMapStyles = loadMapStyles;\n\n/**\n * Callback when load map style error\n * @memberof mapStyleActions\n * @param error\n * @public\n */\nvar loadMapStyleErr = (0, _toolkit.createAction)(_actionTypes[\"default\"].LOAD_MAP_STYLE_ERR, function (error) {\n  return {\n    payload: error\n  };\n});\n/** MAP_STYLE_CHANGE */\n\nexports.loadMapStyleErr = loadMapStyleErr;\n\n/**\n * Change to another map style. The selected style should already been loaded into `mapStyle.mapStyles`\n * @memberof mapStyleActions\n * @param styleType the style to change to\n * @public\n */\nvar mapStyleChange = (0, _toolkit.createAction)(_actionTypes[\"default\"].MAP_STYLE_CHANGE, function (styleType) {\n  return {\n    payload: styleType\n  };\n});\n/** LOAD_CUSTOM_MAP_STYLE */\n\nexports.mapStyleChange = mapStyleChange;\n\n/**\n * Callback when a custom map style object is received\n * @memberof mapStyleActions\n * @param customMapStyle\n * @param customMapStyle.icon\n * @param customMapStyle.style\n * @param customMapStyle.error\n * @public\n */\nvar loadCustomMapStyle = (0, _toolkit.createAction)(_actionTypes[\"default\"].LOAD_CUSTOM_MAP_STYLE, function (customMapStyle) {\n  return {\n    payload: customMapStyle\n  };\n});\n/** SET_3D_BUILDING_COLOR */\n\nexports.loadCustomMapStyle = loadCustomMapStyle;\n// SET_3D_BUILDING_COLOR\n\n/**\n * Set 3d building layer group color\n * @memberof mapStyleActions\n * @param color - [r, g, b]\n * @public\n */\nvar set3dBuildingColor = (0, _toolkit.createAction)(_actionTypes[\"default\"].SET_3D_BUILDING_COLOR, function (color) {\n  return {\n    payload: color\n  };\n});\n/**\n * Actions handled mostly by  `mapStyle` reducer.\n * They manage the display of base map, such as loading and receiving base map styles,\n * hiding and showing map layers, user input of custom map style url.\n *\n * @public\n */\n\n/* eslint-disable no-unused-vars */\n// @ts-ignore\n\nexports.set3dBuildingColor = set3dBuildingColor;\nvar mapStyleActions = null;\n/* eslint-enable no-unused-vars */","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","set3dBuildingColor","loadCustomMapStyle","mapStyleChange","loadMapStyleErr","loadMapStyles","requestMapStyles","mapConfigChange","inputMapStyle","addCustomMapStyle","_toolkit","_actionTypes","createAction","ADD_CUSTOM_MAP_STYLE","INPUT_MAP_STYLE","inputStyle","mapState","payload","MAP_CONFIG_CHANGE","mapStyle","REQUEST_MAP_STYLES","mapStyles","LOAD_MAP_STYLES","newStyles","LOAD_MAP_STYLE_ERR","error","MAP_STYLE_CHANGE","styleType","LOAD_CUSTOM_MAP_STYLE","customMapStyle","SET_3D_BUILDING_COLOR","color"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/actions/src/map-style-actions.ts"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {createAction} from '@reduxjs/toolkit';\nimport {default as ActionTypes} from './action-types';\nimport {\n  InputStyle,\n  MapStyles,\n  Merge,\n  RGBColor,\n  MapState,\n  VisibleLayerGroups\n} from '@kepler.gl/types';\n\n/**\n * Add map style from user input to reducer and set it to current style\n * This action is called when user click confirm after putting in a valid style url in the custom map style dialog.\n * It should not be called from outside kepler.gl without a valid `inputStyle` in the `mapStyle` reducer.\n * param {void}\n * @memberof mapStyleActions\n * @public\n */\nexport const addCustomMapStyle: () => {\n  type: typeof ActionTypes.ADD_CUSTOM_MAP_STYLE;\n} = createAction(ActionTypes.ADD_CUSTOM_MAP_STYLE);\n\n/** INPUT_MAP_STYLE */\nexport type InputMapStyleUpdaterAction = {\n  payload: {\n    inputStyle: Partial<InputStyle>;\n    mapState?: MapState;\n  };\n};\n/**\n * Input a custom map style object\n * @memberof mapStyleActions\n * @param inputStyle\n * @param inputStyle.url - style url e.g. `'mapbox://styles/heshan/xxxxxyyyyzzz'`\n * @param inputStyle.id - style id e.g. `'custom_style_1'`\n * @param inputStyle.style - actual mapbox style json\n * @param inputStyle.label - style name\n * @param inputStyle.accessToken - mapbox access token\n * @param inputStyle.icon - icon image data url\n * @param [mapState] - mapState is optional\n * @public\n */\nexport const inputMapStyle: (\n  inputStyle: InputMapStyleUpdaterAction['payload']['inputStyle'],\n  mapState?: InputMapStyleUpdaterAction['payload']['mapState']\n) => Merge<InputMapStyleUpdaterAction, {type: typeof ActionTypes.INPUT_MAP_STYLE}> = createAction(\n  ActionTypes.INPUT_MAP_STYLE,\n  (\n    inputStyle: InputMapStyleUpdaterAction['payload']['inputStyle'],\n    mapState: InputMapStyleUpdaterAction['payload']['mapState']\n  ) => ({\n    payload: {\n      inputStyle,\n      mapState\n    }\n  })\n);\n\n/** MAP_CONFIG_CHANGE */\nexport type MapConfigChangeUpdaterAction = {\n  payload: {\n    visibleLayerGroups?: VisibleLayerGroups;\n    topLayerGroups?: VisibleLayerGroups;\n  };\n};\n/**\n * Update `visibleLayerGroups`to change layer group visibility\n * @memberof mapStyleActions\n * @param mapStyle new config `{visibleLayerGroups: {label: false, road: true, background: true}}`\n * @public\n */\nexport const mapConfigChange: (\n  mapStyle: MapConfigChangeUpdaterAction['payload']\n) => Merge<\n  MapConfigChangeUpdaterAction,\n  {type: typeof ActionTypes.MAP_CONFIG_CHANGE}\n> = createAction(\n  ActionTypes.MAP_CONFIG_CHANGE,\n  (mapStyle: MapConfigChangeUpdaterAction['payload']) => ({payload: mapStyle})\n);\n\n/** REQUEST_MAP_STYLES */\nexport type RequestMapStylesUpdaterAction = {\n  payload: {\n    [key: string]: {\n      id: string;\n      label?: string;\n      url: string;\n      icon?: string;\n      layerGroups?: string;\n    };\n  };\n};\n/**\n * Request map style style object based on style.url.\n * @memberof mapStyleActions\n * @public\n */\nexport const requestMapStyles: (\n  mapStyles: RequestMapStylesUpdaterAction['payload']\n) => Merge<\n  RequestMapStylesUpdaterAction,\n  {type: typeof ActionTypes.REQUEST_MAP_STYLES}\n> = createAction(\n  ActionTypes.REQUEST_MAP_STYLES,\n  (mapStyles: RequestMapStylesUpdaterAction['payload']) => ({payload: mapStyles})\n);\n\n/** LOAD_MAP_STYLES */\nexport type LoadMapStylesUpdaterAction = {\n  payload: MapStyles;\n};\n/**\n * Callback when load map style success\n * @memberof mapStyleActions\n * @param newStyles a `{[id]: style}` mapping\n * @public\n */\nexport const loadMapStyles: (\n  newStyles: LoadMapStylesUpdaterAction['payload']\n) => Merge<\n  LoadMapStylesUpdaterAction,\n  {type: typeof ActionTypes.LOAD_MAP_STYLES}\n> = createAction(\n  ActionTypes.LOAD_MAP_STYLES,\n  (newStyles: LoadMapStylesUpdaterAction['payload']) => ({payload: newStyles})\n);\n\n/** LOAD_MAP_STYLE_ERR */\nexport type LoadMapStyleErrUpdaterAction = {\n  payload: Error;\n};\n/**\n * Callback when load map style error\n * @memberof mapStyleActions\n * @param error\n * @public\n */\nexport const loadMapStyleErr: (\n  error: LoadMapStyleErrUpdaterAction['payload']\n) => Merge<\n  LoadMapStyleErrUpdaterAction,\n  {type: typeof ActionTypes.LOAD_MAP_STYLE_ERR}\n> = createAction(\n  ActionTypes.LOAD_MAP_STYLE_ERR,\n  (error: LoadMapStyleErrUpdaterAction['payload']) => ({payload: error})\n);\n\n/** MAP_STYLE_CHANGE */\nexport type MapStyleChangeUpdaterAction = {\n  payload: string;\n};\n/**\n * Change to another map style. The selected style should already been loaded into `mapStyle.mapStyles`\n * @memberof mapStyleActions\n * @param styleType the style to change to\n * @public\n */\nexport const mapStyleChange: (\n  styleType: MapStyleChangeUpdaterAction['payload']\n) => Merge<\n  MapStyleChangeUpdaterAction,\n  {type: typeof ActionTypes.MAP_STYLE_CHANGE}\n> = createAction(\n  ActionTypes.MAP_STYLE_CHANGE,\n  (styleType: MapStyleChangeUpdaterAction['payload']) => ({payload: styleType})\n);\n\n/** LOAD_CUSTOM_MAP_STYLE */\nexport type LoadCustomMapStyleUpdaterAction = {\n  payload: {\n    icon?: string;\n    style?: object;\n    error?: Error;\n  };\n};\n/**\n * Callback when a custom map style object is received\n * @memberof mapStyleActions\n * @param customMapStyle\n * @param customMapStyle.icon\n * @param customMapStyle.style\n * @param customMapStyle.error\n * @public\n */\nexport const loadCustomMapStyle: (\n  customMapStyle: LoadCustomMapStyleUpdaterAction['payload']\n) => Merge<\n  LoadCustomMapStyleUpdaterAction,\n  {type: typeof ActionTypes.LOAD_CUSTOM_MAP_STYLE}\n> = createAction(\n  ActionTypes.LOAD_CUSTOM_MAP_STYLE,\n  (customMapStyle: LoadCustomMapStyleUpdaterAction['payload']) => ({payload: customMapStyle})\n);\n\n/** SET_3D_BUILDING_COLOR */\nexport type Set3dBuildingColorUpdaterAction = {\n  payload: RGBColor;\n};\n// SET_3D_BUILDING_COLOR\n/**\n * Set 3d building layer group color\n * @memberof mapStyleActions\n * @param color - [r, g, b]\n * @public\n */\nexport const set3dBuildingColor: (\n  color: Set3dBuildingColorUpdaterAction['payload']\n) => Merge<\n  Set3dBuildingColorUpdaterAction,\n  {type: typeof ActionTypes.SET_3D_BUILDING_COLOR}\n> = createAction(\n  ActionTypes.SET_3D_BUILDING_COLOR,\n  (color: Set3dBuildingColorUpdaterAction['payload']) => ({payload: color})\n);\n\n/**\n * Actions handled mostly by  `mapStyle` reducer.\n * They manage the display of base map, such as loading and receiving base map styles,\n * hiding and showing map layers, user input of custom map style url.\n *\n * @public\n */\n/* eslint-disable no-unused-vars */\n// @ts-ignore\nconst mapStyleActions = null;\n/* eslint-enable no-unused-vars */\n"],"mappings":";;;;;;;;;AAoBA;;AACA;;AArBA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,IAAAA,sBAAA,GAAAC,OAAA;AAEAC,MAAA,CAAAC,cAAA,CAAAC,OAAA;EACAC,KAAA;AACA;AACAD,OAAA,CAAAE,kBAAA,GAAAF,OAAA,CAAAG,kBAAA,GAAAH,OAAA,CAAAI,cAAA,GAAAJ,OAAA,CAAAK,eAAA,GAAAL,OAAA,CAAAM,aAAA,GAAAN,OAAA,CAAAO,gBAAA,GAAAP,OAAA,CAAAQ,eAAA,GAAAR,OAAA,CAAAS,aAAA,GAAAT,OAAA,CAAAU,iBAAA;AAEA,IAAAC,QAAA,GAAAd,OAAA;AAEA,IAAAe,YAAA,GAAAhB,sBAAA,CAAAC,OAAA;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA,IAAAa,iBAAA,OAAAC,QAAA,CAAAE,YAAA,EAAAD,YAAA,YAAAE,oBAAA;AACA;;AAKAd,OAAA,CAAAU,iBAAA,GAAAA,iBAAA;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAAD,aAAA,OAAAE,QAAA,CAAAE,YAAA,EAAAD,YAAA,YAAAG,eAAA,YAAAC,UAAA,EAAAC,QAAA;EACA;IACaC,OAAA;MAKXF,UAGM,EAAAA,UAAA;MACJC,QAAS,EAAAA;IACP;EACA;AAFO;AADL;;AAQRjB,OAAA,CAAAS,aAAA,GAAAA,aAAA;;;;AAOA;AACA;AACA;AACA;AACA,IAAAD,eAAA,OAAAG,QAAA,CAAAE,YAAA,EAAAD,YAAA,YAAAO,iBAAA,YAAAC,QAAA;EACA;IACaF,OAAA,EAAAE;EAOX;AAAyD;AAAD;;AAG1DpB,OAAA,CAAAQ,eAAA,GAAAA,eAAA;;;;AAYA;AACA;AACA;AACA,IAAAD,gBAAA,OAAAI,QAAA,CAAAE,YAAA,EAAAD,YAAA,YAAAS,kBAAA,YAAAC,SAAA;EACA;IACaJ,OAAA,EAAAI;EAOX;AAA2D;AAAD;;AAG5DtB,OAAA,CAAAO,gBAAA,GAAAA,gBAAA;;;;AAIA;AACA;AACA;AACA;AACA,IAAAD,aAAA,OAAAK,QAAA,CAAAE,YAAA,EAAAD,YAAA,YAAAW,eAAA,YAAAC,SAAA;EACA;IACaN,OAAA,EAAAM;EAOX;AAAwD;AAAD;;AAGzDxB,OAAA,CAAAM,aAAA,GAAAA,aAAA;;;;AAIA;AACA;AACA;AACA;AACA,IAAAD,eAAA,OAAAM,QAAA,CAAAE,YAAA,EAAAD,YAAA,YAAAa,kBAAA,YAAAC,KAAA;EACA;IACaR,OAAA,EAAAQ;EAOX;AAAsD;AAAD;;AAGvD1B,OAAA,CAAAK,eAAA,GAAAA,eAAA;;;;AAIA;AACA;AACA;AACA;AACA,IAAAD,cAAA,OAAAO,QAAA,CAAAE,YAAA,EAAAD,YAAA,YAAAe,gBAAA,YAAAC,SAAA;EACA;IACaV,OAAA,EAAAU;EAOX;AAAyD;AAAD;;AAG1D5B,OAAA,CAAAI,cAAA,GAAAA,cAAA;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAAD,kBAAA,OAAAQ,QAAA,CAAAE,YAAA,EAAAD,YAAA,YAAAiB,qBAAA,YAAAC,cAAA;EACA;IACaZ,OAAA,EAAAY;EAOX;AAAkE;AAAD;;AAGnE9B,OAAA,CAAAG,kBAAA,GAAAA,kBAAA;;;AAIA;;AACA;AACA;AACA;AACA;AACA,IAAAD,kBAAA,OAAAS,QAAA,CAAAE,YAAA,EAAAD,YAAA,YAAAmB,qBAAA,YAAAC,KAAA;EACA;IACad,OAAA,EAAAc;EAOX;AAAyD;AAAD;AAAxD;AAGF;AACA;AACA;AACA;AACA;;AAEA;;;AAEAhC,OAAA,CAAAE,kBAAA,GAAAA,kBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}