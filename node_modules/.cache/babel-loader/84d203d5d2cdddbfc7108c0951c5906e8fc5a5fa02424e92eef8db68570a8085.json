{"ast":null,"code":"/*\n * Copyright 2013-2016 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n'use strict';\n\nvar interceptor, mixinUtil, defaulter;\ninterceptor = require('../interceptor');\nmixinUtil = require('../util/mixin');\ndefaulter = function () {\n  function mixin(prop, target, defaults) {\n    if (prop in target || prop in defaults) {\n      target[prop] = mixinUtil({}, defaults[prop], target[prop]);\n    }\n  }\n  function copy(prop, target, defaults) {\n    if (prop in defaults && !(prop in target)) {\n      target[prop] = defaults[prop];\n    }\n  }\n  var mappings = {\n    method: copy,\n    path: copy,\n    params: mixin,\n    headers: mixin,\n    entity: copy,\n    mixin: mixin\n  };\n  return function (target, defaults) {\n    for (var prop in mappings) {\n      /*jshint forin: false */\n      mappings[prop](prop, target, defaults);\n    }\n    return target;\n  };\n}();\n\n/**\n * Provide default values for a request. These values will be applied to the\n * request if the request object does not already contain an explicit value.\n *\n * For 'params', 'headers', and 'mixin', individual values are mixed in with the\n * request's values. The result is a new object representiing the combined\n * request and config values. Neither input object is mutated.\n *\n * @param {Client} [client] client to wrap\n * @param {string} [config.method] the default method\n * @param {string} [config.path] the default path\n * @param {Object} [config.params] the default params, mixed with the request's existing params\n * @param {Object} [config.headers] the default headers, mixed with the request's existing headers\n * @param {Object} [config.mixin] the default \"mixins\" (http/https options), mixed with the request's existing \"mixins\"\n *\n * @returns {Client}\n */\nmodule.exports = interceptor({\n  request: function handleRequest(request, config) {\n    return defaulter(request, config);\n  }\n});","map":{"version":3,"names":["interceptor","mixinUtil","defaulter","require","mixin","prop","target","defaults","copy","mappings","method","path","params","headers","entity","module","exports","request","handleRequest","config"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/rest/interceptor/defaultRequest.js"],"sourcesContent":["/*\n * Copyright 2013-2016 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n'use strict';\n\nvar interceptor, mixinUtil, defaulter;\n\ninterceptor = require('../interceptor');\nmixinUtil = require('../util/mixin');\n\ndefaulter = (function () {\n\n\tfunction mixin(prop, target, defaults) {\n\t\tif (prop in target || prop in defaults) {\n\t\t\ttarget[prop] = mixinUtil({}, defaults[prop], target[prop]);\n\t\t}\n\t}\n\n\tfunction copy(prop, target, defaults) {\n\t\tif (prop in defaults && !(prop in target)) {\n\t\t\ttarget[prop] = defaults[prop];\n\t\t}\n\t}\n\n\tvar mappings = {\n\t\tmethod: copy,\n\t\tpath: copy,\n\t\tparams: mixin,\n\t\theaders: mixin,\n\t\tentity: copy,\n\t\tmixin: mixin\n\t};\n\n\treturn function (target, defaults) {\n\t\tfor (var prop in mappings) {\n\t\t\t/*jshint forin: false */\n\t\t\tmappings[prop](prop, target, defaults);\n\t\t}\n\t\treturn target;\n\t};\n\n}());\n\n/**\n * Provide default values for a request. These values will be applied to the\n * request if the request object does not already contain an explicit value.\n *\n * For 'params', 'headers', and 'mixin', individual values are mixed in with the\n * request's values. The result is a new object representiing the combined\n * request and config values. Neither input object is mutated.\n *\n * @param {Client} [client] client to wrap\n * @param {string} [config.method] the default method\n * @param {string} [config.path] the default path\n * @param {Object} [config.params] the default params, mixed with the request's existing params\n * @param {Object} [config.headers] the default headers, mixed with the request's existing headers\n * @param {Object} [config.mixin] the default \"mixins\" (http/https options), mixed with the request's existing \"mixins\"\n *\n * @returns {Client}\n */\nmodule.exports = interceptor({\n\trequest: function handleRequest(request, config) {\n\t\treturn defaulter(request, config);\n\t}\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,WAAW,EAAEC,SAAS,EAAEC,SAAS;AAErCF,WAAW,GAAGG,OAAO,CAAC,gBAAgB,CAAC;AACvCF,SAAS,GAAGE,OAAO,CAAC,eAAe,CAAC;AAEpCD,SAAS,GAAI,YAAY;EAExB,SAASE,KAAKA,CAACC,IAAI,EAAEC,MAAM,EAAEC,QAAQ,EAAE;IACtC,IAAIF,IAAI,IAAIC,MAAM,IAAID,IAAI,IAAIE,QAAQ,EAAE;MACvCD,MAAM,CAACD,IAAI,CAAC,GAAGJ,SAAS,CAAC,CAAC,CAAC,EAAEM,QAAQ,CAACF,IAAI,CAAC,EAAEC,MAAM,CAACD,IAAI,CAAC,CAAC;IAC3D;EACD;EAEA,SAASG,IAAIA,CAACH,IAAI,EAAEC,MAAM,EAAEC,QAAQ,EAAE;IACrC,IAAIF,IAAI,IAAIE,QAAQ,IAAI,EAAEF,IAAI,IAAIC,MAAM,CAAC,EAAE;MAC1CA,MAAM,CAACD,IAAI,CAAC,GAAGE,QAAQ,CAACF,IAAI,CAAC;IAC9B;EACD;EAEA,IAAII,QAAQ,GAAG;IACdC,MAAM,EAAEF,IAAI;IACZG,IAAI,EAAEH,IAAI;IACVI,MAAM,EAAER,KAAK;IACbS,OAAO,EAAET,KAAK;IACdU,MAAM,EAAEN,IAAI;IACZJ,KAAK,EAAEA;EACR,CAAC;EAED,OAAO,UAAUE,MAAM,EAAEC,QAAQ,EAAE;IAClC,KAAK,IAAIF,IAAI,IAAII,QAAQ,EAAE;MAC1B;MACAA,QAAQ,CAACJ,IAAI,CAAC,CAACA,IAAI,EAAEC,MAAM,EAAEC,QAAQ,CAAC;IACvC;IACA,OAAOD,MAAM;EACd,CAAC;AAEF,CAAC,EAAG;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAS,MAAM,CAACC,OAAO,GAAGhB,WAAW,CAAC;EAC5BiB,OAAO,EAAE,SAASC,aAAaA,CAACD,OAAO,EAAEE,MAAM,EAAE;IAChD,OAAOjB,SAAS,CAACe,OAAO,EAAEE,MAAM,CAAC;EAClC;AACD,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}