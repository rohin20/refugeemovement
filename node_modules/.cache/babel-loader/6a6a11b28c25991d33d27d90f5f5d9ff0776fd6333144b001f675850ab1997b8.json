{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { h3SetToMultiPolygon } from 'h3-js';\nimport { createIterable } from '@deck.gl/core';\nimport { H3HexagonLayer } from '@deck.gl/geo-layers';\nimport GeoCellLayer from '../geo-cell-layer/GeoCellLayer';\nvar defaultProps = {\n  getHexagons: {\n    type: 'accessor',\n    value: function value(d) {\n      return d.hexagons;\n    }\n  }\n};\nvar H3ClusterLayer = /*#__PURE__*/function (_GeoCellLayer) {\n  _inherits(H3ClusterLayer, _GeoCellLayer);\n  var _super = _createSuper(H3ClusterLayer);\n  function H3ClusterLayer() {\n    _classCallCheck(this, H3ClusterLayer);\n    return _super.apply(this, arguments);\n  }\n  _createClass(H3ClusterLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      H3HexagonLayer._checkH3Lib();\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n        changeFlags = _ref.changeFlags;\n      if (changeFlags.dataChanged || changeFlags.updateTriggersChanged && changeFlags.updateTriggersChanged.getHexagons) {\n        var data = props.data,\n          getHexagons = props.getHexagons;\n        var polygons = [];\n        var _createIterable = createIterable(data),\n          iterable = _createIterable.iterable,\n          objectInfo = _createIterable.objectInfo;\n        var _iterator = _createForOfIteratorHelper(iterable),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var object = _step.value;\n            objectInfo.index++;\n            var hexagons = getHexagons(object, objectInfo);\n            var multiPolygon = h3SetToMultiPolygon(hexagons, true);\n            var _iterator2 = _createForOfIteratorHelper(multiPolygon),\n              _step2;\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var polygon = _step2.value;\n                polygons.push(this.getSubLayerRow({\n                  polygon: polygon\n                }, object, objectInfo.index));\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        this.setState({\n          polygons: polygons\n        });\n      }\n    }\n  }, {\n    key: \"indexToBounds\",\n    value: function indexToBounds() {\n      return {\n        data: this.state.polygons,\n        getPolygon: function getPolygon(d) {\n          return d.polygon;\n        }\n      };\n    }\n  }]);\n  return H3ClusterLayer;\n}(GeoCellLayer);\nexport { H3ClusterLayer as default };\n_defineProperty(H3ClusterLayer, \"layerName\", 'H3ClusterLayer');\n_defineProperty(H3ClusterLayer, \"defaultProps\", defaultProps);","map":{"version":3,"names":["h3SetToMultiPolygon","createIterable","H3HexagonLayer","GeoCellLayer","defaultProps","getHexagons","type","value","d","hexagons","H3ClusterLayer","_GeoCellLayer","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","initializeState","_checkH3Lib","updateState","_ref","props","changeFlags","dataChanged","updateTriggersChanged","data","polygons","_createIterable","iterable","objectInfo","_iterator","_createForOfIteratorHelper","_step","s","n","done","object","index","multiPolygon","_iterator2","_step2","polygon","push","getSubLayerRow","err","e","f","setState","indexToBounds","state","getPolygon","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/geo-layers/src/h3-layers/h3-cluster-layer.ts"],"sourcesContent":["import {h3SetToMultiPolygon, H3IndexInput} from 'h3-js';\n\nimport {AccessorFunction, createIterable, UpdateParameters, DefaultProps} from '@deck.gl/core';\nimport {H3HexagonLayer} from '@deck.gl/geo-layers';\nimport GeoCellLayer, {GeoCellLayerProps} from '../geo-cell-layer/GeoCellLayer';\n\nconst defaultProps: DefaultProps<H3ClusterLayerProps> = {\n  getHexagons: {type: 'accessor', value: d => d.hexagons}\n};\n\n/** All properties supported by H3ClusterLayer. */\nexport type H3ClusterLayerProps<DataT = any> = _H3ClusterLayerProps<DataT> &\n  GeoCellLayerProps<DataT>;\n\n/** Properties added by H3ClusterLayer. */\ntype _H3ClusterLayerProps<DataT> = {\n  /**\n   * Called for each data object to retrieve the hexagon identifiers.\n   *\n   * By default, it reads `hexagons` property of data object.\n   */\n  getHexagons?: AccessorFunction<DataT, H3IndexInput[]>;\n};\n\nexport default class H3ClusterLayer<DataT = any, ExtraProps = {}> extends GeoCellLayer<\n  DataT,\n  Required<_H3ClusterLayerProps<DataT>> & ExtraProps\n> {\n  static layerName = 'H3ClusterLayer';\n  static defaultProps = defaultProps;\n\n  initializeState(): void {\n    H3HexagonLayer._checkH3Lib();\n  }\n\n  updateState({props, changeFlags}: UpdateParameters<this>): void {\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged && changeFlags.updateTriggersChanged.getHexagons)\n    ) {\n      const {data, getHexagons} = props;\n      const polygons: {polygon: number[][][]}[] = [];\n\n      const {iterable, objectInfo} = createIterable(data);\n      for (const object of iterable) {\n        objectInfo.index++;\n        const hexagons = getHexagons(object, objectInfo);\n        const multiPolygon = h3SetToMultiPolygon(hexagons, true);\n\n        for (const polygon of multiPolygon) {\n          polygons.push(this.getSubLayerRow({polygon}, object, objectInfo.index));\n        }\n      }\n\n      this.setState({polygons});\n    }\n  }\n\n  indexToBounds(): Partial<GeoCellLayer['props']> {\n    return {\n      data: this.state.polygons,\n      getPolygon: d => d.polygon\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}