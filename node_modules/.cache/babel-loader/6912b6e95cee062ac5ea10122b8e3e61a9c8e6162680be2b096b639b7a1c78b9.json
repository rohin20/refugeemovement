{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.layerConfigChange = layerConfigChange;\nexports.layerTextLabelChange = layerTextLabelChange;\nexports.layerTypeChange = layerTypeChange;\nexports.layerVisualChannelConfigChange = layerVisualChannelConfigChange;\nexports.layerVisConfigChange = layerVisConfigChange;\nexports.layerColorUIChange = layerColorUIChange;\nexports.updateLayerBlending = updateLayerBlending;\nexports.interactionConfigChange = interactionConfigChange;\nexports.setFilter = setFilter;\nexports.setFilterAnimationTime = setFilterAnimationTime;\nexports.setFilterAnimationWindow = setFilterAnimationWindow;\nexports.addFilter = addFilter;\nexports.addLayer = addLayer;\nexports.reorderLayer = reorderLayer;\nexports.removeFilter = removeFilter;\nexports.removeLayer = removeLayer;\nexports.duplicateLayer = duplicateLayer;\nexports.removeDataset = removeDataset;\nexports.showDatasetTable = showDatasetTable;\nexports.updateTableColor = updateTableColor;\nexports.sortTableColumn = sortTableColumn;\nexports.pinTableColumn = pinTableColumn;\nexports.copyTableColumn = copyTableColumn;\nexports.updateVisData = updateVisData;\nexports.renameDataset = renameDataset;\nexports.toggleFilterAnimation = toggleFilterAnimation;\nexports.updateFilterAnimationSpeed = updateFilterAnimationSpeed;\nexports.setLayerAnimationTime = setLayerAnimationTime;\nexports.updateLayerAnimationSpeed = updateLayerAnimationSpeed;\nexports.toggleLayerAnimation = toggleLayerAnimation;\nexports.toggleLayerAnimationControl = toggleLayerAnimationControl;\nexports.enlargeFilter = enlargeFilter;\nexports.toggleFilterFeature = toggleFilterFeature;\nexports.onLayerHover = onLayerHover;\nexports.onLayerClick = onLayerClick;\nexports.onMapClick = onMapClick;\nexports.onMouseMove = onMouseMove;\nexports.toggleLayerForMap = toggleLayerForMap;\nexports.setFilterPlot = setFilterPlot;\nexports.setMapInfo = setMapInfo;\nexports.loadFiles = loadFiles;\nexports.loadNextFile = loadNextFile;\nexports.loadFilesSuccess = loadFilesSuccess;\nexports.loadFileStepSuccess = loadFileStepSuccess;\nexports.loadFilesErr = loadFilesErr;\nexports.setFeatures = setFeatures;\nexports.setPolygonFilterLayer = setPolygonFilterLayer;\nexports.setSelectedFeature = setSelectedFeature;\nexports.deleteFeature = deleteFeature;\nexports.setEditorMode = setEditorMode;\nexports.applyCPUFilter = applyCPUFilter;\nexports.toggleEditorVisibility = toggleEditorVisibility;\nexports.nextFileBatch = nextFileBatch;\nexports.processFileContent = processFileContent;\nexports.setLayerAnimationTimeConfig = setLayerAnimationTimeConfig;\nexports.setFilterAnimationTimeConfig = setFilterAnimationTimeConfig;\nvar _actionTypes = _interopRequireDefault(require(\"./action-types\")); // vis-state-reducer\n\n/**\n * Update layer base config: dataId, label, column, isVisible\n * @param oldLayer - layer to be updated\n * @param newConfig - new config to be merged with old config\n * @returns action\n * @public\n */\nfunction layerConfigChange(oldLayer, newConfig) {\n  return {\n    type: _actionTypes[\"default\"].LAYER_CONFIG_CHANGE,\n    oldLayer: oldLayer,\n    newConfig: newConfig\n  };\n}\n\n/**\n * Update layer text label\n * @param oldLayer - layer to be updated\n * @param idx -`idx` of text label to be updated\n * @param prop - `prop` of text label, e,g, `anchor`, `alignment`, `color`, `size`, `field`\n * @param value - new value\n * @returns action\n * @public\n */\nfunction layerTextLabelChange(oldLayer, idx, prop, value) {\n  return {\n    type: _actionTypes[\"default\"].LAYER_TEXT_LABEL_CHANGE,\n    oldLayer: oldLayer,\n    idx: idx,\n    prop: prop,\n    value: value\n  };\n}\n\n/**\n * Update layer type. Previews layer config will be copied if applicable.\n * @param oldLayer - layer to be updated\n * @param newType - new type\n * @returns action\n * @public\n */\nfunction layerTypeChange(oldLayer, newType) {\n  return {\n    type: _actionTypes[\"default\"].LAYER_TYPE_CHANGE,\n    oldLayer: oldLayer,\n    newType: newType\n  };\n}\n\n/**\n * Update layer visual channel\n * @memberof visStateActions\n * @param oldLayer - layer to be updated\n * @param newConfig - new visual channel config\n * @param channel - channel to be updated\n * @returns action\n * @public\n */\nfunction layerVisualChannelConfigChange(oldLayer, newConfig, channel) {\n  return {\n    type: _actionTypes[\"default\"].LAYER_VISUAL_CHANNEL_CHANGE,\n    oldLayer: oldLayer,\n    newConfig: newConfig,\n    channel: channel\n  };\n}\n\n/**\n * Update layer `visConfig`\n * @memberof visStateActions\n * @param oldLayer - layer to be updated\n * @param newVisConfig - new visConfig as a key value map: e.g. `{opacity: 0.8}`\n * @returns action\n * @public\n */\nfunction layerVisConfigChange(oldLayer, newVisConfig) {\n  return {\n    type: _actionTypes[\"default\"].LAYER_VIS_CONFIG_CHANGE,\n    oldLayer: oldLayer,\n    newVisConfig: newVisConfig\n  };\n}\n\n/**\n * Set the color palette ui for layer color\n * @memberof visStateActions\n * @param oldLayer - layer to be updated\n * @param prop - which color prop\n * @param newConfig - to be merged\n * @returns action\n * @public\n */\nfunction layerColorUIChange(oldLayer, prop, newConfig) {\n  return {\n    type: _actionTypes[\"default\"].LAYER_COLOR_UI_CHANGE,\n    oldLayer: oldLayer,\n    prop: prop,\n    newConfig: newConfig\n  };\n}\n\n/**\n * Update layer blending mode\n * @memberof visStateActions\n * @param mode one of `additive`, `normal` and `subtractive`\n * @returns action\n * @public\n */\nfunction updateLayerBlending(mode) {\n  return {\n    type: _actionTypes[\"default\"].UPDATE_LAYER_BLENDING,\n    mode: mode\n  };\n}\n\n/**\n * Update `interactionConfig`\n * @memberof visStateActions\n * @param config - new config as key value map: `{tooltip: {enabled: true}}`\n * @returns action\n * @public\n */\nfunction interactionConfigChange(config) {\n  return {\n    type: _actionTypes[\"default\"].INTERACTION_CONFIG_CHANGE,\n    config: config\n  };\n}\n\n/**\n * Update filter property\n * @memberof visStateActions\n * @param idx -`idx` of filter to be updated\n * @param prop - `prop` of filter, e,g, `dataId`, `name`, `value`\n * @param value - new value\n * @param valueIndex - dataId index\n * @returns action\n * @public\n */\nfunction setFilter(idx, prop, value, valueIndex) {\n  return {\n    type: _actionTypes[\"default\"].SET_FILTER,\n    idx: idx,\n    prop: prop,\n    value: value,\n    valueIndex: valueIndex\n  };\n}\n\n/**\n * Same as Update filter\n * @memberof visStateActions\n * @param idx -`idx` of filter to be updated\n * @param prop - `prop` of filter, e,g, `dataId`, `name`, `value`\n * @param value - new value\n * @param valueIndex - dataId index\n * @returns action\n * @public\n */\nfunction setFilterAnimationTime(idx, prop, value, valueIndex) {\n  return {\n    type: _actionTypes[\"default\"].SET_FILTER_ANIMATION_TIME,\n    idx: idx,\n    prop: prop,\n    value: value,\n    valueIndex: valueIndex\n  };\n}\n\n/**\n * Same as Update filter\n * @memberof visStateActions\n * @public\n */\nfunction setFilterAnimationWindow(_ref) {\n  var id = _ref.id,\n    animationWindow = _ref.animationWindow;\n  return {\n    type: _actionTypes[\"default\"].SET_FILTER_ANIMATION_WINDOW,\n    id: id,\n    animationWindow: animationWindow\n  };\n}\n\n/**\n * Add a new filter\n * @memberof visStateActions\n * @param dataId - dataset `id` this new filter is associated with\n * @returns action\n * @public\n */\nfunction addFilter(dataId) {\n  return {\n    type: _actionTypes[\"default\"].ADD_FILTER,\n    dataId: dataId\n  };\n}\n\n/**\n * Add a new layer\n * @memberof visStateActions\n * @param config - new layer config\n * @param datasetId - dataset id used for creating an empty layer\n * @returns action\n * @public\n */\nfunction addLayer(config, datasetId) {\n  return {\n    type: _actionTypes[\"default\"].ADD_LAYER,\n    config: config,\n    datasetId: datasetId\n  };\n}\n\n/**\n * Reorder layer, order is an array of layer indexes, index 0 will be the one at the bottom\n * @memberof visStateActions\n * @param order an array of layer indexes\n * @returns action\n * @public\n * @example\n *\n * // bring `layers[1]` below `layers[0]`, the sequence layers will be rendered is `1`, `0`, `2`, `3`.\n * // `1` will be at the bottom, `3` will be at the top.\n * this.props.dispatch(reorderLayer([1, 0, 2, 3]));\n */\nfunction reorderLayer(order) {\n  return {\n    type: _actionTypes[\"default\"].REORDER_LAYER,\n    order: order\n  };\n}\n\n/**\n * Remove a filter from `visState.filters`, once a filter is removed, data will be re-filtered and layer will be updated\n * @memberof visStateActions\n * @param idx idx of filter to be removed\n * @returns action\n * @public\n */\nfunction removeFilter(idx) {\n  return {\n    type: _actionTypes[\"default\"].REMOVE_FILTER,\n    idx: idx\n  };\n}\n\n/**\n * Remove a layer\n * @memberof visStateActions\n * @param idx idx of layer to be removed\n * @returns action\n * @public\n */\nfunction removeLayer(idx) {\n  return {\n    type: _actionTypes[\"default\"].REMOVE_LAYER,\n    idx: idx\n  };\n}\n\n/**\n * Duplicate a layer\n * @memberof visStateActions\n * @param idx idx of layer to be duplicated\n * @returns action\n * @public\n */\nfunction duplicateLayer(idx) {\n  return {\n    type: _actionTypes[\"default\"].DUPLICATE_LAYER,\n    idx: idx\n  };\n}\n\n/**\n * Remove a dataset and all layers, filters, tooltip configs that based on it\n * @memberof visStateActions\n * @param dataId dataset id\n * @returns action\n * @public\n */\nfunction removeDataset(dataId) {\n  return {\n    type: _actionTypes[\"default\"].REMOVE_DATASET,\n    dataId: dataId\n  };\n}\n\n/**\n * Display dataset table in a modal\n * @memberof visStateActions\n * @param dataId dataset id to show in table\n * @returns action\n * @public\n */\nfunction showDatasetTable(dataId) {\n  return {\n    type: _actionTypes[\"default\"].SHOW_DATASET_TABLE,\n    dataId: dataId\n  };\n}\n\n/**\n * Update dataset color to custom by means of color picker\n * @memberof visStateActions\n * @param dataId dataset `id` this custom color is associated with\n * @param newColor custom color in RGBformat\n * @returns action\n * @public\n */\nfunction updateTableColor(dataId, newColor) {\n  return {\n    type: _actionTypes[\"default\"].UPDATE_TABLE_COLOR,\n    dataId: dataId,\n    newColor: newColor\n  };\n}\n\n/**\n * Sort dataset column, for table display\n * @memberof visStateActions\n * @param dataId\n * @param column\n * @param mode\n * @returns action\n * @public\n */\nfunction sortTableColumn(dataId, column, mode) {\n  return {\n    type: _actionTypes[\"default\"].SORT_TABLE_COLUMN,\n    dataId: dataId,\n    column: column,\n    mode: mode\n  };\n}\n\n/**\n * Pin dataset column, for table display\n * @param dataId\n * @param column\n * @returns action\n * @public\n */\nfunction pinTableColumn(dataId, column) {\n  return {\n    type: _actionTypes[\"default\"].PIN_TABLE_COLUMN,\n    dataId: dataId,\n    column: column\n  };\n}\n\n/**\n * Copy column, for table display\n * @param dataId\n * @param column\n * @returns action\n * @public\n */\nfunction copyTableColumn(dataId, column) {\n  return {\n    type: _actionTypes[\"default\"].COPY_TABLE_COLUMN,\n    dataId: dataId,\n    column: column\n  };\n}\n\n// * @param dataset.info -info of a dataset\n// * @param dataset.info.id - id of this dataset. If config is defined, `id` should matches the `dataId` in config.\n// * @param dataset.info.label - A display name of this dataset\n// * @param dataset.data - ***required** The data object, in a tabular format with 2 properties `fields` and `rows`\n// * @param dataset.data.fields - ***required** Array of fields,\n// * @param dataset.data.fields.name - ***required** Name of the field,\n// * @param dataset.data.rows - ***required** Array of rows, in a tabular format with `fields` and `rows`\n\n/**\n * Add new dataset to `visState`, with option to load a map config along with the datasets\n * @memberof visStateActions\n * @param datasets - ***required** datasets can be a dataset or an array of datasets\n * Each dataset object needs to have `info` and `data` property.\n * @param {object} options\n * @param options.centerMap `default: true` if `centerMap` is set to `true` kepler.gl will\n * place the map view within the data points boundaries\n * @param options.readOnly `default: false` if `readOnly` is set to `true`\n * the left setting panel will be hidden\n * @param config this object will contain the full kepler.gl instance configuration {mapState, mapStyle, visState}\n * @returns action\n * @public\n */\nfunction updateVisData(datasets, options, config) {\n  return {\n    type: _actionTypes[\"default\"].UPDATE_VIS_DATA,\n    datasets: datasets,\n    options: options,\n    config: config\n  };\n}\n\n/**\n * Rename an existing dataset in `visState`\n * @memberof visStateActions\n * @param dataId - ***required** Id of the dataset to update\n * @param label - ***required** New name for the dataset\n * @returns action\n * @public\n */\nfunction renameDataset(dataId, label) {\n  return {\n    type: _actionTypes[\"default\"].RENAME_DATASET,\n    dataId: dataId,\n    label: label\n  };\n}\n\n/**\n * Start and end filter animation\n * @memberof visStateActions\n * @param {Number} idx of filter\n * @returns action\n * @public\n */\nfunction toggleFilterAnimation(idx) {\n  return {\n    type: _actionTypes[\"default\"].TOGGLE_FILTER_ANIMATION,\n    idx: idx\n  };\n}\n\n/**\n * Change filter animation speed\n * @memberof visStateActions\n * @param idx -  `idx` of filter\n * @param speed - `speed` to change it to. `speed` is a multiplier\n * @returns action\n * @public\n */\nfunction updateFilterAnimationSpeed(idx, speed) {\n  return {\n    type: _actionTypes[\"default\"].UPDATE_FILTER_ANIMATION_SPEED,\n    idx: idx,\n    speed: speed\n  };\n}\n\n/**\n * Reset animation\n * @memberof visStateActions\n * @param value -  Current value of the slider\n * @returns action\n * @public\n */\nfunction setLayerAnimationTime(value) {\n  return {\n    type: _actionTypes[\"default\"].SET_LAYER_ANIMATION_TIME,\n    value: value\n  };\n}\n\n/**\n * update trip layer animation speed\n * @memberof visStateActions\n * @param speed - `speed` to change it to. `speed` is a multiplier\n * @returns action\n * @public\n */\nfunction updateLayerAnimationSpeed(speed) {\n  return {\n    type: _actionTypes[\"default\"].UPDATE_LAYER_ANIMATION_SPEED,\n    speed: speed\n  };\n}\n\n/**\n * start end end layer animation\n * @memberof visStateActions\n * @returns action\n * @public\n */\nfunction toggleLayerAnimation() {\n  return {\n    type: _actionTypes[\"default\"].TOGGLE_LAYER_ANIMATION\n  };\n}\n\n/**\n * hide and show layer animation control\n * @memberof visStateActions\n * @returns action\n * @public\n */\nfunction toggleLayerAnimationControl() {\n  return {\n    type: _actionTypes[\"default\"].TOGGLE_LAYER_ANIMATION_CONTROL\n  };\n}\n\n/**\n * Show larger time filter at bottom for time playback (apply to time filter only)\n * @memberof visStateActions\n * @param idx - index of filter to enlarge\n * @returns action\n * @public\n */\nfunction enlargeFilter(idx) {\n  return {\n    type: _actionTypes[\"default\"].ENLARGE_FILTER,\n    idx: idx\n  };\n}\n\n/**\n * Show/hide filter feature on map\n * @memberof visStateActions\n * @param idx - index of filter feature to show/hide\n * @return action\n */\nfunction toggleFilterFeature(idx) {\n  return {\n    type: _actionTypes[\"default\"].TOGGLE_FILTER_FEATURE,\n    idx: idx\n  };\n}\n\n/**\n * Trigger layer hover event with hovered object\n * @memberof visStateActions\n * @param info - Object hovered, returned by deck.gl\n * @returns action\n * @public\n */\nfunction onLayerHover(info) {\n  return {\n    type: _actionTypes[\"default\"].LAYER_HOVER,\n    info: info\n  };\n}\n\n/**\n * Trigger layer click event with clicked object\n * @memberof visStateActions\n * @param info - Object clicked, returned by deck.gl\n * @returns action\n * @public\n */\nfunction onLayerClick(info) {\n  return {\n    type: _actionTypes[\"default\"].LAYER_CLICK,\n    info: info\n  };\n}\n\n/**\n * Trigger map click event, unselect clicked object\n * @memberof visStateActions\n * @returns action\n * @public\n */\nfunction onMapClick() {\n  return {\n    type: _actionTypes[\"default\"].MAP_CLICK\n  };\n}\n\n/**\n * Trigger map mouse moveevent, payload would be\n * React-map-gl PointerEvent\n * https://uber.github.io/react-map-gl/#/documentation/api-reference/pointer-event\n *\n * @memberof visStateActions\n * @param evt - PointerEvent\n * @returns action\n * @public\n */\nfunction onMouseMove(evt) {\n  return {\n    type: _actionTypes[\"default\"].MOUSE_MOVE,\n    evt: evt\n  };\n}\n\n/**\n * Toggle visibility of a layer in a split map\n * @memberof visStateActions\n * @param mapIndex - index of the split map\n * @param layerId - id of the layer\n * @returns action\n * @public\n */\nfunction toggleLayerForMap(mapIndex, layerId) {\n  return {\n    type: _actionTypes[\"default\"].TOGGLE_LAYER_FOR_MAP,\n    mapIndex: mapIndex,\n    layerId: layerId\n  };\n}\n\n/**\n * Set the property of a filter plot\n * @memberof visStateActions\n * @param idx\n * @param newProp key value mapping of new prop `{yAxis: 'histogram'}`\n * @param valueIndex dataId index\n * @returns action\n * @public\n */\nfunction setFilterPlot(idx, newProp, valueIndex) {\n  return {\n    type: _actionTypes[\"default\"].SET_FILTER_PLOT,\n    idx: idx,\n    newProp: newProp,\n    valueIndex: valueIndex\n  };\n}\n\n/**\n * Set the property of a filter plot\n * @memberof visStateActions\n * @param info\n * @returns action\n * @public\n */\nfunction setMapInfo(info) {\n  return {\n    type: _actionTypes[\"default\"].SET_MAP_INFO,\n    info: info\n  };\n}\n\n/**\n * Trigger file loading dispatch `addDataToMap` if succeed, or `loadFilesErr` if failed\n * @memberof visStateActions\n * @param files array of fileblob\n * @returns action\n * @public\n */\nfunction loadFiles(files, onFinish) {\n  return {\n    type: _actionTypes[\"default\"].LOAD_FILES,\n    files: files,\n    onFinish: onFinish\n  };\n}\n/**\n * Called with next file to load\n * @memberof visStateActions\n * @returns action\n * @public\n */\n\nfunction loadNextFile() {\n  return {\n    type: _actionTypes[\"default\"].LOAD_NEXT_FILE\n  };\n}\n\n/**\n * called when all files are processed and loaded\n * @memberof visStateActions\n * @param result\n * @returns action\n */\nfunction loadFilesSuccess(result) {\n  return {\n    type: _actionTypes[\"default\"].LOAD_FILES_SUCCESS,\n    result: result\n  };\n}\n\n/**\n * called when successfully loaded one file, ready to move on to the next one\n * @memberof visStateActions\n * @param result\n * @returns action\n */\nfunction loadFileStepSuccess(_ref2) {\n  var fileName = _ref2.fileName,\n    fileCache = _ref2.fileCache;\n  return {\n    type: _actionTypes[\"default\"].LOAD_FILE_STEP_SUCCESS,\n    fileName: fileName,\n    fileCache: fileCache\n  };\n}\n\n/**\n * Trigger loading file error\n * @memberof visStateActions\n * @param  error\n * @returns action\n * @public\n */\nfunction loadFilesErr(fileName, error) {\n  return {\n    type: _actionTypes[\"default\"].LOAD_FILES_ERR,\n    fileName: fileName,\n    error: error\n  };\n}\n\n/**\n * Store features to state\n * @memberof visStateActions\n * @param features\n * @returns action\n */\nfunction setFeatures(features) {\n  return {\n    type: _actionTypes[\"default\"].SET_FEATURES,\n    features: features\n  };\n}\n\n/**\n * It will apply the provide feature as filter to the given layer.\n * If the given feature is already applied as filter to the layer, it will remove the layer from the filter\n * @memberof visStateActions\n * @param layer\n * @param feature\n * @returns action\n */\nfunction setPolygonFilterLayer(layer, feature) {\n  return {\n    type: _actionTypes[\"default\"].SET_POLYGON_FILTER_LAYER,\n    layer: layer,\n    feature: feature\n  };\n}\n\n/**\n * Set the current feature to be edited/deleted\n * @memberof visStateActions\n * @param feature\n * @returns action\n */\nfunction setSelectedFeature(feature) {\n  return {\n    type: _actionTypes[\"default\"].SET_SELECTED_FEATURE,\n    feature: feature\n  };\n}\n\n/**\n * Delete the given feature\n * @memberof visStateActions\n * @param feature\n * @returns action\n */\nfunction deleteFeature(feature) {\n  return {\n    type: _actionTypes[\"default\"].DELETE_FEATURE,\n    feature: feature\n  };\n}\n\n/** Set the map mode\n * @memberof visStateActions\n * @param mode one of EDITOR_MODES\n * @returns action\n * @public\n * @example\n * import {setMapMode} from 'kepler.gl/actions';\n * import {EDITOR_MODES} from 'kepler.gl/constants';\n *\n * this.props.dispatch(setMapMode(EDITOR_MODES.DRAW_POLYGON));\n */\nfunction setEditorMode(mode) {\n  return {\n    type: _actionTypes[\"default\"].SET_EDITOR_MODE,\n    mode: mode\n  };\n}\n\n/**\n * Trigger CPU filter of selected dataset\n * @memberof visStateActions\n * @param dataId - single dataId or an array of dataIds\n * @returns action\n * @public\n */\nfunction applyCPUFilter(dataId) {\n  return {\n    type: _actionTypes[\"default\"].APPLY_CPU_FILTER,\n    dataId: dataId\n  };\n}\n\n/**\n * Toggle editor layer visibility\n * @memberof visStateActions\n * @return action\n */\nfunction toggleEditorVisibility() {\n  return {\n    type: _actionTypes[\"default\"].TOGGLE_EDITOR_VISIBILITY\n  };\n}\n\n/**\n * Process the next file batch\n * @memberof visStateActions\n * @param payload - batch payload\n * @return action\n */\nfunction nextFileBatch(payload) {\n  return {\n    type: _actionTypes[\"default\"].NEXT_FILE_BATCH,\n    payload: payload\n  };\n}\n\n/**\n * Process the file content\n * @memberof visStateActions\n * @param payload - the file content\n * @return action\n */\nfunction processFileContent(payload) {\n  return {\n    type: _actionTypes[\"default\"].PROCESS_FILE_CONTENT,\n    payload: payload\n  };\n}\n\n/**\n * Set layer animation time format and timezone\n * @memberof visStateActions\n * @param config - {timeFormat: string, timezone: string}\n * @return action\n */\nfunction setLayerAnimationTimeConfig(config) {\n  return {\n    type: _actionTypes[\"default\"].SET_LAYER_ANIMATION_TIME_CONFIG,\n    config: config\n  };\n}\n\n/**\n * Set Filter animation time format and timezone\n * @memberof visStateActions\n * @param idx\n * @param config\n * @return action\n */\nfunction setFilterAnimationTimeConfig(idx, config) {\n  return {\n    type: _actionTypes[\"default\"].SET_FILTER_ANIMATION_TIME_CONFIG,\n    idx: idx,\n    config: config\n  };\n}\n/**\n * This declaration is needed to group actions in docs\n */\n\n/**\n * Actions handled mostly by `visState` reducer.\n * They manage how data is processed, filtered and displayed on the map by operates on layers,\n * filters and interaction settings.\n *\n * @public\n */\n\n/* eslint-disable no-unused-vars */\n// @ts-ignore\n\nvar visStateActions = null;\n/* eslint-enable no-unused-vars */","map":{"version":3,"names":["exports","toggleLayerForMap","setMapInfo","loadFiles","loadNextFile","loadFilesSuccess","loadFileStepSuccess","loadFilesErr","setFeatures","setPolygonFilterLayer","setSelectedFeature","deleteFeature","setEditorMode","applyCPUFilter","toggleEditorVisibility","nextFileBatch","processFileContent","setLayerAnimationTimeConfig","setFilterAnimationTimeConfig","_actionTypes","_interopRequireDefault","require","layerConfigChange","oldLayer","newConfig","type","LAYER_CONFIG_CHANGE","layerTextLabelChange","idx","prop","value","LAYER_TEXT_LABEL_CHANGE","layerTypeChange","newType","LAYER_TYPE_CHANGE","layerVisualChannelConfigChange","channel","LAYER_VISUAL_CHANNEL_CHANGE","layerVisConfigChange","newVisConfig","LAYER_VIS_CONFIG_CHANGE","layerColorUIChange","LAYER_COLOR_UI_CHANGE","updateLayerBlending","mode","UPDATE_LAYER_BLENDING","interactionConfigChange","config","INTERACTION_CONFIG_CHANGE","setFilter","valueIndex","SET_FILTER","setFilterAnimationTime","SET_FILTER_ANIMATION_TIME","setFilterAnimationWindow","_ref","id","animationWindow","SET_FILTER_ANIMATION_WINDOW","addFilter","dataId","ADD_FILTER","addLayer","datasetId","ADD_LAYER","reorderLayer","order","REORDER_LAYER","removeFilter","REMOVE_FILTER","removeLayer","REMOVE_LAYER","duplicateLayer","DUPLICATE_LAYER","removeDataset","REMOVE_DATASET","showDatasetTable","SHOW_DATASET_TABLE","updateTableColor","newColor","UPDATE_TABLE_COLOR","sortTableColumn","column","SORT_TABLE_COLUMN","pinTableColumn","PIN_TABLE_COLUMN","copyTableColumn","COPY_TABLE_COLUMN","updateVisData","datasets","options","UPDATE_VIS_DATA","renameDataset","label","RENAME_DATASET","toggleFilterAnimation","TOGGLE_FILTER_ANIMATION","updateFilterAnimationSpeed","speed","UPDATE_FILTER_ANIMATION_SPEED","setLayerAnimationTime","SET_LAYER_ANIMATION_TIME","updateLayerAnimationSpeed","UPDATE_LAYER_ANIMATION_SPEED","toggleLayerAnimation","TOGGLE_LAYER_ANIMATION","toggleLayerAnimationControl","TOGGLE_LAYER_ANIMATION_CONTROL","enlargeFilter","ENLARGE_FILTER","toggleFilterFeature","TOGGLE_FILTER_FEATURE","onLayerHover","info","LAYER_HOVER","onLayerClick","LAYER_CLICK","onMapClick","MAP_CLICK","onMouseMove","evt","MOUSE_MOVE","mapIndex","layerId","TOGGLE_LAYER_FOR_MAP","setFilterPlot","newProp","SET_FILTER_PLOT","SET_MAP_INFO","files","onFinish","LOAD_FILES","LOAD_NEXT_FILE","result","LOAD_FILES_SUCCESS","_ref2","fileName","fileCache","LOAD_FILE_STEP_SUCCESS","error","LOAD_FILES_ERR","features","SET_FEATURES","layer","feature","SET_POLYGON_FILTER_LAYER","SET_SELECTED_FEATURE","DELETE_FEATURE","SET_EDITOR_MODE","APPLY_CPU_FILTER","TOGGLE_EDITOR_VISIBILITY","payload","NEXT_FILE_BATCH","PROCESS_FILE_CONTENT","SET_LAYER_ANIMATION_TIME_CONFIG","SET_FILTER_ANIMATION_TIME_CONFIG"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/actions/src/vis-state-actions.ts"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// vis-state-reducer\nimport {default as ActionTypes} from './action-types';\nimport {FileCacheItem} from '@kepler.gl/processors';\nimport {Layer, LayerBaseConfig} from '@kepler.gl/layers';\nimport {\n  AddDataToMapPayload,\n  ValueOf,\n  Merge,\n  RGBColor,\n  NestedPartial,\n  LayerVisConfig,\n  ColorUI,\n  Feature,\n  InteractionConfig\n} from '@kepler.gl/types';\n// TODO - import LoaderObject type from @loaders.gl/core when supported\n// TODO - import LoadOptions type from @loaders.gl/core when supported\n\nexport type LayerConfigChangeUpdaterAction = {\n  oldLayer: Layer;\n  newConfig: Partial<LayerBaseConfig>;\n};\n/**\n * Update layer base config: dataId, label, column, isVisible\n * @param oldLayer - layer to be updated\n * @param newConfig - new config to be merged with old config\n * @returns action\n * @public\n */\nexport function layerConfigChange(\n  oldLayer: Layer,\n  newConfig: Partial<LayerBaseConfig>\n): Merge<LayerConfigChangeUpdaterAction, {type: typeof ActionTypes.LAYER_CONFIG_CHANGE}> {\n  return {\n    type: ActionTypes.LAYER_CONFIG_CHANGE,\n    oldLayer,\n    newConfig\n  };\n}\nexport type LayerTextLabelChangeUpdaterAction = {\n  oldLayer: Layer;\n  idx: number | 'all';\n  prop: string;\n  value: any;\n};\n\n/**\n * Update layer text label\n * @param oldLayer - layer to be updated\n * @param idx -`idx` of text label to be updated\n * @param prop - `prop` of text label, e,g, `anchor`, `alignment`, `color`, `size`, `field`\n * @param value - new value\n * @returns action\n * @public\n */\nexport function layerTextLabelChange(\n  oldLayer: Layer,\n  idx: number | 'all',\n  prop: string,\n  value: any\n): Merge<LayerTextLabelChangeUpdaterAction, {type: typeof ActionTypes.LAYER_TEXT_LABEL_CHANGE}> {\n  return {\n    type: ActionTypes.LAYER_TEXT_LABEL_CHANGE,\n    oldLayer,\n    idx,\n    prop,\n    value\n  };\n}\nexport type LayerTypeChangeUpdaterAction = {\n  oldLayer: Layer;\n  newType: string;\n};\n/**\n * Update layer type. Previews layer config will be copied if applicable.\n * @param oldLayer - layer to be updated\n * @param newType - new type\n * @returns action\n * @public\n */\nexport function layerTypeChange(\n  oldLayer: Layer,\n  newType: string\n): Merge<LayerTypeChangeUpdaterAction, {type: typeof ActionTypes.LAYER_TYPE_CHANGE}> {\n  return {\n    type: ActionTypes.LAYER_TYPE_CHANGE,\n    oldLayer,\n    newType\n  };\n}\nexport type LayerVisualChannelConfigChangeUpdaterAction = {\n  oldLayer: Layer;\n  newConfig: Partial<LayerBaseConfig>;\n  channel: string;\n};\n/**\n * Update layer visual channel\n * @memberof visStateActions\n * @param oldLayer - layer to be updated\n * @param newConfig - new visual channel config\n * @param channel - channel to be updated\n * @returns action\n * @public\n */\nexport function layerVisualChannelConfigChange(\n  oldLayer: Layer,\n  newConfig: Partial<LayerBaseConfig>,\n  channel: string\n): Merge<\n  LayerVisualChannelConfigChangeUpdaterAction,\n  {type: typeof ActionTypes.LAYER_VISUAL_CHANNEL_CHANGE}\n> {\n  return {\n    type: ActionTypes.LAYER_VISUAL_CHANNEL_CHANGE,\n    oldLayer,\n    newConfig,\n    channel\n  };\n}\nexport type LayerVisConfigChangeUpdaterAction = {\n  oldLayer: Layer;\n  newVisConfig: Partial<LayerVisConfig>;\n};\n/**\n * Update layer `visConfig`\n * @memberof visStateActions\n * @param oldLayer - layer to be updated\n * @param newVisConfig - new visConfig as a key value map: e.g. `{opacity: 0.8}`\n * @returns action\n * @public\n */\nexport function layerVisConfigChange(\n  oldLayer: Layer,\n  newVisConfig: Partial<LayerVisConfig>\n): Merge<LayerVisConfigChangeUpdaterAction, {type: typeof ActionTypes.LAYER_VIS_CONFIG_CHANGE}> {\n  return {\n    type: ActionTypes.LAYER_VIS_CONFIG_CHANGE,\n    oldLayer,\n    newVisConfig\n  };\n}\nexport type LayerColorUIChangeUpdaterAction = {\n  oldLayer: Layer;\n  prop: string;\n  newConfig: NestedPartial<ColorUI>;\n};\n\n/**\n * Set the color palette ui for layer color\n * @memberof visStateActions\n * @param oldLayer - layer to be updated\n * @param prop - which color prop\n * @param newConfig - to be merged\n * @returns action\n * @public\n */\nexport function layerColorUIChange(\n  oldLayer: Layer,\n  prop: string,\n  newConfig: NestedPartial<ColorUI>\n): Merge<LayerColorUIChangeUpdaterAction, {type: typeof ActionTypes.LAYER_COLOR_UI_CHANGE}> {\n  return {\n    type: ActionTypes.LAYER_COLOR_UI_CHANGE,\n    oldLayer,\n    prop,\n    newConfig\n  };\n}\n\nexport type UpdateLayerBlendingUpdaterAction = {\n  mode: 'additive' | 'normal' | 'subtractive';\n};\n/**\n * Update layer blending mode\n * @memberof visStateActions\n * @param mode one of `additive`, `normal` and `subtractive`\n * @returns action\n * @public\n */\nexport function updateLayerBlending(\n  mode: 'additive' | 'normal' | 'subtractive'\n): Merge<UpdateLayerBlendingUpdaterAction, {type: typeof ActionTypes.UPDATE_LAYER_BLENDING}> {\n  return {\n    type: ActionTypes.UPDATE_LAYER_BLENDING,\n    mode\n  };\n}\n\nexport type InteractionConfigChangeUpdaterAction = {\n  config: ValueOf<InteractionConfig>;\n};\n/**\n * Update `interactionConfig`\n * @memberof visStateActions\n * @param config - new config as key value map: `{tooltip: {enabled: true}}`\n * @returns action\n * @public\n */\nexport function interactionConfigChange(\n  config: ValueOf<InteractionConfig>\n): Merge<\n  InteractionConfigChangeUpdaterAction,\n  {type: typeof ActionTypes.INTERACTION_CONFIG_CHANGE}\n> {\n  return {\n    type: ActionTypes.INTERACTION_CONFIG_CHANGE,\n    config\n  };\n}\n\nexport type SetFilterUpdaterAction = {\n  idx: number;\n  prop: string;\n  value: any;\n  valueIndex?: number;\n};\n/**\n * Update filter property\n * @memberof visStateActions\n * @param idx -`idx` of filter to be updated\n * @param prop - `prop` of filter, e,g, `dataId`, `name`, `value`\n * @param value - new value\n * @param valueIndex - dataId index\n * @returns action\n * @public\n */\nexport function setFilter(\n  idx: number,\n  prop: string,\n  value: any,\n  valueIndex?: number\n): Merge<SetFilterUpdaterAction, {type: typeof ActionTypes.SET_FILTER}> {\n  return {\n    type: ActionTypes.SET_FILTER,\n    idx,\n    prop,\n    value,\n    valueIndex\n  };\n}\n\nexport type SetFilterAnimationTimeUpdaterAction = {\n  idx: number;\n  prop: string;\n  value: any;\n  valueIndex?: number;\n};\n/**\n * Same as Update filter\n * @memberof visStateActions\n * @param idx -`idx` of filter to be updated\n * @param prop - `prop` of filter, e,g, `dataId`, `name`, `value`\n * @param value - new value\n * @param valueIndex - dataId index\n * @returns action\n * @public\n */\nexport function setFilterAnimationTime(\n  idx: number,\n  prop: string,\n  value: any,\n  valueIndex?: number\n): Merge<\n  SetFilterAnimationTimeUpdaterAction,\n  {type: typeof ActionTypes.SET_FILTER_ANIMATION_TIME}\n> {\n  return {\n    type: ActionTypes.SET_FILTER_ANIMATION_TIME,\n    idx,\n    prop,\n    value,\n    valueIndex\n  };\n}\n\nexport type SetFilterAnimationWindowUpdaterAction = {\n  id: string;\n  animationWindow: string;\n};\n/**\n * Same as Update filter\n * @memberof visStateActions\n * @public\n */\nexport function setFilterAnimationWindow({\n  id,\n  animationWindow\n}: SetFilterAnimationWindowUpdaterAction): Merge<\n  SetFilterAnimationWindowUpdaterAction,\n  {type: typeof ActionTypes.SET_FILTER_ANIMATION_WINDOW}\n> {\n  return {\n    type: ActionTypes.SET_FILTER_ANIMATION_WINDOW,\n    id,\n    animationWindow\n  };\n}\n\nexport type AddFilterUpdaterAction = {\n  dataId?: string | null;\n};\n/**\n * Add a new filter\n * @memberof visStateActions\n * @param dataId - dataset `id` this new filter is associated with\n * @returns action\n * @public\n */\nexport function addFilter(\n  dataId: string | null\n): Merge<AddFilterUpdaterAction, {type: typeof ActionTypes.ADD_FILTER}> {\n  return {\n    type: ActionTypes.ADD_FILTER,\n    dataId\n  };\n}\n\nexport type AddLayerUpdaterAction = {\n  config?: object;\n  datasetId?: string;\n};\n/**\n * Add a new layer\n * @memberof visStateActions\n * @param config - new layer config\n * @param datasetId - dataset id used for creating an empty layer\n * @returns action\n * @public\n */\nexport function addLayer(\n  config?: object,\n  datasetId?: string\n): Merge<AddLayerUpdaterAction, {type: typeof ActionTypes.ADD_LAYER}> {\n  return {\n    type: ActionTypes.ADD_LAYER,\n    config,\n    datasetId\n  };\n}\n\nexport type ReorderLayerUpdaterAction = {\n  order: number[];\n};\n/**\n * Reorder layer, order is an array of layer indexes, index 0 will be the one at the bottom\n * @memberof visStateActions\n * @param order an array of layer indexes\n * @returns action\n * @public\n * @example\n *\n * // bring `layers[1]` below `layers[0]`, the sequence layers will be rendered is `1`, `0`, `2`, `3`.\n * // `1` will be at the bottom, `3` will be at the top.\n * this.props.dispatch(reorderLayer([1, 0, 2, 3]));\n */\nexport function reorderLayer(\n  order: number[]\n): Merge<ReorderLayerUpdaterAction, {type: typeof ActionTypes.REORDER_LAYER}> {\n  return {\n    type: ActionTypes.REORDER_LAYER,\n    order\n  };\n}\n\nexport type RemoveFilterUpdaterAction = {\n  idx: number;\n};\n/**\n * Remove a filter from `visState.filters`, once a filter is removed, data will be re-filtered and layer will be updated\n * @memberof visStateActions\n * @param idx idx of filter to be removed\n * @returns action\n * @public\n */\nexport function removeFilter(\n  idx: number\n): Merge<RemoveFilterUpdaterAction, {type: typeof ActionTypes.REMOVE_FILTER}> {\n  return {\n    type: ActionTypes.REMOVE_FILTER,\n    idx\n  };\n}\n\nexport type RemoveLayerUpdaterAction = {\n  idx: number;\n};\n/**\n * Remove a layer\n * @memberof visStateActions\n * @param idx idx of layer to be removed\n * @returns action\n * @public\n */\nexport function removeLayer(\n  idx: number\n): Merge<RemoveLayerUpdaterAction, {type: typeof ActionTypes.REMOVE_LAYER}> {\n  return {\n    type: ActionTypes.REMOVE_LAYER,\n    idx\n  };\n}\n\nexport type DuplicateLayerUpdaterAction = {\n  idx: number;\n};\n/**\n * Duplicate a layer\n * @memberof visStateActions\n * @param idx idx of layer to be duplicated\n * @returns action\n * @public\n */\nexport function duplicateLayer(\n  idx: number\n): Merge<DuplicateLayerUpdaterAction, {type: typeof ActionTypes.DUPLICATE_LAYER}> {\n  return {\n    type: ActionTypes.DUPLICATE_LAYER,\n    idx\n  };\n}\n\nexport type RemoveDatasetUpdaterAction = {\n  dataId: string;\n};\n/**\n * Remove a dataset and all layers, filters, tooltip configs that based on it\n * @memberof visStateActions\n * @param dataId dataset id\n * @returns action\n * @public\n */\nexport function removeDataset(\n  dataId: string\n): Merge<RemoveDatasetUpdaterAction, {type: typeof ActionTypes.REMOVE_DATASET}> {\n  return {\n    type: ActionTypes.REMOVE_DATASET,\n    dataId\n  };\n}\n\nexport type ShowDatasetTableUpdaterAction = {\n  dataId: string;\n};\n/**\n * Display dataset table in a modal\n * @memberof visStateActions\n * @param dataId dataset id to show in table\n * @returns action\n * @public\n */\nexport function showDatasetTable(\n  dataId: string\n): Merge<ShowDatasetTableUpdaterAction, {type: typeof ActionTypes.SHOW_DATASET_TABLE}> {\n  return {\n    type: ActionTypes.SHOW_DATASET_TABLE,\n    dataId\n  };\n}\n\nexport type UpdateDatasetColorUpdater = {\n  dataId: string;\n  newColor: RGBColor;\n};\n/**\n * Update dataset color to custom by means of color picker\n * @memberof visStateActions\n * @param dataId dataset `id` this custom color is associated with\n * @param newColor custom color in RGBformat\n * @returns action\n * @public\n */\nexport function updateTableColor(\n  dataId: string,\n  newColor: RGBColor\n): Merge<UpdateDatasetColorUpdater, {type: typeof ActionTypes.UPDATE_TABLE_COLOR}> {\n  return {\n    type: ActionTypes.UPDATE_TABLE_COLOR,\n    dataId,\n    newColor\n  };\n}\n\nexport type SortTableColumnUpdaterAction = {\n  dataId: string;\n  column: string;\n  mode?: string;\n};\n/**\n * Sort dataset column, for table display\n * @memberof visStateActions\n * @param dataId\n * @param column\n * @param mode\n * @returns action\n * @public\n */\nexport function sortTableColumn(\n  dataId: string,\n  column: string,\n  mode?: string\n): Merge<SortTableColumnUpdaterAction, {type: typeof ActionTypes.SORT_TABLE_COLUMN}> {\n  return {\n    type: ActionTypes.SORT_TABLE_COLUMN,\n    dataId,\n    column,\n    mode\n  };\n}\n\nexport type PinTableColumnUpdaterAction = {\n  dataId: string;\n  column: string;\n};\n/**\n * Pin dataset column, for table display\n * @param dataId\n * @param column\n * @returns action\n * @public\n */\nexport function pinTableColumn(\n  dataId: string,\n  column: string\n): Merge<PinTableColumnUpdaterAction, {type: typeof ActionTypes.PIN_TABLE_COLUMN}> {\n  return {\n    type: ActionTypes.PIN_TABLE_COLUMN,\n    dataId,\n    column\n  };\n}\n\nexport type CopyTableColumnUpdaterAction = {\n  dataId: string;\n  column: string;\n};\n/**\n * Copy column, for table display\n * @param dataId\n * @param column\n * @returns action\n * @public\n */\nexport function copyTableColumn(\n  dataId: string,\n  column: string\n): Merge<CopyTableColumnUpdaterAction, {type: typeof ActionTypes.COPY_TABLE_COLUMN}> {\n  return {\n    type: ActionTypes.COPY_TABLE_COLUMN,\n    dataId,\n    column\n  };\n}\n\nexport type AddDataToMapUpdaterOptions = {\n  centrMap?: boolean;\n  readOnly?: boolean;\n  keepExistingConfig?: boolean;\n};\n\nexport type UpdateVisDataUpdaterAction = {\n  datasets: AddDataToMapPayload['datasets'];\n  options: AddDataToMapPayload['options'];\n  config?: AddDataToMapPayload['config'];\n} & AddDataToMapPayload;\n// * @param dataset.info -info of a dataset\n// * @param dataset.info.id - id of this dataset. If config is defined, `id` should matches the `dataId` in config.\n// * @param dataset.info.label - A display name of this dataset\n// * @param dataset.data - ***required** The data object, in a tabular format with 2 properties `fields` and `rows`\n// * @param dataset.data.fields - ***required** Array of fields,\n// * @param dataset.data.fields.name - ***required** Name of the field,\n// * @param dataset.data.rows - ***required** Array of rows, in a tabular format with `fields` and `rows`\n/**\n * Add new dataset to `visState`, with option to load a map config along with the datasets\n * @memberof visStateActions\n * @param datasets - ***required** datasets can be a dataset or an array of datasets\n * Each dataset object needs to have `info` and `data` property.\n * @param {object} options\n * @param options.centerMap `default: true` if `centerMap` is set to `true` kepler.gl will\n * place the map view within the data points boundaries\n * @param options.readOnly `default: false` if `readOnly` is set to `true`\n * the left setting panel will be hidden\n * @param config this object will contain the full kepler.gl instance configuration {mapState, mapStyle, visState}\n * @returns action\n * @public\n */\nexport function updateVisData(\n  datasets: AddDataToMapPayload['datasets'],\n  options: AddDataToMapPayload['options'],\n  config?: AddDataToMapPayload['config']\n): Merge<UpdateVisDataUpdaterAction, {type: typeof ActionTypes.UPDATE_VIS_DATA}> {\n  return {\n    type: ActionTypes.UPDATE_VIS_DATA,\n    datasets,\n    options,\n    config\n  };\n}\n\nexport type RenameDatasetUpdaterAction = {\n  dataId: string;\n  label: string;\n};\n/**\n * Rename an existing dataset in `visState`\n * @memberof visStateActions\n * @param dataId - ***required** Id of the dataset to update\n * @param label - ***required** New name for the dataset\n * @returns action\n * @public\n */\nexport function renameDataset(\n  dataId: string,\n  label: string\n): Merge<RenameDatasetUpdaterAction, {type: typeof ActionTypes.RENAME_DATASET}> {\n  return {\n    type: ActionTypes.RENAME_DATASET,\n    dataId,\n    label\n  };\n}\n\nexport type ToggleFilterAnimationUpdaterAction = {\n  idx: number;\n};\n/**\n * Start and end filter animation\n * @memberof visStateActions\n * @param {Number} idx of filter\n * @returns action\n * @public\n */\nexport function toggleFilterAnimation(\n  idx: number\n): Merge<ToggleFilterAnimationUpdaterAction, {type: typeof ActionTypes.TOGGLE_FILTER_ANIMATION}> {\n  return {\n    type: ActionTypes.TOGGLE_FILTER_ANIMATION,\n    idx\n  };\n}\n\nexport type UpdateFilterAnimationSpeedUpdaterAction = {\n  idx: number;\n  speed: number;\n};\n/**\n * Change filter animation speed\n * @memberof visStateActions\n * @param idx -  `idx` of filter\n * @param speed - `speed` to change it to. `speed` is a multiplier\n * @returns action\n * @public\n */\nexport function updateFilterAnimationSpeed(\n  idx: number,\n  speed: number\n): Merge<\n  UpdateFilterAnimationSpeedUpdaterAction,\n  {type: typeof ActionTypes.UPDATE_FILTER_ANIMATION_SPEED}\n> {\n  return {\n    type: ActionTypes.UPDATE_FILTER_ANIMATION_SPEED,\n    idx,\n    speed\n  };\n}\n\nexport type SetLayerAnimationTimeUpdaterAction = {\n  value: number;\n};\n/**\n * Reset animation\n * @memberof visStateActions\n * @param value -  Current value of the slider\n * @returns action\n * @public\n */\nexport function setLayerAnimationTime(\n  value: number\n): Merge<SetLayerAnimationTimeUpdaterAction, {type: typeof ActionTypes.SET_LAYER_ANIMATION_TIME}> {\n  return {\n    type: ActionTypes.SET_LAYER_ANIMATION_TIME,\n    value\n  };\n}\n\nexport type UpdateLayerAnimationSpeedUpdaterAction = {\n  speed: number;\n};\n/**\n * update trip layer animation speed\n * @memberof visStateActions\n * @param speed - `speed` to change it to. `speed` is a multiplier\n * @returns action\n * @public\n */\nexport function updateLayerAnimationSpeed(\n  speed: number\n): Merge<\n  UpdateLayerAnimationSpeedUpdaterAction,\n  {type: typeof ActionTypes.UPDATE_LAYER_ANIMATION_SPEED}\n> {\n  return {\n    type: ActionTypes.UPDATE_LAYER_ANIMATION_SPEED,\n    speed\n  };\n}\nexport type ToggleLayerAnimationUpdaterAction = {};\n/**\n * start end end layer animation\n * @memberof visStateActions\n * @returns action\n * @public\n */\nexport function toggleLayerAnimation(): Merge<\n  ToggleLayerAnimationUpdaterAction,\n  {type: typeof ActionTypes.TOGGLE_LAYER_ANIMATION}\n> {\n  return {\n    type: ActionTypes.TOGGLE_LAYER_ANIMATION\n  };\n}\n\nexport type ToggleLayerAnimationControlUpdaterAction = {};\n/**\n * hide and show layer animation control\n * @memberof visStateActions\n * @returns action\n * @public\n */\nexport function toggleLayerAnimationControl(): Merge<\n  ToggleLayerAnimationControlUpdaterAction,\n  {type: typeof ActionTypes.TOGGLE_LAYER_ANIMATION_CONTROL}\n> {\n  return {\n    type: ActionTypes.TOGGLE_LAYER_ANIMATION_CONTROL\n  };\n}\n\nexport type EnlargeFilterUpdaterAction = {\n  idx: number;\n};\n/**\n * Show larger time filter at bottom for time playback (apply to time filter only)\n * @memberof visStateActions\n * @param idx - index of filter to enlarge\n * @returns action\n * @public\n */\nexport function enlargeFilter(\n  idx: number\n): Merge<EnlargeFilterUpdaterAction, {type: typeof ActionTypes.ENLARGE_FILTER}> {\n  return {\n    type: ActionTypes.ENLARGE_FILTER,\n    idx\n  };\n}\n\nexport type ToggleFilterFeatureUpdaterAction = {\n  idx: number;\n};\n/**\n * Show/hide filter feature on map\n * @memberof visStateActions\n * @param idx - index of filter feature to show/hide\n * @return action\n */\nexport function toggleFilterFeature(\n  idx: number\n): Merge<ToggleFilterFeatureUpdaterAction, {type: typeof ActionTypes.TOGGLE_FILTER_FEATURE}> {\n  return {\n    type: ActionTypes.TOGGLE_FILTER_FEATURE,\n    idx\n  };\n}\n\nexport type OnLayerHoverUpdaterAction = {\n  info: {picked?: boolean} | null;\n};\n/**\n * Trigger layer hover event with hovered object\n * @memberof visStateActions\n * @param info - Object hovered, returned by deck.gl\n * @returns action\n * @public\n */\nexport function onLayerHover(\n  info: {picked?: boolean} | null\n): Merge<OnLayerHoverUpdaterAction, {type: typeof ActionTypes.LAYER_HOVER}> {\n  return {\n    type: ActionTypes.LAYER_HOVER,\n    info\n  };\n}\n\nexport type OnLayerClickUpdaterAction = {\n  info: {picked?: boolean} | null;\n};\n/**\n * Trigger layer click event with clicked object\n * @memberof visStateActions\n * @param info - Object clicked, returned by deck.gl\n * @returns action\n * @public\n */\nexport function onLayerClick(\n  info: {picked?: boolean} | null\n): Merge<OnLayerClickUpdaterAction, {type: typeof ActionTypes.LAYER_CLICK}> {\n  return {\n    type: ActionTypes.LAYER_CLICK,\n    info\n  };\n}\n\nexport type OnMapClickUpdaterAction = {};\n/**\n * Trigger map click event, unselect clicked object\n * @memberof visStateActions\n * @returns action\n * @public\n */\nexport function onMapClick(): Merge<OnMapClickUpdaterAction, {type: typeof ActionTypes.MAP_CLICK}> {\n  return {\n    type: ActionTypes.MAP_CLICK\n  };\n}\n\nexport type OnMouseMoveUpdaterAction = {\n  evt;\n};\n/**\n * Trigger map mouse moveevent, payload would be\n * React-map-gl PointerEvent\n * https://uber.github.io/react-map-gl/#/documentation/api-reference/pointer-event\n *\n * @memberof visStateActions\n * @param evt - PointerEvent\n * @returns action\n * @public\n */\nexport function onMouseMove(\n  evt\n): Merge<OnMouseMoveUpdaterAction, {type: typeof ActionTypes.MOUSE_MOVE}> {\n  return {\n    type: ActionTypes.MOUSE_MOVE,\n    evt\n  };\n}\n\nexport type ToggleLayerForMapUpdaterAction = {\n  mapIndex: number;\n  layerId: string;\n};\n/**\n * Toggle visibility of a layer in a split map\n * @memberof visStateActions\n * @param mapIndex - index of the split map\n * @param layerId - id of the layer\n * @returns action\n * @public\n */\nexport function toggleLayerForMap(\n  mapIndex: number,\n  layerId: string\n): Merge<ToggleLayerForMapUpdaterAction, {type: typeof ActionTypes.TOGGLE_LAYER_FOR_MAP}> {\n  return {\n    type: ActionTypes.TOGGLE_LAYER_FOR_MAP,\n    mapIndex,\n    layerId\n  };\n}\n\nexport type SetFilterPlotUpdaterAction = {\n  idx: number;\n  newProp: object;\n  valueIndex?: number;\n};\n/**\n * Set the property of a filter plot\n * @memberof visStateActions\n * @param idx\n * @param newProp key value mapping of new prop `{yAxis: 'histogram'}`\n * @param valueIndex dataId index\n * @returns action\n * @public\n */\nexport function setFilterPlot(\n  idx: number,\n  newProp: object,\n  valueIndex?: number\n): Merge<SetFilterPlotUpdaterAction, {type: typeof ActionTypes.SET_FILTER_PLOT}> {\n  return {\n    type: ActionTypes.SET_FILTER_PLOT,\n    idx,\n    newProp,\n    valueIndex\n  };\n}\n\nexport type SetMapInfoUpdaterAction = {\n  info: any;\n};\n/**\n * Set the property of a filter plot\n * @memberof visStateActions\n * @param info\n * @returns action\n * @public\n */\nexport function setMapInfo(\n  info: any\n): Merge<SetMapInfoUpdaterAction, {type: typeof ActionTypes.SET_MAP_INFO}> {\n  return {\n    type: ActionTypes.SET_MAP_INFO,\n    info\n  };\n}\n\nexport type LoadFilesUpdaterAction = {\n  files: File[];\n  onFinish?(result: any): any;\n};\n/**\n * Trigger file loading dispatch `addDataToMap` if succeed, or `loadFilesErr` if failed\n * @memberof visStateActions\n * @param files array of fileblob\n * @returns action\n * @public\n */\nexport function loadFiles(\n  files: File[],\n  onFinish?: (result: any) => any\n): Merge<LoadFilesUpdaterAction, {type: typeof ActionTypes.LOAD_FILES}> {\n  return {\n    type: ActionTypes.LOAD_FILES,\n    files,\n    onFinish\n  };\n}\n\n/**\n * Called with next file to load\n * @memberof visStateActions\n * @returns action\n * @public\n */\nexport function loadNextFile(): {type: typeof ActionTypes.LOAD_NEXT_FILE} {\n  return {\n    type: ActionTypes.LOAD_NEXT_FILE\n  };\n}\n\nexport type loadFilesSuccessUpdaterAction = {\n  result: FileCacheItem[];\n};\n/**\n * called when all files are processed and loaded\n * @memberof visStateActions\n * @param result\n * @returns action\n */\nexport function loadFilesSuccess(\n  result: FileCacheItem[]\n): Merge<loadFilesSuccessUpdaterAction, {type: typeof ActionTypes.LOAD_FILES_SUCCESS}> {\n  return {\n    type: ActionTypes.LOAD_FILES_SUCCESS,\n    result\n  };\n}\n\nexport type LoadFileStepSuccessAction = {\n  fileName: string;\n  fileCache: FileCacheItem[];\n};\n/**\n * called when successfully loaded one file, ready to move on to the next one\n * @memberof visStateActions\n * @param result\n * @returns action\n */\nexport function loadFileStepSuccess({\n  fileName,\n  fileCache\n}: {\n  fileName: string;\n  fileCache: FileCacheItem[];\n}): Merge<LoadFileStepSuccessAction, {type: typeof ActionTypes.LOAD_FILE_STEP_SUCCESS}> {\n  return {\n    type: ActionTypes.LOAD_FILE_STEP_SUCCESS,\n    fileName,\n    fileCache\n  };\n}\n\nexport type LoadFilesErrUpdaterAction = {\n  fileName: string;\n  error: any;\n};\n/**\n * Trigger loading file error\n * @memberof visStateActions\n * @param  error\n * @returns action\n * @public\n */\n\nexport function loadFilesErr(\n  fileName: string,\n  error: any\n): Merge<LoadFilesErrUpdaterAction, {type: typeof ActionTypes.LOAD_FILES_ERR}> {\n  return {\n    type: ActionTypes.LOAD_FILES_ERR,\n    fileName,\n    error\n  };\n}\n\nexport type SetFeaturesUpdaterAction = {\n  features: Feature[];\n};\n/**\n * Store features to state\n * @memberof visStateActions\n * @param features\n * @returns action\n */\nexport function setFeatures(\n  features: Feature[]\n): Merge<SetFeaturesUpdaterAction, {type: typeof ActionTypes.SET_FEATURES}> {\n  return {\n    type: ActionTypes.SET_FEATURES,\n    features\n  };\n}\n\nexport type SetPolygonFilterLayerUpdaterAction = {\n  layer: Layer;\n  feature: Feature;\n};\n/**\n * It will apply the provide feature as filter to the given layer.\n * If the given feature is already applied as filter to the layer, it will remove the layer from the filter\n * @memberof visStateActions\n * @param layer\n * @param feature\n * @returns action\n */\nexport function setPolygonFilterLayer(\n  layer: Layer,\n  feature: Feature\n): Merge<SetPolygonFilterLayerUpdaterAction, {type: typeof ActionTypes.SET_POLYGON_FILTER_LAYER}> {\n  return {\n    type: ActionTypes.SET_POLYGON_FILTER_LAYER,\n    layer,\n    feature\n  };\n}\n\nexport type SetSelectedFeatureUpdaterAction = {\n  feature: Feature;\n};\n/**\n * Set the current feature to be edited/deleted\n * @memberof visStateActions\n * @param feature\n * @returns action\n */\nexport function setSelectedFeature(\n  feature: Feature\n): Merge<SetSelectedFeatureUpdaterAction, {type: typeof ActionTypes.SET_SELECTED_FEATURE}> {\n  return {\n    type: ActionTypes.SET_SELECTED_FEATURE,\n    feature\n  };\n}\n\nexport type DeleteFeatureUpdaterAction = {\n  feature: Feature;\n};\n/**\n * Delete the given feature\n * @memberof visStateActions\n * @param feature\n * @returns action\n */\nexport function deleteFeature(\n  feature: Feature\n): Merge<DeleteFeatureUpdaterAction, {type: typeof ActionTypes.DELETE_FEATURE}> {\n  return {\n    type: ActionTypes.DELETE_FEATURE,\n    feature\n  };\n}\n\nexport type SetEditorModeUpdaterAction = {\n  mode: string;\n};\n/** Set the map mode\n * @memberof visStateActions\n * @param mode one of EDITOR_MODES\n * @returns action\n * @public\n * @example\n * import {setMapMode} from 'kepler.gl/actions';\n * import {EDITOR_MODES} from 'kepler.gl/constants';\n *\n * this.props.dispatch(setMapMode(EDITOR_MODES.DRAW_POLYGON));\n */\nexport function setEditorMode(\n  mode: string\n): Merge<SetEditorModeUpdaterAction, {type: typeof ActionTypes.SET_EDITOR_MODE}> {\n  return {\n    type: ActionTypes.SET_EDITOR_MODE,\n    mode\n  };\n}\n\nexport type ApplyCPUFilterUpdaterAction = {\n  dataId: string | string[];\n};\n/**\n * Trigger CPU filter of selected dataset\n * @memberof visStateActions\n * @param dataId - single dataId or an array of dataIds\n * @returns action\n * @public\n */\nexport function applyCPUFilter(\n  dataId: string | string[]\n): Merge<ApplyCPUFilterUpdaterAction, {type: typeof ActionTypes.APPLY_CPU_FILTER}> {\n  return {\n    type: ActionTypes.APPLY_CPU_FILTER,\n    dataId\n  };\n}\n\nexport type ToggleEditorVisibilityUpdaterAction = {};\n/**\n * Toggle editor layer visibility\n * @memberof visStateActions\n * @return action\n */\nexport function toggleEditorVisibility(): Merge<\n  ToggleEditorVisibilityUpdaterAction,\n  {type: typeof ActionTypes.TOGGLE_EDITOR_VISIBILITY}\n> {\n  return {\n    type: ActionTypes.TOGGLE_EDITOR_VISIBILITY\n  };\n}\n\ntype FileContent = {\n  fileName: string;\n  header: string[];\n  data: any;\n};\nexport type NextFileBatchUpdaterAction = {\n  payload: {\n    /* eslint-disable no-undef */\n    gen: AsyncGenerator<FileContent>;\n    fileName: string;\n    progress?: any;\n    accumulated?: any;\n    onFinish: (result: any) => any;\n  };\n};\n/**\n * Process the next file batch\n * @memberof visStateActions\n * @param payload - batch payload\n * @return action\n */\nexport function nextFileBatch(\n  payload: NextFileBatchUpdaterAction['payload']\n): Merge<NextFileBatchUpdaterAction, {type: typeof ActionTypes.NEXT_FILE_BATCH}> {\n  return {\n    type: ActionTypes.NEXT_FILE_BATCH,\n    payload\n  };\n}\n\nexport type ProcessFileContentUpdaterAction = {\n  payload: {\n    content: FileContent;\n    fileCache: FileCacheItem[];\n  };\n};\n/**\n * Process the file content\n * @memberof visStateActions\n * @param payload - the file content\n * @return action\n */\nexport function processFileContent(\n  payload: ProcessFileContentUpdaterAction['payload']\n): Merge<ProcessFileContentUpdaterAction, {type: typeof ActionTypes.PROCESS_FILE_CONTENT}> {\n  return {\n    type: ActionTypes.PROCESS_FILE_CONTENT,\n    payload\n  };\n}\n\nexport type SetLayerAnimationTimeConfigAction = {\n  config: {\n    timezone?: string;\n    timeFormat?: string;\n  };\n};\n/**\n * Set layer animation time format and timezone\n * @memberof visStateActions\n * @param config - {timeFormat: string, timezone: string}\n * @return action\n */\nexport function setLayerAnimationTimeConfig(\n  config: SetLayerAnimationTimeConfigAction['config']\n): Merge<\n  SetLayerAnimationTimeConfigAction,\n  {type: typeof ActionTypes.SET_LAYER_ANIMATION_TIME_CONFIG}\n> {\n  return {\n    type: ActionTypes.SET_LAYER_ANIMATION_TIME_CONFIG,\n    config\n  };\n}\n\nexport type SetFilterAnimationTimeConfigAction = {\n  idx: number;\n  config: {\n    timezone?: string;\n    timeFormat?: string;\n  };\n};\n/**\n * Set Filter animation time format and timezone\n * @memberof visStateActions\n * @param idx\n * @param config\n * @return action\n */\nexport function setFilterAnimationTimeConfig(\n  idx: SetFilterAnimationTimeConfigAction['idx'],\n  config: SetFilterAnimationTimeConfigAction['config']\n): Merge<\n  SetFilterAnimationTimeConfigAction,\n  {type: typeof ActionTypes.SET_FILTER_ANIMATION_TIME_CONFIG}\n> {\n  return {\n    type: ActionTypes.SET_FILTER_ANIMATION_TIME_CONFIG,\n    idx,\n    config\n  };\n}\n\n/**\n * This declaration is needed to group actions in docs\n */\n/**\n * Actions handled mostly by `visState` reducer.\n * They manage how data is processed, filtered and displayed on the map by operates on layers,\n * filters and interaction settings.\n *\n * @public\n */\n/* eslint-disable no-unused-vars */\n// @ts-ignore\nconst visStateActions = null;\n/* eslint-enable no-unused-vars */\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}