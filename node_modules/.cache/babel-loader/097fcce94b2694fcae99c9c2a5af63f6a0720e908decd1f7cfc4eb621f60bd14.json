{"ast":null,"code":"import _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Texture2D, hasFeature, FEATURES, log } from '@luma.gl/webgl';\nvar GLTFMaterialParser = /*#__PURE__*/function () {\n  function GLTFMaterialParser(gl, _ref) {\n    _classCallCheck(this, GLTFMaterialParser);\n    var attributes = _ref.attributes,\n      material = _ref.material,\n      pbrDebug = _ref.pbrDebug,\n      imageBasedLightingEnvironment = _ref.imageBasedLightingEnvironment,\n      lights = _ref.lights,\n      useTangents = _ref.useTangents;\n    this.gl = gl;\n    this.defines = {\n      MANUAL_SRGB: 1,\n      SRGB_FAST_APPROXIMATION: 1\n    };\n    if (hasFeature(gl, FEATURES.GLSL_TEXTURE_LOD)) {\n      this.defines.USE_TEX_LOD = 1;\n    }\n    this.uniforms = {\n      u_Camera: [0, 0, 0],\n      u_MetallicRoughnessValues: [1, 1]\n    };\n    this.parameters = {};\n    this.generatedTextures = [];\n    if (imageBasedLightingEnvironment) {\n      this.uniforms.u_DiffuseEnvSampler = imageBasedLightingEnvironment.getDiffuseEnvSampler();\n      this.uniforms.u_SpecularEnvSampler = imageBasedLightingEnvironment.getSpecularEnvSampler();\n      this.uniforms.u_brdfLUT = imageBasedLightingEnvironment.getBrdfTexture();\n      this.uniforms.u_ScaleIBLAmbient = [1, 1];\n    }\n    if (pbrDebug) {\n      this.uniforms.u_ScaleDiffBaseMR = [0, 0, 0, 0];\n      this.uniforms.u_ScaleFGDSpec = [0, 0, 0, 0];\n    }\n    this.defineIfPresent(attributes.NORMAL, 'HAS_NORMALS');\n    this.defineIfPresent(attributes.TANGENT && useTangents, 'HAS_TANGENTS');\n    this.defineIfPresent(attributes.TEXCOORD_0, 'HAS_UV');\n    this.defineIfPresent(imageBasedLightingEnvironment, 'USE_IBL');\n    this.defineIfPresent(lights, 'USE_LIGHTS');\n    this.defineIfPresent(pbrDebug, 'PBR_DEBUG');\n    if (material) {\n      this.parseMaterial(material);\n    }\n  }\n  _createClass(GLTFMaterialParser, [{\n    key: \"defineIfPresent\",\n    value: function defineIfPresent(value, name) {\n      if (value) {\n        this.defines[name] = 1;\n      }\n    }\n  }, {\n    key: \"parseTexture\",\n    value: function parseTexture(gltfTexture, name) {\n      var define = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var parameters = gltfTexture.texture && gltfTexture.texture.sampler && gltfTexture.texture.sampler.parameters || {};\n      var image = gltfTexture.texture.source.image;\n      var textureOptions;\n      var specialTextureParameters = {};\n      if (image.compressed) {\n        textureOptions = image;\n        specialTextureParameters = _defineProperty({}, this.gl.TEXTURE_MIN_FILTER, image.data.length > 1 ? this.gl.LINEAR_MIPMAP_NEAREST : this.gl.LINEAR);\n      } else {\n        textureOptions = {\n          data: image\n        };\n      }\n      var texture = new Texture2D(this.gl, _objectSpread({\n        id: gltfTexture.name || gltfTexture.id,\n        parameters: _objectSpread(_objectSpread({}, parameters), specialTextureParameters),\n        pixelStore: _defineProperty({}, this.gl.UNPACK_FLIP_Y_WEBGL, false)\n      }, textureOptions));\n      this.uniforms[name] = texture;\n      this.defineIfPresent(define, define);\n      this.generatedTextures.push(texture);\n    }\n  }, {\n    key: \"parsePbrMetallicRoughness\",\n    value: function parsePbrMetallicRoughness(pbrMetallicRoughness) {\n      if (pbrMetallicRoughness.baseColorTexture) {\n        this.parseTexture(pbrMetallicRoughness.baseColorTexture, 'u_BaseColorSampler', 'HAS_BASECOLORMAP');\n      }\n      this.uniforms.u_BaseColorFactor = pbrMetallicRoughness.baseColorFactor || [1, 1, 1, 1];\n      if (pbrMetallicRoughness.metallicRoughnessTexture) {\n        this.parseTexture(pbrMetallicRoughness.metallicRoughnessTexture, 'u_MetallicRoughnessSampler', 'HAS_METALROUGHNESSMAP');\n      }\n      var _pbrMetallicRoughness = pbrMetallicRoughness.metallicFactor,\n        metallicFactor = _pbrMetallicRoughness === void 0 ? 1 : _pbrMetallicRoughness,\n        _pbrMetallicRoughness2 = pbrMetallicRoughness.roughnessFactor,\n        roughnessFactor = _pbrMetallicRoughness2 === void 0 ? 1 : _pbrMetallicRoughness2;\n      this.uniforms.u_MetallicRoughnessValues = [metallicFactor, roughnessFactor];\n    }\n  }, {\n    key: \"parseMaterial\",\n    value: function parseMaterial(material) {\n      this.uniforms.pbr_uUnlit = Boolean(material.unlit);\n      if (material.pbrMetallicRoughness) {\n        this.parsePbrMetallicRoughness(material.pbrMetallicRoughness);\n      }\n      if (material.normalTexture) {\n        this.parseTexture(material.normalTexture, 'u_NormalSampler', 'HAS_NORMALMAP');\n        var _material$normalTextu = material.normalTexture.scale,\n          scale = _material$normalTextu === void 0 ? 1 : _material$normalTextu;\n        this.uniforms.u_NormalScale = scale;\n      }\n      if (material.occlusionTexture) {\n        this.parseTexture(material.occlusionTexture, 'u_OcclusionSampler', 'HAS_OCCLUSIONMAP');\n        var _material$occlusionTe = material.occlusionTexture.strength,\n          strength = _material$occlusionTe === void 0 ? 1 : _material$occlusionTe;\n        this.uniforms.u_OcclusionStrength = strength;\n      }\n      if (material.emissiveTexture) {\n        this.parseTexture(material.emissiveTexture, 'u_EmissiveSampler', 'HAS_EMISSIVEMAP');\n        this.uniforms.u_EmissiveFactor = material.emissiveFactor || [0, 0, 0];\n      }\n      if (material.alphaMode === 'MASK') {\n        var _material$alphaCutoff = material.alphaCutoff,\n          alphaCutoff = _material$alphaCutoff === void 0 ? 0.5 : _material$alphaCutoff;\n        this.defines.ALPHA_CUTOFF = 1;\n        this.uniforms.u_AlphaCutoff = alphaCutoff;\n      } else if (material.alphaMode === 'BLEND') {\n        log.warn('BLEND alphaMode might not work well because it requires mesh sorting')();\n        Object.assign(this.parameters, {\n          blend: true,\n          blendEquation: this.gl.FUNC_ADD,\n          blendFunc: [this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA]\n        });\n      }\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      this.generatedTextures.forEach(function (texture) {\n        return texture.delete();\n      });\n    }\n  }]);\n  return GLTFMaterialParser;\n}();\nexport { GLTFMaterialParser as default };","map":{"version":3,"names":["Texture2D","hasFeature","FEATURES","log","GLTFMaterialParser","gl","_ref","_classCallCheck","attributes","material","pbrDebug","imageBasedLightingEnvironment","lights","useTangents","defines","MANUAL_SRGB","SRGB_FAST_APPROXIMATION","GLSL_TEXTURE_LOD","USE_TEX_LOD","uniforms","u_Camera","u_MetallicRoughnessValues","parameters","generatedTextures","u_DiffuseEnvSampler","getDiffuseEnvSampler","u_SpecularEnvSampler","getSpecularEnvSampler","u_brdfLUT","getBrdfTexture","u_ScaleIBLAmbient","u_ScaleDiffBaseMR","u_ScaleFGDSpec","defineIfPresent","NORMAL","TANGENT","TEXCOORD_0","parseMaterial","_createClass","key","value","name","parseTexture","gltfTexture","define","arguments","length","undefined","texture","sampler","image","source","textureOptions","specialTextureParameters","compressed","_defineProperty","TEXTURE_MIN_FILTER","data","LINEAR_MIPMAP_NEAREST","LINEAR","_objectSpread","id","pixelStore","UNPACK_FLIP_Y_WEBGL","push","parsePbrMetallicRoughness","pbrMetallicRoughness","baseColorTexture","u_BaseColorFactor","baseColorFactor","metallicRoughnessTexture","_pbrMetallicRoughness","metallicFactor","_pbrMetallicRoughness2","roughnessFactor","pbr_uUnlit","Boolean","unlit","normalTexture","_material$normalTextu","scale","u_NormalScale","occlusionTexture","_material$occlusionTe","strength","u_OcclusionStrength","emissiveTexture","u_EmissiveFactor","emissiveFactor","alphaMode","_material$alphaCutoff","alphaCutoff","ALPHA_CUTOFF","u_AlphaCutoff","warn","Object","assign","blend","blendEquation","FUNC_ADD","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","ONE","_delete","forEach","delete","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@luma.gl/experimental/src/gltf/gltf-material-parser.js"],"sourcesContent":["import {Texture2D, hasFeature, FEATURES, log} from '@luma.gl/webgl';\n\nexport default class GLTFMaterialParser {\n  constructor(\n    gl,\n    {attributes, material, pbrDebug, imageBasedLightingEnvironment, lights, useTangents}\n  ) {\n    this.gl = gl;\n\n    this.defines = {\n      // TODO: Use EXT_sRGB if available (Standard in WebGL 2.0)\n      MANUAL_SRGB: 1,\n      SRGB_FAST_APPROXIMATION: 1\n    };\n\n    if (hasFeature(gl, FEATURES.GLSL_TEXTURE_LOD)) {\n      this.defines.USE_TEX_LOD = 1;\n    }\n\n    this.uniforms = {\n      // TODO: find better values?\n      u_Camera: [0, 0, 0], // Model should override\n\n      u_MetallicRoughnessValues: [1, 1] // Default is 1 and 1\n    };\n\n    this.parameters = {};\n    this.generatedTextures = [];\n\n    if (imageBasedLightingEnvironment) {\n      this.uniforms.u_DiffuseEnvSampler = imageBasedLightingEnvironment.getDiffuseEnvSampler();\n      this.uniforms.u_SpecularEnvSampler = imageBasedLightingEnvironment.getSpecularEnvSampler();\n      this.uniforms.u_brdfLUT = imageBasedLightingEnvironment.getBrdfTexture();\n      this.uniforms.u_ScaleIBLAmbient = [1, 1];\n    }\n\n    if (pbrDebug) {\n      // Override final color for reference app visualization\n      // of various parameters in the lighting equation.\n      this.uniforms.u_ScaleDiffBaseMR = [0, 0, 0, 0];\n      this.uniforms.u_ScaleFGDSpec = [0, 0, 0, 0];\n    }\n\n    this.defineIfPresent(attributes.NORMAL, 'HAS_NORMALS');\n    this.defineIfPresent(attributes.TANGENT && useTangents, 'HAS_TANGENTS');\n    this.defineIfPresent(attributes.TEXCOORD_0, 'HAS_UV');\n\n    this.defineIfPresent(imageBasedLightingEnvironment, 'USE_IBL');\n    this.defineIfPresent(lights, 'USE_LIGHTS');\n    this.defineIfPresent(pbrDebug, 'PBR_DEBUG');\n\n    if (material) {\n      this.parseMaterial(material);\n    }\n  }\n\n  defineIfPresent(value, name) {\n    if (value) {\n      this.defines[name] = 1;\n    }\n  }\n\n  parseTexture(gltfTexture, name, define = null) {\n    const parameters =\n      (gltfTexture.texture &&\n        gltfTexture.texture.sampler &&\n        gltfTexture.texture.sampler.parameters) ||\n      {};\n\n    const image = gltfTexture.texture.source.image;\n    let textureOptions;\n    let specialTextureParameters = {};\n    if (image.compressed) {\n      textureOptions = image;\n      specialTextureParameters = {\n        [this.gl.TEXTURE_MIN_FILTER]:\n          image.data.length > 1 ? this.gl.LINEAR_MIPMAP_NEAREST : this.gl.LINEAR\n      };\n    } else {\n      // Texture2D accepts a promise that returns an image as data (Async Textures)\n      textureOptions = {data: image};\n    }\n\n    const texture = new Texture2D(this.gl, {\n      id: gltfTexture.name || gltfTexture.id,\n      parameters: {\n        ...parameters,\n        ...specialTextureParameters\n      },\n      pixelStore: {\n        [this.gl.UNPACK_FLIP_Y_WEBGL]: false\n      },\n      ...textureOptions\n    });\n    this.uniforms[name] = texture;\n    this.defineIfPresent(define, define);\n    this.generatedTextures.push(texture);\n  }\n\n  parsePbrMetallicRoughness(pbrMetallicRoughness) {\n    if (pbrMetallicRoughness.baseColorTexture) {\n      this.parseTexture(\n        pbrMetallicRoughness.baseColorTexture,\n        'u_BaseColorSampler',\n        'HAS_BASECOLORMAP'\n      );\n    }\n    this.uniforms.u_BaseColorFactor = pbrMetallicRoughness.baseColorFactor || [1, 1, 1, 1];\n\n    if (pbrMetallicRoughness.metallicRoughnessTexture) {\n      this.parseTexture(\n        pbrMetallicRoughness.metallicRoughnessTexture,\n        'u_MetallicRoughnessSampler',\n        'HAS_METALROUGHNESSMAP'\n      );\n    }\n    const {metallicFactor = 1, roughnessFactor = 1} = pbrMetallicRoughness;\n    this.uniforms.u_MetallicRoughnessValues = [metallicFactor, roughnessFactor];\n  }\n\n  parseMaterial(material) {\n    this.uniforms.pbr_uUnlit = Boolean(material.unlit);\n\n    if (material.pbrMetallicRoughness) {\n      this.parsePbrMetallicRoughness(material.pbrMetallicRoughness);\n    }\n    if (material.normalTexture) {\n      this.parseTexture(material.normalTexture, 'u_NormalSampler', 'HAS_NORMALMAP');\n\n      const {scale = 1} = material.normalTexture;\n      this.uniforms.u_NormalScale = scale;\n    }\n    if (material.occlusionTexture) {\n      this.parseTexture(material.occlusionTexture, 'u_OcclusionSampler', 'HAS_OCCLUSIONMAP');\n\n      const {strength = 1} = material.occlusionTexture;\n      this.uniforms.u_OcclusionStrength = strength;\n    }\n    if (material.emissiveTexture) {\n      this.parseTexture(material.emissiveTexture, 'u_EmissiveSampler', 'HAS_EMISSIVEMAP');\n      this.uniforms.u_EmissiveFactor = material.emissiveFactor || [0, 0, 0];\n    }\n    if (material.alphaMode === 'MASK') {\n      const {alphaCutoff = 0.5} = material;\n      this.defines.ALPHA_CUTOFF = 1;\n      this.uniforms.u_AlphaCutoff = alphaCutoff;\n    } else if (material.alphaMode === 'BLEND') {\n      log.warn('BLEND alphaMode might not work well because it requires mesh sorting')();\n      Object.assign(this.parameters, {\n        blend: true,\n        blendEquation: this.gl.FUNC_ADD,\n        blendFunc: [\n          this.gl.SRC_ALPHA,\n          this.gl.ONE_MINUS_SRC_ALPHA,\n          this.gl.ONE,\n          this.gl.ONE_MINUS_SRC_ALPHA\n        ]\n      });\n    }\n  }\n\n  /**\n   * Destroy all generated resources to release memory.\n   */\n  delete() {\n    this.generatedTextures.forEach(texture => texture.delete());\n  }\n}\n"],"mappings":";;;;AAAA,SAAQA,SAAR,EAAmBC,UAAnB,EAA+BC,QAA/B,EAAyCC,GAAzC,QAAmD,gBAAnD;AAAA,IAEqBC,kBAAN;EACb,SAAAA,mBACEC,EADS,EAAAC,IAAA,EAGT;IAAAC,eAAA,OAAAH,kBAAA;IAAA,IADCI,UAAD,GACAF,IAAA,CADCE,UAAD;MAAaC,QAAb,GACAH,IAAA,CADaG,QAAb;MAAuBC,QAAvB,GACAJ,IAAA,CADuBI,QAAvB;MAAiCC,6BAAjC,GACAL,IAAA,CADiCK,6BAAjC;MAAgEC,MAAhE,GACAN,IAAA,CADgEM,MAAhE;MAAwEC,WAAA,GACxEP,IAAA,CADwEO,WAAA;IAExE,KAAKR,EAAL,GAAUA,EAAV;IAEA,KAAKS,OAAL,GAAe;MAEbC,WAAW,EAAE,CAFA;MAGbC,uBAAuB,EAAE;IAHZ,CAAf;IAMA,IAAIf,UAAU,CAACI,EAAD,EAAKH,QAAQ,CAACe,gBAAd,CAAd,EAA+C;MAC7C,KAAKH,OAAL,CAAaI,WAAb,GAA2B,CAA3B;IACD;IAED,KAAKC,QAAL,GAAgB;MAEdC,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFI;MAIdC,yBAAyB,EAAE,CAAC,CAAD,EAAI,CAAJ;IAJb,CAAhB;IAOA,KAAKC,UAAL,GAAkB,EAAlB;IACA,KAAKC,iBAAL,GAAyB,EAAzB;IAEA,IAAIZ,6BAAJ,EAAmC;MACjC,KAAKQ,QAAL,CAAcK,mBAAd,GAAoCb,6BAA6B,CAACc,oBAA9B,EAApC;MACA,KAAKN,QAAL,CAAcO,oBAAd,GAAqCf,6BAA6B,CAACgB,qBAA9B,EAArC;MACA,KAAKR,QAAL,CAAcS,SAAd,GAA0BjB,6BAA6B,CAACkB,cAA9B,EAA1B;MACA,KAAKV,QAAL,CAAcW,iBAAd,GAAkC,CAAC,CAAD,EAAI,CAAJ,CAAlC;IACD;IAED,IAAIpB,QAAJ,EAAc;MAGZ,KAAKS,QAAL,CAAcY,iBAAd,GAAkC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAlC;MACA,KAAKZ,QAAL,CAAca,cAAd,GAA+B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAA/B;IACD;IAED,KAAKC,eAAL,CAAqBzB,UAAU,CAAC0B,MAAhC,EAAwC,aAAxC;IACA,KAAKD,eAAL,CAAqBzB,UAAU,CAAC2B,OAAX,IAAsBtB,WAA3C,EAAwD,cAAxD;IACA,KAAKoB,eAAL,CAAqBzB,UAAU,CAAC4B,UAAhC,EAA4C,QAA5C;IAEA,KAAKH,eAAL,CAAqBtB,6BAArB,EAAoD,SAApD;IACA,KAAKsB,eAAL,CAAqBrB,MAArB,EAA6B,YAA7B;IACA,KAAKqB,eAAL,CAAqBvB,QAArB,EAA+B,WAA/B;IAEA,IAAID,QAAJ,EAAc;MACZ,KAAK4B,aAAL,CAAmB5B,QAAnB;IACD;EACF;EAAA6B,YAAA,CAAAlC,kBAAA;IAAAmC,GAAA;IAAAC,KAAA,EAED,SAAAP,gBAAgBO,KAAD,EAAQC,IAAR,EAAc;MAC3B,IAAID,KAAJ,EAAW;QACT,KAAK1B,OAAL,CAAa2B,IAAb,IAAqB,CAArB;MACD;IACF;EAAA;IAAAF,GAAA;IAAAC,KAAA,EAED,SAAAE,aAAaC,WAAD,EAAcF,IAAd,EAAmC;MAAA,IAAfG,MAAe,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAN,IAAM;MAC7C,IAAMvB,UAAU,GACbqB,WAAW,CAACK,OAAZ,IACCL,WAAW,CAACK,OAAZ,CAAoBC,OADrB,IAECN,WAAW,CAACK,OAAZ,CAAoBC,OAApB,CAA4B3B,UAF9B,IAGA,EAJF;MAMA,IAAM4B,KAAK,GAAGP,WAAW,CAACK,OAAZ,CAAoBG,MAApB,CAA2BD,KAAzC;MACA,IAAIE,cAAJ;MACA,IAAIC,wBAAwB,GAAG,EAA/B;MACA,IAAIH,KAAK,CAACI,UAAV,EAAsB;QACpBF,cAAc,GAAGF,KAAjB;QACAG,wBAAwB,GAAAE,eAAA,KACrB,KAAKlD,EAAL,CAAQmD,kBAAT,EACEN,KAAK,CAACO,IAAN,CAAWX,MAAX,GAAoB,CAApB,GAAwB,KAAKzC,EAAL,CAAQqD,qBAAhC,GAAwD,KAAKrD,EAAL,CAAQsD,MAAA,CAFpE;MAID,CAND,MAMO;QAELP,cAAc,GAAG;UAACK,IAAI,EAAEP;QAAP,CAAjB;MACD;MAED,IAAMF,OAAO,GAAG,IAAIhD,SAAJ,CAAc,KAAKK,EAAnB,EAAAuD,aAAA;QACdC,EAAE,EAAElB,WAAW,CAACF,IAAZ,IAAoBE,WAAW,CAACkB,EADC;QAErCvC,UAAU,EAAAsC,aAAA,CAAAA,aAAA,KACLtC,UADO,GAEP+B,wBAAA,CAJgC;QAMrCS,UAAU,EAAAP,eAAA,KACP,KAAKlD,EAAL,CAAQ0D,mBAAT,EAA+B;MAPI,GASlCX,cAAA,EATL;MAWA,KAAKjC,QAAL,CAAcsB,IAAd,IAAsBO,OAAtB;MACA,KAAKf,eAAL,CAAqBW,MAArB,EAA6BA,MAA7B;MACA,KAAKrB,iBAAL,CAAuByC,IAAvB,CAA4BhB,OAA5B;IACD;EAAA;IAAAT,GAAA;IAAAC,KAAA,EAED,SAAAyB,0BAA0BC,oBAAD,EAAuB;MAC9C,IAAIA,oBAAoB,CAACC,gBAAzB,EAA2C;QACzC,KAAKzB,YAAL,CACEwB,oBAAoB,CAACC,gBADvB,EAEE,oBAFF,EAGE,kBAHF;MAKD;MACD,KAAKhD,QAAL,CAAciD,iBAAd,GAAkCF,oBAAoB,CAACG,eAArB,IAAwC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAA1E;MAEA,IAAIH,oBAAoB,CAACI,wBAAzB,EAAmD;QACjD,KAAK5B,YAAL,CACEwB,oBAAoB,CAACI,wBADvB,EAEE,4BAFF,EAGE,uBAHF;MAKD;MACD,IAAAC,qBAAA,GAAkDL,oBAAlD,CAAOM,cAAc;QAAdA,cAAc,GAAAD,qBAAA,cAAG,CAAlB,GAAAA,qBAAA;QAAAE,sBAAA,GAA4CP,oBAAlD,CAA2BQ,eAAe;QAAfA,eAAe,GAAAD,sBAAA,cAAG,IAAAA,sBAAA;MAC7C,KAAKtD,QAAL,CAAcE,yBAAd,GAA0C,CAACmD,cAAD,EAAiBE,eAAjB,CAA1C;IACD;EAAA;IAAAnC,GAAA;IAAAC,KAAA,EAED,SAAAH,cAAc5B,QAAD,EAAW;MACtB,KAAKU,QAAL,CAAcwD,UAAd,GAA2BC,OAAO,CAACnE,QAAQ,CAACoE,KAAV,CAAlC;MAEA,IAAIpE,QAAQ,CAACyD,oBAAb,EAAmC;QACjC,KAAKD,yBAAL,CAA+BxD,QAAQ,CAACyD,oBAAxC;MACD;MACD,IAAIzD,QAAQ,CAACqE,aAAb,EAA4B;QAC1B,KAAKpC,YAAL,CAAkBjC,QAAQ,CAACqE,aAA3B,EAA0C,iBAA1C,EAA6D,eAA7D;QAEA,IAAAC,qBAAA,GAAoBtE,QAAQ,CAACqE,aAA7B,CAAOE,KAAK;UAALA,KAAK,GAAAD,qBAAA,cAAG,IAAAA,qBAAA;QACf,KAAK5D,QAAL,CAAc8D,aAAd,GAA8BD,KAA9B;MACD;MACD,IAAIvE,QAAQ,CAACyE,gBAAb,EAA+B;QAC7B,KAAKxC,YAAL,CAAkBjC,QAAQ,CAACyE,gBAA3B,EAA6C,oBAA7C,EAAmE,kBAAnE;QAEA,IAAAC,qBAAA,GAAuB1E,QAAQ,CAACyE,gBAAhC,CAAOE,QAAQ;UAARA,QAAQ,GAAAD,qBAAA,cAAG,IAAAA,qBAAA;QAClB,KAAKhE,QAAL,CAAckE,mBAAd,GAAoCD,QAApC;MACD;MACD,IAAI3E,QAAQ,CAAC6E,eAAb,EAA8B;QAC5B,KAAK5C,YAAL,CAAkBjC,QAAQ,CAAC6E,eAA3B,EAA4C,mBAA5C,EAAiE,iBAAjE;QACA,KAAKnE,QAAL,CAAcoE,gBAAd,GAAiC9E,QAAQ,CAAC+E,cAAT,IAA2B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA5D;MACD;MACD,IAAI/E,QAAQ,CAACgF,SAAT,KAAuB,MAA3B,EAAmC;QACjC,IAAAC,qBAAA,GAA4BjF,QAA5B,CAAOkF,WAAW;UAAXA,WAAW,GAAAD,qBAAA,cAAG,MAAAA,qBAAA;QACrB,KAAK5E,OAAL,CAAa8E,YAAb,GAA4B,CAA5B;QACA,KAAKzE,QAAL,CAAc0E,aAAd,GAA8BF,WAA9B;MACD,CAJD,MAIO,IAAIlF,QAAQ,CAACgF,SAAT,KAAuB,OAA3B,EAAoC;QACzCtF,GAAG,CAAC2F,IAAJ,CAAS,sEAAT;QACAC,MAAM,CAACC,MAAP,CAAc,KAAK1E,UAAnB,EAA+B;UAC7B2E,KAAK,EAAE,IADsB;UAE7BC,aAAa,EAAE,KAAK7F,EAAL,CAAQ8F,QAFM;UAG7BC,SAAS,EAAE,CACT,KAAK/F,EAAL,CAAQgG,SADC,EAET,KAAKhG,EAAL,CAAQiG,mBAFC,EAGT,KAAKjG,EAAL,CAAQkG,GAHC,EAIT,KAAKlG,EAAL,CAAQiG,mBAJC;QAHkB,CAA/B;MAUD;IACF;EAAA;IAAA/D,GAAA;IAAAC,KAAA,EAKD,SAAAgE,QAAA,EAAS;MACP,KAAKjF,iBAAL,CAAuBkF,OAAvB,CAA+B,UAAAzD,OAAO;QAAA,OAAIA,OAAO,CAAC0D,MAAR,EAA1C;MAAA;IACD;EAAA;EAAA,OAAAtG,kBAAA;AAAA;AAAA,SApKkBA,kBAAN,IAAAuG,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}