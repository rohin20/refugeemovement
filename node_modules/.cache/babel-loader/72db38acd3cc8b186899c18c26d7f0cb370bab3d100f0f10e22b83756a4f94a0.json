{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as KHR_binary_glTF from '../extensions/KHR_binary_gltf';\nvar GLTF_ARRAYS = {\n  accessors: 'accessor',\n  animations: 'animation',\n  buffers: 'buffer',\n  bufferViews: 'bufferView',\n  images: 'image',\n  materials: 'material',\n  meshes: 'mesh',\n  nodes: 'node',\n  samplers: 'sampler',\n  scenes: 'scene',\n  skins: 'skin',\n  textures: 'texture'\n};\nvar GLTF_KEYS = {\n  accessor: 'accessors',\n  animations: 'animation',\n  buffer: 'buffers',\n  bufferView: 'bufferViews',\n  image: 'images',\n  material: 'materials',\n  mesh: 'meshes',\n  node: 'nodes',\n  sampler: 'samplers',\n  scene: 'scenes',\n  skin: 'skins',\n  texture: 'textures'\n};\nvar GLTFV1Normalizer = /*#__PURE__*/function () {\n  function GLTFV1Normalizer() {\n    _classCallCheck(this, GLTFV1Normalizer);\n    _defineProperty(this, \"idToIndexMap\", {\n      animations: {},\n      accessors: {},\n      buffers: {},\n      bufferViews: {},\n      images: {},\n      materials: {},\n      meshes: {},\n      nodes: {},\n      samplers: {},\n      scenes: {},\n      skins: {},\n      textures: {}\n    });\n    _defineProperty(this, \"json\", void 0);\n  }\n  _createClass(GLTFV1Normalizer, [{\n    key: \"normalize\",\n    value: function normalize(gltf, options) {\n      this.json = gltf.json;\n      var json = gltf.json;\n      switch (json.asset && json.asset.version) {\n        case '2.0':\n          return;\n        case undefined:\n        case '1.0':\n          break;\n        default:\n          console.warn(\"glTF: Unknown version \".concat(json.asset.version));\n          return;\n      }\n      if (!options.normalize) {\n        throw new Error('glTF v1 is not supported.');\n      }\n      console.warn('Converting glTF v1 to glTF v2 format. This is experimental and may fail.');\n      this._addAsset(json);\n      this._convertTopLevelObjectsToArrays(json);\n      KHR_binary_glTF.preprocess(gltf);\n      this._convertObjectIdsToArrayIndices(json);\n      this._updateObjects(json);\n      this._updateMaterial(json);\n    }\n  }, {\n    key: \"_addAsset\",\n    value: function _addAsset(json) {\n      json.asset = json.asset || {};\n      json.asset.version = '2.0';\n      json.asset.generator = json.asset.generator || 'Normalized to glTF 2.0 by loaders.gl';\n    }\n  }, {\n    key: \"_convertTopLevelObjectsToArrays\",\n    value: function _convertTopLevelObjectsToArrays(json) {\n      for (var arrayName in GLTF_ARRAYS) {\n        this._convertTopLevelObjectToArray(json, arrayName);\n      }\n    }\n  }, {\n    key: \"_convertTopLevelObjectToArray\",\n    value: function _convertTopLevelObjectToArray(json, mapName) {\n      var objectMap = json[mapName];\n      if (!objectMap || Array.isArray(objectMap)) {\n        return;\n      }\n      json[mapName] = [];\n      for (var id in objectMap) {\n        var object = objectMap[id];\n        object.id = object.id || id;\n        var index = json[mapName].length;\n        json[mapName].push(object);\n        this.idToIndexMap[mapName][id] = index;\n      }\n    }\n  }, {\n    key: \"_convertObjectIdsToArrayIndices\",\n    value: function _convertObjectIdsToArrayIndices(json) {\n      for (var arrayName in GLTF_ARRAYS) {\n        this._convertIdsToIndices(json, arrayName);\n      }\n      if ('scene' in json) {\n        json.scene = this._convertIdToIndex(json.scene, 'scene');\n      }\n      var _iterator = _createForOfIteratorHelper(json.textures),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var texture = _step.value;\n          this._convertTextureIds(texture);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var _iterator2 = _createForOfIteratorHelper(json.meshes),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var mesh = _step2.value;\n          this._convertMeshIds(mesh);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      var _iterator3 = _createForOfIteratorHelper(json.nodes),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var node = _step3.value;\n          this._convertNodeIds(node);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      var _iterator4 = _createForOfIteratorHelper(json.scenes),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _node = _step4.value;\n          this._convertSceneIds(_node);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"_convertTextureIds\",\n    value: function _convertTextureIds(texture) {\n      if (texture.source) {\n        texture.source = this._convertIdToIndex(texture.source, 'image');\n      }\n    }\n  }, {\n    key: \"_convertMeshIds\",\n    value: function _convertMeshIds(mesh) {\n      var _iterator5 = _createForOfIteratorHelper(mesh.primitives),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var primitive = _step5.value;\n          var attributes = primitive.attributes,\n            indices = primitive.indices,\n            material = primitive.material;\n          for (var attributeName in attributes) {\n            attributes[attributeName] = this._convertIdToIndex(attributes[attributeName], 'accessor');\n          }\n          if (indices) {\n            primitive.indices = this._convertIdToIndex(indices, 'accessor');\n          }\n          if (material) {\n            primitive.material = this._convertIdToIndex(material, 'material');\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, {\n    key: \"_convertNodeIds\",\n    value: function _convertNodeIds(node) {\n      var _this = this;\n      if (node.children) {\n        node.children = node.children.map(function (child) {\n          return _this._convertIdToIndex(child, 'node');\n        });\n      }\n      if (node.meshes) {\n        node.meshes = node.meshes.map(function (mesh) {\n          return _this._convertIdToIndex(mesh, 'mesh');\n        });\n      }\n    }\n  }, {\n    key: \"_convertSceneIds\",\n    value: function _convertSceneIds(scene) {\n      var _this2 = this;\n      if (scene.nodes) {\n        scene.nodes = scene.nodes.map(function (node) {\n          return _this2._convertIdToIndex(node, 'node');\n        });\n      }\n    }\n  }, {\n    key: \"_convertIdsToIndices\",\n    value: function _convertIdsToIndices(json, topLevelArrayName) {\n      if (!json[topLevelArrayName]) {\n        console.warn(\"gltf v1: json doesn't contain attribute \".concat(topLevelArrayName));\n        json[topLevelArrayName] = [];\n      }\n      var _iterator6 = _createForOfIteratorHelper(json[topLevelArrayName]),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var object = _step6.value;\n          for (var key in object) {\n            var id = object[key];\n            var index = this._convertIdToIndex(id, key);\n            object[key] = index;\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }, {\n    key: \"_convertIdToIndex\",\n    value: function _convertIdToIndex(id, key) {\n      var arrayName = GLTF_KEYS[key];\n      if (arrayName in this.idToIndexMap) {\n        var index = this.idToIndexMap[arrayName][id];\n        if (!Number.isFinite(index)) {\n          throw new Error(\"gltf v1: failed to resolve \".concat(key, \" with id \").concat(id));\n        }\n        return index;\n      }\n      return id;\n    }\n  }, {\n    key: \"_updateObjects\",\n    value: function _updateObjects(json) {\n      var _iterator7 = _createForOfIteratorHelper(this.json.buffers),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var buffer = _step7.value;\n          delete buffer.type;\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n    }\n  }, {\n    key: \"_updateMaterial\",\n    value: function _updateMaterial(json) {\n      var _iterator8 = _createForOfIteratorHelper(json.materials),\n        _step8;\n      try {\n        var _loop = function _loop() {\n          var material = _step8.value;\n          material.pbrMetallicRoughness = {\n            baseColorFactor: [1, 1, 1, 1],\n            metallicFactor: 1,\n            roughnessFactor: 1\n          };\n          var textureId = ((_material$values = material.values) === null || _material$values === void 0 ? void 0 : _material$values.tex) || ((_material$values2 = material.values) === null || _material$values2 === void 0 ? void 0 : _material$values2.texture2d_0) || ((_material$values3 = material.values) === null || _material$values3 === void 0 ? void 0 : _material$values3.diffuseTex);\n          var textureIndex = json.textures.findIndex(function (texture) {\n            return texture.id === textureId;\n          });\n          if (textureIndex !== -1) {\n            material.pbrMetallicRoughness.baseColorTexture = {\n              index: textureIndex\n            };\n          }\n        };\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var _material$values, _material$values2, _material$values3;\n          _loop();\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n  }]);\n  return GLTFV1Normalizer;\n}();\nexport function normalizeGLTFV1(gltf) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new GLTFV1Normalizer().normalize(gltf, options);\n}","map":{"version":3,"names":["KHR_binary_glTF","GLTF_ARRAYS","accessors","animations","buffers","bufferViews","images","materials","meshes","nodes","samplers","scenes","skins","textures","GLTF_KEYS","accessor","buffer","bufferView","image","material","mesh","node","sampler","scene","skin","texture","GLTFV1Normalizer","_classCallCheck","_defineProperty","_createClass","key","value","normalize","gltf","options","json","asset","version","undefined","console","warn","concat","Error","_addAsset","_convertTopLevelObjectsToArrays","preprocess","_convertObjectIdsToArrayIndices","_updateObjects","_updateMaterial","generator","arrayName","_convertTopLevelObjectToArray","mapName","objectMap","Array","isArray","id","object","index","length","push","idToIndexMap","_convertIdsToIndices","_convertIdToIndex","_iterator","_createForOfIteratorHelper","_step","s","n","done","_convertTextureIds","err","e","f","_iterator2","_step2","_convertMeshIds","_iterator3","_step3","_convertNodeIds","_iterator4","_step4","_convertSceneIds","source","_iterator5","primitives","_step5","primitive","attributes","indices","attributeName","_this","children","map","child","_this2","topLevelArrayName","_iterator6","_step6","Number","isFinite","_iterator7","_step7","type","_iterator8","_step8","_loop","pbrMetallicRoughness","baseColorFactor","metallicFactor","roughnessFactor","textureId","_material$values","values","tex","_material$values2","texture2d_0","_material$values3","diffuseTex","textureIndex","findIndex","baseColorTexture","normalizeGLTFV1","arguments"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/gltf/src/lib/api/normalize-gltf-v1.ts"],"sourcesContent":["/* eslint-disable camelcase */\nimport * as KHR_binary_glTF from '../extensions/KHR_binary_gltf';\n\n// Binary format changes (mainly implemented by GLBLoader)\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/1.0/Khronos/KHR_binary_glTF\n\n// JSON format changes:\n// https://github.com/khronosgroup/gltf/issues/605\n\n// - [x] Top-level JSON objects are arrays now\n// - [ ] Removed indirection from animation: sampler now refers directly to accessors, #712\n// - [ ] material.parameter.value and technique.parameter.value must be an array, #690\n// - [ ] Node can have only one mesh #821\n// - [ ] Added reqs on JSON encoding\n// - [ ] Added reqs on binary data alignment #802 (comment)\n\n// Additions:\n// - [ ] Added accessor.normalized, #691, #706\n// - [ ] Added glExtensionsUsed property and 5125 (UNSIGNED_INT) accessor.componentType value, #619\n// - [ ] Added extensionsRequired property, #720, #721\n// - [ ] Added \"STEP\" as valid animation.sampler.interpolation value, #712\n\n// Removals:\n// - [x] Removed buffer.type, #786, #629\n// - [ ] Removed revision number from profile.version, #709\n// - [ ] Removed technique.functions.scissor and removed 3089 (SCISSOR_TEST) as a valid value for technique.states.enable, #681\n// - [ ] Techniques, programs, and shaders were moved out to KHR_technique_webgl extension.\n\n// Other edits:\n// - [x] asset is now required, #642\n// - [ ] buffer.byteLength and bufferView.byteLength are now required, #560.\n// - [ ] accessor.min and accessor.max are now required, #593, and clarified that the JSON value and binary data must be the same, #628.\n// - [ ] Clarified animation.sampler and animation.channel restrictions, #712\n// - [ ] skin.inverseBindMatrices is now optional, #461.\n// - [ ] Attribute parameters can't have a value defined in the technique or parameter, #563 (comment).\n// - [ ] Only TEXCOORD and COLOR attribute semantics can be written in the form [semantic]_[set_index], #563 (comment).\n// - [ ] TEXCOORD and COLOR attribute semantics must be written in the form [semantic]_[set_index], e.g., just TEXCOORD should be TEXCOORD_0, and just COLOR should be COLOR_0, #649\n// - [ ] camera.perspective.aspectRatio and camera.perspective.yfov must now be > 0, not >= 0, #563 (comment).\n// - [ ] Application-specific parameter semantics must start with an underscore, e.g., _TEMPERATURE and _SIMULATION_TIME, #563 (comment).\n// - [ ] Properties in technique.parameters must be defined in technique.uniforms or technique.attributes,\n\n// #563 (comment).\n// - [ ] technique.parameter.count can only be defined when the semantic is JOINTMATRIX or an application-specific semantic is used. It can never be defined for attribute parameters; only uniforms, d2f6945\n// - [ ] technique.parameter.semantic is required when the parameter is an attribute, 28e113d\n// - [ ] Mesh-only models are allowed, e.g., without materials, #642\n// - [ ] Skeleton hierarchies (nodes containing jointName) must be separated from non-skeleton hierarchies., #647\n// - [ ] technique.states.functions.blendColor and technique.states.functions.depthRange parameters now must match WebGL function min/max, #707\n\nconst GLTF_ARRAYS = {\n  accessors: 'accessor',\n  animations: 'animation',\n  buffers: 'buffer',\n  bufferViews: 'bufferView',\n  images: 'image',\n  materials: 'material',\n  meshes: 'mesh',\n  nodes: 'node',\n  samplers: 'sampler',\n  scenes: 'scene',\n  skins: 'skin',\n  textures: 'texture'\n};\n\nconst GLTF_KEYS = {\n  accessor: 'accessors',\n  animations: 'animation',\n  buffer: 'buffers',\n  bufferView: 'bufferViews',\n  image: 'images',\n  material: 'materials',\n  mesh: 'meshes',\n  node: 'nodes',\n  sampler: 'samplers',\n  scene: 'scenes',\n  skin: 'skins',\n  texture: 'textures'\n};\n\n/**\n * Converts (normalizes) glTF v1 to v2\n */\nclass GLTFV1Normalizer {\n  idToIndexMap = {\n    animations: {},\n    accessors: {},\n    buffers: {},\n    bufferViews: {},\n    images: {},\n    materials: {},\n    meshes: {},\n    nodes: {},\n    samplers: {},\n    scenes: {},\n    skins: {},\n    textures: {}\n  };\n\n  json;\n\n  // constructor() {}\n\n  /**\n   * Convert (normalize) glTF < 2.0 to glTF 2.0\n   * @param gltf - object with json and binChunks\n   * @param options\n   * @param options normalize Whether to actually normalize\n   */\n  normalize(gltf, options) {\n    this.json = gltf.json;\n    const json = gltf.json;\n\n    // Check version\n    switch (json.asset && json.asset.version) {\n      // We are converting to v2 format. Return if there is nothing to do\n      case '2.0':\n        return;\n\n      // This class is written to convert 1.0\n      case undefined:\n      case '1.0':\n        break;\n\n      default:\n        // eslint-disable-next-line no-undef, no-console\n        console.warn(`glTF: Unknown version ${json.asset.version}`);\n        return;\n    }\n\n    if (!options.normalize) {\n      // We are still missing a few conversion tricks, remove once addressed\n      throw new Error('glTF v1 is not supported.');\n    }\n\n    // eslint-disable-next-line no-undef, no-console\n    console.warn('Converting glTF v1 to glTF v2 format. This is experimental and may fail.');\n\n    this._addAsset(json);\n\n    // In glTF2 top-level fields are Arrays not Object maps\n    this._convertTopLevelObjectsToArrays(json);\n\n    // Extract bufferView indices for images\n    // (this extension needs to be invoked early in the normalization process)\n    // TODO can this be handled by standard extension processing instead of called explicitly?\n    KHR_binary_glTF.preprocess(gltf);\n\n    // Convert object references from ids to indices\n    this._convertObjectIdsToArrayIndices(json);\n\n    this._updateObjects(json);\n\n    this._updateMaterial(json);\n  }\n\n  // asset is now required, #642 https://github.com/KhronosGroup/glTF/issues/639\n  _addAsset(json) {\n    json.asset = json.asset || {};\n    // We are normalizing to glTF v2, so change version to \"2.0\"\n    json.asset.version = '2.0';\n    json.asset.generator = json.asset.generator || 'Normalized to glTF 2.0 by loaders.gl';\n  }\n\n  _convertTopLevelObjectsToArrays(json) {\n    // TODO check that all arrays are covered\n    for (const arrayName in GLTF_ARRAYS) {\n      this._convertTopLevelObjectToArray(json, arrayName);\n    }\n  }\n\n  /** Convert one top level object to array */\n  _convertTopLevelObjectToArray(json, mapName) {\n    const objectMap = json[mapName];\n    if (!objectMap || Array.isArray(objectMap)) {\n      return;\n    }\n\n    // Rewrite the top-level field as an array\n    json[mapName] = [];\n    // Copy the map key into object.id\n    for (const id in objectMap) {\n      const object = objectMap[id];\n      object.id = object.id || id; // Mutates the loaded object\n      const index = json[mapName].length;\n      json[mapName].push(object);\n      this.idToIndexMap[mapName][id] = index;\n    }\n  }\n\n  /** Go through all objects in all top-level arrays and replace ids with indices */\n  _convertObjectIdsToArrayIndices(json) {\n    for (const arrayName in GLTF_ARRAYS) {\n      this._convertIdsToIndices(json, arrayName);\n    }\n    if ('scene' in json) {\n      json.scene = this._convertIdToIndex(json.scene, 'scene');\n    }\n\n    // Convert any index references that are not using array names\n\n    // texture.source (image)\n    for (const texture of json.textures) {\n      this._convertTextureIds(texture);\n    }\n    for (const mesh of json.meshes) {\n      this._convertMeshIds(mesh);\n    }\n    for (const node of json.nodes) {\n      this._convertNodeIds(node);\n    }\n    for (const node of json.scenes) {\n      this._convertSceneIds(node);\n    }\n  }\n\n  _convertTextureIds(texture) {\n    if (texture.source) {\n      texture.source = this._convertIdToIndex(texture.source, 'image');\n    }\n  }\n\n  _convertMeshIds(mesh) {\n    for (const primitive of mesh.primitives) {\n      const {attributes, indices, material} = primitive;\n      for (const attributeName in attributes) {\n        attributes[attributeName] = this._convertIdToIndex(attributes[attributeName], 'accessor');\n      }\n      if (indices) {\n        primitive.indices = this._convertIdToIndex(indices, 'accessor');\n      }\n      if (material) {\n        primitive.material = this._convertIdToIndex(material, 'material');\n      }\n    }\n  }\n\n  _convertNodeIds(node) {\n    if (node.children) {\n      node.children = node.children.map((child) => this._convertIdToIndex(child, 'node'));\n    }\n    if (node.meshes) {\n      node.meshes = node.meshes.map((mesh) => this._convertIdToIndex(mesh, 'mesh'));\n    }\n  }\n\n  _convertSceneIds(scene) {\n    if (scene.nodes) {\n      scene.nodes = scene.nodes.map((node) => this._convertIdToIndex(node, 'node'));\n    }\n  }\n\n  /** Go through all objects in a top-level array and replace ids with indices */\n  _convertIdsToIndices(json, topLevelArrayName) {\n    if (!json[topLevelArrayName]) {\n      console.warn(`gltf v1: json doesn't contain attribute ${topLevelArrayName}`); // eslint-disable-line no-console, no-undef\n      json[topLevelArrayName] = [];\n    }\n    for (const object of json[topLevelArrayName]) {\n      for (const key in object) {\n        const id = object[key];\n        const index = this._convertIdToIndex(id, key);\n        object[key] = index;\n      }\n    }\n  }\n\n  _convertIdToIndex(id, key) {\n    const arrayName = GLTF_KEYS[key];\n    if (arrayName in this.idToIndexMap) {\n      const index = this.idToIndexMap[arrayName][id];\n      if (!Number.isFinite(index)) {\n        throw new Error(`gltf v1: failed to resolve ${key} with id ${id}`);\n      }\n      return index;\n    }\n    return id;\n  }\n\n  /**\n   *\n   * @param {*} json\n   */\n  _updateObjects(json) {\n    for (const buffer of this.json.buffers) {\n      // - [x] Removed buffer.type, #786, #629\n      delete buffer.type;\n    }\n  }\n\n  /**\n   * Update material (set pbrMetallicRoughness)\n   * @param {*} json\n   */\n  _updateMaterial(json) {\n    for (const material of json.materials) {\n      material.pbrMetallicRoughness = {\n        baseColorFactor: [1, 1, 1, 1],\n        metallicFactor: 1,\n        roughnessFactor: 1\n      };\n\n      const textureId =\n        material.values?.tex || material.values?.texture2d_0 || material.values?.diffuseTex;\n      const textureIndex = json.textures.findIndex((texture) => texture.id === textureId);\n      if (textureIndex !== -1) {\n        material.pbrMetallicRoughness.baseColorTexture = {index: textureIndex};\n      }\n    }\n  }\n}\n\nexport function normalizeGLTFV1(gltf, options = {}) {\n  return new GLTFV1Normalizer().normalize(gltf, options);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}