{"ast":null,"code":"import { isResponse, isBlob } from '../../javascript-utils/is-type';\nimport { parseMIMEType, parseMIMETypeFromURL } from './mime-type-utils';\nvar QUERY_STRING_PATTERN = /\\?.*/;\nexport function getResourceUrlAndType(resource) {\n  if (isResponse(resource)) {\n    var contentType = parseMIMEType(resource.headers.get('content-type'));\n    var urlType = parseMIMETypeFromURL(resource.url);\n    return {\n      url: stripQueryString(resource.url || ''),\n      type: contentType || urlType || null\n    };\n  }\n  if (isBlob(resource)) {\n    return {\n      url: stripQueryString(resource.name || ''),\n      type: resource.type || ''\n    };\n  }\n  if (typeof resource === 'string') {\n    return {\n      url: stripQueryString(resource),\n      type: parseMIMETypeFromURL(resource)\n    };\n  }\n  return {\n    url: '',\n    type: ''\n  };\n}\nexport function getResourceContentLength(resource) {\n  if (isResponse(resource)) {\n    return resource.headers['content-length'] || -1;\n  }\n  if (isBlob(resource)) {\n    return resource.size;\n  }\n  if (typeof resource === 'string') {\n    return resource.length;\n  }\n  if (resource instanceof ArrayBuffer) {\n    return resource.byteLength;\n  }\n  if (ArrayBuffer.isView(resource)) {\n    return resource.byteLength;\n  }\n  return -1;\n}\nfunction stripQueryString(url) {\n  return url.replace(QUERY_STRING_PATTERN, '');\n}","map":{"version":3,"names":["isResponse","isBlob","parseMIMEType","parseMIMETypeFromURL","QUERY_STRING_PATTERN","getResourceUrlAndType","resource","contentType","headers","get","urlType","url","stripQueryString","type","name","getResourceContentLength","size","length","ArrayBuffer","byteLength","isView","replace"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/kepler.gl/node_modules/@loaders.gl/core/src/lib/utils/resource-utils.js"],"sourcesContent":["import {isResponse, isBlob} from '../../javascript-utils/is-type';\nimport {parseMIMEType, parseMIMETypeFromURL} from './mime-type-utils';\n\nconst QUERY_STRING_PATTERN = /\\?.*/;\n\nexport function getResourceUrlAndType(resource) {\n  // If resource is a response, it contains the information directly\n  if (isResponse(resource)) {\n    const contentType = parseMIMEType(resource.headers.get('content-type'));\n    const urlType = parseMIMETypeFromURL(resource.url);\n    return {\n      url: stripQueryString(resource.url || ''),\n      type: contentType || urlType || null\n    };\n  }\n\n  // If the resource is a Blob or a File (subclass of Blob)\n  if (isBlob(resource)) {\n    return {\n      // File objects have a \"name\" property. Blob objects don't have any\n      // url (name) information\n      url: stripQueryString(resource.name || ''),\n      type: resource.type || ''\n    };\n  }\n\n  if (typeof resource === 'string') {\n    return {\n      // TODO this could mess up data URL but it doesn't matter as it is just used for inference\n      url: stripQueryString(resource),\n      // If a data url\n      type: parseMIMETypeFromURL(resource)\n    };\n  }\n\n  // Unknown\n  return {\n    url: '',\n    type: ''\n  };\n}\n\nexport function getResourceContentLength(resource) {\n  if (isResponse(resource)) {\n    return resource.headers['content-length'] || -1;\n  }\n  if (isBlob(resource)) {\n    return resource.size;\n  }\n  if (typeof resource === 'string') {\n    // TODO - handle data URL?\n    return resource.length;\n  }\n  if (resource instanceof ArrayBuffer) {\n    return resource.byteLength;\n  }\n  if (ArrayBuffer.isView(resource)) {\n    return resource.byteLength;\n  }\n  return -1;\n}\n\nfunction stripQueryString(url) {\n  return url.replace(QUERY_STRING_PATTERN, '');\n}\n"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,MAApB,QAAiC,gCAAjC;AACA,SAAQC,aAAR,EAAuBC,oBAAvB,QAAkD,mBAAlD;AAEA,IAAMC,oBAAoB,GAAG,MAA7B;AAEA,OAAO,SAASC,qBAATA,CAA+BC,QAA/B,EAAyC;EAE9C,IAAIN,UAAU,CAACM,QAAD,CAAd,EAA0B;IACxB,IAAMC,WAAW,GAAGL,aAAa,CAACI,QAAQ,CAACE,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,CAAD,CAAjC;IACA,IAAMC,OAAO,GAAGP,oBAAoB,CAACG,QAAQ,CAACK,GAAV,CAApC;IACA,OAAO;MACLA,GAAG,EAAEC,gBAAgB,CAACN,QAAQ,CAACK,GAAT,IAAgB,EAAjB,CADhB;MAELE,IAAI,EAAEN,WAAW,IAAIG,OAAf,IAA0B;IAF3B,CAAP;EAID;EAGD,IAAIT,MAAM,CAACK,QAAD,CAAV,EAAsB;IACpB,OAAO;MAGLK,GAAG,EAAEC,gBAAgB,CAACN,QAAQ,CAACQ,IAAT,IAAiB,EAAlB,CAHhB;MAILD,IAAI,EAAEP,QAAQ,CAACO,IAAT,IAAiB;IAJlB,CAAP;EAMD;EAED,IAAI,OAAOP,QAAP,KAAoB,QAAxB,EAAkC;IAChC,OAAO;MAELK,GAAG,EAAEC,gBAAgB,CAACN,QAAD,CAFhB;MAILO,IAAI,EAAEV,oBAAoB,CAACG,QAAD;IAJrB,CAAP;EAMD;EAGD,OAAO;IACLK,GAAG,EAAE,EADA;IAELE,IAAI,EAAE;EAFD,CAAP;AAID;AAED,OAAO,SAASE,wBAATA,CAAkCT,QAAlC,EAA4C;EACjD,IAAIN,UAAU,CAACM,QAAD,CAAd,EAA0B;IACxB,OAAOA,QAAQ,CAACE,OAAT,CAAiB,gBAAjB,KAAsC,CAAC,CAA9C;EACD;EACD,IAAIP,MAAM,CAACK,QAAD,CAAV,EAAsB;IACpB,OAAOA,QAAQ,CAACU,IAAhB;EACD;EACD,IAAI,OAAOV,QAAP,KAAoB,QAAxB,EAAkC;IAEhC,OAAOA,QAAQ,CAACW,MAAhB;EACD;EACD,IAAIX,QAAQ,YAAYY,WAAxB,EAAqC;IACnC,OAAOZ,QAAQ,CAACa,UAAhB;EACD;EACD,IAAID,WAAW,CAACE,MAAZ,CAAmBd,QAAnB,CAAJ,EAAkC;IAChC,OAAOA,QAAQ,CAACa,UAAhB;EACD;EACD,OAAO,CAAC,CAAR;AACD;AAED,SAASP,gBAATA,CAA0BD,GAA1B,EAA+B;EAC7B,OAAOA,GAAG,CAACU,OAAJ,CAAYjB,oBAAZ,EAAkC,EAAlC,CAAP;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}