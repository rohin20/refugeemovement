{"ast":null,"code":"import _slicedToArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, picking, COORDINATE_SYSTEM } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport { lngLatToWorld } from '@math.gl/web-mercator';\nimport createMesh from './create-mesh';\nimport vs from './bitmap-layer-vertex';\nimport fs from './bitmap-layer-fragment';\nvar defaultProps = {\n  image: {\n    type: 'image',\n    value: null,\n    async: true\n  },\n  bounds: {\n    type: 'array',\n    value: [1, 0, 0, 1],\n    compare: true\n  },\n  _imageCoordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n  desaturate: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 0\n  },\n  transparentColor: {\n    type: 'color',\n    value: [0, 0, 0, 0]\n  },\n  tintColor: {\n    type: 'color',\n    value: [255, 255, 255]\n  }\n};\nvar BitmapLayer = /*#__PURE__*/function (_Layer) {\n  _inherits(BitmapLayer, _Layer);\n  var _super = _createSuper(BitmapLayer);\n  function BitmapLayer() {\n    var _this;\n    _classCallCheck(this, BitmapLayer);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"state\", void 0);\n    return _this;\n  }\n  _createClass(BitmapLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _get(_getPrototypeOf(BitmapLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var _this2 = this;\n      var attributeManager = this.getAttributeManager();\n      attributeManager.remove(['instancePickingColors']);\n      var noAlloc = true;\n      attributeManager.add({\n        indices: {\n          size: 1,\n          isIndexed: true,\n          update: function update(attribute) {\n            return attribute.value = _this2.state.mesh.indices;\n          },\n          noAlloc: noAlloc\n        },\n        positions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          update: function update(attribute) {\n            return attribute.value = _this2.state.mesh.positions;\n          },\n          noAlloc: noAlloc\n        },\n        texCoords: {\n          size: 2,\n          update: function update(attribute) {\n            return attribute.value = _this2.state.mesh.texCoords;\n          },\n          noAlloc: noAlloc\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n        oldProps = _ref.oldProps,\n        changeFlags = _ref.changeFlags;\n      var attributeManager = this.getAttributeManager();\n      if (changeFlags.extensionsChanged) {\n        var _this$state$model;\n        var gl = this.context.gl;\n        (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n        this.state.model = this._getModel(gl);\n        attributeManager.invalidateAll();\n      }\n      if (props.bounds !== oldProps.bounds) {\n        var oldMesh = this.state.mesh;\n        var mesh = this._createMesh();\n        this.state.model.setVertexCount(mesh.vertexCount);\n        for (var key in mesh) {\n          if (oldMesh && oldMesh[key] !== mesh[key]) {\n            attributeManager.invalidate(key);\n          }\n        }\n        this.setState(_objectSpread({\n          mesh: mesh\n        }, this._getCoordinateUniforms()));\n      } else if (props._imageCoordinateSystem !== oldProps._imageCoordinateSystem) {\n        this.setState(this._getCoordinateUniforms());\n      }\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(params) {\n      var image = this.props.image;\n      var info = params.info;\n      if (!info.color || !image) {\n        info.bitmap = null;\n        return info;\n      }\n      var width = image.width,\n        height = image.height;\n      info.index = 0;\n      var uv = unpackUVsFromRGB(info.color);\n      var pixel = [Math.floor(uv[0] * width), Math.floor(uv[1] * height)];\n      info.bitmap = {\n        size: {\n          width: width,\n          height: height\n        },\n        uv: uv,\n        pixel: pixel\n      };\n      return info;\n    }\n  }, {\n    key: \"disablePickingIndex\",\n    value: function disablePickingIndex() {\n      this.setState({\n        disablePicking: true\n      });\n    }\n  }, {\n    key: \"restorePickingColors\",\n    value: function restorePickingColors() {\n      this.setState({\n        disablePicking: false\n      });\n    }\n  }, {\n    key: \"_updateAutoHighlight\",\n    value: function _updateAutoHighlight(info) {\n      _get(_getPrototypeOf(BitmapLayer.prototype), \"_updateAutoHighlight\", this).call(this, _objectSpread(_objectSpread({}, info), {}, {\n        color: this.encodePickingColor(0)\n      }));\n    }\n  }, {\n    key: \"_createMesh\",\n    value: function _createMesh() {\n      var bounds = this.props.bounds;\n      var normalizedBounds = bounds;\n      if (isRectangularBounds(bounds)) {\n        normalizedBounds = [[bounds[0], bounds[1]], [bounds[0], bounds[3]], [bounds[2], bounds[3]], [bounds[2], bounds[1]]];\n      }\n      return createMesh(normalizedBounds, this.context.viewport.resolution);\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      if (!gl) {\n        return null;\n      }\n      return new Model(gl, _objectSpread(_objectSpread({}, this.getShaders()), {}, {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 4,\n          vertexCount: 6\n        }),\n        isInstanced: false\n      }));\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(opts) {\n      var uniforms = opts.uniforms,\n        moduleParameters = opts.moduleParameters;\n      var _this$state = this.state,\n        model = _this$state.model,\n        coordinateConversion = _this$state.coordinateConversion,\n        bounds = _this$state.bounds,\n        disablePicking = _this$state.disablePicking;\n      var _this$props = this.props,\n        image = _this$props.image,\n        desaturate = _this$props.desaturate,\n        transparentColor = _this$props.transparentColor,\n        tintColor = _this$props.tintColor;\n      if (moduleParameters.pickingActive && disablePicking) {\n        return;\n      }\n      if (image && model) {\n        model.setUniforms(uniforms).setUniforms({\n          bitmapTexture: image,\n          desaturate: desaturate,\n          transparentColor: transparentColor.map(function (x) {\n            return x / 255;\n          }),\n          tintColor: tintColor.slice(0, 3).map(function (x) {\n            return x / 255;\n          }),\n          coordinateConversion: coordinateConversion,\n          bounds: bounds\n        }).draw();\n      }\n    }\n  }, {\n    key: \"_getCoordinateUniforms\",\n    value: function _getCoordinateUniforms() {\n      var LNGLAT = COORDINATE_SYSTEM.LNGLAT,\n        CARTESIAN = COORDINATE_SYSTEM.CARTESIAN,\n        DEFAULT = COORDINATE_SYSTEM.DEFAULT;\n      var imageCoordinateSystem = this.props._imageCoordinateSystem;\n      if (imageCoordinateSystem !== DEFAULT) {\n        var bounds = this.props.bounds;\n        if (!isRectangularBounds(bounds)) {\n          throw new Error('_imageCoordinateSystem only supports rectangular bounds');\n        }\n        var defaultImageCoordinateSystem = this.context.viewport.resolution ? LNGLAT : CARTESIAN;\n        imageCoordinateSystem = imageCoordinateSystem === LNGLAT ? LNGLAT : CARTESIAN;\n        if (imageCoordinateSystem === LNGLAT && defaultImageCoordinateSystem === CARTESIAN) {\n          return {\n            coordinateConversion: -1,\n            bounds: bounds\n          };\n        }\n        if (imageCoordinateSystem === CARTESIAN && defaultImageCoordinateSystem === LNGLAT) {\n          var bottomLeft = lngLatToWorld([bounds[0], bounds[1]]);\n          var topRight = lngLatToWorld([bounds[2], bounds[3]]);\n          return {\n            coordinateConversion: 1,\n            bounds: [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]]\n          };\n        }\n      }\n      return {\n        coordinateConversion: 0,\n        bounds: [0, 0, 0, 0]\n      };\n    }\n  }]);\n  return BitmapLayer;\n}(Layer);\nexport { BitmapLayer as default };\n_defineProperty(BitmapLayer, \"layerName\", 'BitmapLayer');\n_defineProperty(BitmapLayer, \"defaultProps\", defaultProps);\nfunction unpackUVsFromRGB(color) {\n  var _color = _slicedToArray(color, 3),\n    u = _color[0],\n    v = _color[1],\n    fracUV = _color[2];\n  var vFrac = (fracUV & 0xf0) / 256;\n  var uFrac = (fracUV & 0x0f) / 16;\n  return [(u + uFrac) / 256, (v + vFrac) / 256];\n}\nfunction isRectangularBounds(bounds) {\n  return Number.isFinite(bounds[0]);\n}","map":{"version":3,"names":["Layer","project32","picking","COORDINATE_SYSTEM","Model","Geometry","lngLatToWorld","createMesh","vs","fs","defaultProps","image","type","value","async","bounds","compare","_imageCoordinateSystem","DEFAULT","desaturate","min","max","transparentColor","tintColor","BitmapLayer","_Layer","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","_defineProperty","_assertThisInitialized","_createClass","key","getShaders","_get","_getPrototypeOf","prototype","modules","initializeState","_this2","attributeManager","getAttributeManager","remove","noAlloc","add","indices","size","isIndexed","update","attribute","state","mesh","positions","fp64","use64bitPositions","texCoords","updateState","_ref","props","oldProps","changeFlags","extensionsChanged","_this$state$model","gl","context","model","delete","_getModel","invalidateAll","oldMesh","_createMesh","setVertexCount","vertexCount","invalidate","setState","_objectSpread","_getCoordinateUniforms","getPickingInfo","params","info","color","bitmap","width","height","index","uv","unpackUVsFromRGB","pixel","Math","floor","disablePickingIndex","disablePicking","restorePickingColors","_updateAutoHighlight","encodePickingColor","normalizedBounds","isRectangularBounds","viewport","resolution","id","geometry","drawMode","isInstanced","draw","opts","uniforms","moduleParameters","_this$state","coordinateConversion","_this$props","pickingActive","setUniforms","bitmapTexture","map","x","slice","LNGLAT","CARTESIAN","imageCoordinateSystem","Error","defaultImageCoordinateSystem","bottomLeft","topRight","default","_color","_slicedToArray","u","v","fracUV","vFrac","uFrac","Number","isFinite"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/layers/src/bitmap-layer/bitmap-layer.ts"],"sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {\n  Layer,\n  project32,\n  picking,\n  CoordinateSystem,\n  COORDINATE_SYSTEM,\n  LayerProps,\n  PickingInfo,\n  GetPickingInfoParams,\n  UpdateParameters,\n  Color,\n  Texture,\n  Position,\n  DefaultProps\n} from '@deck.gl/core';\nimport {Model, Geometry} from '@luma.gl/core';\nimport {lngLatToWorld} from '@math.gl/web-mercator';\n\nimport createMesh from './create-mesh';\n\nimport vs from './bitmap-layer-vertex';\nimport fs from './bitmap-layer-fragment';\n\nconst defaultProps: DefaultProps<BitmapLayerProps> = {\n  image: {type: 'image', value: null, async: true},\n  bounds: {type: 'array', value: [1, 0, 0, 1], compare: true},\n  _imageCoordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n\n  desaturate: {type: 'number', min: 0, max: 1, value: 0},\n  // More context: because of the blending mode we're using for ground imagery,\n  // alpha is not effective when blending the bitmap layers with the base map.\n  // Instead we need to manually dim/blend rgb values with a background color.\n  transparentColor: {type: 'color', value: [0, 0, 0, 0]},\n  tintColor: {type: 'color', value: [255, 255, 255]}\n};\n\n/** All properties supported by BitmapLayer. */\nexport type BitmapLayerProps = _BitmapLayerProps & LayerProps;\nexport type BitmapBoundingBox =\n  | [left: number, bottom: number, right: number, top: number]\n  | [Position, Position, Position, Position];\n\n/** Properties added by BitmapLayer. */\ntype _BitmapLayerProps = {\n  /**\n   * The image to display.\n   *\n   * @default null\n   */\n  image?: string | Texture | null;\n\n  /**\n   * Supported formats:\n   *  - Coordinates of the bounding box of the bitmap `[left, bottom, right, top]`\n   *  - Coordinates of four corners of the bitmap, should follow the sequence of `[[left, bottom], [left, top], [right, top], [right, bottom]]`.\n   *   Each position could optionally contain a third component `z`.\n   * @default [1, 0, 0, 1]\n   */\n  bounds?: BitmapBoundingBox;\n\n  /**\n   * > Note: this prop is experimental.\n   *\n   * Specifies how image coordinates should be geographically interpreted.\n   * @default COORDINATE_SYSTEM.DEFAULT\n   */\n  _imageCoordinateSystem?: CoordinateSystem;\n\n  /**\n   * The desaturation of the bitmap. Between `[0, 1]`.\n   * @default 0\n   */\n  desaturate?: number;\n\n  /**\n   * The color to use for transparent pixels, in `[r, g, b, a]`.\n   * @default [0, 0, 0, 0]\n   */\n  transparentColor?: Color;\n\n  /**\n   * The color to tint the bitmap by, in `[r, g, b]`.\n   * @default [255, 255, 255]\n   */\n  tintColor?: Color;\n\n  /** Customize the [texture parameters](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter). */\n  textureParameters?: Record<number, number> | null;\n};\n\n/** Render a bitmap at specified boundaries. */\nexport default class BitmapLayer<ExtraPropsT = {}> extends Layer<\n  ExtraPropsT & Required<_BitmapLayerProps>\n> {\n  static layerName = 'BitmapLayer';\n  static defaultProps = defaultProps;\n\n  state!: Layer['state'] & {\n    disablePicking?: boolean;\n    model?: Model;\n    mesh?: any;\n    coordinateConversion?: number;\n    bounds?: number[];\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager()!;\n\n    attributeManager.remove(['instancePickingColors']);\n    const noAlloc = true;\n\n    attributeManager.add({\n      indices: {\n        size: 1,\n        isIndexed: true,\n        update: attribute => (attribute.value = this.state.mesh.indices),\n        noAlloc\n      },\n      positions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        update: attribute => (attribute.value = this.state.mesh.positions),\n        noAlloc\n      },\n      texCoords: {\n        size: 2,\n        update: attribute => (attribute.value = this.state.mesh.texCoords),\n        noAlloc\n      }\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}: UpdateParameters<this>): void {\n    // setup model first\n    const attributeManager = this.getAttributeManager()!;\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      attributeManager.invalidateAll();\n    }\n\n    if (props.bounds !== oldProps.bounds) {\n      const oldMesh = this.state.mesh;\n      const mesh = this._createMesh();\n      this.state.model.setVertexCount(mesh.vertexCount);\n      for (const key in mesh) {\n        if (oldMesh && oldMesh[key] !== mesh[key]) {\n          attributeManager.invalidate(key);\n        }\n      }\n      this.setState({mesh, ...this._getCoordinateUniforms()});\n    } else if (props._imageCoordinateSystem !== oldProps._imageCoordinateSystem) {\n      this.setState(this._getCoordinateUniforms());\n    }\n  }\n\n  getPickingInfo(params: GetPickingInfoParams): PickingInfo {\n    const {image} = this.props;\n    const info: PickingInfo & {bitmap?: any} = params.info;\n\n    if (!info.color || !image) {\n      info.bitmap = null;\n      return info;\n    }\n\n    const {width, height} = image as Texture;\n\n    // Picking color doesn't represent object index in this layer\n    info.index = 0;\n\n    // Calculate uv and pixel in bitmap\n    const uv = unpackUVsFromRGB(info.color);\n\n    const pixel = [Math.floor(uv[0] * (width as number)), Math.floor(uv[1] * (height as number))];\n\n    info.bitmap = {\n      size: {width, height}, // Size of bitmap\n      uv, // Floating point precision in 0-1 range\n      pixel // Truncated to integer and scaled to pixel size\n    };\n\n    return info;\n  }\n\n  // Override base Layer multi-depth picking logic\n  disablePickingIndex() {\n    this.setState({disablePicking: true});\n  }\n\n  restorePickingColors() {\n    this.setState({disablePicking: false});\n  }\n\n  protected _updateAutoHighlight(info) {\n    super._updateAutoHighlight({\n      ...info,\n      color: this.encodePickingColor(0)\n    });\n  }\n\n  protected _createMesh() {\n    const {bounds} = this.props;\n\n    let normalizedBounds = bounds;\n    // bounds as [minX, minY, maxX, maxY]\n    if (isRectangularBounds(bounds)) {\n      /*\n        (minX0, maxY3) ---- (maxX2, maxY3)\n               |                  |\n               |                  |\n               |                  |\n        (minX0, minY1) ---- (maxX2, minY1)\n     */\n      normalizedBounds = [\n        [bounds[0], bounds[1]],\n        [bounds[0], bounds[3]],\n        [bounds[2], bounds[3]],\n        [bounds[2], bounds[1]]\n      ];\n    }\n\n    return createMesh(normalizedBounds, this.context.viewport.resolution);\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    if (!gl) {\n      return null;\n    }\n\n    /*\n      0,0 --- 1,0\n       |       |\n      0,1 --- 1,1\n    */\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLES,\n        vertexCount: 6\n      }),\n      isInstanced: false\n    });\n  }\n\n  draw(opts) {\n    const {uniforms, moduleParameters} = opts;\n    const {model, coordinateConversion, bounds, disablePicking} = this.state;\n    const {image, desaturate, transparentColor, tintColor} = this.props;\n\n    if (moduleParameters.pickingActive && disablePicking) {\n      return;\n    }\n\n    // // TODO fix zFighting\n    // Render the image\n    if (image && model) {\n      model\n        .setUniforms(uniforms)\n        .setUniforms({\n          bitmapTexture: image,\n          desaturate,\n          transparentColor: transparentColor.map(x => x / 255),\n          tintColor: tintColor.slice(0, 3).map(x => x / 255),\n          coordinateConversion,\n          bounds\n        })\n        .draw();\n    }\n  }\n\n  _getCoordinateUniforms() {\n    const {LNGLAT, CARTESIAN, DEFAULT} = COORDINATE_SYSTEM;\n    let {_imageCoordinateSystem: imageCoordinateSystem} = this.props;\n    if (imageCoordinateSystem !== DEFAULT) {\n      const {bounds} = this.props;\n      if (!isRectangularBounds(bounds)) {\n        throw new Error('_imageCoordinateSystem only supports rectangular bounds');\n      }\n\n      // The default behavior (linearly interpolated tex coords)\n      const defaultImageCoordinateSystem = this.context.viewport.resolution ? LNGLAT : CARTESIAN;\n      imageCoordinateSystem = imageCoordinateSystem === LNGLAT ? LNGLAT : CARTESIAN;\n\n      if (imageCoordinateSystem === LNGLAT && defaultImageCoordinateSystem === CARTESIAN) {\n        // LNGLAT in Mercator, e.g. display LNGLAT-encoded image in WebMercator projection\n        return {coordinateConversion: -1, bounds};\n      }\n      if (imageCoordinateSystem === CARTESIAN && defaultImageCoordinateSystem === LNGLAT) {\n        // Mercator in LNGLAT, e.g. display WebMercator encoded image in Globe projection\n        const bottomLeft = lngLatToWorld([bounds[0], bounds[1]]);\n        const topRight = lngLatToWorld([bounds[2], bounds[3]]);\n        return {\n          coordinateConversion: 1,\n          bounds: [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]]\n        };\n      }\n    }\n    return {\n      coordinateConversion: 0,\n      bounds: [0, 0, 0, 0]\n    };\n  }\n}\n\n/**\n * Decode uv floats from rgb bytes where b contains 4-bit fractions of uv\n * @param {number[]} color\n * @returns {number[]} uvs\n * https://stackoverflow.com/questions/30242013/glsl-compressing-packing-multiple-0-1-colours-var4-into-a-single-var4-variab\n */\nfunction unpackUVsFromRGB(color) {\n  const [u, v, fracUV] = color;\n  const vFrac = (fracUV & 0xf0) / 256;\n  const uFrac = (fracUV & 0x0f) / 16;\n  return [(u + uFrac) / 256, (v + vFrac) / 256];\n}\n\nfunction isRectangularBounds(\n  bounds: [number, number, number, number] | [Position, Position, Position, Position]\n): bounds is [number, number, number, number] {\n  return Number.isFinite(bounds[0]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}