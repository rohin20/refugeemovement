{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getPassthroughFS } from '@luma.gl/shadertools';\nimport BufferTransform from './buffer-transform';\nimport TextureTransform from './texture-transform';\nimport { isWebGL2 } from '@luma.gl/gltools';\nimport { assert, isObjectEmpty, getShaderVersion } from '@luma.gl/webgl';\nimport Model from '../lib/model';\nvar Transform = /*#__PURE__*/function () {\n  function Transform(gl) {\n    _classCallCheck(this, Transform);\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.gl = gl;\n    this.model = null;\n    this.elementCount = 0;\n    this.bufferTransform = null;\n    this.textureTransform = null;\n    this.elementIDBuffer = null;\n    this._initialize(props);\n    Object.seal(this);\n  }\n  _createClass(Transform, [{\n    key: \"delete\",\n    value: function _delete() {\n      var model = this.model,\n        bufferTransform = this.bufferTransform,\n        textureTransform = this.textureTransform;\n      if (model) {\n        model.delete();\n      }\n      if (bufferTransform) {\n        bufferTransform.delete();\n      }\n      if (textureTransform) {\n        textureTransform.delete();\n      }\n    }\n  }, {\n    key: \"run\",\n    value: function run() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _opts$clearRenderTarg = opts.clearRenderTarget,\n        clearRenderTarget = _opts$clearRenderTarg === void 0 ? true : _opts$clearRenderTarg;\n      var updatedOpts = this._updateDrawOptions(opts);\n      if (clearRenderTarget && updatedOpts.framebuffer) {\n        updatedOpts.framebuffer.clear({\n          color: true\n        });\n      }\n      this.model.transform(updatedOpts);\n    }\n  }, {\n    key: \"swap\",\n    value: function swap() {\n      var swapped = false;\n      var resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n      var _iterator = _createForOfIteratorHelper(resourceTransforms),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var resourceTransform = _step.value;\n          swapped = swapped || resourceTransform.swap();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      assert(swapped, 'Nothing to swap');\n    }\n  }, {\n    key: \"getBuffer\",\n    value: function getBuffer() {\n      var varyingName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      return this.bufferTransform && this.bufferTransform.getBuffer(varyingName);\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n      var _iterator2 = _createForOfIteratorHelper(resourceTransforms),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var resourceTransform = _step2.value;\n          var data = resourceTransform.getData(opts);\n          if (data) {\n            return data;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return null;\n    }\n  }, {\n    key: \"getFramebuffer\",\n    value: function getFramebuffer() {\n      return this.textureTransform && this.textureTransform.getFramebuffer();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if ('elementCount' in opts) {\n        this.model.setVertexCount(opts.elementCount);\n      }\n      var resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n      var _iterator3 = _createForOfIteratorHelper(resourceTransforms),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var resourceTransform = _step3.value;\n          resourceTransform.update(opts);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"_initialize\",\n    value: function _initialize() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var gl = this.gl;\n      this._buildResourceTransforms(gl, props);\n      props = this._updateModelProps(props);\n      this.model = new Model(gl, Object.assign({}, props, {\n        fs: props.fs || getPassthroughFS({\n          version: getShaderVersion(props.vs)\n        }),\n        id: props.id || 'transform-model',\n        drawMode: props.drawMode || 0,\n        vertexCount: props.elementCount\n      }));\n      this.bufferTransform && this.bufferTransform.setupResources({\n        model: this.model\n      });\n    }\n  }, {\n    key: \"_updateModelProps\",\n    value: function _updateModelProps(props) {\n      var updatedProps = Object.assign({}, props);\n      var resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n      var _iterator4 = _createForOfIteratorHelper(resourceTransforms),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var resourceTransform = _step4.value;\n          updatedProps = resourceTransform.updateModelProps(updatedProps);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      return updatedProps;\n    }\n  }, {\n    key: \"_buildResourceTransforms\",\n    value: function _buildResourceTransforms(gl, props) {\n      if (canCreateBufferTransform(props)) {\n        this.bufferTransform = new BufferTransform(gl, props);\n      }\n      if (canCreateTextureTransform(props)) {\n        this.textureTransform = new TextureTransform(gl, props);\n      }\n      assert(this.bufferTransform || this.textureTransform, 'must provide source/feedback buffers or source/target textures');\n    }\n  }, {\n    key: \"_updateDrawOptions\",\n    value: function _updateDrawOptions(opts) {\n      var updatedOpts = Object.assign({}, opts);\n      var resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n      var _iterator5 = _createForOfIteratorHelper(resourceTransforms),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var resourceTransform = _step5.value;\n          updatedOpts = Object.assign(updatedOpts, resourceTransform.getDrawOptions(updatedOpts));\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      return updatedOpts;\n    }\n  }], [{\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      return isWebGL2(gl);\n    }\n  }]);\n  return Transform;\n}();\nexport { Transform as default };\nfunction canCreateBufferTransform(props) {\n  if (!isObjectEmpty(props.feedbackBuffers) || !isObjectEmpty(props.feedbackMap) || props.varyings && props.varyings.length > 0) {\n    return true;\n  }\n  return false;\n}\nfunction canCreateTextureTransform(props) {\n  if (!isObjectEmpty(props._sourceTextures) || props._targetTexture || props._targetTextureVarying) {\n    return true;\n  }\n  return false;\n}","map":{"version":3,"names":["getPassthroughFS","BufferTransform","TextureTransform","isWebGL2","assert","isObjectEmpty","getShaderVersion","Model","Transform","gl","_classCallCheck","props","arguments","length","undefined","model","elementCount","bufferTransform","textureTransform","elementIDBuffer","_initialize","Object","seal","_createClass","key","value","_delete","delete","run","opts","_opts$clearRenderTarg","clearRenderTarget","updatedOpts","_updateDrawOptions","framebuffer","clear","color","transform","swap","swapped","resourceTransforms","filter","Boolean","_iterator","_createForOfIteratorHelper","_step","s","n","done","resourceTransform","err","e","f","getBuffer","varyingName","getData","_iterator2","_step2","data","getFramebuffer","update","setVertexCount","_iterator3","_step3","_buildResourceTransforms","_updateModelProps","assign","fs","version","vs","id","drawMode","vertexCount","setupResources","updatedProps","_iterator4","_step4","updateModelProps","canCreateBufferTransform","canCreateTextureTransform","_iterator5","_step5","getDrawOptions","isSupported","default","feedbackBuffers","feedbackMap","varyings","_sourceTextures","_targetTexture","_targetTextureVarying"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@luma.gl/engine/src/transform/transform.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {getPassthroughFS} from '@luma.gl/shadertools';\nimport BufferTransform from './buffer-transform';\nimport TextureTransform from './texture-transform';\n\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {assert, isObjectEmpty, getShaderVersion} from '@luma.gl/webgl';\nimport Model from '../lib/model';\n\n// takes source and target buffers/textures and setsup the pipeline\nexport default class Transform {\n  static isSupported(gl) {\n    // TODO : differentiate writting to buffer vs not\n    return isWebGL2(gl);\n  }\n\n  constructor(gl, props = {}) {\n    this.gl = gl;\n    this.model = null;\n    this.elementCount = 0;\n    this.bufferTransform = null;\n    this.textureTransform = null;\n    this.elementIDBuffer = null;\n    this._initialize(props);\n    Object.seal(this);\n  }\n\n  // Delete owned resources.\n  delete() {\n    const {model, bufferTransform, textureTransform} = this;\n    if (model) {\n      model.delete();\n    }\n    if (bufferTransform) {\n      bufferTransform.delete();\n    }\n    if (textureTransform) {\n      textureTransform.delete();\n    }\n  }\n\n  // Run one transform loop.\n  run(opts = {}) {\n    const {clearRenderTarget = true} = opts;\n\n    const updatedOpts = this._updateDrawOptions(opts);\n\n    if (clearRenderTarget && updatedOpts.framebuffer) {\n      updatedOpts.framebuffer.clear({color: true});\n    }\n\n    this.model.transform(updatedOpts);\n  }\n\n  // swap resources if a map is provided\n  swap() {\n    let swapped = false;\n    const resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n    for (const resourceTransform of resourceTransforms) {\n      swapped = swapped || resourceTransform.swap();\n    }\n    assert(swapped, 'Nothing to swap');\n  }\n\n  // Return Buffer object for given varying name.\n  getBuffer(varyingName = null) {\n    return this.bufferTransform && this.bufferTransform.getBuffer(varyingName);\n  }\n\n  // Return data either from Buffer or from Texture\n  getData(opts = {}) {\n    const resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n    for (const resourceTransform of resourceTransforms) {\n      // @ts-ignore\n      const data = resourceTransform.getData(opts);\n      if (data) {\n        return data;\n      }\n    }\n    return null;\n  }\n\n  // Return framebuffer object if rendering to textures\n  getFramebuffer() {\n    return this.textureTransform && this.textureTransform.getFramebuffer();\n  }\n\n  // Update some or all buffer/texture bindings.\n  update(opts = {}) {\n    if ('elementCount' in opts) {\n      // @ts-ignore TODO\n      this.model.setVertexCount(opts.elementCount);\n    }\n    const resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n    for (const resourceTransform of resourceTransforms) {\n      resourceTransform.update(opts);\n    }\n  }\n\n  // Private\n\n  _initialize(props = {}) {\n    const {gl} = this;\n    this._buildResourceTransforms(gl, props);\n\n    props = this._updateModelProps(props);\n    this.model = new Model(\n      gl,\n      Object.assign({}, props, {\n        fs: props.fs || getPassthroughFS({version: getShaderVersion(props.vs)}),\n        id: props.id || 'transform-model',\n        drawMode: props.drawMode || GL.POINTS,\n        vertexCount: props.elementCount\n      })\n    );\n\n    /* eslint-disable no-unused-expressions */\n    this.bufferTransform && this.bufferTransform.setupResources({model: this.model});\n    /* eslint-enable no-unused-expressions */\n  }\n\n  _updateModelProps(props) {\n    let updatedProps = Object.assign({}, props);\n    const resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n    for (const resourceTransform of resourceTransforms) {\n      updatedProps = resourceTransform.updateModelProps(updatedProps);\n    }\n    return updatedProps;\n  }\n\n  _buildResourceTransforms(gl, props) {\n    if (canCreateBufferTransform(props)) {\n      this.bufferTransform = new BufferTransform(gl, props);\n    }\n    if (canCreateTextureTransform(props)) {\n      this.textureTransform = new TextureTransform(gl, props);\n    }\n    assert(\n      this.bufferTransform || this.textureTransform,\n      'must provide source/feedback buffers or source/target textures'\n    );\n  }\n\n  _updateDrawOptions(opts) {\n    let updatedOpts = Object.assign({}, opts);\n    const resourceTransforms = [this.bufferTransform, this.textureTransform].filter(Boolean);\n    for (const resourceTransform of resourceTransforms) {\n      updatedOpts = Object.assign(updatedOpts, resourceTransform.getDrawOptions(updatedOpts));\n    }\n    return updatedOpts;\n  }\n}\n\n// Helper Methods\n\nfunction canCreateBufferTransform(props) {\n  if (\n    !isObjectEmpty(props.feedbackBuffers) ||\n    !isObjectEmpty(props.feedbackMap) ||\n    (props.varyings && props.varyings.length > 0)\n  ) {\n    return true;\n  }\n  return false;\n}\n\nfunction canCreateTextureTransform(props) {\n  if (\n    !isObjectEmpty(props._sourceTextures) ||\n    props._targetTexture ||\n    props._targetTextureVarying\n  ) {\n    return true;\n  }\n\n  return false;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}