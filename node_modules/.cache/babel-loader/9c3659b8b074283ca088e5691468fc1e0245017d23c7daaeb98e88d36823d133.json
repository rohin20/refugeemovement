{"ast":null,"code":"import { padTo4Bytes } from './memory-copy-utils';\nexport function copyPaddedArrayBufferToDataView(dataView, byteOffset, sourceBuffer) {\n  var paddedLength = padTo4Bytes(sourceBuffer.byteLength);\n  var padLength = paddedLength - sourceBuffer.byteLength;\n  if (dataView) {\n    var targetArray = new Uint8Array(dataView.buffer, dataView.byteOffset + byteOffset, sourceBuffer.byteLength);\n    var sourceArray = new Uint8Array(sourceBuffer);\n    targetArray.set(sourceArray);\n    for (var i = 0; i < padLength; ++i) {\n      dataView.setUint8(byteOffset + sourceBuffer.byteLength + i, 0x20);\n    }\n  }\n  byteOffset += paddedLength;\n  return byteOffset;\n}\nexport function copyPaddedStringToDataView(dataView, byteOffset, string) {\n  var textEncoder = new TextEncoder();\n  var stringBuffer = textEncoder.encode(string);\n  byteOffset = copyPaddedArrayBufferToDataView(dataView, byteOffset, stringBuffer);\n  return byteOffset;\n}","map":{"version":3,"names":["padTo4Bytes","copyPaddedArrayBufferToDataView","dataView","byteOffset","sourceBuffer","paddedLength","byteLength","padLength","targetArray","Uint8Array","buffer","sourceArray","set","i","setUint8","copyPaddedStringToDataView","string","textEncoder","TextEncoder","stringBuffer","encode"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/json/node_modules/@loaders.gl/loader-utils/src/lib/binary-utils/binary-copy-utils.js"],"sourcesContent":["/* global TextEncoder */\nimport {padTo4Bytes} from './memory-copy-utils';\n\nexport function copyPaddedArrayBufferToDataView(dataView, byteOffset, sourceBuffer) {\n  const paddedLength = padTo4Bytes(sourceBuffer.byteLength);\n  const padLength = paddedLength - sourceBuffer.byteLength;\n\n  if (dataView) {\n    // Copy array\n    const targetArray = new Uint8Array(\n      dataView.buffer,\n      dataView.byteOffset + byteOffset,\n      sourceBuffer.byteLength\n    );\n    const sourceArray = new Uint8Array(sourceBuffer);\n    targetArray.set(sourceArray);\n\n    // Add PADDING\n    for (let i = 0; i < padLength; ++i) {\n      // json chunk is padded with spaces (ASCII 0x20)\n      dataView.setUint8(byteOffset + sourceBuffer.byteLength + i, 0x20);\n    }\n  }\n  byteOffset += paddedLength;\n  return byteOffset;\n}\n\nexport function copyPaddedStringToDataView(dataView, byteOffset, string) {\n  const textEncoder = new TextEncoder();\n  // PERFORMANCE IDEA: We encode twice, once to get size and once to store\n  // PERFORMANCE IDEA: Use TextEncoder.encodeInto() to avoid temporary copy\n  const stringBuffer = textEncoder.encode(string);\n\n  byteOffset = copyPaddedArrayBufferToDataView(dataView, byteOffset, stringBuffer);\n\n  return byteOffset;\n}\n"],"mappings":"AACA,SAAQA,WAAR,QAA0B,qBAA1B;AAEA,OAAO,SAASC,+BAATA,CAAyCC,QAAzC,EAAmDC,UAAnD,EAA+DC,YAA/D,EAA6E;EAClF,IAAMC,YAAY,GAAGL,WAAW,CAACI,YAAY,CAACE,UAAd,CAAhC;EACA,IAAMC,SAAS,GAAGF,YAAY,GAAGD,YAAY,CAACE,UAA9C;EAEA,IAAIJ,QAAJ,EAAc;IAEZ,IAAMM,WAAW,GAAG,IAAIC,UAAJ,CAClBP,QAAQ,CAACQ,MADS,EAElBR,QAAQ,CAACC,UAAT,GAAsBA,UAFJ,EAGlBC,YAAY,CAACE,UAHK,CAApB;IAKA,IAAMK,WAAW,GAAG,IAAIF,UAAJ,CAAeL,YAAf,CAApB;IACAI,WAAW,CAACI,GAAZ,CAAgBD,WAAhB;IAGA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,SAApB,EAA+B,EAAEM,CAAjC,EAAoC;MAElCX,QAAQ,CAACY,QAAT,CAAkBX,UAAU,GAAGC,YAAY,CAACE,UAA1B,GAAuCO,CAAzD,EAA4D,IAA5D;IACD;EACF;EACDV,UAAU,IAAIE,YAAd;EACA,OAAOF,UAAP;AACD;AAED,OAAO,SAASY,0BAATA,CAAoCb,QAApC,EAA8CC,UAA9C,EAA0Da,MAA1D,EAAkE;EACvE,IAAMC,WAAW,GAAG,IAAIC,WAAJ,EAApB;EAGA,IAAMC,YAAY,GAAGF,WAAW,CAACG,MAAZ,CAAmBJ,MAAnB,CAArB;EAEAb,UAAU,GAAGF,+BAA+B,CAACC,QAAD,EAAWC,UAAX,EAAuBgB,YAAvB,CAA5C;EAEA,OAAOhB,UAAP;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}