{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { hexbin } from 'd3-hexbin';\nimport { createIterable, log } from '@deck.gl/core';\nexport function pointToHexbin(props, aggregationParams) {\n  var data = props.data,\n    radius = props.radius;\n  var viewport = aggregationParams.viewport,\n    attributes = aggregationParams.attributes;\n  var centerLngLat = data.length ? getPointsCenter(data, aggregationParams) : null;\n  var radiusCommon = getRadiusInCommon(radius, viewport, centerLngLat);\n  var screenPoints = [];\n  var _createIterable = createIterable(data),\n    iterable = _createIterable.iterable,\n    objectInfo = _createIterable.objectInfo;\n  var positions = attributes.positions.value;\n  var _attributes$positions = attributes.positions.getAccessor(),\n    size = _attributes$positions.size;\n  var _iterator = _createForOfIteratorHelper(iterable),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var object = _step.value;\n      objectInfo.index++;\n      var posIndex = objectInfo.index * size;\n      var position = [positions[posIndex], positions[posIndex + 1]];\n      var arrayIsFinite = Number.isFinite(position[0]) && Number.isFinite(position[1]);\n      if (arrayIsFinite) {\n        screenPoints.push({\n          screenCoord: viewport.projectFlat(position),\n          source: object,\n          index: objectInfo.index\n        });\n      } else {\n        log.warn('HexagonLayer: invalid position')();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var newHexbin = hexbin().radius(radiusCommon).x(function (d) {\n    return d.screenCoord[0];\n  }).y(function (d) {\n    return d.screenCoord[1];\n  });\n  var hexagonBins = newHexbin(screenPoints);\n  return {\n    hexagons: hexagonBins.map(function (hex, index) {\n      return {\n        position: viewport.unprojectFlat([hex.x, hex.y]),\n        points: hex,\n        index: index\n      };\n    }),\n    radiusCommon: radiusCommon\n  };\n}\nexport function getPointsCenter(data, aggregationParams) {\n  var attributes = aggregationParams.attributes;\n  var positions = attributes.positions.value;\n  var _attributes$positions2 = attributes.positions.getAccessor(),\n    size = _attributes$positions2.size;\n  var minX = Infinity;\n  var minY = Infinity;\n  var maxX = -Infinity;\n  var maxY = -Infinity;\n  var i;\n  for (i = 0; i < size * data.length; i += size) {\n    var x = positions[i];\n    var y = positions[i + 1];\n    var arrayIsFinite = Number.isFinite(x) && Number.isFinite(y);\n    if (arrayIsFinite) {\n      minX = Math.min(x, minX);\n      maxX = Math.max(x, maxX);\n      minY = Math.min(y, minY);\n      maxY = Math.max(y, maxY);\n    }\n  }\n  return [minX, minY, maxX, maxY].every(Number.isFinite) ? [(minX + maxX) / 2, (minY + maxY) / 2] : null;\n}\nexport function getRadiusInCommon(radius, viewport, center) {\n  var _viewport$getDistance = viewport.getDistanceScales(center),\n    unitsPerMeter = _viewport$getDistance.unitsPerMeter;\n  return radius * unitsPerMeter[0];\n}","map":{"version":3,"names":["hexbin","createIterable","log","pointToHexbin","props","aggregationParams","data","radius","viewport","attributes","centerLngLat","length","getPointsCenter","radiusCommon","getRadiusInCommon","screenPoints","_createIterable","iterable","objectInfo","positions","value","_attributes$positions","getAccessor","size","_iterator","_createForOfIteratorHelper","_step","s","n","done","object","index","posIndex","position","arrayIsFinite","Number","isFinite","push","screenCoord","projectFlat","source","warn","err","e","f","newHexbin","x","d","y","hexagonBins","hexagons","map","hex","unprojectFlat","points","_attributes$positions2","minX","Infinity","minY","maxX","maxY","i","Math","min","max","every","center","_viewport$getDistance","getDistanceScales","unitsPerMeter"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/aggregation-layers/src/hexagon-layer/hexagon-aggregator.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {hexbin} from 'd3-hexbin';\nimport {createIterable, log} from '@deck.gl/core';\n\n/**\n * Use d3-hexbin to performs hexagonal binning from geo points to hexagons\n * @param {Iterable} data - array of points\n * @param {Number} radius - hexagon radius in meter\n * @param {function} getPosition - get points lon lat\n * @param {Object} viewport - current viewport object\n\n * @return {Object} - hexagons and countRange\n */\nexport function pointToHexbin(props, aggregationParams) {\n  const {data, radius} = props;\n  const {viewport, attributes} = aggregationParams;\n  // get hexagon radius in mercator world unit\n  const centerLngLat = data.length ? getPointsCenter(data, aggregationParams) : null;\n  const radiusCommon = getRadiusInCommon(radius, viewport, centerLngLat);\n\n  // add world space coordinates to points\n  const screenPoints = [];\n  const {iterable, objectInfo} = createIterable(data);\n  const positions = attributes.positions.value;\n  const {size} = attributes.positions.getAccessor();\n  for (const object of iterable) {\n    objectInfo.index++;\n    const posIndex = objectInfo.index * size;\n    const position = [positions[posIndex], positions[posIndex + 1]];\n    const arrayIsFinite = Number.isFinite(position[0]) && Number.isFinite(position[1]);\n    if (arrayIsFinite) {\n      screenPoints.push({\n        screenCoord: viewport.projectFlat(position),\n        source: object,\n        index: objectInfo.index\n      });\n    } else {\n      log.warn('HexagonLayer: invalid position')();\n    }\n  }\n\n  const newHexbin = hexbin()\n    .radius(radiusCommon)\n    .x(d => d.screenCoord[0])\n    .y(d => d.screenCoord[1]);\n\n  const hexagonBins = newHexbin(screenPoints);\n\n  return {\n    hexagons: hexagonBins.map((hex, index) => ({\n      position: viewport.unprojectFlat([hex.x, hex.y]),\n      points: hex,\n      index\n    })),\n    radiusCommon\n  };\n}\n\n/**\n * Get the bounding box of all data points\n */\nexport function getPointsCenter(data, aggregationParams) {\n  const {attributes} = aggregationParams;\n  const positions = attributes.positions.value;\n  const {size} = attributes.positions.getAccessor();\n\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  let i;\n\n  for (i = 0; i < size * data.length; i += size) {\n    const x = positions[i];\n    const y = positions[i + 1];\n    const arrayIsFinite = Number.isFinite(x) && Number.isFinite(y);\n\n    if (arrayIsFinite) {\n      minX = Math.min(x, minX);\n      maxX = Math.max(x, maxX);\n      minY = Math.min(y, minY);\n      maxY = Math.max(y, maxY);\n    }\n  }\n\n  // return center\n  return [minX, minY, maxX, maxY].every(Number.isFinite)\n    ? [(minX + maxX) / 2, (minY + maxY) / 2]\n    : null;\n}\n\n/**\n * Get radius in mercator world space coordinates from meter\n * @param {Number} radius - in meter\n * @param {Object} viewport - current viewport object\n * @param {Array<Number>} center - data center\n\n * @return {Number} radius in mercator world spcae coordinates\n */\nexport function getRadiusInCommon(radius, viewport, center) {\n  const {unitsPerMeter} = viewport.getDistanceScales(center);\n  // x, y distance should be the same\n  return radius * unitsPerMeter[0];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}