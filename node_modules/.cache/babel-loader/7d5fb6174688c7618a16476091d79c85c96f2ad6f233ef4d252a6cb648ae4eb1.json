{"ast":null,"code":"export function padStringToByteAlignment(string, byteAlignment) {\n  var length = string.length;\n  var paddedLength = Math.ceil(length / byteAlignment) * byteAlignment;\n  var padding = paddedLength - length;\n  var whitespace = '';\n  for (var i = 0; i < padding; ++i) {\n    whitespace += ' ';\n  }\n  return string + whitespace;\n}\nexport function copyStringToDataView(dataView, byteOffset, string, byteLength) {\n  if (dataView) {\n    for (var i = 0; i < byteLength; i++) {\n      dataView.setUint8(byteOffset + i, string.charCodeAt(i));\n    }\n  }\n  return byteOffset + byteLength;\n}\nexport function copyBinaryToDataView(dataView, byteOffset, binary, byteLength) {\n  if (dataView) {\n    for (var i = 0; i < byteLength; i++) {\n      dataView.setUint8(byteOffset + i, binary[i]);\n      byteOffset++;\n    }\n  }\n  return byteOffset + byteLength;\n}","map":{"version":3,"names":["padStringToByteAlignment","string","byteAlignment","length","paddedLength","Math","ceil","padding","whitespace","i","copyStringToDataView","dataView","byteOffset","byteLength","setUint8","charCodeAt","copyBinaryToDataView","binary"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/json/node_modules/@loaders.gl/loader-utils/src/lib/binary-utils/encode-utils.js"],"sourcesContent":["// UTILITIES\n\n// PERFORMANCE IDEA: No need to copy string twice...\nexport function padStringToByteAlignment(string, byteAlignment) {\n  const length = string.length;\n  const paddedLength = Math.ceil(length / byteAlignment) * byteAlignment; // Round up to the required alignment\n  const padding = paddedLength - length;\n  let whitespace = '';\n  for (let i = 0; i < padding; ++i) {\n    whitespace += ' ';\n  }\n  return string + whitespace;\n}\n\nexport function copyStringToDataView(dataView, byteOffset, string, byteLength) {\n  if (dataView) {\n    for (let i = 0; i < byteLength; i++) {\n      dataView.setUint8(byteOffset + i, string.charCodeAt(i));\n    }\n  }\n  return byteOffset + byteLength;\n}\n\nexport function copyBinaryToDataView(dataView, byteOffset, binary, byteLength) {\n  if (dataView) {\n    for (let i = 0; i < byteLength; i++) {\n      dataView.setUint8(byteOffset + i, binary[i]);\n      byteOffset++;\n    }\n  }\n  return byteOffset + byteLength;\n}\n"],"mappings":"AAGA,OAAO,SAASA,wBAATA,CAAkCC,MAAlC,EAA0CC,aAA1C,EAAyD;EAC9D,IAAMC,MAAM,GAAGF,MAAM,CAACE,MAAtB;EACA,IAAMC,YAAY,GAAGC,IAAI,CAACC,IAAL,CAAUH,MAAM,GAAGD,aAAnB,IAAoCA,aAAzD;EACA,IAAMK,OAAO,GAAGH,YAAY,GAAGD,MAA/B;EACA,IAAIK,UAAU,GAAG,EAAjB;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAApB,EAA6B,EAAEE,CAA/B,EAAkC;IAChCD,UAAU,IAAI,GAAd;EACD;EACD,OAAOP,MAAM,GAAGO,UAAhB;AACD;AAED,OAAO,SAASE,oBAATA,CAA8BC,QAA9B,EAAwCC,UAAxC,EAAoDX,MAApD,EAA4DY,UAA5D,EAAwE;EAC7E,IAAIF,QAAJ,EAAc;IACZ,KAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,UAApB,EAAgCJ,CAAC,EAAjC,EAAqC;MACnCE,QAAQ,CAACG,QAAT,CAAkBF,UAAU,GAAGH,CAA/B,EAAkCR,MAAM,CAACc,UAAP,CAAkBN,CAAlB,CAAlC;IACD;EACF;EACD,OAAOG,UAAU,GAAGC,UAApB;AACD;AAED,OAAO,SAASG,oBAATA,CAA8BL,QAA9B,EAAwCC,UAAxC,EAAoDK,MAApD,EAA4DJ,UAA5D,EAAwE;EAC7E,IAAIF,QAAJ,EAAc;IACZ,KAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,UAApB,EAAgCJ,CAAC,EAAjC,EAAqC;MACnCE,QAAQ,CAACG,QAAT,CAAkBF,UAAU,GAAGH,CAA/B,EAAkCQ,MAAM,CAACR,CAAD,CAAxC;MACAG,UAAU;IACX;EACF;EACD,OAAOA,UAAU,GAAGC,UAApB;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}