{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.S2VisConfigs = exports.defaultLineWidth = exports.defaultElevation = exports.S2TokenAccessor = exports.s2RequiredColumns = exports.S2_TOKEN_FIELDS = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _geoLayers = require(\"@deck.gl/geo-layers\");\nvar _constants = require(\"@kepler.gl/constants\");\nvar _baseLayer = _interopRequireDefault(require(\"../base-layer\"));\nvar _s2LayerIcon = _interopRequireDefault(require(\"./s2-layer-icon\"));\nvar _s2Utils = require(\"./s2-utils\");\nvar _utils = require(\"@kepler.gl/utils\");\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar zoomFactorValue = 8;\nvar S2_TOKEN_FIELDS = {\n  token: ['s2', 's2_token']\n};\nexports.S2_TOKEN_FIELDS = S2_TOKEN_FIELDS;\nvar s2RequiredColumns = ['token'];\nexports.s2RequiredColumns = s2RequiredColumns;\nvar S2TokenAccessor = function S2TokenAccessor(_ref) {\n  var token = _ref.token;\n  return function (dc) {\n    return function (d) {\n      return dc.valueAt(d.index, token.fieldIdx);\n    };\n  };\n};\nexports.S2TokenAccessor = S2TokenAccessor;\nvar defaultElevation = 500;\nexports.defaultElevation = defaultElevation;\nvar defaultLineWidth = 1;\nexports.defaultLineWidth = defaultLineWidth;\nvar S2VisConfigs = {\n  // Filled color\n  opacity: 'opacity',\n  colorRange: 'colorRange',\n  filled: _objectSpread(_objectSpread({}, _constants.LAYER_VIS_CONFIGS.filled), {}, {\n    type: 'boolean',\n    label: 'Fill Color',\n    defaultValue: true,\n    property: 'filled'\n  }),\n  // stroke\n  thickness: _objectSpread(_objectSpread({}, _constants.LAYER_VIS_CONFIGS.thickness), {}, {\n    defaultValue: 0.5\n  }),\n  strokeColor: 'strokeColor',\n  strokeColorRange: 'strokeColorRange',\n  sizeRange: 'strokeWidthRange',\n  stroked: 'stroked',\n  // height\n  enable3d: 'enable3d',\n  elevationScale: 'elevationScale',\n  enableElevationZoomFactor: 'enableElevationZoomFactor',\n  heightRange: 'elevationRange',\n  // wireframe\n  wireframe: 'wireframe'\n};\nexports.S2VisConfigs = S2VisConfigs;\nvar S2GeometryLayer = /*#__PURE__*/function (_Layer) {\n  (0, _inherits2[\"default\"])(S2GeometryLayer, _Layer);\n  var _super = _createSuper(S2GeometryLayer);\n  function S2GeometryLayer(props) {\n    var _this;\n    (0, _classCallCheck2[\"default\"])(this, S2GeometryLayer);\n    _this = _super.call(this, props);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"dataToFeature\", void 0);\n    _this.registerVisConfig(S2VisConfigs);\n    _this.getPositionAccessor = function (dataContainer) {\n      return S2TokenAccessor(_this.config.columns)(dataContainer);\n    };\n    return _this;\n  }\n  (0, _createClass2[\"default\"])(S2GeometryLayer, [{\n    key: \"type\",\n    get: function get() {\n      return 's2';\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'S2';\n    }\n  }, {\n    key: \"requiredLayerColumns\",\n    get: function get() {\n      return s2RequiredColumns;\n    }\n  }, {\n    key: \"layerIcon\",\n    get: function get() {\n      return _s2LayerIcon[\"default\"];\n    }\n  }, {\n    key: \"visualChannels\",\n    get: function get() {\n      var visualChannels = (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(S2GeometryLayer.prototype), \"visualChannels\", this);\n      return {\n        color: _objectSpread(_objectSpread({}, visualChannels.color), {}, {\n          accessor: 'getFillColor'\n        }),\n        size: _objectSpread(_objectSpread({}, visualChannels.size), {}, {\n          property: 'stroke',\n          accessor: 'getLineWidth',\n          condition: function condition(config) {\n            return config.visConfig.stroked;\n          },\n          defaultValue: defaultLineWidth\n        }),\n        strokeColor: {\n          property: 'strokeColor',\n          field: 'strokeColorField',\n          scale: 'strokeColorScale',\n          domain: 'strokeColorDomain',\n          range: 'strokeColorRange',\n          key: 'strokeColor',\n          channelScaleType: _constants.CHANNEL_SCALES.color,\n          accessor: 'getLineColor',\n          condition: function condition(config) {\n            return config.visConfig.stroked;\n          },\n          nullValue: visualChannels.color.nullValue,\n          defaultValue: function defaultValue(config) {\n            return config.visConfig.strokeColor || config.color;\n          }\n        },\n        height: {\n          property: 'height',\n          field: 'heightField',\n          scale: 'heightScale',\n          domain: 'heightDomain',\n          range: 'heightRange',\n          key: 'height',\n          channelScaleType: _constants.CHANNEL_SCALES.size,\n          accessor: 'getElevation',\n          condition: function condition(config) {\n            return config.visConfig.enable3d;\n          },\n          nullValue: 0,\n          defaultValue: defaultElevation\n        }\n      };\n    }\n  }, {\n    key: \"getDefaultLayerConfig\",\n    value: function getDefaultLayerConfig() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _objectSpread(_objectSpread({}, (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(S2GeometryLayer.prototype), \"getDefaultLayerConfig\", this).call(this, props)), {}, {\n        // add height visual channel\n        heightField: null,\n        heightDomain: [0, 1],\n        heightScale: 'linear',\n        // add stroke color visual channel\n        strokeColorField: null,\n        strokeColorDomain: [0, 1],\n        strokeColorScale: 'quantile'\n      });\n    }\n  }, {\n    key: \"calculateDataAttribute\",\n    value: function calculateDataAttribute(_ref2, getS2Token) {\n      var dataContainer = _ref2.dataContainer,\n        filteredIndex = _ref2.filteredIndex;\n      var data = [];\n      for (var i = 0; i < filteredIndex.length; i++) {\n        var index = filteredIndex[i];\n        var token = getS2Token({\n          index: index\n        });\n        if ((0, _s2Utils.validS2Token)(token)) {\n          data.push({\n            index: index,\n            token: token\n          });\n        }\n      }\n      return data;\n    }\n  }, {\n    key: \"updateLayerMeta\",\n    value: function updateLayerMeta(dataContainer, getS2Token) {\n      // add safe row flag\n      var centroids = dataContainer.reduce(function (acc, entry, index) {\n        var s2Token = getS2Token({\n          index: index\n        });\n        if ((0, _s2Utils.validS2Token)(s2Token)) {\n          acc.push((0, _s2Utils.getS2Center)(s2Token));\n        }\n        return acc;\n      }, [], true);\n      var centroidsDataContainer = (0, _utils.createDataContainer)(centroids);\n      var bounds = this.getPointsBounds(centroidsDataContainer, function (d, dc) {\n        return [dc.valueAt(d.index, 0), dc.valueAt(d.index, 1)];\n      });\n      this.dataToFeature = {\n        centroids: centroids\n      };\n      this.updateMeta({\n        bounds: bounds\n      });\n    }\n  }, {\n    key: \"formatLayerData\",\n    value: function formatLayerData(datasets, oldLayerData) {\n      var opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (this.config.dataId === null) {\n        return {};\n      }\n      var _datasets$this$config = datasets[this.config.dataId],\n        gpuFilter = _datasets$this$config.gpuFilter,\n        dataContainer = _datasets$this$config.dataContainer;\n      var getS2Token = this.getPositionAccessor(dataContainer);\n      var _this$updateData = this.updateData(datasets, oldLayerData),\n        data = _this$updateData.data;\n      var accessors = this.getAttributeAccessors({\n        dataContainer: dataContainer\n      });\n      return _objectSpread({\n        data: data,\n        getS2Token: getS2Token,\n        getFilterValue: gpuFilter.filterValueAccessor(dataContainer)()\n      }, accessors);\n    }\n  }, {\n    key: \"renderLayer\",\n    value: function renderLayer(opts) {\n      var data = opts.data,\n        gpuFilter = opts.gpuFilter,\n        interactionConfig = opts.interactionConfig,\n        mapState = opts.mapState;\n      var defaultLayerProps = this.getDefaultDeckLayerProps(opts);\n      var eleZoomFactor = this.getElevationZoomFactor(mapState);\n      var zoomFactor = this.getZoomFactor(mapState);\n      var config = this.config;\n      var visConfig = config.visConfig;\n      var updateTriggers = _objectSpread(_objectSpread({}, this.getVisualChannelUpdateTriggers()), {}, {\n        getFilterValue: gpuFilter.filterValueUpdateTriggers\n      });\n      return [new _geoLayers.S2Layer(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, defaultLayerProps), interactionConfig), data), {}, {\n        getS2Token: function getS2Token(d) {\n          return d.token;\n        },\n        autoHighlight: visConfig.enable3d,\n        highlightColor: _constants.HIGHLIGH_COLOR_3D,\n        // stroke\n        lineWidthScale: visConfig.thickness * zoomFactor * zoomFactorValue,\n        stroked: visConfig.stroked,\n        lineMiterLimit: 2,\n        // Filled color\n        filled: visConfig.filled,\n        opacity: visConfig.opacity,\n        wrapLongitude: false,\n        // Elevation\n        elevationScale: visConfig.elevationScale * eleZoomFactor,\n        extruded: visConfig.enable3d,\n        wireframe: visConfig.wireframe,\n        pickable: true,\n        updateTriggers: updateTriggers\n      }))];\n    }\n  }], [{\n    key: \"findDefaultLayerProps\",\n    value: function findDefaultLayerProps(_ref3) {\n      var _ref3$fields = _ref3.fields,\n        fields = _ref3$fields === void 0 ? [] : _ref3$fields;\n      var foundColumns = this.findDefaultColumnField(S2_TOKEN_FIELDS, fields);\n      if (!foundColumns || !foundColumns.length) {\n        return {\n          props: []\n        };\n      }\n      return {\n        props: foundColumns.map(function (columns) {\n          return {\n            isVisible: true,\n            label: 'S2',\n            columns: columns\n          };\n        })\n      };\n    }\n  }]);\n  return S2GeometryLayer;\n}(_baseLayer[\"default\"]);\nexports[\"default\"] = S2GeometryLayer;","map":{"version":3,"names":["value","exports","S2VisConfigs","defaultLineWidth","defaultElevation","S2TokenAccessor","s2RequiredColumns","S2_TOKEN_FIELDS","_classCallCheck2","_interopRequireDefault","require","_createClass2","_assertThisInitialized2","_get2","_geoLayers","_constants","_s2Utils","_utils","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","prototype","valueOf","call","e","_objectSpread","target","i","length","source","ownKeys","Object","forEach","key","_defineProperty2","getOwnPropertyDescriptors","defineProperties","defineProperty","getOwnPropertyDescriptor","zoomFactorValue","token","_ref","dc","d","valueAt","index","fieldIdx","opacity","colorRange","filled","LAYER_VIS_CONFIGS","type","property","strokeColor","sizeRange","stroked","elevationScale","heightRange","wireframe","S2GeometryLayer","props","_this","_super","getPositionAccessor","dataContainer","config","columns","get","_s2LayerIcon","visualChannels","color","accessor","size","condition","visConfig","defaultValue","field","scale","domain","range","channelScaleType","CHANNEL_SCALES","nullValue","height","enable3d","getDefaultLayerConfig","undefined","heightField","heightScale","strokeColorField","strokeColorDomain","strokeColorScale","calculateDataAttribute","_ref2","getS2Token","filteredIndex","validS2Token","data","push","updateLayerMeta","updateMeta","centroids","reduce","acc","entry","s2Token","centroidsDataContainer","createDataContainer","bounds","getPointsBounds","formatLayerData","datasets","oldLayerData","opt","dataId","_datasets$this$config","gpuFilter","_this$updateData","updateData","accessors","getAttributeAccessors","getFilterValue","filterValueAccessor","renderLayer","opts","interactionConfig","mapState","defaultLayerProps","getDefaultDeckLayerProps","eleZoomFactor","getElevationZoomFactor","zoomFactor","getZoomFactor","updateTriggers","getVisualChannelUpdateTriggers","filterValueUpdateTriggers","S2Layer","highlightColor","HIGHLIGH_COLOR_3D","lineWidthScale","thickness","lineMiterLimit","wrapLongitude","extruded","pickable","findDefaultLayerProps","_ref3","foundColumns"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/layers/src/s2-geometry-layer/s2-geometry-layer.ts"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {S2Layer} from '@deck.gl/geo-layers';\nimport {\n  HIGHLIGH_COLOR_3D,\n  CHANNEL_SCALES,\n  ColorRange,\n  LAYER_VIS_CONFIGS\n} from '@kepler.gl/constants';\nimport {default as KeplerTable} from '@kepler.gl/table';\nimport Layer, {\n  LayerBaseConfig,\n  LayerColorConfig,\n  LayerColumn,\n  LayerSizeConfig,\n  LayerStrokeColorConfig,\n  LayerHeightConfig\n} from '../base-layer';\nimport {\n  Merge,\n  RGBColor,\n  VisConfigBoolean,\n  VisConfigColorRange,\n  VisConfigColorSelect,\n  VisConfigNumber,\n  VisConfigRange\n} from '@kepler.gl/types';\nimport S2LayerIcon from './s2-layer-icon';\nimport {getS2Center, validS2Token} from './s2-utils';\nimport {DataContainerInterface, createDataContainer} from '@kepler.gl/utils';\n\nexport type S2GeometryLayerVisConfigSettings = {\n  opacity: VisConfigNumber;\n  colorRange: VisConfigColorRange;\n  filled: VisConfigBoolean;\n  thickness: VisConfigNumber;\n  strokeColor: VisConfigColorSelect;\n  strokeColorRange: VisConfigColorRange;\n  sizeRange: VisConfigRange;\n  stroked: VisConfigBoolean;\n  enable3d: VisConfigBoolean;\n  elevationScale: VisConfigNumber;\n  enableElevationZoomFactor: VisConfigBoolean;\n  heightRange: VisConfigRange;\n  wireframe: VisConfigBoolean;\n};\n\nexport type S2GeometryLayerColumnsConfig = {\n  token: LayerColumn;\n};\n\nexport type S2GeometryLayerVisConfig = {\n  opacity: number;\n  colorRange: ColorRange;\n  filled: boolean;\n  thickness: number;\n  strokeColor: RGBColor;\n  strokeColorRange: ColorRange;\n  sizeRange: [number, number];\n  stroked: boolean;\n  enable3d: boolean;\n  elevationScale: number;\n  enableElevationZoomFactor: boolean;\n  heightRange: [number, number];\n  wireframe: boolean;\n};\n\nexport type S2GeometryLayerVisualChannelConfig = LayerColorConfig &\n  LayerSizeConfig &\n  LayerStrokeColorConfig &\n  LayerHeightConfig;\nexport type S2GeometryLayerConfig = Merge<\n  LayerBaseConfig,\n  {columns: S2GeometryLayerColumnsConfig; visConfig: S2GeometryLayerVisConfig}\n> &\n  S2GeometryLayerVisualChannelConfig;\n\nexport type S2GeometryLayerData = {\n  index: number;\n  token: any;\n};\n\nconst zoomFactorValue = 8;\n\nexport const S2_TOKEN_FIELDS: {\n  token: ['s2', 's2_token'];\n} = {\n  token: ['s2', 's2_token']\n};\n\nexport const s2RequiredColumns: ['token'] = ['token'];\nexport const S2TokenAccessor = ({token}: S2GeometryLayerColumnsConfig) => (\n  dc: DataContainerInterface\n) => d => dc.valueAt(d.index, token.fieldIdx);\n\nexport const defaultElevation = 500;\nexport const defaultLineWidth = 1;\n\nexport const S2VisConfigs: {\n  // Filled color\n  opacity: 'opacity';\n  colorRange: 'colorRange';\n  filled: VisConfigBoolean;\n\n  // stroke\n  thickness: VisConfigNumber;\n  strokeColor: 'strokeColor';\n  strokeColorRange: 'strokeColorRange';\n  sizeRange: 'strokeWidthRange';\n  stroked: 'stroked';\n\n  // height\n  enable3d: 'enable3d';\n  elevationScale: 'elevationScale';\n  enableElevationZoomFactor: 'enableElevationZoomFactor';\n  heightRange: 'elevationRange';\n\n  // wireframe\n  wireframe: 'wireframe';\n} = {\n  // Filled color\n  opacity: 'opacity',\n  colorRange: 'colorRange',\n  filled: {\n    ...LAYER_VIS_CONFIGS.filled,\n    type: 'boolean',\n    label: 'Fill Color',\n    defaultValue: true,\n    property: 'filled'\n  },\n\n  // stroke\n  thickness: {\n    ...LAYER_VIS_CONFIGS.thickness,\n    defaultValue: 0.5\n  },\n  strokeColor: 'strokeColor',\n  strokeColorRange: 'strokeColorRange',\n  sizeRange: 'strokeWidthRange',\n  stroked: 'stroked',\n\n  // height\n  enable3d: 'enable3d',\n  elevationScale: 'elevationScale',\n  enableElevationZoomFactor: 'enableElevationZoomFactor',\n  heightRange: 'elevationRange',\n\n  // wireframe\n  wireframe: 'wireframe'\n};\n\nexport default class S2GeometryLayer extends Layer {\n  dataToFeature: any;\n  declare visConfigSettings: S2GeometryLayerVisConfigSettings;\n  declare config: S2GeometryLayerConfig;\n  constructor(props) {\n    super(props);\n    this.registerVisConfig(S2VisConfigs);\n    this.getPositionAccessor = (dataContainer: DataContainerInterface) =>\n      S2TokenAccessor(this.config.columns)(dataContainer);\n  }\n\n  get type(): 's2' {\n    return 's2';\n  }\n\n  get name(): 'S2' {\n    return 'S2';\n  }\n\n  get requiredLayerColumns() {\n    return s2RequiredColumns;\n  }\n\n  get layerIcon() {\n    return S2LayerIcon;\n  }\n\n  get visualChannels() {\n    const visualChannels = super.visualChannels;\n    return {\n      color: {\n        ...visualChannels.color,\n        accessor: 'getFillColor'\n      },\n      size: {\n        ...visualChannels.size,\n        property: 'stroke',\n        accessor: 'getLineWidth',\n        condition: config => config.visConfig.stroked,\n        defaultValue: defaultLineWidth\n      },\n      strokeColor: {\n        property: 'strokeColor',\n        field: 'strokeColorField',\n        scale: 'strokeColorScale',\n        domain: 'strokeColorDomain',\n        range: 'strokeColorRange',\n        key: 'strokeColor',\n        channelScaleType: CHANNEL_SCALES.color,\n        accessor: 'getLineColor',\n        condition: config => config.visConfig.stroked,\n        nullValue: visualChannels.color.nullValue,\n        defaultValue: config => config.visConfig.strokeColor || config.color\n      },\n      height: {\n        property: 'height',\n        field: 'heightField',\n        scale: 'heightScale',\n        domain: 'heightDomain',\n        range: 'heightRange',\n        key: 'height',\n        channelScaleType: CHANNEL_SCALES.size,\n        accessor: 'getElevation',\n        condition: config => config.visConfig.enable3d,\n        nullValue: 0,\n        defaultValue: defaultElevation\n      }\n    };\n  }\n\n  getDefaultLayerConfig(props = {}) {\n    return {\n      ...super.getDefaultLayerConfig(props),\n\n      // add height visual channel\n      heightField: null,\n      heightDomain: [0, 1],\n      heightScale: 'linear',\n\n      // add stroke color visual channel\n      strokeColorField: null,\n      strokeColorDomain: [0, 1],\n      strokeColorScale: 'quantile'\n    };\n  }\n\n  static findDefaultLayerProps({fields = []}: KeplerTable) {\n    const foundColumns = this.findDefaultColumnField(S2_TOKEN_FIELDS, fields);\n    if (!foundColumns || !foundColumns.length) {\n      return {props: []};\n    }\n\n    return {\n      props: foundColumns.map(columns => ({\n        isVisible: true,\n        label: 'S2',\n        columns\n      }))\n    };\n  }\n\n  calculateDataAttribute({dataContainer, filteredIndex}: KeplerTable, getS2Token) {\n    const data: S2GeometryLayerData[] = [];\n    for (let i = 0; i < filteredIndex.length; i++) {\n      const index = filteredIndex[i];\n      const token = getS2Token({index});\n      if (validS2Token(token)) {\n        data.push({\n          index,\n          token\n        });\n      }\n    }\n    return data;\n  }\n\n  updateLayerMeta(dataContainer, getS2Token) {\n    // add safe row flag\n    const centroids = dataContainer.reduce(\n      (acc, entry, index) => {\n        const s2Token = getS2Token({index});\n        if (validS2Token(s2Token)) {\n          acc.push(getS2Center(s2Token));\n        }\n\n        return acc;\n      },\n      [],\n      true\n    );\n\n    const centroidsDataContainer = createDataContainer(centroids);\n    const bounds = this.getPointsBounds(centroidsDataContainer, (d, dc) => [\n      dc.valueAt(d.index, 0),\n      dc.valueAt(d.index, 1)\n    ]);\n    this.dataToFeature = {centroids};\n    this.updateMeta({bounds});\n  }\n\n  formatLayerData(datasets, oldLayerData, opt = {}) {\n    if (this.config.dataId === null) {\n      return {};\n    }\n    const {gpuFilter, dataContainer} = datasets[this.config.dataId];\n    const getS2Token = this.getPositionAccessor(dataContainer);\n    const {data} = this.updateData(datasets, oldLayerData);\n\n    const accessors = this.getAttributeAccessors({dataContainer});\n\n    return {\n      data,\n      getS2Token,\n      getFilterValue: gpuFilter.filterValueAccessor(dataContainer)(),\n      ...accessors\n    };\n  }\n\n  renderLayer(opts) {\n    const {data, gpuFilter, interactionConfig, mapState} = opts;\n\n    const defaultLayerProps = this.getDefaultDeckLayerProps(opts);\n\n    const eleZoomFactor = this.getElevationZoomFactor(mapState);\n    const zoomFactor = this.getZoomFactor(mapState);\n    const {config} = this;\n    const {visConfig} = config;\n\n    const updateTriggers = {\n      ...this.getVisualChannelUpdateTriggers(),\n      getFilterValue: gpuFilter.filterValueUpdateTriggers\n    };\n\n    return [\n      new S2Layer({\n        ...defaultLayerProps,\n        ...interactionConfig,\n        ...data,\n        getS2Token: (d: any) => d.token,\n\n        autoHighlight: visConfig.enable3d,\n        highlightColor: HIGHLIGH_COLOR_3D,\n\n        // stroke\n        lineWidthScale: visConfig.thickness * zoomFactor * zoomFactorValue,\n        stroked: visConfig.stroked,\n        lineMiterLimit: 2,\n\n        // Filled color\n        filled: visConfig.filled,\n        opacity: visConfig.opacity,\n        wrapLongitude: false,\n\n        // Elevation\n        elevationScale: visConfig.elevationScale * eleZoomFactor,\n        extruded: visConfig.enable3d,\n\n        wireframe: visConfig.wireframe,\n\n        pickable: true,\n\n        updateTriggers\n      })\n    ];\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}