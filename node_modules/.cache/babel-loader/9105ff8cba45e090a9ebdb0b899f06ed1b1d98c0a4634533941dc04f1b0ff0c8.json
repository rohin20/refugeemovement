{"ast":null,"code":"import _slicedToArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Matrix4 } from '@math.gl/core';\nimport Viewport from './viewport';\nimport { PROJECTION_MODE } from '../lib/constants';\nimport * as vec3 from 'gl-matrix/vec3';\nimport * as vec4 from 'gl-matrix/vec4';\nvar DEGREES_TO_RADIANS = Math.PI / 180;\nvar RADIANS_TO_DEGREES = 180 / Math.PI;\nvar EARTH_RADIUS = 6370972;\nvar GLOBE_RADIUS = 256;\nfunction getDistanceScales() {\n  var unitsPerMeter = GLOBE_RADIUS / EARTH_RADIUS;\n  var unitsPerDegree = Math.PI / 180 * GLOBE_RADIUS;\n  return {\n    unitsPerMeter: [unitsPerMeter, unitsPerMeter, unitsPerMeter],\n    unitsPerMeter2: [0, 0, 0],\n    metersPerUnit: [1 / unitsPerMeter, 1 / unitsPerMeter, 1 / unitsPerMeter],\n    unitsPerDegree: [unitsPerDegree, unitsPerDegree, unitsPerMeter],\n    unitsPerDegree2: [0, 0, 0],\n    degreesPerUnit: [1 / unitsPerDegree, 1 / unitsPerDegree, 1 / unitsPerMeter]\n  };\n}\nvar GlobeViewport = /*#__PURE__*/function (_Viewport) {\n  _inherits(GlobeViewport, _Viewport);\n  var _super = _createSuper(GlobeViewport);\n  function GlobeViewport() {\n    var _this;\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, GlobeViewport);\n    var _opts$latitude = opts.latitude,\n      latitude = _opts$latitude === void 0 ? 0 : _opts$latitude,\n      _opts$longitude = opts.longitude,\n      longitude = _opts$longitude === void 0 ? 0 : _opts$longitude,\n      _opts$zoom = opts.zoom,\n      zoom = _opts$zoom === void 0 ? 0 : _opts$zoom,\n      _opts$nearZMultiplier = opts.nearZMultiplier,\n      nearZMultiplier = _opts$nearZMultiplier === void 0 ? 0.1 : _opts$nearZMultiplier,\n      _opts$farZMultiplier = opts.farZMultiplier,\n      farZMultiplier = _opts$farZMultiplier === void 0 ? 2 : _opts$farZMultiplier,\n      _opts$resolution = opts.resolution,\n      resolution = _opts$resolution === void 0 ? 10 : _opts$resolution;\n    var height = opts.height,\n      _opts$altitude = opts.altitude,\n      altitude = _opts$altitude === void 0 ? 1.5 : _opts$altitude;\n    height = height || 1;\n    altitude = Math.max(0.75, altitude);\n    var viewMatrix = new Matrix4().lookAt({\n      eye: [0, -altitude, 0],\n      up: [0, 0, 1]\n    });\n    var scale = Math.pow(2, zoom);\n    viewMatrix.rotateX(latitude * DEGREES_TO_RADIANS);\n    viewMatrix.rotateZ(-longitude * DEGREES_TO_RADIANS);\n    viewMatrix.scale(scale / height);\n    var halfFov = Math.atan(0.5 / altitude);\n    var relativeScale = GLOBE_RADIUS * 2 * scale / height;\n    _this = _super.call(this, _objectSpread(_objectSpread({}, opts), {}, {\n      height: height,\n      viewMatrix: viewMatrix,\n      longitude: longitude,\n      latitude: latitude,\n      zoom: zoom,\n      distanceScales: getDistanceScales(),\n      fovyRadians: halfFov * 2,\n      focalDistance: altitude,\n      near: nearZMultiplier,\n      far: Math.min(2, 1 / relativeScale + 1) * altitude * farZMultiplier\n    }));\n    _defineProperty(_assertThisInitialized(_this), \"longitude\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"latitude\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"resolution\", void 0);\n    _this.latitude = latitude;\n    _this.longitude = longitude;\n    _this.resolution = resolution;\n    return _this;\n  }\n  _createClass(GlobeViewport, [{\n    key: \"projectionMode\",\n    get: function get() {\n      return PROJECTION_MODE.GLOBE;\n    }\n  }, {\n    key: \"getDistanceScales\",\n    value: function getDistanceScales() {\n      return this.distanceScales;\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var unprojectOption = {\n        targetZ: options.z || 0\n      };\n      var left = this.unproject([0, this.height / 2], unprojectOption);\n      var top = this.unproject([this.width / 2, 0], unprojectOption);\n      var right = this.unproject([this.width, this.height / 2], unprojectOption);\n      var bottom = this.unproject([this.width / 2, this.height], unprojectOption);\n      if (right[0] < this.longitude) right[0] += 360;\n      if (left[0] > this.longitude) left[0] -= 360;\n      return [Math.min(left[0], right[0], top[0], bottom[0]), Math.min(left[1], right[1], top[1], bottom[1]), Math.max(left[0], right[0], top[0], bottom[0]), Math.max(left[1], right[1], top[1], bottom[1])];\n    }\n  }, {\n    key: \"unproject\",\n    value: function unproject(xyz) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$topLeft = _ref.topLeft,\n        topLeft = _ref$topLeft === void 0 ? true : _ref$topLeft,\n        targetZ = _ref.targetZ;\n      var _xyz = _slicedToArray(xyz, 3),\n        x = _xyz[0],\n        y = _xyz[1],\n        z = _xyz[2];\n      var y2 = topLeft ? y : this.height - y;\n      var pixelUnprojectionMatrix = this.pixelUnprojectionMatrix;\n      var coord;\n      if (Number.isFinite(z)) {\n        coord = transformVector(pixelUnprojectionMatrix, [x, y2, z, 1]);\n      } else {\n        var coord0 = transformVector(pixelUnprojectionMatrix, [x, y2, -1, 1]);\n        var coord1 = transformVector(pixelUnprojectionMatrix, [x, y2, 1, 1]);\n        var lt = ((targetZ || 0) / EARTH_RADIUS + 1) * GLOBE_RADIUS;\n        var lSqr = vec3.sqrLen(vec3.sub([], coord0, coord1));\n        var l0Sqr = vec3.sqrLen(coord0);\n        var l1Sqr = vec3.sqrLen(coord1);\n        var sSqr = (4 * l0Sqr * l1Sqr - Math.pow(lSqr - l0Sqr - l1Sqr, 2)) / 16;\n        var dSqr = 4 * sSqr / lSqr;\n        var r0 = Math.sqrt(l0Sqr - dSqr);\n        var dr = Math.sqrt(Math.max(0, lt * lt - dSqr));\n        var t = (r0 - dr) / Math.sqrt(lSqr);\n        coord = vec3.lerp([], coord0, coord1, t);\n      }\n      var _this$unprojectPositi = this.unprojectPosition(coord),\n        _this$unprojectPositi2 = _slicedToArray(_this$unprojectPositi, 3),\n        X = _this$unprojectPositi2[0],\n        Y = _this$unprojectPositi2[1],\n        Z = _this$unprojectPositi2[2];\n      if (Number.isFinite(z)) {\n        return [X, Y, Z];\n      }\n      return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n    }\n  }, {\n    key: \"projectPosition\",\n    value: function projectPosition(xyz) {\n      var _xyz2 = _slicedToArray(xyz, 3),\n        lng = _xyz2[0],\n        lat = _xyz2[1],\n        _xyz2$ = _xyz2[2],\n        Z = _xyz2$ === void 0 ? 0 : _xyz2$;\n      var lambda = lng * DEGREES_TO_RADIANS;\n      var phi = lat * DEGREES_TO_RADIANS;\n      var cosPhi = Math.cos(phi);\n      var D = (Z / EARTH_RADIUS + 1) * GLOBE_RADIUS;\n      return [Math.sin(lambda) * cosPhi * D, -Math.cos(lambda) * cosPhi * D, Math.sin(phi) * D];\n    }\n  }, {\n    key: \"unprojectPosition\",\n    value: function unprojectPosition(xyz) {\n      var _xyz3 = _slicedToArray(xyz, 3),\n        x = _xyz3[0],\n        y = _xyz3[1],\n        z = _xyz3[2];\n      var D = vec3.len(xyz);\n      var phi = Math.asin(z / D);\n      var lambda = Math.atan2(x, -y);\n      var lng = lambda * RADIANS_TO_DEGREES;\n      var lat = phi * RADIANS_TO_DEGREES;\n      var Z = (D / GLOBE_RADIUS - 1) * EARTH_RADIUS;\n      return [lng, lat, Z];\n    }\n  }, {\n    key: \"projectFlat\",\n    value: function projectFlat(xyz) {\n      return xyz;\n    }\n  }, {\n    key: \"unprojectFlat\",\n    value: function unprojectFlat(xyz) {\n      return xyz;\n    }\n  }, {\n    key: \"panByPosition\",\n    value: function panByPosition(coords, pixel) {\n      var fromPosition = this.unproject(pixel);\n      return {\n        longitude: coords[0] - fromPosition[0] + this.longitude,\n        latitude: coords[1] - fromPosition[1] + this.latitude\n      };\n    }\n  }]);\n  return GlobeViewport;\n}(Viewport);\nexport { GlobeViewport as default };\nfunction transformVector(matrix, vector) {\n  var result = vec4.transformMat4([], vector, matrix);\n  vec4.scale(result, result, 1 / result[3]);\n  return result;\n}","map":{"version":3,"names":["Matrix4","Viewport","PROJECTION_MODE","vec3","vec4","DEGREES_TO_RADIANS","Math","PI","RADIANS_TO_DEGREES","EARTH_RADIUS","GLOBE_RADIUS","getDistanceScales","unitsPerMeter","unitsPerDegree","unitsPerMeter2","metersPerUnit","unitsPerDegree2","degreesPerUnit","GlobeViewport","_Viewport","_inherits","_super","_createSuper","_this","opts","arguments","length","undefined","_classCallCheck","_opts$latitude","latitude","_opts$longitude","longitude","_opts$zoom","zoom","_opts$nearZMultiplier","nearZMultiplier","_opts$farZMultiplier","farZMultiplier","_opts$resolution","resolution","height","_opts$altitude","altitude","max","viewMatrix","lookAt","eye","up","scale","pow","rotateX","rotateZ","halfFov","atan","relativeScale","call","_objectSpread","distanceScales","fovyRadians","focalDistance","near","far","min","_defineProperty","_assertThisInitialized","_createClass","key","get","GLOBE","value","getBounds","options","unprojectOption","targetZ","z","left","unproject","top","width","right","bottom","xyz","_ref","_ref$topLeft","topLeft","_xyz","_slicedToArray","x","y","y2","pixelUnprojectionMatrix","coord","Number","isFinite","transformVector","coord0","coord1","lt","lSqr","sqrLen","sub","l0Sqr","l1Sqr","sSqr","dSqr","r0","sqrt","dr","t","lerp","_this$unprojectPositi","unprojectPosition","_this$unprojectPositi2","X","Y","Z","projectPosition","_xyz2","lng","lat","_xyz2$","lambda","phi","cosPhi","cos","D","sin","_xyz3","len","asin","atan2","projectFlat","unprojectFlat","panByPosition","coords","pixel","fromPosition","default","matrix","vector","result","transformMat4"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/core/src/viewports/globe-viewport.ts"],"sourcesContent":["import {Matrix4} from '@math.gl/core';\nimport Viewport from './viewport';\nimport {PROJECTION_MODE} from '../lib/constants';\n\nimport * as vec3 from 'gl-matrix/vec3';\nimport * as vec4 from 'gl-matrix/vec4';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\nconst RADIANS_TO_DEGREES = 180 / Math.PI;\nconst EARTH_RADIUS = 6370972;\nconst GLOBE_RADIUS = 256;\n\nfunction getDistanceScales() {\n  const unitsPerMeter = GLOBE_RADIUS / EARTH_RADIUS;\n  const unitsPerDegree = (Math.PI / 180) * GLOBE_RADIUS;\n\n  return {\n    unitsPerMeter: [unitsPerMeter, unitsPerMeter, unitsPerMeter],\n    unitsPerMeter2: [0, 0, 0],\n    metersPerUnit: [1 / unitsPerMeter, 1 / unitsPerMeter, 1 / unitsPerMeter],\n    unitsPerDegree: [unitsPerDegree, unitsPerDegree, unitsPerMeter],\n    unitsPerDegree2: [0, 0, 0],\n    degreesPerUnit: [1 / unitsPerDegree, 1 / unitsPerDegree, 1 / unitsPerMeter]\n  };\n}\n\nexport type GlobeViewportOptions = {\n  /** Name of the viewport */\n  id?: string;\n  /** Left offset from the canvas edge, in pixels */\n  x?: number;\n  /** Top offset from the canvas edge, in pixels */\n  y?: number;\n  /** Viewport width in pixels */\n  width?: number;\n  /** Viewport height in pixels */\n  height?: number;\n  /** Longitude in degrees */\n  longitude?: number;\n  /** Latitude in degrees */\n  latitude?: number;\n  /** Camera altitude relative to the viewport height, used to control the FOV. Default `1.5` */\n  altitude?: number;\n  /* Meter offsets of the viewport center from lng, lat */\n  position?: number[];\n  /** Zoom level */\n  zoom?: number;\n  /** Use orthographic projection */\n  orthographic?: boolean;\n  /** Scaler for the near plane, 1 unit equals to the height of the viewport. Default `0.1` */\n  nearZMultiplier?: number;\n  /** Scaler for the far plane, 1 unit equals to the distance from the camera to the edge of the screen. Default `2` */\n  farZMultiplier?: number;\n  /** The resolution at which to turn flat features into 3D meshes, in degrees. Smaller numbers will generate more detailed mesh. Default `10` */\n  resolution?: number;\n};\n\nexport default class GlobeViewport extends Viewport {\n  // @ts-ignore\n  longitude: number;\n  // @ts-ignore\n  latitude: number;\n  resolution: number;\n\n  constructor(opts: GlobeViewportOptions = {}) {\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 0,\n      nearZMultiplier = 0.1,\n      farZMultiplier = 2,\n      resolution = 10\n    } = opts;\n\n    let {height, altitude = 1.5} = opts;\n\n    height = height || 1;\n    altitude = Math.max(0.75, altitude);\n\n    // Calculate view matrix\n    const viewMatrix = new Matrix4().lookAt({eye: [0, -altitude, 0], up: [0, 0, 1]});\n    const scale = Math.pow(2, zoom);\n    viewMatrix.rotateX(latitude * DEGREES_TO_RADIANS);\n    viewMatrix.rotateZ(-longitude * DEGREES_TO_RADIANS);\n    viewMatrix.scale(scale / height);\n\n    const halfFov = Math.atan(0.5 / altitude);\n    const relativeScale = (GLOBE_RADIUS * 2 * scale) / height;\n\n    super({\n      ...opts,\n      // x, y, width,\n      height,\n\n      // view matrix\n      viewMatrix,\n      longitude,\n      latitude,\n      zoom,\n\n      // projection matrix parameters\n      distanceScales: getDistanceScales(),\n      fovyRadians: halfFov * 2,\n      focalDistance: altitude,\n      near: nearZMultiplier,\n      far: Math.min(2, 1 / relativeScale + 1) * altitude * farZMultiplier\n    });\n\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.resolution = resolution;\n  }\n\n  get projectionMode() {\n    return PROJECTION_MODE.GLOBE;\n  }\n\n  getDistanceScales() {\n    return this.distanceScales;\n  }\n\n  getBounds(options: {z?: number} = {}): [number, number, number, number] {\n    const unprojectOption = {targetZ: options.z || 0};\n\n    const left = this.unproject([0, this.height / 2], unprojectOption);\n    const top = this.unproject([this.width / 2, 0], unprojectOption);\n    const right = this.unproject([this.width, this.height / 2], unprojectOption);\n    const bottom = this.unproject([this.width / 2, this.height], unprojectOption);\n\n    if (right[0] < this.longitude) right[0] += 360;\n    if (left[0] > this.longitude) left[0] -= 360;\n\n    return [\n      Math.min(left[0], right[0], top[0], bottom[0]),\n      Math.min(left[1], right[1], top[1], bottom[1]),\n      Math.max(left[0], right[0], top[0], bottom[0]),\n      Math.max(left[1], right[1], top[1], bottom[1])\n    ];\n  }\n\n  unproject(\n    xyz: number[],\n    {topLeft = true, targetZ}: {topLeft?: boolean; targetZ?: number} = {}\n  ): number[] {\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const {pixelUnprojectionMatrix} = this;\n\n    let coord;\n    if (Number.isFinite(z)) {\n      // Has depth component\n      coord = transformVector(pixelUnprojectionMatrix, [x, y2, z, 1]);\n    } else {\n      // since we don't know the correct projected z value for the point,\n      // unproject two points to get a line and then find the point on that line that intersects with the sphere\n      const coord0 = transformVector(pixelUnprojectionMatrix, [x, y2, -1, 1]);\n      const coord1 = transformVector(pixelUnprojectionMatrix, [x, y2, 1, 1]);\n\n      const lt = ((targetZ || 0) / EARTH_RADIUS + 1) * GLOBE_RADIUS;\n      const lSqr = vec3.sqrLen(vec3.sub([], coord0, coord1));\n      const l0Sqr = vec3.sqrLen(coord0);\n      const l1Sqr = vec3.sqrLen(coord1);\n      const sSqr = (4 * l0Sqr * l1Sqr - (lSqr - l0Sqr - l1Sqr) ** 2) / 16;\n      const dSqr = (4 * sSqr) / lSqr;\n      const r0 = Math.sqrt(l0Sqr - dSqr);\n      const dr = Math.sqrt(Math.max(0, lt * lt - dSqr));\n      const t = (r0 - dr) / Math.sqrt(lSqr);\n\n      coord = vec3.lerp([], coord0, coord1, t);\n    }\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ as number] : [X, Y];\n  }\n\n  projectPosition(xyz: number[]): [number, number, number] {\n    const [lng, lat, Z = 0] = xyz;\n    const lambda = lng * DEGREES_TO_RADIANS;\n    const phi = lat * DEGREES_TO_RADIANS;\n    const cosPhi = Math.cos(phi);\n    const D = (Z / EARTH_RADIUS + 1) * GLOBE_RADIUS;\n\n    return [Math.sin(lambda) * cosPhi * D, -Math.cos(lambda) * cosPhi * D, Math.sin(phi) * D];\n  }\n\n  unprojectPosition(xyz: number[]): [number, number, number] {\n    const [x, y, z] = xyz;\n    const D = vec3.len(xyz);\n    const phi = Math.asin(z / D);\n    const lambda = Math.atan2(x, -y);\n\n    const lng = lambda * RADIANS_TO_DEGREES;\n    const lat = phi * RADIANS_TO_DEGREES;\n    const Z = (D / GLOBE_RADIUS - 1) * EARTH_RADIUS;\n    return [lng, lat, Z];\n  }\n\n  projectFlat(xyz: number[]): [number, number] {\n    return xyz as [number, number];\n  }\n\n  unprojectFlat(xyz: number[]): [number, number] {\n    return xyz as [number, number];\n  }\n\n  panByPosition(coords: number[], pixel: number[]): GlobeViewportOptions {\n    const fromPosition = this.unproject(pixel);\n    return {\n      longitude: coords[0] - fromPosition[0] + this.longitude,\n      latitude: coords[1] - fromPosition[1] + this.latitude\n    };\n  }\n}\n\nfunction transformVector(matrix: number[], vector: number[]): number[] {\n  const result = vec4.transformMat4([], vector, matrix);\n  vec4.scale(result, result, 1 / result[3]);\n  return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}