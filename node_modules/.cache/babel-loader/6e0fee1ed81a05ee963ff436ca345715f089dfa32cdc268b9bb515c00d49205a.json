{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { log, COORDINATE_SYSTEM } from '@deck.gl/core';\nimport { GeoJsonLayer } from '@deck.gl/layers';\nimport { Matrix4 } from '@math.gl/core';\nimport { MVTWorkerLoader } from '@loaders.gl/mvt';\nimport { binaryToGeojson } from '@loaders.gl/gis';\nimport { ClipExtension } from '@deck.gl/extensions';\nimport TileLayer from '../tile-layer/tile-layer';\nimport { getURLFromTemplate, isGeoBoundingBox, isURLTemplate } from '../tile-layer/utils';\nimport { transform } from './coordinate-transform';\nimport findIndexBinary from './find-index-binary';\nvar WORLD_SIZE = 512;\nvar defaultProps = _objectSpread(_objectSpread({}, GeoJsonLayer.defaultProps), {}, {\n  onDataLoad: {\n    type: 'function',\n    value: null,\n    optional: true,\n    compare: false\n  },\n  uniqueIdProperty: '',\n  highlightedFeatureId: null,\n  loaders: [MVTWorkerLoader],\n  binary: true\n});\nvar MVTLayer = /*#__PURE__*/function (_TileLayer) {\n  _inherits(MVTLayer, _TileLayer);\n  var _super = _createSuper(MVTLayer);\n  function MVTLayer() {\n    _classCallCheck(this, MVTLayer);\n    return _super.apply(this, arguments);\n  }\n  _createClass(MVTLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      _get(_getPrototypeOf(MVTLayer.prototype), \"initializeState\", this).call(this);\n      var binary = this.context.viewport.resolution !== undefined ? false : this.props.binary;\n      this.setState({\n        binary: binary,\n        data: null,\n        tileJSON: null\n      });\n    }\n  }, {\n    key: \"isLoaded\",\n    get: function get() {\n      return this.state && this.state.data && this.state.tileset && _get(_getPrototypeOf(MVTLayer.prototype), \"isLoaded\", this);\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n        oldProps = _ref.oldProps,\n        context = _ref.context,\n        changeFlags = _ref.changeFlags;\n      var _this$state;\n      if (changeFlags.dataChanged) {\n        this._updateTileData();\n      }\n      if ((_this$state = this.state) !== null && _this$state !== void 0 && _this$state.data) {\n        _get(_getPrototypeOf(MVTLayer.prototype), \"updateState\", this).call(this, {\n          props: props,\n          oldProps: oldProps,\n          context: context,\n          changeFlags: changeFlags\n        });\n        this._setWGS84PropertyForTiles();\n      }\n      var highlightColor = props.highlightColor;\n      if (highlightColor !== oldProps.highlightColor && Array.isArray(highlightColor)) {\n        this.setState({\n          highlightColor: highlightColor\n        });\n      }\n    }\n  }, {\n    key: \"_updateTileData\",\n    value: function () {\n      var _updateTileData2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var data, tileJSON, _this$props, onDataLoad, fetch;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              data = this.props.data;\n              tileJSON = null;\n              if (!(typeof data === 'string' && !isURLTemplate(data))) {\n                _context.next = 18;\n                break;\n              }\n              _this$props = this.props, onDataLoad = _this$props.onDataLoad, fetch = _this$props.fetch;\n              this.setState({\n                data: null,\n                tileJSON: null\n              });\n              _context.prev = 5;\n              _context.next = 8;\n              return fetch(data, {\n                propName: 'data',\n                layer: this,\n                loaders: []\n              });\n            case 8:\n              tileJSON = _context.sent;\n              _context.next = 15;\n              break;\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](5);\n              this.raiseError(_context.t0, 'loading TileJSON');\n              data = null;\n            case 15:\n              if (onDataLoad) {\n                onDataLoad(tileJSON, {\n                  propName: 'data',\n                  layer: this\n                });\n              }\n              _context.next = 19;\n              break;\n            case 18:\n              if (data.tilejson) {\n                tileJSON = data;\n              }\n            case 19:\n              if (tileJSON) {\n                data = tileJSON.tiles;\n              }\n              this.setState({\n                data: data,\n                tileJSON: tileJSON\n              });\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[5, 11]]);\n      }));\n      function _updateTileData() {\n        return _updateTileData2.apply(this, arguments);\n      }\n      return _updateTileData;\n    }()\n  }, {\n    key: \"_getTilesetOptions\",\n    value: function _getTilesetOptions() {\n      var opts = _get(_getPrototypeOf(MVTLayer.prototype), \"_getTilesetOptions\", this).call(this);\n      var tileJSON = this.state.tileJSON;\n      var _this$props2 = this.props,\n        minZoom = _this$props2.minZoom,\n        maxZoom = _this$props2.maxZoom;\n      if (tileJSON) {\n        if (Number.isFinite(tileJSON.minzoom) && tileJSON.minzoom > minZoom) {\n          opts.minZoom = tileJSON.minzoom;\n        }\n        if (Number.isFinite(tileJSON.maxzoom) && (!Number.isFinite(maxZoom) || tileJSON.maxzoom < maxZoom)) {\n          opts.maxZoom = tileJSON.maxzoom;\n        }\n      }\n      return opts;\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$state2;\n      if (!((_this$state2 = this.state) !== null && _this$state2 !== void 0 && _this$state2.data)) return null;\n      return _get(_getPrototypeOf(MVTLayer.prototype), \"renderLayers\", this).call(this);\n    }\n  }, {\n    key: \"getTileData\",\n    value: function getTileData(loadProps) {\n      var _loadOptions;\n      var _this$state3 = this.state,\n        data = _this$state3.data,\n        binary = _this$state3.binary;\n      var index = loadProps.index,\n        signal = loadProps.signal;\n      var url = getURLFromTemplate(data, loadProps);\n      if (!url) {\n        return Promise.reject('Invalid URL');\n      }\n      var loadOptions = this.getLoadOptions();\n      var fetch = this.props.fetch;\n      loadOptions = _objectSpread(_objectSpread({}, loadOptions), {}, {\n        mimeType: 'application/x-protobuf',\n        mvt: _objectSpread(_objectSpread({}, (_loadOptions = loadOptions) === null || _loadOptions === void 0 ? void 0 : _loadOptions.mvt), {}, {\n          coordinates: this.context.viewport.resolution ? 'wgs84' : 'local',\n          tileIndex: index\n        }),\n        gis: binary ? {\n          format: 'binary'\n        } : {}\n      });\n      return fetch(url, {\n        propName: 'data',\n        layer: this,\n        loadOptions: loadOptions,\n        signal: signal\n      });\n    }\n  }, {\n    key: \"renderSubLayers\",\n    value: function renderSubLayers(props) {\n      var _props$tile$index = props.tile.index,\n        x = _props$tile$index.x,\n        y = _props$tile$index.y,\n        z = _props$tile$index.z;\n      var worldScale = Math.pow(2, z);\n      var xScale = WORLD_SIZE / worldScale;\n      var yScale = -xScale;\n      var xOffset = WORLD_SIZE * x / worldScale;\n      var yOffset = WORLD_SIZE * (1 - y / worldScale);\n      var modelMatrix = new Matrix4().scale([xScale, yScale, 1]);\n      props.autoHighlight = false;\n      if (!this.context.viewport.resolution) {\n        props.modelMatrix = modelMatrix;\n        props.coordinateOrigin = [xOffset, yOffset, 0];\n        props.coordinateSystem = COORDINATE_SYSTEM.CARTESIAN;\n        props.extensions = [].concat(_toConsumableArray(props.extensions || []), [new ClipExtension()]);\n      }\n      var subLayers = _get(_getPrototypeOf(MVTLayer.prototype), \"renderSubLayers\", this).call(this, props);\n      if (this.state.binary && !(subLayers instanceof GeoJsonLayer)) {\n        log.warn('renderSubLayers() must return GeoJsonLayer when using binary:true')();\n      }\n      return subLayers;\n    }\n  }, {\n    key: \"_updateAutoHighlight\",\n    value: function _updateAutoHighlight(info) {\n      var uniqueIdProperty = this.props.uniqueIdProperty;\n      var _this$state4 = this.state,\n        hoveredFeatureId = _this$state4.hoveredFeatureId,\n        hoveredFeatureLayerName = _this$state4.hoveredFeatureLayerName;\n      var hoveredFeature = info.object;\n      var newHoveredFeatureId;\n      var newHoveredFeatureLayerName;\n      if (hoveredFeature) {\n        newHoveredFeatureId = getFeatureUniqueId(hoveredFeature, uniqueIdProperty);\n        newHoveredFeatureLayerName = getFeatureLayerName(hoveredFeature);\n      }\n      var highlightColor = this.props.highlightColor;\n      if (typeof highlightColor === 'function') {\n        highlightColor = highlightColor(info);\n      }\n      if (hoveredFeatureId !== newHoveredFeatureId || hoveredFeatureLayerName !== newHoveredFeatureLayerName) {\n        this.setState({\n          highlightColor: highlightColor,\n          hoveredFeatureId: newHoveredFeatureId,\n          hoveredFeatureLayerName: newHoveredFeatureLayerName\n        });\n      }\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(params) {\n      var info = _get(_getPrototypeOf(MVTLayer.prototype), \"getPickingInfo\", this).call(this, params);\n      var isWGS84 = Boolean(this.context.viewport.resolution);\n      if (this.state.binary && info.index !== -1) {\n        var data = params.sourceLayer.props.data;\n        info.object = binaryToGeojson(data, {\n          globalFeatureId: info.index\n        });\n      }\n      if (info.object && !isWGS84) {\n        info.object = transformTileCoordsToWGS84(info.object, info.tile.bbox, this.context.viewport);\n      }\n      return info;\n    }\n  }, {\n    key: \"getSubLayerPropsByTile\",\n    value: function getSubLayerPropsByTile(tile) {\n      return {\n        highlightedObjectIndex: this.getHighlightedObjectIndex(tile),\n        highlightColor: this.state.highlightColor\n      };\n    }\n  }, {\n    key: \"getHighlightedObjectIndex\",\n    value: function getHighlightedObjectIndex(tile) {\n      var _this$state5 = this.state,\n        hoveredFeatureId = _this$state5.hoveredFeatureId,\n        hoveredFeatureLayerName = _this$state5.hoveredFeatureLayerName,\n        binary = _this$state5.binary;\n      var _this$props3 = this.props,\n        uniqueIdProperty = _this$props3.uniqueIdProperty,\n        highlightedFeatureId = _this$props3.highlightedFeatureId;\n      var data = tile.content;\n      var isHighlighted = isFeatureIdDefined(highlightedFeatureId);\n      var isFeatureIdPresent = isFeatureIdDefined(hoveredFeatureId) || isHighlighted;\n      if (!isFeatureIdPresent) {\n        return -1;\n      }\n      var featureIdToHighlight = isHighlighted ? highlightedFeatureId : hoveredFeatureId;\n      if (Array.isArray(data)) {\n        return data.findIndex(function (feature) {\n          var isMatchingId = getFeatureUniqueId(feature, uniqueIdProperty) === featureIdToHighlight;\n          var isMatchingLayer = isHighlighted || getFeatureLayerName(feature) === hoveredFeatureLayerName;\n          return isMatchingId && isMatchingLayer;\n        });\n      } else if (data && binary) {\n        return findIndexBinary(data, uniqueIdProperty, featureIdToHighlight, isHighlighted ? '' : hoveredFeatureLayerName);\n      }\n      return -1;\n    }\n  }, {\n    key: \"_pickObjects\",\n    value: function _pickObjects(maxObjects) {\n      var _this$context = this.context,\n        deck = _this$context.deck,\n        viewport = _this$context.viewport;\n      var width = viewport.width;\n      var height = viewport.height;\n      var x = viewport.x;\n      var y = viewport.y;\n      var layerIds = [this.id];\n      return deck.pickObjects({\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        layerIds: layerIds,\n        maxObjects: maxObjects\n      });\n    }\n  }, {\n    key: \"getRenderedFeatures\",\n    value: function getRenderedFeatures() {\n      var maxFeatures = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var features = this._pickObjects(maxFeatures);\n      var featureCache = new Set();\n      var renderedFeatures = [];\n      var _iterator = _createForOfIteratorHelper(features),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var f = _step.value;\n          var featureId = getFeatureUniqueId(f.object, this.props.uniqueIdProperty);\n          if (featureId === undefined) {\n            renderedFeatures.push(f.object);\n          } else if (!featureCache.has(featureId)) {\n            featureCache.add(featureId);\n            renderedFeatures.push(f.object);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return renderedFeatures;\n    }\n  }, {\n    key: \"_setWGS84PropertyForTiles\",\n    value: function _setWGS84PropertyForTiles() {\n      var _this = this;\n      var propName = 'dataInWGS84';\n      var tileset = this.state.tileset;\n      tileset.selectedTiles.forEach(function (tile) {\n        if (!tile.hasOwnProperty(propName)) {\n          Object.defineProperty(tile, propName, {\n            get: function get() {\n              if (!tile.content) {\n                return null;\n              }\n              if (_this.state.binary && Array.isArray(tile.content) && !tile.content.length) {\n                return [];\n              }\n              var bbox = tile.bbox;\n              if (tile._contentWGS84 === undefined && isGeoBoundingBox(bbox)) {\n                var content = _this.state.binary ? binaryToGeojson(tile.content) : tile.content;\n                tile._contentWGS84 = content.map(function (feature) {\n                  return transformTileCoordsToWGS84(feature, bbox, _this.context.viewport);\n                });\n              }\n              return tile._contentWGS84;\n            }\n          });\n        }\n      });\n    }\n  }]);\n  return MVTLayer;\n}(TileLayer);\nexport { MVTLayer as default };\n_defineProperty(MVTLayer, \"layerName\", 'MVTLayer');\n_defineProperty(MVTLayer, \"defaultProps\", defaultProps);\nfunction getFeatureUniqueId(feature, uniqueIdProperty) {\n  if (feature.properties && uniqueIdProperty) {\n    return feature.properties[uniqueIdProperty];\n  }\n  if ('id' in feature) {\n    return feature.id;\n  }\n  return undefined;\n}\nfunction getFeatureLayerName(feature) {\n  var _feature$properties;\n  return ((_feature$properties = feature.properties) === null || _feature$properties === void 0 ? void 0 : _feature$properties.layerName) || null;\n}\nfunction isFeatureIdDefined(value) {\n  return value !== undefined && value !== null && value !== '';\n}\nfunction transformTileCoordsToWGS84(object, bbox, viewport) {\n  var feature = _objectSpread(_objectSpread({}, object), {}, {\n    geometry: {\n      type: object.geometry.type\n    }\n  });\n  Object.defineProperty(feature.geometry, 'coordinates', {\n    get: function get() {\n      var wgs84Geom = transform(object.geometry, bbox, viewport);\n      return wgs84Geom.coordinates;\n    }\n  });\n  return feature;\n}","map":{"version":3,"names":["log","COORDINATE_SYSTEM","GeoJsonLayer","Matrix4","MVTWorkerLoader","binaryToGeojson","ClipExtension","TileLayer","getURLFromTemplate","isGeoBoundingBox","isURLTemplate","transform","findIndexBinary","WORLD_SIZE","defaultProps","_objectSpread","onDataLoad","type","value","optional","compare","uniqueIdProperty","highlightedFeatureId","loaders","binary","MVTLayer","_TileLayer","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","initializeState","_get","_getPrototypeOf","prototype","call","context","viewport","resolution","undefined","props","setState","data","tileJSON","get","state","tileset","updateState","_ref","oldProps","changeFlags","_this$state","dataChanged","_updateTileData","_setWGS84PropertyForTiles","highlightColor","Array","isArray","_updateTileData2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this$props","fetch","wrap","_callee$","_context","prev","next","propName","layer","sent","t0","raiseError","tilejson","tiles","stop","_getTilesetOptions","opts","_this$props2","minZoom","maxZoom","Number","isFinite","minzoom","maxzoom","renderLayers","_this$state2","getTileData","loadProps","_loadOptions","_this$state3","index","signal","url","Promise","reject","loadOptions","getLoadOptions","mimeType","mvt","coordinates","tileIndex","gis","format","renderSubLayers","_props$tile$index","tile","x","y","z","worldScale","Math","pow","xScale","yScale","xOffset","yOffset","modelMatrix","scale","autoHighlight","coordinateOrigin","coordinateSystem","CARTESIAN","extensions","concat","_toConsumableArray","subLayers","warn","_updateAutoHighlight","info","_this$state4","hoveredFeatureId","hoveredFeatureLayerName","hoveredFeature","object","newHoveredFeatureId","newHoveredFeatureLayerName","getFeatureUniqueId","getFeatureLayerName","getPickingInfo","params","isWGS84","Boolean","sourceLayer","globalFeatureId","transformTileCoordsToWGS84","bbox","getSubLayerPropsByTile","highlightedObjectIndex","getHighlightedObjectIndex","_this$state5","_this$props3","content","isHighlighted","isFeatureIdDefined","isFeatureIdPresent","featureIdToHighlight","findIndex","feature","isMatchingId","isMatchingLayer","_pickObjects","maxObjects","_this$context","deck","width","height","layerIds","id","pickObjects","getRenderedFeatures","maxFeatures","length","features","featureCache","Set","renderedFeatures","_iterator","_createForOfIteratorHelper","_step","s","n","done","f","featureId","push","has","add","err","e","_this","selectedTiles","forEach","hasOwnProperty","Object","defineProperty","_contentWGS84","map","default","properties","_feature$properties","layerName","geometry","wgs84Geom"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/geo-layers/src/mvt-layer/mvt-layer.ts"],"sourcesContent":["import {\n  Layer,\n  LayersList,\n  log,\n  PickingInfo,\n  UpdateParameters,\n  GetPickingInfoParams,\n  Viewport,\n  COORDINATE_SYSTEM,\n  DefaultProps\n} from '@deck.gl/core';\nimport {GeoJsonLayer, GeoJsonLayerProps} from '@deck.gl/layers';\nimport {Matrix4} from '@math.gl/core';\nimport {MVTWorkerLoader} from '@loaders.gl/mvt';\nimport {binaryToGeojson} from '@loaders.gl/gis';\nimport {ClipExtension} from '@deck.gl/extensions';\n\nimport type {Loader} from '@loaders.gl/loader-utils';\nimport type {BinaryFeatures} from '@loaders.gl/schema';\nimport type {Feature} from 'geojson';\n\nimport TileLayer, {TiledPickingInfo, TileLayerProps} from '../tile-layer/tile-layer';\nimport Tileset2D, {Tileset2DProps} from '../tile-layer/tileset-2d';\nimport {getURLFromTemplate, isGeoBoundingBox, isURLTemplate} from '../tile-layer/utils';\nimport {GeoBoundingBox, TileLoadProps} from '../tile-layer/types';\nimport Tile2DHeader from '../tile-layer/tile-2d-header';\nimport {transform} from './coordinate-transform';\nimport findIndexBinary from './find-index-binary';\n\nconst WORLD_SIZE = 512;\n\nconst defaultProps: DefaultProps<MVTLayerProps> = {\n  ...GeoJsonLayer.defaultProps,\n  onDataLoad: {type: 'function', value: null, optional: true, compare: false},\n  uniqueIdProperty: '',\n  highlightedFeatureId: null,\n  loaders: [MVTWorkerLoader],\n  binary: true\n};\n\nexport type TileJson = {\n  tilejson: string;\n  tiles: string[];\n  // eslint-disable-next-line camelcase\n  vector_layers: any[];\n  attribution?: string;\n  scheme?: string;\n  maxzoom?: number;\n  minzoom?: number;\n  version?: string;\n};\n\ntype ParsedMvtTile = Feature[] | BinaryFeatures;\n\n/** All props supported by the MVTLayer */\nexport type MVTLayerProps<DataT extends Feature = Feature> = _MVTLayerProps &\n  GeoJsonLayerProps<DataT> &\n  TileLayerProps<ParsedMvtTile>;\n\n/** Props added by the MVTLayer  */\nexport type _MVTLayerProps = {\n  /** Called if `data` is a TileJSON URL when it is successfully fetched. */\n  onDataLoad?: ((tilejson: TileJson | null) => void) | null;\n\n  /** Needed for highlighting a feature split across two or more tiles. */\n  uniqueIdProperty?: string;\n\n  /** A feature with ID corresponding to the supplied value will be highlighted. */\n  highlightedFeatureId?: string | null;\n\n  /**\n   * Use tile data in binary format.\n   *\n   * @default true\n   */\n  binary?: boolean;\n\n  /**\n   * Loaders used to transform tiles into `data` property passed to `renderSubLayers`.\n   *\n   * @default [MVTWorkerLoader] from `@loaders.gl/mvt`\n   */\n  loaders?: Loader[];\n};\n\ntype ContentWGS84Cache = {_contentWGS84?: Feature[]};\n\n/** Render data formatted as [Mapbox Vector Tiles](https://docs.mapbox.com/vector-tiles/specification/). */\nexport default class MVTLayer<DataT extends Feature = Feature, ExtraProps = {}> extends TileLayer<\n  ParsedMvtTile,\n  Required<_MVTLayerProps> & ExtraProps\n> {\n  static layerName = 'MVTLayer';\n  static defaultProps = defaultProps;\n\n  initializeState(): void {\n    super.initializeState();\n    // GlobeView doesn't work well with binary data\n    const binary = this.context.viewport.resolution !== undefined ? false : this.props.binary;\n    this.setState({\n      binary,\n      data: null,\n      tileJSON: null\n    });\n  }\n\n  get isLoaded(): boolean {\n    return this.state && this.state.data && this.state.tileset && super.isLoaded;\n  }\n\n  updateState({props, oldProps, context, changeFlags}: UpdateParameters<this>) {\n    if (changeFlags.dataChanged) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this._updateTileData();\n    }\n\n    if (this.state?.data) {\n      super.updateState({props, oldProps, context, changeFlags});\n      this._setWGS84PropertyForTiles();\n    }\n    const {highlightColor} = props;\n    if (highlightColor !== oldProps.highlightColor && Array.isArray(highlightColor)) {\n      this.setState({highlightColor});\n    }\n  }\n\n  /* eslint-disable complexity */\n  private async _updateTileData(): Promise<void> {\n    let data: any = this.props.data;\n    let tileJSON: any = null;\n\n    if (typeof data === 'string' && !isURLTemplate(data)) {\n      const {onDataLoad, fetch} = this.props;\n      this.setState({data: null, tileJSON: null});\n      try {\n        tileJSON = await fetch(data, {propName: 'data', layer: this, loaders: []});\n      } catch (error: any) {\n        this.raiseError(error, 'loading TileJSON');\n        data = null;\n      }\n\n      if (onDataLoad) {\n        onDataLoad(tileJSON, {propName: 'data', layer: this});\n      }\n    } else if (data.tilejson) {\n      tileJSON = data;\n    }\n\n    if (tileJSON) {\n      data = tileJSON.tiles;\n    }\n\n    this.setState({data, tileJSON});\n  }\n\n  _getTilesetOptions(): Tileset2DProps {\n    const opts = super._getTilesetOptions();\n    const tileJSON: TileJson | null | undefined = this.state.tileJSON;\n    const {minZoom, maxZoom} = this.props;\n\n    if (tileJSON) {\n      if (Number.isFinite(tileJSON.minzoom) && (tileJSON.minzoom as number) > (minZoom as number)) {\n        opts.minZoom = tileJSON.minzoom as number;\n      }\n\n      if (\n        Number.isFinite(tileJSON.maxzoom) &&\n        (!Number.isFinite(maxZoom) || (tileJSON.maxzoom as number) < (maxZoom as number))\n      ) {\n        opts.maxZoom = tileJSON.maxzoom as number;\n      }\n    }\n    return opts;\n  }\n\n  /* eslint-disable complexity */\n\n  renderLayers(): Layer | null | LayersList {\n    if (!this.state?.data) return null;\n    return super.renderLayers();\n  }\n\n  getTileData(loadProps: TileLoadProps): Promise<ParsedMvtTile> {\n    const {data, binary} = this.state;\n    const {index, signal} = loadProps;\n\n    const url = getURLFromTemplate(data, loadProps);\n    if (!url) {\n      return Promise.reject('Invalid URL');\n    }\n    let loadOptions = this.getLoadOptions();\n    const {fetch} = this.props;\n    loadOptions = {\n      ...loadOptions,\n      mimeType: 'application/x-protobuf',\n      mvt: {\n        ...loadOptions?.mvt,\n        coordinates: this.context.viewport.resolution ? 'wgs84' : 'local',\n        tileIndex: index\n        // Local worker debug\n        // workerUrl: `modules/mvt/dist/mvt-loader.worker.js`\n        // Set worker to null to skip web workers\n        // workerUrl: null\n      },\n      gis: binary ? {format: 'binary'} : {}\n    };\n    return fetch(url, {propName: 'data', layer: this, loadOptions, signal});\n  }\n\n  renderSubLayers(\n    props: TileLayer['props'] & {\n      id: string;\n      data: ParsedMvtTile;\n      _offset: number;\n      tile: Tile2DHeader<ParsedMvtTile>;\n    }\n  ): Layer | null | LayersList {\n    const {x, y, z} = props.tile.index;\n    const worldScale = Math.pow(2, z);\n\n    const xScale = WORLD_SIZE / worldScale;\n    const yScale = -xScale;\n\n    const xOffset = (WORLD_SIZE * x) / worldScale;\n    const yOffset = WORLD_SIZE * (1 - y / worldScale);\n\n    const modelMatrix = new Matrix4().scale([xScale, yScale, 1]);\n\n    props.autoHighlight = false;\n\n    if (!this.context.viewport.resolution) {\n      props.modelMatrix = modelMatrix;\n      props.coordinateOrigin = [xOffset, yOffset, 0];\n      props.coordinateSystem = COORDINATE_SYSTEM.CARTESIAN;\n      props.extensions = [...(props.extensions || []), new ClipExtension()];\n    }\n\n    const subLayers = super.renderSubLayers(props);\n\n    if (this.state.binary && !(subLayers instanceof GeoJsonLayer)) {\n      log.warn('renderSubLayers() must return GeoJsonLayer when using binary:true')();\n    }\n\n    return subLayers;\n  }\n\n  protected _updateAutoHighlight(info: PickingInfo): void {\n    const {uniqueIdProperty} = this.props;\n\n    const {hoveredFeatureId, hoveredFeatureLayerName} = this.state;\n    const hoveredFeature = info.object;\n    let newHoveredFeatureId;\n    let newHoveredFeatureLayerName;\n\n    if (hoveredFeature) {\n      newHoveredFeatureId = getFeatureUniqueId(hoveredFeature, uniqueIdProperty);\n      newHoveredFeatureLayerName = getFeatureLayerName(hoveredFeature);\n    }\n    let {highlightColor} = this.props;\n    if (typeof highlightColor === 'function') {\n      highlightColor = highlightColor(info);\n    }\n\n    if (\n      hoveredFeatureId !== newHoveredFeatureId ||\n      hoveredFeatureLayerName !== newHoveredFeatureLayerName\n    ) {\n      this.setState({\n        highlightColor,\n        hoveredFeatureId: newHoveredFeatureId,\n        hoveredFeatureLayerName: newHoveredFeatureLayerName\n      });\n    }\n  }\n\n  getPickingInfo(params: GetPickingInfoParams): TiledPickingInfo {\n    const info = super.getPickingInfo(params);\n\n    const isWGS84 = Boolean(this.context.viewport.resolution);\n\n    if (this.state.binary && info.index !== -1) {\n      const {data} = params.sourceLayer!.props;\n      info.object = binaryToGeojson(data as BinaryFeatures, {globalFeatureId: info.index}) as DataT;\n    }\n    if (info.object && !isWGS84) {\n      info.object = transformTileCoordsToWGS84(\n        info.object,\n        info.tile!.bbox as GeoBoundingBox,\n        this.context.viewport\n      );\n    }\n\n    return info;\n  }\n\n  getSubLayerPropsByTile(tile: Tile2DHeader<ParsedMvtTile>): Record<string, any> {\n    return {\n      highlightedObjectIndex: this.getHighlightedObjectIndex(tile),\n      highlightColor: this.state.highlightColor\n    };\n  }\n\n  private getHighlightedObjectIndex(tile: Tile2DHeader<ParsedMvtTile>): number {\n    const {hoveredFeatureId, hoveredFeatureLayerName, binary} = this.state;\n    const {uniqueIdProperty, highlightedFeatureId} = this.props;\n    const data = tile.content;\n\n    const isHighlighted = isFeatureIdDefined(highlightedFeatureId);\n    const isFeatureIdPresent = isFeatureIdDefined(hoveredFeatureId) || isHighlighted;\n\n    if (!isFeatureIdPresent) {\n      return -1;\n    }\n\n    const featureIdToHighlight = isHighlighted ? highlightedFeatureId : hoveredFeatureId;\n\n    // Iterable data\n    if (Array.isArray(data)) {\n      return data.findIndex(feature => {\n        const isMatchingId = getFeatureUniqueId(feature, uniqueIdProperty) === featureIdToHighlight;\n        const isMatchingLayer =\n          isHighlighted || getFeatureLayerName(feature) === hoveredFeatureLayerName;\n        return isMatchingId && isMatchingLayer;\n      });\n\n      // Non-iterable data\n    } else if (data && binary) {\n      // Get the feature index of the selected item to highlight\n      return findIndexBinary(\n        data,\n        uniqueIdProperty,\n        featureIdToHighlight,\n        isHighlighted ? '' : hoveredFeatureLayerName\n      );\n    }\n\n    return -1;\n  }\n\n  private _pickObjects(maxObjects: number | null): PickingInfo[] {\n    const {deck, viewport} = this.context;\n    const width = viewport.width;\n    const height = viewport.height;\n    const x = viewport.x;\n    const y = viewport.y;\n    const layerIds = [this.id];\n    return deck!.pickObjects({x, y, width, height, layerIds, maxObjects});\n  }\n\n  /** Get the rendered features in the current viewport. */\n  getRenderedFeatures(maxFeatures: number | null = null): DataT[] {\n    const features = this._pickObjects(maxFeatures);\n    const featureCache = new Set();\n    const renderedFeatures: DataT[] = [];\n\n    for (const f of features) {\n      const featureId = getFeatureUniqueId(f.object, this.props.uniqueIdProperty);\n\n      if (featureId === undefined) {\n        // we have no id for the feature, we just add to the list\n        renderedFeatures.push(f.object as DataT);\n      } else if (!featureCache.has(featureId)) {\n        // Add removing duplicates\n        featureCache.add(featureId);\n        renderedFeatures.push(f.object as DataT);\n      }\n    }\n\n    return renderedFeatures;\n  }\n\n  private _setWGS84PropertyForTiles(): void {\n    const propName = 'dataInWGS84';\n    const tileset: Tileset2D = this.state.tileset;\n\n    // @ts-expect-error selectedTiles are always initialized when tile is being processed\n    tileset.selectedTiles.forEach((tile: Tile2DHeader & ContentWGS84Cache) => {\n      if (!tile.hasOwnProperty(propName)) {\n        // eslint-disable-next-line accessor-pairs\n        Object.defineProperty(tile, propName, {\n          get: () => {\n            // Still loading or encountered an error\n            if (!tile.content) {\n              return null;\n            }\n\n            if (this.state.binary && Array.isArray(tile.content) && !tile.content.length) {\n              // TODO: @loaders.gl/mvt returns [] when no content. It should return a valid empty binary.\n              // https://github.com/visgl/loaders.gl/pull/1137\n              return [];\n            }\n\n            const {bbox} = tile;\n            if (tile._contentWGS84 === undefined && isGeoBoundingBox(bbox)) {\n              // Create a cache to transform only once\n\n              const content = this.state.binary ? binaryToGeojson(tile.content) : tile.content;\n              tile._contentWGS84 = content.map(feature =>\n                transformTileCoordsToWGS84(feature, bbox, this.context.viewport)\n              );\n            }\n            return tile._contentWGS84;\n          }\n        });\n      }\n    });\n  }\n}\n\nfunction getFeatureUniqueId(feature: Feature, uniqueIdProperty: string | undefined) {\n  if (feature.properties && uniqueIdProperty) {\n    return feature.properties[uniqueIdProperty];\n  }\n\n  if ('id' in feature) {\n    return feature.id;\n  }\n\n  return undefined;\n}\n\nfunction getFeatureLayerName(feature: Feature): string | null {\n  return feature.properties?.layerName || null;\n}\n\nfunction isFeatureIdDefined(value: unknown): boolean {\n  return value !== undefined && value !== null && value !== '';\n}\n\nfunction transformTileCoordsToWGS84(\n  object: Feature,\n  bbox: GeoBoundingBox,\n  viewport: Viewport\n): Feature {\n  const feature = {\n    ...object,\n    geometry: {\n      type: object.geometry.type\n    }\n  };\n\n  // eslint-disable-next-line accessor-pairs\n  Object.defineProperty(feature.geometry, 'coordinates', {\n    get: () => {\n      const wgs84Geom = transform(object.geometry, bbox, viewport);\n      return wgs84Geom.coordinates;\n    }\n  });\n\n  return feature as Feature;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}