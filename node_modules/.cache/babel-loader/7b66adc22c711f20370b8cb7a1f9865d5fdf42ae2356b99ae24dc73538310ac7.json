{"ast":null,"code":"'use strict';\n\nvar invariant = require('../vendor/invariant'),\n  invariantLocation = require('./invariant_location'),\n  polyline = require('../vendor/polyline');\n\n/**\n * Given a list of markers, encode them for display\n * @param {Array<Object>} markers a list of markers\n * @returns {string} encoded markers\n * @private\n */\nfunction encodeMarkers(markers) {\n  return markers.map(function (marker) {\n    invariantLocation(marker);\n    var size = marker.size || 'l';\n    var symbol = marker.symbol || 'circle';\n    return 'pin-' + size + '-' + symbol + '(' + marker.longitude + ',' + marker.latitude + ')';\n  }).join(',');\n}\nmodule.exports.encodeMarkers = encodeMarkers;\n\n/**\n * Given a path and style, encode it for display\n * @param {Object} path an object of a path and style\n * @param {Object} path.geojson a GeoJSON LineString\n * @param {Object} [path.style={}] style parameters\n * @returns {string} encoded path as polyline\n * @private\n */\nfunction encodePath(path) {\n  invariant(path.geojson.type === 'LineString', 'path line must be a LineString');\n  var encoded = polyline.fromGeoJSON(path.geojson);\n  var style = '';\n  if (path.style) {\n    if (path.style.strokewidth !== undefined) style += '-' + path.style.strokewidth;\n    if (path.style.strokecolor !== undefined) style += '+' + path.style.strokecolor;\n  }\n  return 'path' + style + '(' + encoded + ')';\n}\nmodule.exports.encodePath = encodePath;\n\n/**\n * Given a GeoJSON object, encode it for a static map.\n * @param {Object} geojson a geojson object\n * @returns {string} encoded geojson as string\n * @private\n */\nfunction encodeGeoJSON(geojson) {\n  var encoded = JSON.stringify(geojson);\n  invariant(encoded.length < 4096, 'encoded GeoJSON must be shorter than 4096 characters long');\n  return 'geojson(' + encoded + ')';\n}\nmodule.exports.encodeGeoJSON = encodeGeoJSON;","map":{"version":3,"names":["invariant","require","invariantLocation","polyline","encodeMarkers","markers","map","marker","size","symbol","longitude","latitude","join","module","exports","encodePath","path","geojson","type","encoded","fromGeoJSON","style","strokewidth","undefined","strokecolor","encodeGeoJSON","JSON","stringify","length"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/mapbox/lib/encode_overlay.js"],"sourcesContent":["'use strict';\n\nvar invariant = require('../vendor/invariant'),\n  invariantLocation = require('./invariant_location'),\n  polyline = require('../vendor/polyline');\n\n/**\n * Given a list of markers, encode them for display\n * @param {Array<Object>} markers a list of markers\n * @returns {string} encoded markers\n * @private\n */\nfunction encodeMarkers(markers) {\n  return markers.map(function(marker) {\n    invariantLocation(marker);\n    var size = marker.size || 'l';\n    var symbol = marker.symbol || 'circle';\n    return 'pin-' + size + '-' + symbol + '(' +\n      marker.longitude + ',' + marker.latitude + ')';\n  }).join(',');\n}\n\nmodule.exports.encodeMarkers = encodeMarkers;\n\n/**\n * Given a path and style, encode it for display\n * @param {Object} path an object of a path and style\n * @param {Object} path.geojson a GeoJSON LineString\n * @param {Object} [path.style={}] style parameters\n * @returns {string} encoded path as polyline\n * @private\n */\nfunction encodePath(path) {\n  invariant(path.geojson.type === 'LineString', 'path line must be a LineString');\n  var encoded = polyline.fromGeoJSON(path.geojson);\n\n  var style = '';\n  if (path.style) {\n    if (path.style.strokewidth !== undefined) style += '-' + path.style.strokewidth;\n    if (path.style.strokecolor !== undefined) style += '+' + path.style.strokecolor;\n  }\n  return 'path' + style + '(' + encoded + ')';\n}\n\nmodule.exports.encodePath = encodePath;\n\n/**\n * Given a GeoJSON object, encode it for a static map.\n * @param {Object} geojson a geojson object\n * @returns {string} encoded geojson as string\n * @private\n */\nfunction encodeGeoJSON(geojson) {\n  var encoded = JSON.stringify(geojson);\n  invariant(encoded.length < 4096, 'encoded GeoJSON must be shorter than 4096 characters long');\n  return 'geojson(' + encoded + ')';\n}\n\nmodule.exports.encodeGeoJSON = encodeGeoJSON;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,qBAAqB,CAAC;EAC5CC,iBAAiB,GAAGD,OAAO,CAAC,sBAAsB,CAAC;EACnDE,QAAQ,GAAGF,OAAO,CAAC,oBAAoB,CAAC;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,aAAaA,CAACC,OAAO,EAAE;EAC9B,OAAOA,OAAO,CAACC,GAAG,CAAC,UAASC,MAAM,EAAE;IAClCL,iBAAiB,CAACK,MAAM,CAAC;IACzB,IAAIC,IAAI,GAAGD,MAAM,CAACC,IAAI,IAAI,GAAG;IAC7B,IAAIC,MAAM,GAAGF,MAAM,CAACE,MAAM,IAAI,QAAQ;IACtC,OAAO,MAAM,GAAGD,IAAI,GAAG,GAAG,GAAGC,MAAM,GAAG,GAAG,GACvCF,MAAM,CAACG,SAAS,GAAG,GAAG,GAAGH,MAAM,CAACI,QAAQ,GAAG,GAAG;EAClD,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;AACd;AAEAC,MAAM,CAACC,OAAO,CAACV,aAAa,GAAGA,aAAa;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASW,UAAUA,CAACC,IAAI,EAAE;EACxBhB,SAAS,CAACgB,IAAI,CAACC,OAAO,CAACC,IAAI,KAAK,YAAY,EAAE,gCAAgC,CAAC;EAC/E,IAAIC,OAAO,GAAGhB,QAAQ,CAACiB,WAAW,CAACJ,IAAI,CAACC,OAAO,CAAC;EAEhD,IAAII,KAAK,GAAG,EAAE;EACd,IAAIL,IAAI,CAACK,KAAK,EAAE;IACd,IAAIL,IAAI,CAACK,KAAK,CAACC,WAAW,KAAKC,SAAS,EAAEF,KAAK,IAAI,GAAG,GAAGL,IAAI,CAACK,KAAK,CAACC,WAAW;IAC/E,IAAIN,IAAI,CAACK,KAAK,CAACG,WAAW,KAAKD,SAAS,EAAEF,KAAK,IAAI,GAAG,GAAGL,IAAI,CAACK,KAAK,CAACG,WAAW;EACjF;EACA,OAAO,MAAM,GAAGH,KAAK,GAAG,GAAG,GAAGF,OAAO,GAAG,GAAG;AAC7C;AAEAN,MAAM,CAACC,OAAO,CAACC,UAAU,GAAGA,UAAU;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA,SAASU,aAAaA,CAACR,OAAO,EAAE;EAC9B,IAAIE,OAAO,GAAGO,IAAI,CAACC,SAAS,CAACV,OAAO,CAAC;EACrCjB,SAAS,CAACmB,OAAO,CAACS,MAAM,GAAG,IAAI,EAAE,2DAA2D,CAAC;EAC7F,OAAO,UAAU,GAAGT,OAAO,GAAG,GAAG;AACnC;AAEAN,MAAM,CAACC,OAAO,CAACW,aAAa,GAAGA,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}