{"ast":null,"code":"import _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { isArray } from '@math.gl/core';\nimport { getPolygonSignedArea, forEachSegmentInPolygon, modifyPolygonWindingDirection, getPolygonSignedAreaPoints, forEachSegmentInPolygonPoints, modifyPolygonWindingDirectionPoints } from './polygon-utils';\nvar Polygon = /*#__PURE__*/function () {\n  function Polygon(points) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Polygon);\n    _defineProperty(this, \"points\", void 0);\n    _defineProperty(this, \"isFlatArray\", void 0);\n    _defineProperty(this, \"options\", void 0);\n    this.points = points;\n    this.isFlatArray = !isArray(points[0]);\n    this.options = {\n      start: options.start || 0,\n      end: options.end || points.length,\n      size: options.size || 2,\n      isClosed: options.isClosed\n    };\n    Object.freeze(this);\n  }\n  _createClass(Polygon, [{\n    key: \"getSignedArea\",\n    value: function getSignedArea() {\n      if (this.isFlatArray) return getPolygonSignedArea(this.points, this.options);\n      return getPolygonSignedAreaPoints(this.points, this.options);\n    }\n  }, {\n    key: \"getArea\",\n    value: function getArea() {\n      return Math.abs(this.getSignedArea());\n    }\n  }, {\n    key: \"getWindingDirection\",\n    value: function getWindingDirection() {\n      return Math.sign(this.getSignedArea());\n    }\n  }, {\n    key: \"forEachSegment\",\n    value: function forEachSegment(visitor) {\n      if (this.isFlatArray) {\n        forEachSegmentInPolygon(this.points, function (x1, y1, x2, y2, i1, i2) {\n          visitor([x1, y1], [x2, y2], i1, i2);\n        }, this.options);\n      } else {\n        forEachSegmentInPolygonPoints(this.points, visitor, this.options);\n      }\n    }\n  }, {\n    key: \"modifyWindingDirection\",\n    value: function modifyWindingDirection(direction) {\n      if (this.isFlatArray) {\n        return modifyPolygonWindingDirection(this.points, direction, this.options);\n      }\n      return modifyPolygonWindingDirectionPoints(this.points, direction, this.options);\n    }\n  }]);\n  return Polygon;\n}();\nexport { Polygon as default };","map":{"version":3,"names":["isArray","getPolygonSignedArea","forEachSegmentInPolygon","modifyPolygonWindingDirection","getPolygonSignedAreaPoints","forEachSegmentInPolygonPoints","modifyPolygonWindingDirectionPoints","Polygon","points","options","arguments","length","undefined","_classCallCheck","_defineProperty","isFlatArray","start","end","size","isClosed","Object","freeze","_createClass","key","value","getSignedArea","getArea","Math","abs","getWindingDirection","sign","forEachSegment","visitor","x1","y1","x2","y2","i1","i2","modifyWindingDirection","direction","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@math.gl/polygon/src/polygon.ts"],"sourcesContent":["/* eslint-disable no-undef, no-console */\nimport {isArray} from '@math.gl/core';\nimport type {SegmentVisitorPoints} from './polygon-utils';\nimport type {NumericArray} from '@math.gl/core';\n\nimport {\n  getPolygonSignedArea,\n  forEachSegmentInPolygon,\n  modifyPolygonWindingDirection,\n  getPolygonSignedAreaPoints,\n  forEachSegmentInPolygonPoints,\n  modifyPolygonWindingDirectionPoints\n} from './polygon-utils';\n\nexport type PolygonOptions = {\n  start?: number;\n  end?: number;\n  size?: number;\n  isClosed?: boolean;\n};\n\nexport default class Polygon {\n  points: NumericArray | number[][];\n  isFlatArray: boolean;\n  options: PolygonOptions;\n\n  constructor(points: NumericArray | number[][], options: PolygonOptions = {}) {\n    this.points = points;\n    this.isFlatArray = !isArray(points[0]);\n\n    this.options = {\n      start: options.start || 0,\n      end: options.end || points.length,\n      size: options.size || 2,\n      isClosed: options.isClosed\n    };\n\n    Object.freeze(this);\n  }\n\n  /**\n   * Returns signed area of the polygon.\n   * @returns Signed area of the polygon.\n   */\n  getSignedArea(): number {\n    if (this.isFlatArray) return getPolygonSignedArea(this.points as NumericArray, this.options);\n\n    return getPolygonSignedAreaPoints(this.points as number[][], this.options);\n  }\n\n  /**\n   * Returns absolute area of the polygon.\n   * @returns Absolute area of the polygon.\n   */\n  getArea(): number {\n    return Math.abs(this.getSignedArea());\n  }\n\n  /**\n   * Returns winding direction of the polygon.\n   * @returns Winding direction of the polygon. 1 is for clockwise, -1 for counterclockwise winding direction.\n   */\n  getWindingDirection(): number {\n    return Math.sign(this.getSignedArea());\n  }\n\n  /**\n   * Calls the visitor callback for each segment in the polygon.\n   * @param visitor A callback to call for each segment.\n   */\n  forEachSegment(visitor: SegmentVisitorPoints): void {\n    if (this.isFlatArray) {\n      forEachSegmentInPolygon(\n        this.points as NumericArray,\n        // eslint-disable-next-line max-params\n        (x1, y1, x2, y2, i1, i2) => {\n          // TODO @igorDykhta original visitor uses arrays for each point, but with flat arrays performance degrades if we allocate points for each segment\n          visitor([x1, y1], [x2, y2], i1, i2);\n        },\n        this.options\n      );\n    } else {\n      forEachSegmentInPolygonPoints(this.points as number[][], visitor, this.options);\n    }\n  }\n\n  /**\n   * Checks winding direction of the polygon and reverses the polygon in case of opposite winding direction.\n   * @param direction Requested winding direction. 1 is for clockwise, -1 for counterclockwise winding direction.\n   * @return Returns true if the winding direction was changed.\n   */\n  modifyWindingDirection(direction: number): boolean {\n    if (this.isFlatArray) {\n      return modifyPolygonWindingDirection(this.points as NumericArray, direction, this.options);\n    }\n    return modifyPolygonWindingDirectionPoints(this.points as number[][], direction, this.options);\n  }\n}\n"],"mappings":";;;AACA,SAAQA,OAAR,QAAsB,eAAtB;AAIA,SACEC,oBADF,EAEEC,uBAFF,EAGEC,6BAHF,EAIEC,0BAJF,EAKEC,6BALF,EAMEC,mCANF,QAOO,iBAPP;AAAA,IAgBqBC,OAAN;EAKb,SAAAA,QAAYC,MAAD,EAAkE;IAAA,IAA9BC,OAAuB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAA9D;IAAAG,eAAA,OAAAN,OAAA;IAAkEO,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAC3E,KAAKN,MAAL,GAAcA,MAAd;IACA,KAAKO,WAAL,GAAmB,CAACf,OAAO,CAACQ,MAAM,CAAC,CAAD,CAAP,CAA3B;IAEA,KAAKC,OAAL,GAAe;MACbO,KAAK,EAAEP,OAAO,CAACO,KAAR,IAAiB,CADX;MAEbC,GAAG,EAAER,OAAO,CAACQ,GAAR,IAAeT,MAAM,CAACG,MAFd;MAGbO,IAAI,EAAET,OAAO,CAACS,IAAR,IAAgB,CAHT;MAIbC,QAAQ,EAAEV,OAAO,CAACU;IAJL,CAAf;IAOAC,MAAM,CAACC,MAAP,CAAc,IAAd;EACD;EAAAC,YAAA,CAAAf,OAAA;IAAAgB,GAAA;IAAAC,KAAA,EAMD,SAAAC,cAAA,EAAwB;MACtB,IAAI,KAAKV,WAAT,EAAsB,OAAOd,oBAAoB,CAAC,KAAKO,MAAN,EAA8B,KAAKC,OAAnC,CAA3B;MAEtB,OAAOL,0BAA0B,CAAC,KAAKI,MAAN,EAA4B,KAAKC,OAAjC,CAAjC;IACD;EAAA;IAAAc,GAAA;IAAAC,KAAA,EAMD,SAAAE,QAAA,EAAkB;MAChB,OAAOC,IAAI,CAACC,GAAL,CAAS,KAAKH,aAAL,EAAT,CAAP;IACD;EAAA;IAAAF,GAAA;IAAAC,KAAA,EAMD,SAAAK,oBAAA,EAA8B;MAC5B,OAAOF,IAAI,CAACG,IAAL,CAAU,KAAKL,aAAL,EAAV,CAAP;IACD;EAAA;IAAAF,GAAA;IAAAC,KAAA,EAMD,SAAAO,eAAeC,OAAD,EAAsC;MAClD,IAAI,KAAKjB,WAAT,EAAsB;QACpBb,uBAAuB,CACrB,KAAKM,MADgB,EAGrB,UAACyB,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBC,EAAjB,EAAqBC,EAArB,EAA4B;UAE1BN,OAAO,CAAC,CAACC,EAAD,EAAKC,EAAL,CAAD,EAAW,CAACC,EAAD,EAAKC,EAAL,CAAX,EAAqBC,EAArB,EAAyBC,EAAzB,CAAP;QACD,CANoB,EAOrB,KAAK7B,OAPgB,CAAvB;MASD,CAVD,MAUO;QACLJ,6BAA6B,CAAC,KAAKG,MAAN,EAA4BwB,OAA5B,EAAqC,KAAKvB,OAA1C,CAA7B;MACD;IACF;EAAA;IAAAc,GAAA;IAAAC,KAAA,EAOD,SAAAe,uBAAuBC,SAAD,EAA6B;MACjD,IAAI,KAAKzB,WAAT,EAAsB;QACpB,OAAOZ,6BAA6B,CAAC,KAAKK,MAAN,EAA8BgC,SAA9B,EAAyC,KAAK/B,OAA9C,CAApC;MACD;MACD,OAAOH,mCAAmC,CAAC,KAAKE,MAAN,EAA4BgC,SAA5B,EAAuC,KAAK/B,OAA5C,CAA1C;IACD;EAAA;EAAA,OAAAF,OAAA;AAAA;AAAA,SA3EkBA,OAAN,IAAAkC,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}