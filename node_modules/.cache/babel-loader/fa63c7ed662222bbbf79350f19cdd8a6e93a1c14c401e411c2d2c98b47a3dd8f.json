{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport WorkerThread from './worker-thread';\nvar WorkerPool = function () {\n  function WorkerPool(_ref) {\n    var source = _ref.source,\n      _ref$name = _ref.name,\n      name = _ref$name === void 0 ? 'unnamed' : _ref$name,\n      _ref$maxConcurrency = _ref.maxConcurrency,\n      maxConcurrency = _ref$maxConcurrency === void 0 ? 1 : _ref$maxConcurrency,\n      onMessage = _ref.onMessage,\n      _ref$onDebug = _ref.onDebug,\n      onDebug = _ref$onDebug === void 0 ? function () {} : _ref$onDebug,\n      _ref$reuseWorkers = _ref.reuseWorkers,\n      reuseWorkers = _ref$reuseWorkers === void 0 ? true : _ref$reuseWorkers;\n    _classCallCheck(this, WorkerPool);\n    this.source = source;\n    this.name = name;\n    this.maxConcurrency = maxConcurrency;\n    this.onMessage = onMessage;\n    this.onDebug = onDebug;\n    this.jobQueue = [];\n    this.idleQueue = [];\n    this.count = 0;\n    this.isDestroyed = false;\n    this.reuseWorkers = reuseWorkers;\n  }\n  _createClass(WorkerPool, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.idleQueue.forEach(function (worker) {\n        return worker.destroy();\n      });\n      this.isDestroyed = true;\n    }\n  }, {\n    key: \"process\",\n    value: function process(data, jobName) {\n      var _this = this;\n      return new Promise(function (resolve, reject) {\n        _this.jobQueue.push({\n          data: data,\n          jobName: jobName,\n          resolve: resolve,\n          reject: reject\n        });\n        _this._startQueuedJob();\n      });\n    }\n  }, {\n    key: \"_startQueuedJob\",\n    value: function () {\n      var _startQueuedJob2 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {\n        var worker, job;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.jobQueue.length) {\n                  _context.next = 2;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 2:\n                worker = this._getAvailableWorker();\n                if (worker) {\n                  _context.next = 5;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 5:\n                job = this.jobQueue.shift();\n                this.onDebug({\n                  message: 'processing',\n                  worker: worker.name,\n                  job: job.jobName,\n                  backlog: this.jobQueue.length\n                });\n                _context.prev = 7;\n                _context.t0 = job;\n                _context.next = 11;\n                return worker.process(job.data);\n              case 11:\n                _context.t1 = _context.sent;\n                _context.t0.resolve.call(_context.t0, _context.t1);\n                _context.next = 18;\n                break;\n              case 15:\n                _context.prev = 15;\n                _context.t2 = _context[\"catch\"](7);\n                job.reject(_context.t2);\n              case 18:\n                _context.prev = 18;\n                this._onWorkerDone(worker);\n                return _context.finish(18);\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[7, 15, 18, 21]]);\n      }));\n      function _startQueuedJob() {\n        return _startQueuedJob2.apply(this, arguments);\n      }\n      return _startQueuedJob;\n    }()\n  }, {\n    key: \"_onWorkerDone\",\n    value: function _onWorkerDone(worker) {\n      if (this.isDestroyed) {\n        worker.destroy();\n        return;\n      }\n      if (this.reuseWorkers) {\n        this.idleQueue.push(worker);\n      } else {\n        worker.destroy();\n        this.count--;\n      }\n      this._startQueuedJob();\n    }\n  }, {\n    key: \"_getAvailableWorker\",\n    value: function _getAvailableWorker() {\n      if (this.idleQueue.length > 0) {\n        return this.idleQueue.shift();\n      }\n      if (this.count < this.maxConcurrency) {\n        this.count++;\n        var name = \"\".concat(this.name.toLowerCase(), \" (#\").concat(this.count, \" of \").concat(this.maxConcurrency, \")\");\n        return new WorkerThread({\n          source: this.source,\n          onMessage: this.onMessage,\n          name: name\n        });\n      }\n      return null;\n    }\n  }]);\n  return WorkerPool;\n}();\nexport { WorkerPool as default };","map":{"version":3,"names":["WorkerThread","WorkerPool","_ref","source","_ref$name","name","_ref$maxConcurrency","maxConcurrency","onMessage","_ref$onDebug","onDebug","_ref$reuseWorkers","reuseWorkers","_classCallCheck","jobQueue","idleQueue","count","isDestroyed","forEach","worker","destroy","data","jobName","_this","Promise","resolve","reject","push","_startQueuedJob","length","_getAvailableWorker","job","shift","message","backlog","process","_context","t2","_onWorkerDone","concat","toLowerCase"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/kepler.gl/node_modules/@loaders.gl/loader-utils/src/lib/worker-utils/worker-pool.js"],"sourcesContent":["import WorkerThread from './worker-thread';\n\n/**\n * Process multiple data messages with small pool of identical workers\n */\nexport default class WorkerPool {\n  constructor({\n    source,\n    name = 'unnamed',\n    maxConcurrency = 1,\n    onMessage,\n    onDebug = () => {},\n    reuseWorkers = true\n  }) {\n    this.source = source;\n    this.name = name;\n    this.maxConcurrency = maxConcurrency;\n    this.onMessage = onMessage;\n    this.onDebug = onDebug;\n\n    this.jobQueue = [];\n    this.idleQueue = [];\n    this.count = 0;\n    this.isDestroyed = false;\n    this.reuseWorkers = reuseWorkers;\n  }\n\n  destroy() {\n    // Destroy idle workers, active Workers will be destroyed on completion\n    this.idleQueue.forEach(worker => worker.destroy());\n    this.isDestroyed = true;\n  }\n\n  /**\n   * Process binary data in a worker\n   */\n  process(data, jobName) {\n    return new Promise((resolve, reject) => {\n      this.jobQueue.push({data, jobName, resolve, reject});\n      this._startQueuedJob();\n    });\n  }\n\n  // PRIVATE\n\n  async _startQueuedJob() {\n    if (!this.jobQueue.length) {\n      return;\n    }\n    const worker = this._getAvailableWorker();\n    if (!worker) {\n      return;\n    }\n\n    // We have a worker, dequeue and start the job\n    const job = this.jobQueue.shift();\n\n    // @ts-ignore\n    this.onDebug({\n      message: 'processing',\n      worker: worker.name,\n      job: job.jobName,\n      backlog: this.jobQueue.length\n    });\n\n    try {\n      job.resolve(await worker.process(job.data));\n    } catch (error) {\n      job.reject(error);\n    } finally {\n      this._onWorkerDone(worker);\n    }\n  }\n\n  _onWorkerDone(worker) {\n    if (this.isDestroyed) {\n      worker.destroy();\n      return;\n    }\n\n    if (this.reuseWorkers) {\n      this.idleQueue.push(worker);\n    } else {\n      worker.destroy();\n      this.count--;\n    }\n\n    this._startQueuedJob();\n  }\n\n  _getAvailableWorker() {\n    // If a worker has completed and returned to the queue, it can be used\n    if (this.idleQueue.length > 0) {\n      return this.idleQueue.shift();\n    }\n\n    // Create fresh worker if we haven't yet created the max amount of worker threads for this worker source\n    if (this.count < this.maxConcurrency) {\n      this.count++;\n      const name = `${this.name.toLowerCase()} (#${this.count} of ${this.maxConcurrency})`;\n      return new WorkerThread({source: this.source, onMessage: this.onMessage, name});\n    }\n\n    // No worker available, have to wait\n    return null;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}