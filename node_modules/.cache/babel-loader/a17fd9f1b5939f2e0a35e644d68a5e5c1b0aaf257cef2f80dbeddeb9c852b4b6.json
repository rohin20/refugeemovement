{"ast":null,"code":"'use strict';\n\n/*\n * polyline\n *\n * https://github.com/mapbox/polyline\n *\n * by John Firebaugh, Tom MacWright, and contributors\n * licensed under BSD 3-clause\n */\n\n/*\n * Based off of [the offical Google document](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)\n *\n * Some parts from [this implementation](http://facstaff.unca.edu/mcmcclur/GoogleMaps/EncodePolyline/PolylineEncoder.js)\n * by [Mark McClure](http://facstaff.unca.edu/mcmcclur/)\n *\n * @module polyline\n */\nvar polyline = {};\nfunction encode(coordinate, factor) {\n  coordinate = Math.round(coordinate * factor);\n  coordinate <<= 1;\n  if (coordinate < 0) {\n    coordinate = ~coordinate;\n  }\n  var output = '';\n  while (coordinate >= 0x20) {\n    output += String.fromCharCode((0x20 | coordinate & 0x1f) + 63);\n    coordinate >>= 5;\n  }\n  output += String.fromCharCode(coordinate + 63);\n  return output;\n}\n\n/**\n * Encodes the given [latitude, longitude] coordinates array.\n *\n * @param {Array.<Array.<Number>>} coordinates\n * @param {Number} precision\n * @returns {String}\n */\npolyline.encode = function (coordinates, precision) {\n  if (!coordinates.length) {\n    return '';\n  }\n  var factor = Math.pow(10, precision || 5),\n    output = encode(coordinates[0][0], factor) + encode(coordinates[0][1], factor);\n  for (var i = 1; i < coordinates.length; i++) {\n    var a = coordinates[i],\n      b = coordinates[i - 1];\n    output += encode(a[0] - b[0], factor);\n    output += encode(a[1] - b[1], factor);\n  }\n  return output;\n};\nfunction flipped(coords) {\n  var flipped = [];\n  for (var i = 0; i < coords.length; i++) {\n    flipped.push(coords[i].slice().reverse());\n  }\n  return flipped;\n}\n\n/**\n * Encodes a GeoJSON LineString feature/geometry.\n *\n * @param {Object} geojson\n * @param {Number} precision\n * @returns {String}\n */\npolyline.fromGeoJSON = function (geojson, precision) {\n  if (geojson && geojson.type === 'Feature') {\n    geojson = geojson.geometry;\n  }\n  if (!geojson || geojson.type !== 'LineString') {\n    throw new Error('Input must be a GeoJSON LineString');\n  }\n  return polyline.encode(flipped(geojson.coordinates), precision);\n};\nmodule.exports = polyline;","map":{"version":3,"names":["polyline","encode","coordinate","factor","Math","round","output","String","fromCharCode","coordinates","precision","length","pow","i","a","b","flipped","coords","push","slice","reverse","fromGeoJSON","geojson","type","geometry","Error","module","exports"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/mapbox/vendor/polyline.js"],"sourcesContent":["'use strict';\n\n/*\n * polyline\n *\n * https://github.com/mapbox/polyline\n *\n * by John Firebaugh, Tom MacWright, and contributors\n * licensed under BSD 3-clause\n */\n\n/*\n * Based off of [the offical Google document](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)\n *\n * Some parts from [this implementation](http://facstaff.unca.edu/mcmcclur/GoogleMaps/EncodePolyline/PolylineEncoder.js)\n * by [Mark McClure](http://facstaff.unca.edu/mcmcclur/)\n *\n * @module polyline\n */\n\nvar polyline = {};\n\nfunction encode(coordinate, factor) {\n    coordinate = Math.round(coordinate * factor);\n    coordinate <<= 1;\n    if (coordinate < 0) {\n        coordinate = ~coordinate;\n    }\n    var output = '';\n    while (coordinate >= 0x20) {\n        output += String.fromCharCode((0x20 | (coordinate & 0x1f)) + 63);\n        coordinate >>= 5;\n    }\n    output += String.fromCharCode(coordinate + 63);\n    return output;\n}\n\n/**\n * Encodes the given [latitude, longitude] coordinates array.\n *\n * @param {Array.<Array.<Number>>} coordinates\n * @param {Number} precision\n * @returns {String}\n */\npolyline.encode = function(coordinates, precision) {\n    if (!coordinates.length) { return ''; }\n\n    var factor = Math.pow(10, precision || 5),\n        output = encode(coordinates[0][0], factor) + encode(coordinates[0][1], factor);\n\n    for (var i = 1; i < coordinates.length; i++) {\n        var a = coordinates[i], b = coordinates[i - 1];\n        output += encode(a[0] - b[0], factor);\n        output += encode(a[1] - b[1], factor);\n    }\n\n    return output;\n};\n\nfunction flipped(coords) {\n    var flipped = [];\n    for (var i = 0; i < coords.length; i++) {\n        flipped.push(coords[i].slice().reverse());\n    }\n    return flipped;\n}\n\n/**\n * Encodes a GeoJSON LineString feature/geometry.\n *\n * @param {Object} geojson\n * @param {Number} precision\n * @returns {String}\n */\npolyline.fromGeoJSON = function(geojson, precision) {\n    if (geojson && geojson.type === 'Feature') {\n        geojson = geojson.geometry;\n    }\n    if (!geojson || geojson.type !== 'LineString') {\n        throw new Error('Input must be a GeoJSON LineString');\n    }\n    return polyline.encode(flipped(geojson.coordinates), precision);\n};\n\nmodule.exports = polyline;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}