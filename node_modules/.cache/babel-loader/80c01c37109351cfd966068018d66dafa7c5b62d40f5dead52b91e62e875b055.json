{"ast":null,"code":"import _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { createIterable } from '@deck.gl/core';\nimport { getGridOffset } from '../utils/grid-aggregation-utils';\nexport function pointToDensityGridDataCPU(props, aggregationParams) {\n  var hashInfo = pointsToGridHashing(props, aggregationParams);\n  var result = getGridLayerDataFromGridHash(hashInfo);\n  return {\n    gridHash: hashInfo.gridHash,\n    gridOffset: hashInfo.gridOffset,\n    data: result\n  };\n}\nfunction pointsToGridHashing(props, aggregationParams) {\n  var _props$data = props.data,\n    data = _props$data === void 0 ? [] : _props$data,\n    cellSize = props.cellSize;\n  var attributes = aggregationParams.attributes,\n    viewport = aggregationParams.viewport,\n    projectPoints = aggregationParams.projectPoints,\n    numInstances = aggregationParams.numInstances;\n  var positions = attributes.positions.value;\n  var _attributes$positions = attributes.positions.getAccessor(),\n    size = _attributes$positions.size;\n  var boundingBox = aggregationParams.boundingBox || getPositionBoundingBox(attributes.positions, numInstances);\n  var offsets = aggregationParams.posOffset || [180, 90];\n  var gridOffset = aggregationParams.gridOffset || getGridOffset(boundingBox, cellSize);\n  if (gridOffset.xOffset <= 0 || gridOffset.yOffset <= 0) {\n    return {\n      gridHash: {},\n      gridOffset: gridOffset\n    };\n  }\n  var width = viewport.width,\n    height = viewport.height;\n  var numCol = Math.ceil(width / gridOffset.xOffset);\n  var numRow = Math.ceil(height / gridOffset.yOffset);\n  var gridHash = {};\n  var _createIterable = createIterable(data),\n    iterable = _createIterable.iterable,\n    objectInfo = _createIterable.objectInfo;\n  var position = new Array(3);\n  var _iterator = _createForOfIteratorHelper(iterable),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var pt = _step.value;\n      objectInfo.index++;\n      position[0] = positions[objectInfo.index * size];\n      position[1] = positions[objectInfo.index * size + 1];\n      position[2] = size >= 3 ? positions[objectInfo.index * size + 2] : 0;\n      var _ref = projectPoints ? viewport.project(position) : position,\n        _ref2 = _slicedToArray(_ref, 2),\n        x = _ref2[0],\n        y = _ref2[1];\n      if (Number.isFinite(x) && Number.isFinite(y)) {\n        var yIndex = Math.floor((y + offsets[1]) / gridOffset.yOffset);\n        var xIndex = Math.floor((x + offsets[0]) / gridOffset.xOffset);\n        if (!projectPoints || xIndex >= 0 && xIndex < numCol && yIndex >= 0 && yIndex < numRow) {\n          var key = \"\".concat(yIndex, \"-\").concat(xIndex);\n          gridHash[key] = gridHash[key] || {\n            count: 0,\n            points: [],\n            lonIdx: xIndex,\n            latIdx: yIndex\n          };\n          gridHash[key].count += 1;\n          gridHash[key].points.push({\n            source: pt,\n            index: objectInfo.index\n          });\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return {\n    gridHash: gridHash,\n    gridOffset: gridOffset,\n    offsets: [offsets[0] * -1, offsets[1] * -1]\n  };\n}\nfunction getGridLayerDataFromGridHash(_ref3) {\n  var gridHash = _ref3.gridHash,\n    gridOffset = _ref3.gridOffset,\n    offsets = _ref3.offsets;\n  var data = new Array(Object.keys(gridHash).length);\n  var i = 0;\n  for (var key in gridHash) {\n    var idxs = key.split('-');\n    var latIdx = parseInt(idxs[0], 10);\n    var lonIdx = parseInt(idxs[1], 10);\n    var index = i++;\n    data[index] = _objectSpread({\n      index: index,\n      position: [offsets[0] + gridOffset.xOffset * lonIdx, offsets[1] + gridOffset.yOffset * latIdx]\n    }, gridHash[key]);\n  }\n  return data;\n}\nfunction getPositionBoundingBox(positionAttribute, numInstance) {\n  var positions = positionAttribute.value;\n  var _positionAttribute$ge = positionAttribute.getAccessor(),\n    size = _positionAttribute$ge.size;\n  var yMin = Infinity;\n  var yMax = -Infinity;\n  var xMin = Infinity;\n  var xMax = -Infinity;\n  var y;\n  var x;\n  for (var i = 0; i < numInstance; i++) {\n    x = positions[i * size];\n    y = positions[i * size + 1];\n    if (Number.isFinite(x) && Number.isFinite(y)) {\n      yMin = y < yMin ? y : yMin;\n      yMax = y > yMax ? y : yMax;\n      xMin = x < xMin ? x : xMin;\n      xMax = x > xMax ? x : xMax;\n    }\n  }\n  return {\n    xMin: xMin,\n    xMax: xMax,\n    yMin: yMin,\n    yMax: yMax\n  };\n}","map":{"version":3,"names":["createIterable","getGridOffset","pointToDensityGridDataCPU","props","aggregationParams","hashInfo","pointsToGridHashing","result","getGridLayerDataFromGridHash","gridHash","gridOffset","data","_props$data","cellSize","attributes","viewport","projectPoints","numInstances","positions","value","_attributes$positions","getAccessor","size","boundingBox","getPositionBoundingBox","offsets","posOffset","xOffset","yOffset","width","height","numCol","Math","ceil","numRow","_createIterable","iterable","objectInfo","position","Array","_iterator","_createForOfIteratorHelper","_step","s","n","done","pt","index","_ref","project","_ref2","_slicedToArray","x","y","Number","isFinite","yIndex","floor","xIndex","key","concat","count","points","lonIdx","latIdx","push","source","err","e","f","_ref3","Object","keys","length","i","idxs","split","parseInt","_objectSpread","positionAttribute","numInstance","_positionAttribute$ge","yMin","Infinity","yMax","xMin","xMax"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/aggregation-layers/src/cpu-grid-layer/grid-aggregator.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {createIterable} from '@deck.gl/core';\nimport {getGridOffset} from '../utils/grid-aggregation-utils';\n\n/**\n * Calculate density grid from an array of points\n * @param {Object} props - object containing :\n * @param {Iterable} [props.data] - data objects to be aggregated\n * @param {Integer} [props.cellSize] - size of the grid cell\n *\n * @param {Object} aggregationParams - object containing :\n * @param {Object} gridOffset - {xOffset, yOffset} cell size in meters\n * @param {Integer} width - width of the grid\n * @param {Integer} height - height of the grid\n * @param {Boolean} projectPoints - `true` if doing screen space projection, `false` otherwise\n * @param {Array} attributes - attributes array containing position values\n * @param {Viewport} viewport - viewport to be used for projection\n * @param {Array} posOffset - [xOffset, yOffset] offset to be applied to positions to get cell index\n * @param {Object} boundingBox - {xMin, yMin, xMax, yMax} bounding box of input data\n *\n * @returns {object} - grid data, cell dimension\n */\nexport function pointToDensityGridDataCPU(props, aggregationParams) {\n  const hashInfo = pointsToGridHashing(props, aggregationParams);\n  const result = getGridLayerDataFromGridHash(hashInfo);\n\n  return {\n    gridHash: hashInfo.gridHash,\n    gridOffset: hashInfo.gridOffset,\n    data: result\n  };\n}\n\n/**\n * Project points into each cell, return a hash table of cells\n * @param {Iterable} points\n * @param {number} cellSize - unit size in meters\n * @param {function} getPosition - position accessor\n * @returns {object} - grid hash and cell dimension\n */\n/* eslint-disable max-statements, complexity */\nfunction pointsToGridHashing(props, aggregationParams) {\n  const {data = [], cellSize} = props;\n  const {attributes, viewport, projectPoints, numInstances} = aggregationParams;\n  const positions = attributes.positions.value;\n  const {size} = attributes.positions.getAccessor();\n  const boundingBox =\n    aggregationParams.boundingBox || getPositionBoundingBox(attributes.positions, numInstances);\n  const offsets = aggregationParams.posOffset || [180, 90];\n  const gridOffset = aggregationParams.gridOffset || getGridOffset(boundingBox, cellSize);\n\n  if (gridOffset.xOffset <= 0 || gridOffset.yOffset <= 0) {\n    return {gridHash: {}, gridOffset};\n  }\n\n  const {width, height} = viewport;\n  const numCol = Math.ceil(width / gridOffset.xOffset);\n  const numRow = Math.ceil(height / gridOffset.yOffset);\n\n  // calculate count per cell\n  const gridHash = {};\n\n  const {iterable, objectInfo} = createIterable(data);\n  const position = new Array(3);\n  for (const pt of iterable) {\n    objectInfo.index++;\n    position[0] = positions[objectInfo.index * size];\n    position[1] = positions[objectInfo.index * size + 1];\n    position[2] = size >= 3 ? positions[objectInfo.index * size + 2] : 0;\n    const [x, y] = projectPoints ? viewport.project(position) : position;\n    if (Number.isFinite(x) && Number.isFinite(y)) {\n      const yIndex = Math.floor((y + offsets[1]) / gridOffset.yOffset);\n      const xIndex = Math.floor((x + offsets[0]) / gridOffset.xOffset);\n      if (\n        !projectPoints ||\n        // when doing screen space agggregation (projectPoints = true), filter points outside of the viewport range.\n        (xIndex >= 0 && xIndex < numCol && yIndex >= 0 && yIndex < numRow)\n      ) {\n        const key = `${yIndex}-${xIndex}`;\n\n        gridHash[key] = gridHash[key] || {count: 0, points: [], lonIdx: xIndex, latIdx: yIndex};\n        gridHash[key].count += 1;\n        gridHash[key].points.push({\n          source: pt,\n          index: objectInfo.index\n        });\n      }\n    }\n  }\n\n  return {gridHash, gridOffset, offsets: [offsets[0] * -1, offsets[1] * -1]};\n}\n/* eslint-enable max-statements, complexity */\n\nfunction getGridLayerDataFromGridHash({gridHash, gridOffset, offsets}) {\n  const data = new Array(Object.keys(gridHash).length);\n  let i = 0;\n  for (const key in gridHash) {\n    const idxs = key.split('-');\n    const latIdx = parseInt(idxs[0], 10);\n    const lonIdx = parseInt(idxs[1], 10);\n    const index = i++;\n\n    data[index] = {\n      index,\n      position: [\n        offsets[0] + gridOffset.xOffset * lonIdx,\n        offsets[1] + gridOffset.yOffset * latIdx\n      ],\n      ...gridHash[key]\n    };\n  }\n  return data;\n}\n\n// Calculate bounding box of position attribute\nfunction getPositionBoundingBox(positionAttribute, numInstance) {\n  // TODO - value might not exist (e.g. attribute transition)\n  const positions = positionAttribute.value;\n  const {size} = positionAttribute.getAccessor();\n\n  let yMin = Infinity;\n  let yMax = -Infinity;\n  let xMin = Infinity;\n  let xMax = -Infinity;\n  let y;\n  let x;\n\n  for (let i = 0; i < numInstance; i++) {\n    x = positions[i * size];\n    y = positions[i * size + 1];\n    if (Number.isFinite(x) && Number.isFinite(y)) {\n      yMin = y < yMin ? y : yMin;\n      yMax = y > yMax ? y : yMax;\n      xMin = x < xMin ? x : xMin;\n      xMax = x > xMax ? x : xMax;\n    }\n  }\n\n  return {xMin, xMax, yMin, yMax};\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}