{"ast":null,"code":"import _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { log } from '@luma.gl/gltools';\nimport Accessor from './accessor';\nimport Buffer from './buffer';\nimport VertexArrayObject from './vertex-array-object';\nimport { assert } from '../utils/assert';\nimport { stubRemovedMethods } from '../utils/stub-methods';\nvar ERR_ATTRIBUTE_TYPE = 'VertexArray: attributes must be Buffers or constants (i.e. typed array)';\nvar MULTI_LOCATION_ATTRIBUTE_REGEXP = /^(.+)__LOCATION_([0-9]+)$/;\nvar DEPRECATIONS_V6 = ['setBuffers', 'setGeneric', 'clearBindings', 'setLocations', 'setGenericValues', 'setDivisor', 'enable', 'disable'];\nvar VertexArray = /*#__PURE__*/function () {\n  function VertexArray(gl) {\n    _classCallCheck(this, VertexArray);\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var id = opts.id || opts.program && opts.program.id;\n    this.id = id;\n    this.gl = gl;\n    this.configuration = null;\n    this.elements = null;\n    this.elementsAccessor = null;\n    this.values = null;\n    this.accessors = null;\n    this.unused = null;\n    this.drawParams = null;\n    this.buffer = null;\n    this.attributes = {};\n    this.vertexArrayObject = new VertexArrayObject(gl);\n    stubRemovedMethods(this, 'VertexArray', 'v6.0', DEPRECATIONS_V6);\n    this.initialize(opts);\n    Object.seal(this);\n  }\n  _createClass(VertexArray, [{\n    key: \"delete\",\n    value: function _delete() {\n      if (this.buffer) {\n        this.buffer.delete();\n      }\n      this.vertexArrayObject.delete();\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.reset();\n      this.configuration = null;\n      this.bindOnUse = false;\n      return this.setProps(props);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.elements = null;\n      this.elementsAccessor = null;\n      var MAX_ATTRIBUTES = this.vertexArrayObject.MAX_ATTRIBUTES;\n      this.values = new Array(MAX_ATTRIBUTES).fill(null);\n      this.accessors = new Array(MAX_ATTRIBUTES).fill(null);\n      this.unused = {};\n      this.drawParams = null;\n      return this;\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      if ('program' in props) {\n        this.configuration = props.program && props.program.configuration;\n      }\n      if ('configuration' in props) {\n        this.configuration = props.configuration;\n      }\n      if ('attributes' in props) {\n        this.setAttributes(props.attributes);\n      }\n      if ('elements' in props) {\n        this.setElementBuffer(props.elements);\n      }\n      if ('bindOnUse' in props) {\n        props = props.bindOnUse;\n      }\n      return this;\n    }\n  }, {\n    key: \"clearDrawParams\",\n    value: function clearDrawParams() {\n      this.drawParams = null;\n    }\n  }, {\n    key: \"getDrawParams\",\n    value: function getDrawParams() {\n      this.drawParams = this.drawParams || this._updateDrawParams();\n      return this.drawParams;\n    }\n  }, {\n    key: \"setAttributes\",\n    value: function setAttributes(attributes) {\n      var _this = this;\n      Object.assign(this.attributes, attributes);\n      this.vertexArrayObject.bind(function () {\n        for (var locationOrName in attributes) {\n          var value = attributes[locationOrName];\n          _this._setAttribute(locationOrName, value);\n        }\n        _this.gl.bindBuffer(34962, null);\n      });\n      return this;\n    }\n  }, {\n    key: \"setElementBuffer\",\n    value: function setElementBuffer() {\n      var elementBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.elements = elementBuffer;\n      this.elementsAccessor = accessor;\n      this.clearDrawParams();\n      this.vertexArrayObject.setElementBuffer(elementBuffer, accessor);\n      return this;\n    }\n  }, {\n    key: \"setBuffer\",\n    value: function setBuffer(locationOrName, buffer) {\n      var appAccessor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (buffer.target === 34963) {\n        return this.setElementBuffer(buffer, appAccessor);\n      }\n      var _this$_resolveLocatio = this._resolveLocationAndAccessor(locationOrName, buffer, buffer.accessor, appAccessor),\n        location = _this$_resolveLocatio.location,\n        accessor = _this$_resolveLocatio.accessor;\n      if (location >= 0) {\n        this.values[location] = buffer;\n        this.accessors[location] = accessor;\n        this.clearDrawParams();\n        this.vertexArrayObject.setBuffer(location, buffer, accessor);\n      }\n      return this;\n    }\n  }, {\n    key: \"setConstant\",\n    value: function setConstant(locationOrName, arrayValue) {\n      var appAccessor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _this$_resolveLocatio2 = this._resolveLocationAndAccessor(locationOrName, arrayValue, Object.assign({\n          size: arrayValue.length\n        }, appAccessor)),\n        location = _this$_resolveLocatio2.location,\n        accessor = _this$_resolveLocatio2.accessor;\n      if (location >= 0) {\n        arrayValue = this.vertexArrayObject._normalizeConstantArrayValue(arrayValue);\n        this.values[location] = arrayValue;\n        this.accessors[location] = accessor;\n        this.clearDrawParams();\n        this.vertexArrayObject.enable(location, false);\n      }\n      return this;\n    }\n  }, {\n    key: \"unbindBuffers\",\n    value: function unbindBuffers() {\n      var _this2 = this;\n      this.vertexArrayObject.bind(function () {\n        if (_this2.elements) {\n          _this2.vertexArrayObject.setElementBuffer(null);\n        }\n        _this2.buffer = _this2.buffer || new Buffer(_this2.gl, {\n          accessor: {\n            size: 4\n          }\n        });\n        for (var location = 0; location < _this2.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n          if (_this2.values[location] instanceof Buffer) {\n            _this2.gl.disableVertexAttribArray(location);\n            _this2.gl.bindBuffer(34962, _this2.buffer.handle);\n            _this2.gl.vertexAttribPointer(location, 1, 5126, false, 0, 0);\n          }\n        }\n      });\n      return this;\n    }\n  }, {\n    key: \"bindBuffers\",\n    value: function bindBuffers() {\n      var _this3 = this;\n      this.vertexArrayObject.bind(function () {\n        if (_this3.elements) {\n          _this3.setElementBuffer(_this3.elements);\n        }\n        for (var location = 0; location < _this3.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n          var buffer = _this3.values[location];\n          if (buffer instanceof Buffer) {\n            _this3.setBuffer(location, buffer);\n          }\n        }\n      });\n      return this;\n    }\n  }, {\n    key: \"bindForDraw\",\n    value: function bindForDraw(vertexCount, instanceCount, func) {\n      var _this4 = this;\n      var value;\n      this.vertexArrayObject.bind(function () {\n        _this4._setConstantAttributes(vertexCount, instanceCount);\n        value = func();\n      });\n      return value;\n    }\n  }, {\n    key: \"_resolveLocationAndAccessor\",\n    value: function _resolveLocationAndAccessor(locationOrName, value, valueAccessor, appAccessor) {\n      var _this5 = this;\n      var INVALID_RESULT = {\n        location: -1,\n        accessor: null\n      };\n      var _this$_getAttributeIn = this._getAttributeIndex(locationOrName),\n        location = _this$_getAttributeIn.location,\n        name = _this$_getAttributeIn.name;\n      if (!Number.isFinite(location) || location < 0) {\n        this.unused[locationOrName] = value;\n        log.once(3, function () {\n          return \"unused value \".concat(locationOrName, \" in \").concat(_this5.id);\n        })();\n        return INVALID_RESULT;\n      }\n      var accessInfo = this._getAttributeInfo(name || location);\n      if (!accessInfo) {\n        return INVALID_RESULT;\n      }\n      var currentAccessor = this.accessors[location] || {};\n      var accessor = Accessor.resolve(accessInfo.accessor, currentAccessor, valueAccessor, appAccessor);\n      var size = accessor.size,\n        type = accessor.type;\n      assert(Number.isFinite(size) && Number.isFinite(type));\n      return {\n        location: location,\n        accessor: accessor\n      };\n    }\n  }, {\n    key: \"_getAttributeInfo\",\n    value: function _getAttributeInfo(attributeName) {\n      return this.configuration && this.configuration.getAttributeInfo(attributeName);\n    }\n  }, {\n    key: \"_getAttributeIndex\",\n    value: function _getAttributeIndex(locationOrName) {\n      var location = Number(locationOrName);\n      if (Number.isFinite(location)) {\n        return {\n          location: location\n        };\n      }\n      var multiLocation = MULTI_LOCATION_ATTRIBUTE_REGEXP.exec(locationOrName);\n      var name = multiLocation ? multiLocation[1] : locationOrName;\n      var locationOffset = multiLocation ? Number(multiLocation[2]) : 0;\n      if (this.configuration) {\n        return {\n          location: this.configuration.getAttributeLocation(name) + locationOffset,\n          name: name\n        };\n      }\n      return {\n        location: -1\n      };\n    }\n  }, {\n    key: \"_setAttribute\",\n    value: function _setAttribute(locationOrName, value) {\n      if (value instanceof Buffer) {\n        this.setBuffer(locationOrName, value);\n      } else if (Array.isArray(value) && value.length && value[0] instanceof Buffer) {\n        var buffer = value[0];\n        var accessor = value[1];\n        this.setBuffer(locationOrName, buffer, accessor);\n      } else if (ArrayBuffer.isView(value) || Array.isArray(value)) {\n        var constant = value;\n        this.setConstant(locationOrName, constant);\n      } else if (value.buffer instanceof Buffer) {\n        var _accessor = value;\n        this.setBuffer(locationOrName, _accessor.buffer, _accessor);\n      } else {\n        throw new Error(ERR_ATTRIBUTE_TYPE);\n      }\n    }\n  }, {\n    key: \"_setConstantAttributes\",\n    value: function _setConstantAttributes(vertexCount, instanceCount) {\n      var elementCount = Math.max(vertexCount | 0, instanceCount | 0);\n      var constant = this.values[0];\n      if (ArrayBuffer.isView(constant)) {\n        this._setConstantAttributeZero(constant, elementCount);\n      }\n      for (var location = 1; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        constant = this.values[location];\n        if (ArrayBuffer.isView(constant)) {\n          this._setConstantAttribute(location, constant);\n        }\n      }\n    }\n  }, {\n    key: \"_setConstantAttributeZero\",\n    value: function _setConstantAttributeZero(constant, elementCount) {\n      if (VertexArrayObject.isSupported(this.gl, {\n        constantAttributeZero: true\n      })) {\n        this._setConstantAttribute(0, constant);\n        return;\n      }\n      var buffer = this.vertexArrayObject.getConstantBuffer(elementCount, constant);\n      this.vertexArrayObject.setBuffer(0, buffer, this.accessors[0]);\n    }\n  }, {\n    key: \"_setConstantAttribute\",\n    value: function _setConstantAttribute(location, constant) {\n      VertexArrayObject.setConstant(this.gl, location, constant);\n    }\n  }, {\n    key: \"_updateDrawParams\",\n    value: function _updateDrawParams() {\n      var drawParams = {\n        isIndexed: false,\n        isInstanced: false,\n        indexCount: Infinity,\n        vertexCount: Infinity,\n        instanceCount: Infinity\n      };\n      for (var location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        this._updateDrawParamsForLocation(drawParams, location);\n      }\n      if (this.elements) {\n        drawParams.elementCount = this.elements.getElementCount(this.elements.accessor);\n        drawParams.isIndexed = true;\n        drawParams.indexType = this.elementsAccessor.type || this.elements.accessor.type;\n        drawParams.indexOffset = this.elementsAccessor.offset || 0;\n      }\n      if (drawParams.indexCount === Infinity) {\n        drawParams.indexCount = 0;\n      }\n      if (drawParams.vertexCount === Infinity) {\n        drawParams.vertexCount = 0;\n      }\n      if (drawParams.instanceCount === Infinity) {\n        drawParams.instanceCount = 0;\n      }\n      return drawParams;\n    }\n  }, {\n    key: \"_updateDrawParamsForLocation\",\n    value: function _updateDrawParamsForLocation(drawParams, location) {\n      var value = this.values[location];\n      var accessor = this.accessors[location];\n      if (!value) {\n        return;\n      }\n      var divisor = accessor.divisor;\n      var isInstanced = divisor > 0;\n      drawParams.isInstanced = drawParams.isInstanced || isInstanced;\n      if (value instanceof Buffer) {\n        var buffer = value;\n        if (isInstanced) {\n          var instanceCount = buffer.getVertexCount(accessor);\n          drawParams.instanceCount = Math.min(drawParams.instanceCount, instanceCount);\n        } else {\n          var vertexCount = buffer.getVertexCount(accessor);\n          drawParams.vertexCount = Math.min(drawParams.vertexCount, vertexCount);\n        }\n      }\n    }\n  }, {\n    key: \"setElements\",\n    value: function setElements() {\n      var elementBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      log.deprecated('setElements', 'setElementBuffer')();\n      return this.setElementBuffer(elementBuffer, accessor);\n    }\n  }]);\n  return VertexArray;\n}();\nexport { VertexArray as default };","map":{"version":3,"names":["log","Accessor","Buffer","VertexArrayObject","assert","stubRemovedMethods","ERR_ATTRIBUTE_TYPE","MULTI_LOCATION_ATTRIBUTE_REGEXP","DEPRECATIONS_V6","VertexArray","gl","_classCallCheck","opts","arguments","length","undefined","id","program","configuration","elements","elementsAccessor","values","accessors","unused","drawParams","buffer","attributes","vertexArrayObject","initialize","Object","seal","_createClass","key","value","_delete","delete","props","reset","bindOnUse","setProps","MAX_ATTRIBUTES","Array","fill","setAttributes","setElementBuffer","clearDrawParams","getDrawParams","_updateDrawParams","_this","assign","bind","locationOrName","_setAttribute","bindBuffer","elementBuffer","accessor","setBuffer","appAccessor","target","_this$_resolveLocatio","_resolveLocationAndAccessor","location","setConstant","arrayValue","_this$_resolveLocatio2","size","_normalizeConstantArrayValue","enable","unbindBuffers","_this2","disableVertexAttribArray","handle","vertexAttribPointer","bindBuffers","_this3","bindForDraw","vertexCount","instanceCount","func","_this4","_setConstantAttributes","valueAccessor","_this5","INVALID_RESULT","_this$_getAttributeIn","_getAttributeIndex","name","Number","isFinite","once","concat","accessInfo","_getAttributeInfo","currentAccessor","resolve","type","attributeName","getAttributeInfo","multiLocation","exec","locationOffset","getAttributeLocation","isArray","ArrayBuffer","isView","constant","Error","elementCount","Math","max","_setConstantAttributeZero","_setConstantAttribute","isSupported","constantAttributeZero","getConstantBuffer","isIndexed","isInstanced","indexCount","Infinity","_updateDrawParamsForLocation","getElementCount","indexType","indexOffset","offset","divisor","getVertexCount","min","setElements","deprecated","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@luma.gl/webgl/src/classes/vertex-array.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {log} from '@luma.gl/gltools';\nimport Accessor from './accessor';\nimport Buffer from './buffer';\nimport VertexArrayObject from './vertex-array-object';\nimport {assert} from '../utils/assert';\nimport {stubRemovedMethods} from '../utils/stub-methods';\n\nconst ERR_ATTRIBUTE_TYPE =\n  'VertexArray: attributes must be Buffers or constants (i.e. typed array)';\n\n// This is done to support mat type attributes.\n// See section \"Notes about setting mat type attributes\"\n// in vertex-array.md\nconst MULTI_LOCATION_ATTRIBUTE_REGEXP = /^(.+)__LOCATION_([0-9]+)$/;\n\nconst DEPRECATIONS_V6 = [\n  'setBuffers',\n  'setGeneric',\n  'clearBindings',\n  'setLocations',\n  'setGenericValues',\n  'setDivisor',\n  'enable',\n  'disable'\n];\n\nexport default class VertexArray {\n  constructor(gl, opts = {}) {\n    // Use program's id if program is supplied but no id is supplied\n    const id = opts.id || (opts.program && opts.program.id);\n    // super(gl, Object.assign({}, opts, {id}));\n\n    this.id = id;\n    this.gl = gl;\n    this.configuration = null;\n\n    // Extracted information\n    this.elements = null;\n    this.elementsAccessor = null;\n    this.values = null;\n    this.accessors = null;\n    this.unused = null;\n    this.drawParams = null;\n    this.buffer = null; // For attribute 0 on desktops, and created when unbinding buffers\n\n    this.attributes = {};\n\n    this.vertexArrayObject = new VertexArrayObject(gl);\n\n    // Issue errors when using removed methods\n    stubRemovedMethods(this, 'VertexArray', 'v6.0', DEPRECATIONS_V6);\n\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  delete() {\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n\n    this.vertexArrayObject.delete();\n  }\n\n  initialize(props = {}) {\n    this.reset();\n    this.configuration = null;\n    this.bindOnUse = false;\n    return this.setProps(props);\n  }\n\n  // Resets all attributes (to default valued constants)\n  reset() {\n    // this.vertexArrayObject.reset();\n\n    this.elements = null;\n    this.elementsAccessor = null;\n    const {MAX_ATTRIBUTES} = this.vertexArrayObject;\n    this.values = new Array(MAX_ATTRIBUTES).fill(null);\n    this.accessors = new Array(MAX_ATTRIBUTES).fill(null);\n    this.unused = {};\n\n    // Auto detects draw params\n    this.drawParams = null;\n\n    return this;\n  }\n\n  setProps(props) {\n    if ('program' in props) {\n      this.configuration = props.program && props.program.configuration;\n    }\n    if ('configuration' in props) {\n      this.configuration = props.configuration;\n    }\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n    if ('elements' in props) {\n      this.setElementBuffer(props.elements);\n    }\n    if ('bindOnUse' in props) {\n      props = props.bindOnUse;\n    }\n    return this;\n  }\n\n  // Automatically called if buffers changed through VertexArray API\n  clearDrawParams() {\n    this.drawParams = null;\n  }\n\n  getDrawParams() {\n    // Auto deduced draw parameters\n    this.drawParams = this.drawParams || this._updateDrawParams();\n\n    return this.drawParams;\n  }\n\n  // Set (bind) an array or map of vertex array buffers, either in numbered or named locations.\n  // For names that are not present in `location`, the supplied buffers will be ignored.\n  // if a single buffer of type GL.ELEMENT_ARRAY_BUFFER is present, it will be set as elements\n  //   Signatures:\n  //     {attributeName: buffer}\n  //     {attributeName: [buffer, accessor]}\n  //     {attributeName: (typed) array} => constant\n  setAttributes(attributes) {\n    Object.assign(this.attributes, attributes);\n    this.vertexArrayObject.bind(() => {\n      for (const locationOrName in attributes) {\n        const value = attributes[locationOrName];\n        this._setAttribute(locationOrName, value);\n      }\n      // Make sure we don't leave any bindings\n      this.gl.bindBuffer(GL.ARRAY_BUFFER, null);\n    });\n\n    return this;\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported\n  setElementBuffer(elementBuffer = null, accessor = {}) {\n    this.elements = elementBuffer; // Save value for debugging\n    this.elementsAccessor = accessor;\n    this.clearDrawParams();\n    this.vertexArrayObject.setElementBuffer(elementBuffer, accessor);\n\n    return this;\n  }\n\n  // Set a location in vertex attributes array to a buffer\n  setBuffer(locationOrName, buffer, appAccessor = {}) {\n    // Check target\n    if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n      return this.setElementBuffer(buffer, appAccessor);\n    }\n\n    const {location, accessor} = this._resolveLocationAndAccessor(\n      locationOrName,\n      buffer,\n      buffer.accessor,\n      appAccessor\n    );\n\n    if (location >= 0) {\n      this.values[location] = buffer;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n      this.vertexArrayObject.setBuffer(location, buffer, accessor);\n    }\n\n    return this;\n  }\n\n  // Set attribute to constant value (small typed array corresponding to one vertex' worth of data)\n  setConstant(locationOrName, arrayValue, appAccessor = {}) {\n    const {location, accessor} = this._resolveLocationAndAccessor(\n      locationOrName,\n      arrayValue,\n      // Ensure that size isn't taken from program for multi-column\n      // attributes\n      Object.assign({size: arrayValue.length}, appAccessor)\n    );\n\n    if (location >= 0) {\n      arrayValue = this.vertexArrayObject._normalizeConstantArrayValue(arrayValue);\n\n      this.values[location] = arrayValue;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n\n      // NOTE: We set the actual constant value later on bind. We can't set the value now since\n      // constants are global and affect all other VertexArrays that have disabled attributes\n      // in the same location.\n      // We do disable the attribute which makes it use the global constant value at that location\n      this.vertexArrayObject.enable(location, false);\n    }\n\n    return this;\n  }\n\n  // Workaround for Chrome TransformFeedback binding issue\n  // If required, unbind temporarily to avoid conflicting with TransformFeedback\n  unbindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.vertexArrayObject.setElementBuffer(null);\n      }\n\n      // Chrome does not like buffers that are bound to several binding points,\n      // so we need to offer and unbind facility\n      // WebGL offers disabling, but no clear way to set a VertexArray buffer to `null`\n      // So we just bind all the attributes to the dummy \"attribute zero\" buffer\n      this.buffer = this.buffer || new Buffer(this.gl, {accessor: {size: 4}});\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        if (this.values[location] instanceof Buffer) {\n          this.gl.disableVertexAttribArray(location);\n          this.gl.bindBuffer(GL.ARRAY_BUFFER, this.buffer.handle);\n          this.gl.vertexAttribPointer(location, 1, GL.FLOAT, false, 0, 0);\n        }\n      }\n    });\n    return this;\n  }\n\n  // Workaround for Chrome TransformFeedback binding issue\n  // If required, rebind rebind after temporary unbind\n  bindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.setElementBuffer(this.elements);\n      }\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        const buffer = this.values[location];\n        if (buffer instanceof Buffer) {\n          this.setBuffer(location, buffer);\n        }\n      }\n    });\n    return this;\n  }\n\n  // Bind for use\n  // When a vertex array is about to be used, we must:\n  // - Set constant attributes (since these are stored on the context and reset on bind)\n  // - Check if we need to initialize the buffer\n  bindForDraw(vertexCount, instanceCount, func) {\n    let value;\n\n    this.vertexArrayObject.bind(() => {\n      // Make sure that any constant attributes are updated (stored on the context, not the VAO)\n      // Also handles attribute 0\n      this._setConstantAttributes(vertexCount, instanceCount);\n\n      value = func();\n    });\n\n    return value;\n  }\n\n  // PRIVATE\n\n  // Resolve locations and accessors\n  _resolveLocationAndAccessor(locationOrName, value, valueAccessor, appAccessor) {\n    const INVALID_RESULT = {\n      location: -1,\n      accessor: null\n    };\n\n    const {location, name} = this._getAttributeIndex(locationOrName);\n    if (!Number.isFinite(location) || location < 0) {\n      this.unused[locationOrName] = value;\n      log.once(3, () => `unused value ${locationOrName} in ${this.id}`)();\n      return INVALID_RESULT;\n    }\n\n    const accessInfo = this._getAttributeInfo(name || location);\n\n    // Attribute location wasn't directly found.\n    // Likely due to multi-location attributes (e.g. matrix)\n    if (!accessInfo) {\n      return INVALID_RESULT;\n    }\n\n    // Resolve the partial accessors into a final accessor\n    const currentAccessor = this.accessors[location] || {};\n    const accessor = Accessor.resolve(\n      accessInfo.accessor,\n      currentAccessor,\n      valueAccessor,\n      appAccessor\n    );\n\n    const {size, type} = accessor;\n    assert(Number.isFinite(size) && Number.isFinite(type));\n\n    return {location, accessor};\n  }\n\n  _getAttributeInfo(attributeName) {\n    return this.configuration && this.configuration.getAttributeInfo(attributeName);\n  }\n\n  _getAttributeIndex(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return {location};\n    }\n\n    const multiLocation = MULTI_LOCATION_ATTRIBUTE_REGEXP.exec(locationOrName);\n    const name = multiLocation ? multiLocation[1] : locationOrName;\n    const locationOffset = multiLocation ? Number(multiLocation[2]) : 0;\n\n    if (this.configuration) {\n      return {\n        location: this.configuration.getAttributeLocation(name) + locationOffset,\n        name\n      };\n    }\n\n    return {location: -1};\n  }\n\n  _setAttribute(locationOrName, value) {\n    if (value instanceof Buffer) {\n      //  Signature: {attributeName: Buffer}\n      this.setBuffer(locationOrName, value);\n    } else if (Array.isArray(value) && value.length && value[0] instanceof Buffer) {\n      // Signature: {attributeName: [buffer, accessor]}\n      const buffer = value[0];\n      const accessor = value[1];\n      this.setBuffer(locationOrName, buffer, accessor);\n    } else if (ArrayBuffer.isView(value) || Array.isArray(value)) {\n      // Signature: {attributeName: constant}, constant == short (typed) array\n      const constant = value;\n      this.setConstant(locationOrName, constant);\n    } else if (value.buffer instanceof Buffer) {\n      // luma.gl v7: Support accessor objects with 'buffer' field\n      // for interleaved data\n      // Signature: {attributeName: {...accessor, buffer}}\n      const accessor = value;\n      this.setBuffer(locationOrName, accessor.buffer, accessor);\n    } else {\n      throw new Error(ERR_ATTRIBUTE_TYPE);\n    }\n  }\n\n  // Updates all constant attribute values (constants are used when vertex attributes are disabled).\n  // This needs to be done repeatedly since in contrast to buffer bindings,\n  // constants are stored on the WebGL context, not the VAO\n  _setConstantAttributes(vertexCount, instanceCount) {\n    // TODO - use accessor to determine what length to use\n    const elementCount = Math.max(vertexCount | 0, instanceCount | 0);\n    let constant = this.values[0];\n    if (ArrayBuffer.isView(constant)) {\n      this._setConstantAttributeZero(constant, elementCount);\n    }\n\n    for (let location = 1; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      constant = this.values[location];\n      if (ArrayBuffer.isView(constant)) {\n        this._setConstantAttribute(location, constant);\n      }\n    }\n  }\n\n  _setConstantAttributeZero(constant, elementCount) {\n    if (VertexArrayObject.isSupported(this.gl, {constantAttributeZero: true})) {\n      this._setConstantAttribute(0, constant);\n      return;\n    }\n\n    // Get a dummy buffer populated with repeated constants\n    const buffer = this.vertexArrayObject.getConstantBuffer(elementCount, constant);\n\n    // Set the buffer on location 0\n    this.vertexArrayObject.setBuffer(0, buffer, this.accessors[0]);\n  }\n\n  _setConstantAttribute(location, constant) {\n    VertexArrayObject.setConstant(this.gl, location, constant);\n  }\n\n  // Walks the buffers and updates draw parameters\n  _updateDrawParams() {\n    const drawParams = {\n      isIndexed: false,\n      isInstanced: false,\n      indexCount: Infinity,\n      vertexCount: Infinity,\n      instanceCount: Infinity\n    };\n\n    for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      this._updateDrawParamsForLocation(drawParams, location);\n    }\n\n    if (this.elements) {\n      // indexing is autodetected - buffer with target GL.ELEMENT_ARRAY_BUFFER\n      // index type is saved for drawElement calls\n      drawParams.elementCount = this.elements.getElementCount(this.elements.accessor);\n      drawParams.isIndexed = true;\n      drawParams.indexType = this.elementsAccessor.type || this.elements.accessor.type;\n      drawParams.indexOffset = this.elementsAccessor.offset || 0;\n    }\n\n    // Post-calculation checks\n    if (drawParams.indexCount === Infinity) {\n      drawParams.indexCount = 0;\n    }\n    if (drawParams.vertexCount === Infinity) {\n      drawParams.vertexCount = 0;\n    }\n    if (drawParams.instanceCount === Infinity) {\n      drawParams.instanceCount = 0;\n    }\n\n    return drawParams;\n  }\n\n  _updateDrawParamsForLocation(drawParams, location) {\n    const value = this.values[location];\n    const accessor = this.accessors[location];\n\n    if (!value) {\n      return;\n    }\n\n    // Check if instanced (whether buffer or constant)\n    const {divisor} = accessor;\n    const isInstanced = divisor > 0;\n    drawParams.isInstanced = drawParams.isInstanced || isInstanced;\n\n    if (value instanceof Buffer) {\n      const buffer = value;\n\n      if (isInstanced) {\n        // instance attribute\n        const instanceCount = buffer.getVertexCount(accessor);\n        drawParams.instanceCount = Math.min(drawParams.instanceCount, instanceCount);\n      } else {\n        // normal attribute\n        const vertexCount = buffer.getVertexCount(accessor);\n        drawParams.vertexCount = Math.min(drawParams.vertexCount, vertexCount);\n      }\n    }\n  }\n\n  // DEPRECATED in v6.x - but not warnings not properly implemented\n\n  setElements(elementBuffer = null, accessor = {}) {\n    log.deprecated('setElements', 'setElementBuffer')();\n    return this.setElementBuffer(elementBuffer, accessor);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}