{"ast":null,"code":"import { VERSION } from './lib/utils/version';\nimport { encodeGLTFSync } from './lib/encoders/encode-gltf';\nexport var GLTFWriter = {\n  name: 'glTF',\n  id: 'gltf',\n  module: 'gltf',\n  version: VERSION,\n  extensions: ['glb'],\n  mimeTypes: ['model/gltf-binary'],\n  binary: true,\n  encodeSync: encodeSync,\n  options: {\n    gltf: {}\n  }\n};\nfunction encodeSync(gltf) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$byteOffset = options.byteOffset,\n    byteOffset = _options$byteOffset === void 0 ? 0 : _options$byteOffset;\n  var byteLength = encodeGLTFSync(gltf, null, byteOffset, options);\n  var arrayBuffer = new ArrayBuffer(byteLength);\n  var dataView = new DataView(arrayBuffer);\n  encodeGLTFSync(gltf, dataView, byteOffset, options);\n  return arrayBuffer;\n}\nexport var _TypecheckGLBLoader = GLTFWriter;","map":{"version":3,"names":["VERSION","encodeGLTFSync","GLTFWriter","name","id","module","version","extensions","mimeTypes","binary","encodeSync","options","gltf","arguments","length","undefined","_options$byteOffset","byteOffset","byteLength","arrayBuffer","ArrayBuffer","dataView","DataView","_TypecheckGLBLoader"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/gltf/src/gltf-writer.ts"],"sourcesContent":["import type {Writer, WriterOptions} from '@loaders.gl/loader-utils';\nimport {VERSION} from './lib/utils/version';\nimport {encodeGLTFSync} from './lib/encoders/encode-gltf';\n\nexport type GLTFWriterOptions = WriterOptions & {\n  gltf?: {};\n  byteOffset?: number;\n};\n\n/**\n * GLTF exporter\n */\nexport const GLTFWriter = {\n  name: 'glTF',\n  id: 'gltf',\n  module: 'gltf',\n  version: VERSION,\n\n  extensions: ['glb'], // We only support encoding to binary GLB, not to JSON GLTF\n  mimeTypes: ['model/gltf-binary'], // 'model/gltf+json',\n  binary: true,\n\n  encodeSync,\n\n  options: {\n    gltf: {}\n  }\n};\n\nfunction encodeSync(gltf, options: GLTFWriterOptions = {}) {\n  const {byteOffset = 0} = options;\n\n  // Calculate length, then create arraybuffer and encode\n  const byteLength = encodeGLTFSync(gltf, null, byteOffset, options);\n  const arrayBuffer = new ArrayBuffer(byteLength);\n  const dataView = new DataView(arrayBuffer);\n  encodeGLTFSync(gltf, dataView, byteOffset, options);\n\n  return arrayBuffer;\n}\n\n// TYPE TESTS - TODO find a better way than exporting junk\nexport const _TypecheckGLBLoader: Writer = GLTFWriter;\n"],"mappings":"AACA,SAAQA,OAAO,QAAO,qBAAqB;AAC3C,SAAQC,cAAc,QAAO,4BAA4B;AAUzD,OAAO,IAAMC,UAAU,GAAG;EACxBC,IAAI,EAAE,MAAM;EACZC,EAAE,EAAE,MAAM;EACVC,MAAM,EAAE,MAAM;EACdC,OAAO,EAAEN,OAAO;EAEhBO,UAAU,EAAE,CAAC,KAAK,CAAC;EACnBC,SAAS,EAAE,CAAC,mBAAmB,CAAC;EAChCC,MAAM,EAAE,IAAI;EAEZC,UAAU,EAAVA,UAAU;EAEVC,OAAO,EAAE;IACPC,IAAI,EAAE,CAAC;EACT;AACF,CAAC;AAED,SAASF,UAAUA,CAACE,IAAI,EAAmC;EAAA,IAAjCD,OAA0B,GAAAE,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EACvD,IAAAG,mBAAA,GAAyBL,OAAO,CAAzBM,UAAU;IAAVA,UAAU,GAAAD,mBAAA,cAAG,IAAAA,mBAAA;EAGpB,IAAME,UAAU,GAAGjB,cAAc,CAACW,IAAI,EAAE,IAAI,EAAEK,UAAU,EAAEN,OAAO,CAAC;EAClE,IAAMQ,WAAW,GAAG,IAAIC,WAAW,CAACF,UAAU,CAAC;EAC/C,IAAMG,QAAQ,GAAG,IAAIC,QAAQ,CAACH,WAAW,CAAC;EAC1ClB,cAAc,CAACW,IAAI,EAAES,QAAQ,EAAEJ,UAAU,EAAEN,OAAO,CAAC;EAEnD,OAAOQ,WAAW;AACpB;AAGA,OAAO,IAAMI,mBAA2B,GAAGrB,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}