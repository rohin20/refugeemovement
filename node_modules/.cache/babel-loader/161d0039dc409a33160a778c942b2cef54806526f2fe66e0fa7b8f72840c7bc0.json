{"ast":null,"code":"import _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { uid, assert } from '@luma.gl/webgl';\nexport var DRAW_MODE = {\n  POINTS: 0x0000,\n  LINES: 0x0001,\n  LINE_LOOP: 0x0002,\n  LINE_STRIP: 0x0003,\n  TRIANGLES: 0x0004,\n  TRIANGLE_STRIP: 0x0005,\n  TRIANGLE_FAN: 0x0006\n};\nvar Geometry = /*#__PURE__*/function () {\n  function Geometry() {\n    _classCallCheck(this, Geometry);\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _props$id = props.id,\n      id = _props$id === void 0 ? uid('geometry') : _props$id,\n      _props$drawMode = props.drawMode,\n      drawMode = _props$drawMode === void 0 ? DRAW_MODE.TRIANGLES : _props$drawMode,\n      _props$attributes = props.attributes,\n      attributes = _props$attributes === void 0 ? {} : _props$attributes,\n      _props$indices = props.indices,\n      indices = _props$indices === void 0 ? null : _props$indices,\n      _props$vertexCount = props.vertexCount,\n      vertexCount = _props$vertexCount === void 0 ? null : _props$vertexCount;\n    this.id = id;\n    this.drawMode = drawMode | 0;\n    this.attributes = {};\n    this.userData = {};\n    this._setAttributes(attributes, indices);\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n  }\n  _createClass(Geometry, [{\n    key: \"mode\",\n    get: function get() {\n      return this.drawMode;\n    }\n  }, {\n    key: \"getVertexCount\",\n    value: function getVertexCount() {\n      return this.vertexCount;\n    }\n  }, {\n    key: \"getAttributes\",\n    value: function getAttributes() {\n      return this.indices ? _objectSpread({\n        indices: this.indices\n      }, this.attributes) : this.attributes;\n    }\n  }, {\n    key: \"_print\",\n    value: function _print(attributeName) {\n      return \"Geometry \".concat(this.id, \" attribute \").concat(attributeName);\n    }\n  }, {\n    key: \"_setAttributes\",\n    value: function _setAttributes(attributes, indices) {\n      if (indices) {\n        this.indices = ArrayBuffer.isView(indices) ? {\n          value: indices,\n          size: 1\n        } : indices;\n      }\n      for (var attributeName in attributes) {\n        var attribute = attributes[attributeName];\n        attribute = ArrayBuffer.isView(attribute) ? {\n          value: attribute\n        } : attribute;\n        assert(ArrayBuffer.isView(attribute.value), \"\".concat(this._print(attributeName), \": must be typed array or object with value as typed array\"));\n        if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) {\n          attribute.size = 3;\n        }\n        if (attributeName === 'indices') {\n          assert(!this.indices);\n          this.indices = attribute;\n        } else {\n          this.attributes[attributeName] = attribute;\n        }\n      }\n      if (this.indices && this.indices.isIndexed !== undefined) {\n        this.indices = Object.assign({}, this.indices);\n        delete this.indices.isIndexed;\n      }\n      return this;\n    }\n  }, {\n    key: \"_calculateVertexCount\",\n    value: function _calculateVertexCount(attributes, indices) {\n      if (indices) {\n        return indices.value.length;\n      }\n      var vertexCount = Infinity;\n      for (var attributeName in attributes) {\n        var attribute = attributes[attributeName];\n        var value = attribute.value,\n          size = attribute.size,\n          constant = attribute.constant;\n        if (!constant && value && size >= 1) {\n          vertexCount = Math.min(vertexCount, value.length / size);\n        }\n      }\n      assert(Number.isFinite(vertexCount));\n      return vertexCount;\n    }\n  }], [{\n    key: \"DRAW_MODE\",\n    get: function get() {\n      return DRAW_MODE;\n    }\n  }]);\n  return Geometry;\n}();\nexport { Geometry as default };","map":{"version":3,"names":["uid","assert","DRAW_MODE","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","Geometry","_classCallCheck","props","arguments","length","undefined","_props$id","id","_props$drawMode","drawMode","_props$attributes","attributes","_props$indices","indices","_props$vertexCount","vertexCount","userData","_setAttributes","_calculateVertexCount","_createClass","key","get","value","getVertexCount","getAttributes","_objectSpread","_print","attributeName","concat","ArrayBuffer","isView","size","attribute","isIndexed","Object","assign","Infinity","constant","Math","min","Number","isFinite","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@luma.gl/engine/src/geometry/geometry.js"],"sourcesContent":["import {uid, assert} from '@luma.gl/webgl';\n\n// Rendering primitives - specify how to extract primitives from vertices.\n// NOTE: These are numerically identical to the corresponding WebGL/OpenGL constants\nexport const DRAW_MODE = {\n  POINTS: 0x0000, // draw single points.\n  LINES: 0x0001, // draw lines. Each vertex connects to the one after it.\n  LINE_LOOP: 0x0002, // draw lines. Each set of two vertices is treated as a separate line segment.\n  LINE_STRIP: 0x0003, // draw a connected group of line segments from the first vertex to the last\n  TRIANGLES: 0x0004, // draw triangles. Each set of three vertices creates a separate triangle.\n  TRIANGLE_STRIP: 0x0005, // draw a connected group of triangles.\n  TRIANGLE_FAN: 0x0006 // draw a connected group of triangles.\n  // Each vertex connects to the previous and the first vertex in the fan.\n};\n\nexport default class Geometry {\n  static get DRAW_MODE() {\n    return DRAW_MODE;\n  }\n\n  constructor(props = {}) {\n    const {\n      id = uid('geometry'),\n      drawMode = DRAW_MODE.TRIANGLES,\n      attributes = {},\n      indices = null,\n      vertexCount = null\n    } = props;\n\n    this.id = id;\n    this.drawMode = drawMode | 0;\n    this.attributes = {};\n    this.userData = {};\n\n    this._setAttributes(attributes, indices);\n\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n\n    // stubRemovedMethods(this, [\n    //   'setNeedsRedraw', 'needsRedraw', 'setAttributes'\n    // ], 'Immutable');\n\n    // stubRemovedMethods(this, [\n    //   'hasAttribute', 'getAttribute', 'getArray'\n    // ], 'Use geometry.attributes and geometry.indices');\n\n    // deprecateMethods(this, ['getAttributes'])\n  }\n\n  get mode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  // Return an object with all attributes plus indices added as a field.\n  getAttributes() {\n    return this.indices ? {indices: this.indices, ...this.attributes} : this.attributes;\n  }\n\n  // PRIVATE\n\n  _print(attributeName) {\n    return `Geometry ${this.id} attribute ${attributeName}`;\n  }\n\n  // Attribute\n  // value: typed array\n  // type: indices, vertices, uvs\n  // size: elements per vertex\n  // target: WebGL buffer type (string or constant)\n  _setAttributes(attributes, indices) {\n    if (indices) {\n      this.indices = ArrayBuffer.isView(indices) ? {value: indices, size: 1} : indices;\n    }\n\n    for (const attributeName in attributes) {\n      let attribute = attributes[attributeName];\n\n      // Wrap \"unwrapped\" arrays and try to autodetect their type\n      attribute = ArrayBuffer.isView(attribute) ? {value: attribute} : attribute;\n\n      assert(\n        ArrayBuffer.isView(attribute.value),\n        `${this._print(attributeName)}: must be typed array or object with value as typed array`\n      );\n\n      if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) {\n        attribute.size = 3;\n      }\n\n      // Move indices to separate field\n      if (attributeName === 'indices') {\n        assert(!this.indices);\n        this.indices = attribute;\n      } else {\n        this.attributes[attributeName] = attribute;\n      }\n    }\n\n    if (this.indices && this.indices.isIndexed !== undefined) {\n      this.indices = Object.assign({}, this.indices);\n      delete this.indices.isIndexed;\n    }\n\n    return this;\n  }\n\n  _calculateVertexCount(attributes, indices) {\n    if (indices) {\n      return indices.value.length;\n    }\n    let vertexCount = Infinity;\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const {value, size, constant} = attribute;\n      if (!constant && value && size >= 1) {\n        vertexCount = Math.min(vertexCount, value.length / size);\n      }\n    }\n\n    assert(Number.isFinite(vertexCount));\n    return vertexCount;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}