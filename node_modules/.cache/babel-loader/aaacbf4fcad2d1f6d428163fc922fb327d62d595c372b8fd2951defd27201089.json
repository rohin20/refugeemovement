{"ast":null,"code":"import _slicedToArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar DEFAULT_ROW_COUNT = 100;\nvar ColumnarTableBatchAggregator = /*#__PURE__*/function () {\n  function ColumnarTableBatchAggregator(schema, options) {\n    _classCallCheck(this, ColumnarTableBatchAggregator);\n    _defineProperty(this, \"schema\", void 0);\n    _defineProperty(this, \"length\", 0);\n    _defineProperty(this, \"allocated\", 0);\n    _defineProperty(this, \"columns\", {});\n    this.schema = schema;\n    this._reallocateColumns();\n  }\n  _createClass(ColumnarTableBatchAggregator, [{\n    key: \"rowCount\",\n    value: function rowCount() {\n      return this.length;\n    }\n  }, {\n    key: \"addArrayRow\",\n    value: function addArrayRow(row) {\n      this._reallocateColumns();\n      var i = 0;\n      for (var fieldName in this.columns) {\n        this.columns[fieldName][this.length] = row[i++];\n      }\n      this.length++;\n    }\n  }, {\n    key: \"addObjectRow\",\n    value: function addObjectRow(row) {\n      this._reallocateColumns();\n      for (var fieldName in row) {\n        this.columns[fieldName][this.length] = row[fieldName];\n      }\n      this.length++;\n    }\n  }, {\n    key: \"getBatch\",\n    value: function getBatch() {\n      this._pruneColumns();\n      var columns = Array.isArray(this.schema) ? this.columns : {};\n      if (!Array.isArray(this.schema)) {\n        for (var fieldName in this.schema) {\n          var field = this.schema[fieldName];\n          columns[field.name] = this.columns[field.index];\n        }\n      }\n      this.columns = {};\n      var batch = {\n        shape: 'columnar-table',\n        batchType: 'data',\n        data: columns,\n        schema: this.schema,\n        length: this.length\n      };\n      return batch;\n    }\n  }, {\n    key: \"_reallocateColumns\",\n    value: function _reallocateColumns() {\n      if (this.length < this.allocated) {\n        return;\n      }\n      this.allocated = this.allocated > 0 ? this.allocated *= 2 : DEFAULT_ROW_COUNT;\n      this.columns = {};\n      for (var fieldName in this.schema) {\n        var field = this.schema[fieldName];\n        var ArrayType = field.type || Float32Array;\n        var oldColumn = this.columns[field.index];\n        if (oldColumn && ArrayBuffer.isView(oldColumn)) {\n          var typedArray = new ArrayType(this.allocated);\n          typedArray.set(oldColumn);\n          this.columns[field.index] = typedArray;\n        } else if (oldColumn) {\n          oldColumn.length = this.allocated;\n          this.columns[field.index] = oldColumn;\n        } else {\n          this.columns[field.index] = new ArrayType(this.allocated);\n        }\n      }\n    }\n  }, {\n    key: \"_pruneColumns\",\n    value: function _pruneColumns() {\n      for (var _i = 0, _Object$entries = Object.entries(this.columns); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          columnName = _Object$entries$_i[0],\n          column = _Object$entries$_i[1];\n        this.columns[columnName] = column.slice(0, this.length);\n      }\n    }\n  }]);\n  return ColumnarTableBatchAggregator;\n}();\nexport { ColumnarTableBatchAggregator as default };","map":{"version":3,"names":["DEFAULT_ROW_COUNT","ColumnarTableBatchAggregator","schema","options","_classCallCheck","_defineProperty","_reallocateColumns","_createClass","key","value","rowCount","length","addArrayRow","row","i","fieldName","columns","addObjectRow","getBatch","_pruneColumns","Array","isArray","field","name","index","batch","shape","batchType","data","allocated","ArrayType","type","Float32Array","oldColumn","ArrayBuffer","isView","typedArray","set","_i","_Object$entries","Object","entries","_Object$entries$_i","_slicedToArray","columnName","column","slice","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/schema/src/lib/batches/columnar-table-batch-aggregator.ts"],"sourcesContent":["import type {Schema} from '../schema/schema';\nimport type {ColumnarTableBatch, ArrowTableBatch} from '../../category/table/table-types';\nimport {TableBatchAggregator} from './table-batch-aggregator';\n\ntype ColumnarTableBatchOptions = {};\n\nconst DEFAULT_ROW_COUNT = 100;\n\nexport default class ColumnarTableBatchAggregator implements TableBatchAggregator {\n  schema: Schema;\n  length: number = 0;\n  allocated: number = 0;\n  columns: {[columnName: string]: any[]} = {};\n\n  constructor(schema: Schema, options: ColumnarTableBatchOptions) {\n    this.schema = schema;\n    this._reallocateColumns();\n  }\n\n  rowCount(): number {\n    return this.length;\n  }\n\n  addArrayRow(row: any[]) {\n    // If user keeps pushing rows beyond batch size, reallocate\n    this._reallocateColumns();\n    let i = 0;\n    // TODO what if no csv header, columns not populated?\n    for (const fieldName in this.columns) {\n      this.columns[fieldName][this.length] = row[i++];\n    }\n    this.length++;\n  }\n\n  addObjectRow(row: {[columnName: string]: any}): void {\n    // If user keeps pushing rows beyond batch size, reallocate\n    this._reallocateColumns();\n    for (const fieldName in row) {\n      this.columns[fieldName][this.length] = row[fieldName];\n    }\n    this.length++;\n  }\n\n  getBatch(): ColumnarTableBatch | ArrowTableBatch | null {\n    this._pruneColumns();\n    const columns = Array.isArray(this.schema) ? this.columns : {};\n\n    // schema is an array if there're no headers\n    // object if there are headers\n    // columns should match schema format\n    if (!Array.isArray(this.schema)) {\n      for (const fieldName in this.schema) {\n        const field = this.schema[fieldName];\n        columns[field.name] = this.columns[field.index];\n      }\n    }\n\n    this.columns = {};\n\n    const batch: ColumnarTableBatch = {\n      shape: 'columnar-table',\n      batchType: 'data',\n      data: columns,\n      schema: this.schema,\n      length: this.length\n    };\n\n    return batch;\n  }\n\n  // HELPERS\n\n  _reallocateColumns() {\n    if (this.length < this.allocated) {\n      return;\n    }\n\n    // @ts-ignore TODO\n    this.allocated = this.allocated > 0 ? (this.allocated *= 2) : DEFAULT_ROW_COUNT;\n    this.columns = {};\n\n    for (const fieldName in this.schema) {\n      const field = this.schema[fieldName];\n      const ArrayType = field.type || Float32Array;\n      const oldColumn = this.columns[field.index];\n\n      if (oldColumn && ArrayBuffer.isView(oldColumn)) {\n        // Copy the old data to the new array\n        const typedArray = new ArrayType(this.allocated);\n        typedArray.set(oldColumn);\n        this.columns[field.index] = typedArray;\n      } else if (oldColumn) {\n        // Plain array\n        oldColumn.length = this.allocated;\n        this.columns[field.index] = oldColumn;\n      } else {\n        // Create new\n        this.columns[field.index] = new ArrayType(this.allocated);\n      }\n    }\n  }\n\n  _pruneColumns() {\n    for (const [columnName, column] of Object.entries(this.columns)) {\n      this.columns[columnName] = column.slice(0, this.length);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}