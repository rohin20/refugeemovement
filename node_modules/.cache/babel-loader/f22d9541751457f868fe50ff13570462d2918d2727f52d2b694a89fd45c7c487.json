{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nvar ColumnarTableBatch = function () {\n  function ColumnarTableBatch(schema) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, ColumnarTableBatch);\n    this.schema = schema;\n    this.batchSize = options.batchSize || 'auto';\n    this.length = 0;\n    this.allocated = 0;\n    this.columns = null;\n    this.isChunkComplete = false;\n    this.reallocateColumns();\n  }\n  _createClass(ColumnarTableBatch, [{\n    key: \"addRow\",\n    value: function addRow(row) {\n      this.reallocateColumns();\n      for (var fieldName in row) {\n        this.columns[fieldName][this.length] = row[fieldName];\n      }\n      this.length++;\n    }\n  }, {\n    key: \"chunkComplete\",\n    value: function chunkComplete() {\n      this.isChunkComplete = true;\n    }\n  }, {\n    key: \"isFull\",\n    value: function isFull() {\n      if (this.batchSize === 'auto') {\n        return this.isChunkComplete;\n      }\n      return this.length >= this.allocated;\n    }\n  }, {\n    key: \"getBatch\",\n    value: function getBatch() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.pruneColumns();\n      var columns = Array.isArray(this.schema) ? this.columns : {};\n      if (!Array.isArray(this.schema)) {\n        for (var fieldName in this.schema) {\n          var field = this.schema[fieldName];\n          columns[field.name] = this.columns[field.index];\n        }\n      }\n      this.columns = null;\n      this.isChunkComplete = false;\n      return {\n        data: columns,\n        schema: this.schema,\n        length: this.length\n      };\n    }\n  }, {\n    key: \"reallocateColumns\",\n    value: function reallocateColumns() {\n      if (this.length < this.allocated) {\n        return;\n      }\n      this.allocated = this.allocated > 0 ? this.allocated *= 2 : this.batchSize;\n      this.columns = [];\n      for (var fieldName in this.schema) {\n        var field = this.schema[fieldName];\n        var ArrayType = field.type || Float32Array;\n        var oldColumn = this.columns[field.index];\n        if (oldColumn && ArrayBuffer.isView(oldColumn)) {\n          var typedArray = new ArrayType(this.allocated);\n          typedArray.set(oldColumn);\n          this.columns[field.index] = typedArray;\n        } else if (oldColumn) {\n          oldColumn.length = this.allocated;\n          this.columns[field.index] = oldColumn;\n        } else {\n          this.columns[field.index] = new ArrayType(this.allocated);\n        }\n      }\n    }\n  }, {\n    key: \"pruneColumns\",\n    value: function pruneColumns() {\n      var _this = this;\n      this.columns = this.columns.map(function (column) {\n        return column.slice(0, _this.length);\n      });\n    }\n  }]);\n  return ColumnarTableBatch;\n}();\nexport { ColumnarTableBatch as default };","map":{"version":3,"names":["ColumnarTableBatch","schema","options","arguments","length","undefined","_classCallCheck","batchSize","allocated","columns","isChunkComplete","reallocateColumns","row","fieldName","pruneColumns","Array","isArray","field","name","index","data","ArrayType","type","Float32Array","oldColumn","ArrayBuffer","isView","typedArray","set","_this","map","column","slice"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/tables/src/lib/table/columnar-table-batch.js"],"sourcesContent":["export default class ColumnarTableBatch {\n  constructor(schema, options = {}) {\n    this.schema = schema;\n    this.batchSize = options.batchSize || 'auto';\n\n    this.length = 0;\n    this.allocated = 0;\n    this.columns = null;\n    this.isChunkComplete = false;\n\n    this.reallocateColumns();\n  }\n\n  addRow(row) {\n    // If user keeps pushing rows beyond batch size, reallocate\n    this.reallocateColumns();\n    for (const fieldName in row) {\n      this.columns[fieldName][this.length] = row[fieldName];\n    }\n    this.length++;\n  }\n\n  // Is this TableBatch full?\n  chunkComplete() {\n    this.isChunkComplete = true;\n  }\n\n  isFull() {\n    if (this.batchSize === 'auto') {\n      return this.isChunkComplete;\n    }\n    return this.length >= this.allocated;\n  }\n\n  getBatch(options = {}) {\n    this.pruneColumns();\n    const columns = Array.isArray(this.schema) ? this.columns : {};\n\n    // schema is an array if there're no headers\n    // object if there are headers\n    // columns should match schema format\n    if (!Array.isArray(this.schema)) {\n      for (const fieldName in this.schema) {\n        const field = this.schema[fieldName];\n        columns[field.name] = this.columns[field.index];\n      }\n    }\n\n    this.columns = null;\n    this.isChunkComplete = false;\n\n    return {data: columns, schema: this.schema, length: this.length};\n  }\n\n  // HELPERS\n\n  reallocateColumns() {\n    if (this.length < this.allocated) {\n      return;\n    }\n\n    this.allocated = this.allocated > 0 ? (this.allocated *= 2) : this.batchSize;\n    this.columns = [];\n\n    for (const fieldName in this.schema) {\n      const field = this.schema[fieldName];\n      const ArrayType = field.type || Float32Array;\n      const oldColumn = this.columns[field.index];\n\n      if (oldColumn && ArrayBuffer.isView(oldColumn)) {\n        // Copy the old data to the new array\n        const typedArray = new ArrayType(this.allocated);\n        typedArray.set(oldColumn);\n        this.columns[field.index] = typedArray;\n      } else if (oldColumn) {\n        // Plain array\n        oldColumn.length = this.allocated;\n        this.columns[field.index] = oldColumn;\n      } else {\n        // Create new\n        this.columns[field.index] = new ArrayType(this.allocated);\n      }\n    }\n  }\n\n  pruneColumns() {\n    this.columns = this.columns.map(column => column.slice(0, this.length));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}