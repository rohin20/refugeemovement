{"ast":null,"code":"import _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { clamp } from '@math.gl/core';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport { mod } from '../utils/math-utils';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nexport var OrbitState = /*#__PURE__*/function (_ViewState) {\n  _inherits(OrbitState, _ViewState);\n  var _super = _createSuper(OrbitState);\n  function OrbitState(options) {\n    var _this;\n    _classCallCheck(this, OrbitState);\n    var width = options.width,\n      height = options.height,\n      _options$rotationX = options.rotationX,\n      rotationX = _options$rotationX === void 0 ? 0 : _options$rotationX,\n      _options$rotationOrbi = options.rotationOrbit,\n      rotationOrbit = _options$rotationOrbi === void 0 ? 0 : _options$rotationOrbi,\n      _options$target = options.target,\n      target = _options$target === void 0 ? [0, 0, 0] : _options$target,\n      _options$zoom = options.zoom,\n      zoom = _options$zoom === void 0 ? 0 : _options$zoom,\n      _options$minRotationX = options.minRotationX,\n      minRotationX = _options$minRotationX === void 0 ? -90 : _options$minRotationX,\n      _options$maxRotationX = options.maxRotationX,\n      maxRotationX = _options$maxRotationX === void 0 ? 90 : _options$maxRotationX,\n      _options$minZoom = options.minZoom,\n      minZoom = _options$minZoom === void 0 ? -Infinity : _options$minZoom,\n      _options$maxZoom = options.maxZoom,\n      maxZoom = _options$maxZoom === void 0 ? Infinity : _options$maxZoom,\n      startPanPosition = options.startPanPosition,\n      startRotatePos = options.startRotatePos,\n      startRotationX = options.startRotationX,\n      startRotationOrbit = options.startRotationOrbit,\n      startZoomPosition = options.startZoomPosition,\n      startZoom = options.startZoom;\n    _this = _super.call(this, {\n      width: width,\n      height: height,\n      rotationX: rotationX,\n      rotationOrbit: rotationOrbit,\n      target: target,\n      zoom: zoom,\n      minRotationX: minRotationX,\n      maxRotationX: maxRotationX,\n      minZoom: minZoom,\n      maxZoom: maxZoom\n    }, {\n      startPanPosition: startPanPosition,\n      startRotatePos: startRotatePos,\n      startRotationX: startRotationX,\n      startRotationOrbit: startRotationOrbit,\n      startZoomPosition: startZoomPosition,\n      startZoom: startZoom\n    });\n    _defineProperty(_assertThisInitialized(_this), \"makeViewport\", void 0);\n    _this.makeViewport = options.makeViewport;\n    return _this;\n  }\n  _createClass(OrbitState, [{\n    key: \"panStart\",\n    value: function panStart(_ref) {\n      var pos = _ref.pos;\n      return this._getUpdatedState({\n        startPanPosition: this._unproject(pos)\n      });\n    }\n  }, {\n    key: \"pan\",\n    value: function pan(_ref2) {\n      var pos = _ref2.pos,\n        startPosition = _ref2.startPosition;\n      var startPanPosition = this.getState().startPanPosition || startPosition;\n      if (!startPanPosition) {\n        return this;\n      }\n      var viewport = this.makeViewport(this.getViewportProps());\n      var newProps = viewport.panByPosition(startPanPosition, pos);\n      return this._getUpdatedState(newProps);\n    }\n  }, {\n    key: \"panEnd\",\n    value: function panEnd() {\n      return this._getUpdatedState({\n        startPanPosition: null\n      });\n    }\n  }, {\n    key: \"rotateStart\",\n    value: function rotateStart(_ref3) {\n      var pos = _ref3.pos;\n      return this._getUpdatedState({\n        startRotatePos: pos,\n        startRotationX: this.getViewportProps().rotationX,\n        startRotationOrbit: this.getViewportProps().rotationOrbit\n      });\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(_ref4) {\n      var pos = _ref4.pos,\n        _ref4$deltaAngleX = _ref4.deltaAngleX,\n        deltaAngleX = _ref4$deltaAngleX === void 0 ? 0 : _ref4$deltaAngleX,\n        _ref4$deltaAngleY = _ref4.deltaAngleY,\n        deltaAngleY = _ref4$deltaAngleY === void 0 ? 0 : _ref4$deltaAngleY;\n      var _this$getState = this.getState(),\n        startRotatePos = _this$getState.startRotatePos,\n        startRotationX = _this$getState.startRotationX,\n        startRotationOrbit = _this$getState.startRotationOrbit;\n      var _this$getViewportProp = this.getViewportProps(),\n        width = _this$getViewportProp.width,\n        height = _this$getViewportProp.height;\n      if (!startRotatePos || startRotationX === undefined || startRotationOrbit === undefined) {\n        return this;\n      }\n      var newRotation;\n      if (pos) {\n        var deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n        var deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n        if (startRotationX < -90 || startRotationX > 90) {\n          deltaScaleX *= -1;\n        }\n        newRotation = {\n          rotationX: startRotationX + deltaScaleY * 180,\n          rotationOrbit: startRotationOrbit + deltaScaleX * 180\n        };\n      } else {\n        newRotation = {\n          rotationX: startRotationX + deltaAngleY,\n          rotationOrbit: startRotationOrbit + deltaAngleX\n        };\n      }\n      return this._getUpdatedState(newRotation);\n    }\n  }, {\n    key: \"rotateEnd\",\n    value: function rotateEnd() {\n      return this._getUpdatedState({\n        startRotationX: null,\n        startRotationOrbit: null\n      });\n    }\n  }, {\n    key: \"shortestPathFrom\",\n    value: function shortestPathFrom(viewState) {\n      var fromProps = viewState.getViewportProps();\n      var props = _objectSpread({}, this.getViewportProps());\n      var rotationOrbit = props.rotationOrbit;\n      if (Math.abs(rotationOrbit - fromProps.rotationOrbit) > 180) {\n        props.rotationOrbit = rotationOrbit < 0 ? rotationOrbit + 360 : rotationOrbit - 360;\n      }\n      return props;\n    }\n  }, {\n    key: \"zoomStart\",\n    value: function zoomStart(_ref5) {\n      var pos = _ref5.pos;\n      return this._getUpdatedState({\n        startZoomPosition: this._unproject(pos),\n        startZoom: this.getViewportProps().zoom\n      });\n    }\n  }, {\n    key: \"zoom\",\n    value: function zoom(_ref6) {\n      var pos = _ref6.pos,\n        startPos = _ref6.startPos,\n        scale = _ref6.scale;\n      var _this$getState2 = this.getState(),\n        startZoom = _this$getState2.startZoom,\n        startZoomPosition = _this$getState2.startZoomPosition;\n      if (!startZoomPosition) {\n        startZoom = this.getViewportProps().zoom;\n        startZoomPosition = this._unproject(startPos) || this._unproject(pos);\n      }\n      if (!startZoomPosition) {\n        return this;\n      }\n      var newZoom = this._calculateNewZoom({\n        scale: scale,\n        startZoom: startZoom\n      });\n      var zoomedViewport = this.makeViewport(_objectSpread(_objectSpread({}, this.getViewportProps()), {}, {\n        zoom: newZoom\n      }));\n      return this._getUpdatedState(_objectSpread({\n        zoom: newZoom\n      }, zoomedViewport.panByPosition(startZoomPosition, pos)));\n    }\n  }, {\n    key: \"zoomEnd\",\n    value: function zoomEnd() {\n      return this._getUpdatedState({\n        startZoomPosition: null,\n        startZoom: null\n      });\n    }\n  }, {\n    key: \"zoomIn\",\n    value: function zoomIn() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      return this._getUpdatedState({\n        zoom: this._calculateNewZoom({\n          scale: speed\n        })\n      });\n    }\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      return this._getUpdatedState({\n        zoom: this._calculateNewZoom({\n          scale: 1 / speed\n        })\n      });\n    }\n  }, {\n    key: \"moveLeft\",\n    value: function moveLeft() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n      return this._panFromCenter([-speed, 0]);\n    }\n  }, {\n    key: \"moveRight\",\n    value: function moveRight() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n      return this._panFromCenter([speed, 0]);\n    }\n  }, {\n    key: \"moveUp\",\n    value: function moveUp() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n      return this._panFromCenter([0, -speed]);\n    }\n  }, {\n    key: \"moveDown\",\n    value: function moveDown() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n      return this._panFromCenter([0, speed]);\n    }\n  }, {\n    key: \"rotateLeft\",\n    value: function rotateLeft() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n      return this._getUpdatedState({\n        rotationOrbit: this.getViewportProps().rotationOrbit - speed\n      });\n    }\n  }, {\n    key: \"rotateRight\",\n    value: function rotateRight() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15;\n      return this._getUpdatedState({\n        rotationOrbit: this.getViewportProps().rotationOrbit + speed\n      });\n    }\n  }, {\n    key: \"rotateUp\",\n    value: function rotateUp() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      return this._getUpdatedState({\n        rotationX: this.getViewportProps().rotationX - speed\n      });\n    }\n  }, {\n    key: \"rotateDown\",\n    value: function rotateDown() {\n      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      return this._getUpdatedState({\n        rotationX: this.getViewportProps().rotationX + speed\n      });\n    }\n  }, {\n    key: \"_unproject\",\n    value: function _unproject(pos) {\n      var viewport = this.makeViewport(this.getViewportProps());\n      return pos && viewport.unproject(pos);\n    }\n  }, {\n    key: \"_calculateNewZoom\",\n    value: function _calculateNewZoom(_ref7) {\n      var scale = _ref7.scale,\n        startZoom = _ref7.startZoom;\n      var _this$getViewportProp2 = this.getViewportProps(),\n        maxZoom = _this$getViewportProp2.maxZoom,\n        minZoom = _this$getViewportProp2.minZoom;\n      if (startZoom === undefined) {\n        startZoom = this.getViewportProps().zoom;\n      }\n      var zoom = startZoom + Math.log2(scale);\n      return clamp(zoom, minZoom, maxZoom);\n    }\n  }, {\n    key: \"_panFromCenter\",\n    value: function _panFromCenter(offset) {\n      var _this$getViewportProp3 = this.getViewportProps(),\n        width = _this$getViewportProp3.width,\n        height = _this$getViewportProp3.height,\n        target = _this$getViewportProp3.target;\n      return this.pan({\n        startPosition: target,\n        pos: [width / 2 + offset[0], height / 2 + offset[1]]\n      });\n    }\n  }, {\n    key: \"_getUpdatedState\",\n    value: function _getUpdatedState(newProps) {\n      return new this.constructor(_objectSpread(_objectSpread(_objectSpread({\n        makeViewport: this.makeViewport\n      }, this.getViewportProps()), this.getState()), newProps));\n    }\n  }, {\n    key: \"applyConstraints\",\n    value: function applyConstraints(props) {\n      var maxZoom = props.maxZoom,\n        minZoom = props.minZoom,\n        zoom = props.zoom,\n        maxRotationX = props.maxRotationX,\n        minRotationX = props.minRotationX,\n        rotationOrbit = props.rotationOrbit;\n      props.zoom = Array.isArray(zoom) ? [clamp(zoom[0], minZoom, maxZoom), clamp(zoom[1], minZoom, maxZoom)] : clamp(zoom, minZoom, maxZoom);\n      props.rotationX = clamp(props.rotationX, minRotationX, maxRotationX);\n      if (rotationOrbit < -180 || rotationOrbit > 180) {\n        props.rotationOrbit = mod(rotationOrbit + 180, 360) - 180;\n      }\n      return props;\n    }\n  }]);\n  return OrbitState;\n}(ViewState);\nvar OrbitController = /*#__PURE__*/function (_Controller) {\n  _inherits(OrbitController, _Controller);\n  var _super2 = _createSuper(OrbitController);\n  function OrbitController() {\n    var _this2;\n    _classCallCheck(this, OrbitController);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this2 = _super2.call.apply(_super2, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this2), \"ControllerState\", OrbitState);\n    _defineProperty(_assertThisInitialized(_this2), \"transition\", {\n      transitionDuration: 300,\n      transitionInterpolator: new LinearInterpolator({\n        transitionProps: {\n          compare: ['target', 'zoom', 'rotationX', 'rotationOrbit'],\n          required: ['target', 'zoom']\n        }\n      })\n    });\n    return _this2;\n  }\n  return _createClass(OrbitController);\n}(Controller);\nexport { OrbitController as default };","map":{"version":3,"names":["clamp","Controller","ViewState","mod","LinearInterpolator","OrbitState","_ViewState","_inherits","_super","_createSuper","options","_this","_classCallCheck","width","height","_options$rotationX","rotationX","_options$rotationOrbi","rotationOrbit","_options$target","target","_options$zoom","zoom","_options$minRotationX","minRotationX","_options$maxRotationX","maxRotationX","_options$minZoom","minZoom","Infinity","_options$maxZoom","maxZoom","startPanPosition","startRotatePos","startRotationX","startRotationOrbit","startZoomPosition","startZoom","call","_defineProperty","_assertThisInitialized","makeViewport","_createClass","key","value","panStart","_ref","pos","_getUpdatedState","_unproject","pan","_ref2","startPosition","getState","viewport","getViewportProps","newProps","panByPosition","panEnd","rotateStart","_ref3","rotate","_ref4","_ref4$deltaAngleX","deltaAngleX","_ref4$deltaAngleY","deltaAngleY","_this$getState","_this$getViewportProp","undefined","newRotation","deltaScaleX","deltaScaleY","rotateEnd","shortestPathFrom","viewState","fromProps","props","_objectSpread","Math","abs","zoomStart","_ref5","_ref6","startPos","scale","_this$getState2","newZoom","_calculateNewZoom","zoomedViewport","zoomEnd","zoomIn","speed","arguments","length","zoomOut","moveLeft","_panFromCenter","moveRight","moveUp","moveDown","rotateLeft","rotateRight","rotateUp","rotateDown","unproject","_ref7","_this$getViewportProp2","log2","offset","_this$getViewportProp3","constructor","applyConstraints","Array","isArray","OrbitController","_Controller","_super2","_this2","_len","args","_key","apply","concat","transitionDuration","transitionInterpolator","transitionProps","compare","required","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/core/src/controllers/orbit-controller.ts"],"sourcesContent":["import {clamp} from '@math.gl/core';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport {mod} from '../utils/math-utils';\n\nimport type Viewport from '../viewports/viewport';\nimport LinearInterpolator from '../transitions/linear-interpolator';\n\nexport type OrbitStateProps = {\n  width: number;\n  height: number;\n  target?: number[];\n  zoom?: number | number[];\n  rotationX?: number;\n  rotationOrbit?: number;\n\n  /** Viewport constraints */\n  maxZoom?: number;\n  minZoom?: number;\n  minRotationX?: number;\n  maxRotationX?: number;\n};\n\ntype OrbitStateInternal = {\n  startPanPosition?: number[];\n  startRotatePos?: number[];\n  startRotationX?: number;\n  startRotationOrbit?: number;\n  startZoomPosition?: number[];\n  startZoom?: number | number[];\n};\n\nexport class OrbitState extends ViewState<OrbitState, OrbitStateProps, OrbitStateInternal> {\n  makeViewport: (props: Record<string, any>) => Viewport;\n\n  constructor(\n    options: OrbitStateProps &\n      OrbitStateInternal & {\n        makeViewport: (props: Record<string, any>) => Viewport;\n      }\n  ) {\n    const {\n      /* Viewport arguments */\n      width, // Width of viewport\n      height, // Height of viewport\n      rotationX = 0, // Rotation around x axis\n      rotationOrbit = 0, // Rotation around orbit axis\n      target = [0, 0, 0],\n      zoom = 0,\n\n      /* Viewport constraints */\n      minRotationX = -90,\n      maxRotationX = 90,\n      minZoom = -Infinity,\n      maxZoom = Infinity,\n\n      /** Interaction states, required to calculate change during transform */\n      // Model state when the pan operation first started\n      startPanPosition,\n      // Model state when the rotate operation first started\n      startRotatePos,\n      startRotationX,\n      startRotationOrbit,\n      // Model state when the zoom operation first started\n      startZoomPosition,\n      startZoom\n    } = options;\n\n    super(\n      {\n        width,\n        height,\n        rotationX,\n        rotationOrbit,\n        target,\n        zoom,\n        minRotationX,\n        maxRotationX,\n        minZoom,\n        maxZoom\n      },\n      {\n        startPanPosition,\n        startRotatePos,\n        startRotationX,\n        startRotationOrbit,\n        startZoomPosition,\n        startZoom\n      }\n    );\n\n    this.makeViewport = options.makeViewport;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}: {pos: [number, number]}): OrbitState {\n    return this._getUpdatedState({\n      startPanPosition: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos, startPosition}: {pos: [number, number]; startPosition?: number[]}): OrbitState {\n    const startPanPosition = this.getState().startPanPosition || startPosition;\n\n    if (!startPanPosition) {\n      return this;\n    }\n\n    const viewport = this.makeViewport(this.getViewportProps());\n    const newProps = viewport.panByPosition(startPanPosition, pos);\n\n    return this._getUpdatedState(newProps);\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd(): OrbitState {\n    return this._getUpdatedState({\n      startPanPosition: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}: {pos: [number, number]}): OrbitState {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startRotationX: this.getViewportProps().rotationX,\n      startRotationOrbit: this.getViewportProps().rotationOrbit\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({\n    pos,\n    deltaAngleX = 0,\n    deltaAngleY = 0\n  }: {\n    pos?: [number, number];\n    deltaAngleX?: number;\n    deltaAngleY?: number;\n  }): OrbitState {\n    const {startRotatePos, startRotationX, startRotationOrbit} = this.getState();\n    const {width, height} = this.getViewportProps();\n\n    if (!startRotatePos || startRotationX === undefined || startRotationOrbit === undefined) {\n      return this;\n    }\n\n    let newRotation;\n    if (pos) {\n      let deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n      const deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n\n      if (startRotationX < -90 || startRotationX > 90) {\n        // When looking at the \"back\" side of the scene, invert horizontal drag\n        // so that the camera movement follows user input\n        deltaScaleX *= -1;\n      }\n      newRotation = {\n        rotationX: startRotationX + deltaScaleY * 180,\n        rotationOrbit: startRotationOrbit + deltaScaleX * 180\n      };\n    } else {\n      newRotation = {\n        rotationX: startRotationX + deltaAngleY,\n        rotationOrbit: startRotationOrbit + deltaAngleX\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd(): OrbitState {\n    return this._getUpdatedState({\n      startRotationX: null,\n      startRotationOrbit: null\n    });\n  }\n\n  // shortest path between two view states\n  shortestPathFrom(viewState: OrbitState): OrbitStateProps {\n    const fromProps = viewState.getViewportProps();\n    const props = {...this.getViewportProps()};\n    const {rotationOrbit} = props;\n\n    if (Math.abs(rotationOrbit - fromProps.rotationOrbit) > 180) {\n      props.rotationOrbit = rotationOrbit < 0 ? rotationOrbit + 360 : rotationOrbit - 360;\n    }\n\n    return props;\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart({pos}: {pos: [number, number]}): OrbitState {\n    return this._getUpdatedState({\n      startZoomPosition: this._unproject(pos),\n      startZoom: this.getViewportProps().zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current target is\n   * @param {[Number, Number]} startPos - the target position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({\n    pos,\n    startPos,\n    scale\n  }: {\n    pos: [number, number];\n    startPos?: [number, number];\n    scale: number;\n  }): OrbitState {\n    let {startZoom, startZoomPosition} = this.getState();\n    if (!startZoomPosition) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this.getViewportProps().zoom;\n      startZoomPosition = this._unproject(startPos) || this._unproject(pos);\n    }\n    if (!startZoomPosition) {\n      return this;\n    }\n    const newZoom = this._calculateNewZoom({scale, startZoom});\n    const zoomedViewport = this.makeViewport({...this.getViewportProps(), zoom: newZoom});\n\n    return this._getUpdatedState({\n      zoom: newZoom,\n      ...zoomedViewport.panByPosition(startZoomPosition, pos)\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd(): OrbitState {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed: number = 2): OrbitState {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: speed})\n    });\n  }\n\n  zoomOut(speed: number = 2): OrbitState {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: 1 / speed})\n    });\n  }\n\n  moveLeft(speed: number = 50): OrbitState {\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveRight(speed: number = 50): OrbitState {\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveUp(speed: number = 50): OrbitState {\n    return this._panFromCenter([0, -speed]);\n  }\n\n  moveDown(speed: number = 50): OrbitState {\n    return this._panFromCenter([0, speed]);\n  }\n\n  rotateLeft(speed: number = 15): OrbitState {\n    return this._getUpdatedState({\n      rotationOrbit: this.getViewportProps().rotationOrbit - speed\n    });\n  }\n\n  rotateRight(speed: number = 15): OrbitState {\n    return this._getUpdatedState({\n      rotationOrbit: this.getViewportProps().rotationOrbit + speed\n    });\n  }\n\n  rotateUp(speed: number = 10): OrbitState {\n    return this._getUpdatedState({\n      rotationX: this.getViewportProps().rotationX - speed\n    });\n  }\n\n  rotateDown(speed: number = 10): OrbitState {\n    return this._getUpdatedState({\n      rotationX: this.getViewportProps().rotationX + speed\n    });\n  }\n\n  /* Private methods */\n\n  _unproject(pos?: number[]): number[] | undefined {\n    const viewport = this.makeViewport(this.getViewportProps());\n    // @ts-ignore\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({\n    scale,\n    startZoom\n  }: {\n    scale: number;\n    startZoom?: number | number[];\n  }): number | number[] {\n    const {maxZoom, minZoom} = this.getViewportProps();\n    if (startZoom === undefined) {\n      startZoom = this.getViewportProps().zoom;\n    }\n    const zoom = (startZoom as number) + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  _panFromCenter(offset) {\n    const {width, height, target} = this.getViewportProps();\n    return this.pan({\n      startPosition: target,\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps): OrbitState {\n    // @ts-ignore\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this.getViewportProps(),\n      ...this.getState(),\n      ...newProps\n    });\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  applyConstraints(props: Required<OrbitStateProps>): Required<OrbitStateProps> {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom, maxRotationX, minRotationX, rotationOrbit} = props;\n\n    props.zoom = Array.isArray(zoom)\n      ? [clamp(zoom[0], minZoom, maxZoom), clamp(zoom[1], minZoom, maxZoom)]\n      : clamp(zoom, minZoom, maxZoom);\n\n    props.rotationX = clamp(props.rotationX, minRotationX, maxRotationX);\n    if (rotationOrbit < -180 || rotationOrbit > 180) {\n      props.rotationOrbit = mod(rotationOrbit + 180, 360) - 180;\n    }\n\n    return props;\n  }\n}\n\nexport default class OrbitController extends Controller<OrbitState> {\n  ControllerState = OrbitState;\n\n  transition = {\n    transitionDuration: 300,\n    transitionInterpolator: new LinearInterpolator({\n      transitionProps: {\n        compare: ['target', 'zoom', 'rotationX', 'rotationOrbit'],\n        required: ['target', 'zoom']\n      }\n    })\n  };\n}\n"],"mappings":";;;;;;;AAAA,SAAQA,KAAR,QAAoB,eAApB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAAQC,GAAR,QAAkB,qBAAlB;AAGA,OAAOC,kBAAP,MAA+B,oCAA/B;AA0BA,WAAaC,UAAN,0BAAAC,UAAA;EAAAC,SAAA,CAAAF,UAAA,EAAAC,UAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,UAAA;EAGL,SAAAA,WACEK,OADS,EAKT;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAP,UAAA;IACA,IAEEQ,KAFI,GAyBFH,OAzBJ,CAEEG,KAFI;MAGJC,MAHI,GAyBFJ,OAzBJ,CAGEI,MAHI;MAAAC,kBAAA,GAyBFL,OAzBJ,CAIEM,SAAS;MAATA,SAAS,GAAAD,kBAAA,cAAG,CAJR,GAAAA,kBAAA;MAAAE,qBAAA,GAyBFP,OAzBJ,CAKEQ,aAAa;MAAbA,aAAa,GAAAD,qBAAA,cAAG,CALZ,GAAAA,qBAAA;MAAAE,eAAA,GAyBFT,OAzBJ,CAMEU,MAAM;MAANA,MAAM,GAAAD,eAAA,cAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANL,GAAAA,eAAA;MAAAE,aAAA,GAyBFX,OAzBJ,CAOEY,IAAI;MAAJA,IAAI,GAAAD,aAAA,cAAG,CAPH,GAAAA,aAAA;MAAAE,qBAAA,GAyBFb,OAzBJ,CAUEc,YAAY;MAAZA,YAAY,GAAAD,qBAAA,cAAG,CAAC,EAVZ,GAAAA,qBAAA;MAAAE,qBAAA,GAyBFf,OAzBJ,CAWEgB,YAAY;MAAZA,YAAY,GAAAD,qBAAA,cAAG,EAXX,GAAAA,qBAAA;MAAAE,gBAAA,GAyBFjB,OAzBJ,CAYEkB,OAAO;MAAPA,OAAO,GAAAD,gBAAA,cAAG,CAACE,QAZP,GAAAF,gBAAA;MAAAG,gBAAA,GAyBFpB,OAzBJ,CAaEqB,OAAO;MAAPA,OAAO,GAAAD,gBAAA,cAAGD,QAbN,GAAAC,gBAAA;MAiBJE,gBAjBI,GAyBFtB,OAzBJ,CAiBEsB,gBAjBI;MAmBJC,cAnBI,GAyBFvB,OAzBJ,CAmBEuB,cAnBI;MAoBJC,cApBI,GAyBFxB,OAzBJ,CAoBEwB,cApBI;MAqBJC,kBArBI,GAyBFzB,OAzBJ,CAqBEyB,kBArBI;MAuBJC,iBAvBI,GAyBF1B,OAzBJ,CAuBE0B,iBAvBI;MAwBJC,SAAA,GACE3B,OAzBJ,CAwBE2B,SAAA;IAGF1B,KAAA,GAAAH,MAAA,CAAA8B,IAAA,OACE;MACEzB,KADF,EACEA,KADF;MAEEC,MAFF,EAEEA,MAFF;MAGEE,SAHF,EAGEA,SAHF;MAIEE,aAJF,EAIEA,aAJF;MAKEE,MALF,EAKEA,MALF;MAMEE,IANF,EAMEA,IANF;MAOEE,YAPF,EAOEA,YAPF;MAQEE,YARF,EAQEA,YARF;MASEE,OATF,EASEA,OATF;MAUEG,OAAA,EAAAA;IAVF,CADF,EAaE;MACEC,gBADF,EACEA,gBADF;MAEEC,cAFF,EAEEA,cAFF;MAGEC,cAHF,EAGEA,cAHF;MAIEC,kBAJF,EAIEA,kBAJF;MAKEC,iBALF,EAKEA,iBALF;MAMEC,SAAA,EAAAA;IANF,CAbF;IA5BAE,eAAA,CAAAC,sBAAA,CAAA7B,KAAA;IAmDAA,KAAA,CAAK8B,YAAL,GAAoB/B,OAAO,CAAC+B,YAA5B;IAAA,OAAA9B,KAAA;EACD;EAAA+B,YAAA,CAAArC,UAAA;IAAAsC,GAAA;IAAAC,KAAA,EAMD,SAAAC,SAAAC,IAAA,EAAqD;MAAA,IAA3CC,GAAA,GAAAD,IAAA,CAAAC,GAAA;MACR,OAAO,KAAKC,gBAAL,CAAsB;QAC3BhB,gBAAgB,EAAE,KAAKiB,UAAL,CAAgBF,GAAhB;MADS,CAAtB,CAAP;IAGD;EAAA;IAAAJ,GAAA;IAAAC,KAAA,EAMD,SAAAM,IAAAC,KAAA,EAAyF;MAAA,IAApFJ,GAAD,GAAAI,KAAA,CAACJ,GAAD;QAAMK,aAAA,GAAAD,KAAA,CAAAC,aAAA;MACR,IAAMpB,gBAAgB,GAAG,KAAKqB,QAAL,GAAgBrB,gBAAhB,IAAoCoB,aAA7D;MAEA,IAAI,CAACpB,gBAAL,EAAuB;QACrB,OAAO,IAAP;MACD;MAED,IAAMsB,QAAQ,GAAG,KAAKb,YAAL,CAAkB,KAAKc,gBAAL,EAAlB,CAAjB;MACA,IAAMC,QAAQ,GAAGF,QAAQ,CAACG,aAAT,CAAuBzB,gBAAvB,EAAyCe,GAAzC,CAAjB;MAEA,OAAO,KAAKC,gBAAL,CAAsBQ,QAAtB,CAAP;IACD;EAAA;IAAAb,GAAA;IAAAC,KAAA,EAMD,SAAAc,OAAA,EAAqB;MACnB,OAAO,KAAKV,gBAAL,CAAsB;QAC3BhB,gBAAgB,EAAE;MADS,CAAtB,CAAP;IAGD;EAAA;IAAAW,GAAA;IAAAC,KAAA,EAMD,SAAAe,YAAAC,KAAA,EAAwD;MAAA,IAA3Cb,GAAA,GAAAa,KAAA,CAAAb,GAAA;MACX,OAAO,KAAKC,gBAAL,CAAsB;QAC3Bf,cAAc,EAAEc,GADW;QAE3Bb,cAAc,EAAE,KAAKqB,gBAAL,GAAwBvC,SAFb;QAG3BmB,kBAAkB,EAAE,KAAKoB,gBAAL,GAAwBrC;MAHjB,CAAtB,CAAP;IAKD;EAAA;IAAAyB,GAAA;IAAAC,KAAA,EAMD,SAAAiB,OAAAC,KAAA,EAQe;MAAA,IAPbf,GADK,GAAAe,KAAA,CACLf,GADK;QAAAgB,iBAAA,GAAAD,KAAA,CAELE,WAAW;QAAXA,WAAW,GAAAD,iBAAA,cAAG,CAFT,GAAAA,iBAAA;QAAAE,iBAAA,GAAAH,KAAA,CAGLI,WAAW;QAAXA,WAAW,GAAAD,iBAAA,cAAG,IAAAA,iBAAA;MAMd,IAAAE,cAAA,GAA6D,KAAKd,QAAL,EAA7D;QAAOpB,cAAD,GAAAkC,cAAA,CAAClC,cAAD;QAAiBC,cAAjB,GAAAiC,cAAA,CAAiBjC,cAAjB;QAAiCC,kBAAA,GAAAgC,cAAA,CAAAhC,kBAAA;MACvC,IAAAiC,qBAAA,GAAwB,KAAKb,gBAAL,EAAxB;QAAO1C,KAAD,GAAAuD,qBAAA,CAACvD,KAAD;QAAQC,MAAA,GAAAsD,qBAAA,CAAAtD,MAAA;MAEd,IAAI,CAACmB,cAAD,IAAmBC,cAAc,KAAKmC,SAAtC,IAAmDlC,kBAAkB,KAAKkC,SAA9E,EAAyF;QACvF,OAAO,IAAP;MACD;MAED,IAAIC,WAAJ;MACA,IAAIvB,GAAJ,EAAS;QACP,IAAIwB,WAAW,GAAG,CAACxB,GAAG,CAAC,CAAD,CAAH,GAASd,cAAc,CAAC,CAAD,CAAxB,IAA+BpB,KAAjD;QACA,IAAM2D,WAAW,GAAG,CAACzB,GAAG,CAAC,CAAD,CAAH,GAASd,cAAc,CAAC,CAAD,CAAxB,IAA+BnB,MAAnD;QAEA,IAAIoB,cAAc,GAAG,CAAC,EAAlB,IAAwBA,cAAc,GAAG,EAA7C,EAAiD;UAG/CqC,WAAW,IAAI,CAAC,CAAhB;QACD;QACDD,WAAW,GAAG;UACZtD,SAAS,EAAEkB,cAAc,GAAGsC,WAAW,GAAG,GAD9B;UAEZtD,aAAa,EAAEiB,kBAAkB,GAAGoC,WAAW,GAAG;QAFtC,CAAd;MAID,CAbD,MAaO;QACLD,WAAW,GAAG;UACZtD,SAAS,EAAEkB,cAAc,GAAGgC,WADhB;UAEZhD,aAAa,EAAEiB,kBAAkB,GAAG6B;QAFxB,CAAd;MAID;MAED,OAAO,KAAKhB,gBAAL,CAAsBsB,WAAtB,CAAP;IACD;EAAA;IAAA3B,GAAA;IAAAC,KAAA,EAMD,SAAA6B,UAAA,EAAwB;MACtB,OAAO,KAAKzB,gBAAL,CAAsB;QAC3Bd,cAAc,EAAE,IADW;QAE3BC,kBAAkB,EAAE;MAFO,CAAtB,CAAP;IAID;EAAA;IAAAQ,GAAA;IAAAC,KAAA,EAGD,SAAA8B,iBAAiBC,SAAD,EAAyC;MACvD,IAAMC,SAAS,GAAGD,SAAS,CAACpB,gBAAV,EAAlB;MACA,IAAMsB,KAAK,GAAAC,aAAA,KAAO,KAAKvB,gBAAL,GAAlB;MACA,IAAOrC,aAAA,GAAiB2D,KAAxB,CAAO3D,aAAA;MAEP,IAAI6D,IAAI,CAACC,GAAL,CAAS9D,aAAa,GAAG0D,SAAS,CAAC1D,aAAnC,IAAoD,GAAxD,EAA6D;QAC3D2D,KAAK,CAAC3D,aAAN,GAAsBA,aAAa,GAAG,CAAhB,GAAoBA,aAAa,GAAG,GAApC,GAA0CA,aAAa,GAAG,GAAhF;MACD;MAED,OAAO2D,KAAP;IACD;EAAA;IAAAlC,GAAA;IAAAC,KAAA,EAMD,SAAAqC,UAAAC,KAAA,EAAsD;MAAA,IAA3CnC,GAAA,GAAAmC,KAAA,CAAAnC,GAAA;MACT,OAAO,KAAKC,gBAAL,CAAsB;QAC3BZ,iBAAiB,EAAE,KAAKa,UAAL,CAAgBF,GAAhB,CADQ;QAE3BV,SAAS,EAAE,KAAKkB,gBAAL,GAAwBjC;MAFR,CAAtB,CAAP;IAID;EAAA;IAAAqB,GAAA;IAAAC,KAAA,EAUD,SAAAtB,KAAA6D,KAAA,EAQe;MAAA,IAPbpC,GADG,GAAAoC,KAAA,CACHpC,GADG;QAEHqC,QAFG,GAAAD,KAAA,CAEHC,QAFG;QAGHC,KAAA,GAAAF,KAAA,CAAAE,KAAA;MAMA,IAAAC,eAAA,GAAqC,KAAKjC,QAAL,EAArC;QAAKhB,SAAD,GAAAiD,eAAA,CAACjD,SAAD;QAAYD,iBAAA,GAAAkD,eAAA,CAAAlD,iBAAA;MAChB,IAAI,CAACA,iBAAL,EAAwB;QAOtBC,SAAS,GAAG,KAAKkB,gBAAL,GAAwBjC,IAApC;QACAc,iBAAiB,GAAG,KAAKa,UAAL,CAAgBmC,QAAhB,KAA6B,KAAKnC,UAAL,CAAgBF,GAAhB,CAAjD;MACD;MACD,IAAI,CAACX,iBAAL,EAAwB;QACtB,OAAO,IAAP;MACD;MACD,IAAMmD,OAAO,GAAG,KAAKC,iBAAL,CAAuB;QAACH,KAAD,EAACA,KAAD;QAAQhD,SAAA,EAAAA;MAAR,CAAvB,CAAhB;MACA,IAAMoD,cAAc,GAAG,KAAKhD,YAAL,CAAAqC,aAAA,CAAAA,aAAA,KAAsB,KAAKvB,gBAAL,EAAJ;QAA6BjC,IAAI,EAAEiE;MAAA,GAA5E;MAEA,OAAO,KAAKvC,gBAAL,CAAA8B,aAAA;QACLxD,IAAI,EAAEiE;MADqB,GAExBE,cAAc,CAAChC,aAAf,CAA6BrB,iBAA7B,EAAgDW,GAAhD,GAFL;IAID;EAAA;IAAAJ,GAAA;IAAAC,KAAA,EAMD,SAAA8C,QAAA,EAAsB;MACpB,OAAO,KAAK1C,gBAAL,CAAsB;QAC3BZ,iBAAiB,EAAE,IADQ;QAE3BC,SAAS,EAAE;MAFgB,CAAtB,CAAP;IAID;EAAA;IAAAM,GAAA;IAAAC,KAAA,EAED,SAAA+C,OAAA,EAAsC;MAAA,IAA/BC,KAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAxB,SAAA,GAAAwB,SAAA,MAAG,CAAjB;MACJ,OAAO,KAAK7C,gBAAL,CAAsB;QAC3B1B,IAAI,EAAE,KAAKkE,iBAAL,CAAuB;UAACH,KAAK,EAAEO;QAAR,CAAvB;MADqB,CAAtB,CAAP;IAGD;EAAA;IAAAjD,GAAA;IAAAC,KAAA,EAED,SAAAmD,QAAA,EAAuC;MAAA,IAA/BH,KAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAxB,SAAA,GAAAwB,SAAA,MAAG,CAAjB;MACL,OAAO,KAAK7C,gBAAL,CAAsB;QAC3B1B,IAAI,EAAE,KAAKkE,iBAAL,CAAuB;UAACH,KAAK,EAAE,IAAIO;QAAZ,CAAvB;MADqB,CAAtB,CAAP;IAGD;EAAA;IAAAjD,GAAA;IAAAC,KAAA,EAED,SAAAoD,SAAA,EAAyC;MAAA,IAAhCJ,KAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAxB,SAAA,GAAAwB,SAAA,MAAG,EAAjB;MACN,OAAO,KAAKI,cAAL,CAAoB,CAAC,CAACL,KAAF,EAAS,CAAT,CAApB,CAAP;IACD;EAAA;IAAAjD,GAAA;IAAAC,KAAA,EAED,SAAAsD,UAAA,EAA0C;MAAA,IAAhCN,KAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAxB,SAAA,GAAAwB,SAAA,MAAG,EAAjB;MACP,OAAO,KAAKI,cAAL,CAAoB,CAACL,KAAD,EAAQ,CAAR,CAApB,CAAP;IACD;EAAA;IAAAjD,GAAA;IAAAC,KAAA,EAED,SAAAuD,OAAA,EAAuC;MAAA,IAAhCP,KAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAxB,SAAA,GAAAwB,SAAA,MAAG,EAAjB;MACJ,OAAO,KAAKI,cAAL,CAAoB,CAAC,CAAD,EAAI,CAACL,KAAL,CAApB,CAAP;IACD;EAAA;IAAAjD,GAAA;IAAAC,KAAA,EAED,SAAAwD,SAAA,EAAyC;MAAA,IAAhCR,KAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAxB,SAAA,GAAAwB,SAAA,MAAG,EAAjB;MACN,OAAO,KAAKI,cAAL,CAAoB,CAAC,CAAD,EAAIL,KAAJ,CAApB,CAAP;IACD;EAAA;IAAAjD,GAAA;IAAAC,KAAA,EAED,SAAAyD,WAAA,EAA2C;MAAA,IAAhCT,KAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAxB,SAAA,GAAAwB,SAAA,MAAG,EAAjB;MACR,OAAO,KAAK7C,gBAAL,CAAsB;QAC3B9B,aAAa,EAAE,KAAKqC,gBAAL,GAAwBrC,aAAxB,GAAwC0E;MAD5B,CAAtB,CAAP;IAGD;EAAA;IAAAjD,GAAA;IAAAC,KAAA,EAED,SAAA0D,YAAA,EAA4C;MAAA,IAAhCV,KAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAxB,SAAA,GAAAwB,SAAA,MAAG,EAAjB;MACT,OAAO,KAAK7C,gBAAL,CAAsB;QAC3B9B,aAAa,EAAE,KAAKqC,gBAAL,GAAwBrC,aAAxB,GAAwC0E;MAD5B,CAAtB,CAAP;IAGD;EAAA;IAAAjD,GAAA;IAAAC,KAAA,EAED,SAAA2D,SAAA,EAAyC;MAAA,IAAhCX,KAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAxB,SAAA,GAAAwB,SAAA,MAAG,EAAjB;MACN,OAAO,KAAK7C,gBAAL,CAAsB;QAC3BhC,SAAS,EAAE,KAAKuC,gBAAL,GAAwBvC,SAAxB,GAAoC4E;MADpB,CAAtB,CAAP;IAGD;EAAA;IAAAjD,GAAA;IAAAC,KAAA,EAED,SAAA4D,WAAA,EAA2C;MAAA,IAAhCZ,KAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAxB,SAAA,GAAAwB,SAAA,MAAG,EAAjB;MACR,OAAO,KAAK7C,gBAAL,CAAsB;QAC3BhC,SAAS,EAAE,KAAKuC,gBAAL,GAAwBvC,SAAxB,GAAoC4E;MADpB,CAAtB,CAAP;IAGD;EAAA;IAAAjD,GAAA;IAAAC,KAAA,EAID,SAAAK,WAAWF,GAAD,EAAuC;MAC/C,IAAMO,QAAQ,GAAG,KAAKb,YAAL,CAAkB,KAAKc,gBAAL,EAAlB,CAAjB;MAEA,OAAOR,GAAG,IAAIO,QAAQ,CAACmD,SAAT,CAAmB1D,GAAnB,CAAd;IACD;EAAA;IAAAJ,GAAA;IAAAC,KAAA,EAGD,SAAA4C,kBAAAkB,KAAA,EAMsB;MAAA,IALpBrB,KADgB,GAAAqB,KAAA,CAChBrB,KADgB;QAEhBhD,SAAA,GAAAqE,KAAA,CAAArE,SAAA;MAKA,IAAAsE,sBAAA,GAA2B,KAAKpD,gBAAL,EAA3B;QAAOxB,OAAD,GAAA4E,sBAAA,CAAC5E,OAAD;QAAUH,OAAA,GAAA+E,sBAAA,CAAA/E,OAAA;MAChB,IAAIS,SAAS,KAAKgC,SAAlB,EAA6B;QAC3BhC,SAAS,GAAG,KAAKkB,gBAAL,GAAwBjC,IAApC;MACD;MACD,IAAMA,IAAI,GAAIe,SAAD,GAAwB0C,IAAI,CAAC6B,IAAL,CAAUvB,KAAV,CAArC;MACA,OAAOrF,KAAK,CAACsB,IAAD,EAAOM,OAAP,EAAgBG,OAAhB,CAAZ;IACD;EAAA;IAAAY,GAAA;IAAAC,KAAA,EAED,SAAAqD,eAAeY,MAAD,EAAS;MACrB,IAAAC,sBAAA,GAAgC,KAAKvD,gBAAL,EAAhC;QAAO1C,KAAD,GAAAiG,sBAAA,CAACjG,KAAD;QAAQC,MAAR,GAAAgG,sBAAA,CAAQhG,MAAR;QAAgBM,MAAA,GAAA0F,sBAAA,CAAA1F,MAAA;MACtB,OAAO,KAAK8B,GAAL,CAAS;QACdE,aAAa,EAAEhC,MADD;QAEd2B,GAAG,EAAE,CAAClC,KAAK,GAAG,CAAR,GAAYgG,MAAM,CAAC,CAAD,CAAnB,EAAwB/F,MAAM,GAAG,CAAT,GAAa+F,MAAM,CAAC,CAAD,CAA3C;MAFS,CAAT,CAAP;IAID;EAAA;IAAAlE,GAAA;IAAAC,KAAA,EAED,SAAAI,iBAAiBQ,QAAD,EAAuB;MAErC,OAAO,IAAI,KAAKuD,WAAT,CAAAjC,aAAA,CAAAA,aAAA,CAAAA,aAAA;QACLrC,YAAY,EAAE,KAAKA;MADO,GAEvB,KAAKc,gBAAL,EAFuB,GAGvB,KAAKF,QAAL,EAHuB,GAIvBG,QAAA,EAJL;IAMD;EAAA;IAAAb,GAAA;IAAAC,KAAA,EAGD,SAAAoE,iBAAiBnC,KAAD,EAA8D;MAE5E,IAAO9C,OAAD,GAAsE8C,KAA5E,CAAO9C,OAAD;QAAUH,OAAV,GAAsEiD,KAA5E,CAAgBjD,OAAV;QAAmBN,IAAnB,GAAsEuD,KAA5E,CAAyBvD,IAAnB;QAAyBI,YAAzB,GAAsEmD,KAA5E,CAA+BnD,YAAzB;QAAuCF,YAAvC,GAAsEqD,KAA5E,CAA6CrD,YAAvC;QAAqDN,aAAA,GAAiB2D,KAA5E,CAA2D3D,aAAA;MAE3D2D,KAAK,CAACvD,IAAN,GAAa2F,KAAK,CAACC,OAAN,CAAc5F,IAAd,IACT,CAACtB,KAAK,CAACsB,IAAI,CAAC,CAAD,CAAL,EAAUM,OAAV,EAAmBG,OAAnB,CAAN,EAAmC/B,KAAK,CAACsB,IAAI,CAAC,CAAD,CAAL,EAAUM,OAAV,EAAmBG,OAAnB,CAAxC,CADS,GAET/B,KAAK,CAACsB,IAAD,EAAOM,OAAP,EAAgBG,OAAhB,CAFT;MAIA8C,KAAK,CAAC7D,SAAN,GAAkBhB,KAAK,CAAC6E,KAAK,CAAC7D,SAAP,EAAkBQ,YAAlB,EAAgCE,YAAhC,CAAvB;MACA,IAAIR,aAAa,GAAG,CAAC,GAAjB,IAAwBA,aAAa,GAAG,GAA5C,EAAiD;QAC/C2D,KAAK,CAAC3D,aAAN,GAAsBf,GAAG,CAACe,aAAa,GAAG,GAAjB,EAAsB,GAAtB,CAAH,GAAgC,GAAtD;MACD;MAED,OAAO2D,KAAP;IACD;EAAA;EAAA,OAAAxE,UAAA;AAAA,EA9V6BH,SAAzB;AAAoF,IAiWtEiH,eAAN,0BAAAC,WAAA;EAAA7G,SAAA,CAAA4G,eAAA,EAAAC,WAAA;EAAA,IAAAC,OAAA,GAAA5G,YAAA,CAAA0G,eAAA;EAAqD,SAAAA,gBAAA;IAAA,IAAAG,MAAA;IAAA1G,eAAA,OAAAuG,eAAA;IAAA,SAAAI,IAAA,GAAA1B,SAAA,CAAAC,MAAA,EAAA0B,IAAA,OAAAP,KAAA,CAAAM,IAAA,GAAAE,IAAA,MAAAA,IAAA,GAAAF,IAAA,EAAAE,IAAA;MAAAD,IAAA,CAAAC,IAAA,IAAA5B,SAAA,CAAA4B,IAAA;IAAA;IAAAH,MAAA,GAAAD,OAAA,CAAA/E,IAAA,CAAAoF,KAAA,CAAAL,OAAA,SAAAM,MAAA,CAAAH,IAAA;IAAAjF,eAAA,CAAAC,sBAAA,CAAA8E,MAAA,sBAChDjH,UADgD;IAAAkC,eAAA,CAAAC,sBAAA,CAAA8E,MAAA,iBAGrD;MACXM,kBAAkB,EAAE,GADT;MAEXC,sBAAsB,EAAE,IAAIzH,kBAAJ,CAAuB;QAC7C0H,eAAe,EAAE;UACfC,OAAO,EAAE,CAAC,QAAD,EAAW,MAAX,EAAmB,WAAnB,EAAgC,eAAhC,CADM;UAEfC,QAAQ,EAAE,CAAC,QAAD,EAAW,MAAX;QAFK;MAD4B,CAAvB;IAFb,CAHqD;IAAA,OAAAV,MAAA;EAAA;EAAA,OAAA5E,YAAA,CAAAyE,eAAA;AAAA,EAAvBlH,UAA9B;AAAA,SAAMkH,eAAN,IAAAc,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}