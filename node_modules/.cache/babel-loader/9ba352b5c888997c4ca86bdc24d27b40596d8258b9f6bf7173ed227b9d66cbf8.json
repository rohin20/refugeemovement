{"ast":null,"code":"import { isBrowser as getIsBrowser } from '@probe.gl/env';\nimport { trackContextState } from '../state-tracker/track-context-state';\nimport { log as _log } from '../utils/log';\nimport { assert } from '../utils/assert';\nimport { getDevicePixelRatio } from '../utils/device-pixels';\nimport { isWebGL2 } from '../utils/webgl-checks';\nvar isBrowser = getIsBrowser();\nvar isPage = isBrowser && typeof document !== 'undefined';\nvar CONTEXT_DEFAULTS = {\n  webgl2: true,\n  webgl1: true,\n  throwOnError: true,\n  manageState: true,\n  canvas: null,\n  debug: false,\n  width: 800,\n  height: 600\n};\nexport function createGLContext() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  assert(isBrowser, \"createGLContext only available in the browser.\\nCreate your own headless context or use 'createHeadlessContext' from @luma.gl/test-utils\");\n  options = Object.assign({}, CONTEXT_DEFAULTS, options);\n  var _options = options,\n    width = _options.width,\n    height = _options.height;\n  function onError(message) {\n    if (options.throwOnError) {\n      throw new Error(message);\n    }\n    console.error(message);\n    return null;\n  }\n  options.onError = onError;\n  var gl;\n  var _options2 = options,\n    canvas = _options2.canvas;\n  var targetCanvas = getCanvas({\n    canvas: canvas,\n    width: width,\n    height: height,\n    onError: onError\n  });\n  gl = createBrowserContext(targetCanvas, options);\n  if (!gl) {\n    return null;\n  }\n  gl = instrumentGLContext(gl, options);\n  logInfo(gl);\n  return gl;\n}\nexport function instrumentGLContext(gl) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!gl || gl._instrumented) {\n    return gl;\n  }\n  gl._version = gl._version || getVersion(gl);\n  gl.luma = gl.luma || {};\n  gl.luma.canvasSizeInfo = gl.luma.canvasSizeInfo || {};\n  options = Object.assign({}, CONTEXT_DEFAULTS, options);\n  var _options3 = options,\n    manageState = _options3.manageState,\n    debug = _options3.debug;\n  if (manageState) {\n    trackContextState(gl, {\n      copyState: false,\n      log: function log() {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return _log.log.apply(_log, [1].concat(args))();\n      }\n    });\n  }\n  if (isBrowser && debug) {\n    if (!globalThis.makeDebugContext) {\n      _log.warn('WebGL debug mode not activated. import \"@luma.gl/debug\" to enable.')();\n    } else {\n      gl = globalThis.makeDebugContext(gl, options);\n      _log.level = Math.max(_log.level, 1);\n    }\n  }\n  gl._instrumented = true;\n  return gl;\n}\nexport function getContextDebugInfo(gl) {\n  var vendorMasked = gl.getParameter(7936);\n  var rendererMasked = gl.getParameter(7937);\n  var ext = gl.getExtension('WEBGL_debug_renderer_info');\n  var vendorUnmasked = ext && gl.getParameter(ext.UNMASKED_VENDOR_WEBGL || 7936);\n  var rendererUnmasked = ext && gl.getParameter(ext.UNMASKED_RENDERER_WEBGL || 7937);\n  return {\n    vendor: vendorUnmasked || vendorMasked,\n    renderer: rendererUnmasked || rendererMasked,\n    vendorMasked: vendorMasked,\n    rendererMasked: rendererMasked,\n    version: gl.getParameter(7938),\n    shadingLanguageVersion: gl.getParameter(35724)\n  };\n}\nexport function resizeGLContext(gl) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (gl.canvas) {\n    var devicePixelRatio = getDevicePixelRatio(options.useDevicePixels);\n    setDevicePixelRatio(gl, devicePixelRatio, options);\n    return;\n  }\n  var ext = gl.getExtension('STACKGL_resize_drawingbuffer');\n  if (ext && \"width\" in options && \"height\" in options) {\n    ext.resize(options.width, options.height);\n  }\n}\nfunction createBrowserContext(canvas, options) {\n  var onError = options.onError;\n  var errorMessage = null;\n  var onCreateError = function onCreateError(error) {\n    return errorMessage = error.statusMessage || errorMessage;\n  };\n  canvas.addEventListener('webglcontextcreationerror', onCreateError, false);\n  var _options$webgl = options.webgl1,\n    webgl1 = _options$webgl === void 0 ? true : _options$webgl,\n    _options$webgl2 = options.webgl2,\n    webgl2 = _options$webgl2 === void 0 ? true : _options$webgl2;\n  var gl = null;\n  if (webgl2) {\n    gl = gl || canvas.getContext('webgl2', options);\n    gl = gl || canvas.getContext('experimental-webgl2', options);\n  }\n  if (webgl1) {\n    gl = gl || canvas.getContext('webgl', options);\n    gl = gl || canvas.getContext('experimental-webgl', options);\n  }\n  canvas.removeEventListener('webglcontextcreationerror', onCreateError, false);\n  if (!gl) {\n    return onError(\"Failed to create \".concat(webgl2 && !webgl1 ? 'WebGL2' : 'WebGL', \" context: \").concat(errorMessage || 'Unknown error'));\n  }\n  if (options.onContextLost) {\n    canvas.addEventListener('webglcontextlost', options.onContextLost, false);\n  }\n  if (options.onContextRestored) {\n    canvas.addEventListener('webglcontextrestored', options.onContextRestored, false);\n  }\n  return gl;\n}\nfunction getCanvas(_ref) {\n  var canvas = _ref.canvas,\n    _ref$width = _ref.width,\n    width = _ref$width === void 0 ? 800 : _ref$width,\n    _ref$height = _ref.height,\n    height = _ref$height === void 0 ? 600 : _ref$height,\n    onError = _ref.onError;\n  var targetCanvas;\n  if (typeof canvas === 'string') {\n    var isPageLoaded = isPage && document.readyState === 'complete';\n    if (!isPageLoaded) {\n      onError(\"createGLContext called on canvas '\".concat(canvas, \"' before page was loaded\"));\n    }\n    targetCanvas = document.getElementById(canvas);\n  } else if (canvas) {\n    targetCanvas = canvas;\n  } else {\n    targetCanvas = document.createElement('canvas');\n    targetCanvas.id = 'lumagl-canvas';\n    targetCanvas.style.width = Number.isFinite(width) ? \"\".concat(width, \"px\") : '100%';\n    targetCanvas.style.height = Number.isFinite(height) ? \"\".concat(height, \"px\") : '100%';\n    document.body.insertBefore(targetCanvas, document.body.firstChild);\n  }\n  return targetCanvas;\n}\nfunction logInfo(gl) {\n  var webGL = isWebGL2(gl) ? 'WebGL2' : 'WebGL1';\n  var info = getContextDebugInfo(gl);\n  var driver = info ? \"(\".concat(info.vendor, \",\").concat(info.renderer, \")\") : '';\n  var debug = gl.debug ? ' debug' : '';\n  _log.info(1, \"\".concat(webGL).concat(debug, \" context \").concat(driver))();\n}\nfunction getVersion(gl) {\n  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {\n    return 2;\n  }\n  return 1;\n}\nfunction setDevicePixelRatio(gl, devicePixelRatio, options) {\n  var clientWidth = 'width' in options ? options.width : gl.canvas.clientWidth;\n  var clientHeight = 'height' in options ? options.height : gl.canvas.clientHeight;\n  if (!clientWidth || !clientHeight) {\n    _log.log(1, 'Canvas clientWidth/clientHeight is 0')();\n    devicePixelRatio = 1;\n    clientWidth = gl.canvas.width || 1;\n    clientHeight = gl.canvas.height || 1;\n  }\n  gl.luma = gl.luma || {};\n  gl.luma.canvasSizeInfo = gl.luma.canvasSizeInfo || {};\n  var cachedSize = gl.luma.canvasSizeInfo;\n  if (cachedSize.clientWidth !== clientWidth || cachedSize.clientHeight !== clientHeight || cachedSize.devicePixelRatio !== devicePixelRatio) {\n    var clampedPixelRatio = devicePixelRatio;\n    var canvasWidth = Math.floor(clientWidth * clampedPixelRatio);\n    var canvasHeight = Math.floor(clientHeight * clampedPixelRatio);\n    gl.canvas.width = canvasWidth;\n    gl.canvas.height = canvasHeight;\n    if (gl.drawingBufferWidth !== canvasWidth || gl.drawingBufferHeight !== canvasHeight) {\n      _log.warn(\"Device pixel ratio clamped\")();\n      clampedPixelRatio = Math.min(gl.drawingBufferWidth / clientWidth, gl.drawingBufferHeight / clientHeight);\n      gl.canvas.width = Math.floor(clientWidth * clampedPixelRatio);\n      gl.canvas.height = Math.floor(clientHeight * clampedPixelRatio);\n    }\n    Object.assign(gl.luma.canvasSizeInfo, {\n      clientWidth: clientWidth,\n      clientHeight: clientHeight,\n      devicePixelRatio: devicePixelRatio\n    });\n  }\n}","map":{"version":3,"names":["isBrowser","getIsBrowser","trackContextState","log","assert","getDevicePixelRatio","isWebGL2","isPage","document","CONTEXT_DEFAULTS","webgl2","webgl1","throwOnError","manageState","canvas","debug","width","height","createGLContext","options","arguments","length","undefined","Object","assign","_options","onError","message","Error","console","error","gl","_options2","targetCanvas","getCanvas","createBrowserContext","instrumentGLContext","logInfo","_instrumented","_version","getVersion","luma","canvasSizeInfo","_options3","copyState","_len","args","Array","_key","apply","concat","globalThis","makeDebugContext","warn","level","Math","max","getContextDebugInfo","vendorMasked","getParameter","rendererMasked","ext","getExtension","vendorUnmasked","UNMASKED_VENDOR_WEBGL","rendererUnmasked","UNMASKED_RENDERER_WEBGL","vendor","renderer","version","shadingLanguageVersion","resizeGLContext","devicePixelRatio","useDevicePixels","setDevicePixelRatio","resize","errorMessage","onCreateError","statusMessage","addEventListener","_options$webgl","_options$webgl2","getContext","removeEventListener","onContextLost","onContextRestored","_ref","_ref$width","_ref$height","isPageLoaded","readyState","getElementById","createElement","id","style","Number","isFinite","body","insertBefore","firstChild","webGL","info","driver","WebGL2RenderingContext","clientWidth","clientHeight","cachedSize","clampedPixelRatio","canvasWidth","floor","canvasHeight","drawingBufferWidth","drawingBufferHeight","min"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@luma.gl/gltools/src/context/context.js"],"sourcesContent":["// WebGLRenderingContext related methods\n\n/** @typedef {import('./context')} types */\n\n/* eslint-disable quotes */\nimport GL from '@luma.gl/constants';\nimport {isBrowser as getIsBrowser} from '@probe.gl/env';\nimport {trackContextState} from '../state-tracker/track-context-state';\n\nimport {log} from '../utils/log';\nimport {assert} from '../utils/assert';\nimport {getDevicePixelRatio} from '../utils/device-pixels';\nimport {isWebGL2} from '../utils/webgl-checks';\n\nconst isBrowser = getIsBrowser();\nconst isPage = isBrowser && typeof document !== 'undefined';\n\nconst CONTEXT_DEFAULTS = {\n  // COMMON CONTEXT PARAMETERS\n  // Attempt to allocate WebGL2 context\n  webgl2: true, // Attempt to create a WebGL2 context (false to force webgl1)\n  webgl1: true, // Attempt to create a WebGL1 context (false to fail if webgl2 not available)\n  throwOnError: true,\n  manageState: true,\n  // BROWSER CONTEXT PARAMETERS\n  canvas: null, // A canvas element or a canvas string id\n  debug: false, // Instrument context (at the expense of performance)\n  // HEADLESS CONTEXT PARAMETERS\n  width: 800, // width are height are only used by headless gl\n  height: 600\n  // WEBGL/HEADLESS CONTEXT PARAMETERS\n  // Remaining options are passed through to context creator\n};\n\n/**\n * Creates a context giving access to the WebGL API\n * @type {types['createGLContext']}\n */\n/* eslint-disable complexity, max-statements */\nexport function createGLContext(options = {}) {\n  assert(\n    isBrowser,\n    \"createGLContext only available in the browser.\\nCreate your own headless context or use 'createHeadlessContext' from @luma.gl/test-utils\"\n  );\n\n  options = Object.assign({}, CONTEXT_DEFAULTS, options);\n  const {width, height} = options;\n\n  // Error reporting function, enables exceptions to be disabled\n  function onError(message) {\n    if (options.throwOnError) {\n      throw new Error(message);\n    }\n    // eslint-disable-next-line\n    console.error(message);\n    return null;\n  }\n  options.onError = onError;\n\n  let gl;\n  // Get or create a canvas\n  const {canvas} = options;\n  const targetCanvas = getCanvas({canvas, width, height, onError});\n  // Create a WebGL context in the canvas\n  gl = createBrowserContext(targetCanvas, options);\n\n  if (!gl) {\n    return null;\n  }\n\n  gl = instrumentGLContext(gl, options);\n\n  // Log some debug info about the newly created context\n  logInfo(gl);\n\n  // Add to seer integration\n  return gl;\n}\n\n/**\n * Creates a context giving access to the WebGL API\n * @type {types['instrumentGLContext']}\n */\nexport function instrumentGLContext(gl, options = {}) {\n  // Avoid multiple instrumentations\n  // @ts-ignore\n  if (!gl || gl._instrumented) {\n    return gl;\n  }\n\n  // @ts-ignore\n  gl._version = gl._version || getVersion(gl);\n\n  // Cache canvas size information to avoid setting it on every frame.\n  // @ts-ignore\n  gl.luma = gl.luma || {};\n  // @ts-ignore\n  gl.luma.canvasSizeInfo = gl.luma.canvasSizeInfo || {};\n\n  options = Object.assign({}, CONTEXT_DEFAULTS, options);\n  const {manageState, debug} = options;\n\n  // Install context state tracking\n  if (manageState) {\n    trackContextState(gl, {\n      copyState: false,\n      log: (...args) => log.log(1, ...args)()\n    });\n  }\n\n  // Add debug instrumentation to the context\n  if (isBrowser && debug) {\n    // @ts-ignore\n    if (!globalThis.makeDebugContext) {\n      log.warn('WebGL debug mode not activated. import \"@luma.gl/debug\" to enable.')();\n    } else {\n      // @ts-ignore\n      gl = globalThis.makeDebugContext(gl, options);\n      // Debug forces log level to at least 1\n      log.level = Math.max(log.level, 1);\n    }\n  }\n\n  // @ts-ignore\n  gl._instrumented = true;\n\n  return gl;\n}\n\n/**\n * Provides strings identifying the GPU vendor and driver.\n * @type {types['getContextDebugInfo']}\n */\nexport function getContextDebugInfo(gl) {\n  const vendorMasked = gl.getParameter(GL.VENDOR);\n  const rendererMasked = gl.getParameter(GL.RENDERER);\n  const ext = gl.getExtension('WEBGL_debug_renderer_info');\n  const vendorUnmasked = ext && gl.getParameter(ext.UNMASKED_VENDOR_WEBGL || GL.VENDOR);\n  const rendererUnmasked = ext && gl.getParameter(ext.UNMASKED_RENDERER_WEBGL || GL.RENDERER);\n  return {\n    vendor: vendorUnmasked || vendorMasked,\n    renderer: rendererUnmasked || rendererMasked,\n    vendorMasked,\n    rendererMasked,\n    version: gl.getParameter(GL.VERSION),\n    shadingLanguageVersion: gl.getParameter(GL.SHADING_LANGUAGE_VERSION)\n  };\n}\n\n/**\n * Resize the canvas' drawing buffer.\n * @type {types['resizeGLContext']}\n */\nexport function resizeGLContext(gl, options = {}) {\n  // Resize browser context\n  if (gl.canvas) {\n    const devicePixelRatio = getDevicePixelRatio(options.useDevicePixels);\n    setDevicePixelRatio(gl, devicePixelRatio, options);\n    return;\n  }\n\n  // Resize headless gl context\n  const ext = gl.getExtension('STACKGL_resize_drawingbuffer');\n  if (ext && `width` in options && `height` in options) {\n    ext.resize(options.width, options.height);\n  }\n}\n\n// HELPER METHODS\n\n/**\n * Create a WebGL context for a canvas\n * Note calling this multiple time on the same canvas does return the same context\n */\n\nfunction createBrowserContext(canvas, options) {\n  const {onError} = options;\n\n  // Try to extract any extra information about why context creation failed\n  let errorMessage = null;\n  const onCreateError = error => (errorMessage = error.statusMessage || errorMessage);\n  canvas.addEventListener('webglcontextcreationerror', onCreateError, false);\n\n  const {webgl1 = true, webgl2 = true} = options;\n  let gl = null;\n  // Prefer webgl2 over webgl1, prefer conformant over experimental\n  if (webgl2) {\n    gl = gl || canvas.getContext('webgl2', options);\n    gl = gl || canvas.getContext('experimental-webgl2', options);\n  }\n  if (webgl1) {\n    gl = gl || canvas.getContext('webgl', options);\n    gl = gl || canvas.getContext('experimental-webgl', options);\n  }\n\n  canvas.removeEventListener('webglcontextcreationerror', onCreateError, false);\n\n  if (!gl) {\n    return onError(\n      `Failed to create ${webgl2 && !webgl1 ? 'WebGL2' : 'WebGL'} context: ${errorMessage ||\n        'Unknown error'}`\n    );\n  }\n\n  if (options.onContextLost) {\n    canvas.addEventListener('webglcontextlost', options.onContextLost, false);\n  }\n\n  if (options.onContextRestored) {\n    canvas.addEventListener('webglcontextrestored', options.onContextRestored, false);\n  }\n\n  return gl;\n}\n\nfunction getCanvas({canvas, width = 800, height = 600, onError}) {\n  let targetCanvas;\n  if (typeof canvas === 'string') {\n    const isPageLoaded = isPage && document.readyState === 'complete';\n    if (!isPageLoaded) {\n      onError(`createGLContext called on canvas '${canvas}' before page was loaded`);\n    }\n    targetCanvas = document.getElementById(canvas);\n  } else if (canvas) {\n    targetCanvas = canvas;\n  } else {\n    targetCanvas = document.createElement('canvas');\n    targetCanvas.id = 'lumagl-canvas';\n    targetCanvas.style.width = Number.isFinite(width) ? `${width}px` : '100%';\n    targetCanvas.style.height = Number.isFinite(height) ? `${height}px` : '100%';\n    document.body.insertBefore(targetCanvas, document.body.firstChild);\n  }\n\n  return targetCanvas;\n}\n\nfunction logInfo(gl) {\n  const webGL = isWebGL2(gl) ? 'WebGL2' : 'WebGL1';\n  const info = getContextDebugInfo(gl);\n  const driver = info ? `(${info.vendor},${info.renderer})` : '';\n  const debug = gl.debug ? ' debug' : '';\n  log.info(1, `${webGL}${debug} context ${driver}`)();\n}\n\nfunction getVersion(gl) {\n  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {\n    // WebGL2 context.\n    return 2;\n  }\n  // Must be a WebGL1 context.\n  return 1;\n}\n\n// use devicePixelRatio to set canvas width and height\nfunction setDevicePixelRatio(gl, devicePixelRatio, options) {\n  // NOTE: if options.width and options.height not used remove in v8\n  let clientWidth = 'width' in options ? options.width : gl.canvas.clientWidth;\n  let clientHeight = 'height' in options ? options.height : gl.canvas.clientHeight;\n\n  if (!clientWidth || !clientHeight) {\n    log.log(1, 'Canvas clientWidth/clientHeight is 0')();\n    // by forcing devicePixel ratio to 1, we do not scale gl.canvas.width and height in each frame.\n    devicePixelRatio = 1;\n    clientWidth = gl.canvas.width || 1;\n    clientHeight = gl.canvas.height || 1;\n  }\n\n  gl.luma = gl.luma || {};\n  gl.luma.canvasSizeInfo = gl.luma.canvasSizeInfo || {};\n  const cachedSize = gl.luma.canvasSizeInfo;\n  // Check if canvas needs to be resized\n  if (\n    cachedSize.clientWidth !== clientWidth ||\n    cachedSize.clientHeight !== clientHeight ||\n    cachedSize.devicePixelRatio !== devicePixelRatio\n  ) {\n    let clampedPixelRatio = devicePixelRatio;\n\n    const canvasWidth = Math.floor(clientWidth * clampedPixelRatio);\n    const canvasHeight = Math.floor(clientHeight * clampedPixelRatio);\n    gl.canvas.width = canvasWidth;\n    gl.canvas.height = canvasHeight;\n\n    // Note: when devicePixelRatio is too high, it is possible we might hit system limit for\n    // drawing buffer width and hight, in those cases they get clamped and resulting aspect ration may not be maintained\n    // for those cases, reduce devicePixelRatio.\n    if (gl.drawingBufferWidth !== canvasWidth || gl.drawingBufferHeight !== canvasHeight) {\n      log.warn(`Device pixel ratio clamped`)();\n      clampedPixelRatio = Math.min(\n        gl.drawingBufferWidth / clientWidth,\n        gl.drawingBufferHeight / clientHeight\n      );\n\n      gl.canvas.width = Math.floor(clientWidth * clampedPixelRatio);\n      gl.canvas.height = Math.floor(clientHeight * clampedPixelRatio);\n    }\n\n    Object.assign(gl.luma.canvasSizeInfo, {clientWidth, clientHeight, devicePixelRatio});\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}