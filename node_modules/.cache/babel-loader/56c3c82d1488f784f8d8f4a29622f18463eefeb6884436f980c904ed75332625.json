{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport * as EXT_meshopt_compression from '../extensions/EXT_meshopt_compression';\nimport * as EXT_texture_webp from '../extensions/EXT_texture_webp';\nimport * as KHR_texture_basisu from '../extensions/KHR_texture_basisu';\nimport * as KHR_draco_mesh_compression from '../extensions/KHR_draco_mesh_compression';\nimport * as KHR_texture_transform from '../extensions/KHR_texture_transform';\nimport * as KHR_lights_punctual from '../extensions/deprecated/KHR_lights_punctual';\nimport * as KHR_materials_unlit from '../extensions/deprecated/KHR_materials_unlit';\nimport * as KHR_techniques_webgl from '../extensions/deprecated/KHR_techniques_webgl';\nimport * as EXT_feature_metadata from '../extensions/deprecated/EXT_feature_metadata';\nexport var EXTENSIONS = [EXT_meshopt_compression, EXT_texture_webp, KHR_texture_basisu, KHR_draco_mesh_compression, KHR_lights_punctual, KHR_materials_unlit, KHR_techniques_webgl, KHR_texture_transform, EXT_feature_metadata];\nexport function preprocessExtensions(gltf) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var context = arguments.length > 2 ? arguments[2] : undefined;\n  var extensions = EXTENSIONS.filter(function (extension) {\n    return useExtension(extension.name, options);\n  });\n  var _iterator = _createForOfIteratorHelper(extensions),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var extension = _step.value;\n      var _extension$preprocess;\n      (_extension$preprocess = extension.preprocess) === null || _extension$preprocess === void 0 ? void 0 : _extension$preprocess.call(extension, gltf, options, context);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\nexport function decodeExtensions(_x) {\n  return _decodeExtensions.apply(this, arguments);\n}\nfunction _decodeExtensions() {\n  _decodeExtensions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(gltf) {\n    var options,\n      context,\n      extensions,\n      _iterator2,\n      _step2,\n      extension,\n      _extension$decode,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          context = _args.length > 2 ? _args[2] : undefined;\n          extensions = EXTENSIONS.filter(function (extension) {\n            return useExtension(extension.name, options);\n          });\n          _iterator2 = _createForOfIteratorHelper(extensions);\n          _context.prev = 4;\n          _iterator2.s();\n        case 6:\n          if ((_step2 = _iterator2.n()).done) {\n            _context.next = 12;\n            break;\n          }\n          extension = _step2.value;\n          _context.next = 10;\n          return (_extension$decode = extension.decode) === null || _extension$decode === void 0 ? void 0 : _extension$decode.call(extension, gltf, options, context);\n        case 10:\n          _context.next = 6;\n          break;\n        case 12:\n          _context.next = 17;\n          break;\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](4);\n          _iterator2.e(_context.t0);\n        case 17:\n          _context.prev = 17;\n          _iterator2.f();\n          return _context.finish(17);\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[4, 14, 17, 20]]);\n  }));\n  return _decodeExtensions.apply(this, arguments);\n}\nfunction useExtension(extensionName, options) {\n  var _options$gltf;\n  var excludes = (options === null || options === void 0 ? void 0 : (_options$gltf = options.gltf) === null || _options$gltf === void 0 ? void 0 : _options$gltf.excludeExtensions) || {};\n  var exclude = extensionName in excludes && !excludes[extensionName];\n  return !exclude;\n}","map":{"version":3,"names":["EXT_meshopt_compression","EXT_texture_webp","KHR_texture_basisu","KHR_draco_mesh_compression","KHR_texture_transform","KHR_lights_punctual","KHR_materials_unlit","KHR_techniques_webgl","EXT_feature_metadata","EXTENSIONS","preprocessExtensions","gltf","options","arguments","length","undefined","context","extensions","filter","extension","useExtension","name","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","_extension$preprocess","preprocess","call","err","e","f","decodeExtensions","_x","_decodeExtensions","apply","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_iterator2","_step2","_extension$decode","_args","wrap","_callee$","_context","prev","next","decode","t0","finish","stop","extensionName","_options$gltf","excludes","excludeExtensions","exclude"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/gltf/src/lib/api/gltf-extensions.ts"],"sourcesContent":["/* eslint-disable camelcase */\nimport {GLTF} from '../types/gltf-types';\nimport type {GLTFLoaderOptions} from '../../gltf-loader';\n\n// GLTF 1.0 extensions (decode only)\n// import * as KHR_binary_gltf from './KHR_draco_mesh_compression';\n\n// GLTF 2.0 Khronos extensions (decode/encode)\nimport * as EXT_meshopt_compression from '../extensions/EXT_meshopt_compression';\nimport * as EXT_texture_webp from '../extensions/EXT_texture_webp';\nimport * as KHR_texture_basisu from '../extensions/KHR_texture_basisu';\nimport * as KHR_draco_mesh_compression from '../extensions/KHR_draco_mesh_compression';\nimport * as KHR_texture_transform from '../extensions/KHR_texture_transform';\n\n// Deprecated. These should be handled by rendering library (e.g. luma.gl), not the loader.\nimport * as KHR_lights_punctual from '../extensions/deprecated/KHR_lights_punctual';\nimport * as KHR_materials_unlit from '../extensions/deprecated/KHR_materials_unlit';\nimport * as KHR_techniques_webgl from '../extensions/deprecated/KHR_techniques_webgl';\nimport * as EXT_feature_metadata from '../extensions/deprecated/EXT_feature_metadata';\n\n// Vendor extensions\n\ntype GLTFExtensionPlugin = {\n  name: string;\n  preprocess?: (gltfData: {json: GLTF}, options: GLTFLoaderOptions, context) => void;\n  decode?: (\n    gltfData: {\n      json: GLTF;\n      buffers: {arrayBuffer: ArrayBuffer; byteOffset: number; byteLength: number}[];\n    },\n    options: GLTFLoaderOptions,\n    context\n  ) => Promise<void>;\n  encode?: (gltfData: {json: GLTF}, options: GLTFLoaderOptions) => void;\n};\n\n/**\n * List of extensions processed by the GLTFLoader\n * Note that may extensions can only be handled on the rendering stage and are left out here\n * These are just extensions that can be handled fully or partially during loading.\n */\nexport const EXTENSIONS: GLTFExtensionPlugin[] = [\n  // 1.0\n  // KHR_binary_gltf is handled separately - must be processed before other parsing starts\n  // KHR_binary_gltf,\n\n  // 2.0\n  EXT_meshopt_compression,\n  EXT_texture_webp,\n  // Basisu should come after webp, we want basisu to be preferred if both are provided\n  KHR_texture_basisu,\n  KHR_draco_mesh_compression,\n  KHR_lights_punctual,\n  KHR_materials_unlit,\n  KHR_techniques_webgl,\n  KHR_texture_transform,\n  EXT_feature_metadata\n];\n\n/** Call before any resource loading starts */\nexport function preprocessExtensions(gltf, options: GLTFLoaderOptions = {}, context?) {\n  const extensions = EXTENSIONS.filter((extension) => useExtension(extension.name, options));\n  for (const extension of extensions) {\n    extension.preprocess?.(gltf, options, context);\n  }\n}\n\n/** Call after resource loading */\nexport async function decodeExtensions(gltf, options: GLTFLoaderOptions = {}, context?) {\n  const extensions = EXTENSIONS.filter((extension) => useExtension(extension.name, options));\n  for (const extension of extensions) {\n    // Note: We decode async extensions sequentially, this might not be necessary\n    // Currently we only have Draco, but when we add Basis we may revisit\n    await extension.decode?.(gltf, options, context);\n  }\n}\n\nfunction useExtension(extensionName: string, options: GLTFLoaderOptions) {\n  const excludes = options?.gltf?.excludeExtensions || {};\n  const exclude = extensionName in excludes && !excludes[extensionName];\n  return !exclude;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}