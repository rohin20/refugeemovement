{"ast":null,"code":"import { decodeRGB565, GL } from '@loaders.gl/math';\nexport function normalize3DTileColorAttribute(tile, colors, batchTable) {\n  if (!colors && (!tile || !tile.batchIds || !batchTable)) {\n    return null;\n  }\n  var batchIds = tile.batchIds,\n    isRGB565 = tile.isRGB565,\n    pointCount = tile.pointCount;\n  if (batchIds && batchTable) {\n    var colorArray = new Uint8ClampedArray(pointCount * 3);\n    for (var i = 0; i < pointCount; i++) {\n      var batchId = batchIds[i];\n      var dimensions = batchTable.getProperty(batchId, 'dimensions');\n      var color = dimensions.map(function (d) {\n        return d * 255;\n      });\n      colorArray[i * 3] = color[0];\n      colorArray[i * 3 + 1] = color[1];\n      colorArray[i * 3 + 2] = color[2];\n    }\n    return {\n      type: GL.UNSIGNED_BYTE,\n      value: colorArray,\n      size: 3,\n      normalized: true\n    };\n  }\n  if (isRGB565) {\n    var _colorArray = new Uint8ClampedArray(pointCount * 3);\n    for (var _i = 0; _i < pointCount; _i++) {\n      var _color = decodeRGB565(colors[_i]);\n      _colorArray[_i * 3] = _color[0];\n      _colorArray[_i * 3 + 1] = _color[1];\n      _colorArray[_i * 3 + 2] = _color[2];\n    }\n    return {\n      type: GL.UNSIGNED_BYTE,\n      value: _colorArray,\n      size: 3,\n      normalized: true\n    };\n  }\n  if (colors && colors.length === pointCount * 3) {\n    return {\n      type: GL.UNSIGNED_BYTE,\n      value: colors,\n      size: 3,\n      normalized: true\n    };\n  }\n  return {\n    type: GL.UNSIGNED_BYTE,\n    value: colors,\n    size: 4,\n    normalized: true\n  };\n}","map":{"version":3,"names":["decodeRGB565","GL","normalize3DTileColorAttribute","tile","colors","batchTable","batchIds","isRGB565","pointCount","colorArray","Uint8ClampedArray","i","batchId","dimensions","getProperty","color","map","d","type","UNSIGNED_BYTE","value","size","normalized","length"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/geo-layers/node_modules/@loaders.gl/3d-tiles/src/lib/parsers/helpers/normalize-3d-tile-colors.ts"],"sourcesContent":["import {decodeRGB565, GL} from '@loaders.gl/math';\n\n/* eslint-disable complexity*/\nexport function normalize3DTileColorAttribute(tile, colors, batchTable?) {\n  // no colors defined\n  if (!colors && (!tile || !tile.batchIds || !batchTable)) {\n    return null;\n  }\n\n  const {batchIds, isRGB565, pointCount} = tile;\n  // Batch table, look up colors in table\n  if (batchIds && batchTable) {\n    const colorArray = new Uint8ClampedArray(pointCount * 3);\n    for (let i = 0; i < pointCount; i++) {\n      const batchId = batchIds[i];\n      // TODO figure out what is `dimensions` used for\n      const dimensions = batchTable.getProperty(batchId, 'dimensions');\n      const color = dimensions.map((d) => d * 255);\n      colorArray[i * 3] = color[0];\n      colorArray[i * 3 + 1] = color[1];\n      colorArray[i * 3 + 2] = color[2];\n    }\n    return {\n      type: GL.UNSIGNED_BYTE,\n      value: colorArray,\n      size: 3,\n      normalized: true\n    };\n  }\n\n  // RGB565 case, convert to RGB\n  if (isRGB565) {\n    const colorArray = new Uint8ClampedArray(pointCount * 3);\n    for (let i = 0; i < pointCount; i++) {\n      const color = decodeRGB565(colors[i]);\n      colorArray[i * 3] = color[0];\n      colorArray[i * 3 + 1] = color[1];\n      colorArray[i * 3 + 2] = color[2];\n    }\n    return {\n      type: GL.UNSIGNED_BYTE,\n      value: colorArray,\n      size: 3,\n      normalized: true\n    };\n  }\n\n  // RGB case (tile.isTranslucent)\n  if (colors && colors.length === pointCount * 3) {\n    return {\n      type: GL.UNSIGNED_BYTE,\n      value: colors,\n      size: 3,\n      normalized: true\n    };\n  }\n\n  // DEFAULT: RGBA case\n  return {\n    type: GL.UNSIGNED_BYTE,\n    value: colors,\n    size: 4,\n    normalized: true\n  };\n}\n/* eslint-enable complexity*/\n"],"mappings":"AAAA,SAAQA,YAAY,EAAEC,EAAE,QAAO,kBAAkB;AAGjD,OAAO,SAASC,6BAA6BA,CAACC,IAAI,EAAEC,MAAM,EAAEC,UAAW,EAAE;EAEvE,IAAI,CAACD,MAAM,KAAK,CAACD,IAAI,IAAI,CAACA,IAAI,CAACG,QAAQ,IAAI,CAACD,UAAU,CAAC,EAAE;IACvD,OAAO,IAAI;EACb;EAEA,IAAOC,QAAQ,GAA0BH,IAAI,CAAtCG,QAAQ;IAAEC,QAAQ,GAAgBJ,IAAI,CAA5BI,QAAQ;IAAEC,UAAA,GAAcL,IAAI,CAAlBK,UAAA;EAE3B,IAAIF,QAAQ,IAAID,UAAU,EAAE;IAC1B,IAAMI,UAAU,GAAG,IAAIC,iBAAiB,CAACF,UAAU,GAAG,CAAC,CAAC;IACxD,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,UAAU,EAAEG,CAAC,EAAE,EAAE;MACnC,IAAMC,OAAO,GAAGN,QAAQ,CAACK,CAAC,CAAC;MAE3B,IAAME,UAAU,GAAGR,UAAU,CAACS,WAAW,CAACF,OAAO,EAAE,YAAY,CAAC;MAChE,IAAMG,KAAK,GAAGF,UAAU,CAACG,GAAG,CAAE,UAAAC,CAAC;QAAA,OAAKA,CAAC,GAAG,GAAG;MAAA,EAAC;MAC5CR,UAAU,CAACE,CAAC,GAAG,CAAC,CAAC,GAAGI,KAAK,CAAC,CAAC,CAAC;MAC5BN,UAAU,CAACE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGI,KAAK,CAAC,CAAC,CAAC;MAChCN,UAAU,CAACE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGI,KAAK,CAAC,CAAC,CAAC;IAClC;IACA,OAAO;MACLG,IAAI,EAAEjB,EAAE,CAACkB,aAAa;MACtBC,KAAK,EAAEX,UAAU;MACjBY,IAAI,EAAE,CAAC;MACPC,UAAU,EAAE;IACd,CAAC;EACH;EAGA,IAAIf,QAAQ,EAAE;IACZ,IAAME,WAAU,GAAG,IAAIC,iBAAiB,CAACF,UAAU,GAAG,CAAC,CAAC;IACxD,KAAK,IAAIG,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAGH,UAAU,EAAEG,EAAC,EAAE,EAAE;MACnC,IAAMI,MAAK,GAAGf,YAAY,CAACI,MAAM,CAACO,EAAC,CAAC,CAAC;MACrCF,WAAU,CAACE,EAAC,GAAG,CAAC,CAAC,GAAGI,MAAK,CAAC,CAAC,CAAC;MAC5BN,WAAU,CAACE,EAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGI,MAAK,CAAC,CAAC,CAAC;MAChCN,WAAU,CAACE,EAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGI,MAAK,CAAC,CAAC,CAAC;IAClC;IACA,OAAO;MACLG,IAAI,EAAEjB,EAAE,CAACkB,aAAa;MACtBC,KAAK,EAAEX,WAAU;MACjBY,IAAI,EAAE,CAAC;MACPC,UAAU,EAAE;IACd,CAAC;EACH;EAGA,IAAIlB,MAAM,IAAIA,MAAM,CAACmB,MAAM,KAAKf,UAAU,GAAG,CAAC,EAAE;IAC9C,OAAO;MACLU,IAAI,EAAEjB,EAAE,CAACkB,aAAa;MACtBC,KAAK,EAAEhB,MAAM;MACbiB,IAAI,EAAE,CAAC;MACPC,UAAU,EAAE;IACd,CAAC;EACH;EAGA,OAAO;IACLJ,IAAI,EAAEjB,EAAE,CAACkB,aAAa;IACtBC,KAAK,EAAEhB,MAAM;IACbiB,IAAI,EAAE,CAAC;IACPC,UAAU,EAAE;EACd,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}