{"ast":null,"code":"import _toConsumableArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { assert } from '../../utils/assert';\nvar Schema = /*#__PURE__*/function () {\n  function Schema(fields, metadata) {\n    _classCallCheck(this, Schema);\n    _defineProperty(this, \"fields\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    assert(Array.isArray(fields));\n    checkNames(fields);\n    this.fields = fields;\n    this.metadata = metadata || new Map();\n  }\n  _createClass(Schema, [{\n    key: \"compareTo\",\n    value: function compareTo(other) {\n      if (this.metadata !== other.metadata) {\n        return false;\n      }\n      if (this.fields.length !== other.fields.length) {\n        return false;\n      }\n      for (var i = 0; i < this.fields.length; ++i) {\n        if (!this.fields[i].compareTo(other.fields[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }, {\n    key: \"select\",\n    value: function select() {\n      var nameMap = Object.create(null);\n      for (var _len = arguments.length, columnNames = new Array(_len), _key = 0; _key < _len; _key++) {\n        columnNames[_key] = arguments[_key];\n      }\n      for (var _i = 0, _columnNames = columnNames; _i < _columnNames.length; _i++) {\n        var name = _columnNames[_i];\n        nameMap[name] = true;\n      }\n      var selectedFields = this.fields.filter(function (field) {\n        return nameMap[field.name];\n      });\n      return new Schema(selectedFields, this.metadata);\n    }\n  }, {\n    key: \"selectAt\",\n    value: function selectAt() {\n      var _this = this;\n      for (var _len2 = arguments.length, columnIndices = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        columnIndices[_key2] = arguments[_key2];\n      }\n      var selectedFields = columnIndices.map(function (index) {\n        return _this.fields[index];\n      }).filter(Boolean);\n      return new Schema(selectedFields, this.metadata);\n    }\n  }, {\n    key: \"assign\",\n    value: function assign(schemaOrFields) {\n      var fields;\n      var metadata = this.metadata;\n      if (schemaOrFields instanceof Schema) {\n        var otherSchema = schemaOrFields;\n        fields = otherSchema.fields;\n        metadata = mergeMaps(mergeMaps(new Map(), this.metadata), otherSchema.metadata);\n      } else {\n        fields = schemaOrFields;\n      }\n      var fieldMap = Object.create(null);\n      var _iterator = _createForOfIteratorHelper(this.fields),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var field = _step.value;\n          fieldMap[field.name] = field;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var _iterator2 = _createForOfIteratorHelper(fields),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _field = _step2.value;\n          fieldMap[_field.name] = _field;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      var mergedFields = Object.values(fieldMap);\n      return new Schema(mergedFields, metadata);\n    }\n  }]);\n  return Schema;\n}();\nexport { Schema as default };\nfunction checkNames(fields) {\n  var usedNames = {};\n  var _iterator3 = _createForOfIteratorHelper(fields),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var field = _step3.value;\n      if (usedNames[field.name]) {\n        console.warn('Schema: duplicated field name', field.name, field);\n      }\n      usedNames[field.name] = true;\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n}\nfunction mergeMaps(m1, m2) {\n  return new Map([].concat(_toConsumableArray(m1 || new Map()), _toConsumableArray(m2 || new Map())));\n}","map":{"version":3,"names":["assert","Schema","fields","metadata","_classCallCheck","_defineProperty","Array","isArray","checkNames","Map","_createClass","key","value","compareTo","other","length","i","select","nameMap","Object","create","_len","arguments","columnNames","_key","_i","_columnNames","name","selectedFields","filter","field","selectAt","_this","_len2","columnIndices","_key2","map","index","Boolean","assign","schemaOrFields","otherSchema","mergeMaps","fieldMap","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","e","f","_iterator2","_step2","mergedFields","values","default","usedNames","_iterator3","_step3","console","warn","m1","m2","concat","_toConsumableArray"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/schema/src/lib/schema/impl/schema.ts"],"sourcesContent":["import {assert} from '../../utils/assert';\nimport Field from './field';\n\nexport type SchemaMetadata = Map<string, any>;\n\n/**\n * ArrowJS `Schema` API-compatible class for row-based tables (returned from `DataTable`)\n * https://loaders.gl/arrowjs/docs/api-reference/schema\n */\nexport default class Schema {\n  fields: Field[];\n  // TODO - Arrow just allows Map<string, string>\n  metadata: SchemaMetadata;\n\n  constructor(fields: Field[], metadata?: SchemaMetadata) {\n    assert(Array.isArray(fields));\n    checkNames(fields);\n    // For kepler fields, create arrow compatible `Fields` that have kepler fields as `metadata`\n    this.fields = fields;\n    this.metadata = metadata || new Map();\n  }\n\n  // TODO - arrow only seems to compare fields, not metadata\n  compareTo(other: Schema): boolean {\n    if (this.metadata !== other.metadata) {\n      return false;\n    }\n    if (this.fields.length !== other.fields.length) {\n      return false;\n    }\n    for (let i = 0; i < this.fields.length; ++i) {\n      if (!this.fields[i].compareTo(other.fields[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  select(...columnNames: string[]): Schema {\n    // Ensure column names reference valid fields\n    const nameMap = Object.create(null);\n    for (const name of columnNames) {\n      nameMap[name] = true;\n    }\n    const selectedFields = this.fields.filter((field) => nameMap[field.name]);\n    return new Schema(selectedFields, this.metadata);\n  }\n\n  selectAt(...columnIndices: number[]): Schema {\n    // Ensure column indices reference valid fields\n    const selectedFields = columnIndices.map((index) => this.fields[index]).filter(Boolean);\n    return new Schema(selectedFields, this.metadata);\n  }\n\n  assign(schemaOrFields: Schema | Field[]): Schema {\n    let fields: Field[];\n    let metadata: SchemaMetadata = this.metadata;\n\n    if (schemaOrFields instanceof Schema) {\n      const otherSchema = schemaOrFields;\n      fields = otherSchema.fields;\n      metadata = mergeMaps(mergeMaps(new Map(), this.metadata), otherSchema.metadata);\n    } else {\n      fields = schemaOrFields;\n    }\n\n    // Create a merged list of fields, overwrite fields in place, new fields at end\n    const fieldMap: {[key: string]: Field} = Object.create(null);\n\n    for (const field of this.fields) {\n      fieldMap[field.name] = field;\n    }\n\n    for (const field of fields) {\n      fieldMap[field.name] = field;\n    }\n\n    const mergedFields = Object.values(fieldMap);\n\n    return new Schema(mergedFields, metadata);\n  }\n}\n\n// Warn if any duplicated field names\nfunction checkNames(fields: Field[]): void {\n  const usedNames: Record<string, boolean> = {};\n  for (const field of fields) {\n    if (usedNames[field.name]) {\n      // eslint-disable-next-line\n      console.warn('Schema: duplicated field name', field.name, field);\n    }\n    usedNames[field.name] = true;\n  }\n}\n\nfunction mergeMaps<T>(m1: T, m2: T): T {\n  // @ts-ignore\n  return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}