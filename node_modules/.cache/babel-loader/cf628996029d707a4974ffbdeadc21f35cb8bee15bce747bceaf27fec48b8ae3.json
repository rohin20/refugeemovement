{"ast":null,"code":"export function unpackIndexedGeometry(geometry) {\n  var indices = geometry.indices,\n    attributes = geometry.attributes;\n  if (!indices) {\n    return geometry;\n  }\n  var vertexCount = indices.value.length;\n  var unpackedAttributes = {};\n  for (var attributeName in attributes) {\n    var attribute = attributes[attributeName];\n    var constant = attribute.constant,\n      value = attribute.value,\n      size = attribute.size;\n    if (constant || !size) {\n      continue;\n    }\n    var unpackedValue = new value.constructor(vertexCount * size);\n    for (var x = 0; x < vertexCount; ++x) {\n      var index = indices.value[x];\n      for (var i = 0; i < size; i++) {\n        unpackedValue[x * size + i] = value[index * size + i];\n      }\n    }\n    unpackedAttributes[attributeName] = {\n      size: size,\n      value: unpackedValue\n    };\n  }\n  return {\n    attributes: Object.assign({}, attributes, unpackedAttributes)\n  };\n}","map":{"version":3,"names":["unpackIndexedGeometry","geometry","indices","attributes","vertexCount","value","length","unpackedAttributes","attributeName","attribute","constant","size","unpackedValue","constructor","x","index","i","Object","assign"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@luma.gl/engine/src/geometry/geometry-utils.js"],"sourcesContent":["export function unpackIndexedGeometry(geometry) {\n  const {indices, attributes} = geometry;\n  if (!indices) {\n    return geometry;\n  }\n\n  const vertexCount = indices.value.length;\n  const unpackedAttributes = {};\n\n  for (const attributeName in attributes) {\n    const attribute = attributes[attributeName];\n    const {constant, value, size} = attribute;\n    if (constant || !size) {\n      continue; // eslint-disable-line\n    }\n    const unpackedValue = new value.constructor(vertexCount * size);\n    for (let x = 0; x < vertexCount; ++x) {\n      const index = indices.value[x];\n      for (let i = 0; i < size; i++) {\n        unpackedValue[x * size + i] = value[index * size + i];\n      }\n    }\n    unpackedAttributes[attributeName] = {size, value: unpackedValue};\n  }\n\n  return {\n    attributes: Object.assign({}, attributes, unpackedAttributes)\n  };\n}\n"],"mappings":"AAAA,OAAO,SAASA,qBAATA,CAA+BC,QAA/B,EAAyC;EAC9C,IAAOC,OAAD,GAAwBD,QAA9B,CAAOC,OAAD;IAAUC,UAAA,GAAcF,QAA9B,CAAgBE,UAAA;EAChB,IAAI,CAACD,OAAL,EAAc;IACZ,OAAOD,QAAP;EACD;EAED,IAAMG,WAAW,GAAGF,OAAO,CAACG,KAAR,CAAcC,MAAlC;EACA,IAAMC,kBAAkB,GAAG,EAA3B;EAEA,KAAK,IAAMC,aAAX,IAA4BL,UAA5B,EAAwC;IACtC,IAAMM,SAAS,GAAGN,UAAU,CAACK,aAAD,CAA5B;IACA,IAAOE,QAAD,GAA0BD,SAAhC,CAAOC,QAAD;MAAWL,KAAX,GAA0BI,SAAhC,CAAiBJ,KAAX;MAAkBM,IAAA,GAAQF,SAAhC,CAAwBE,IAAA;IACxB,IAAID,QAAQ,IAAI,CAACC,IAAjB,EAAuB;MACrB;IACD;IACD,IAAMC,aAAa,GAAG,IAAIP,KAAK,CAACQ,WAAV,CAAsBT,WAAW,GAAGO,IAApC,CAAtB;IACA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,WAApB,EAAiC,EAAEU,CAAnC,EAAsC;MACpC,IAAMC,KAAK,GAAGb,OAAO,CAACG,KAAR,CAAcS,CAAd,CAAd;MACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAApB,EAA0BK,CAAC,EAA3B,EAA+B;QAC7BJ,aAAa,CAACE,CAAC,GAAGH,IAAJ,GAAWK,CAAZ,CAAb,GAA8BX,KAAK,CAACU,KAAK,GAAGJ,IAAR,GAAeK,CAAhB,CAAnC;MACD;IACF;IACDT,kBAAkB,CAACC,aAAD,CAAlB,GAAoC;MAACG,IAAD,EAACA,IAAD;MAAON,KAAK,EAAEO;IAAd,CAApC;EACD;EAED,OAAO;IACLT,UAAU,EAAEc,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBf,UAAlB,EAA8BI,kBAA9B;EADP,CAAP;AAGD"},"metadata":{},"sourceType":"module","externalDependencies":[]}