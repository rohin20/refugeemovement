{"ast":null,"code":"import _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport TransitionManager from './transition-manager';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nvar NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nvar DEFAULT_INERTIA = 300;\nvar INERTIA_EASING = function INERTIA_EASING(t) {\n  return 1 - (1 - t) * (1 - t);\n};\nvar EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\nvar pinchEventWorkaround = {};\nvar Controller = /*#__PURE__*/function () {\n  function Controller(opts) {\n    var _this = this;\n    _classCallCheck(this, Controller);\n    _defineProperty(this, \"props\", void 0);\n    _defineProperty(this, \"state\", {});\n    _defineProperty(this, \"transitionManager\", void 0);\n    _defineProperty(this, \"eventManager\", void 0);\n    _defineProperty(this, \"onViewStateChange\", void 0);\n    _defineProperty(this, \"onStateChange\", void 0);\n    _defineProperty(this, \"makeViewport\", void 0);\n    _defineProperty(this, \"_controllerState\", void 0);\n    _defineProperty(this, \"_events\", {});\n    _defineProperty(this, \"_interactionState\", {\n      isDragging: false\n    });\n    _defineProperty(this, \"_customEvents\", []);\n    _defineProperty(this, \"_eventStartBlocked\", null);\n    _defineProperty(this, \"_panMove\", false);\n    _defineProperty(this, \"invertPan\", false);\n    _defineProperty(this, \"dragMode\", 'rotate');\n    _defineProperty(this, \"inertia\", 0);\n    _defineProperty(this, \"scrollZoom\", true);\n    _defineProperty(this, \"dragPan\", true);\n    _defineProperty(this, \"dragRotate\", true);\n    _defineProperty(this, \"doubleClickZoom\", true);\n    _defineProperty(this, \"touchZoom\", true);\n    _defineProperty(this, \"touchRotate\", false);\n    _defineProperty(this, \"keyboard\", true);\n    this.transitionManager = new TransitionManager(_objectSpread(_objectSpread({}, opts), {}, {\n      getControllerState: function getControllerState(props) {\n        return new _this.ControllerState(props);\n      },\n      onViewStateChange: this._onTransition.bind(this),\n      onStateChange: this._setInteractionState.bind(this)\n    }));\n    this.handleEvent = this.handleEvent.bind(this);\n    this.eventManager = opts.eventManager;\n    this.onViewStateChange = opts.onViewStateChange || function () {};\n    this.onStateChange = opts.onStateChange || function () {};\n    this.makeViewport = opts.makeViewport;\n  }\n  _createClass(Controller, [{\n    key: \"events\",\n    set: function set(customEvents) {\n      this.toggleEvents(this._customEvents, false);\n      this.toggleEvents(customEvents, true);\n      this._customEvents = customEvents;\n      if (this.props) {\n        this.setProps(this.props);\n      }\n    }\n  }, {\n    key: \"finalize\",\n    value: function finalize() {\n      for (var eventName in this._events) {\n        if (this._events[eventName]) {\n          var _this$eventManager;\n          (_this$eventManager = this.eventManager) === null || _this$eventManager === void 0 ? void 0 : _this$eventManager.off(eventName, this.handleEvent);\n        }\n      }\n      this.transitionManager.finalize();\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(event) {\n      this._controllerState = undefined;\n      var eventStartBlocked = this._eventStartBlocked;\n      switch (event.type) {\n        case 'panstart':\n          return eventStartBlocked ? false : this._onPanStart(event);\n        case 'panmove':\n          return this._onPan(event);\n        case 'panend':\n          return this._onPanEnd(event);\n        case 'pinchstart':\n          return eventStartBlocked ? false : this._onPinchStart(event);\n        case 'pinchmove':\n          return this._onPinch(event);\n        case 'pinchend':\n          return this._onPinchEnd(event);\n        case 'tripanstart':\n          return eventStartBlocked ? false : this._onTriplePanStart(event);\n        case 'tripanmove':\n          return this._onTriplePan(event);\n        case 'tripanend':\n          return this._onTriplePanEnd(event);\n        case 'doubletap':\n          return this._onDoubleTap(event);\n        case 'wheel':\n          return this._onWheel(event);\n        case 'keydown':\n          return this._onKeyDown(event);\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"controllerState\",\n    get: function get() {\n      this._controllerState = this._controllerState || new this.ControllerState(_objectSpread(_objectSpread({\n        makeViewport: this.makeViewport\n      }, this.props), this.state));\n      return this._controllerState;\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter(event) {\n      var _this$props = this.props,\n        x = _this$props.x,\n        y = _this$props.y;\n      var offsetCenter = event.offsetCenter;\n      return [offsetCenter.x - x, offsetCenter.y - y];\n    }\n  }, {\n    key: \"isPointInBounds\",\n    value: function isPointInBounds(pos, event) {\n      var _this$props2 = this.props,\n        width = _this$props2.width,\n        height = _this$props2.height;\n      if (event && event.handled) {\n        return false;\n      }\n      var inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n      if (inside && event) {\n        event.stopPropagation();\n      }\n      return inside;\n    }\n  }, {\n    key: \"isFunctionKeyPressed\",\n    value: function isFunctionKeyPressed(event) {\n      var srcEvent = event.srcEvent;\n      return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n    }\n  }, {\n    key: \"isDragging\",\n    value: function isDragging() {\n      return this._interactionState.isDragging || false;\n    }\n  }, {\n    key: \"blockEvents\",\n    value: function blockEvents(timeout) {\n      var _this2 = this;\n      var timer = setTimeout(function () {\n        if (_this2._eventStartBlocked === timer) {\n          _this2._eventStartBlocked = null;\n        }\n      }, timeout);\n      this._eventStartBlocked = timer;\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      if (props.dragMode) {\n        this.dragMode = props.dragMode;\n      }\n      this.props = props;\n      if (!('transitionInterpolator' in props)) {\n        props.transitionInterpolator = this._getTransitionProps().transitionInterpolator;\n      }\n      this.transitionManager.processViewStateChange(props);\n      var inertia = props.inertia;\n      this.inertia = Number.isFinite(inertia) ? inertia : inertia === true ? DEFAULT_INERTIA : 0;\n      var _props$scrollZoom = props.scrollZoom,\n        scrollZoom = _props$scrollZoom === void 0 ? true : _props$scrollZoom,\n        _props$dragPan = props.dragPan,\n        dragPan = _props$dragPan === void 0 ? true : _props$dragPan,\n        _props$dragRotate = props.dragRotate,\n        dragRotate = _props$dragRotate === void 0 ? true : _props$dragRotate,\n        _props$doubleClickZoo = props.doubleClickZoom,\n        doubleClickZoom = _props$doubleClickZoo === void 0 ? true : _props$doubleClickZoo,\n        _props$touchZoom = props.touchZoom,\n        touchZoom = _props$touchZoom === void 0 ? true : _props$touchZoom,\n        _props$touchRotate = props.touchRotate,\n        touchRotate = _props$touchRotate === void 0 ? false : _props$touchRotate,\n        _props$keyboard = props.keyboard,\n        keyboard = _props$keyboard === void 0 ? true : _props$keyboard;\n      var isInteractive = Boolean(this.onViewStateChange);\n      this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n      this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n      this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n      this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && touchRotate);\n      this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n      this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n      this.scrollZoom = scrollZoom;\n      this.dragPan = dragPan;\n      this.dragRotate = dragRotate;\n      this.doubleClickZoom = doubleClickZoom;\n      this.touchZoom = touchZoom;\n      this.touchRotate = touchRotate;\n      this.keyboard = keyboard;\n    }\n  }, {\n    key: \"updateTransition\",\n    value: function updateTransition() {\n      this.transitionManager.updateTransition();\n    }\n  }, {\n    key: \"toggleEvents\",\n    value: function toggleEvents(eventNames, enabled) {\n      var _this3 = this;\n      if (this.eventManager) {\n        eventNames.forEach(function (eventName) {\n          if (_this3._events[eventName] !== enabled) {\n            _this3._events[eventName] = enabled;\n            if (enabled) {\n              _this3.eventManager.on(eventName, _this3.handleEvent);\n            } else {\n              _this3.eventManager.off(eventName, _this3.handleEvent);\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"updateViewport\",\n    value: function updateViewport(newControllerState) {\n      var extraProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var interactionState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var viewState = _objectSpread(_objectSpread({}, newControllerState.getViewportProps()), extraProps);\n      var changed = this.controllerState !== newControllerState;\n      this.state = newControllerState.getState();\n      this._setInteractionState(interactionState);\n      if (changed) {\n        var oldViewState = this.controllerState && this.controllerState.getViewportProps();\n        if (this.onViewStateChange) {\n          this.onViewStateChange({\n            viewState: viewState,\n            interactionState: this._interactionState,\n            oldViewState: oldViewState\n          });\n        }\n      }\n    }\n  }, {\n    key: \"_onTransition\",\n    value: function _onTransition(params) {\n      this.onViewStateChange(_objectSpread(_objectSpread({}, params), {}, {\n        interactionState: this._interactionState\n      }));\n    }\n  }, {\n    key: \"_setInteractionState\",\n    value: function _setInteractionState(newStates) {\n      Object.assign(this._interactionState, newStates);\n      this.onStateChange(this._interactionState);\n    }\n  }, {\n    key: \"_onPanStart\",\n    value: function _onPanStart(event) {\n      var pos = this.getCenter(event);\n      if (!this.isPointInBounds(pos, event)) {\n        return false;\n      }\n      var alternateMode = this.isFunctionKeyPressed(event) || event.rightButton || false;\n      if (this.invertPan || this.dragMode === 'pan') {\n        alternateMode = !alternateMode;\n      }\n      var newControllerState = this.controllerState[alternateMode ? 'panStart' : 'rotateStart']({\n        pos: pos\n      });\n      this._panMove = alternateMode;\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPan\",\n    value: function _onPan(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n      return this._panMove ? this._onPanMove(event) : this._onPanRotate(event);\n    }\n  }, {\n    key: \"_onPanEnd\",\n    value: function _onPanEnd(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n      return this._panMove ? this._onPanMoveEnd(event) : this._onPanRotateEnd(event);\n    }\n  }, {\n    key: \"_onPanMove\",\n    value: function _onPanMove(event) {\n      if (!this.dragPan) {\n        return false;\n      }\n      var pos = this.getCenter(event);\n      var newControllerState = this.controllerState.pan({\n        pos: pos\n      });\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true,\n        isPanning: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPanMoveEnd\",\n    value: function _onPanMoveEnd(event) {\n      var inertia = this.inertia;\n      if (this.dragPan && inertia && event.velocity) {\n        var pos = this.getCenter(event);\n        var endPos = [pos[0] + event.velocityX * inertia / 2, pos[1] + event.velocityY * inertia / 2];\n        var newControllerState = this.controllerState.pan({\n          pos: endPos\n        }).panEnd();\n        this.updateViewport(newControllerState, _objectSpread(_objectSpread({}, this._getTransitionProps()), {}, {\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        }), {\n          isDragging: false,\n          isPanning: true\n        });\n      } else {\n        var _newControllerState = this.controllerState.panEnd();\n        this.updateViewport(_newControllerState, null, {\n          isDragging: false,\n          isPanning: false\n        });\n      }\n      return true;\n    }\n  }, {\n    key: \"_onPanRotate\",\n    value: function _onPanRotate(event) {\n      if (!this.dragRotate) {\n        return false;\n      }\n      var pos = this.getCenter(event);\n      var newControllerState = this.controllerState.rotate({\n        pos: pos\n      });\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true,\n        isRotating: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPanRotateEnd\",\n    value: function _onPanRotateEnd(event) {\n      var inertia = this.inertia;\n      if (this.dragRotate && inertia && event.velocity) {\n        var pos = this.getCenter(event);\n        var endPos = [pos[0] + event.velocityX * inertia / 2, pos[1] + event.velocityY * inertia / 2];\n        var newControllerState = this.controllerState.rotate({\n          pos: endPos\n        }).rotateEnd();\n        this.updateViewport(newControllerState, _objectSpread(_objectSpread({}, this._getTransitionProps()), {}, {\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        }), {\n          isDragging: false,\n          isRotating: true\n        });\n      } else {\n        var _newControllerState2 = this.controllerState.rotateEnd();\n        this.updateViewport(_newControllerState2, null, {\n          isDragging: false,\n          isRotating: false\n        });\n      }\n      return true;\n    }\n  }, {\n    key: \"_onWheel\",\n    value: function _onWheel(event) {\n      if (!this.scrollZoom) {\n        return false;\n      }\n      event.srcEvent.preventDefault();\n      var pos = this.getCenter(event);\n      if (!this.isPointInBounds(pos, event)) {\n        return false;\n      }\n      var _ref = this.scrollZoom === true ? {} : this.scrollZoom,\n        _ref$speed = _ref.speed,\n        speed = _ref$speed === void 0 ? 0.01 : _ref$speed,\n        _ref$smooth = _ref.smooth,\n        smooth = _ref$smooth === void 0 ? false : _ref$smooth;\n      var delta = event.delta;\n      var scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n      if (delta < 0 && scale !== 0) {\n        scale = 1 / scale;\n      }\n      var newControllerState = this.controllerState.zoom({\n        pos: pos,\n        scale: scale\n      });\n      this.updateViewport(newControllerState, _objectSpread(_objectSpread({}, this._getTransitionProps({\n        around: pos\n      })), {}, {\n        transitionDuration: smooth ? 250 : 1\n      }), {\n        isZooming: true,\n        isPanning: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onTriplePanStart\",\n    value: function _onTriplePanStart(event) {\n      var pos = this.getCenter(event);\n      if (!this.isPointInBounds(pos, event)) {\n        return false;\n      }\n      var newControllerState = this.controllerState.rotateStart({\n        pos: pos\n      });\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onTriplePan\",\n    value: function _onTriplePan(event) {\n      if (!this.touchRotate) {\n        return false;\n      }\n      if (!this.isDragging()) {\n        return false;\n      }\n      var pos = this.getCenter(event);\n      pos[0] -= event.deltaX;\n      var newControllerState = this.controllerState.rotate({\n        pos: pos\n      });\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true,\n        isRotating: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onTriplePanEnd\",\n    value: function _onTriplePanEnd(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n      var inertia = this.inertia;\n      if (this.touchRotate && inertia && event.velocityY) {\n        var pos = this.getCenter(event);\n        var endPos = [pos[0], pos[1] += event.velocityY * inertia / 2];\n        var newControllerState = this.controllerState.rotate({\n          pos: endPos\n        });\n        this.updateViewport(newControllerState, _objectSpread(_objectSpread({}, this._getTransitionProps()), {}, {\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        }), {\n          isDragging: false,\n          isRotating: true\n        });\n        this.blockEvents(inertia);\n      } else {\n        var _newControllerState3 = this.controllerState.rotateEnd();\n        this.updateViewport(_newControllerState3, null, {\n          isDragging: false,\n          isRotating: false\n        });\n      }\n      return true;\n    }\n  }, {\n    key: \"_onPinchStart\",\n    value: function _onPinchStart(event) {\n      var pos = this.getCenter(event);\n      if (!this.isPointInBounds(pos, event)) {\n        return false;\n      }\n      var newControllerState = this.controllerState.zoomStart({\n        pos: pos\n      }).rotateStart({\n        pos: pos\n      });\n      pinchEventWorkaround._startPinchRotation = event.rotation;\n      pinchEventWorkaround._lastPinchEvent = event;\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPinch\",\n    value: function _onPinch(event) {\n      if (!this.touchZoom && !this.touchRotate) {\n        return false;\n      }\n      if (!this.isDragging()) {\n        return false;\n      }\n      var newControllerState = this.controllerState;\n      if (this.touchZoom) {\n        var scale = event.scale;\n        var pos = this.getCenter(event);\n        newControllerState = newControllerState.zoom({\n          pos: pos,\n          scale: scale\n        });\n      }\n      if (this.touchRotate) {\n        var rotation = event.rotation;\n        newControllerState = newControllerState.rotate({\n          deltaAngleX: pinchEventWorkaround._startPinchRotation - rotation\n        });\n      }\n      this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true,\n        isPanning: this.touchZoom,\n        isZooming: this.touchZoom,\n        isRotating: this.touchRotate\n      });\n      pinchEventWorkaround._lastPinchEvent = event;\n      return true;\n    }\n  }, {\n    key: \"_onPinchEnd\",\n    value: function _onPinchEnd(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n      var inertia = this.inertia;\n      var _lastPinchEvent = pinchEventWorkaround._lastPinchEvent;\n      if (this.touchZoom && inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n        var pos = this.getCenter(event);\n        var newControllerState = this.controllerState.rotateEnd();\n        var z = Math.log2(event.scale);\n        var velocityZ = (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n        var endScale = Math.pow(2, z + velocityZ * inertia / 2);\n        newControllerState = newControllerState.zoom({\n          pos: pos,\n          scale: endScale\n        }).zoomEnd();\n        this.updateViewport(newControllerState, _objectSpread(_objectSpread({}, this._getTransitionProps({\n          around: pos\n        })), {}, {\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        }), {\n          isDragging: false,\n          isPanning: this.touchZoom,\n          isZooming: this.touchZoom,\n          isRotating: false\n        });\n        this.blockEvents(inertia);\n      } else {\n        var _newControllerState4 = this.controllerState.zoomEnd().rotateEnd();\n        this.updateViewport(_newControllerState4, null, {\n          isDragging: false,\n          isPanning: false,\n          isZooming: false,\n          isRotating: false\n        });\n      }\n      pinchEventWorkaround._startPinchRotation = null;\n      pinchEventWorkaround._lastPinchEvent = null;\n      return true;\n    }\n  }, {\n    key: \"_onDoubleTap\",\n    value: function _onDoubleTap(event) {\n      if (!this.doubleClickZoom) {\n        return false;\n      }\n      var pos = this.getCenter(event);\n      if (!this.isPointInBounds(pos, event)) {\n        return false;\n      }\n      var isZoomOut = this.isFunctionKeyPressed(event);\n      var newControllerState = this.controllerState.zoom({\n        pos: pos,\n        scale: isZoomOut ? 0.5 : 2\n      });\n      this.updateViewport(newControllerState, this._getTransitionProps({\n        around: pos\n      }), {\n        isZooming: true,\n        isPanning: true\n      });\n      this.blockEvents(100);\n      return true;\n    }\n  }, {\n    key: \"_onKeyDown\",\n    value: function _onKeyDown(event) {\n      if (!this.keyboard) {\n        return false;\n      }\n      var funcKey = this.isFunctionKeyPressed(event);\n      var _ref2 = this.keyboard === true ? {} : this.keyboard,\n        zoomSpeed = _ref2.zoomSpeed,\n        moveSpeed = _ref2.moveSpeed,\n        rotateSpeedX = _ref2.rotateSpeedX,\n        rotateSpeedY = _ref2.rotateSpeedY;\n      var controllerState = this.controllerState;\n      var newControllerState;\n      var interactionState = {};\n      switch (event.srcEvent.code) {\n        case 'Minus':\n          newControllerState = funcKey ? controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed) : controllerState.zoomOut(zoomSpeed);\n          interactionState.isZooming = true;\n          break;\n        case 'Equal':\n          newControllerState = funcKey ? controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed) : controllerState.zoomIn(zoomSpeed);\n          interactionState.isZooming = true;\n          break;\n        case 'ArrowLeft':\n          if (funcKey) {\n            newControllerState = controllerState.rotateLeft(rotateSpeedX);\n            interactionState.isRotating = true;\n          } else {\n            newControllerState = controllerState.moveLeft(moveSpeed);\n            interactionState.isPanning = true;\n          }\n          break;\n        case 'ArrowRight':\n          if (funcKey) {\n            newControllerState = controllerState.rotateRight(rotateSpeedX);\n            interactionState.isRotating = true;\n          } else {\n            newControllerState = controllerState.moveRight(moveSpeed);\n            interactionState.isPanning = true;\n          }\n          break;\n        case 'ArrowUp':\n          if (funcKey) {\n            newControllerState = controllerState.rotateUp(rotateSpeedY);\n            interactionState.isRotating = true;\n          } else {\n            newControllerState = controllerState.moveUp(moveSpeed);\n            interactionState.isPanning = true;\n          }\n          break;\n        case 'ArrowDown':\n          if (funcKey) {\n            newControllerState = controllerState.rotateDown(rotateSpeedY);\n            interactionState.isRotating = true;\n          } else {\n            newControllerState = controllerState.moveDown(moveSpeed);\n            interactionState.isPanning = true;\n          }\n          break;\n        default:\n          return false;\n      }\n      this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);\n      return true;\n    }\n  }, {\n    key: \"_getTransitionProps\",\n    value: function _getTransitionProps(opts) {\n      var transition = this.transition;\n      if (!transition || !transition.transitionInterpolator) {\n        return NO_TRANSITION_PROPS;\n      }\n      return opts ? _objectSpread(_objectSpread({}, transition), {}, {\n        transitionInterpolator: new LinearInterpolator(_objectSpread(_objectSpread(_objectSpread({}, opts), transition.transitionInterpolator.opts), {}, {\n          makeViewport: this.controllerState.makeViewport\n        }))\n      }) : transition;\n    }\n  }]);\n  return Controller;\n}();\nexport { Controller as default };","map":{"version":3,"names":["TransitionManager","LinearInterpolator","NO_TRANSITION_PROPS","transitionDuration","DEFAULT_INERTIA","INERTIA_EASING","t","EVENT_TYPES","WHEEL","PAN","PINCH","TRIPLE_PAN","DOUBLE_TAP","KEYBOARD","pinchEventWorkaround","Controller","opts","_this","_classCallCheck","_defineProperty","isDragging","transitionManager","_objectSpread","getControllerState","props","ControllerState","onViewStateChange","_onTransition","bind","onStateChange","_setInteractionState","handleEvent","eventManager","makeViewport","_createClass","key","set","customEvents","toggleEvents","_customEvents","setProps","value","finalize","eventName","_events","_this$eventManager","off","event","_controllerState","undefined","eventStartBlocked","_eventStartBlocked","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onTriplePanStart","_onTriplePan","_onTriplePanEnd","_onDoubleTap","_onWheel","_onKeyDown","get","state","getCenter","_this$props","x","y","offsetCenter","isPointInBounds","pos","_this$props2","width","height","handled","inside","stopPropagation","isFunctionKeyPressed","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","_interactionState","blockEvents","timeout","_this2","timer","setTimeout","dragMode","transitionInterpolator","_getTransitionProps","processViewStateChange","inertia","Number","isFinite","_props$scrollZoom","scrollZoom","_props$dragPan","dragPan","_props$dragRotate","dragRotate","_props$doubleClickZoo","doubleClickZoom","_props$touchZoom","touchZoom","_props$touchRotate","touchRotate","_props$keyboard","keyboard","isInteractive","updateTransition","eventNames","enabled","_this3","forEach","on","updateViewport","newControllerState","extraProps","arguments","length","interactionState","viewState","getViewportProps","changed","controllerState","getState","oldViewState","params","newStates","Object","assign","alternateMode","rightButton","invertPan","_panMove","_onPanMove","_onPanRotate","_onPanMoveEnd","_onPanRotateEnd","pan","isPanning","velocity","endPos","velocityX","velocityY","panEnd","transitionEasing","rotate","isRotating","rotateEnd","preventDefault","_ref","_ref$speed","speed","_ref$smooth","smooth","delta","scale","Math","exp","abs","zoom","around","isZooming","rotateStart","deltaX","zoomStart","_startPinchRotation","rotation","_lastPinchEvent","deltaAngleX","z","log2","velocityZ","deltaTime","endScale","pow","zoomEnd","isZoomOut","funcKey","_ref2","zoomSpeed","moveSpeed","rotateSpeedX","rotateSpeedY","code","zoomOut","zoomIn","rotateLeft","moveLeft","rotateRight","moveRight","rotateUp","moveUp","rotateDown","moveDown","transition","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/core/src/controllers/controller.ts"],"sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable max-statements, complexity */\nimport TransitionManager, {TransitionProps} from './transition-manager';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {IViewState} from './view-state';\nimport {ConstructorOf} from '../types/types';\n\nimport type Viewport from '../viewports/viewport';\n\nimport type {EventManager, MjolnirEvent, MjolnirGestureEvent, MjolnirWheelEvent, MjolnirKeyEvent} from 'mjolnir.js';\nimport type {Timeline} from '@luma.gl/core';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n} as const;\n\nconst DEFAULT_INERTIA = 300;\nconst INERTIA_EASING = t => 1 - (1 - t) * (1 - t);\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n} as const;\n\n/** Configuration of how user input is handled */\nexport type ControllerOptions = {\n  /** Enable zooming with mouse wheel. Default `true`. */\n  scrollZoom?: boolean | {\n    /** Scaler that translates wheel delta to the change of viewport scale. Default `0.01`. */\n    speed?: number;\n    /** Smoothly transition to the new zoom. If enabled, will provide a slightly lagged but smoother experience. Default `false`. */\n    smooth?: boolean\n  };\n  /** Enable panning with pointer drag. Default `true` */\n  dragPan?: boolean;\n  /** Enable rotating with pointer drag. Default `true` */\n  dragRotate?: boolean;\n  /** Enable zooming with double click. Default `true` */\n  doubleClickZoom?: boolean;\n  /** Enable zooming with multi-touch. Default `true` */\n  touchZoom?: boolean;\n  /** Enable rotating with multi-touch. Use two-finger rotating gesture for horizontal and three-finger swiping gesture for vertical rotation. Default `false` */\n  touchRotate?: boolean;\n  /** Enable interaction with keyboard. Default `true`. */\n  keyboard?:\n    | boolean\n    | {\n        /** Speed of zoom using +/- keys. Default `2` */\n        zoomSpeed?: number;\n        /** Speed of movement using arrow keys, in pixels. */\n        moveSpeed?: number;\n        /** Speed of rotation using shift + left/right arrow keys, in degrees. Default 15. */\n        rotateSpeedX?: number;\n        /** Speed of rotation using shift + up/down arrow keys, in degrees. Default 10. */\n        rotateSpeedY?: number;\n      };\n  /** Drag behavior without pressing function keys, one of `pan` and `rotate`. */\n  dragMode?: 'pan' | 'rotate';\n  /** Enable inertia after panning/pinching. If a number is provided, indicates the duration of time over which the velocity reduces to zero, in milliseconds. Default `false`. */\n  inertia?: boolean | number;\n};\n\nexport type ControllerProps = {\n  /** Identifier of the controller */\n  id: string;\n  /** Viewport x position */\n  x: number;\n  /** Viewport y position */\n  y: number;\n  /** Viewport width */\n  width: number;\n  /** Viewport height */\n  height: number;\n} & ControllerOptions & TransitionProps;\n\n/** The state of a controller */\nexport type InteractionState = {\n  /** If the view state is in transition */\n  inTransition?: boolean;\n  /** If the user is dragging */\n  isDragging?: boolean;\n  /** If the view is being panned, either from user input or transition */\n  isPanning?: boolean;\n  /** If the view is being rotated, either from user input or transition */\n  isRotating?: boolean;\n  /** If the view is being zoomed, either from user input or transition */\n  isZooming?: boolean;\n}\n\n/** Parameters passed to the onViewStateChange callback */\nexport type ViewStateChangeParameters = {\n  /** The next view state, either from user input or transition */\n  viewState: Record<string, any>;\n  /** Object describing the nature of the view state change */\n  interactionState: InteractionState;\n  /** The current view state */\n  oldViewState?: Record<string, any>;\n}\n\nconst pinchEventWorkaround: any = {};\n\nexport default abstract class Controller<ControllerState extends IViewState<ControllerState>> {\n  abstract get ControllerState(): ConstructorOf<ControllerState>;\n  abstract get transition(): TransitionProps;\n\n  // @ts-expect-error (2564) - not assigned in the constructor\n  protected props: ControllerProps;\n  protected state: Record<string, any> = {};\n\n  protected transitionManager: TransitionManager<ControllerState>;\n  protected eventManager: EventManager;\n  protected onViewStateChange: (params: ViewStateChangeParameters) => void;\n  protected onStateChange: (state: InteractionState) => void;\n  protected makeViewport: (opts: Record<string, any>) => Viewport\n\n  private _controllerState?: ControllerState;\n  private _events: Record<string, boolean> = {};\n  private _interactionState: InteractionState = {\n    isDragging: false\n  };\n  private _customEvents: string[] = [];\n  private _eventStartBlocked: any = null;\n  private _panMove: boolean = false;\n\n  protected invertPan: boolean = false;\n  protected dragMode: 'pan' | 'rotate' = 'rotate';\n  protected inertia: number = 0;\n  protected scrollZoom: boolean | {speed?: number; smooth?: boolean} = true;\n  protected dragPan: boolean = true;\n  protected dragRotate: boolean = true;\n  protected doubleClickZoom: boolean = true;\n  protected touchZoom: boolean = true;\n  protected touchRotate: boolean = false;\n  protected keyboard:\n    | boolean\n    | {\n        zoomSpeed?: number; //  speed of zoom using +/- keys. Default 2.\n        moveSpeed?: number; //  speed of movement using arrow keys, in pixels.\n        rotateSpeedX?: number; //  speed of rotation using shift + left/right arrow keys, in degrees. Default 15.\n        rotateSpeedY?: number; //  speed of rotation using shift + up/down arrow keys, in degrees. Default 10.\n      } = true;\n\n  constructor(opts: {\n    timeline: Timeline,\n    eventManager: EventManager;\n    makeViewport: (opts: Record<string, any>) => Viewport;\n    onViewStateChange: (params: ViewStateChangeParameters) => void;\n    onStateChange: (state: InteractionState) => void;\n  }) {\n    this.transitionManager = new TransitionManager<ControllerState>({\n      ...opts,\n      getControllerState: props => new this.ControllerState(props),\n      onViewStateChange: this._onTransition.bind(this),\n      onStateChange: this._setInteractionState.bind(this)\n    });\n\n    this.handleEvent = this.handleEvent.bind(this);\n\n    this.eventManager = opts.eventManager;\n    this.onViewStateChange = opts.onViewStateChange || (() => {});\n    this.onStateChange = opts.onStateChange || (() => {});\n    this.makeViewport = opts.makeViewport;\n  }\n\n  set events(customEvents) {\n    this.toggleEvents(this._customEvents, false);\n    this.toggleEvents(customEvents, true);\n    this._customEvents = customEvents;\n    // Make sure default events are not overwritten\n    if (this.props) {\n      this.setProps(this.props);\n    }\n  }\n\n  finalize() {\n    for (const eventName in this._events) {\n      if (this._events[eventName]) {\n        // @ts-ignore (2345) event type string cannot be assifned to enum\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this.eventManager?.off(eventName, this.handleEvent);\n      }\n    }\n    this.transitionManager.finalize();\n  }\n\n  /**\n   * Callback for events\n   */\n  handleEvent(event: MjolnirEvent) {\n    // Force recalculate controller state\n    this._controllerState = undefined;\n    const eventStartBlocked = this._eventStartBlocked;\n\n    switch (event.type) {\n      case 'panstart':\n        return eventStartBlocked ? false : this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return eventStartBlocked ? false : this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'tripanstart':\n        return eventStartBlocked ? false : this._onTriplePanStart(event);\n      case 'tripanmove':\n        return this._onTriplePan(event);\n      case 'tripanend':\n        return this._onTriplePanEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  get controllerState(): ControllerState {\n    this._controllerState = this._controllerState || new this.ControllerState({\n      makeViewport: this.makeViewport,\n      ...this.props,\n      ...this.state\n    });\n    return this._controllerState ;\n  }\n\n  getCenter(event: MjolnirGestureEvent | MjolnirWheelEvent) : [number, number] {\n    const {x, y} = this.props;\n    const {offsetCenter} = event;\n    return [offsetCenter.x - x, offsetCenter.y - y];\n  }\n\n  isPointInBounds(pos: [number, number], event: MjolnirEvent): boolean {\n    const {width, height} = this.props;\n    if (event && event.handled) {\n      return false;\n    }\n\n    const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n    if (inside && event) {\n      event.stopPropagation();\n    }\n    return inside;\n  }\n\n  isFunctionKeyPressed(event: MjolnirEvent): boolean {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  isDragging(): boolean {\n    return this._interactionState.isDragging || false;\n  }\n\n  // When a multi-touch event ends, e.g. pinch, not all pointers are lifted at the same time.\n  // This triggers a brief `pan` event.\n  // Calling this method will temporarily disable *start events to avoid conflicting transitions.\n  blockEvents(timeout: number): void {\n    /* global setTimeout */\n    const timer = setTimeout(() => {\n      if (this._eventStartBlocked === timer) {\n        this._eventStartBlocked = null;\n      }\n    }, timeout);\n    this._eventStartBlocked = timer;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  setProps(props: ControllerProps) {\n    if (props.dragMode) {\n      this.dragMode = props.dragMode;\n    }\n    this.props = props;\n\n    if (!('transitionInterpolator' in props)) {\n      // Add default transition interpolator\n      props.transitionInterpolator = this._getTransitionProps().transitionInterpolator;\n    }\n\n    this.transitionManager.processViewStateChange(props);\n\n    const {inertia} = props;\n    this.inertia = Number.isFinite(inertia) ? (inertia as number) : (inertia === true ? DEFAULT_INERTIA : 0);\n\n    // TODO - make sure these are not reset on every setProps\n    const {\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = props;\n\n    // Register/unregister events\n    const isInteractive = Boolean(this.onViewStateChange);\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && touchRotate);\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n\n  updateTransition() {\n    this.transitionManager.updateTransition();\n  }\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  // Private Methods\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  protected updateViewport(newControllerState: ControllerState, extraProps: Record<string, any> | null = null, interactionState: InteractionState = {}) {\n    const viewState = {...newControllerState.getViewportProps(), ...extraProps};\n\n    // TODO - to restore diffing, we need to include interactionState\n    const changed = this.controllerState !== newControllerState;\n    // const oldViewState = this.controllerState.getViewportProps();\n    // const changed = Object.keys(viewState).some(key => oldViewState[key] !== viewState[key]);\n\n    this.state = newControllerState.getState();\n    this._setInteractionState(interactionState);\n\n    if (changed) {\n      const oldViewState = this.controllerState && this.controllerState.getViewportProps();\n      if (this.onViewStateChange) {\n        this.onViewStateChange({viewState, interactionState: this._interactionState, oldViewState});\n      }\n    }\n  }\n\n  private _onTransition(params: {viewState: Record<string, any>, oldViewState: Record<string, any>}) {\n    this.onViewStateChange({...params, interactionState: this._interactionState});\n  }\n\n  private _setInteractionState(newStates: InteractionState) {\n    Object.assign(this._interactionState, newStates);\n    this.onStateChange(this._interactionState);\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  protected _onPanStart(event: MjolnirGestureEvent): boolean {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton || false;\n    if (this.invertPan || this.dragMode === 'pan') {\n      // invertPan is replaced by props.dragMode, keeping for backward compatibility\n      alternateMode = !alternateMode;\n    }\n    const newControllerState = this.controllerState[alternateMode ? 'panStart' : 'rotateStart']({\n      pos\n    });\n    this._panMove = alternateMode;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `panmove` and `panend` event.\n  protected _onPan(event: MjolnirGestureEvent): boolean {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMove(event) : this._onPanRotate(event);\n  }\n\n  protected _onPanEnd(event: MjolnirGestureEvent): boolean {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMoveEnd(event) : this._onPanRotateEnd(event);\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  protected _onPanMove(event: MjolnirGestureEvent): boolean {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.pan({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  protected _onPanMoveEnd(event: MjolnirGestureEvent): boolean {\n    const {inertia} = this;\n    if (this.dragPan && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos: [number, number] = [\n        pos[0] + (event.velocityX * inertia) / 2,\n        pos[1] + (event.velocityY * inertia) / 2\n      ];\n      const newControllerState = this.controllerState.pan({pos: endPos}).panEnd();\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isPanning: true\n        }\n      );\n    } else {\n      const newControllerState = this.controllerState.panEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  protected _onPanRotate(event: MjolnirGestureEvent): boolean {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.rotate({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  protected _onPanRotateEnd(event): boolean {\n    const {inertia} = this;\n    if (this.dragRotate && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos: [number, number] = [\n        pos[0] + (event.velocityX * inertia) / 2,\n        pos[1] + (event.velocityY * inertia) / 2\n      ];\n      const newControllerState = this.controllerState.rotate({pos: endPos}).rotateEnd();\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isRotating: true\n        }\n      );\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for the `wheel` event.\n  protected _onWheel(event: MjolnirWheelEvent): boolean {\n    if (!this.scrollZoom) {\n      return false;\n    }\n    event.srcEvent.preventDefault();\n\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const {speed = 0.01, smooth = false} = this.scrollZoom === true ? {} : this.scrollZoom;\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newControllerState = this.controllerState.zoom({pos, scale});\n    this.updateViewport(\n      newControllerState,\n      {...this._getTransitionProps({around: pos}), transitionDuration: smooth ? 250 : 1},\n      {\n        isZooming: true,\n        isPanning: true\n      }\n    );\n    return true;\n  }\n\n  protected _onTriplePanStart(event: MjolnirGestureEvent): boolean {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    const newControllerState = this.controllerState.rotateStart({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  protected _onTriplePan(event: MjolnirGestureEvent): boolean {\n    if (!this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    pos[0] -= event.deltaX;\n\n    const newControllerState = this.controllerState.rotate({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  protected _onTriplePanEnd(event: MjolnirGestureEvent): boolean {\n    if (!this.isDragging()) {\n      return false;\n    }\n    const {inertia} = this;\n    if (this.touchRotate && inertia && event.velocityY) {\n      const pos = this.getCenter(event);\n      const endPos: [number, number] = [pos[0], (pos[1] += (event.velocityY * inertia) / 2)];\n      const newControllerState = this.controllerState.rotate({pos: endPos});\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isRotating: true\n        }\n      );\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for the `pinchstart` event.\n  protected _onPinchStart(event: MjolnirGestureEvent): boolean {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const newControllerState = this.controllerState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    pinchEventWorkaround._startPinchRotation = event.rotation;\n    pinchEventWorkaround._lastPinchEvent = event;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `pinchmove` and `pinchend` events.\n  protected _onPinch(event: MjolnirGestureEvent): boolean {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    let newControllerState = this.controllerState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newControllerState = newControllerState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      newControllerState = newControllerState.rotate({\n        deltaAngleX: pinchEventWorkaround._startPinchRotation - rotation\n      });\n    }\n\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: this.touchZoom,\n      isZooming: this.touchZoom,\n      isRotating: this.touchRotate\n    });\n    pinchEventWorkaround._lastPinchEvent = event;\n    return true;\n  }\n\n  protected _onPinchEnd(event: MjolnirGestureEvent): boolean {\n    if (!this.isDragging()) {\n      return false;\n    }\n    const {inertia} = this;\n    const {_lastPinchEvent} = pinchEventWorkaround;\n    if (this.touchZoom && inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n      const pos = this.getCenter(event);\n      let newControllerState = this.controllerState.rotateEnd();\n      const z = Math.log2(event.scale);\n      const velocityZ =\n        (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n      const endScale = Math.pow(2, z + (velocityZ * inertia) / 2);\n      newControllerState = newControllerState.zoom({pos, scale: endScale}).zoomEnd();\n\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps({around: pos}),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isPanning: this.touchZoom,\n          isZooming: this.touchZoom,\n          isRotating: false\n        }\n      );\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.zoomEnd().rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false,\n        isZooming: false,\n        isRotating: false\n      });\n    }\n    pinchEventWorkaround._startPinchRotation = null;\n    pinchEventWorkaround._lastPinchEvent = null;\n    return true;\n  }\n\n  // Default handler for the `doubletap` event.\n  protected _onDoubleTap(event: MjolnirGestureEvent): boolean {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newControllerState = this.controllerState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    this.updateViewport(newControllerState, this._getTransitionProps({around: pos}), {\n      isZooming: true,\n      isPanning: true\n    });\n    this.blockEvents(100);\n    return true;\n  }\n\n  // Default handler for the `keydown` event\n  protected _onKeyDown(event: MjolnirKeyEvent): boolean {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    // @ts-ignore\n    const {zoomSpeed, moveSpeed, rotateSpeedX, rotateSpeedY} = this.keyboard === true ? {} : this.keyboard;\n    const {controllerState} = this;\n    let newControllerState;\n    const interactionState: InteractionState = {};\n\n    switch (event.srcEvent.code) {\n      case 'Minus':\n        newControllerState = funcKey\n          ? controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed)\n          : controllerState.zoomOut(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'Equal':\n        newControllerState = funcKey\n          ? controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed)\n          : controllerState.zoomIn(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'ArrowLeft':\n        if (funcKey) {\n          newControllerState = controllerState.rotateLeft(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveLeft(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowRight':\n        if (funcKey) {\n          newControllerState = controllerState.rotateRight(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveRight(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowUp':\n        if (funcKey) {\n          newControllerState = controllerState.rotateUp(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveUp(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowDown':\n        if (funcKey) {\n          newControllerState = controllerState.rotateDown(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveDown(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      default:\n        return false;\n    }\n    this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);\n    return true;\n  }\n\n  protected _getTransitionProps(opts?: any): TransitionProps {\n    const {transition} = this;\n\n    if (!transition || !transition.transitionInterpolator) {\n      return NO_TRANSITION_PROPS;\n    }\n\n    // Enables Transitions on double-tap and key-down events.\n    return opts\n      ? {\n        ...transition,\n        transitionInterpolator: new LinearInterpolator({\n          ...opts,\n          ...(transition.transitionInterpolator as LinearInterpolator).opts,\n          makeViewport: this.controllerState.makeViewport\n        })\n      }\n      : transition;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}