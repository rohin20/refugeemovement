{"ast":null,"code":"import _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { copyStringToDataView } from '@loaders.gl/loader-utils';\nimport { MAGIC_ARRAY } from '../constants';\nimport { encode3DTileHeader, encode3DTileByteLength } from './helpers/encode-3d-tile-header';\nexport function encodeInstancedModel3DTile(tile, dataView, byteOffset, options) {\n  var _tile = tile,\n    _tile$featuresLength = _tile.featuresLength,\n    featuresLength = _tile$featuresLength === void 0 ? 1 : _tile$featuresLength,\n    _tile$gltfFormat = _tile.gltfFormat,\n    gltfFormat = _tile$gltfFormat === void 0 ? 1 : _tile$gltfFormat,\n    _tile$gltfUri = _tile.gltfUri,\n    gltfUri = _tile$gltfUri === void 0 ? '' : _tile$gltfUri;\n  var gltfUriByteLength = gltfUri.length;\n  var featureTableJson = {\n    INSTANCES_LENGTH: featuresLength,\n    POSITION: new Array(featuresLength * 3).fill(0)\n  };\n  var featureTableJsonString = JSON.stringify(featureTableJson);\n  var featureTableJsonByteLength = featureTableJsonString.length;\n  tile = _objectSpread({\n    magic: MAGIC_ARRAY.INSTANCED_MODEL\n  }, tile);\n  var byteOffsetStart = byteOffset;\n  byteOffset = encode3DTileHeader(tile, dataView, 0);\n  if (dataView) {\n    dataView.setUint32(12, featureTableJsonByteLength, true);\n    dataView.setUint32(16, 0, true);\n    dataView.setUint32(20, 0, true);\n    dataView.setUint32(24, 0, true);\n    dataView.setUint32(28, gltfFormat, true);\n  }\n  byteOffset += 20;\n  byteOffset += copyStringToDataView(dataView, byteOffset, featureTableJsonString, featureTableJsonByteLength);\n  byteOffset += copyStringToDataView(dataView, byteOffset, gltfUri, gltfUriByteLength);\n  encode3DTileByteLength(dataView, byteOffsetStart, byteOffset - byteOffsetStart);\n  return byteOffset;\n}","map":{"version":3,"names":["copyStringToDataView","MAGIC_ARRAY","encode3DTileHeader","encode3DTileByteLength","encodeInstancedModel3DTile","tile","dataView","byteOffset","options","_tile","_tile$featuresLength","featuresLength","_tile$gltfFormat","gltfFormat","_tile$gltfUri","gltfUri","gltfUriByteLength","length","featureTableJson","INSTANCES_LENGTH","POSITION","Array","fill","featureTableJsonString","JSON","stringify","featureTableJsonByteLength","_objectSpread","magic","INSTANCED_MODEL","byteOffsetStart","setUint32"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/geo-layers/node_modules/@loaders.gl/3d-tiles/src/lib/encoders/encode-3d-tile-instanced-model.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {copyStringToDataView} from '@loaders.gl/loader-utils';\nimport {MAGIC_ARRAY} from '../constants';\nimport {encode3DTileHeader, encode3DTileByteLength} from './helpers/encode-3d-tile-header';\n\n// Procedurally encode the tile array buffer for testing purposes\n// eslint-disable-next-line max-statements\nexport function encodeInstancedModel3DTile(tile, dataView, byteOffset, options) {\n  const {featuresLength = 1, gltfFormat = 1, gltfUri = ''} = tile;\n\n  const gltfUriByteLength = gltfUri.length;\n\n  const featureTableJson = {\n    INSTANCES_LENGTH: featuresLength,\n    POSITION: new Array(featuresLength * 3).fill(0)\n  };\n  const featureTableJsonString = JSON.stringify(featureTableJson);\n  const featureTableJsonByteLength = featureTableJsonString.length;\n\n  // Add default magic for this tile type\n  tile = {magic: MAGIC_ARRAY.INSTANCED_MODEL, ...tile};\n\n  const byteOffsetStart = byteOffset;\n\n  byteOffset = encode3DTileHeader(tile, dataView, 0);\n\n  if (dataView) {\n    dataView.setUint32(12, featureTableJsonByteLength, true); // featureTableJsonByteLength\n    dataView.setUint32(16, 0, true); // featureTableBinaryByteLength\n    dataView.setUint32(20, 0, true); // batchTableJsonByteLength\n    dataView.setUint32(24, 0, true); // batchTableBinaryByteLength\n    dataView.setUint32(28, gltfFormat, true); // gltfFormat\n  }\n\n  byteOffset += 20;\n\n  byteOffset += copyStringToDataView(\n    dataView,\n    byteOffset,\n    featureTableJsonString,\n    featureTableJsonByteLength\n  );\n  byteOffset += copyStringToDataView(dataView, byteOffset, gltfUri, gltfUriByteLength);\n\n  // Go \"back\" and rewrite the tile's `byteLength` now that we know the value\n  encode3DTileByteLength(dataView, byteOffsetStart, byteOffset - byteOffsetStart);\n\n  return byteOffset;\n}\n"],"mappings":";AAGA,SAAQA,oBAAoB,QAAO,0BAA0B;AAC7D,SAAQC,WAAW,QAAO,cAAc;AACxC,SAAQC,kBAAkB,EAAEC,sBAAsB,QAAO,iCAAiC;AAI1F,OAAO,SAASC,0BAA0BA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,OAAO,EAAE;EAC9E,IAAAC,KAAA,GAA2DJ,IAAI;IAAAK,oBAAA,GAAAD,KAAA,CAAxDE,cAAc;IAAdA,cAAc,GAAAD,oBAAA,cAAG,CAAC,GAAAA,oBAAA;IAAAE,gBAAA,GAAAH,KAAA,CAAEI,UAAU;IAAVA,UAAU,GAAAD,gBAAA,cAAG,CAAC,GAAAA,gBAAA;IAAAE,aAAA,GAAAL,KAAA,CAAEM,OAAO;IAAPA,OAAO,GAAAD,aAAA,cAAG,KAAAA,aAAA;EAErD,IAAME,iBAAiB,GAAGD,OAAO,CAACE,MAAM;EAExC,IAAMC,gBAAgB,GAAG;IACvBC,gBAAgB,EAAER,cAAc;IAChCS,QAAQ,EAAE,IAAIC,KAAK,CAACV,cAAc,GAAG,CAAC,CAAC,CAACW,IAAI,CAAC,CAAC;EAChD,CAAC;EACD,IAAMC,sBAAsB,GAAGC,IAAI,CAACC,SAAS,CAACP,gBAAgB,CAAC;EAC/D,IAAMQ,0BAA0B,GAAGH,sBAAsB,CAACN,MAAM;EAGhEZ,IAAI,GAAAsB,aAAA;IAAIC,KAAK,EAAE3B,WAAW,CAAC4B;EAAe,GAAKxB,IAAA,CAAK;EAEpD,IAAMyB,eAAe,GAAGvB,UAAU;EAElCA,UAAU,GAAGL,kBAAkB,CAACG,IAAI,EAAEC,QAAQ,EAAE,CAAC,CAAC;EAElD,IAAIA,QAAQ,EAAE;IACZA,QAAQ,CAACyB,SAAS,CAAC,EAAE,EAAEL,0BAA0B,EAAE,IAAI,CAAC;IACxDpB,QAAQ,CAACyB,SAAS,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC;IAC/BzB,QAAQ,CAACyB,SAAS,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC;IAC/BzB,QAAQ,CAACyB,SAAS,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC;IAC/BzB,QAAQ,CAACyB,SAAS,CAAC,EAAE,EAAElB,UAAU,EAAE,IAAI,CAAC;EAC1C;EAEAN,UAAU,IAAI,EAAE;EAEhBA,UAAU,IAAIP,oBAAoB,CAChCM,QAAQ,EACRC,UAAU,EACVgB,sBAAsB,EACtBG,0BAA0B,CAC3B;EACDnB,UAAU,IAAIP,oBAAoB,CAACM,QAAQ,EAAEC,UAAU,EAAEQ,OAAO,EAAEC,iBAAiB,CAAC;EAGpFb,sBAAsB,CAACG,QAAQ,EAAEwB,eAAe,EAAEvB,UAAU,GAAGuB,eAAe,CAAC;EAE/E,OAAOvB,UAAU;AACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}