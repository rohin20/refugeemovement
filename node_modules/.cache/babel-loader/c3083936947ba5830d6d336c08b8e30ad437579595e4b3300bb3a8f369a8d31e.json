{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\n/**\n * High-order component that auto-calculates column-widths for `Grid` cells.\n */\n\nvar ColumnSizer = /*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(ColumnSizer, _React$PureComponent);\n  function ColumnSizer(props, context) {\n    var _this;\n    _classCallCheck(this, ColumnSizer);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ColumnSizer).call(this, props, context));\n    _this._registerChild = _this._registerChild.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  _createClass(ColumnSizer, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props = this.props,\n        columnMaxWidth = _this$props.columnMaxWidth,\n        columnMinWidth = _this$props.columnMinWidth,\n        columnCount = _this$props.columnCount,\n        width = _this$props.width;\n      if (columnMaxWidth !== prevProps.columnMaxWidth || columnMinWidth !== prevProps.columnMinWidth || columnCount !== prevProps.columnCount || width !== prevProps.width) {\n        if (this._registeredChild) {\n          this._registeredChild.recomputeGridSize();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n        children = _this$props2.children,\n        columnMaxWidth = _this$props2.columnMaxWidth,\n        columnMinWidth = _this$props2.columnMinWidth,\n        columnCount = _this$props2.columnCount,\n        width = _this$props2.width;\n      var safeColumnMinWidth = columnMinWidth || 1;\n      var safeColumnMaxWidth = columnMaxWidth ? Math.min(columnMaxWidth, width) : width;\n      var columnWidth = width / columnCount;\n      columnWidth = Math.max(safeColumnMinWidth, columnWidth);\n      columnWidth = Math.min(safeColumnMaxWidth, columnWidth);\n      columnWidth = Math.floor(columnWidth);\n      var adjustedWidth = Math.min(width, columnWidth * columnCount);\n      return children({\n        adjustedWidth: adjustedWidth,\n        columnWidth: columnWidth,\n        getColumnWidth: function getColumnWidth() {\n          return columnWidth;\n        },\n        registerChild: this._registerChild\n      });\n    }\n  }, {\n    key: \"_registerChild\",\n    value: function _registerChild(child) {\n      if (child && typeof child.recomputeGridSize !== 'function') {\n        throw Error('Unexpected child type registered; only Grid/MultiGrid children are supported.');\n      }\n      this._registeredChild = child;\n      if (this._registeredChild) {\n        this._registeredChild.recomputeGridSize();\n      }\n    }\n  }]);\n  return ColumnSizer;\n}(React.PureComponent);\nexport { ColumnSizer as default };\nColumnSizer.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * Function responsible for rendering a virtualized Grid.\n   * This function should implement the following signature:\n   * ({ adjustedWidth, getColumnWidth, registerChild }) => PropTypes.element\n   *\n   * The specified :getColumnWidth function should be passed to the Grid's :columnWidth property.\n   * The :registerChild should be passed to the Grid's :ref property.\n   * The :adjustedWidth property is optional; it reflects the lesser of the overall width or the width of all columns.\n   */\n  children: PropTypes.func.isRequired,\n  /** Optional maximum allowed column width */\n  columnMaxWidth: PropTypes.number,\n  /** Optional minimum allowed column width */\n  columnMinWidth: PropTypes.number,\n  /** Number of columns in Grid or Table child */\n  columnCount: PropTypes.number.isRequired,\n  /** Width of Grid or Table child */\n  width: PropTypes.number.isRequired\n} : {};","map":{"version":3,"names":["_classCallCheck","_createClass","_possibleConstructorReturn","_getPrototypeOf","_assertThisInitialized","_inherits","PropTypes","React","ColumnSizer","_React$PureComponent","props","context","_this","call","_registerChild","bind","key","value","componentDidUpdate","prevProps","_this$props","columnMaxWidth","columnMinWidth","columnCount","width","_registeredChild","recomputeGridSize","render","_this$props2","children","safeColumnMinWidth","safeColumnMaxWidth","Math","min","columnWidth","max","floor","adjustedWidth","getColumnWidth","registerChild","child","Error","PureComponent","default","propTypes","process","env","NODE_ENV","func","isRequired","number"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/react-virtualized/dist/es/ColumnSizer/ColumnSizer.js"],"sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\n/**\n * High-order component that auto-calculates column-widths for `Grid` cells.\n */\n\nvar ColumnSizer =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(ColumnSizer, _React$PureComponent);\n\n  function ColumnSizer(props, context) {\n    var _this;\n\n    _classCallCheck(this, ColumnSizer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ColumnSizer).call(this, props, context));\n    _this._registerChild = _this._registerChild.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ColumnSizer, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props = this.props,\n          columnMaxWidth = _this$props.columnMaxWidth,\n          columnMinWidth = _this$props.columnMinWidth,\n          columnCount = _this$props.columnCount,\n          width = _this$props.width;\n\n      if (columnMaxWidth !== prevProps.columnMaxWidth || columnMinWidth !== prevProps.columnMinWidth || columnCount !== prevProps.columnCount || width !== prevProps.width) {\n        if (this._registeredChild) {\n          this._registeredChild.recomputeGridSize();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          columnMaxWidth = _this$props2.columnMaxWidth,\n          columnMinWidth = _this$props2.columnMinWidth,\n          columnCount = _this$props2.columnCount,\n          width = _this$props2.width;\n      var safeColumnMinWidth = columnMinWidth || 1;\n      var safeColumnMaxWidth = columnMaxWidth ? Math.min(columnMaxWidth, width) : width;\n      var columnWidth = width / columnCount;\n      columnWidth = Math.max(safeColumnMinWidth, columnWidth);\n      columnWidth = Math.min(safeColumnMaxWidth, columnWidth);\n      columnWidth = Math.floor(columnWidth);\n      var adjustedWidth = Math.min(width, columnWidth * columnCount);\n      return children({\n        adjustedWidth: adjustedWidth,\n        columnWidth: columnWidth,\n        getColumnWidth: function getColumnWidth() {\n          return columnWidth;\n        },\n        registerChild: this._registerChild\n      });\n    }\n  }, {\n    key: \"_registerChild\",\n    value: function _registerChild(child) {\n      if (child && typeof child.recomputeGridSize !== 'function') {\n        throw Error('Unexpected child type registered; only Grid/MultiGrid children are supported.');\n      }\n\n      this._registeredChild = child;\n\n      if (this._registeredChild) {\n        this._registeredChild.recomputeGridSize();\n      }\n    }\n  }]);\n\n  return ColumnSizer;\n}(React.PureComponent);\n\nexport { ColumnSizer as default };\nColumnSizer.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * Function responsible for rendering a virtualized Grid.\n   * This function should implement the following signature:\n   * ({ adjustedWidth, getColumnWidth, registerChild }) => PropTypes.element\n   *\n   * The specified :getColumnWidth function should be passed to the Grid's :columnWidth property.\n   * The :registerChild should be passed to the Grid's :ref property.\n   * The :adjustedWidth property is optional; it reflects the lesser of the overall width or the width of all columns.\n   */\n  children: PropTypes.func.isRequired,\n\n  /** Optional maximum allowed column width */\n  columnMaxWidth: PropTypes.number,\n\n  /** Optional minimum allowed column width */\n  columnMinWidth: PropTypes.number,\n\n  /** Number of columns in Grid or Table child */\n  columnCount: PropTypes.number.isRequired,\n\n  /** Width of Grid or Table child */\n  width: PropTypes.number.isRequired\n} : {};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}