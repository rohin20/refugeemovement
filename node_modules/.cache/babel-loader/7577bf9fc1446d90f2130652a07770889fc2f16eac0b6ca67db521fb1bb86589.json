{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isLoaderObject } from '../loader-utils/normalize-loader';\nimport { getFetchFunction } from '../loader-utils/option-utils';\nimport { parseInBatches } from './parse-in-batches';\nexport function loadInBatches(files, loaders, options) {\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    options = loaders;\n    loaders = null;\n  }\n  var fetch = getFetchFunction(options || {});\n  if (!Array.isArray(files)) {\n    return loadOneFileInBatches(files, loaders, options, fetch);\n  }\n  var promises = files.map(function (file) {\n    return loadOneFileInBatches(file, loaders, options, fetch);\n  });\n  return promises;\n}\nfunction loadOneFileInBatches(_x, _x2, _x3, _x4) {\n  return _loadOneFileInBatches.apply(this, arguments);\n}\nfunction _loadOneFileInBatches() {\n  _loadOneFileInBatches = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(file, loaders, options, fetch) {\n    var url, response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof file === 'string')) {\n              _context.next = 8;\n              break;\n            }\n            url = file;\n            _context.next = 4;\n            return fetch(url);\n          case 4:\n            response = _context.sent;\n            _context.next = 7;\n            return parseInBatches(response, loaders, options);\n          case 7:\n            return _context.abrupt(\"return\", _context.sent);\n          case 8:\n            _context.next = 10;\n            return parseInBatches(file, loaders, options);\n          case 10:\n            return _context.abrupt(\"return\", _context.sent);\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadOneFileInBatches.apply(this, arguments);\n}","map":{"version":3,"names":["isLoaderObject","getFetchFunction","parseInBatches","loadInBatches","files","loaders","options","Array","isArray","fetch","loadOneFileInBatches","promises","map","file","_callee","url","response","_regeneratorRuntime","wrap","_callee$","_context","prev","next","sent","abrupt","stop"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/kepler.gl/node_modules/@loaders.gl/core/src/lib/api/load-in-batches.js"],"sourcesContent":["import {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {getFetchFunction} from '../loader-utils/option-utils';\n\nimport {parseInBatches} from './parse-in-batches';\n\n// Note returns promise or list of promises\nexport function loadInBatches(files, loaders, options) {\n  // Signature: load(url, options)\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    options = loaders;\n    loaders = null;\n  }\n\n  // Select fetch function\n  const fetch = getFetchFunction(options || {});\n\n  // Single url/file\n  if (!Array.isArray(files)) {\n    return loadOneFileInBatches(files, loaders, options, fetch);\n  }\n\n  // Multiple URLs / files\n  const promises = files.map(file => loadOneFileInBatches(file, loaders, options, fetch));\n\n  // No point in waiting here for all responses before starting to stream individual streams?\n  return promises;\n}\n\nasync function loadOneFileInBatches(file, loaders, options, fetch) {\n  if (typeof file === 'string') {\n    const url = file;\n    const response = await fetch(url);\n    return await parseInBatches(response, loaders, options);\n  }\n  return await parseInBatches(file, loaders, options);\n}\n"],"mappings":";;AAAA,SAAQA,cAAR,QAA6B,kCAA7B;AACA,SAAQC,gBAAR,QAA+B,8BAA/B;AAEA,SAAQC,cAAR,QAA6B,oBAA7B;AAGA,OAAO,SAASC,aAATA,CAAuBC,KAAvB,EAA8BC,OAA9B,EAAuCC,OAAvC,EAAgD;EAErD,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,OAAd,CAAD,IAA2B,CAACL,cAAc,CAACK,OAAD,CAA9C,EAAyD;IACvDC,OAAO,GAAGD,OAAV;IACAA,OAAO,GAAG,IAAV;EACD;EAGD,IAAMI,KAAK,GAAGR,gBAAgB,CAACK,OAAO,IAAI,EAAZ,CAA9B;EAGA,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAAL,EAA2B;IACzB,OAAOM,oBAAoB,CAACN,KAAD,EAAQC,OAAR,EAAiBC,OAAjB,EAA0BG,KAA1B,CAA3B;EACD;EAGD,IAAME,QAAQ,GAAGP,KAAK,CAACQ,GAAN,CAAU,UAAAC,IAAI;IAAA,OAAIH,oBAAoB,CAACG,IAAD,EAAOR,OAAP,EAAgBC,OAAhB,EAAyBG,KAAzB,CAAxB;EAAA,CAAd,CAAjB;EAGA,OAAOE,QAAP;AACD;SAEcD,oB;;;;qEAAf,SAAAI,QAAoCD,IAApC,EAA0CR,OAA1C,EAAmDC,OAAnD,EAA4DG,KAA5D;IAAA,IAAAM,GAAA,EAAAC,QAAA;IAAA,OAAAC,mBAAA,CAAAC,IAAA,UAAAC,SAAAC,QAAA;MAAA;QAAA,QAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAA,MACM,OAAOT,IAAP,KAAgB,QADtB;cAAAO,QAAA,CAAAE,IAAA;cAAA;YAAA;YAEUP,GAFV,GAEgBF,IAFhB;YAAAO,QAAA,CAAAE,IAAA;YAAA,OAG2Bb,KAAK,CAACM,GAAD,CAHhC;UAAA;YAGUC,QAHV,GAAAI,QAAA,CAAAG,IAAA;YAAAH,QAAA,CAAAE,IAAA;YAAA,OAIiBpB,cAAc,CAACc,QAAD,EAAWX,OAAX,EAAoBC,OAApB,CAJ/B;UAAA;YAAA,OAAAc,QAAA,CAAAI,MAAA,WAAAJ,QAAA,CAAAG,IAAA;UAAA;YAAAH,QAAA,CAAAE,IAAA;YAAA,OAMepB,cAAc,CAACW,IAAD,EAAOR,OAAP,EAAgBC,OAAhB,CAN7B;UAAA;YAAA,OAAAc,QAAA,CAAAI,MAAA,WAAAJ,QAAA,CAAAG,IAAA;UAAA;UAAA;YAAA,OAAAH,QAAA,CAAAK,IAAA;QAAA;MAAA;IAAA,GAAAX,OAAA;EAAA,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}