{"ast":null,"code":"export var InternalSlotToken;\n(function (InternalSlotToken) {\n  // To prevent collision with {0} in CLDR\n  InternalSlotToken[\"compactName\"] = \"compactName\";\n  InternalSlotToken[\"compactSymbol\"] = \"compactSymbol\";\n  InternalSlotToken[\"currencyCode\"] = \"currencyCode\";\n  InternalSlotToken[\"currencyName\"] = \"currencyName\";\n  InternalSlotToken[\"currencyNarrowSymbol\"] = \"currencyNarrowSymbol\";\n  InternalSlotToken[\"currencySymbol\"] = \"currencySymbol\";\n  InternalSlotToken[\"minusSign\"] = \"minusSign\";\n  InternalSlotToken[\"number\"] = \"number\";\n  InternalSlotToken[\"percentSign\"] = \"percentSign\";\n  InternalSlotToken[\"plusSign\"] = \"plusSign\";\n  InternalSlotToken[\"scientificExponent\"] = \"scientificExponent\";\n  InternalSlotToken[\"scientificSeparator\"] = \"scientificSeparator\";\n  InternalSlotToken[\"unitName\"] = \"unitName\";\n  InternalSlotToken[\"unitNarrowSymbol\"] = \"unitNarrowSymbol\";\n  InternalSlotToken[\"unitSymbol\"] = \"unitSymbol\";\n})(InternalSlotToken || (InternalSlotToken = {}));","map":{"version":3,"names":["InternalSlotToken"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@formatjs/intl-utils/src/number-types.ts"],"sourcesContent":["import {LDMLPluralRule} from './plural-rules-types';\nimport {LocaleData} from './types';\n\nexport type NumberFormatNotation =\n  | 'standard'\n  | 'scientific'\n  | 'engineering'\n  | 'compact';\n\nexport type NumberFormatRoundingType =\n  | 'significantDigits'\n  | 'fractionDigits'\n  | 'compactRounding';\n\nexport interface NumberFormatDigitOptions {\n  minimumIntegerDigits?: number;\n  minimumFractionDigits?: number;\n  maximumFractionDigits?: number;\n  minimumSignificantDigits?: number;\n  maximumSignificantDigits?: number;\n}\n\nexport interface NumberFormatDigitInternalSlots {\n  minimumIntegerDigits: number;\n  minimumSignificantDigits?: number;\n  maximumSignificantDigits?: number;\n  roundingType: NumberFormatRoundingType;\n  // These two properties are only used when `roundingType` is \"fractionDigits\".\n  minimumFractionDigits?: number;\n  maximumFractionDigits?: number;\n  notation?: NumberFormatNotation;\n}\n\nexport enum InternalSlotToken {\n  // To prevent collision with {0} in CLDR\n  compactName = 'compactName',\n  compactSymbol = 'compactSymbol',\n  currencyCode = 'currencyCode',\n  currencyName = 'currencyName',\n  currencyNarrowSymbol = 'currencyNarrowSymbol',\n  currencySymbol = 'currencySymbol',\n  minusSign = 'minusSign',\n  number = 'number',\n  percentSign = 'percentSign',\n  plusSign = 'plusSign',\n  scientificExponent = 'scientificExponent',\n  scientificSeparator = 'scientificSeparator',\n  unitName = 'unitName',\n  unitNarrowSymbol = 'unitNarrowSymbol',\n  unitSymbol = 'unitSymbol',\n}\n\nexport interface SignPattern {\n  positivePattern: string;\n  zeroPattern: string;\n  negativePattern: string;\n}\n\nexport type CompactSignPattern = Record<DecimalFormatNum, SignPattern>;\n\nexport interface NotationPattern {\n  standard: SignPattern;\n  scientific: SignPattern;\n  compactShort: CompactSignPattern;\n  compactLong: CompactSignPattern;\n}\n\nexport interface SignDisplayPattern {\n  auto: NotationPattern;\n  always: NotationPattern;\n  never: NotationPattern;\n  exceptZero: NotationPattern;\n}\n\nexport interface CurrencySignPattern {\n  standard: SignDisplayPattern;\n  accounting: SignDisplayPattern;\n}\n\nexport interface CurrencyPattern {\n  code: CurrencySignPattern;\n  symbol: CurrencySignPattern;\n  narrowSymbol: CurrencySignPattern;\n  name: CurrencySignPattern;\n}\n\nexport interface UnitPattern {\n  narrow: SignDisplayPattern;\n  short: SignDisplayPattern;\n  long: SignDisplayPattern;\n}\n\nexport interface NumberILD {\n  decimal: {\n    // string when there's only 1 plural from\n    compactShort?: Record<DecimalFormatNum, LDMLPluralRuleMap<string>>;\n    // string when there's only 1 plural from\n    compactLong?: Record<DecimalFormatNum, LDMLPluralRuleMap<string>>;\n  };\n  currency: {\n    // string when there's only 1 plural from\n    compactShort?: Record<DecimalFormatNum, LDMLPluralRuleMap<string>>;\n    // string when there's only 1 plural from\n    compactLong?: Record<DecimalFormatNum, LDMLPluralRuleMap<string>>;\n  };\n  symbols: {\n    decimal: string;\n    group: string;\n    list: string;\n    percentSign: string;\n    plusSign: string;\n    minusSign: string;\n    exponential: string;\n    superscriptingExponent: string;\n    perMille: string;\n    infinity: string;\n    nan: string;\n    timeSeparator: string;\n  };\n  currencySymbols: Record<\n    string,\n    {\n      currencySymbol: string;\n      currencyNarrowSymbol: string;\n      currencyName: LDMLPluralRuleMap<string>;\n    }\n  >;\n  unitSymbols: Record<\n    string,\n    {\n      unitSymbol: LDMLPluralRuleMap<string[]>;\n      unitNarrowSymbol: LDMLPluralRuleMap<string[]>;\n      unitName: LDMLPluralRuleMap<string[]>;\n    }\n  >;\n}\n\nexport interface NumberLocalePatternData {\n  decimal: SignDisplayPattern;\n  percent: SignDisplayPattern;\n  currency: Record<string, CurrencyPattern>;\n  unit: Record<string, UnitPattern>;\n}\n// https://github.com/tc39/proposal-unified-intl-numberformat/issues/26#issuecomment-467711707\nexport interface NumberInternalSlots {\n  nu: string[];\n  patterns: NumberLocalePatternData;\n  ild: NumberILD;\n}\n\nexport type NumberLocaleData = LocaleData<NumberInternalSlots>;\n\n// All fields are optional due to de-duping\nexport type RawNumberLocaleData = LocaleData<NumberLocaleInternalData>;\n\nexport interface NumberLocaleInternalData {\n  units: Record<string, UnitData>;\n  currencies: Record<string, CurrencyData>;\n  numbers: RawNumberData;\n  // Bc of relevantExtensionKeys in the spec\n  nu: string[];\n}\n\nexport interface UnitData {\n  displayName: string;\n  long: LDMLPluralRuleMap<RawUnitPattern>;\n  short: LDMLPluralRuleMap<RawUnitPattern>;\n  narrow: LDMLPluralRuleMap<RawUnitPattern>;\n}\n\nexport interface RawUnitPattern {\n  pattern: string;\n  // An array bc {0} can be in the middle,\n  // e.g: celsius in https://github.com/unicode-cldr/cldr-units-full/blob/master/main/ja/units.json\n  symbol: string[];\n}\n\nexport interface CurrencyData {\n  displayName: LDMLPluralRuleMap<string>;\n  symbol: string;\n  narrow: string;\n}\n\nexport type DecimalFormatNum =\n  | '1000'\n  | '10000'\n  | '100000'\n  | '1000000'\n  | '10000000'\n  | '100000000'\n  | '1000000000'\n  | '10000000000'\n  | '100000000000'\n  | '1000000000000'\n  | '10000000000000'\n  | '100000000000000';\nexport type NumberingSystem = string;\n\n/**\n * We only care about insertBetween bc we assume\n * `currencyMatch` & `surroundingMatch` are all the same\n *\n * @export\n * @interface CurrencySpacingData\n */\nexport interface CurrencySpacingData {\n  beforeInsertBetween: string;\n  afterInsertBetween: string;\n}\n\nexport interface RawCurrencyData {\n  currencySpacing: CurrencySpacingData;\n  standard: string;\n  accounting: string;\n  short?: Record<DecimalFormatNum, LDMLPluralRuleMap<string>>;\n  // IMPORTANT: We're making the assumption here that currency unitPattern\n  // are the same for all LDMLPluralRule\n  unitPattern: string;\n}\n\nexport interface SymbolsData {\n  decimal: string;\n  group: string;\n  list: string;\n  percentSign: string;\n  plusSign: string;\n  minusSign: string;\n  exponential: string;\n  superscriptingExponent: string;\n  perMille: string;\n  infinity: string;\n  nan: string;\n  timeSeparator: string;\n}\n\nexport interface RawNumberData {\n  nu: string[];\n  // numberingSystem -> pattern\n  symbols: Record<NumberingSystem, SymbolsData>;\n  // numberingSystem -> pattern\n  decimal: Record<\n    NumberingSystem,\n    {\n      long: Record<DecimalFormatNum, LDMLPluralRuleMap<string>>;\n      short: Record<DecimalFormatNum, LDMLPluralRuleMap<string>>;\n    }\n  >;\n  percent: Record<NumberingSystem, string>;\n  currency: Record<NumberingSystem, RawCurrencyData>;\n}\n\nexport type LDMLPluralRuleMap<T> = Omit<\n  Partial<Record<LDMLPluralRule, T>>,\n  'other'\n> & {\n  other: T;\n};\n"],"mappings":"AAiCA,WAAYA,iBAiBX;AAjBD,WAAYA,iBAAiB;EAC3B;EACAA,iBAAA,+BAA2B;EAC3BA,iBAAA,mCAA+B;EAC/BA,iBAAA,iCAA6B;EAC7BA,iBAAA,iCAA6B;EAC7BA,iBAAA,iDAA6C;EAC7CA,iBAAA,qCAAiC;EACjCA,iBAAA,2BAAuB;EACvBA,iBAAA,qBAAiB;EACjBA,iBAAA,+BAA2B;EAC3BA,iBAAA,yBAAqB;EACrBA,iBAAA,6CAAyC;EACzCA,iBAAA,+CAA2C;EAC3CA,iBAAA,yBAAqB;EACrBA,iBAAA,yCAAqC;EACrCA,iBAAA,6BAAyB;AAC3B,CAAC,EAjBWA,iBAAiB,KAAjBA,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}