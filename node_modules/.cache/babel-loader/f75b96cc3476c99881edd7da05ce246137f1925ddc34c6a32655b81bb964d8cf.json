{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = MapContainerFactory;\nexports.Attribution = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _reactMapGl = _interopRequireDefault(require(\"react-map-gl\"));\nvar _react2 = _interopRequireDefault(require(\"@deck.gl/react\"));\nvar _reselect = require(\"reselect\");\nvar _viewportMercatorProject = _interopRequireDefault(require(\"viewport-mercator-project\"));\nvar _mapPopover = _interopRequireDefault(require(\"./map/map-popover\"));\nvar _mapControl = _interopRequireDefault(require(\"./map/map-control\"));\nvar _styledComponents = require(\"./common/styled-components\");\nvar _editor = _interopRequireDefault(require(\"./editor/editor\"));\nvar _layers = require(\"@kepler.gl/layers\");\nvar _utils = require(\"@kepler.gl/utils\");\nvar _styles = require(\"@kepler.gl/styles\");\nvar _constants = require(\"@kepler.gl/constants\");\nvar _errorBoundary = _interopRequireDefault(require(\"./common/error-boundary\"));\nvar _localization = require(\"@kepler.gl/localization\");\nvar _core = require(\"@deck.gl/core\");\nvar _reducers = require(\"@kepler.gl/reducers\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/** @type {{[key: string]: React.CSSProperties}} */\nvar MAP_STYLE = {\n  container: {\n    display: 'inline-block',\n    position: 'relative',\n    width: '100%',\n    height: '100%'\n  },\n  top: {\n    position: 'absolute',\n    top: '0px',\n    pointerEvents: 'none',\n    width: '100%',\n    height: '100%'\n  }\n};\nvar LOCALE_CODES_ARRAY = Object.keys(_localization.LOCALE_CODES);\nvar MAPBOXGL_STYLE_UPDATE = 'style.load';\nvar MAPBOXGL_RENDER = 'render';\nvar nop = function nop() {};\nvar MapboxLogo = function MapboxLogo() {\n  return /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n    className: \"attrition-logo\"\n  }, \"Basemap by:\", /*#__PURE__*/_react[\"default\"].createElement(\"a\", {\n    className: \"mapboxgl-ctrl-logo\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    href: \"https://www.mapbox.com/\",\n    \"aria-label\": \"Mapbox logo\"\n  }));\n};\nvar Attribution = function Attribution(_ref) {\n  var _ref$showMapboxLogo = _ref.showMapboxLogo,\n    showMapboxLogo = _ref$showMapboxLogo === void 0 ? true : _ref$showMapboxLogo;\n  var isPalm = (0, _utils.hasMobileWidth)(_styles.breakPointValues);\n  var memoizedComponents = (0, _react.useMemo)(function () {\n    if (!showMapboxLogo) {\n      return /*#__PURE__*/_react[\"default\"].createElement(_styledComponents.StyledAttrbution, null, /*#__PURE__*/_react[\"default\"].createElement(\"a\", {\n        href: \"http://www.openstreetmap.org/copyright\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\"\n      }, \"\\xA9 OpenStreetMap\"));\n    }\n    return /*#__PURE__*/_react[\"default\"].createElement(_styledComponents.StyledAttrbution, null, isPalm ? /*#__PURE__*/_react[\"default\"].createElement(MapboxLogo, null) : null, /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n      className: \"attrition-link\"\n    }, /*#__PURE__*/_react[\"default\"].createElement(\"a\", {\n      href: \"https://kepler.gl/policy/\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\"\n    }, \"\\xA9 kepler.gl |\", ' '), /*#__PURE__*/_react[\"default\"].createElement(\"a\", {\n      href: \"https://www.mapbox.com/about/maps/\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\"\n    }, \"\\xA9 Mapbox |\", ' '), /*#__PURE__*/_react[\"default\"].createElement(\"a\", {\n      href: \"http://www.openstreetmap.org/copyright\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\"\n    }, \"\\xA9 OpenStreetMap |\", ' '), /*#__PURE__*/_react[\"default\"].createElement(\"a\", {\n      href: \"https://www.mapbox.com/map-feedback/\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\"\n    }, /*#__PURE__*/_react[\"default\"].createElement(\"strong\", null, \"Improve this map \"), !isPalm ? /*#__PURE__*/_react[\"default\"].createElement(\"strong\", null, \" | \") : null), !isPalm ? /*#__PURE__*/_react[\"default\"].createElement(MapboxLogo, null) : null));\n  }, [showMapboxLogo, isPalm]);\n  return memoizedComponents;\n};\nexports.Attribution = Attribution;\nMapContainerFactory.deps = [_mapPopover[\"default\"], _mapControl[\"default\"], _editor[\"default\"]];\nfunction MapContainerFactory(MapPopover, MapControl, Editor) {\n  var MapContainer = /*#__PURE__*/function (_Component) {\n    (0, _inherits2[\"default\"])(MapContainer, _Component);\n    var _super = _createSuper(MapContainer);\n    function MapContainer(_props) {\n      var _this;\n      (0, _classCallCheck2[\"default\"])(this, MapContainer);\n      _this = _super.call(this, _props);\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"displayName\", 'MapContainer');\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"state\", {\n        // Determines whether attribution should be visible based the result of loading the map style\n        showMapboxAttribution: true\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_deck\", null);\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_map\", null);\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_ref\", /*#__PURE__*/(0, _react.createRef)());\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_deckGLErrorsElapsed\", {});\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"previousLayers\", {// [layers.id]: mapboxLayerConfig\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_handleResize\", function (dimensions) {\n        var primary = _this.props.primary;\n        if (primary) {\n          var mapStateActions = _this.props.mapStateActions;\n          if (dimensions && dimensions.width > 0 && dimensions.height > 0) {\n            mapStateActions.updateMap(dimensions);\n          }\n        }\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"layersSelector\", function (props) {\n        return props.visState.layers;\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"layerDataSelector\", function (props) {\n        return props.visState.layerData;\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"splitMapSelector\", function (props) {\n        return props.visState.splitMaps;\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"splitMapIndexSelector\", function (props) {\n        return props.index;\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"mapLayersSelector\", (0, _reselect.createSelector)(_this.splitMapSelector, _this.splitMapIndexSelector, _utils.getMapLayersFromSplitMaps));\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"layerOrderSelector\", function (props) {\n        return props.visState.layerOrder;\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"layersToRenderSelector\", (0, _reselect.createSelector)(_this.layersSelector, _this.layerDataSelector, _this.mapLayersSelector, _reducers.prepareLayersToRender));\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"layersForDeckSelector\", (0, _reselect.createSelector)(_this.layersSelector, _this.layerDataSelector, _reducers.prepareLayersForDeck));\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"filtersSelector\", function (props) {\n        return props.visState.filters;\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"polygonFilters\", (0, _reselect.createSelector)(_this.filtersSelector, function (filters) {\n        return filters.filter(function (f) {\n          return f.type === _constants.FILTER_TYPES.polygon;\n        });\n      }));\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"mapboxLayersSelector\", (0, _reselect.createSelector)(_this.layersSelector, _this.layerDataSelector, _this.layerOrderSelector, _this.layersToRenderSelector, _layers.generateMapboxLayers));\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_onCloseMapPopover\", function () {\n        _this.props.visStateActions.onLayerClick(null);\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_onLayerSetDomain\", function (idx, colorDomain) {\n        _this.props.visStateActions.layerConfigChange(_this.props.visState.layers[idx], {\n          colorDomain: colorDomain\n        });\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_handleMapToggleLayer\", function (layerId) {\n        var _this$props = _this.props,\n          _this$props$index = _this$props.index,\n          mapIndex = _this$props$index === void 0 ? 0 : _this$props$index,\n          visStateActions = _this$props.visStateActions;\n        visStateActions.toggleLayerForMap(mapIndex, layerId);\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_onMapboxStyleUpdate\", function (update) {\n        // force refresh mapboxgl layers\n        _this.previousLayers = {};\n        _this._updateMapboxLayers();\n        if (update && update.style) {\n          // No attributions are needed if the style doesn't reference Mapbox sources\n          _this.setState({\n            showMapboxAttribution: (0, _utils.isStyleUsingMapboxTiles)(update.style)\n          });\n        }\n        if (typeof _this.props.onMapStyleLoaded === 'function') {\n          _this.props.onMapStyleLoaded(_this._map);\n        }\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_setMapboxMap\", function (mapbox) {\n        if (!_this._map && mapbox) {\n          _this._map = mapbox.getMap(); // i noticed in certain context we don't access the actual map element\n\n          if (!_this._map) {\n            return;\n          } // bind mapboxgl event listener\n\n          _this._map.on(MAPBOXGL_STYLE_UPDATE, _this._onMapboxStyleUpdate);\n          _this._map.on(MAPBOXGL_RENDER, function () {\n            if (typeof _this.props.onMapRender === 'function') {\n              _this.props.onMapRender(_this._map);\n            }\n          });\n        }\n        if (_this.props.getMapboxRef) {\n          // The parent component can gain access to our MapboxGlMap by\n          // providing this callback. Note that 'mapbox' will be null when the\n          // ref is unset (e.g. when a split map is closed).\n          _this.props.getMapboxRef(mapbox, _this.props.index);\n        }\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_onBeforeRender\", function (_ref2) {\n        var gl = _ref2.gl;\n        (0, _utils.setLayerBlending)(gl, _this.props.visState.layerBlending);\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_onDeckError\", function (error, layer) {\n        var errorMessage = \"An error in deck.gl: \".concat(error.message, \" in \").concat(layer.id);\n        var notificationId = \"\".concat(layer.id, \"-\").concat(error.message); // Throttle error notifications, as React doesn't like too many state changes from here.\n\n        var lastShown = _this._deckGLErrorsElapsed[notificationId];\n        if (!lastShown || lastShown < Date.now() - _constants.THROTTLE_NOTIFICATION_TIME) {\n          _this._deckGLErrorsElapsed[notificationId] = Date.now(); // Create new error notification or update existing one with same id.\n          // Update is required to preserve the order of notifications as they probably are going to \"jump\" based on order of errors.\n\n          var uiStateActions = _this.props.uiStateActions;\n          uiStateActions.addNotification((0, _utils.errorNotification)({\n            message: errorMessage,\n            id: notificationId\n          }));\n        }\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_onViewportChange\", function (viewState) {\n        (0, _utils.onViewPortChange)(viewState, _this.props.mapStateActions.updateMap, _this.props.onViewStateChange, _this.props.primary);\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_toggleMapControl\", function (panelId) {\n        var _this$props2 = _this.props,\n          index = _this$props2.index,\n          uiStateActions = _this$props2.uiStateActions;\n        uiStateActions.toggleMapControl(panelId, Number(index));\n      });\n      return _this;\n    }\n    (0, _createClass2[\"default\"])(MapContainer, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        if (!this._ref.current) {\n          return;\n        }\n        (0, _utils.observeDimensions)(this._ref.current, this._handleResize);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        // unbind mapboxgl event listener\n        if (this._map) {\n          var _this$_map, _this$_map2;\n          (_this$_map = this._map) === null || _this$_map === void 0 ? void 0 : _this$_map.off(MAPBOXGL_STYLE_UPDATE, nop);\n          (_this$_map2 = this._map) === null || _this$_map2 === void 0 ? void 0 : _this$_map2.off(MAPBOXGL_RENDER, nop);\n        }\n        if (!this._ref.current) {\n          return;\n        }\n        (0, _utils.unobserveDimensions)(this._ref.current);\n      }\n    }, {\n      key: \"_onDeckInitialized\",\n      value: function _onDeckInitialized(gl) {\n        if (this.props.onDeckInitialized) {\n          this.props.onDeckInitialized(this._deck, gl);\n        }\n      }\n    }, {\n      key: \"_renderMapPopover\",\n      value: /* component render functions */\n\n      /* eslint-disable complexity */\n      function _renderMapPopover() {\n        // TODO: move this into reducer so it can be tested\n        var _this$props3 = this.props,\n          mapState = _this$props3.mapState,\n          _this$props3$visState = _this$props3.visState,\n          hoverInfo = _this$props3$visState.hoverInfo,\n          clicked = _this$props3$visState.clicked,\n          datasets = _this$props3$visState.datasets,\n          interactionConfig = _this$props3$visState.interactionConfig,\n          layers = _this$props3$visState.layers,\n          _this$props3$visState2 = _this$props3$visState.mousePos,\n          mousePosition = _this$props3$visState2.mousePosition,\n          coordinate = _this$props3$visState2.coordinate,\n          pinned = _this$props3$visState2.pinned;\n        var layersToRender = this.layersToRenderSelector(this.props);\n        if (!mousePosition || !interactionConfig.tooltip) {\n          return null;\n        }\n        var layerHoverProp = (0, _reducers.getLayerHoverProp)({\n          interactionConfig: interactionConfig,\n          hoverInfo: hoverInfo,\n          layers: layers,\n          layersToRender: layersToRender,\n          datasets: datasets\n        });\n        var compareMode = interactionConfig.tooltip.config ? interactionConfig.tooltip.config.compareMode : false;\n        var pinnedPosition = {};\n        var layerPinnedProp = null;\n        if (pinned || clicked) {\n          // project lnglat to screen so that tooltip follows the object on zoom\n          var _viewport = new _viewportMercatorProject[\"default\"](mapState);\n          var lngLat = clicked ? clicked.coordinate : pinned.coordinate;\n          pinnedPosition = this._getHoverXY(_viewport, lngLat);\n          layerPinnedProp = (0, _reducers.getLayerHoverProp)({\n            interactionConfig: interactionConfig,\n            hoverInfo: clicked,\n            layers: layers,\n            layersToRender: layersToRender,\n            datasets: datasets\n          });\n          if (layerHoverProp && layerPinnedProp) {\n            layerHoverProp.primaryData = layerPinnedProp.data;\n            layerHoverProp.compareType = interactionConfig.tooltip.config.compareType;\n          }\n        }\n        var commonProp = {\n          onClose: this._onCloseMapPopover,\n          zoom: mapState.zoom,\n          container: this._deck ? this._deck.canvas : undefined\n        };\n        return /*#__PURE__*/_react[\"default\"].createElement(_errorBoundary[\"default\"], null, layerPinnedProp && /*#__PURE__*/_react[\"default\"].createElement(MapPopover, (0, _extends2[\"default\"])({}, pinnedPosition, commonProp, {\n          layerHoverProp: layerPinnedProp,\n          coordinate: interactionConfig.coordinate.enabled && (pinned || {}).coordinate,\n          frozen: true,\n          isBase: compareMode\n        })), layerHoverProp && (!layerPinnedProp || compareMode) && /*#__PURE__*/_react[\"default\"].createElement(MapPopover, (0, _extends2[\"default\"])({\n          x: mousePosition[0],\n          y: mousePosition[1]\n        }, commonProp, {\n          layerHoverProp: layerHoverProp,\n          frozen: false,\n          coordinate: interactionConfig.coordinate.enabled && coordinate\n        })));\n      }\n      /* eslint-enable complexity */\n    }, {\n      key: \"_getHoverXY\",\n      value: function _getHoverXY(viewport, lngLat) {\n        var screenCoord = !viewport || !lngLat ? null : viewport.project(lngLat);\n        return screenCoord && {\n          x: screenCoord[0],\n          y: screenCoord[1]\n        };\n      }\n    }, {\n      key: \"_renderDeckOverlay\",\n      value: function _renderDeckOverlay(layersForDeck) {\n        var _this2 = this;\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n          primaryMap: false\n        };\n        var _this$props4 = this.props,\n          mapState = _this$props4.mapState,\n          mapStyle = _this$props4.mapStyle,\n          visState = _this$props4.visState,\n          visStateActions = _this$props4.visStateActions,\n          mapboxApiAccessToken = _this$props4.mapboxApiAccessToken,\n          mapboxApiUrl = _this$props4.mapboxApiUrl,\n          deckGlProps = _this$props4.deckGlProps,\n          index = _this$props4.index;\n        var deckGlLayers = (0, _reducers.computeDeckLayers)({\n          visState: visState,\n          mapState: mapState,\n          mapStyle: mapStyle\n        }, {\n          mapIndex: index,\n          primaryMap: options.primaryMap,\n          mapboxApiAccessToken: mapboxApiAccessToken,\n          mapboxApiUrl: mapboxApiUrl,\n          layersForDeck: layersForDeck\n        }, this._onLayerSetDomain, deckGlProps);\n        var views = deckGlProps !== null && deckGlProps !== void 0 && deckGlProps.views ? deckGlProps === null || deckGlProps === void 0 ? void 0 : deckGlProps.views() : new _core.MapView({\n          legacyMeterSizes: true\n        });\n        return /*#__PURE__*/_react[\"default\"].createElement(_react2[\"default\"], (0, _extends2[\"default\"])({\n          id: \"default-deckgl-overlay\"\n        }, deckGlProps, {\n          views: views,\n          layers: deckGlLayers,\n          controller: true,\n          viewState: mapState,\n          onBeforeRender: this._onBeforeRender,\n          onHover: visStateActions.onLayerHover,\n          onClick: visStateActions.onLayerClick,\n          onError: this._onDeckError,\n          ref: function ref(comp) {\n            if (comp && comp.deck && !_this2._deck) {\n              _this2._deck = comp.deck;\n            }\n          },\n          onWebGLInitialized: function onWebGLInitialized(gl) {\n            return _this2._onDeckInitialized(gl);\n          }\n        }));\n      }\n    }, {\n      key: \"_updateMapboxLayers\",\n      value: function _updateMapboxLayers() {\n        var mapboxLayers = this.mapboxLayersSelector(this.props);\n        if (!Object.keys(mapboxLayers).length && !Object.keys(this.previousLayers).length) {\n          return;\n        }\n        (0, _layers.updateMapboxLayers)(this._map, mapboxLayers, this.previousLayers);\n        this.previousLayers = mapboxLayers;\n      }\n    }, {\n      key: \"_renderMapboxOverlays\",\n      value: function _renderMapboxOverlays() {\n        if (this._map && this._map.isStyleLoaded()) {\n          this._updateMapboxLayers();\n        }\n      }\n    }, {\n      key: \"_renderDrawEditor\",\n      value: function _renderDrawEditor() {\n        var _this$props5 = this.props,\n          visState = _this$props5.visState,\n          mapControls = _this$props5.mapControls,\n          visStateActions = _this$props5.visStateActions,\n          index = _this$props5.index;\n        var layers = visState.layers,\n          datasets = visState.datasets,\n          editor = visState.editor;\n        var isEdit = mapControls.mapDraw ? mapControls.mapDraw.active : false;\n        var layersToRender = this.layersToRenderSelector(this.props);\n        return /*#__PURE__*/_react[\"default\"].createElement(Editor, {\n          index: index,\n          datasets: datasets,\n          editor: editor,\n          filters: this.polygonFilters(this.props),\n          isEnabled: isEdit,\n          layers: layers,\n          layersToRender: layersToRender,\n          onDeleteFeature: visStateActions.deleteFeature,\n          onSelect: visStateActions.setSelectedFeature,\n          onUpdate: visStateActions.setFeatures,\n          onTogglePolygonFilter: visStateActions.setPolygonFilterLayer,\n          style: {\n            pointerEvents: isEdit ? 'all' : 'none',\n            position: 'absolute',\n            display: editor.visible ? 'block' : 'none'\n          }\n        });\n      }\n    }, {\n      key: \"_renderMap\",\n      value: /* eslint-disable complexity */\n      function _renderMap() {\n        var _mapStyle$mapStyles;\n        var _this$props6 = this.props,\n          visState = _this$props6.visState,\n          mapState = _this$props6.mapState,\n          mapStyle = _this$props6.mapStyle,\n          mapStateActions = _this$props6.mapStateActions,\n          _this$props6$MapCompo = _this$props6.MapComponent,\n          MapComponent = _this$props6$MapCompo === void 0 ? _reactMapGl[\"default\"] : _this$props6$MapCompo,\n          mapboxApiAccessToken = _this$props6.mapboxApiAccessToken,\n          mapboxApiUrl = _this$props6.mapboxApiUrl,\n          mapControls = _this$props6.mapControls,\n          isExport = _this$props6.isExport,\n          locale = _this$props6.locale,\n          uiStateActions = _this$props6.uiStateActions,\n          visStateActions = _this$props6.visStateActions,\n          index = _this$props6.index,\n          primary = _this$props6.primary,\n          bottomMapContainerProps = _this$props6.bottomMapContainerProps,\n          topMapContainerProps = _this$props6.topMapContainerProps;\n        var layers = visState.layers,\n          datasets = visState.datasets,\n          editor = visState.editor,\n          interactionConfig = visState.interactionConfig,\n          hoverInfo = visState.hoverInfo;\n        var layersToRender = this.layersToRenderSelector(this.props);\n        var layersForDeck = this.layersForDeckSelector(this.props); // Current style can be a custom style, from which we pull the mapbox API acccess token\n\n        var currentStyle = (_mapStyle$mapStyles = mapStyle.mapStyles) === null || _mapStyle$mapStyles === void 0 ? void 0 : _mapStyle$mapStyles[mapStyle.styleType];\n        var mapProps = _objectSpread(_objectSpread({}, mapState), {}, {\n          width: '100%',\n          height: '100%',\n          preserveDrawingBuffer: true,\n          mapboxApiAccessToken: (currentStyle === null || currentStyle === void 0 ? void 0 : currentStyle.accessToken) || mapboxApiAccessToken,\n          mapboxApiUrl: mapboxApiUrl,\n          onViewportChange: this._onViewportChange,\n          transformRequest: _utils.transformRequest\n        });\n        var hasGeocoderLayer = Boolean(layers.find(function (l) {\n          return l.id === _constants.GEOCODER_LAYER_ID;\n        }));\n        var isSplit = Boolean(mapState.isSplit);\n        return /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, /*#__PURE__*/_react[\"default\"].createElement(MapControl, {\n          datasets: datasets,\n          availableLocales: LOCALE_CODES_ARRAY,\n          dragRotate: mapState.dragRotate,\n          isSplit: isSplit,\n          primary: primary,\n          isExport: isExport,\n          layers: layers,\n          layersToRender: layersToRender,\n          mapIndex: index,\n          mapControls: mapControls,\n          readOnly: this.props.readOnly,\n          scale: mapState.scale || 1,\n          top: interactionConfig.geocoder && interactionConfig.geocoder.enabled ? 52 : 0,\n          editor: editor,\n          locale: locale,\n          onTogglePerspective: mapStateActions.togglePerspective,\n          onToggleSplitMap: mapStateActions.toggleSplitMap,\n          onMapToggleLayer: this._handleMapToggleLayer,\n          onToggleMapControl: this._toggleMapControl,\n          onSetEditorMode: visStateActions.setEditorMode,\n          onSetLocale: uiStateActions.setLocale,\n          onToggleEditorVisibility: visStateActions.toggleEditorVisibility,\n          mapHeight: mapState.height\n        }), /*#__PURE__*/_react[\"default\"].createElement(MapComponent, (0, _extends2[\"default\"])({\n          key: \"bottom\"\n        }, mapProps, {\n          mapStyle: mapStyle.bottomMapStyle\n        }, bottomMapContainerProps, {\n          ref: this._setMapboxMap,\n          getCursor: hoverInfo ? function () {\n            return 'pointer';\n          } : undefined,\n          onMouseMove: this.props.visStateActions.onMouseMove\n        }), this._renderDeckOverlay(layersForDeck, {\n          primaryMap: true\n        }), this._renderMapboxOverlays(), this._renderDrawEditor()), mapStyle.topMapStyle || hasGeocoderLayer ? /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n          style: MAP_STYLE.top\n        }, /*#__PURE__*/_react[\"default\"].createElement(MapComponent, (0, _extends2[\"default\"])({\n          key: \"top\"\n        }, mapProps, {\n          mapStyle: mapStyle.topMapStyle\n        }, topMapContainerProps), this._renderDeckOverlay((0, _defineProperty2[\"default\"])({}, _constants.GEOCODER_LAYER_ID, hasGeocoderLayer)))) : null, this._renderMapPopover(), !isSplit || index === 1 ? /*#__PURE__*/_react[\"default\"].createElement(Attribution, {\n          showMapboxLogo: this.state.showMapboxAttribution\n        }) : null);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var mapStyle = this.props.mapStyle;\n        return /*#__PURE__*/_react[\"default\"].createElement(_styledComponents.StyledMapContainer, {\n          ref: this._ref,\n          style: MAP_STYLE.container\n        }, mapStyle.bottomMapStyle && this._renderMap());\n      }\n    }]);\n    return MapContainer;\n  }(_react.Component);\n  (0, _defineProperty2[\"default\"])(MapContainer, \"defaultProps\", {\n    MapComponent: _reactMapGl[\"default\"],\n    deckGlProps: {},\n    index: 0,\n    primary: true\n  });\n  return MapContainer;\n}","map":{"version":3,"names":["exports","Attribution","_extends2","_interopRequireDefault","require","_classCallCheck2","_createClass2","_assertThisInitialized2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_defineProperty2","_react","_interopRequireWildcard","_reactMapGl","_react2","_reselect","_viewportMercatorProject","_mapPopover","_mapControl","_styles","_constants","_errorBoundary","_localization","_core","_reducers","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","MAPBOXGL_RENDER","sham","Proxy","Boolean","prototype","valueOf","call","e","container","display","position","width","height","top","pointerEvents","LOCALE_CODES_ARRAY","LOCALE_CODES","MAPBOXGL_STYLE_UPDATE","nop","MapboxLogo","createElement","className","rel","href","_ref","_ref$showMapboxLogo","showMapboxLogo","isPalm","_utils","hasMobileWidth","breakPointValues","memoizedComponents","useMemo","_styledComponents","StyledAttrbution","MapContainerFactory","deps","_editor","MapPopover","MapControl","Editor","MapContainer","_Component","_props","_this","_super","showMapboxAttribution","createRef","dimensions","primary","props","mapStateActions","updateMap","visState","layers","layerData","splitMaps","index","createSelector","splitMapSelector","splitMapIndexSelector","getMapLayersFromSplitMaps","layerOrder","layersSelector","layerDataSelector","mapLayersSelector","prepareLayersToRender","prepareLayersForDeck","filters","filtersSelector","f","type","FILTER_TYPES","polygon","layerOrderSelector","layersToRenderSelector","_layers","generateMapboxLayers","visStateActions","onLayerClick","idx","colorDomain","layerConfigChange","layerId","_this$props","_this$props$index","mapIndex","toggleLayerForMap","previousLayers","update","style","setState","isStyleUsingMapboxTiles","onMapStyleLoaded","mapbox","_map","getMap","on","_onMapboxStyleUpdate","onMapRender","getMapboxRef","_ref2","gl","setLayerBlending","layerBlending","error","layer","errorMessage","concat","message","id","notificationId","lastShown","_deckGLErrorsElapsed","Date","now","THROTTLE_NOTIFICATION_TIME","uiStateActions","addNotification","errorNotification","viewState","onViewPortChange","onViewStateChange","panelId","_this$props2","value","componentDidMount","observeDimensions","current","_handleResize","componentWillUnmount","_this$_map","_this$_map2","off","unobserveDimensions","_onDeckInitialized","onDeckInitialized","_deck","_renderMapPopover","layerHoverProp","_this$props3","mapState","_this$props3$visState","hoverInfo","clicked","datasets","interactionConfig","mousePosition","_this$props3$visState2","coordinate","pinned","tooltip","getLayerHoverProp","compareMode","config","pinnedPosition","layerPinnedProp","_viewport","lngLat","_getHoverXY","layersToRender","primaryData","data","compareType","onClose","_onCloseMapPopover","zoom","canvas","undefined","commonProp","enabled","frozen","isBase","x","y","mapboxApiAccessToken","viewport","screenCoord","project","_renderDeckOverlay","layersForDeck","_this2","options","primaryMap","_this$props4","mapStyle","mapboxApiUrl","deckGlProps","deckGlLayers","computeDeckLayers","_onLayerSetDomain","views","MapView","legacyMeterSizes","onBeforeRender","_onBeforeRender","onHover","onLayerHover","onError","_onDeckError","ref","comp","deck","onWebGLInitialized","isStyleLoaded","_updateMapboxLayers","mapboxLayers","mapboxLayersSelector","updateMapboxLayers","_renderMapboxOverlays","_renderDrawEditor","_this$props5","mapControls","editor","isEdit","mapDraw","active","polygonFilters","onDeleteFeature","deleteFeature","onSelect","setSelectedFeature","onUpdate","setFeatures","onTogglePolygonFilter","setPolygonFilterLayer","visible","_renderMap","_mapStyle$mapStyles","_this$props6","MapComponent","_this$props6$MapCompo","isExport","locale","bottomMapContainerProps","layersForDeckSelector","currentStyle","mapStyles","styleType","mapProps","preserveDrawingBuffer","accessToken","onViewportChange","_onViewportChange","transformRequest","hasGeocoderLayer","find","l","GEOCODER_LAYER_ID","isSplit","Fragment","availableLocales","dragRotate","readOnly","scale","geocoder","onTogglePerspective","togglePerspective","onToggleSplitMap","toggleSplitMap","onMapToggleLayer","_handleMapToggleLayer","onToggleMapControl","_toggleMapControl","onSetEditorMode","setEditorMode","onSetLocale","setLocale","onToggleEditorVisibility","toggleEditorVisibility","mapHeight","bottomMapStyle","_setMapboxMap","getCursor","onMouseMove","topMapStyle","MAP_STYLE","topMapContainerProps","state"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/components/src/map-container.tsx"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// libraries\nimport React, {Component, createRef, useMemo} from 'react';\nimport MapboxGLMap, {MapRef} from 'react-map-gl';\nimport DeckGL from '@deck.gl/react';\nimport {createSelector, Selector} from 'reselect';\nimport WebMercatorViewport from 'viewport-mercator-project';\nimport mapboxgl from 'mapbox-gl';\n\nimport {VisStateActions, MapStateActions, UIStateActions} from '@kepler.gl/actions';\n\n// components\nimport MapPopoverFactory from './map/map-popover';\nimport MapControlFactory from './map/map-control';\nimport {StyledMapContainer, StyledAttrbution} from './common/styled-components';\n\nimport EditorFactory from './editor/editor';\n\n// utils\nimport {\n  generateMapboxLayers,\n  updateMapboxLayers,\n  LayerBaseConfig,\n  VisualChannelDomain\n} from '@kepler.gl/layers';\nimport {MapState, MapControls, Viewport, SplitMap, SplitMapLayers} from '@kepler.gl/types';\nimport {\n  errorNotification,\n  setLayerBlending,\n  isStyleUsingMapboxTiles,\n  transformRequest,\n  observeDimensions,\n  unobserveDimensions,\n  hasMobileWidth,\n  getMapLayersFromSplitMaps,\n  onViewPortChange\n} from '@kepler.gl/utils';\nimport {breakPointValues} from '@kepler.gl/styles';\n\n// default-settings\nimport {\n  FILTER_TYPES,\n  GEOCODER_LAYER_ID,\n  THROTTLE_NOTIFICATION_TIME\n} from '@kepler.gl/constants';\n\nimport ErrorBoundary from './common/error-boundary';\nimport {LOCALE_CODES} from '@kepler.gl/localization';\nimport {MapView} from '@deck.gl/core';\nimport {\n  MapStyle,\n  computeDeckLayers,\n  getLayerHoverProp,\n  LayerHoverProp,\n  prepareLayersForDeck,\n  prepareLayersToRender,\n  LayersToRender\n} from '@kepler.gl/reducers';\nimport {VisState} from '@kepler.gl/schemas';\n\n/** @type {{[key: string]: React.CSSProperties}} */\nconst MAP_STYLE: {[key: string]: React.CSSProperties} = {\n  container: {\n    display: 'inline-block',\n    position: 'relative',\n    width: '100%',\n    height: '100%'\n  },\n  top: {\n    position: 'absolute',\n    top: '0px',\n    pointerEvents: 'none',\n    width: '100%',\n    height: '100%'\n  }\n};\n\nconst LOCALE_CODES_ARRAY = Object.keys(LOCALE_CODES);\n\nconst MAPBOXGL_STYLE_UPDATE = 'style.load';\nconst MAPBOXGL_RENDER = 'render';\nconst nop = () => {};\n\nconst MapboxLogo = () => (\n  <div className=\"attrition-logo\">\n    Basemap by:\n    <a\n      className=\"mapboxgl-ctrl-logo\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      href=\"https://www.mapbox.com/\"\n      aria-label=\"Mapbox logo\"\n    />\n  </div>\n);\n\nexport const Attribution = ({showMapboxLogo = true}) => {\n  const isPalm = hasMobileWidth(breakPointValues);\n\n  const memoizedComponents = useMemo(() => {\n    if (!showMapboxLogo) {\n      return (\n        <StyledAttrbution>\n          <a\n            href=\"http://www.openstreetmap.org/copyright\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            © OpenStreetMap\n          </a>\n        </StyledAttrbution>\n      );\n    }\n\n    return (\n      <StyledAttrbution>\n        {isPalm ? <MapboxLogo /> : null}\n        <div className=\"attrition-link\">\n          <a href=\"https://kepler.gl/policy/\" target=\"_blank\" rel=\"noopener noreferrer\">\n            © kepler.gl |{' '}\n          </a>\n          <a href=\"https://www.mapbox.com/about/maps/\" target=\"_blank\" rel=\"noopener noreferrer\">\n            © Mapbox |{' '}\n          </a>\n          <a\n            href=\"http://www.openstreetmap.org/copyright\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            © OpenStreetMap |{' '}\n          </a>\n          <a href=\"https://www.mapbox.com/map-feedback/\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <strong>Improve this map </strong>\n            {!isPalm ? <strong> | </strong> : null}\n          </a>\n          {!isPalm ? <MapboxLogo /> : null}\n        </div>\n      </StyledAttrbution>\n    );\n  }, [showMapboxLogo, isPalm]);\n\n  return memoizedComponents;\n};\n\nMapContainerFactory.deps = [MapPopoverFactory, MapControlFactory, EditorFactory];\n\ntype MapboxStyle = string | object | undefined;\ntype PropSelector<R> = Selector<MapContainerProps, R>;\n\ninterface MapContainerProps {\n  visState: VisState;\n  mapState: MapState;\n  mapControls: MapControls;\n  mapStyle: {bottomMapStyle?: MapboxStyle; topMapStyle?: MapboxStyle} & MapStyle;\n  mapboxApiAccessToken: string;\n  mapboxApiUrl: string;\n  visStateActions: typeof VisStateActions;\n  mapStateActions: typeof MapStateActions;\n  uiStateActions: typeof UIStateActions;\n\n  // optional\n  primary?: boolean; // primary one will be reporting its size to appState\n  readOnly?: boolean;\n  isExport?: boolean;\n  onMapToggleLayer?: Function;\n  onMapStyleLoaded?: Function;\n  onMapRender?: Function;\n  getMapboxRef?: (mapbox?: MapRef | null, index?: number) => void;\n  index?: number;\n\n  locale?: any;\n  editor?: any;\n  MapComponent?: typeof MapboxGLMap;\n  deckGlProps?: any;\n  onDeckInitialized?: (a: any, b: any) => void;\n  onViewStateChange?: (viewport: Viewport) => void;\n\n  topMapContainerProps: any;\n  bottomMapContainerProps: any;\n}\n\nexport default function MapContainerFactory(\n  MapPopover,\n  MapControl,\n  Editor\n): React.ComponentType<MapContainerProps> {\n  class MapContainer extends Component<MapContainerProps> {\n    displayName = 'MapContainer';\n    static defaultProps = {\n      MapComponent: MapboxGLMap,\n      deckGlProps: {},\n      index: 0,\n      primary: true\n    };\n\n    state = {\n      // Determines whether attribution should be visible based the result of loading the map style\n      showMapboxAttribution: true\n    };\n\n    constructor(props) {\n      super(props);\n    }\n\n    componentDidMount() {\n      if (!this._ref.current) {\n        return;\n      }\n      observeDimensions(this._ref.current, this._handleResize);\n    }\n\n    componentWillUnmount() {\n      // unbind mapboxgl event listener\n      if (this._map) {\n        this._map?.off(MAPBOXGL_STYLE_UPDATE, nop);\n        this._map?.off(MAPBOXGL_RENDER, nop);\n      }\n      if (!this._ref.current) {\n        return;\n      }\n      unobserveDimensions(this._ref.current);\n    }\n\n    _deck: any = null;\n    _map: mapboxgl.Map | null = null;\n    _ref = createRef<HTMLDivElement>();\n    _deckGLErrorsElapsed: {[id: string]: number} = {};\n\n    previousLayers = {\n      // [layers.id]: mapboxLayerConfig\n    };\n\n    _handleResize = dimensions => {\n      const {primary} = this.props;\n      if (primary) {\n        const {mapStateActions} = this.props;\n        if (dimensions && dimensions.width > 0 && dimensions.height > 0) {\n          mapStateActions.updateMap(dimensions);\n        }\n      }\n    };\n\n    layersSelector: PropSelector<VisState['layers']> = props => props.visState.layers;\n    layerDataSelector: PropSelector<VisState['layers']> = props => props.visState.layerData;\n    splitMapSelector: PropSelector<SplitMap[]> = props => props.visState.splitMaps;\n    splitMapIndexSelector: PropSelector<number | undefined> = props => props.index;\n    mapLayersSelector: PropSelector<SplitMapLayers | null | undefined> = createSelector(\n      this.splitMapSelector,\n      this.splitMapIndexSelector,\n      getMapLayersFromSplitMaps\n    );\n    layerOrderSelector: PropSelector<VisState['layerOrder']> = props => props.visState.layerOrder;\n    layersToRenderSelector: PropSelector<LayersToRender> = createSelector(\n      this.layersSelector,\n      this.layerDataSelector,\n      this.mapLayersSelector,\n      prepareLayersToRender\n    );\n    layersForDeckSelector = createSelector(\n      this.layersSelector,\n      this.layerDataSelector,\n      prepareLayersForDeck\n    );\n    filtersSelector = props => props.visState.filters;\n    polygonFilters = createSelector(this.filtersSelector, filters =>\n      filters.filter(f => f.type === FILTER_TYPES.polygon)\n    );\n\n    mapboxLayersSelector = createSelector(\n      this.layersSelector,\n      this.layerDataSelector,\n      this.layerOrderSelector,\n      this.layersToRenderSelector,\n      generateMapboxLayers\n    );\n\n    /* component private functions */\n    _onCloseMapPopover = () => {\n      this.props.visStateActions.onLayerClick(null);\n    };\n\n    _onLayerSetDomain = (idx: number, colorDomain: VisualChannelDomain) => {\n      this.props.visStateActions.layerConfigChange(this.props.visState.layers[idx], {\n        colorDomain\n      } as Partial<LayerBaseConfig>);\n    };\n\n    _handleMapToggleLayer = layerId => {\n      const {index: mapIndex = 0, visStateActions} = this.props;\n      visStateActions.toggleLayerForMap(mapIndex, layerId);\n    };\n\n    _onMapboxStyleUpdate = update => {\n      // force refresh mapboxgl layers\n      this.previousLayers = {};\n      this._updateMapboxLayers();\n\n      if (update && update.style) {\n        // No attributions are needed if the style doesn't reference Mapbox sources\n        this.setState({showMapboxAttribution: isStyleUsingMapboxTiles(update.style)});\n      }\n\n      if (typeof this.props.onMapStyleLoaded === 'function') {\n        this.props.onMapStyleLoaded(this._map);\n      }\n    };\n\n    _setMapboxMap: React.Ref<MapRef> = mapbox => {\n      if (!this._map && mapbox) {\n        this._map = mapbox.getMap();\n        // i noticed in certain context we don't access the actual map element\n        if (!this._map) {\n          return;\n        }\n        // bind mapboxgl event listener\n        this._map.on(MAPBOXGL_STYLE_UPDATE, this._onMapboxStyleUpdate);\n\n        this._map.on(MAPBOXGL_RENDER, () => {\n          if (typeof this.props.onMapRender === 'function') {\n            this.props.onMapRender(this._map);\n          }\n        });\n      }\n\n      if (this.props.getMapboxRef) {\n        // The parent component can gain access to our MapboxGlMap by\n        // providing this callback. Note that 'mapbox' will be null when the\n        // ref is unset (e.g. when a split map is closed).\n        this.props.getMapboxRef(mapbox, this.props.index);\n      }\n    };\n\n    _onDeckInitialized(gl) {\n      if (this.props.onDeckInitialized) {\n        this.props.onDeckInitialized(this._deck, gl);\n      }\n    }\n\n    _onBeforeRender = ({gl}) => {\n      setLayerBlending(gl, this.props.visState.layerBlending);\n    };\n\n    _onDeckError = (error, layer) => {\n      const errorMessage = `An error in deck.gl: ${error.message} in ${layer.id}`;\n      const notificationId = `${layer.id}-${error.message}`;\n\n      // Throttle error notifications, as React doesn't like too many state changes from here.\n      const lastShown = this._deckGLErrorsElapsed[notificationId];\n      if (!lastShown || lastShown < Date.now() - THROTTLE_NOTIFICATION_TIME) {\n        this._deckGLErrorsElapsed[notificationId] = Date.now();\n\n        // Create new error notification or update existing one with same id.\n        // Update is required to preserve the order of notifications as they probably are going to \"jump\" based on order of errors.\n        const {uiStateActions} = this.props;\n        uiStateActions.addNotification(\n          errorNotification({\n            message: errorMessage,\n            id: notificationId\n          })\n        );\n      }\n    };\n\n    /* component render functions */\n\n    /* eslint-disable complexity */\n    _renderMapPopover() {\n      // TODO: move this into reducer so it can be tested\n      const {\n        mapState,\n        visState: {\n          hoverInfo,\n          clicked,\n          datasets,\n          interactionConfig,\n          layers,\n          mousePos: {mousePosition, coordinate, pinned}\n        }\n      } = this.props;\n      const layersToRender = this.layersToRenderSelector(this.props);\n\n      if (!mousePosition || !interactionConfig.tooltip) {\n        return null;\n      }\n\n      const layerHoverProp = getLayerHoverProp({\n        interactionConfig,\n        hoverInfo,\n        layers,\n        layersToRender,\n        datasets\n      });\n\n      const compareMode = interactionConfig.tooltip.config\n        ? interactionConfig.tooltip.config.compareMode\n        : false;\n\n      let pinnedPosition = {};\n      let layerPinnedProp: LayerHoverProp | null = null;\n      if (pinned || clicked) {\n        // project lnglat to screen so that tooltip follows the object on zoom\n        const viewport = new WebMercatorViewport(mapState);\n        const lngLat = clicked ? clicked.coordinate : pinned.coordinate;\n        pinnedPosition = this._getHoverXY(viewport, lngLat);\n        layerPinnedProp = getLayerHoverProp({\n          interactionConfig,\n          hoverInfo: clicked,\n          layers,\n          layersToRender,\n          datasets\n        });\n        if (layerHoverProp && layerPinnedProp) {\n          layerHoverProp.primaryData = layerPinnedProp.data;\n          layerHoverProp.compareType = interactionConfig.tooltip.config.compareType;\n        }\n      }\n\n      const commonProp = {\n        onClose: this._onCloseMapPopover,\n        zoom: mapState.zoom,\n        container: this._deck ? this._deck.canvas : undefined\n      };\n\n      return (\n        <ErrorBoundary>\n          {layerPinnedProp && (\n            <MapPopover\n              {...pinnedPosition}\n              {...commonProp}\n              layerHoverProp={layerPinnedProp}\n              coordinate={interactionConfig.coordinate.enabled && (pinned || {}).coordinate}\n              frozen={true}\n              isBase={compareMode}\n            />\n          )}\n          {layerHoverProp && (!layerPinnedProp || compareMode) && (\n            <MapPopover\n              x={mousePosition[0]}\n              y={mousePosition[1]}\n              {...commonProp}\n              layerHoverProp={layerHoverProp}\n              frozen={false}\n              coordinate={interactionConfig.coordinate.enabled && coordinate}\n            />\n          )}\n        </ErrorBoundary>\n      );\n    }\n\n    /* eslint-enable complexity */\n\n    _getHoverXY(viewport, lngLat) {\n      const screenCoord = !viewport || !lngLat ? null : viewport.project(lngLat);\n      return screenCoord && {x: screenCoord[0], y: screenCoord[1]};\n    }\n\n    _renderDeckOverlay(layersForDeck, options = {primaryMap: false}) {\n      const {\n        mapState,\n        mapStyle,\n        visState,\n        visStateActions,\n        mapboxApiAccessToken,\n        mapboxApiUrl,\n        deckGlProps,\n        index\n      } = this.props;\n\n      const deckGlLayers = computeDeckLayers(\n        {\n          visState,\n          mapState,\n          mapStyle\n        },\n        {\n          mapIndex: index,\n          primaryMap: options.primaryMap,\n          mapboxApiAccessToken,\n          mapboxApiUrl,\n          layersForDeck\n        },\n        this._onLayerSetDomain,\n        deckGlProps\n      );\n\n      const views = deckGlProps?.views\n        ? deckGlProps?.views()\n        : new MapView({legacyMeterSizes: true});\n\n      return (\n        <DeckGL\n          id=\"default-deckgl-overlay\"\n          {...deckGlProps}\n          views={views}\n          layers={deckGlLayers}\n          controller={true}\n          viewState={mapState}\n          onBeforeRender={this._onBeforeRender}\n          onHover={visStateActions.onLayerHover}\n          onClick={visStateActions.onLayerClick}\n          onError={this._onDeckError}\n          ref={comp => {\n            if (comp && comp.deck && !this._deck) {\n              this._deck = comp.deck;\n            }\n          }}\n          onWebGLInitialized={gl => this._onDeckInitialized(gl)}\n        />\n      );\n    }\n\n    _updateMapboxLayers() {\n      const mapboxLayers = this.mapboxLayersSelector(this.props);\n      if (!Object.keys(mapboxLayers).length && !Object.keys(this.previousLayers).length) {\n        return;\n      }\n\n      updateMapboxLayers(this._map, mapboxLayers, this.previousLayers);\n\n      this.previousLayers = mapboxLayers;\n    }\n\n    _renderMapboxOverlays() {\n      if (this._map && this._map.isStyleLoaded()) {\n        this._updateMapboxLayers();\n      }\n    }\n\n    _renderDrawEditor() {\n      const {visState, mapControls, visStateActions, index} = this.props;\n      const {layers, datasets, editor} = visState;\n      const isEdit = mapControls.mapDraw ? mapControls.mapDraw.active : false;\n      const layersToRender = this.layersToRenderSelector(this.props);\n\n      return (\n        <Editor\n          index={index}\n          datasets={datasets}\n          editor={editor}\n          filters={this.polygonFilters(this.props)}\n          isEnabled={isEdit}\n          layers={layers}\n          layersToRender={layersToRender}\n          onDeleteFeature={visStateActions.deleteFeature}\n          onSelect={visStateActions.setSelectedFeature}\n          onUpdate={visStateActions.setFeatures}\n          onTogglePolygonFilter={visStateActions.setPolygonFilterLayer}\n          style={{\n            pointerEvents: isEdit ? 'all' : 'none',\n            position: 'absolute',\n            display: editor.visible ? 'block' : 'none'\n          }}\n        />\n      );\n    }\n\n    _onViewportChange = viewState => {\n      onViewPortChange(\n        viewState,\n        this.props.mapStateActions.updateMap,\n        this.props.onViewStateChange,\n        this.props.primary\n      );\n    };\n\n    _toggleMapControl = panelId => {\n      const {index, uiStateActions} = this.props;\n\n      uiStateActions.toggleMapControl(panelId, Number(index));\n    };\n\n    /* eslint-disable complexity */\n    _renderMap() {\n      const {\n        visState,\n        mapState,\n        mapStyle,\n        mapStateActions,\n        MapComponent = MapboxGLMap,\n        mapboxApiAccessToken,\n        mapboxApiUrl,\n        mapControls,\n        isExport,\n        locale,\n        uiStateActions,\n        visStateActions,\n        index,\n        primary,\n        bottomMapContainerProps,\n        topMapContainerProps\n      } = this.props;\n\n      const {layers, datasets, editor, interactionConfig, hoverInfo} = visState;\n\n      const layersToRender = this.layersToRenderSelector(this.props);\n      const layersForDeck = this.layersForDeckSelector(this.props);\n\n      // Current style can be a custom style, from which we pull the mapbox API acccess token\n      const currentStyle = mapStyle.mapStyles?.[mapStyle.styleType];\n      const mapProps = {\n        ...mapState,\n        width: '100%',\n        height: '100%',\n        preserveDrawingBuffer: true,\n        mapboxApiAccessToken: currentStyle?.accessToken || mapboxApiAccessToken,\n        mapboxApiUrl,\n        onViewportChange: this._onViewportChange,\n        transformRequest\n      };\n\n      const hasGeocoderLayer = Boolean(layers.find(l => l.id === GEOCODER_LAYER_ID));\n      const isSplit = Boolean(mapState.isSplit);\n\n      return (\n        <>\n          <MapControl\n            datasets={datasets}\n            availableLocales={LOCALE_CODES_ARRAY}\n            dragRotate={mapState.dragRotate}\n            isSplit={isSplit}\n            primary={primary}\n            isExport={isExport}\n            layers={layers}\n            layersToRender={layersToRender}\n            mapIndex={index}\n            mapControls={mapControls}\n            readOnly={this.props.readOnly}\n            scale={mapState.scale || 1}\n            top={interactionConfig.geocoder && interactionConfig.geocoder.enabled ? 52 : 0}\n            editor={editor}\n            locale={locale}\n            onTogglePerspective={mapStateActions.togglePerspective}\n            onToggleSplitMap={mapStateActions.toggleSplitMap}\n            onMapToggleLayer={this._handleMapToggleLayer}\n            onToggleMapControl={this._toggleMapControl}\n            onSetEditorMode={visStateActions.setEditorMode}\n            onSetLocale={uiStateActions.setLocale}\n            onToggleEditorVisibility={visStateActions.toggleEditorVisibility}\n            mapHeight={mapState.height}\n          />\n          <MapComponent\n            key=\"bottom\"\n            {...mapProps}\n            mapStyle={mapStyle.bottomMapStyle}\n            {...bottomMapContainerProps}\n            ref={this._setMapboxMap}\n            getCursor={hoverInfo ? () => 'pointer' : undefined}\n            onMouseMove={this.props.visStateActions.onMouseMove}\n          >\n            {this._renderDeckOverlay(layersForDeck, {primaryMap: true})}\n            {this._renderMapboxOverlays()}\n            {this._renderDrawEditor()}\n          </MapComponent>\n          {mapStyle.topMapStyle || hasGeocoderLayer ? (\n            <div style={MAP_STYLE.top}>\n              <MapComponent\n                key=\"top\"\n                {...mapProps}\n                mapStyle={mapStyle.topMapStyle}\n                {...topMapContainerProps}\n              >\n                {this._renderDeckOverlay({[GEOCODER_LAYER_ID]: hasGeocoderLayer})}\n              </MapComponent>\n            </div>\n          ) : null}\n          {this._renderMapPopover()}\n          {!isSplit || index === 1 ? (\n            <Attribution showMapboxLogo={this.state.showMapboxAttribution} />\n          ) : null}\n        </>\n      );\n    }\n\n    render() {\n      const {mapStyle} = this.props;\n      return (\n        <StyledMapContainer ref={this._ref} style={MAP_STYLE.container}>\n          {mapStyle.bottomMapStyle && this._renderMap()}\n        </StyledMapContainer>\n      );\n    }\n  }\n\n  return MapContainer;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}