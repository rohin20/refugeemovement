{"ast":null,"code":"import _slicedToArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { assertWebGL2Context, withParameters } from '@luma.gl/gltools';\nimport { assert } from '../utils/assert';\nvar GL_DEPTH_BUFFER_BIT = 0x00000100;\nvar GL_STENCIL_BUFFER_BIT = 0x00000400;\nvar GL_COLOR_BUFFER_BIT = 0x00004000;\nvar GL_COLOR = 0x1800;\nvar GL_DEPTH = 0x1801;\nvar GL_STENCIL = 0x1802;\nvar GL_DEPTH_STENCIL = 0x84f9;\nvar ERR_ARGUMENTS = 'clear: bad arguments';\nexport function clear(gl) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref$framebuffer = _ref.framebuffer,\n    framebuffer = _ref$framebuffer === void 0 ? null : _ref$framebuffer,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? null : _ref$color,\n    _ref$depth = _ref.depth,\n    depth = _ref$depth === void 0 ? null : _ref$depth,\n    _ref$stencil = _ref.stencil,\n    stencil = _ref$stencil === void 0 ? null : _ref$stencil;\n  var parameters = {};\n  if (framebuffer) {\n    parameters.framebuffer = framebuffer;\n  }\n  var clearFlags = 0;\n  if (color) {\n    clearFlags |= GL_COLOR_BUFFER_BIT;\n    if (color !== true) {\n      parameters.clearColor = color;\n    }\n  }\n  if (depth) {\n    clearFlags |= GL_DEPTH_BUFFER_BIT;\n    if (depth !== true) {\n      parameters.clearDepth = depth;\n    }\n  }\n  if (stencil) {\n    clearFlags |= GL_STENCIL_BUFFER_BIT;\n    if (depth !== true) {\n      parameters.clearStencil = depth;\n    }\n  }\n  assert(clearFlags !== 0, ERR_ARGUMENTS);\n  withParameters(gl, parameters, function () {\n    gl.clear(clearFlags);\n  });\n}\nexport function clearBuffer(gl) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref2$framebuffer = _ref2.framebuffer,\n    framebuffer = _ref2$framebuffer === void 0 ? null : _ref2$framebuffer,\n    _ref2$buffer = _ref2.buffer,\n    buffer = _ref2$buffer === void 0 ? GL_COLOR : _ref2$buffer,\n    _ref2$drawBuffer = _ref2.drawBuffer,\n    drawBuffer = _ref2$drawBuffer === void 0 ? 0 : _ref2$drawBuffer,\n    _ref2$value = _ref2.value,\n    value = _ref2$value === void 0 ? [0, 0, 0, 0] : _ref2$value;\n  assertWebGL2Context(gl);\n  withParameters(gl, {\n    framebuffer: framebuffer\n  }, function () {\n    switch (buffer) {\n      case GL_COLOR:\n        switch (value.constructor) {\n          case Int32Array:\n            gl.clearBufferiv(buffer, drawBuffer, value);\n            break;\n          case Uint32Array:\n            gl.clearBufferuiv(buffer, drawBuffer, value);\n            break;\n          case Float32Array:\n          default:\n            gl.clearBufferfv(buffer, drawBuffer, value);\n        }\n        break;\n      case GL_DEPTH:\n        gl.clearBufferfv(GL_DEPTH, 0, [value]);\n        break;\n      case GL_STENCIL:\n        gl.clearBufferiv(GL_STENCIL, 0, [value]);\n        break;\n      case GL_DEPTH_STENCIL:\n        var _value = _slicedToArray(value, 2),\n          depth = _value[0],\n          stencil = _value[1];\n        gl.clearBufferfi(GL_DEPTH_STENCIL, 0, depth, stencil);\n        break;\n      default:\n        assert(false, ERR_ARGUMENTS);\n    }\n  });\n}","map":{"version":3,"names":["assertWebGL2Context","withParameters","assert","GL_DEPTH_BUFFER_BIT","GL_STENCIL_BUFFER_BIT","GL_COLOR_BUFFER_BIT","GL_COLOR","GL_DEPTH","GL_STENCIL","GL_DEPTH_STENCIL","ERR_ARGUMENTS","clear","gl","_ref","arguments","length","undefined","_ref$framebuffer","framebuffer","_ref$color","color","_ref$depth","depth","_ref$stencil","stencil","parameters","clearFlags","clearColor","clearDepth","clearStencil","clearBuffer","_ref2","_ref2$framebuffer","_ref2$buffer","buffer","_ref2$drawBuffer","drawBuffer","_ref2$value","value","constructor","Int32Array","clearBufferiv","Uint32Array","clearBufferuiv","Float32Array","clearBufferfv","_value","_slicedToArray","clearBufferfi"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@luma.gl/webgl/src/classes/clear.js"],"sourcesContent":["import {assertWebGL2Context, withParameters} from '@luma.gl/gltools';\nimport {assert} from '../utils/assert';\n\n// Should collapse during minification\nconst GL_DEPTH_BUFFER_BIT = 0x00000100;\nconst GL_STENCIL_BUFFER_BIT = 0x00000400;\nconst GL_COLOR_BUFFER_BIT = 0x00004000;\n\nconst GL_COLOR = 0x1800;\nconst GL_DEPTH = 0x1801;\nconst GL_STENCIL = 0x1802;\nconst GL_DEPTH_STENCIL = 0x84f9;\n\n// Should disappear if asserts are removed\nconst ERR_ARGUMENTS = 'clear: bad arguments';\n\n// Optionally clears depth, color and stencil buffers\n/** @type {import('./clear').clear} */\nexport function clear(gl, {framebuffer = null, color = null, depth = null, stencil = null} = {}) {\n  const parameters = {};\n\n  if (framebuffer) {\n    parameters.framebuffer = framebuffer;\n  }\n\n  let clearFlags = 0;\n\n  if (color) {\n    clearFlags |= GL_COLOR_BUFFER_BIT;\n    if (color !== true) {\n      parameters.clearColor = color;\n    }\n  }\n\n  if (depth) {\n    clearFlags |= GL_DEPTH_BUFFER_BIT;\n    if (depth !== true) {\n      parameters.clearDepth = depth;\n    }\n  }\n\n  if (stencil) {\n    clearFlags |= GL_STENCIL_BUFFER_BIT;\n    if (depth !== true) {\n      parameters.clearStencil = depth;\n    }\n  }\n\n  assert(clearFlags !== 0, ERR_ARGUMENTS);\n\n  // Temporarily set any clear \"colors\" and call clear\n  withParameters(gl, parameters, () => {\n    gl.clear(clearFlags);\n  });\n}\n\n// WebGL2 - clear a specific drawing buffer\n/** @type {import('./clear').clearBuffer} */\nexport function clearBuffer(\n  gl,\n  {framebuffer = null, buffer = GL_COLOR, drawBuffer = 0, value = [0, 0, 0, 0]} = {}\n) {\n  assertWebGL2Context(gl);\n\n  withParameters(gl, {framebuffer}, () => {\n    // Method selection per OpenGL ES 3 docs\n    switch (buffer) {\n      case GL_COLOR:\n        switch (value.constructor) {\n          case Int32Array:\n            gl.clearBufferiv(buffer, drawBuffer, value);\n            break;\n          case Uint32Array:\n            gl.clearBufferuiv(buffer, drawBuffer, value);\n            break;\n          case Float32Array:\n          default:\n            gl.clearBufferfv(buffer, drawBuffer, value);\n        }\n        break;\n\n      case GL_DEPTH:\n        gl.clearBufferfv(GL_DEPTH, 0, [value]);\n        break;\n\n      case GL_STENCIL:\n        gl.clearBufferiv(GL_STENCIL, 0, [value]);\n        break;\n\n      case GL_DEPTH_STENCIL:\n        const [depth, stencil] = value;\n        gl.clearBufferfi(GL_DEPTH_STENCIL, 0, depth, stencil);\n        break;\n\n      default:\n        assert(false, ERR_ARGUMENTS);\n    }\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}