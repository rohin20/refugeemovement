{"ast":null,"code":"import _toConsumableArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { CompositeLayer, log } from '@deck.gl/core';\nimport { SimpleMeshLayer } from '@deck.gl/mesh-layers';\nimport { COORDINATE_SYSTEM } from '@deck.gl/core';\nimport { TerrainWorkerLoader } from '@loaders.gl/terrain';\nimport TileLayer from '../tile-layer/tile-layer';\nimport { urlType, getURLFromTemplate } from '../tile-layer/utils';\nvar DUMMY_DATA = [1];\nvar defaultProps = _objectSpread(_objectSpread({}, TileLayer.defaultProps), {}, {\n  elevationData: urlType,\n  texture: _objectSpread(_objectSpread({}, urlType), {}, {\n    optional: true\n  }),\n  meshMaxError: {\n    type: 'number',\n    value: 4.0\n  },\n  bounds: {\n    type: 'array',\n    value: null,\n    optional: true,\n    compare: true\n  },\n  color: {\n    type: 'color',\n    value: [255, 255, 255]\n  },\n  elevationDecoder: {\n    type: 'object',\n    value: {\n      rScaler: 1,\n      gScaler: 0,\n      bScaler: 0,\n      offset: 0\n    }\n  },\n  workerUrl: {\n    type: 'string',\n    value: null\n  },\n  wireframe: false,\n  material: true,\n  loaders: [TerrainWorkerLoader]\n});\nfunction urlTemplateToUpdateTrigger(template) {\n  if (Array.isArray(template)) {\n    return template.join(';');\n  }\n  return template || '';\n}\nvar TerrainLayer = /*#__PURE__*/function (_CompositeLayer) {\n  _inherits(TerrainLayer, _CompositeLayer);\n  var _super = _createSuper(TerrainLayer);\n  function TerrainLayer() {\n    var _this;\n    _classCallCheck(this, TerrainLayer);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"state\", void 0);\n    return _this;\n  }\n  _createClass(TerrainLayer, [{\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n        oldProps = _ref.oldProps;\n      var elevationDataChanged = props.elevationData !== oldProps.elevationData;\n      if (elevationDataChanged) {\n        var elevationData = props.elevationData;\n        var isTiled = elevationData && (Array.isArray(elevationData) || elevationData.includes('{x}') && elevationData.includes('{y}'));\n        this.setState({\n          isTiled: isTiled\n        });\n      }\n      var shouldReload = elevationDataChanged || props.meshMaxError !== oldProps.meshMaxError || props.elevationDecoder !== oldProps.elevationDecoder || props.bounds !== oldProps.bounds;\n      if (!this.state.isTiled && shouldReload) {\n        var terrain = this.loadTerrain(props);\n        this.setState({\n          terrain: terrain\n        });\n      }\n      if (props.workerUrl) {\n        log.removed('workerUrl', 'loadOptions.terrain.workerUrl')();\n      }\n    }\n  }, {\n    key: \"loadTerrain\",\n    value: function loadTerrain(_ref2) {\n      var elevationData = _ref2.elevationData,\n        bounds = _ref2.bounds,\n        elevationDecoder = _ref2.elevationDecoder,\n        meshMaxError = _ref2.meshMaxError,\n        signal = _ref2.signal;\n      var _loadOptions;\n      if (!elevationData) {\n        return null;\n      }\n      var loadOptions = this.getLoadOptions();\n      loadOptions = _objectSpread(_objectSpread({}, loadOptions), {}, {\n        terrain: _objectSpread(_objectSpread({\n          skirtHeight: this.state.isTiled ? meshMaxError * 2 : 0\n        }, (_loadOptions = loadOptions) === null || _loadOptions === void 0 ? void 0 : _loadOptions.terrain), {}, {\n          bounds: bounds,\n          meshMaxError: meshMaxError,\n          elevationDecoder: elevationDecoder\n        })\n      });\n      var fetch = this.props.fetch;\n      return fetch(elevationData, {\n        propName: 'elevationData',\n        layer: this,\n        loadOptions: loadOptions,\n        signal: signal\n      });\n    }\n  }, {\n    key: \"getTiledTerrainData\",\n    value: function getTiledTerrainData(tile) {\n      var _this$props = this.props,\n        elevationData = _this$props.elevationData,\n        fetch = _this$props.fetch,\n        texture = _this$props.texture,\n        elevationDecoder = _this$props.elevationDecoder,\n        meshMaxError = _this$props.meshMaxError;\n      var viewport = this.context.viewport;\n      var dataUrl = getURLFromTemplate(elevationData, tile);\n      var textureUrl = texture && getURLFromTemplate(texture, tile);\n      var signal = tile.signal;\n      var bottomLeft = [0, 0];\n      var topRight = [0, 0];\n      if (viewport.isGeospatial) {\n        var bbox = tile.bbox;\n        bottomLeft = viewport.projectFlat([bbox.west, bbox.south]);\n        topRight = viewport.projectFlat([bbox.east, bbox.north]);\n      } else {\n        var _bbox = tile.bbox;\n        bottomLeft = [_bbox.left, _bbox.bottom];\n        topRight = [_bbox.right, _bbox.top];\n      }\n      var bounds = [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]];\n      var terrain = this.loadTerrain({\n        elevationData: dataUrl,\n        bounds: bounds,\n        elevationDecoder: elevationDecoder,\n        meshMaxError: meshMaxError,\n        signal: signal\n      });\n      var surface = textureUrl ? fetch(textureUrl, {\n        propName: 'texture',\n        layer: this,\n        loaders: [],\n        signal: signal\n      }).catch(function (_) {\n        return null;\n      }) : Promise.resolve(null);\n      return Promise.all([terrain, surface]);\n    }\n  }, {\n    key: \"renderSubLayers\",\n    value: function renderSubLayers(props) {\n      var SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n      var _this$props2 = this.props,\n        color = _this$props2.color,\n        wireframe = _this$props2.wireframe,\n        material = _this$props2.material;\n      var data = props.data;\n      if (!data) {\n        return null;\n      }\n      var _data = _slicedToArray(data, 2),\n        mesh = _data[0],\n        texture = _data[1];\n      return new SubLayerClass(props, {\n        data: DUMMY_DATA,\n        mesh: mesh,\n        texture: texture,\n        _instanced: false,\n        coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n        getPosition: function getPosition(d) {\n          return [0, 0, 0];\n        },\n        getColor: color,\n        wireframe: wireframe,\n        material: material\n      });\n    }\n  }, {\n    key: \"onViewportLoad\",\n    value: function onViewportLoad(tiles) {\n      if (!tiles) {\n        return;\n      }\n      var zRange = this.state.zRange;\n      var ranges = tiles.map(function (tile) {\n        return tile.content;\n      }).filter(Boolean).map(function (arr) {\n        var bounds = arr[0].header.boundingBox;\n        return bounds.map(function (bound) {\n          return bound[2];\n        });\n      });\n      if (ranges.length === 0) {\n        return;\n      }\n      var minZ = Math.min.apply(Math, _toConsumableArray(ranges.map(function (x) {\n        return x[0];\n      })));\n      var maxZ = Math.max.apply(Math, _toConsumableArray(ranges.map(function (x) {\n        return x[1];\n      })));\n      if (!zRange || minZ < zRange[0] || maxZ > zRange[1]) {\n        this.setState({\n          zRange: [minZ, maxZ]\n        });\n      }\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props3 = this.props,\n        color = _this$props3.color,\n        material = _this$props3.material,\n        elevationData = _this$props3.elevationData,\n        texture = _this$props3.texture,\n        wireframe = _this$props3.wireframe,\n        meshMaxError = _this$props3.meshMaxError,\n        elevationDecoder = _this$props3.elevationDecoder,\n        tileSize = _this$props3.tileSize,\n        maxZoom = _this$props3.maxZoom,\n        minZoom = _this$props3.minZoom,\n        extent = _this$props3.extent,\n        maxRequests = _this$props3.maxRequests,\n        onTileLoad = _this$props3.onTileLoad,\n        onTileUnload = _this$props3.onTileUnload,\n        onTileError = _this$props3.onTileError,\n        maxCacheSize = _this$props3.maxCacheSize,\n        maxCacheByteSize = _this$props3.maxCacheByteSize,\n        refinementStrategy = _this$props3.refinementStrategy;\n      if (this.state.isTiled) {\n        return new TileLayer(this.getSubLayerProps({\n          id: 'tiles'\n        }), {\n          getTileData: this.getTiledTerrainData.bind(this),\n          renderSubLayers: this.renderSubLayers.bind(this),\n          updateTriggers: {\n            getTileData: {\n              elevationData: urlTemplateToUpdateTrigger(elevationData),\n              texture: urlTemplateToUpdateTrigger(texture),\n              meshMaxError: meshMaxError,\n              elevationDecoder: elevationDecoder\n            }\n          },\n          onViewportLoad: this.onViewportLoad.bind(this),\n          zRange: this.state.zRange || null,\n          tileSize: tileSize,\n          maxZoom: maxZoom,\n          minZoom: minZoom,\n          extent: extent,\n          maxRequests: maxRequests,\n          onTileLoad: onTileLoad,\n          onTileUnload: onTileUnload,\n          onTileError: onTileError,\n          maxCacheSize: maxCacheSize,\n          maxCacheByteSize: maxCacheByteSize,\n          refinementStrategy: refinementStrategy\n        });\n      }\n      var SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n      return new SubLayerClass(this.getSubLayerProps({\n        id: 'mesh'\n      }), {\n        data: DUMMY_DATA,\n        mesh: this.state.terrain,\n        texture: texture,\n        _instanced: false,\n        getPosition: function getPosition(d) {\n          return [0, 0, 0];\n        },\n        getColor: color,\n        material: material,\n        wireframe: wireframe\n      });\n    }\n  }]);\n  return TerrainLayer;\n}(CompositeLayer);\nexport { TerrainLayer as default };\n_defineProperty(TerrainLayer, \"defaultProps\", defaultProps);\n_defineProperty(TerrainLayer, \"layerName\", 'TerrainLayer');","map":{"version":3,"names":["CompositeLayer","log","SimpleMeshLayer","COORDINATE_SYSTEM","TerrainWorkerLoader","TileLayer","urlType","getURLFromTemplate","DUMMY_DATA","defaultProps","_objectSpread","elevationData","texture","optional","meshMaxError","type","value","bounds","compare","color","elevationDecoder","rScaler","gScaler","bScaler","offset","workerUrl","wireframe","material","loaders","urlTemplateToUpdateTrigger","template","Array","isArray","join","TerrainLayer","_CompositeLayer","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","_key","call","apply","concat","_defineProperty","_assertThisInitialized","_createClass","key","updateState","_ref","props","oldProps","elevationDataChanged","isTiled","includes","setState","shouldReload","state","terrain","loadTerrain","removed","_ref2","signal","_loadOptions","loadOptions","getLoadOptions","skirtHeight","fetch","propName","layer","getTiledTerrainData","tile","_this$props","viewport","context","dataUrl","textureUrl","bottomLeft","topRight","isGeospatial","bbox","projectFlat","west","south","east","north","left","bottom","right","top","surface","catch","_","Promise","resolve","all","renderSubLayers","SubLayerClass","getSubLayerClass","_this$props2","data","_data","_slicedToArray","mesh","_instanced","coordinateSystem","CARTESIAN","getPosition","d","getColor","onViewportLoad","tiles","zRange","ranges","map","content","filter","Boolean","arr","header","boundingBox","bound","minZ","Math","min","_toConsumableArray","x","maxZ","max","renderLayers","_this$props3","tileSize","maxZoom","minZoom","extent","maxRequests","onTileLoad","onTileUnload","onTileError","maxCacheSize","maxCacheByteSize","refinementStrategy","getSubLayerProps","id","getTileData","bind","updateTriggers","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/geo-layers/src/terrain-layer/terrain-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Color,\n  CompositeLayer,\n  CompositeLayerProps,\n  DefaultProps,\n  Layer,\n  LayersList,\n  log,\n  Material,\n  Texture,\n  UpdateParameters\n} from '@deck.gl/core';\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {COORDINATE_SYSTEM} from '@deck.gl/core';\nimport type {MeshAttributes} from '@loaders.gl/schema';\nimport {TerrainWorkerLoader} from '@loaders.gl/terrain';\nimport TileLayer, {TileLayerProps} from '../tile-layer/tile-layer';\nimport Tile2DHeader from '../tile-layer/tile-2d-header';\nimport {Bounds, GeoBoundingBox, TileBoundingBox, TileLoadProps, ZRange} from '../tile-layer/types';\nimport {urlType, getURLFromTemplate} from '../tile-layer/utils';\n\nconst DUMMY_DATA = [1];\n\nconst defaultProps: DefaultProps<TerrainLayerProps> = {\n  ...TileLayer.defaultProps,\n  // Image url that encodes height data\n  elevationData: urlType,\n  // Image url to use as texture\n  texture: {...urlType, optional: true},\n  // Martini error tolerance in meters, smaller number -> more detailed mesh\n  meshMaxError: {type: 'number', value: 4.0},\n  // Bounding box of the terrain image, [minX, minY, maxX, maxY] in world coordinates\n  bounds: {type: 'array', value: null, optional: true, compare: true},\n  // Color to use if texture is unavailable\n  color: {type: 'color', value: [255, 255, 255]},\n  // Object to decode height data, from (r, g, b) to height in meters\n  elevationDecoder: {\n    type: 'object',\n    value: {\n      rScaler: 1,\n      gScaler: 0,\n      bScaler: 0,\n      offset: 0\n    }\n  },\n  // Supply url to local terrain worker bundle. Only required if running offline and cannot access CDN.\n  workerUrl: {type: 'string', value: null},\n  // Same as SimpleMeshLayer wireframe\n  wireframe: false,\n  material: true,\n\n  loaders: [TerrainWorkerLoader]\n};\n\ntype URLTemplate = string | string[];\n\n// Turns array of templates into a single string to work around shallow change\nfunction urlTemplateToUpdateTrigger(template: URLTemplate | null): string {\n  if (Array.isArray(template)) {\n    return template.join(';');\n  }\n  return template || '';\n}\n\ntype ElevationDecoder = {rScaler: number; gScaler: number; bScaler: number; offset: number};\ntype TerrainLoadProps = {\n  bounds: Bounds;\n  elevationData: string | null;\n  elevationDecoder: ElevationDecoder;\n  meshMaxError: number;\n  signal?: AbortSignal;\n};\n\ntype MeshAndTexture = [MeshAttributes | null, Texture | null];\n\n/** All properties supported by TerrainLayer */\nexport type TerrainLayerProps = _TerrainLayerProps &\n  TileLayerProps<MeshAndTexture> &\n  CompositeLayerProps;\n\n/** Props added by the TerrainLayer */\ntype _TerrainLayerProps = {\n  /** Image url that encodes height data. **/\n  elevationData: URLTemplate;\n\n  /** Image url to use as texture. **/\n  texture?: URLTemplate | null;\n\n  /** Martini error tolerance in meters, smaller number -> more detailed mesh. **/\n  meshMaxError?: number;\n\n  /** Bounding box of the terrain image, [minX, minY, maxX, maxY] in world coordinates. **/\n  bounds?: Bounds | null;\n\n  /** Color to use if texture is unavailable. **/\n  color?: Color;\n\n  /** Object to decode height data, from (r, g, b) to height in meters. **/\n  elevationDecoder?: ElevationDecoder;\n\n  /** Whether to render the mesh in wireframe mode. **/\n  wireframe?: boolean;\n\n  /** Material props for lighting effect. **/\n  material?: Material;\n};\n\n/** Render mesh surfaces from height map images. */\nexport default class TerrainLayer<ExtraPropsT = {}> extends CompositeLayer<\n  ExtraPropsT & Required<_TerrainLayerProps & Required<TileLayerProps<MeshAndTexture>>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'TerrainLayer';\n\n  state!: {\n    isTiled?: boolean;\n    terrain: MeshAttributes;\n    zRange?: ZRange | null;\n  };\n\n  updateState({props, oldProps}: UpdateParameters<this>): void {\n    const elevationDataChanged = props.elevationData !== oldProps.elevationData;\n    if (elevationDataChanged) {\n      const {elevationData} = props;\n      const isTiled =\n        elevationData &&\n        (Array.isArray(elevationData) ||\n          (elevationData.includes('{x}') && elevationData.includes('{y}')));\n      this.setState({isTiled});\n    }\n\n    // Reloading for single terrain mesh\n    const shouldReload =\n      elevationDataChanged ||\n      props.meshMaxError !== oldProps.meshMaxError ||\n      props.elevationDecoder !== oldProps.elevationDecoder ||\n      props.bounds !== oldProps.bounds;\n\n    if (!this.state.isTiled && shouldReload) {\n      // When state.isTiled, elevationData cannot be an array\n      const terrain = this.loadTerrain(props as TerrainLoadProps);\n      this.setState({terrain});\n    }\n\n    // TODO - remove in v9\n    // @ts-ignore\n    if (props.workerUrl) {\n      log.removed('workerUrl', 'loadOptions.terrain.workerUrl')();\n    }\n  }\n\n  loadTerrain({\n    elevationData,\n    bounds,\n    elevationDecoder,\n    meshMaxError,\n    signal\n  }: TerrainLoadProps): Promise<MeshAttributes> | null {\n    if (!elevationData) {\n      return null;\n    }\n    let loadOptions = this.getLoadOptions();\n    loadOptions = {\n      ...loadOptions,\n      terrain: {\n        skirtHeight: this.state.isTiled ? meshMaxError * 2 : 0,\n        ...loadOptions?.terrain,\n        bounds,\n        meshMaxError,\n        elevationDecoder\n      }\n    };\n    const {fetch} = this.props;\n    return fetch(elevationData, {propName: 'elevationData', layer: this, loadOptions, signal});\n  }\n\n  getTiledTerrainData(tile: TileLoadProps): Promise<MeshAndTexture> {\n    const {elevationData, fetch, texture, elevationDecoder, meshMaxError} = this.props;\n    const {viewport} = this.context;\n    const dataUrl = getURLFromTemplate(elevationData, tile);\n    const textureUrl = texture && getURLFromTemplate(texture, tile);\n\n    const {signal} = tile;\n    let bottomLeft = [0, 0] as [number, number];\n    let topRight = [0, 0] as [number, number];\n    if (viewport.isGeospatial) {\n      const bbox = tile.bbox as GeoBoundingBox;\n      bottomLeft = viewport.projectFlat([bbox.west, bbox.south]);\n      topRight = viewport.projectFlat([bbox.east, bbox.north]);\n    } else {\n      const bbox = tile.bbox as Exclude<TileBoundingBox, GeoBoundingBox>;\n      bottomLeft = [bbox.left, bbox.bottom];\n      topRight = [bbox.right, bbox.top];\n    }\n    const bounds: Bounds = [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]];\n\n    const terrain = this.loadTerrain({\n      elevationData: dataUrl,\n      bounds,\n      elevationDecoder,\n      meshMaxError,\n      signal\n    });\n    const surface = textureUrl\n      ? // If surface image fails to load, the tile should still be displayed\n        fetch(textureUrl, {propName: 'texture', layer: this, loaders: [], signal}).catch(_ => null)\n      : Promise.resolve(null);\n\n    return Promise.all([terrain, surface]);\n  }\n\n  renderSubLayers(\n    props: TileLayerProps<MeshAndTexture> & {\n      id: string;\n      data: MeshAndTexture;\n      tile: Tile2DHeader<MeshAndTexture>;\n    }\n  ) {\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n\n    const {color, wireframe, material} = this.props;\n    const {data} = props;\n\n    if (!data) {\n      return null;\n    }\n\n    const [mesh, texture] = data;\n\n    return new SubLayerClass(props, {\n      data: DUMMY_DATA,\n      mesh,\n      texture,\n      _instanced: false,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      getPosition: d => [0, 0, 0],\n      getColor: color,\n      wireframe,\n      material\n    });\n  }\n\n  // Update zRange of viewport\n  onViewportLoad(tiles?: Tile2DHeader<MeshAndTexture>[]): void {\n    if (!tiles) {\n      return;\n    }\n\n    const {zRange} = this.state;\n    const ranges = tiles\n      .map(tile => tile.content)\n      .filter(Boolean)\n      .map(arr => {\n        // @ts-ignore\n        const bounds = arr[0].header.boundingBox;\n        return bounds.map(bound => bound[2]);\n      });\n    if (ranges.length === 0) {\n      return;\n    }\n    const minZ = Math.min(...ranges.map(x => x[0]));\n    const maxZ = Math.max(...ranges.map(x => x[1]));\n\n    if (!zRange || minZ < zRange[0] || maxZ > zRange[1]) {\n      this.setState({zRange: [minZ, maxZ]});\n    }\n  }\n\n  renderLayers(): Layer | null | LayersList {\n    const {\n      color,\n      material,\n      elevationData,\n      texture,\n      wireframe,\n      meshMaxError,\n      elevationDecoder,\n      tileSize,\n      maxZoom,\n      minZoom,\n      extent,\n      maxRequests,\n      onTileLoad,\n      onTileUnload,\n      onTileError,\n      maxCacheSize,\n      maxCacheByteSize,\n      refinementStrategy\n    } = this.props;\n\n    if (this.state.isTiled) {\n      return new TileLayer<MeshAndTexture>(\n        this.getSubLayerProps({\n          id: 'tiles'\n        }),\n        {\n          getTileData: this.getTiledTerrainData.bind(this),\n          renderSubLayers: this.renderSubLayers.bind(this),\n          updateTriggers: {\n            getTileData: {\n              elevationData: urlTemplateToUpdateTrigger(elevationData),\n              texture: urlTemplateToUpdateTrigger(texture),\n              meshMaxError,\n              elevationDecoder\n            }\n          },\n          onViewportLoad: this.onViewportLoad.bind(this),\n          zRange: this.state.zRange || null,\n          tileSize,\n          maxZoom,\n          minZoom,\n          extent,\n          maxRequests,\n          onTileLoad,\n          onTileUnload,\n          onTileError,\n          maxCacheSize,\n          maxCacheByteSize,\n          refinementStrategy\n        }\n      );\n    }\n\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    return new SubLayerClass(\n      this.getSubLayerProps({\n        id: 'mesh'\n      }),\n      {\n        data: DUMMY_DATA,\n        mesh: this.state.terrain,\n        texture,\n        _instanced: false,\n        getPosition: d => [0, 0, 0],\n        getColor: color,\n        material,\n        wireframe\n      }\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}