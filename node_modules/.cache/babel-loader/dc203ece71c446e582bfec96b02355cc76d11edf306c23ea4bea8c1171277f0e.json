{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { _WorkerFarm as WorkerFarm, toArrayBuffer, getTransferList } from '@loaders.gl/loader-utils';\nimport { parse } from '../api/parse';\nvar VERSION = typeof \"2.3.13\" !== 'undefined' ? \"2.3.13\" : 'latest';\nexport function canParseWithWorker(loader, data, options, context) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n  var loaderOptions = options && options[loader.id];\n  if (options.worker === 'local' && loaderOptions && loaderOptions.localWorkerUrl || options.worker && loaderOptions && loaderOptions.workerUrl) {\n    return loader.useWorker ? loader.useWorker(options) : true;\n  }\n  return false;\n}\nexport default function parseWithWorker(loader, data, options, context) {\n  var _ref = options || {},\n    worker = _ref.worker;\n  var loaderOptions = options && options[loader.id] || {};\n  var workerUrl = worker === 'local' ? loaderOptions.localWorkerUrl : loaderOptions.workerUrl;\n  var workerSource = \"url(\".concat(workerUrl, \")\");\n  var workerName = loader.name;\n  var workerFarm = getWorkerFarm(options);\n  options = JSON.parse(JSON.stringify(options));\n  var warning = loader.version !== VERSION ? \"(core version \".concat(VERSION, \")\") : '';\n  return workerFarm.process(workerSource, \"\".concat(workerName, \"-worker@\").concat(loader.version).concat(warning), {\n    arraybuffer: toArrayBuffer(data),\n    options: options,\n    source: \"loaders.gl@\".concat(VERSION),\n    type: 'parse'\n  });\n}\nvar _workerFarm = null;\nfunction getWorkerFarm() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var props = {};\n  if (options.maxConcurrency) {\n    props.maxConcurrency = options.maxConcurrency;\n  }\n  if (options.onDebug) {\n    props.onDebug = options.onDebug;\n  }\n  if ('reuseWorkers' in options) {\n    props.reuseWorkers = options.reuseWorkers;\n  }\n  if (!_workerFarm) {\n    _workerFarm = new WorkerFarm({\n      onMessage: onWorkerMessage\n    });\n  }\n  _workerFarm.setProps(props);\n  return _workerFarm;\n}\nfunction onWorkerMessage(_x) {\n  return _onWorkerMessage.apply(this, arguments);\n}\nfunction _onWorkerMessage() {\n  _onWorkerMessage = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(_ref2) {\n    var worker, data, resolve, reject, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            worker = _ref2.worker, data = _ref2.data, resolve = _ref2.resolve, reject = _ref2.reject;\n            _context.t0 = data.type;\n            _context.next = _context.t0 === 'done' ? 4 : _context.t0 === 'parse' ? 6 : _context.t0 === 'error' ? 17 : 19;\n            break;\n          case 4:\n            resolve(data.result);\n            return _context.abrupt(\"break\", 19);\n          case 6:\n            _context.prev = 6;\n            _context.next = 9;\n            return parse(data.arraybuffer, data.options, data.url);\n          case 9:\n            result = _context.sent;\n            worker.postMessage({\n              type: 'parse-done',\n              id: data.id,\n              result: result\n            }, getTransferList(result));\n            _context.next = 16;\n            break;\n          case 13:\n            _context.prev = 13;\n            _context.t1 = _context[\"catch\"](6);\n            worker.postMessage({\n              type: 'parse-error',\n              id: data.id,\n              message: _context.t1.message\n            });\n          case 16:\n            return _context.abrupt(\"break\", 19);\n          case 17:\n            reject(data.message);\n            return _context.abrupt(\"break\", 19);\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[6, 13]]);\n  }));\n  return _onWorkerMessage.apply(this, arguments);\n}","map":{"version":3,"names":["_WorkerFarm","WorkerFarm","toArrayBuffer","getTransferList","parse","VERSION","canParseWithWorker","loader","data","options","context","isSupported","loaderOptions","id","worker","localWorkerUrl","workerUrl","useWorker","parseWithWorker","_ref","workerSource","concat","workerName","name","workerFarm","getWorkerFarm","JSON","stringify","warning","version","process","arraybuffer","source","type","_workerFarm","arguments","length","undefined","props","maxConcurrency","onDebug","reuseWorkers","onMessage","onWorkerMessage","setProps","_callee","_ref2","resolve","reject","result","_regeneratorRuntime","wrap","_callee$","_context","prev","next","t0","abrupt","url","sent","postMessage","t1","message","stop"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/kepler.gl/node_modules/@loaders.gl/core/src/lib/loader-utils/parse-with-worker.js"],"sourcesContent":["import {_WorkerFarm as WorkerFarm, toArrayBuffer, getTransferList} from '@loaders.gl/loader-utils';\nimport {parse} from '../api/parse';\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nexport function canParseWithWorker(loader, data, options, context) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n  const loaderOptions = options && options[loader.id];\n  if (\n    (options.worker === 'local' && loaderOptions && loaderOptions.localWorkerUrl) ||\n    (options.worker && loaderOptions && loaderOptions.workerUrl)\n  ) {\n    return loader.useWorker ? loader.useWorker(options) : true;\n  }\n  return false;\n}\n\n/**\n * this function expects that the worker function sends certain messages,\n * this can be automated if the worker is wrapper by a call to createWorker in @loaders.gl/loader-utils.\n */\nexport default function parseWithWorker(loader, data, options, context) {\n  const {worker} = options || {};\n  const loaderOptions = (options && options[loader.id]) || {};\n  const workerUrl = worker === 'local' ? loaderOptions.localWorkerUrl : loaderOptions.workerUrl;\n\n  // Mark as URL\n  const workerSource = `url(${workerUrl})`;\n  const workerName = loader.name;\n\n  const workerFarm = getWorkerFarm(options);\n\n  // options.log object contains functions which cannot be transferred\n  // TODO - decide how to handle logging on workers\n  options = JSON.parse(JSON.stringify(options));\n\n  const warning = loader.version !== VERSION ? `(core version ${VERSION})` : '';\n\n  return workerFarm.process(workerSource, `${workerName}-worker@${loader.version}${warning}`, {\n    arraybuffer: toArrayBuffer(data),\n    options,\n    source: `loaders.gl@${VERSION}`, // Lets worker ignore unrelated messages\n    type: 'parse' // For future extension\n  });\n}\n\nlet _workerFarm = null;\n\n// Create a single instance of a worker farm\nfunction getWorkerFarm(options = {}) {\n  const props = {};\n  if (options.maxConcurrency) {\n    props.maxConcurrency = options.maxConcurrency;\n  }\n  if (options.onDebug) {\n    props.onDebug = options.onDebug;\n  }\n\n  if ('reuseWorkers' in options) {\n    // @ts-ignore\n    props.reuseWorkers = options.reuseWorkers;\n  }\n\n  if (!_workerFarm) {\n    _workerFarm = new WorkerFarm({onMessage: onWorkerMessage});\n  }\n  _workerFarm.setProps(props);\n\n  return _workerFarm;\n}\n\nasync function onWorkerMessage({worker, data, resolve, reject}) {\n  switch (data.type) {\n    case 'done':\n      resolve(data.result);\n      break;\n\n    case 'parse':\n      try {\n        const result = await parse(data.arraybuffer, data.options, data.url);\n        worker.postMessage({type: 'parse-done', id: data.id, result}, getTransferList(result));\n      } catch (error) {\n        worker.postMessage({type: 'parse-error', id: data.id, message: error.message});\n      }\n      break;\n\n    case 'error':\n      reject(data.message);\n      break;\n\n    default:\n    // TODO - is this not an error case? Log a warning?\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}