{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { classifyRings, project, readFeature } from '../../helpers/binary-util-functions';\nvar endPos;\nvar cmd;\nvar cmdLen;\nvar length;\nvar x;\nvar y;\nvar i;\nexport var TEST_EXPORTS = {\n  classifyRings: classifyRings\n};\nvar VectorTileFeature = /*#__PURE__*/function () {\n  function VectorTileFeature(pbf, end, extent, keys, values, geometryInfo) {\n    _classCallCheck(this, VectorTileFeature);\n    _defineProperty(this, \"properties\", void 0);\n    _defineProperty(this, \"extent\", void 0);\n    _defineProperty(this, \"type\", void 0);\n    _defineProperty(this, \"id\", void 0);\n    _defineProperty(this, \"_pbf\", void 0);\n    _defineProperty(this, \"_geometry\", void 0);\n    _defineProperty(this, \"_keys\", void 0);\n    _defineProperty(this, \"_values\", void 0);\n    _defineProperty(this, \"_geometryInfo\", void 0);\n    this.properties = {};\n    this.extent = extent;\n    this.type = 0;\n    this.id = null;\n    this._pbf = pbf;\n    this._geometry = -1;\n    this._keys = keys;\n    this._values = values;\n    this._geometryInfo = geometryInfo;\n    pbf.readFields(readFeature, this, end);\n  }\n  _createClass(VectorTileFeature, [{\n    key: \"loadGeometry\",\n    value: function loadGeometry() {\n      var pbf = this._pbf;\n      pbf.pos = this._geometry;\n      endPos = pbf.readVarint() + pbf.pos;\n      cmd = 1;\n      length = 0;\n      x = 0;\n      y = 0;\n      i = 0;\n      var indices = [];\n      var data = [];\n      while (pbf.pos < endPos) {\n        if (length <= 0) {\n          cmdLen = pbf.readVarint();\n          cmd = cmdLen & 0x7;\n          length = cmdLen >> 3;\n        }\n        length--;\n        if (cmd === 1 || cmd === 2) {\n          x += pbf.readSVarint();\n          y += pbf.readSVarint();\n          if (cmd === 1) {\n            indices.push(i);\n          }\n          data.push(x, y);\n          i += 2;\n        } else if (cmd === 7) {\n          if (i > 0) {\n            var start = indices[indices.length - 1];\n            data.push(data[start], data[start + 1]);\n            i += 2;\n          }\n        } else {\n          throw new Error(\"unknown command \".concat(cmd));\n        }\n      }\n      return {\n        data: data,\n        indices: indices\n      };\n    }\n  }, {\n    key: \"_toBinaryCoordinates\",\n    value: function _toBinaryCoordinates(transform) {\n      var geom = this.loadGeometry();\n      var geometry;\n      transform(geom.data, this);\n      var coordLength = 2;\n      switch (this.type) {\n        case 1:\n          this._geometryInfo.pointFeaturesCount++;\n          this._geometryInfo.pointPositionsCount += geom.indices.length;\n          geometry = _objectSpread({\n            type: 'Point'\n          }, geom);\n          break;\n        case 2:\n          this._geometryInfo.lineFeaturesCount++;\n          this._geometryInfo.linePathsCount += geom.indices.length;\n          this._geometryInfo.linePositionsCount += geom.data.length / coordLength;\n          geometry = _objectSpread({\n            type: 'LineString'\n          }, geom);\n          break;\n        case 3:\n          geometry = classifyRings(geom);\n          this._geometryInfo.polygonFeaturesCount++;\n          this._geometryInfo.polygonObjectsCount += geometry.indices.length;\n          var _iterator = _createForOfIteratorHelper(geometry.indices),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var indices = _step.value;\n              this._geometryInfo.polygonRingsCount += indices.length;\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n          this._geometryInfo.polygonPositionsCount += geometry.data.length / coordLength;\n          break;\n        default:\n          throw new Error(\"Invalid geometry type: \".concat(this.type));\n      }\n      var result = {\n        type: 'Feature',\n        geometry: geometry,\n        properties: this.properties\n      };\n      if (this.id !== null) {\n        result.id = this.id;\n      }\n      return result;\n    }\n  }, {\n    key: \"toBinaryCoordinates\",\n    value: function toBinaryCoordinates(options) {\n      if (typeof options === 'function') {\n        return this._toBinaryCoordinates(options);\n      }\n      var x = options.x,\n        y = options.y,\n        z = options.z;\n      var size = this.extent * Math.pow(2, z);\n      var x0 = this.extent * x;\n      var y0 = this.extent * y;\n      return this._toBinaryCoordinates(function (data) {\n        return project(data, x0, y0, size);\n      });\n    }\n  }]);\n  return VectorTileFeature;\n}();\nexport { VectorTileFeature as default };","map":{"version":3,"names":["classifyRings","project","readFeature","endPos","cmd","cmdLen","length","x","y","i","TEST_EXPORTS","VectorTileFeature","pbf","end","extent","keys","values","geometryInfo","_classCallCheck","_defineProperty","properties","type","id","_pbf","_geometry","_keys","_values","_geometryInfo","readFields","_createClass","key","value","loadGeometry","pos","readVarint","indices","data","readSVarint","push","start","Error","concat","_toBinaryCoordinates","transform","geom","geometry","coordLength","pointFeaturesCount","pointPositionsCount","_objectSpread","lineFeaturesCount","linePathsCount","linePositionsCount","polygonFeaturesCount","polygonObjectsCount","_iterator","_createForOfIteratorHelper","_step","s","n","done","polygonRingsCount","err","e","f","polygonPositionsCount","result","toBinaryCoordinates","options","z","size","Math","pow","x0","y0","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/mvt/src/lib/binary-vector-tile/vector-tile-feature.ts"],"sourcesContent":["// This code is forked from https://github.com/mapbox/vector-tile-js under BSD 3-clause license.\n\nimport Protobuf from 'pbf';\nimport {FlatFeature, FlatIndexedGeometry, GeojsonGeometryInfo} from '@loaders.gl/schema';\nimport {classifyRings, project, readFeature} from '../../helpers/binary-util-functions';\n\n// Reduce GC by reusing variables\nlet endPos: number;\nlet cmd: number;\nlet cmdLen: number;\nlet length: number;\nlet x: number;\nlet y: number;\nlet i: number;\n\nexport const TEST_EXPORTS = {\n  classifyRings\n};\n\nexport default class VectorTileFeature {\n  properties: {[x: string]: string | number | boolean | null};\n  extent: any;\n  type: number;\n  id: number | null;\n  _pbf: Protobuf;\n  _geometry: number;\n  _keys: string[];\n  _values: (string | number | boolean | null)[];\n  _geometryInfo: GeojsonGeometryInfo;\n\n  // eslint-disable-next-line max-params\n  constructor(\n    pbf: Protobuf,\n    end: number,\n    extent: any,\n    keys: string[],\n    values: (string | number | boolean | null)[],\n    geometryInfo: GeojsonGeometryInfo\n  ) {\n    // Public\n    this.properties = {};\n    this.extent = extent;\n    this.type = 0;\n    this.id = null;\n\n    // Private\n    this._pbf = pbf;\n    this._geometry = -1;\n    this._keys = keys;\n    this._values = values;\n    this._geometryInfo = geometryInfo;\n\n    pbf.readFields(readFeature, this, end);\n  }\n\n  // eslint-disable-next-line complexity, max-statements\n  loadGeometry(): FlatIndexedGeometry {\n    const pbf = this._pbf;\n    pbf.pos = this._geometry;\n\n    endPos = pbf.readVarint() + pbf.pos;\n    cmd = 1;\n    length = 0;\n    x = 0;\n    y = 0;\n    i = 0;\n\n    // Note: I attempted to replace the `data` array with a\n    // Float32Array, but performance was worse, both using\n    // `set()` and direct index access. Also, we cannot\n    // know how large the buffer should be, so it would\n    // increase memory usage\n    const indices: number[] = []; // Indices where geometries start\n    const data: number[] = []; // Flat array of coordinate data\n\n    while (pbf.pos < endPos) {\n      if (length <= 0) {\n        cmdLen = pbf.readVarint();\n        cmd = cmdLen & 0x7;\n        length = cmdLen >> 3;\n      }\n\n      length--;\n\n      if (cmd === 1 || cmd === 2) {\n        x += pbf.readSVarint();\n        y += pbf.readSVarint();\n\n        if (cmd === 1) {\n          // New line\n          indices.push(i);\n        }\n        data.push(x, y);\n        i += 2;\n      } else if (cmd === 7) {\n        // Workaround for https://github.com/mapbox/mapnik-vector-tile/issues/90\n        if (i > 0) {\n          const start = indices[indices.length - 1]; // start index of polygon\n          data.push(data[start], data[start + 1]); // closePolygon\n          i += 2;\n        }\n      } else {\n        throw new Error(`unknown command ${cmd}`);\n      }\n    }\n\n    return {data, indices};\n  }\n\n  /**\n   *\n   * @param transform\n   * @returns result\n   */\n  _toBinaryCoordinates(transform) {\n    // Expands the protobuf data to an intermediate Flat GeoJSON\n    // data format, which maps closely to the binary data buffers.\n    // It is similar to GeoJSON, but rather than storing the coordinates\n    // in multidimensional arrays, we have a 1D `data` with all the\n    // coordinates, and then index into this using the `indices`\n    // parameter, e.g.\n    //\n    // geometry: {\n    //   type: 'Point', data: [1,2], indices: [0]\n    // }\n    // geometry: {\n    //   type: 'LineString', data: [1,2,3,4,...], indices: [0]\n    // }\n    // geometry: {\n    //   type: 'Polygon', data: [1,2,3,4,...], indices: [[0, 2]]\n    // }\n    // Thus the indices member lets us look up the relevant range\n    // from the data array.\n    // The Multi* versions of the above types share the same data\n    // structure, just with multiple elements in the indices array\n    const geom = this.loadGeometry();\n    let geometry;\n\n    // Apply the supplied transformation to data\n    transform(geom.data, this);\n\n    const coordLength = 2;\n\n    // eslint-disable-next-line default-case\n    switch (this.type) {\n      case 1: // Point\n        this._geometryInfo.pointFeaturesCount++;\n        this._geometryInfo.pointPositionsCount += geom.indices.length;\n        geometry = {type: 'Point', ...geom};\n        break;\n\n      case 2: // LineString\n        this._geometryInfo.lineFeaturesCount++;\n        this._geometryInfo.linePathsCount += geom.indices.length;\n        this._geometryInfo.linePositionsCount += geom.data.length / coordLength;\n        geometry = {type: 'LineString', ...geom};\n        break;\n\n      case 3: // Polygon\n        geometry = classifyRings(geom);\n\n        // Unlike Point & LineString geom.indices is a 2D array, thanks\n        // to the classifyRings method\n        this._geometryInfo.polygonFeaturesCount++;\n        this._geometryInfo.polygonObjectsCount += geometry.indices.length;\n\n        for (const indices of geometry.indices) {\n          this._geometryInfo.polygonRingsCount += indices.length;\n        }\n        this._geometryInfo.polygonPositionsCount += geometry.data.length / coordLength;\n\n        break;\n      default:\n        throw new Error(`Invalid geometry type: ${this.type}`);\n    }\n\n    const result: FlatFeature = {type: 'Feature', geometry, properties: this.properties};\n\n    if (this.id !== null) {\n      result.id = this.id;\n    }\n\n    return result;\n  }\n\n  toBinaryCoordinates(\n    options: {x: number; y: number; z: number} | ((data: number[], feature: {extent: any}) => void)\n  ): FlatFeature {\n    if (typeof options === 'function') {\n      return this._toBinaryCoordinates(options);\n    }\n    const {x, y, z} = options;\n    const size = this.extent * Math.pow(2, z);\n    const x0 = this.extent * x;\n    const y0 = this.extent * y;\n\n    return this._toBinaryCoordinates((data: number[]) => project(data, x0, y0, size));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}