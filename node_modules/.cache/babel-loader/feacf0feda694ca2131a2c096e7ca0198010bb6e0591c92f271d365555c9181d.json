{"ast":null,"code":"/*\n * Copyright 2012-2016 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n'use strict';\n\nvar mixin, xWWWFormURLEncoder, origin, urlRE, absoluteUrlRE, fullyQualifiedUrlRE;\nmixin = require('./util/mixin');\nxWWWFormURLEncoder = require('./mime/type/application/x-www-form-urlencoded');\nurlRE = /([a-z][a-z0-9\\+\\-\\.]*:)\\/\\/([^@]+@)?(([^:\\/]+)(:([0-9]+))?)?(\\/[^?#]*)?(\\?[^#]*)?(#\\S*)?/i;\nabsoluteUrlRE = /^([a-z][a-z0-9\\-\\+\\.]*:\\/\\/|\\/)/i;\nfullyQualifiedUrlRE = /([a-z][a-z0-9\\+\\-\\.]*:)\\/\\/([^@]+@)?(([^:\\/]+)(:([0-9]+))?)?\\//i;\n\n/**\n * Apply params to the template to create a URL.\n *\n * Parameters that are not applied directly to the template, are appended\n * to the URL as query string parameters.\n *\n * @param {string} template the URI template\n * @param {Object} params parameters to apply to the template\n * @return {string} the resulting URL\n */\nfunction buildUrl(template, params) {\n  // internal builder to convert template with params.\n  var url, name, queryStringParams, queryString, re;\n  url = template;\n  queryStringParams = {};\n  if (params) {\n    for (name in params) {\n      /*jshint forin:false */\n      re = new RegExp('\\\\{' + name + '\\\\}');\n      if (re.test(url)) {\n        url = url.replace(re, encodeURIComponent(params[name]), 'g');\n      } else {\n        queryStringParams[name] = params[name];\n      }\n    }\n    queryString = xWWWFormURLEncoder.write(queryStringParams);\n    if (queryString) {\n      url += url.indexOf('?') === -1 ? '?' : '&';\n      url += queryString;\n    }\n  }\n  return url;\n}\nfunction startsWith(str, test) {\n  return str.indexOf(test) === 0;\n}\n\n/**\n * Create a new URL Builder\n *\n * @param {string|UrlBuilder} template the base template to build from, may be another UrlBuilder\n * @param {Object} [params] base parameters\n * @constructor\n */\nfunction UrlBuilder(template, params) {\n  if (!(this instanceof UrlBuilder)) {\n    // invoke as a constructor\n    return new UrlBuilder(template, params);\n  }\n  if (template instanceof UrlBuilder) {\n    this._template = template.template;\n    this._params = mixin({}, this._params, params);\n  } else {\n    this._template = (template || '').toString();\n    this._params = params || {};\n  }\n}\nUrlBuilder.prototype = {\n  /**\n   * Create a new UrlBuilder instance that extends the current builder.\n   * The current builder is unmodified.\n   *\n   * @param {string} [template] URL template to append to the current template\n   * @param {Object} [params] params to combine with current params.  New params override existing params\n   * @return {UrlBuilder} the new builder\n   */\n  append: function append(template, params) {\n    // TODO consider query strings and fragments\n    return new UrlBuilder(this._template + template, mixin({}, this._params, params));\n  },\n  /**\n   * Create a new UrlBuilder with a fully qualified URL based on the\n   * window's location or base href and the current templates relative URL.\n   *\n   * Path variables are preserved.\n   *\n   * *Browser only*\n   *\n   * @return {UrlBuilder} the fully qualified URL template\n   */\n  fullyQualify: function fullyQualify() {\n    if (typeof location === 'undefined') {\n      return this;\n    }\n    if (this.isFullyQualified()) {\n      return this;\n    }\n    var template = this._template;\n    if (startsWith(template, '//')) {\n      template = origin.protocol + template;\n    } else if (startsWith(template, '/')) {\n      template = origin.origin + template;\n    } else if (!this.isAbsolute()) {\n      template = origin.origin + origin.pathname.substring(0, origin.pathname.lastIndexOf('/') + 1);\n    }\n    if (template.indexOf('/', 8) === -1) {\n      // default the pathname to '/'\n      template = template + '/';\n    }\n    return new UrlBuilder(template, this._params);\n  },\n  /**\n   * True if the URL is absolute\n   *\n   * @return {boolean}\n   */\n  isAbsolute: function isAbsolute() {\n    return absoluteUrlRE.test(this.build());\n  },\n  /**\n   * True if the URL is fully qualified\n   *\n   * @return {boolean}\n   */\n  isFullyQualified: function isFullyQualified() {\n    return fullyQualifiedUrlRE.test(this.build());\n  },\n  /**\n   * True if the URL is cross origin. The protocol, host and port must not be\n   * the same in order to be cross origin,\n   *\n   * @return {boolean}\n   */\n  isCrossOrigin: function isCrossOrigin() {\n    if (!origin) {\n      return true;\n    }\n    var url = this.parts();\n    return url.protocol !== origin.protocol || url.hostname !== origin.hostname || url.port !== origin.port;\n  },\n  /**\n   * Split a URL into its consituent parts following the naming convention of\n   * 'window.location'. One difference is that the port will contain the\n   * protocol default if not specified.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/DOM/window.location\n   *\n   * @returns {Object} a 'window.location'-like object\n   */\n  parts: function parts() {\n    /*jshint maxcomplexity:20 */\n    var url, parts;\n    url = this.fullyQualify().build().match(urlRE);\n    parts = {\n      href: url[0],\n      protocol: url[1],\n      host: url[3] || '',\n      hostname: url[4] || '',\n      port: url[6],\n      pathname: url[7] || '',\n      search: url[8] || '',\n      hash: url[9] || ''\n    };\n    parts.origin = parts.protocol + '//' + parts.host;\n    parts.port = parts.port || (parts.protocol === 'https:' ? '443' : parts.protocol === 'http:' ? '80' : '');\n    return parts;\n  },\n  /**\n   * Expand the template replacing path variables with parameters\n   *\n   * @param {Object} [params] params to combine with current params.  New params override existing params\n   * @return {string} the expanded URL\n   */\n  build: function build(params) {\n    return buildUrl(this._template, mixin({}, this._params, params));\n  },\n  /**\n   * @see build\n   */\n  toString: function toString() {\n    return this.build();\n  }\n};\norigin = typeof location !== 'undefined' ? new UrlBuilder(location.href).parts() : void 0;\nmodule.exports = UrlBuilder;","map":{"version":3,"names":["mixin","xWWWFormURLEncoder","origin","urlRE","absoluteUrlRE","fullyQualifiedUrlRE","require","buildUrl","template","params","url","name","queryStringParams","queryString","re","RegExp","test","replace","encodeURIComponent","write","indexOf","startsWith","str","UrlBuilder","_template","_params","toString","prototype","append","fullyQualify","location","isFullyQualified","protocol","isAbsolute","pathname","substring","lastIndexOf","build","isCrossOrigin","parts","hostname","port","match","href","host","search","hash","module","exports"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/rest/UrlBuilder.js"],"sourcesContent":["/*\n * Copyright 2012-2016 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n'use strict';\n\nvar mixin, xWWWFormURLEncoder, origin, urlRE, absoluteUrlRE, fullyQualifiedUrlRE;\n\nmixin = require('./util/mixin');\nxWWWFormURLEncoder = require('./mime/type/application/x-www-form-urlencoded');\n\nurlRE = /([a-z][a-z0-9\\+\\-\\.]*:)\\/\\/([^@]+@)?(([^:\\/]+)(:([0-9]+))?)?(\\/[^?#]*)?(\\?[^#]*)?(#\\S*)?/i;\nabsoluteUrlRE = /^([a-z][a-z0-9\\-\\+\\.]*:\\/\\/|\\/)/i;\nfullyQualifiedUrlRE = /([a-z][a-z0-9\\+\\-\\.]*:)\\/\\/([^@]+@)?(([^:\\/]+)(:([0-9]+))?)?\\//i;\n\n/**\n * Apply params to the template to create a URL.\n *\n * Parameters that are not applied directly to the template, are appended\n * to the URL as query string parameters.\n *\n * @param {string} template the URI template\n * @param {Object} params parameters to apply to the template\n * @return {string} the resulting URL\n */\nfunction buildUrl(template, params) {\n\t// internal builder to convert template with params.\n\tvar url, name, queryStringParams, queryString, re;\n\n\turl = template;\n\tqueryStringParams = {};\n\n\tif (params) {\n\t\tfor (name in params) {\n\t\t\t/*jshint forin:false */\n\t\t\tre = new RegExp('\\\\{' + name + '\\\\}');\n\t\t\tif (re.test(url)) {\n\t\t\t\turl = url.replace(re, encodeURIComponent(params[name]), 'g');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tqueryStringParams[name] = params[name];\n\t\t\t}\n\t\t}\n\n\t\tqueryString = xWWWFormURLEncoder.write(queryStringParams);\n\t\tif (queryString) {\n\t\t\turl += url.indexOf('?') === -1 ? '?' : '&';\n\t\t\turl += queryString;\n\t\t}\n\t}\n\treturn url;\n}\n\nfunction startsWith(str, test) {\n\treturn str.indexOf(test) === 0;\n}\n\n/**\n * Create a new URL Builder\n *\n * @param {string|UrlBuilder} template the base template to build from, may be another UrlBuilder\n * @param {Object} [params] base parameters\n * @constructor\n */\nfunction UrlBuilder(template, params) {\n\tif (!(this instanceof UrlBuilder)) {\n\t\t// invoke as a constructor\n\t\treturn new UrlBuilder(template, params);\n\t}\n\n\tif (template instanceof UrlBuilder) {\n\t\tthis._template = template.template;\n\t\tthis._params = mixin({}, this._params, params);\n\t}\n\telse {\n\t\tthis._template = (template || '').toString();\n\t\tthis._params = params || {};\n\t}\n}\n\nUrlBuilder.prototype = {\n\n\t/**\n\t * Create a new UrlBuilder instance that extends the current builder.\n\t * The current builder is unmodified.\n\t *\n\t * @param {string} [template] URL template to append to the current template\n\t * @param {Object} [params] params to combine with current params.  New params override existing params\n\t * @return {UrlBuilder} the new builder\n\t */\n\tappend: function (template,  params) {\n\t\t// TODO consider query strings and fragments\n\t\treturn new UrlBuilder(this._template + template, mixin({}, this._params, params));\n\t},\n\n\t/**\n\t * Create a new UrlBuilder with a fully qualified URL based on the\n\t * window's location or base href and the current templates relative URL.\n\t *\n\t * Path variables are preserved.\n\t *\n\t * *Browser only*\n\t *\n\t * @return {UrlBuilder} the fully qualified URL template\n\t */\n\tfullyQualify: function () {\n\t\tif (typeof location === 'undefined') { return this; }\n\t\tif (this.isFullyQualified()) { return this; }\n\n\t\tvar template = this._template;\n\n\t\tif (startsWith(template, '//')) {\n\t\t\ttemplate = origin.protocol + template;\n\t\t}\n\t\telse if (startsWith(template, '/')) {\n\t\t\ttemplate = origin.origin + template;\n\t\t}\n\t\telse if (!this.isAbsolute()) {\n\t\t\ttemplate = origin.origin + origin.pathname.substring(0, origin.pathname.lastIndexOf('/') + 1);\n\t\t}\n\n\t\tif (template.indexOf('/', 8) === -1) {\n\t\t\t// default the pathname to '/'\n\t\t\ttemplate = template + '/';\n\t\t}\n\n\t\treturn new UrlBuilder(template, this._params);\n\t},\n\n\t/**\n\t * True if the URL is absolute\n\t *\n\t * @return {boolean}\n\t */\n\tisAbsolute: function () {\n\t\treturn absoluteUrlRE.test(this.build());\n\t},\n\n\t/**\n\t * True if the URL is fully qualified\n\t *\n\t * @return {boolean}\n\t */\n\tisFullyQualified: function () {\n\t\treturn fullyQualifiedUrlRE.test(this.build());\n\t},\n\n\t/**\n\t * True if the URL is cross origin. The protocol, host and port must not be\n\t * the same in order to be cross origin,\n\t *\n\t * @return {boolean}\n\t */\n\tisCrossOrigin: function () {\n\t\tif (!origin) {\n\t\t\treturn true;\n\t\t}\n\t\tvar url = this.parts();\n\t\treturn url.protocol !== origin.protocol ||\n\t\t       url.hostname !== origin.hostname ||\n\t\t       url.port !== origin.port;\n\t},\n\n\t/**\n\t * Split a URL into its consituent parts following the naming convention of\n\t * 'window.location'. One difference is that the port will contain the\n\t * protocol default if not specified.\n\t *\n\t * @see https://developer.mozilla.org/en-US/docs/DOM/window.location\n\t *\n\t * @returns {Object} a 'window.location'-like object\n\t */\n\tparts: function () {\n\t\t/*jshint maxcomplexity:20 */\n\t\tvar url, parts;\n\t\turl = this.fullyQualify().build().match(urlRE);\n\t\tparts = {\n\t\t\thref: url[0],\n\t\t\tprotocol: url[1],\n\t\t\thost: url[3] || '',\n\t\t\thostname: url[4] || '',\n\t\t\tport: url[6],\n\t\t\tpathname: url[7] || '',\n\t\t\tsearch: url[8] || '',\n\t\t\thash: url[9] || ''\n\t\t};\n\t\tparts.origin = parts.protocol + '//' + parts.host;\n\t\tparts.port = parts.port || (parts.protocol === 'https:' ? '443' : parts.protocol === 'http:' ? '80' : '');\n\t\treturn parts;\n\t},\n\n\t/**\n\t * Expand the template replacing path variables with parameters\n\t *\n\t * @param {Object} [params] params to combine with current params.  New params override existing params\n\t * @return {string} the expanded URL\n\t */\n\tbuild: function (params) {\n\t\treturn buildUrl(this._template, mixin({}, this._params, params));\n\t},\n\n\t/**\n\t * @see build\n\t */\n\ttoString: function () {\n\t\treturn this.build();\n\t}\n\n};\n\norigin = typeof location !== 'undefined' ? new UrlBuilder(location.href).parts() : void 0;\n\nmodule.exports = UrlBuilder;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}