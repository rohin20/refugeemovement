{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getS2Center = getS2Center;\nexports.validS2Token = validS2Token;\nvar _long = _interopRequireDefault(require(\"long\"));\nvar _s2Geometry = require(\"s2-geometry\");\nvar MAXIMUM_TOKEN_LENGTH = 16;\n/**\n * Retrieve S2 geometry center\n * @param s2Token string | number\n * @return {*[]}\n */\n\nfunction getS2Center(s2Token) {\n  var paddedToken = s2Token.toString().padEnd(MAXIMUM_TOKEN_LENGTH, '0');\n  var s2Id = _long[\"default\"].fromString(paddedToken, MAXIMUM_TOKEN_LENGTH);\n  var _S2$idToLatLng = _s2Geometry.S2.idToLatLng(s2Id.toString()),\n    lat = _S2$idToLatLng.lat,\n    lng = _S2$idToLatLng.lng;\n  return [lng, lat];\n}\nvar re = new RegExp('^[0-9a-z]*$', 'g'); // simple test to see if token only contains numbers and letters\n\nfunction validS2Token(token) {\n  return typeof token === 'string' && Boolean(token.match(re));\n}","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","getS2Center","validS2Token","_long","_s2Geometry","MAXIMUM_TOKEN_LENGTH","paddedToken","s2Token","toString","padEnd","lat","_S2$idToLatLng","lng","token","Boolean","match","re"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/layers/src/s2-geometry-layer/s2-utils.ts"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport Long from 'long';\nimport {S2} from 's2-geometry';\n\nconst MAXIMUM_TOKEN_LENGTH = 16;\n\n/**\n * Retrieve S2 geometry center\n * @param s2Token string | number\n * @return {*[]}\n */\nexport function getS2Center(s2Token) {\n  const paddedToken = s2Token.toString().padEnd(MAXIMUM_TOKEN_LENGTH, '0');\n  const s2Id = Long.fromString(paddedToken, MAXIMUM_TOKEN_LENGTH);\n  const {lat, lng} = S2.idToLatLng(s2Id.toString());\n  return [lng, lat];\n}\n\nconst re = new RegExp('^[0-9a-z]*$', 'g');\n// simple test to see if token only contains numbers and letters\nexport function validS2Token(token) {\n  return typeof token === 'string' && Boolean(token.match(re));\n}\n"],"mappings":";;;;;;;;;;AAoBA;;AACA;;AArBA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,IAAAA,sBAAA,GAAAC,OAAA;AAEAC,MAAA,CAAAC,cAAA,CAAAC,OAAA;EACAC,KAAA;AACA;AACAD,OAAA,CAAAE,WAAA,GAAAA,WAAA;AACAF,OAAA,CAAAG,YAAA,GAAAA,YAAA;AAEA,IAAAC,KAAA,GAAAR,sBAAA,CAAAC,OAAA;AAEA,IAAAQ,WAAA,GAAAR,OAAA;AAAA,IAAAS,oBAAA;AAKA;AAEA;AACA;AACA;AACA;;;EAEO,IAAAC,WAAS,GAATC,OAAqB,CAArBC,QAA8B,GAAAC,MAAA,CAAAJ,oBAAA;;;IAAAK,GAAA,GAAAC,cAGhB,CAAAD,GAAA;IAAZE,GAH4B,GAAAD,cAAA,CAG5BC,GAH4B;;AAInC;;;;EAKK,OAAS,OAAAC,KAAT,KAAsB,QAAO,IAAAC,OAAA,CAAAD,KAAA,CAAAE,KAAA,CAAAC,EAAA;AAClC"},"metadata":{},"sourceType":"script","externalDependencies":[]}