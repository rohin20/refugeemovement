{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toggleLayerPanelListView = exports.setLocale = exports.setExportHTMLMapMode = exports.setExportMapFormat = exports.setUserMapboxAccessToken = exports.setExportData = exports.setExportFiltered = exports.setExportDataType = exports.setExportSelectedDataset = exports.cleanupExportImage = exports.setExportImageError = exports.setExportImageDataUri = exports.startExportingImage = exports.setExportImageSetting = exports.removeNotification = exports.addNotification = exports.openDeleteModal = exports.setMapControlVisibility = exports.toggleMapControl = exports.hideExportDropdown = exports.showExportDropdown = exports.toggleModal = exports.toggleSidePanel = void 0;\nvar _toolkit = require(\"@reduxjs/toolkit\");\nvar _actionTypes = _interopRequireDefault(require(\"./action-types\")); /**\n                                                                      * Toggle active side panel\n                                                                      * @memberof uiStateActions\n                                                                      * @param id  id of side panel to be shown, one of `layer`, `filter`, `interaction`, `map`\n                                                                      * @public\n                                                                      */\nvar toggleSidePanel = (0, _toolkit.createAction)(_actionTypes[\"default\"].TOGGLE_SIDE_PANEL, function (id) {\n  return {\n    payload: id\n  };\n});\n/** TOGGLE_MODAL */\n\nexports.toggleSidePanel = toggleSidePanel;\n\n/**\n * Show and hide modal dialog\n * @memberof uiStateActions\n * @param id - id of modal to be shown, null to hide modals. One of:\n *  - [`DATA_TABLE_ID`](../constants/default-settings.md#data_table_id)\n *  - [`DELETE_DATA_ID`](../constants/default-settings.md#delete_data_id)\n *  - [`ADD_DATA_ID`](../constants/default-settings.md#add_data_id)\n *  - [`EXPORT_IMAGE_ID`](../constants/default-settings.md#export_image_id)\n *  - [`EXPORT_DATA_ID`](../constants/default-settings.md#export_data_id)\n *  - [`ADD_MAP_STYLE_ID`](../constants/default-settings.md#add_map_style_id)\n * @public\n */\nvar toggleModal = (0, _toolkit.createAction)(_actionTypes[\"default\"].TOGGLE_MODAL, function (id) {\n  return {\n    payload: id\n  };\n});\n/** SHOW_EXPORT_DROPDOWN */\n\nexports.toggleModal = toggleModal;\n\n/**\n * Hide and show side panel header dropdown, activated by clicking the share link on top of the side panel\n * @memberof uiStateActions\n * @param id - id of the dropdown\n * @public\n */\nvar showExportDropdown = (0, _toolkit.createAction)(_actionTypes[\"default\"].SHOW_EXPORT_DROPDOWN, function (id) {\n  return {\n    payload: id\n  };\n});\n/**\n * Hide side panel header dropdown, activated by clicking the share link on top of the side panel\n * @memberof uiStateActions\n * @public\n */\n\nexports.showExportDropdown = showExportDropdown;\nvar hideExportDropdown = (0, _toolkit.createAction)(_actionTypes[\"default\"].HIDE_EXPORT_DROPDOWN);\n/** TOGGLE_MAP_CONTROL */\n\nexports.hideExportDropdown = hideExportDropdown;\n\n/**\n * Toggle active map control panel\n * @memberof uiStateActions\n * @param panelId - map control panel id, one of the keys of: [`DEFAULT_MAP_CONTROLS`](#default_map_controls)\n * @public\n */\nvar toggleMapControl = (0, _toolkit.createAction)(_actionTypes[\"default\"].TOGGLE_MAP_CONTROL, function (panelId, index) {\n  return {\n    payload: {\n      panelId: panelId,\n      index: index\n    }\n  };\n});\n/** SET_MAP_CONTROL_VISIBILITY */\n\nexports.toggleMapControl = toggleMapControl;\n\n/**\n * Toggle active map control panel\n * @memberof uiStateActions\n * @param panelId - map control panel id, one of the keys of: [`DEFAULT_MAP_CONTROLS`](#default_map_controls)\n * @public\n */\nvar setMapControlVisibility = (0, _toolkit.createAction)(_actionTypes[\"default\"].SET_MAP_CONTROL_VISIBILITY, function (panelId, show) {\n  return {\n    payload: {\n      panelId: panelId,\n      show: show\n    }\n  };\n});\n/** OPEN_DELETE_MODAL */\n\nexports.setMapControlVisibility = setMapControlVisibility;\n\n/**\n * Toggle active map control panel\n * @memberof uiStateActions\n * @param datasetId - `id` of the dataset to be deleted\n * @public\n */\nvar openDeleteModal = (0, _toolkit.createAction)(_actionTypes[\"default\"].OPEN_DELETE_MODAL, function (datasetId) {\n  return {\n    payload: datasetId\n  };\n});\n/** ADD_NOTIFICATION */\n\nexports.openDeleteModal = openDeleteModal;\n\n/**\n * Add a notification to be displayed.\n * Existing notification will be updated in case of matching id.\n * @memberof uiStateActions\n * @param notification - The `notification` object to be added or updated\n * @public\n */\nvar addNotification = (0, _toolkit.createAction)(_actionTypes[\"default\"].ADD_NOTIFICATION, function (notification) {\n  return {\n    payload: notification\n  };\n});\n/** REMOVE_NOTIFICATION */\n\nexports.addNotification = addNotification;\n\n/**\n * Remove a notification\n * @memberof uiStateActions\n * @param id - `id` of the notification to be removed\n * @public\n */\nvar removeNotification = (0, _toolkit.createAction)(_actionTypes[\"default\"].REMOVE_NOTIFICATION, function (id) {\n  return {\n    payload: id\n  };\n});\n/** SET_EXPORT_IMAGE_SETTING */\n\nexports.removeNotification = removeNotification;\n\n/**\n * Set `exportImage` settings: ratio, resolution, legend\n * @memberof uiStateActions\n * @param newSetting - {ratio: '1x'}\n * @public\n */\nvar setExportImageSetting = (0, _toolkit.createAction)(_actionTypes[\"default\"].SET_EXPORT_IMAGE_SETTING, function (newSetting) {\n  return {\n    payload: newSetting\n  };\n});\n/**\n * Start exporting image flow\n * @memberof uiStateActions\n * @public\n */\n\nexports.setExportImageSetting = setExportImageSetting;\nvar startExportingImage = (0, _toolkit.createAction)(_actionTypes[\"default\"].START_EXPORTING_IMAGE, function (payload) {\n  return {\n    payload: payload\n  };\n});\n/** SET_EXPORT_IMAGE_DATA_URI */\n\nexports.startExportingImage = startExportingImage;\n\n/**\n * Set `exportImage.setExportImageDataUri` to a dataUri\n * @memberof uiStateActions\n * @param dataUri - export image data uri\n * @public\n */\nvar setExportImageDataUri = (0, _toolkit.createAction)(_actionTypes[\"default\"].SET_EXPORT_IMAGE_DATA_URI, function (dataUri) {\n  return {\n    payload: dataUri\n  };\n});\n/** SET_EXPORT_IMAGE_ERROR */\n\nexports.setExportImageDataUri = setExportImageDataUri;\n\n/**\n * Set Export image error\n * @memberof uiStateActions\n * @public\n */\nvar setExportImageError = (0, _toolkit.createAction)(_actionTypes[\"default\"].SET_EXPORT_IMAGE_ERROR, function (error) {\n  return {\n    payload: error\n  };\n});\n/**\n * Delete cached export image\n * @memberof uiStateActions\n * @public\n */\n\nexports.setExportImageError = setExportImageError;\nvar cleanupExportImage = (0, _toolkit.createAction)(_actionTypes[\"default\"].CLEANUP_EXPORT_IMAGE);\n/** SET_EXPORT_SELECTED_DATASET */\n\nexports.cleanupExportImage = cleanupExportImage;\n\n/**\n * Set selected dataset for export\n * @memberof uiStateActions\n * @param datasetId - dataset id\n * @public\n */\nvar setExportSelectedDataset = (0, _toolkit.createAction)(_actionTypes[\"default\"].SET_EXPORT_SELECTED_DATASET, function (datasetId) {\n  return {\n    payload: datasetId\n  };\n});\n/** SET_EXPORT_DATA_TYPE */\n\nexports.setExportSelectedDataset = setExportSelectedDataset;\n\n/**\n * Set data format for exporting data\n * @memberof uiStateActions\n * @param dataType - one of `'text/csv'`\n * @public\n */\nvar setExportDataType = (0, _toolkit.createAction)(_actionTypes[\"default\"].SET_EXPORT_DATA_TYPE, function (dataType) {\n  return {\n    payload: dataType\n  };\n});\n/** SET_EXPORT_FILTERED */\n\nexports.setExportDataType = setExportDataType;\n\n/**\n * Whether to export filtered data, `true` or `false`\n * @memberof uiStateActions\n * @param payload - set `true` to ony export filtered data\n * @public\n */\nvar setExportFiltered = (0, _toolkit.createAction)(_actionTypes[\"default\"].SET_EXPORT_FILTERED, function (payload) {\n  return {\n    payload: payload\n  };\n});\n/**\n * Whether to including data in map config, toggle between `true` or `false`\n * @memberof uiStateActions\n * @public\n */\n\nexports.setExportFiltered = setExportFiltered;\nvar setExportData = (0, _toolkit.createAction)(_actionTypes[\"default\"].SET_EXPORT_DATA);\n/** SET_USER_MAPBOX_ACCESS_TOKEN */\n\nexports.setExportData = setExportData;\n\n/**\n * Whether we export a mapbox access token used to create a single map html file\n * @memberof uiStateActions\n * @param payload - mapbox access token\n * @public\n */\nvar setUserMapboxAccessToken = (0, _toolkit.createAction)(_actionTypes[\"default\"].SET_USER_MAPBOX_ACCESS_TOKEN, function (payload) {\n  return {\n    payload: payload\n  };\n});\n/** SET_EXPORT_MAP_FORMAT */\n\nexports.setUserMapboxAccessToken = setUserMapboxAccessToken;\n\n/**\n * Set the export map format (html, json)\n * @memberOf uiStateActions\n * @param payload - map format\n * @public\n */\nvar setExportMapFormat = (0, _toolkit.createAction)(_actionTypes[\"default\"].SET_EXPORT_MAP_FORMAT, function (payload) {\n  return {\n    payload: payload\n  };\n});\n/** SET_EXPORT_MAP_HTML_MODE */\n\nexports.setExportMapFormat = setExportMapFormat;\n\n/**\n * Set the HTML mode to use to export HTML mode\n * @memberOf uiStateActions\n * @param payload - map mode\n */\nvar setExportHTMLMapMode = (0, _toolkit.createAction)(_actionTypes[\"default\"].SET_EXPORT_MAP_HTML_MODE, function (payload) {\n  return {\n    payload: payload\n  };\n});\n/** SET_LOCALE */\n\nexports.setExportHTMLMapMode = setExportHTMLMapMode;\n\n/**\n * Set `locale` value\n * @memberof uiStateActions\n * @param locale - locale of the UI\n * @public\n */\nvar setLocale = (0, _toolkit.createAction)(_actionTypes[\"default\"].SET_LOCALE, function (locale) {\n  return {\n    payload: {\n      locale: locale\n    }\n  };\n});\n/** TOGGLE_LAYER_PANEL_LIST_VIEW */\n\nexports.setLocale = setLocale;\n\n/**\n * Toggle layer panel list view\n * @memberof uiStateActions\n * @param listView layer panel listView value. Can be 'list' or 'sortByDataset'\n * @public\n */\nvar toggleLayerPanelListView = (0, _toolkit.createAction)(_actionTypes[\"default\"].TOGGLE_LAYER_PANEL_LIST_VIEW, function (listView) {\n  return {\n    payload: listView\n  };\n});\n/**\n * This declaration is needed to group actions in docs\n */\n\n/**\n * Actions handled mostly by  `uiState` reducer.\n * They manage UI changes in tha app, such as open and close side panel,\n * switch between tabs in the side panel, open and close modal dialog for exporting data / images etc.\n * It also manges which settings are selected during image and map export\n *\n * @public\n */\n\n/* eslint-disable no-unused-vars */\n// @ts-ignore\n\nexports.toggleLayerPanelListView = toggleLayerPanelListView;\nvar uiStateActions = null;\n/* eslint-enable no-unused-vars */","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","toggleLayerPanelListView","setLocale","setExportHTMLMapMode","setExportMapFormat","setUserMapboxAccessToken","setExportData","setExportFiltered","setExportDataType","setExportSelectedDataset","cleanupExportImage","setExportImageError","setExportImageDataUri","startExportingImage","setExportImageSetting","removeNotification","addNotification","openDeleteModal","setMapControlVisibility","toggleMapControl","hideExportDropdown","showExportDropdown","toggleModal","toggleSidePanel","_toolkit","_actionTypes","createAction","TOGGLE_SIDE_PANEL","id","payload","TOGGLE_MODAL","SHOW_EXPORT_DROPDOWN","TOGGLE_MAP_CONTROL","panelId","index","SET_MAP_CONTROL_VISIBILITY","show","OPEN_DELETE_MODAL","datasetId","ADD_NOTIFICATION","notification","REMOVE_NOTIFICATION","SET_EXPORT_IMAGE_SETTING","newSetting","SET_EXPORT_IMAGE_DATA_URI","dataUri","SET_EXPORT_IMAGE_ERROR","error","SET_EXPORT_SELECTED_DATASET","SET_EXPORT_DATA_TYPE","dataType","SET_EXPORT_FILTERED","SET_USER_MAPBOX_ACCESS_TOKEN","SET_EXPORT_MAP_FORMAT","SET_EXPORT_MAP_HTML_MODE","SET_LOCALE","locale","TOGGLE_LAYER_PANEL_LIST_VIEW","listView"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/actions/src/ui-state-actions.ts"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {createAction} from '@reduxjs/toolkit';\nimport {default as ActionTypes} from './action-types';\nimport {Merge} from '@kepler.gl/types';\nimport {ExportImage} from '@kepler.gl/constants';\n\n/** TOGGLE_SIDE_PANEL */\nexport type ToggleSidePanelUpdaterAction = {\n  payload: string;\n};\n/**\n * Toggle active side panel\n * @memberof uiStateActions\n * @param id  id of side panel to be shown, one of `layer`, `filter`, `interaction`, `map`\n * @public\n */\nexport const toggleSidePanel: (\n  id: string\n) => Merge<\n  ToggleSidePanelUpdaterAction,\n  {type: typeof ActionTypes.TOGGLE_SIDE_PANEL}\n> = createAction(ActionTypes.TOGGLE_SIDE_PANEL, (id: string) => ({payload: id}));\n\n/** TOGGLE_MODAL */\nexport type ToggleModalUpdaterAction = {\n  payload: string | null;\n};\n/**\n * Show and hide modal dialog\n * @memberof uiStateActions\n * @param id - id of modal to be shown, null to hide modals. One of:\n *  - [`DATA_TABLE_ID`](../constants/default-settings.md#data_table_id)\n *  - [`DELETE_DATA_ID`](../constants/default-settings.md#delete_data_id)\n *  - [`ADD_DATA_ID`](../constants/default-settings.md#add_data_id)\n *  - [`EXPORT_IMAGE_ID`](../constants/default-settings.md#export_image_id)\n *  - [`EXPORT_DATA_ID`](../constants/default-settings.md#export_data_id)\n *  - [`ADD_MAP_STYLE_ID`](../constants/default-settings.md#add_map_style_id)\n * @public\n */\nexport const toggleModal: (\n  id: ToggleModalUpdaterAction['payload']\n) => Merge<ToggleModalUpdaterAction, {type: typeof ActionTypes.TOGGLE_MODAL}> = createAction(\n  ActionTypes.TOGGLE_MODAL,\n  (id: ToggleModalUpdaterAction['payload']) => ({\n    payload: id\n  })\n);\n\n/** SHOW_EXPORT_DROPDOWN */\nexport type ShowExportDropdownUpdaterAction = {\n  payload: string;\n};\n/**\n * Hide and show side panel header dropdown, activated by clicking the share link on top of the side panel\n * @memberof uiStateActions\n * @param id - id of the dropdown\n * @public\n */\nexport const showExportDropdown: (\n  id: ShowExportDropdownUpdaterAction['payload']\n) => Merge<\n  ShowExportDropdownUpdaterAction,\n  {type: typeof ActionTypes.SHOW_EXPORT_DROPDOWN}\n> = createAction(\n  ActionTypes.SHOW_EXPORT_DROPDOWN,\n  (id: ShowExportDropdownUpdaterAction['payload']) => ({payload: id})\n);\n\n/**\n * Hide side panel header dropdown, activated by clicking the share link on top of the side panel\n * @memberof uiStateActions\n * @public\n */\nexport const hideExportDropdown: () => {\n  type: typeof ActionTypes.HIDE_EXPORT_DROPDOWN;\n} = createAction(ActionTypes.HIDE_EXPORT_DROPDOWN);\n\n/** TOGGLE_MAP_CONTROL */\nexport type ToggleMapControlUpdaterAction = {\n  payload: {\n    panelId: string;\n    index: number;\n  };\n};\n/**\n * Toggle active map control panel\n * @memberof uiStateActions\n * @param panelId - map control panel id, one of the keys of: [`DEFAULT_MAP_CONTROLS`](#default_map_controls)\n * @public\n */\nexport const toggleMapControl: (\n  panelId: ToggleMapControlUpdaterAction['payload']['panelId'],\n  index: ToggleMapControlUpdaterAction['payload']['index']\n) => Merge<\n  ToggleMapControlUpdaterAction,\n  {type: typeof ActionTypes.TOGGLE_MAP_CONTROL}\n> = createAction(\n  ActionTypes.TOGGLE_MAP_CONTROL,\n  (\n    panelId: ToggleMapControlUpdaterAction['payload']['panelId'],\n    index: ToggleMapControlUpdaterAction['payload']['index']\n  ) => ({\n    payload: {\n      panelId,\n      index\n    }\n  })\n);\n\n/** SET_MAP_CONTROL_VISIBILITY */\nexport type setMapControlVisibilityUpdaterAction = {\n  payload: {\n    panelId: string;\n    show: boolean;\n  };\n};\n/**\n * Toggle active map control panel\n * @memberof uiStateActions\n * @param panelId - map control panel id, one of the keys of: [`DEFAULT_MAP_CONTROLS`](#default_map_controls)\n * @public\n */\nexport const setMapControlVisibility: (\n  panelId: setMapControlVisibilityUpdaterAction['payload']['panelId'],\n  show: setMapControlVisibilityUpdaterAction['payload']['show']\n) => Merge<\n  setMapControlVisibilityUpdaterAction,\n  {type: typeof ActionTypes.SET_MAP_CONTROL_VISIBILITY}\n> = createAction(\n  ActionTypes.SET_MAP_CONTROL_VISIBILITY,\n  (\n    panelId: setMapControlVisibilityUpdaterAction['payload']['panelId'],\n    show: setMapControlVisibilityUpdaterAction['payload']['show']\n  ) => ({\n    payload: {\n      panelId,\n      show\n    }\n  })\n);\n\n/** OPEN_DELETE_MODAL */\nexport type OpenDeleteModalUpdaterAction = {\n  payload: string;\n};\n/**\n * Toggle active map control panel\n * @memberof uiStateActions\n * @param datasetId - `id` of the dataset to be deleted\n * @public\n */\nexport const openDeleteModal: (\n  datasetId: OpenDeleteModalUpdaterAction['payload']\n) => Merge<\n  OpenDeleteModalUpdaterAction,\n  {type: typeof ActionTypes.OPEN_DELETE_MODAL}\n> = createAction(\n  ActionTypes.OPEN_DELETE_MODAL,\n  (datasetId: OpenDeleteModalUpdaterAction['payload']) => ({payload: datasetId})\n);\n\n/** ADD_NOTIFICATION */\nexport type AddNotificationUpdaterAction = {\n  payload: object;\n};\n/**\n * Add a notification to be displayed.\n * Existing notification will be updated in case of matching id.\n * @memberof uiStateActions\n * @param notification - The `notification` object to be added or updated\n * @public\n */\nexport const addNotification: (\n  notification: AddNotificationUpdaterAction['payload']\n) => Merge<\n  AddNotificationUpdaterAction,\n  {\n    type: typeof ActionTypes.ADD_NOTIFICATION;\n  }\n> = createAction(\n  ActionTypes.ADD_NOTIFICATION,\n  (notification: AddNotificationUpdaterAction['payload']) => ({payload: notification})\n);\n\n/** REMOVE_NOTIFICATION */\nexport type RemoveNotificationUpdaterAction = {\n  payload: string;\n};\n/**\n * Remove a notification\n * @memberof uiStateActions\n * @param id - `id` of the notification to be removed\n * @public\n */\nexport const removeNotification: (\n  id: RemoveNotificationUpdaterAction['payload']\n) => Merge<\n  RemoveNotificationUpdaterAction,\n  {type: typeof ActionTypes.REMOVE_NOTIFICATION}\n> = createAction(\n  ActionTypes.REMOVE_NOTIFICATION,\n  (id: RemoveNotificationUpdaterAction['payload']) => ({payload: id})\n);\n\n/** SET_EXPORT_IMAGE_SETTING */\nexport type SetExportImageSettingUpdaterAction = {\n  payload: Partial<ExportImage>;\n};\n/**\n * Set `exportImage` settings: ratio, resolution, legend\n * @memberof uiStateActions\n * @param newSetting - {ratio: '1x'}\n * @public\n */\nexport const setExportImageSetting: (\n  newSetting: SetExportImageSettingUpdaterAction['payload']\n) => Merge<\n  SetExportImageSettingUpdaterAction,\n  {type: typeof ActionTypes.SET_EXPORT_IMAGE_SETTING}\n> = createAction(\n  ActionTypes.SET_EXPORT_IMAGE_SETTING,\n  (newSetting: SetExportImageSettingUpdaterAction['payload']) => ({payload: newSetting})\n);\n\n/**\n * Start exporting image flow\n * @memberof uiStateActions\n * @public\n */\nexport const startExportingImage: (options?: {\n  ratio?: string;\n  resolution?: string;\n  legend?: string;\n  center?: boolean;\n}) => Merge<\n  SetExportImageSettingUpdaterAction,\n  {type: typeof ActionTypes.START_EXPORTING_IMAGE}\n> = createAction(ActionTypes.START_EXPORTING_IMAGE, (payload: any) => ({payload}));\n\n/** SET_EXPORT_IMAGE_DATA_URI */\nexport type SetExportImageDataUriUpdaterAction = {\n  payload: string;\n};\n/**\n * Set `exportImage.setExportImageDataUri` to a dataUri\n * @memberof uiStateActions\n * @param dataUri - export image data uri\n * @public\n */\nexport const setExportImageDataUri: (\n  dataUri: SetExportImageDataUriUpdaterAction['payload']\n) => Merge<\n  SetExportImageDataUriUpdaterAction,\n  {type: typeof ActionTypes.SET_EXPORT_IMAGE_DATA_URI}\n> = createAction(\n  ActionTypes.SET_EXPORT_IMAGE_DATA_URI,\n  (dataUri: SetExportImageDataUriUpdaterAction['payload']) => ({payload: dataUri})\n);\n\n/** SET_EXPORT_IMAGE_ERROR */\nexport type SetExportImageErrorUpdaterAction = {\n  payload: Error;\n};\n/**\n * Set Export image error\n * @memberof uiStateActions\n * @public\n */\nexport const setExportImageError: (\n  error: SetExportImageErrorUpdaterAction['payload']\n) => Merge<\n  SetExportImageErrorUpdaterAction,\n  {type: typeof ActionTypes.SET_EXPORT_IMAGE_ERROR}\n> = createAction(\n  ActionTypes.SET_EXPORT_IMAGE_ERROR,\n  (error: SetExportImageErrorUpdaterAction['payload']) => ({payload: error})\n);\n\n/**\n * Delete cached export image\n * @memberof uiStateActions\n * @public\n */\nexport const cleanupExportImage: () => {\n  type: typeof ActionTypes.CLEANUP_EXPORT_IMAGE;\n} = createAction(ActionTypes.CLEANUP_EXPORT_IMAGE);\n\n/** SET_EXPORT_SELECTED_DATASET */\nexport type SetExportSelectedDatasetUpdaterAction = {\n  payload: string;\n};\n/**\n * Set selected dataset for export\n * @memberof uiStateActions\n * @param datasetId - dataset id\n * @public\n */\nexport const setExportSelectedDataset: (\n  datasetId: SetExportSelectedDatasetUpdaterAction['payload']\n) => Merge<\n  SetExportSelectedDatasetUpdaterAction,\n  {type: typeof ActionTypes.SET_EXPORT_SELECTED_DATASET}\n> = createAction(\n  ActionTypes.SET_EXPORT_SELECTED_DATASET,\n  (datasetId: SetExportSelectedDatasetUpdaterAction['payload']) => ({payload: datasetId})\n);\n\n/** SET_EXPORT_DATA_TYPE */\nexport type SetExportDataTypeUpdaterAction = {\n  payload: string;\n};\n/**\n * Set data format for exporting data\n * @memberof uiStateActions\n * @param dataType - one of `'text/csv'`\n * @public\n */\nexport const setExportDataType: (\n  dataType: SetExportDataTypeUpdaterAction['payload']\n) => Merge<\n  SetExportDataTypeUpdaterAction,\n  {type: typeof ActionTypes.SET_EXPORT_DATA_TYPE}\n> = createAction(\n  ActionTypes.SET_EXPORT_DATA_TYPE,\n  (dataType: SetExportDataTypeUpdaterAction['payload']) => ({payload: dataType})\n);\n\n/** SET_EXPORT_FILTERED */\nexport type SetExportFilteredUpdaterAction = {\n  payload: boolean;\n};\n/**\n * Whether to export filtered data, `true` or `false`\n * @memberof uiStateActions\n * @param payload - set `true` to ony export filtered data\n * @public\n */\nexport const setExportFiltered: (\n  exportFiltered: SetExportFilteredUpdaterAction['payload']\n) => Merge<\n  SetExportFilteredUpdaterAction,\n  {type: typeof ActionTypes.SET_EXPORT_FILTERED}\n> = createAction(\n  ActionTypes.SET_EXPORT_FILTERED,\n  (payload: SetExportFilteredUpdaterAction['payload']) => ({payload})\n);\n\n/**\n * Whether to including data in map config, toggle between `true` or `false`\n * @memberof uiStateActions\n * @public\n */\nexport const setExportData: () => {type: typeof ActionTypes.SET_EXPORT_DATA} = createAction(\n  ActionTypes.SET_EXPORT_DATA\n);\n\n/** SET_USER_MAPBOX_ACCESS_TOKEN */\nexport type SetUserMapboxAccessTokenUpdaterAction = {\n  payload: string;\n};\n/**\n * Whether we export a mapbox access token used to create a single map html file\n * @memberof uiStateActions\n * @param payload - mapbox access token\n * @public\n */\nexport const setUserMapboxAccessToken: (\n  payload: SetUserMapboxAccessTokenUpdaterAction['payload']\n) => Merge<\n  SetUserMapboxAccessTokenUpdaterAction,\n  {type: typeof ActionTypes.SET_USER_MAPBOX_ACCESS_TOKEN}\n> = createAction(\n  ActionTypes.SET_USER_MAPBOX_ACCESS_TOKEN,\n  (payload: SetUserMapboxAccessTokenUpdaterAction['payload']) => ({payload})\n);\n\n/** SET_EXPORT_MAP_FORMAT */\nexport type SetExportMapFormatUpdaterAction = {\n  payload: string;\n};\n/**\n * Set the export map format (html, json)\n * @memberOf uiStateActions\n * @param payload - map format\n * @public\n */\nexport const setExportMapFormat: (\n  mapFormat: SetExportMapFormatUpdaterAction['payload']\n) => Merge<\n  SetExportMapFormatUpdaterAction,\n  {type: typeof ActionTypes.SET_EXPORT_MAP_FORMAT}\n> = createAction(\n  ActionTypes.SET_EXPORT_MAP_FORMAT,\n  (payload: SetExportMapFormatUpdaterAction['payload']) => ({payload})\n);\n\n/** SET_EXPORT_MAP_HTML_MODE */\nexport type SetExportHTMLMapModeUpdaterAction = {\n  payload: string;\n};\n/**\n * Set the HTML mode to use to export HTML mode\n * @memberOf uiStateActions\n * @param payload - map mode\n */\nexport const setExportHTMLMapMode: (\n  mode: SetExportHTMLMapModeUpdaterAction['payload']\n) => Merge<\n  SetExportHTMLMapModeUpdaterAction,\n  {type: typeof ActionTypes.SET_EXPORT_MAP_HTML_MODE}\n> = createAction(\n  ActionTypes.SET_EXPORT_MAP_HTML_MODE,\n  (payload: SetExportHTMLMapModeUpdaterAction['payload']) => ({payload})\n);\n\n/** SET_LOCALE */\nexport type SetLocaleUpdaterAction = {\n  payload: {locale: string};\n};\n/**\n * Set `locale` value\n * @memberof uiStateActions\n * @param locale - locale of the UI\n * @public\n */\nexport const setLocale: (\n  locale: SetLocaleUpdaterAction['payload']['locale']\n) => Merge<SetLocaleUpdaterAction, {type: typeof ActionTypes.SET_LOCALE}> = createAction(\n  ActionTypes.SET_LOCALE,\n  (locale: SetLocaleUpdaterAction['payload']['locale']) => ({\n    payload: {\n      locale\n    }\n  })\n);\n\n/** TOGGLE_LAYER_PANEL_LIST_VIEW */\nexport type ToggleLayerPanelListViewAction = {\n  payload: string;\n};\n/**\n * Toggle layer panel list view\n * @memberof uiStateActions\n * @param listView layer panel listView value. Can be 'list' or 'sortByDataset'\n * @public\n */\nexport const toggleLayerPanelListView: (\n  listView: ToggleLayerPanelListViewAction['payload']\n) => Merge<\n  ToggleLayerPanelListViewAction,\n  {type: typeof ActionTypes.TOGGLE_LAYER_PANEL_LIST_VIEW}\n> = createAction(\n  ActionTypes.TOGGLE_LAYER_PANEL_LIST_VIEW,\n  (listView: ToggleLayerPanelListViewAction['payload']) => ({payload: listView})\n);\n\n/**\n * This declaration is needed to group actions in docs\n */\n/**\n * Actions handled mostly by  `uiState` reducer.\n * They manage UI changes in tha app, such as open and close side panel,\n * switch between tabs in the side panel, open and close modal dialog for exporting data / images etc.\n * It also manges which settings are selected during image and map export\n *\n * @public\n */\n/* eslint-disable no-unused-vars */\n// @ts-ignore\nconst uiStateActions = null;\n/* eslint-enable no-unused-vars */\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}