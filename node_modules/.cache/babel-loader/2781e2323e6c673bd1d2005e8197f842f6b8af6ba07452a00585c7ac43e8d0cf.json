{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addNewLayersToSplitMap = addNewLayersToSplitMap;\nexports.removeLayerFromSplitMaps = removeLayerFromSplitMaps;\nexports.getInitialMapLayersForSplitMap = getInitialMapLayersForSplitMap;\nexports.computeSplitMapLayers = computeSplitMapLayers;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _lodash = _interopRequireDefault(require(\"lodash.clonedeep\"));\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\n\n/**\n * Add new layers to both existing maps\n * @param {Object} splitMaps\n * @param {Object|Array<Object>} layers\n * @returns {Array<Object>} new splitMaps\n */\nfunction addNewLayersToSplitMap(splitMaps, layers) {\n  var newLayers = Array.isArray(layers) ? layers : [layers];\n  if (!splitMaps.length || !newLayers.length) {\n    return splitMaps;\n  } // add new layer to both maps,\n  // don't override, if layer.id is already in splitMaps\n\n  return splitMaps.map(function (settings) {\n    return _objectSpread(_objectSpread({}, settings), {}, {\n      layers: _objectSpread(_objectSpread({}, settings.layers), newLayers.reduce(function (accu, newLayer) {\n        return (\n          // @ts-ignore\n          newLayer.id in settings.layers || !newLayer.config.isVisible ? accu : _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2[\"default\"])({}, newLayer.id, newLayer.config.isVisible))\n        );\n      }, {}))\n    });\n  });\n}\n/**\n * Remove an existing layer from split map settings\n * @param {Object} splitMaps\n * @param {Object} layer\n * @returns {Object} Maps of custom layer objects\n */\n\nfunction removeLayerFromSplitMaps(splitMaps, layer) {\n  if (!splitMaps.length) {\n    return splitMaps;\n  }\n  return splitMaps.map(function (settings) {\n    // eslint-disable-next-line no-unused-vars\n    var _settings$layers = settings.layers,\n      _layer$id = layer.id,\n      _ = _settings$layers[_layer$id],\n      newLayers = (0, _objectWithoutProperties2[\"default\"])(_settings$layers, [_layer$id].map(_toPropertyKey));\n    return _objectSpread(_objectSpread({}, settings), {}, {\n      layers: newLayers\n    });\n  });\n}\n/**\n * This method will compute the default maps layer settings\n * based on the current layers visibility\n * @param {Array<Object>} layers\n * @returns {Array<Object>} layer visibility for each panel\n */\n\nfunction getInitialMapLayersForSplitMap(layers) {\n  return layers.filter(function (layer) {\n    return layer.config.isVisible;\n  }).reduce(function (newLayers, currentLayer) {\n    return _objectSpread(_objectSpread({}, newLayers), {}, (0, _defineProperty2[\"default\"])({}, currentLayer.id, currentLayer.config.isVisible));\n  }, {});\n}\n/**\n * This method will get default splitMap settings based on existing layers\n * @param {Array<Object>} layers\n * @returns {Array<Object>} split map settings\n */\n\nfunction computeSplitMapLayers(layers) {\n  var mapLayers = getInitialMapLayersForSplitMap(layers);\n  return [{\n    layers: mapLayers\n  }, {\n    layers: (0, _lodash[\"default\"])(mapLayers)\n  }];\n}","map":{"version":3,"names":["exports","addNewLayersToSplitMap","removeLayerFromSplitMaps","getInitialMapLayersForSplitMap","computeSplitMapLayers","_objectWithoutProperties2","_interopRequireDefault","require","_lodash","_toPropertyKey","arg","key","_toPrimitive","_typeof","String","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","_defineProperty2","getOwnPropertyDescriptors","defineProperties","defineProperty","splitMaps","layers","newLayers","Array","isArray","map","settings","newLayer","id","config","isVisible","accu","layer","_settings$layers","_layer$id","_"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/utils/src/split-map-utils.ts"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport cloneDeep from 'lodash.clonedeep';\n\n/**\n * Add new layers to both existing maps\n * @param {Object} splitMaps\n * @param {Object|Array<Object>} layers\n * @returns {Array<Object>} new splitMaps\n */\nexport function addNewLayersToSplitMap(splitMaps, layers) {\n  const newLayers = Array.isArray(layers) ? layers : [layers];\n\n  if (!splitMaps.length || !newLayers.length) {\n    return splitMaps;\n  }\n\n  // add new layer to both maps,\n  // don't override, if layer.id is already in splitMaps\n  return splitMaps.map(settings => ({\n    ...settings,\n    layers: {\n      ...settings.layers,\n      ...newLayers.reduce(\n        (accu, newLayer) =>\n          // @ts-ignore\n          newLayer.id in settings.layers || !newLayer.config.isVisible\n            ? accu\n            : {\n                ...accu,\n                [newLayer.id]: newLayer.config.isVisible\n              },\n        {}\n      )\n    }\n  }));\n}\n\n/**\n * Remove an existing layer from split map settings\n * @param {Object} splitMaps\n * @param {Object} layer\n * @returns {Object} Maps of custom layer objects\n */\nexport function removeLayerFromSplitMaps(splitMaps, layer) {\n  if (!splitMaps.length) {\n    return splitMaps;\n  }\n  return splitMaps.map(settings => {\n    // eslint-disable-next-line no-unused-vars\n    const {[layer.id]: _, ...newLayers} = settings.layers;\n    return {\n      ...settings,\n      layers: newLayers\n    };\n  });\n}\n\n/**\n * This method will compute the default maps layer settings\n * based on the current layers visibility\n * @param {Array<Object>} layers\n * @returns {Array<Object>} layer visibility for each panel\n */\nexport function getInitialMapLayersForSplitMap(layers) {\n  return layers\n    .filter(layer => layer.config.isVisible)\n    .reduce(\n      (newLayers, currentLayer) => ({\n        ...newLayers,\n        [currentLayer.id]: currentLayer.config.isVisible\n      }),\n      {}\n    );\n}\n\n/**\n * This method will get default splitMap settings based on existing layers\n * @param {Array<Object>} layers\n * @returns {Array<Object>} split map settings\n */\nexport function computeSplitMapLayers(layers) {\n  const mapLayers = getInitialMapLayersForSplitMap(layers);\n\n  return [{layers: mapLayers}, {layers: cloneDeep(mapLayers)}];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}