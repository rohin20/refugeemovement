{"ast":null,"code":"import _defineProperty from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _TEXTURE_FORMATS, _DATA_FORMAT_CHANNELS, _TYPE_SIZES;\nimport { isWebGL2 } from '@luma.gl/gltools';\nexport var TEXTURE_FORMATS = (_TEXTURE_FORMATS = {}, _defineProperty(_TEXTURE_FORMATS, 6407, {\n  dataFormat: 6407,\n  types: [5121, 33635]\n}), _defineProperty(_TEXTURE_FORMATS, 6408, {\n  dataFormat: 6408,\n  types: [5121, 32819, 32820]\n}), _defineProperty(_TEXTURE_FORMATS, 6406, {\n  dataFormat: 6406,\n  types: [5121]\n}), _defineProperty(_TEXTURE_FORMATS, 6409, {\n  dataFormat: 6409,\n  types: [5121]\n}), _defineProperty(_TEXTURE_FORMATS, 6410, {\n  dataFormat: 6410,\n  types: [5121]\n}), _defineProperty(_TEXTURE_FORMATS, 33326, {\n  dataFormat: 6403,\n  types: [5126],\n  gl2: true\n}), _defineProperty(_TEXTURE_FORMATS, 33328, {\n  dataFormat: 33319,\n  types: [5126],\n  gl2: true\n}), _defineProperty(_TEXTURE_FORMATS, 34837, {\n  dataFormat: 6407,\n  types: [5126],\n  gl2: true\n}), _defineProperty(_TEXTURE_FORMATS, 34836, {\n  dataFormat: 6408,\n  types: [5126],\n  gl2: true\n}), _TEXTURE_FORMATS);\nexport var DATA_FORMAT_CHANNELS = (_DATA_FORMAT_CHANNELS = {}, _defineProperty(_DATA_FORMAT_CHANNELS, 6403, 1), _defineProperty(_DATA_FORMAT_CHANNELS, 36244, 1), _defineProperty(_DATA_FORMAT_CHANNELS, 33319, 2), _defineProperty(_DATA_FORMAT_CHANNELS, 33320, 2), _defineProperty(_DATA_FORMAT_CHANNELS, 6407, 3), _defineProperty(_DATA_FORMAT_CHANNELS, 36248, 3), _defineProperty(_DATA_FORMAT_CHANNELS, 6408, 4), _defineProperty(_DATA_FORMAT_CHANNELS, 36249, 4), _defineProperty(_DATA_FORMAT_CHANNELS, 6402, 1), _defineProperty(_DATA_FORMAT_CHANNELS, 34041, 1), _defineProperty(_DATA_FORMAT_CHANNELS, 6406, 1), _defineProperty(_DATA_FORMAT_CHANNELS, 6409, 1), _defineProperty(_DATA_FORMAT_CHANNELS, 6410, 2), _DATA_FORMAT_CHANNELS);\nexport var TYPE_SIZES = (_TYPE_SIZES = {}, _defineProperty(_TYPE_SIZES, 5126, 4), _defineProperty(_TYPE_SIZES, 5125, 4), _defineProperty(_TYPE_SIZES, 5124, 4), _defineProperty(_TYPE_SIZES, 5123, 2), _defineProperty(_TYPE_SIZES, 5122, 2), _defineProperty(_TYPE_SIZES, 5131, 2), _defineProperty(_TYPE_SIZES, 5120, 1), _defineProperty(_TYPE_SIZES, 5121, 1), _TYPE_SIZES);\nexport function isFormatSupported(gl, format) {\n  var info = TEXTURE_FORMATS[format];\n  if (!info) {\n    return false;\n  }\n  if (info.gl1 === undefined && info.gl2 === undefined) {\n    return true;\n  }\n  var value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n  return typeof value === 'string' ? gl.getExtension(value) : value;\n}\nexport function isLinearFilteringSupported(gl, format) {\n  var info = TEXTURE_FORMATS[format];\n  switch (info && info.types[0]) {\n    case 5126:\n      return gl.getExtension('OES_texture_float_linear');\n    case 5131:\n      return gl.getExtension('OES_texture_half_float_linear');\n    default:\n      return true;\n  }\n}","map":{"version":3,"names":["isWebGL2","TEXTURE_FORMATS","_TEXTURE_FORMATS","_defineProperty","dataFormat","types","gl2","DATA_FORMAT_CHANNELS","_DATA_FORMAT_CHANNELS","TYPE_SIZES","_TYPE_SIZES","isFormatSupported","gl","format","info","gl1","undefined","value","getExtension","isLinearFilteringSupported"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@luma.gl/webgl/src/classes/texture-formats.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {isWebGL2} from '@luma.gl/gltools';\n\n// const S3TC = 'WEBGL_compressed_texture_s3tc';\n// const PVRTC = 'WEBGL_compressed_texture_pvrtc';\n// const ES3 = 'WEBGL_compressed_texture_es3';\n// const ETC1 = 'WEBGL_compressed_texture_etc1';\n// const SRGB = 'EXT_sRGB';\n// const DEPTH = 'WEBGL_depth_texture';\n\n// Legal combinations for internalFormat, format and type\nexport const TEXTURE_FORMATS = {\n  // Unsized texture format - more performance\n  [GL.RGB]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5]},\n  // TODO: format: GL.RGBA type: GL.FLOAT is supported in WebGL1 when 'OES_texure_float' is suported\n  // we need to update this table structure to specify extensions (gl1: 'OES_texure_float', gl2: false) for each type.\n  [GL.RGBA]: {\n    dataFormat: GL.RGBA,\n    types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4, GL.UNSIGNED_SHORT_5_5_5_1]\n  },\n  [GL.ALPHA]: {dataFormat: GL.ALPHA, types: [GL.UNSIGNED_BYTE]},\n  [GL.LUMINANCE]: {dataFormat: GL.LUMINANCE, types: [GL.UNSIGNED_BYTE]},\n  [GL.LUMINANCE_ALPHA]: {dataFormat: GL.LUMINANCE_ALPHA, types: [GL.UNSIGNED_BYTE]},\n\n  // 32 bit floats\n  [GL.R32F]: {dataFormat: GL.RED, types: [GL.FLOAT], gl2: true},\n  [GL.RG32F]: {dataFormat: GL.RG, types: [GL.FLOAT], gl2: true},\n  [GL.RGB32F]: {dataFormat: GL.RGB, types: [GL.FLOAT], gl2: true},\n  [GL.RGBA32F]: {dataFormat: GL.RGBA, types: [GL.FLOAT], gl2: true}\n\n  // [GL.DEPTH_COMPONENT]: {types: [GL.UNSIGNED_SHORT, GL.UNSIGNED_INT, GL.UNSIGNED_INT_24_8], gl1: DEPTH},\n  // [GL.DEPTH_STENCIL]: {gl1: DEPTH},\n\n  // Sized texture format - more performance\n  // R\n  // [GL.R8]: {dataFormat: GL.RED, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // [GL.R16F]: {dataFormat: GL.RED, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.R8UI]: {dataFormat: GL.RED_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RG\n  // [GL.RG8]: {dataFormat: GL.RG, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // [GL.RG16F]: {dataFormat: GL.RG, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RG8UI]: {dataFormat: GL.RG_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RGB\n  // [GL.RGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.SRGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.RGB565]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5], gl2: true},\n  // [GL.R11F_G11F_B10F]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_INT_10F_11F_11F_REV, GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RGB9_E5]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_half_float'},\n  // [GL.RGB16F]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_float'},\n  // [GL.RGB8UI]: {dataFormat: GL.RGB_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},\n  // // RGBA\n  // [GL.RGBA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.SRGB8_ALPHA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},\n  // [GL.RGB5_A1]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_5_5_1], gl2: true},\n  // [GL.RGBA4]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4], gl2: true},\n  // [GL.RGBA16F]: {dataFormat: GL.RGBA, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},\n  // [GL.RGBA8UI]: {dataFormat: GL.RGBA_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true}\n\n  // Compressed formats\n\n  // WEBGL_compressed_texture_s3tc\n\n  // [GL.COMPRESSED_RGB_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT3_EXT]: {compressed: true, gl1: S3TC},\n  // [GL.COMPRESSED_RGBA_S3TC_DXT5_EXT]: {compressed: true, gl1: S3TC},\n\n  // WEBGL_compressed_texture_es3\n\n  // [GL.COMPRESSED_R11_EAC]: {compressed: true, gl1: ES3}, // RED\n  // [GL.COMPRESSED_SIGNED_R11_EAC]: {compressed: true, gl1: ES3}, // RED\n  // [GL.COMPRESSED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG\n  // [GL.COMPRESSED_SIGNED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG\n  // [GL.COMPRESSED_RGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB\n  // [GL.COMPRESSED_RGBA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RBG\n  // [GL.COMPRESSED_SRGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB\n  // [GL.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RGBA\n  // [GL.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA\n  // [GL.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA\n  /* WebGL2 guaranteed availability compressed formats?\n  COMPRESSED_R11_EAC RED\n  COMPRESSED_SIGNED_R11_EAC RED\n  COMPRESSED_RG11_EAC RG\n  COMPRESSED_SIGNED_RG11_EAC RG\n  COMPRESSED_RGB8_ETC2 RGB\n  COMPRESSED_SRGB8_ETC2 RGB\n  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA\n  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA\n  COMPRESSED_RGBA8_ETC2_EAC RGBA\n  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC\n  */\n\n  // WEBGL_compressed_texture_pvrtc\n\n  // [GL.COMPRESSED_RGB_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGB_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n  // [GL.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},\n\n  // WEBGL_compressed_texture_etc1\n\n  // [GL.COMPRESSED_RGB_ETC1_WEBGL]: {compressed: true, gl1: ETC1},\n\n  // WEBGL_compressed_texture_atc\n\n  // [GL.COMPRESSED_RGB_ATC_WEBGL]: {compressed: true, gl1: ETC1},\n  // [GL.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL]: {compressed: true, gl1: ETC1},\n  // [GL.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL]: {compressed: true, gl1: ETC1}\n};\n\nexport const DATA_FORMAT_CHANNELS = {\n  [GL.RED]: 1,\n  [GL.RED_INTEGER]: 1,\n  [GL.RG]: 2,\n  [GL.RG_INTEGER]: 2,\n  [GL.RGB]: 3,\n  [GL.RGB_INTEGER]: 3,\n  [GL.RGBA]: 4,\n  [GL.RGBA_INTEGER]: 4,\n  [GL.DEPTH_COMPONENT]: 1,\n  [GL.DEPTH_STENCIL]: 1,\n  [GL.ALPHA]: 1,\n  [GL.LUMINANCE]: 1,\n  [GL.LUMINANCE_ALPHA]: 2\n};\n\nexport const TYPE_SIZES = {\n  [GL.FLOAT]: 4,\n  [GL.UNSIGNED_INT]: 4,\n  [GL.INT]: 4,\n  [GL.UNSIGNED_SHORT]: 2,\n  [GL.SHORT]: 2,\n  [GL.HALF_FLOAT]: 2,\n  [GL.BYTE]: 1,\n  [GL.UNSIGNED_BYTE]: 1\n};\n\nexport function isFormatSupported(gl, format) {\n  const info = TEXTURE_FORMATS[format];\n  if (!info) {\n    return false;\n  }\n  if (info.gl1 === undefined && info.gl2 === undefined) {\n    // No info - always supported\n    return true;\n  }\n  const value = isWebGL2(gl) ? info.gl2 || info.gl1 : info.gl1;\n  return typeof value === 'string' ? gl.getExtension(value) : value;\n}\n\nexport function isLinearFilteringSupported(gl, format) {\n  const info = TEXTURE_FORMATS[format];\n  switch (info && info.types[0]) {\n    // Both WebGL1 and WebGL2?\n    case GL.FLOAT:\n      return gl.getExtension('OES_texture_float_linear');\n    // Not in WebGL2?\n    case GL.HALF_FLOAT:\n      return gl.getExtension('OES_texture_half_float_linear');\n    default:\n      return true;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}