{"ast":null,"code":"import _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { log } from '@deck.gl/core';\nimport { ISOLINES_CODE_OFFSET_MAP, ISOBANDS_CODE_OFFSET_MAP } from './marching-squares-codes';\nexport var CONTOUR_TYPE = {\n  ISO_LINES: 1,\n  ISO_BANDS: 2\n};\nvar DEFAULT_THRESHOLD_DATA = {\n  zIndex: 0,\n  zOffset: 0.005\n};\nfunction getVertexCode(weight, threshold) {\n  if (Array.isArray(threshold)) {\n    if (weight < threshold[0]) {\n      return 0;\n    }\n    return weight < threshold[1] ? 1 : 2;\n  }\n  return weight >= threshold ? 1 : 0;\n}\nexport function getCode(opts) {\n  var cellWeights = opts.cellWeights,\n    x = opts.x,\n    y = opts.y,\n    width = opts.width,\n    height = opts.height;\n  var threshold = opts.threshold;\n  if (opts.thresholdValue) {\n    log.deprecated('thresholdValue', 'threshold')();\n    threshold = opts.thresholdValue;\n  }\n  var isLeftBoundary = x < 0;\n  var isRightBoundary = x >= width - 1;\n  var isBottomBoundary = y < 0;\n  var isTopBoundary = y >= height - 1;\n  var isBoundary = isLeftBoundary || isRightBoundary || isBottomBoundary || isTopBoundary;\n  var weights = {};\n  var codes = {};\n  if (isLeftBoundary || isTopBoundary) {\n    codes.top = 0;\n  } else {\n    weights.top = cellWeights[(y + 1) * width + x];\n    codes.top = getVertexCode(weights.top, threshold);\n  }\n  if (isRightBoundary || isTopBoundary) {\n    codes.topRight = 0;\n  } else {\n    weights.topRight = cellWeights[(y + 1) * width + x + 1];\n    codes.topRight = getVertexCode(weights.topRight, threshold);\n  }\n  if (isRightBoundary || isBottomBoundary) {\n    codes.right = 0;\n  } else {\n    weights.right = cellWeights[y * width + x + 1];\n    codes.right = getVertexCode(weights.right, threshold);\n  }\n  if (isLeftBoundary || isBottomBoundary) {\n    codes.current = 0;\n  } else {\n    weights.current = cellWeights[y * width + x];\n    codes.current = getVertexCode(weights.current, threshold);\n  }\n  var top = codes.top,\n    topRight = codes.topRight,\n    right = codes.right,\n    current = codes.current;\n  var code = -1;\n  if (Number.isFinite(threshold)) {\n    code = top << 3 | topRight << 2 | right << 1 | current;\n  }\n  if (Array.isArray(threshold)) {\n    code = top << 6 | topRight << 4 | right << 2 | current;\n  }\n  var meanCode = 0;\n  if (!isBoundary) {\n    meanCode = getVertexCode((weights.top + weights.topRight + weights.right + weights.current) / 4, threshold);\n  }\n  return {\n    code: code,\n    meanCode: meanCode\n  };\n}\nexport function getVertices(opts) {\n  var gridOrigin = opts.gridOrigin,\n    cellSize = opts.cellSize,\n    x = opts.x,\n    y = opts.y,\n    code = opts.code,\n    meanCode = opts.meanCode,\n    _opts$type = opts.type,\n    type = _opts$type === void 0 ? CONTOUR_TYPE.ISO_LINES : _opts$type;\n  var thresholdData = _objectSpread(_objectSpread({}, DEFAULT_THRESHOLD_DATA), opts.thresholdData);\n  var offsets = type === CONTOUR_TYPE.ISO_BANDS ? ISOBANDS_CODE_OFFSET_MAP[code] : ISOLINES_CODE_OFFSET_MAP[code];\n  if (!Array.isArray(offsets)) {\n    offsets = offsets[meanCode];\n  }\n  var vZ = thresholdData.zIndex * thresholdData.zOffset;\n  var rX = (x + 1) * cellSize[0];\n  var rY = (y + 1) * cellSize[1];\n  var refVertexX = gridOrigin[0] + rX;\n  var refVertexY = gridOrigin[1] + rY;\n  if (type === CONTOUR_TYPE.ISO_BANDS) {\n    var polygons = [];\n    offsets.forEach(function (polygonOffsets) {\n      var polygon = [];\n      polygonOffsets.forEach(function (xyOffset) {\n        var vX = refVertexX + xyOffset[0] * cellSize[0];\n        var vY = refVertexY + xyOffset[1] * cellSize[1];\n        polygon.push([vX, vY, vZ]);\n      });\n      polygons.push(polygon);\n    });\n    return polygons;\n  }\n  var lines = [];\n  offsets.forEach(function (xyOffsets) {\n    xyOffsets.forEach(function (offset) {\n      var vX = refVertexX + offset[0] * cellSize[0];\n      var vY = refVertexY + offset[1] * cellSize[1];\n      lines.push([vX, vY, vZ]);\n    });\n  });\n  return lines;\n}","map":{"version":3,"names":["log","ISOLINES_CODE_OFFSET_MAP","ISOBANDS_CODE_OFFSET_MAP","CONTOUR_TYPE","ISO_LINES","ISO_BANDS","DEFAULT_THRESHOLD_DATA","zIndex","zOffset","getVertexCode","weight","threshold","Array","isArray","getCode","opts","cellWeights","x","y","width","height","thresholdValue","deprecated","isLeftBoundary","isRightBoundary","isBottomBoundary","isTopBoundary","isBoundary","weights","codes","top","topRight","right","current","code","Number","isFinite","meanCode","getVertices","gridOrigin","cellSize","_opts$type","type","thresholdData","_objectSpread","offsets","vZ","rX","rY","refVertexX","refVertexY","polygons","forEach","polygonOffsets","polygon","xyOffset","vX","vY","push","lines","xyOffsets","offset"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/aggregation-layers/src/contour-layer/marching-squares.js"],"sourcesContent":["// All utility methods needed to implement Marching Squares algorithm\n// Ref: https://en.wikipedia.org/wiki/Marching_squares\n\nimport {log} from '@deck.gl/core';\nimport {ISOLINES_CODE_OFFSET_MAP, ISOBANDS_CODE_OFFSET_MAP} from './marching-squares-codes';\n\nexport const CONTOUR_TYPE = {\n  ISO_LINES: 1,\n  ISO_BANDS: 2\n};\n\nconst DEFAULT_THRESHOLD_DATA = {\n  zIndex: 0,\n  zOffset: 0.005\n};\n\n// Utility methods\n\nfunction getVertexCode(weight, threshold) {\n  // threshold must be a single value or a range (array of size 2)\n\n  // Iso-bands\n  if (Array.isArray(threshold)) {\n    if (weight < threshold[0]) {\n      return 0;\n    }\n    return weight < threshold[1] ? 1 : 2;\n  }\n  // Iso-lines\n  return weight >= threshold ? 1 : 0;\n}\n\n// Returns marching square code for given cell\n/* eslint-disable complexity, max-statements*/\nexport function getCode(opts) {\n  // Assumptions\n  // Origin is on bottom-left , and X increase to right, Y to top\n  // When processing one cell, we process 4 cells, by extending row to top and on column to right\n  // to create a 2X2 cell grid\n  const {cellWeights, x, y, width, height} = opts;\n  let threshold = opts.threshold;\n  if (opts.thresholdValue) {\n    log.deprecated('thresholdValue', 'threshold')();\n    threshold = opts.thresholdValue;\n  }\n\n  const isLeftBoundary = x < 0;\n  const isRightBoundary = x >= width - 1;\n  const isBottomBoundary = y < 0;\n  const isTopBoundary = y >= height - 1;\n  const isBoundary = isLeftBoundary || isRightBoundary || isBottomBoundary || isTopBoundary;\n\n  const weights = {};\n  const codes = {};\n\n  // TOP\n  if (isLeftBoundary || isTopBoundary) {\n    codes.top = 0;\n  } else {\n    weights.top = cellWeights[(y + 1) * width + x];\n    codes.top = getVertexCode(weights.top, threshold);\n  }\n\n  // TOP-RIGHT\n  if (isRightBoundary || isTopBoundary) {\n    codes.topRight = 0;\n  } else {\n    weights.topRight = cellWeights[(y + 1) * width + x + 1];\n    codes.topRight = getVertexCode(weights.topRight, threshold);\n  }\n\n  // RIGHT\n  if (isRightBoundary || isBottomBoundary) {\n    codes.right = 0;\n  } else {\n    weights.right = cellWeights[y * width + x + 1];\n    codes.right = getVertexCode(weights.right, threshold);\n  }\n\n  // CURRENT\n  if (isLeftBoundary || isBottomBoundary) {\n    codes.current = 0;\n  } else {\n    weights.current = cellWeights[y * width + x];\n    codes.current = getVertexCode(weights.current, threshold);\n  }\n\n  const {top, topRight, right, current} = codes;\n  let code = -1;\n  if (Number.isFinite(threshold)) {\n    code = (top << 3) | (topRight << 2) | (right << 1) | current;\n  }\n  if (Array.isArray(threshold)) {\n    code = (top << 6) | (topRight << 4) | (right << 2) | current;\n  }\n\n  let meanCode = 0;\n  // meanCode is only needed for saddle cases, and they should\n  // only occur when we are not processing a cell on boundary\n  // because when on a boundary either, bottom-row, top-row, left-column or right-column will have both 0 codes\n  if (!isBoundary) {\n    meanCode = getVertexCode(\n      (weights.top + weights.topRight + weights.right + weights.current) / 4,\n      threshold\n    );\n  }\n  return {code, meanCode};\n}\n/* eslint-enable complexity, max-statements*/\n\n// Returns intersection vertices for given cellindex\n// [x, y] refers current marching cell, reference vertex is always top-right corner\nexport function getVertices(opts) {\n  const {gridOrigin, cellSize, x, y, code, meanCode, type = CONTOUR_TYPE.ISO_LINES} = opts;\n  const thresholdData = {...DEFAULT_THRESHOLD_DATA, ...opts.thresholdData};\n  let offsets =\n    type === CONTOUR_TYPE.ISO_BANDS\n      ? ISOBANDS_CODE_OFFSET_MAP[code]\n      : ISOLINES_CODE_OFFSET_MAP[code];\n\n  // handle saddle cases\n  if (!Array.isArray(offsets)) {\n    offsets = offsets[meanCode];\n  }\n\n  // Reference vertex is at top-right move to top-right corner\n\n  const vZ = thresholdData.zIndex * thresholdData.zOffset;\n  const rX = (x + 1) * cellSize[0];\n  const rY = (y + 1) * cellSize[1];\n\n  const refVertexX = gridOrigin[0] + rX;\n  const refVertexY = gridOrigin[1] + rY;\n\n  // offsets format\n  // ISO_LINES: [[1A, 1B], [2A, 2B]],\n  // ISO_BANDS: [[1A, 1B, 1C, ...], [2A, 2B, 2C, ...]],\n\n  // vertices format\n\n  // ISO_LINES: [[x1A, y1A], [x1B, y1B], [x2A, x2B], ...],\n\n  // ISO_BANDS:  => confirms to SolidPolygonLayer's simple polygon format\n  //      [\n  //        [[x1A, y1A], [x1B, y1B], [x1C, y1C] ... ],\n  //        ...\n  //      ]\n\n  if (type === CONTOUR_TYPE.ISO_BANDS) {\n    const polygons = [];\n    offsets.forEach(polygonOffsets => {\n      const polygon = [];\n      polygonOffsets.forEach(xyOffset => {\n        const vX = refVertexX + xyOffset[0] * cellSize[0];\n        const vY = refVertexY + xyOffset[1] * cellSize[1];\n        polygon.push([vX, vY, vZ]);\n      });\n      polygons.push(polygon);\n    });\n    return polygons;\n  }\n\n  // default case is ISO_LINES\n  const lines = [];\n  offsets.forEach(xyOffsets => {\n    xyOffsets.forEach(offset => {\n      const vX = refVertexX + offset[0] * cellSize[0];\n      const vY = refVertexY + offset[1] * cellSize[1];\n      lines.push([vX, vY, vZ]);\n    });\n  });\n  return lines;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}