{"ast":null,"code":"'use strict';\n\nvar invariant = require('../../vendor/invariant');\nvar makeService = require('../make_service');\n\n/**\n * @class MapboxTokens\n */\nvar MapboxTokens = module.exports = makeService('MapboxTokens');\nvar API_TOKENS_LIST = '/tokens/v2/{owner}{?access_token}';\nvar API_TOKENS_CREATE = '/tokens/v2/{owner}{?access_token}';\nvar API_TOKENS_UPDATE_AUTHORIZATION = '/tokens/v2/{owner}/{authorization_id}{?access_token}';\nvar API_TOKENS_DELETE_AUTHORIZATION = '/tokens/v2/{owner}/{authorization_id}{?access_token}';\nvar API_TOKENS_RETRIEVE = '/tokens/v2{?access_token}';\nvar API_TOKENS_LIST_SCOPES = '/scopes/v1/{owner}{?access_token}';\n\n/**\n * To retrieve a listing of tokens for a particular account.\n *\n * @param {Function} [callback] called with (err, tokens, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.listTokens(function(err, tokens) {\n *   console.log(tokens);\n *   // [{ client: 'api'\n *   //  note: 'Default Public Token',\n *   //  usage: 'pk',\n *   //  id: 'TOKENID',\n *   //  default: true,\n *   //  scopes: ['styles:tiles','styles:read','fonts:read','datasets:read'],\n *   //  created: '2016-02-09T14:26:15.059Z',\n *   //  modified: '2016-02-09T14:28:31.253Z',\n *   //  token: 'pk.TOKEN' }]\n * });\n */\nMapboxTokens.prototype.listTokens = function (callback) {\n  return this.client({\n    path: API_TOKENS_LIST,\n    params: {\n      owner: this.owner\n    },\n    callback: callback\n  });\n};\n\n/**\n * Create a token\n *\n * @param {string} note Note attached to the token\n * @param {Array} scopes List of scopes for the new token\n * @param {Function} [callback] called with (err, token, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.createToken('My top secret project', [\"styles:read\", \"fonts:read\"], function(err, createdToken) {\n *   console.log(createdToken);\n * });\n */\nMapboxTokens.prototype.createToken = function (note, scopes, callback) {\n  invariant(typeof note === 'string', 'note must be a string');\n  invariant(Object.prototype.toString.call(scopes) === '[object Array]', 'scopes must be an array');\n  return this.client({\n    path: API_TOKENS_CREATE,\n    params: {\n      owner: this.owner\n    },\n    entity: {\n      scopes: scopes,\n      note: note\n    },\n    callback: callback\n  });\n};\n\n/**\n * Create a temporary token\n *\n * @param {string} expires Time token expires in RFC 3339\n * @param {Array} scopes List of scopes for the new token\n * @param {Function} [callback] called with (err, token, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.createTemporaryToken('2016-09-15T19:27:53.000Z', [\"styles:read\", \"fonts:read\"], function(err, createdToken) {\n *   console.log(createdToken);\n * });\n */\nMapboxTokens.prototype.createTemporaryToken = function (expires, scopes, callback) {\n  invariant(typeof expires === 'string', 'expires must be a string');\n  invariant(Object.prototype.toString.call(scopes) === '[object Array]', 'scopes must be an array');\n  return this.client({\n    path: API_TOKENS_CREATE,\n    params: {\n      owner: this.owner\n    },\n    entity: {\n      scopes: scopes,\n      expires: expires\n    },\n    callback: callback\n  });\n};\n\n/**\n * Update a token's authorization\n *\n * @param {string} authorization_id Authorization ID\n * @param {Array} scopes List of scopes for the new token\n * @param {Function} [callback] called with (err, token, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.updateTokenAuthorization('auth id', [\"styles:read\", \"fonts:read\"], function(err, updatedToken) {\n *   console.log(updatedToken);\n * });\n */\nMapboxTokens.prototype.updateTokenAuthorization = function (authorization_id, scopes, callback) {\n  invariant(typeof authorization_id === 'string', 'authorization_id must be a string');\n  invariant(Object.prototype.toString.call(scopes) === '[object Array]', 'scopes must be an array');\n  return this.client({\n    path: API_TOKENS_UPDATE_AUTHORIZATION,\n    params: {\n      authorization_id: authorization_id,\n      owner: this.owner\n    },\n    entity: {\n      scopes: scopes\n    },\n    method: 'patch',\n    callback: callback\n  });\n};\n\n/**\n * Delete a token's authorization\n *\n * @param {string} authorization_id Authorization ID\n * @param {Function} [callback] called with (err, token, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.deleteTokenAuthorization('auth id', function(err) {\n * });\n */\nMapboxTokens.prototype.deleteTokenAuthorization = function (authorization_id, callback) {\n  invariant(typeof authorization_id === 'string', 'authorization_id must be a string');\n  return this.client({\n    path: API_TOKENS_DELETE_AUTHORIZATION,\n    params: {\n      authorization_id: authorization_id,\n      owner: this.owner\n    },\n    method: 'delete',\n    callback: callback\n  });\n};\n\n/**\n * Retrieve a token\n *\n * @param {string} access_token access token to check\n * @param {Function} [callback] called with (err, token, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.retrieveToken('ACCESSTOKEN', function(err, tokenResponse) {\n *   console.log(tokenResponse);\n * });\n */\nMapboxTokens.prototype.retrieveToken = function (access_token, callback) {\n  invariant(typeof access_token === 'string', 'access_token must be a string');\n  return this.client({\n    path: API_TOKENS_RETRIEVE,\n    params: {\n      access_token: access_token\n    },\n    callback: callback\n  });\n};\n\n/**\n * List scopes\n *\n * @param {Function} [callback] called with (err, scopes, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.listScopes(function(err, scopes) {\n *   console.log(scopes);\n * });\n */\nMapboxTokens.prototype.listScopes = function (callback) {\n  return this.client({\n    path: API_TOKENS_LIST_SCOPES,\n    params: {\n      owner: this.owner\n    },\n    callback: callback\n  });\n};","map":{"version":3,"names":["invariant","require","makeService","MapboxTokens","module","exports","API_TOKENS_LIST","API_TOKENS_CREATE","API_TOKENS_UPDATE_AUTHORIZATION","API_TOKENS_DELETE_AUTHORIZATION","API_TOKENS_RETRIEVE","API_TOKENS_LIST_SCOPES","prototype","listTokens","callback","client","path","params","owner","createToken","note","scopes","Object","toString","call","entity","createTemporaryToken","expires","updateTokenAuthorization","authorization_id","method","deleteTokenAuthorization","retrieveToken","access_token","listScopes"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/mapbox/lib/services/tokens.js"],"sourcesContent":["'use strict';\n\nvar invariant = require('../../vendor/invariant');\nvar makeService = require('../make_service');\n\n/**\n * @class MapboxTokens\n */\nvar MapboxTokens = module.exports = makeService('MapboxTokens');\n\nvar API_TOKENS_LIST = '/tokens/v2/{owner}{?access_token}';\nvar API_TOKENS_CREATE = '/tokens/v2/{owner}{?access_token}';\nvar API_TOKENS_UPDATE_AUTHORIZATION = '/tokens/v2/{owner}/{authorization_id}{?access_token}';\nvar API_TOKENS_DELETE_AUTHORIZATION = '/tokens/v2/{owner}/{authorization_id}{?access_token}';\nvar API_TOKENS_RETRIEVE = '/tokens/v2{?access_token}';\nvar API_TOKENS_LIST_SCOPES = '/scopes/v1/{owner}{?access_token}';\n\n/**\n * To retrieve a listing of tokens for a particular account.\n *\n * @param {Function} [callback] called with (err, tokens, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.listTokens(function(err, tokens) {\n *   console.log(tokens);\n *   // [{ client: 'api'\n *   //  note: 'Default Public Token',\n *   //  usage: 'pk',\n *   //  id: 'TOKENID',\n *   //  default: true,\n *   //  scopes: ['styles:tiles','styles:read','fonts:read','datasets:read'],\n *   //  created: '2016-02-09T14:26:15.059Z',\n *   //  modified: '2016-02-09T14:28:31.253Z',\n *   //  token: 'pk.TOKEN' }]\n * });\n */\nMapboxTokens.prototype.listTokens = function(callback) {\n  return this.client({\n    path: API_TOKENS_LIST,\n    params: {\n      owner: this.owner\n    },\n    callback: callback\n  });\n};\n\n/**\n * Create a token\n *\n * @param {string} note Note attached to the token\n * @param {Array} scopes List of scopes for the new token\n * @param {Function} [callback] called with (err, token, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.createToken('My top secret project', [\"styles:read\", \"fonts:read\"], function(err, createdToken) {\n *   console.log(createdToken);\n * });\n */\nMapboxTokens.prototype.createToken = function(note, scopes, callback) {\n  invariant(typeof note === 'string', 'note must be a string');\n  invariant(Object.prototype.toString.call(scopes) === '[object Array]', 'scopes must be an array');\n\n  return this.client({\n    path: API_TOKENS_CREATE,\n    params: {\n      owner: this.owner\n    },\n    entity: {\n      scopes: scopes,\n      note: note\n    },\n    callback: callback\n  });\n};\n\n/**\n * Create a temporary token\n *\n * @param {string} expires Time token expires in RFC 3339\n * @param {Array} scopes List of scopes for the new token\n * @param {Function} [callback] called with (err, token, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.createTemporaryToken('2016-09-15T19:27:53.000Z', [\"styles:read\", \"fonts:read\"], function(err, createdToken) {\n *   console.log(createdToken);\n * });\n */\nMapboxTokens.prototype.createTemporaryToken = function(expires, scopes, callback) {\n  invariant(typeof expires === 'string', 'expires must be a string');\n  invariant(Object.prototype.toString.call(scopes) === '[object Array]', 'scopes must be an array');\n\n  return this.client({\n    path: API_TOKENS_CREATE,\n    params: {\n      owner: this.owner\n    },\n    entity: {\n      scopes: scopes,\n      expires: expires\n    },\n    callback: callback\n  });\n};\n\n/**\n * Update a token's authorization\n *\n * @param {string} authorization_id Authorization ID\n * @param {Array} scopes List of scopes for the new token\n * @param {Function} [callback] called with (err, token, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.updateTokenAuthorization('auth id', [\"styles:read\", \"fonts:read\"], function(err, updatedToken) {\n *   console.log(updatedToken);\n * });\n */\nMapboxTokens.prototype.updateTokenAuthorization = function(authorization_id, scopes, callback) {\n  invariant(typeof authorization_id === 'string', 'authorization_id must be a string');\n  invariant(Object.prototype.toString.call(scopes) === '[object Array]', 'scopes must be an array');\n\n  return this.client({\n    path: API_TOKENS_UPDATE_AUTHORIZATION,\n    params: {\n      authorization_id: authorization_id,\n      owner: this.owner\n    },\n    entity: {\n      scopes: scopes\n    },\n    method: 'patch',\n    callback: callback\n  });\n};\n\n/**\n * Delete a token's authorization\n *\n * @param {string} authorization_id Authorization ID\n * @param {Function} [callback] called with (err, token, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.deleteTokenAuthorization('auth id', function(err) {\n * });\n */\nMapboxTokens.prototype.deleteTokenAuthorization = function(authorization_id, callback) {\n  invariant(typeof authorization_id === 'string', 'authorization_id must be a string');\n\n  return this.client({\n    path: API_TOKENS_DELETE_AUTHORIZATION,\n    params: {\n      authorization_id: authorization_id,\n      owner: this.owner\n    },\n    method: 'delete',\n    callback: callback\n  });\n};\n\n/**\n * Retrieve a token\n *\n * @param {string} access_token access token to check\n * @param {Function} [callback] called with (err, token, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.retrieveToken('ACCESSTOKEN', function(err, tokenResponse) {\n *   console.log(tokenResponse);\n * });\n */\nMapboxTokens.prototype.retrieveToken = function(access_token, callback) {\n  invariant(typeof access_token === 'string', 'access_token must be a string');\n\n  return this.client({\n    path: API_TOKENS_RETRIEVE,\n    params: {\n      access_token: access_token\n    },\n    callback: callback\n  });\n};\n\n/**\n * List scopes\n *\n * @param {Function} [callback] called with (err, scopes, response)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.listScopes(function(err, scopes) {\n *   console.log(scopes);\n * });\n */\nMapboxTokens.prototype.listScopes = function(callback) {\n  return this.client({\n    path: API_TOKENS_LIST_SCOPES,\n    params: {\n      owner: this.owner\n    },\n    callback: callback\n  });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}