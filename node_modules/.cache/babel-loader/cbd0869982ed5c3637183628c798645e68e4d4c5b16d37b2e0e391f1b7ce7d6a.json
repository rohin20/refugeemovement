{"ast":null,"code":"import _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { getPolygonSignedArea } from '@math.gl/polygon';\nexport function geojsonToFlatGeojson(features) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    coordLength: 2,\n    fixRingWinding: true\n  };\n  return features.map(function (feature) {\n    return flattenFeature(feature, options);\n  });\n}\nfunction flattenPoint(coordinates, data, indices, options) {\n  indices.push(data.length);\n  data.push.apply(data, _toConsumableArray(coordinates));\n  for (var i = coordinates.length; i < options.coordLength; i++) {\n    data.push(0);\n  }\n}\nfunction flattenLineString(coordinates, data, indices, options) {\n  indices.push(data.length);\n  var _iterator = _createForOfIteratorHelper(coordinates),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var c = _step.value;\n      data.push.apply(data, _toConsumableArray(c));\n      for (var i = c.length; i < options.coordLength; i++) {\n        data.push(0);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\nfunction flattenPolygon(coordinates, data, indices, areas, options) {\n  var count = 0;\n  var ringAreas = [];\n  var polygons = [];\n  var _iterator2 = _createForOfIteratorHelper(coordinates),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var lineString = _step2.value;\n      var lineString2d = lineString.map(function (p) {\n        return p.slice(0, 2);\n      });\n      var area = getPolygonSignedArea(lineString2d.flat());\n      var ccw = area < 0;\n      if (options.fixRingWinding && (count === 0 && !ccw || count > 0 && ccw)) {\n        lineString.reverse();\n        area = -area;\n      }\n      ringAreas.push(area);\n      flattenLineString(lineString, data, polygons, options);\n      count++;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  if (count > 0) {\n    areas.push(ringAreas);\n    indices.push(polygons);\n  }\n}\nfunction flattenFeature(feature, options) {\n  var geometry = feature.geometry;\n  if (geometry.type === 'GeometryCollection') {\n    throw new Error('GeometryCollection type not supported');\n  }\n  var data = [];\n  var indices = [];\n  var areas;\n  var type;\n  switch (geometry.type) {\n    case 'Point':\n      type = 'Point';\n      flattenPoint(geometry.coordinates, data, indices, options);\n      break;\n    case 'MultiPoint':\n      type = 'Point';\n      geometry.coordinates.map(function (c) {\n        return flattenPoint(c, data, indices, options);\n      });\n      break;\n    case 'LineString':\n      type = 'LineString';\n      flattenLineString(geometry.coordinates, data, indices, options);\n      break;\n    case 'MultiLineString':\n      type = 'LineString';\n      geometry.coordinates.map(function (c) {\n        return flattenLineString(c, data, indices, options);\n      });\n      break;\n    case 'Polygon':\n      type = 'Polygon';\n      areas = [];\n      flattenPolygon(geometry.coordinates, data, indices, areas, options);\n      break;\n    case 'MultiPolygon':\n      type = 'Polygon';\n      areas = [];\n      geometry.coordinates.map(function (c) {\n        return flattenPolygon(c, data, indices, areas, options);\n      });\n      break;\n    default:\n      throw new Error(\"Unknown type: \".concat(type));\n  }\n  return _objectSpread(_objectSpread({}, feature), {}, {\n    geometry: {\n      type: type,\n      indices: indices,\n      data: data,\n      areas: areas\n    }\n  });\n}","map":{"version":3,"names":["getPolygonSignedArea","geojsonToFlatGeojson","features","options","arguments","length","undefined","coordLength","fixRingWinding","map","feature","flattenFeature","flattenPoint","coordinates","data","indices","push","apply","_toConsumableArray","i","flattenLineString","_iterator","_createForOfIteratorHelper","_step","s","n","done","c","value","err","e","f","flattenPolygon","areas","count","ringAreas","polygons","_iterator2","_step2","lineString","lineString2d","p","slice","area","flat","ccw","reverse","geometry","type","Error","concat","_objectSpread"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/gis/src/lib/geojson-to-flat-geojson.ts"],"sourcesContent":["import {getPolygonSignedArea} from '@math.gl/polygon';\n\nimport {Feature, Position, FlatFeature} from '@loaders.gl/schema';\n\n/**\n * Options for `geojsonToFlatGeojson`\n */\nexport type GeojsonToFlatGeojsonOptions = {\n  coordLength: number;\n  fixRingWinding: boolean;\n};\n\n// Coordinates defining a Point\ntype PointCoordinates = Position;\n// Coordinates defining a LineString\ntype LineStringCoordinates = Position[];\n// Coordinates defining a Polygon\ntype PolygonCoordinates = Position[][];\n\n/**\n * Convert GeoJSON features to Flat GeoJSON features\n *\n * @param features\n * @param options\n * @returns an Array of Flat GeoJSON features\n */\nexport function geojsonToFlatGeojson(\n  features: Feature[],\n  options: GeojsonToFlatGeojsonOptions = {coordLength: 2, fixRingWinding: true}\n): FlatFeature[] {\n  return features.map((feature) => flattenFeature(feature, options));\n}\n\n/**\n * Helper function to copy Point values from `coordinates` into `data` & `indices`\n *\n * @param coordinates\n * @param data\n * @param indices\n * @param options\n */\nfunction flattenPoint(\n  coordinates: PointCoordinates,\n  data: number[],\n  indices: number[],\n  options: GeojsonToFlatGeojsonOptions\n) {\n  indices.push(data.length);\n  data.push(...coordinates);\n\n  // Pad up to coordLength\n  for (let i = coordinates.length; i < options.coordLength; i++) {\n    data.push(0);\n  }\n}\n\n/**\n * Helper function to copy LineString values from `coordinates` into `data` & `indices`\n *\n * @param coordinates\n * @param data\n * @param indices\n * @param options\n */\nfunction flattenLineString(\n  coordinates: LineStringCoordinates,\n  data: number[],\n  indices: number[],\n  options: GeojsonToFlatGeojsonOptions\n) {\n  indices.push(data.length);\n  for (const c of coordinates) {\n    data.push(...c);\n\n    // Pad up to coordLength\n    for (let i = c.length; i < options.coordLength; i++) {\n      data.push(0);\n    }\n  }\n}\n\n/**\n * Helper function to copy Polygon values from `coordinates` into `data` & `indices` & `areas`\n *\n * @param coordinates\n * @param data\n * @param indices\n * @param areas\n * @param options\n */\nfunction flattenPolygon(\n  coordinates: PolygonCoordinates,\n  data: number[],\n  indices: number[][],\n  areas: number[][],\n  options: GeojsonToFlatGeojsonOptions\n) {\n  let count = 0;\n  const ringAreas: number[] = [];\n  const polygons: number[] = [];\n  for (const lineString of coordinates) {\n    const lineString2d = lineString.map((p) => p.slice(0, 2));\n    let area = getPolygonSignedArea(lineString2d.flat());\n    const ccw = area < 0;\n\n    // Exterior ring must be CCW and interior rings CW\n    if (options.fixRingWinding && ((count === 0 && !ccw) || (count > 0 && ccw))) {\n      lineString.reverse();\n      area = -area;\n    }\n    ringAreas.push(area);\n    flattenLineString(lineString, data, polygons, options);\n    count++;\n  }\n\n  if (count > 0) {\n    areas.push(ringAreas);\n    indices.push(polygons);\n  }\n}\n\n/**\n * Flatten single GeoJSON feature into Flat GeoJSON\n *\n * @param feature\n * @param options\n * @returns A Flat GeoJSON feature\n */\nfunction flattenFeature(feature: Feature, options: GeojsonToFlatGeojsonOptions): FlatFeature {\n  const {geometry} = feature;\n  if (geometry.type === 'GeometryCollection') {\n    throw new Error('GeometryCollection type not supported');\n  }\n  const data = [];\n  const indices = [];\n  let areas;\n  let type;\n\n  switch (geometry.type) {\n    case 'Point':\n      type = 'Point';\n      flattenPoint(geometry.coordinates, data, indices, options);\n      break;\n    case 'MultiPoint':\n      type = 'Point';\n      geometry.coordinates.map((c) => flattenPoint(c, data, indices, options));\n      break;\n    case 'LineString':\n      type = 'LineString';\n      flattenLineString(geometry.coordinates, data, indices, options);\n      break;\n    case 'MultiLineString':\n      type = 'LineString';\n      geometry.coordinates.map((c) => flattenLineString(c, data, indices, options));\n      break;\n    case 'Polygon':\n      type = 'Polygon';\n      areas = [];\n      flattenPolygon(geometry.coordinates, data, indices, areas, options);\n      break;\n    case 'MultiPolygon':\n      type = 'Polygon';\n      areas = [];\n      geometry.coordinates.map((c) => flattenPolygon(c, data, indices, areas, options));\n      break;\n    default:\n      throw new Error(`Unknown type: ${type}`);\n  }\n\n  return {...feature, geometry: {type, indices, data, areas}};\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}