{"ast":null,"code":"import { COMPONENT_SYMBOL } from './constants';\nexport function validateProps(props) {\n  var propTypes = getPropTypes(props);\n  for (var propName in propTypes) {\n    var propType = propTypes[propName];\n    var validate = propType.validate;\n    if (validate && !validate(props[propName], propType)) {\n      throw new Error(\"Invalid prop \".concat(propName, \": \").concat(props[propName]));\n    }\n  }\n}\nexport function diffProps(props, oldProps) {\n  var propsChangedReason = compareProps({\n    newProps: props,\n    oldProps: oldProps,\n    propTypes: getPropTypes(props),\n    ignoreProps: {\n      data: null,\n      updateTriggers: null,\n      extensions: null,\n      transitions: null\n    }\n  });\n  var dataChangedReason = diffDataProps(props, oldProps);\n  var updateTriggersChangedReason = false;\n  if (!dataChangedReason) {\n    updateTriggersChangedReason = diffUpdateTriggers(props, oldProps);\n  }\n  return {\n    dataChanged: dataChangedReason,\n    propsChanged: propsChangedReason,\n    updateTriggersChanged: updateTriggersChangedReason,\n    extensionsChanged: diffExtensions(props, oldProps),\n    transitionsChanged: diffTransitions(props, oldProps)\n  };\n}\nfunction diffTransitions(props, oldProps) {\n  if (!props.transitions) {\n    return false;\n  }\n  var result = {};\n  var propTypes = getPropTypes(props);\n  var changed = false;\n  for (var key in props.transitions) {\n    var propType = propTypes[key];\n    var type = propType && propType.type;\n    var isTransitionable = type === 'number' || type === 'color' || type === 'array';\n    if (isTransitionable && comparePropValues(props[key], oldProps[key], propType)) {\n      result[key] = true;\n      changed = true;\n    }\n  }\n  return changed ? result : false;\n}\nexport function compareProps(_ref) {\n  var newProps = _ref.newProps,\n    oldProps = _ref.oldProps,\n    _ref$ignoreProps = _ref.ignoreProps,\n    ignoreProps = _ref$ignoreProps === void 0 ? {} : _ref$ignoreProps,\n    _ref$propTypes = _ref.propTypes,\n    propTypes = _ref$propTypes === void 0 ? {} : _ref$propTypes,\n    _ref$triggerName = _ref.triggerName,\n    triggerName = _ref$triggerName === void 0 ? 'props' : _ref$triggerName;\n  if (oldProps === newProps) {\n    return false;\n  }\n  if (typeof newProps !== 'object' || newProps === null) {\n    return \"\".concat(triggerName, \" changed shallowly\");\n  }\n  if (typeof oldProps !== 'object' || oldProps === null) {\n    return \"\".concat(triggerName, \" changed shallowly\");\n  }\n  for (var _i = 0, _Object$keys = Object.keys(newProps); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    if (!(key in ignoreProps)) {\n      if (!(key in oldProps)) {\n        return \"\".concat(triggerName, \".\").concat(key, \" added\");\n      }\n      var changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);\n      if (changed) {\n        return \"\".concat(triggerName, \".\").concat(key, \" \").concat(changed);\n      }\n    }\n  }\n  for (var _i2 = 0, _Object$keys2 = Object.keys(oldProps); _i2 < _Object$keys2.length; _i2++) {\n    var _key = _Object$keys2[_i2];\n    if (!(_key in ignoreProps)) {\n      if (!(_key in newProps)) {\n        return \"\".concat(triggerName, \".\").concat(_key, \" dropped\");\n      }\n      if (!Object.hasOwnProperty.call(newProps, _key)) {\n        var _changed = comparePropValues(newProps[_key], oldProps[_key], propTypes[_key]);\n        if (_changed) {\n          return \"\".concat(triggerName, \".\").concat(_key, \" \").concat(_changed);\n        }\n      }\n    }\n  }\n  return false;\n}\nfunction comparePropValues(newProp, oldProp, propType) {\n  var equal = propType && propType.equal;\n  if (equal && !equal(newProp, oldProp, propType)) {\n    return 'changed deeply';\n  }\n  if (!equal) {\n    equal = newProp && oldProp && newProp.equals;\n    if (equal && !equal.call(newProp, oldProp)) {\n      return 'changed deeply';\n    }\n  }\n  if (!equal && oldProp !== newProp) {\n    return 'changed shallowly';\n  }\n  return null;\n}\nfunction diffDataProps(props, oldProps) {\n  if (oldProps === null) {\n    return 'oldProps is null, initial diff';\n  }\n  var dataChanged = false;\n  var dataComparator = props.dataComparator,\n    _dataDiff = props._dataDiff;\n  if (dataComparator) {\n    if (!dataComparator(props.data, oldProps.data)) {\n      dataChanged = 'Data comparator detected a change';\n    }\n  } else if (props.data !== oldProps.data) {\n    dataChanged = 'A new data container was supplied';\n  }\n  if (dataChanged && _dataDiff) {\n    dataChanged = _dataDiff(props.data, oldProps.data) || dataChanged;\n  }\n  return dataChanged;\n}\nfunction diffUpdateTriggers(props, oldProps) {\n  if (oldProps === null) {\n    return {\n      all: true\n    };\n  }\n  if ('all' in props.updateTriggers) {\n    var diffReason = diffUpdateTrigger(props, oldProps, 'all');\n    if (diffReason) {\n      return {\n        all: true\n      };\n    }\n  }\n  var reason = {};\n  var changed = false;\n  for (var triggerName in props.updateTriggers) {\n    if (triggerName !== 'all') {\n      var _diffReason = diffUpdateTrigger(props, oldProps, triggerName);\n      if (_diffReason) {\n        reason[triggerName] = true;\n        changed = true;\n      }\n    }\n  }\n  return changed ? reason : false;\n}\nfunction diffExtensions(props, oldProps) {\n  if (oldProps === null) {\n    return true;\n  }\n  var oldExtensions = oldProps.extensions;\n  var extensions = props.extensions;\n  if (extensions === oldExtensions) {\n    return false;\n  }\n  if (!oldExtensions || !extensions) {\n    return true;\n  }\n  if (extensions.length !== oldExtensions.length) {\n    return true;\n  }\n  for (var i = 0; i < extensions.length; i++) {\n    if (!extensions[i].equals(oldExtensions[i])) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction diffUpdateTrigger(props, oldProps, triggerName) {\n  var newTriggers = props.updateTriggers[triggerName];\n  newTriggers = newTriggers === undefined || newTriggers === null ? {} : newTriggers;\n  var oldTriggers = oldProps.updateTriggers[triggerName];\n  oldTriggers = oldTriggers === undefined || oldTriggers === null ? {} : oldTriggers;\n  var diffReason = compareProps({\n    oldProps: oldTriggers,\n    newProps: newTriggers,\n    triggerName: triggerName\n  });\n  return diffReason;\n}\nfunction getPropTypes(props) {\n  var layer = props[COMPONENT_SYMBOL];\n  var LayerType = layer && layer.constructor;\n  return LayerType ? LayerType._propTypes : {};\n}","map":{"version":3,"names":["COMPONENT_SYMBOL","validateProps","props","propTypes","getPropTypes","propName","propType","validate","Error","concat","diffProps","oldProps","propsChangedReason","compareProps","newProps","ignoreProps","data","updateTriggers","extensions","transitions","dataChangedReason","diffDataProps","updateTriggersChangedReason","diffUpdateTriggers","dataChanged","propsChanged","updateTriggersChanged","extensionsChanged","diffExtensions","transitionsChanged","diffTransitions","result","changed","key","type","isTransitionable","comparePropValues","_ref","_ref$ignoreProps","_ref$propTypes","_ref$triggerName","triggerName","_i","_Object$keys","Object","keys","length","_i2","_Object$keys2","hasOwnProperty","call","newProp","oldProp","equal","equals","dataComparator","_dataDiff","all","diffReason","diffUpdateTrigger","reason","oldExtensions","i","newTriggers","undefined","oldTriggers","layer","LayerType","constructor","_propTypes"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/core/src/lifecycle/props.ts"],"sourcesContent":["import {COMPONENT_SYMBOL} from './constants';\nimport {PropType} from './prop-types';\n\nexport function validateProps(props) {\n  const propTypes = getPropTypes(props);\n\n  for (const propName in propTypes) {\n    const propType = propTypes[propName];\n    const {validate} = propType;\n    if (validate && !validate(props[propName], propType)) {\n      throw new Error(`Invalid prop ${propName}: ${props[propName]}`);\n    }\n  }\n}\n\n// Returns an object with \"change flags\", either false or strings indicating reason for change\nexport function diffProps(\n  props,\n  oldProps\n): {\n  dataChanged: string | false | {startRow: number; endRow?: number}[];\n  propsChanged: string | false;\n  updateTriggersChanged: Record<string, true> | false;\n  extensionsChanged: boolean;\n  transitionsChanged: Record<string, true> | false;\n} {\n  // First check if any props have changed (ignore props that will be examined separately)\n  const propsChangedReason = compareProps({\n    newProps: props,\n    oldProps,\n    propTypes: getPropTypes(props),\n    ignoreProps: {data: null, updateTriggers: null, extensions: null, transitions: null}\n  });\n\n  // Now check if any data related props have changed\n  const dataChangedReason = diffDataProps(props, oldProps);\n\n  // Check update triggers to determine if any attributes need regeneration\n  // Note - if data has changed, all attributes will need regeneration, so skip this step\n  let updateTriggersChangedReason: false | string | Record<string, true> = false;\n  if (!dataChangedReason) {\n    updateTriggersChangedReason = diffUpdateTriggers(props, oldProps);\n  }\n\n  return {\n    dataChanged: dataChangedReason,\n    propsChanged: propsChangedReason,\n    updateTriggersChanged: updateTriggersChangedReason,\n    extensionsChanged: diffExtensions(props, oldProps),\n    transitionsChanged: diffTransitions(props, oldProps)\n  };\n}\n\nfunction diffTransitions(props, oldProps): false | Record<string, true> {\n  if (!props.transitions) {\n    return false;\n  }\n  const result: Record<string, true> = {};\n  const propTypes = getPropTypes(props);\n  let changed = false;\n\n  for (const key in props.transitions) {\n    const propType = propTypes[key];\n    const type = propType && propType.type;\n    const isTransitionable = type === 'number' || type === 'color' || type === 'array';\n    if (isTransitionable && comparePropValues(props[key], oldProps[key], propType)) {\n      result[key] = true;\n      changed = true;\n    }\n  }\n  return changed ? result : false;\n}\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * @param {Object} opt.oldProps - object with old key/value pairs\n * @param {Object} opt.newProps - object with new key/value pairs\n * @param {Object} opt.ignoreProps={} - object, keys that should not be compared\n * @returns {null|String} - null when values of all keys are strictly equal.\n *   if unequal, returns a string explaining what changed.\n */\n/* eslint-disable max-statements, max-depth, complexity */\n/*\n * Note: for better performance, this function assumes that both oldProps and newProps\n   inherit the same prototype (defaultProps). That is, if neither object contains own\n   property <key>, assume `oldProps.<key>` and `newProps.<key>` are equal.\n */\nexport function compareProps({\n  newProps,\n  oldProps,\n  ignoreProps = {},\n  propTypes = {},\n  triggerName = 'props'\n}): string | false {\n  // shallow equality => deep equality\n  if (oldProps === newProps) {\n    return false;\n  }\n\n  // TODO - do we need these checks? Should never happen...\n  if (typeof newProps !== 'object' || newProps === null) {\n    return `${triggerName} changed shallowly`;\n  }\n\n  if (typeof oldProps !== 'object' || oldProps === null) {\n    return `${triggerName} changed shallowly`;\n  }\n\n  // Compare explicitly defined new props against old/default values\n  for (const key of Object.keys(newProps)) {\n    if (!(key in ignoreProps)) {\n      if (!(key in oldProps)) {\n        return `${triggerName}.${key} added`;\n      }\n      const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);\n      if (changed) {\n        return `${triggerName}.${key} ${changed}`;\n      }\n    }\n  }\n\n  // Test if any old props have been dropped\n  for (const key of Object.keys(oldProps)) {\n    if (!(key in ignoreProps)) {\n      if (!(key in newProps)) {\n        return `${triggerName}.${key} dropped`;\n      }\n      if (!Object.hasOwnProperty.call(newProps, key)) {\n        // Compare dropped old prop against default value\n        const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);\n        if (changed) {\n          return `${triggerName}.${key} ${changed}`;\n        }\n      }\n    }\n  }\n\n  return false;\n}\n/* eslint-enable max-statements, max-depth, complexity */\n\n// HELPERS\nfunction comparePropValues(newProp, oldProp, propType) {\n  // If prop type has an equal function, invoke it\n  let equal = propType && propType.equal;\n  if (equal && !equal(newProp, oldProp, propType)) {\n    return 'changed deeply';\n  }\n\n  if (!equal) {\n    // If object has an equals function, invoke it\n    equal = newProp && oldProp && newProp.equals;\n    if (equal && !equal.call(newProp, oldProp)) {\n      return 'changed deeply';\n    }\n  }\n\n  if (!equal && oldProp !== newProp) {\n    return 'changed shallowly';\n  }\n\n  return null;\n}\n\n// The comparison of the data prop requires special handling\n// the dataComparator should be used if supplied\nfunction diffDataProps(props, oldProps): string | false | {startRow: number; endRow?: number}[] {\n  if (oldProps === null) {\n    return 'oldProps is null, initial diff';\n  }\n\n  let dataChanged: string | false | {startRow: number; endRow?: number}[] = false;\n  // Support optional app defined comparison of data\n  const {dataComparator, _dataDiff} = props;\n  if (dataComparator) {\n    if (!dataComparator(props.data, oldProps.data)) {\n      dataChanged = 'Data comparator detected a change';\n    }\n    // Otherwise, do a shallow equal on props\n  } else if (props.data !== oldProps.data) {\n    dataChanged = 'A new data container was supplied';\n  }\n  if (dataChanged && _dataDiff) {\n    dataChanged = _dataDiff(props.data, oldProps.data) || dataChanged;\n  }\n\n  return dataChanged;\n}\n\n// Checks if any update triggers have changed\n// also calls callback to invalidate attributes accordingly.\nfunction diffUpdateTriggers(props, oldProps): Record<string, true> | false {\n  if (oldProps === null) {\n    return {all: true};\n  }\n\n  // If the 'all' updateTrigger fires, ignore testing others\n  if ('all' in props.updateTriggers) {\n    const diffReason = diffUpdateTrigger(props, oldProps, 'all');\n    if (diffReason) {\n      return {all: true};\n    }\n  }\n\n  const reason: Record<string, true> = {};\n  let changed = false;\n  // If the 'all' updateTrigger didn't fire, need to check all others\n  for (const triggerName in props.updateTriggers) {\n    if (triggerName !== 'all') {\n      const diffReason = diffUpdateTrigger(props, oldProps, triggerName);\n      if (diffReason) {\n        reason[triggerName] = true;\n        changed = true;\n      }\n    }\n  }\n\n  return changed ? reason : false;\n}\n\n// Returns true if any extensions have changed\nfunction diffExtensions(props, oldProps): boolean {\n  if (oldProps === null) {\n    return true;\n  }\n\n  const oldExtensions = oldProps.extensions;\n  const {extensions} = props;\n\n  if (extensions === oldExtensions) {\n    return false;\n  }\n  if (!oldExtensions || !extensions) {\n    return true;\n  }\n  if (extensions.length !== oldExtensions.length) {\n    return true;\n  }\n  for (let i = 0; i < extensions.length; i++) {\n    if (!extensions[i].equals(oldExtensions[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction diffUpdateTrigger(props, oldProps, triggerName) {\n  let newTriggers = props.updateTriggers[triggerName];\n  newTriggers = newTriggers === undefined || newTriggers === null ? {} : newTriggers;\n  let oldTriggers = oldProps.updateTriggers[triggerName];\n  oldTriggers = oldTriggers === undefined || oldTriggers === null ? {} : oldTriggers;\n  const diffReason = compareProps({\n    oldProps: oldTriggers,\n    newProps: newTriggers,\n    triggerName\n  });\n  return diffReason;\n}\n\nfunction getPropTypes(props): Record<string, PropType> {\n  const layer = props[COMPONENT_SYMBOL];\n  const LayerType = layer && layer.constructor;\n  return LayerType ? LayerType._propTypes : {};\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}