{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getHTMLMapModeTileUrl = getHTMLMapModeTileUrl;\nexports.PROJECTED_PIXEL_SIZE_MULTIPLIER = exports.MAP_CONTROLS = exports.DATASET_FORMATS = exports.DEFAULT_FEATURE_FLAGS = exports.LOADING_METHODS = exports.MAP_INFO_CHARACTER = exports.MAP_THUMBNAIL_DIMENSION = exports.MAX_GPU_FILTERS = exports.PLOT_TYPES = exports.EDITOR_MODES = exports.GEOCODER_ICON_SIZE = exports.GEOCODER_ICON_COLOR = exports.GEOCODER_GEO_OFFSET = exports.GEOCODER_LAYER_ID = exports.GEOCODER_DATASET_NAME = exports.SPEED_CONTROL_STEP = exports.SPEED_CONTROL_RANGE = exports.DEFAULT_TIME_FORMAT = exports.ANIMATION_WINDOW = exports.FPS = exports.BASE_SPEED = exports.THROTTLE_NOTIFICATION_TIME = exports.DEFAULT_NOTIFICATION_TOPICS = exports.DEFAULT_NOTIFICATION_TYPES = exports.DEFAULT_NOTIFICATION_MESSAGE = exports.DEFAULT_UUID_COUNT = exports.EXPORT_HTML_MAP_MODE_OPTIONS = exports.EXPORT_MAP_FORMAT_OPTIONS = exports.EXPORT_HTML_MAP_MODES = exports.EXPORT_MAP_FORMATS = exports.EXPORT_DATA_TYPE_OPTIONS = exports.EXPORT_DATA_TYPE = exports.EXPORT_IMG_RESOLUTION_OPTIONS = exports.TwoXResolutionOption = exports.OneXResolutionOption = exports.EXPORT_IMG_RATIO_OPTIONS = exports.SixteenByNineRatioOption = exports.FourByThreeRatioOption = exports.CustomRatioOption = exports.ScreenRatioOption = exports.EXPORT_IMG_RATIOS = exports.RESOLUTIONS = exports.MAX_DEFAULT_TOOLTIPS = exports.LAYER_BLENDINGS = exports.NO_VALUE_COLOR = exports.DEFAULT_TOOLTIP_FIELDS = exports.DEFAULT_LAYER_COLOR = exports.CHANNEL_SCALE_SUPPORTED_FIELDS = exports.FIELD_OPTS = exports.DEFAULT_AGGREGATION = exports.notSupportAggrOpts = exports.notSupportedScaleOpts = exports.ordinalFieldAggrScaleFunctions = exports.ordinalFieldScaleFunctions = exports.linearFieldAggrScaleFunctions = exports.linearFieldScaleFunctions = exports.AGGREGATION_TYPES = exports.CHANNEL_SCALES = exports.HIGHLIGH_COLOR_3D = exports.FIELD_COLORS = exports.FIELD_TYPE_DISPLAY = exports.TABLE_OPTION_LIST = exports.TABLE_OPTION = exports.SORT_ORDER = exports.ALL_FIELD_TYPES = exports.SCALE_FUNC = exports.SCALE_TYPES = exports.FILTER_TYPES = exports.TRIP_ARC_FIELDS = exports.ALTITUDE_FIELDS = exports.TRIP_POINT_FIELDS = exports.ICON_FIELDS = exports.GEOJSON_FIELDS = exports.DEFAULT_MAP_STYLES = exports.DEFAULT_LAYER_GROUPS = exports.PANELS = exports.SIDEBAR_PANELS = exports.THEME = exports.DIMENSIONS = exports.KEPLER_GL_WEBSITE = exports.KEPLER_GL_VERSION = exports.KEPLER_GL_NAME = exports.SHARE_MAP_ID = exports.OVERWRITE_MAP_ID = exports.SAVE_MAP_ID = exports.EXPORT_MAP_ID = exports.ADD_MAP_STYLE_ID = exports.EXPORT_DATA_ID = exports.EXPORT_IMAGE_ID = exports.ADD_DATA_ID = exports.DELETE_DATA_ID = exports.DATA_TABLE_ID = exports.TRANSITION_DURATION = exports.DEFAULT_MAPBOX_API_URL = exports.ICON_PREFIX = exports.CLOUDFRONT = exports.ACTION_PREFIX = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _keymirror = _interopRequireDefault(require(\"keymirror\"));\nvar _reactMapGlDraw = require(\"react-map-gl-draw\");\nvar _d3Scale = require(\"d3-scale\");\nvar _tooltip = require(\"./tooltip\");\nvar _SCALE_FUNC, _FIELD_TYPE_DISPLAY, _linearFieldScaleFunc, _CHANNEL_SCALES$color, _CHANNEL_SCALES$sizeA, _linearFieldAggrScale, _ordinalFieldScaleFun, _CHANNEL_SCALES$color2, _ordinalFieldAggrScal, _notSupportedScaleOpt, _notSupportAggrOpts, _DEFAULT_AGGREGATION;\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar ACTION_PREFIX = '@@kepler.gl/';\nexports.ACTION_PREFIX = ACTION_PREFIX;\nvar CLOUDFRONT = 'https://d1a3f4spazzrp4.cloudfront.net/kepler.gl';\nexports.CLOUDFRONT = CLOUDFRONT;\nvar ICON_PREFIX = \"\".concat(CLOUDFRONT, \"/geodude\");\nexports.ICON_PREFIX = ICON_PREFIX;\nvar DEFAULT_MAPBOX_API_URL = 'https://api.mapbox.com';\nexports.DEFAULT_MAPBOX_API_URL = DEFAULT_MAPBOX_API_URL;\nvar TRANSITION_DURATION = 0; // Modal Ids\n\n/**\n * Modal id: data table\n * @constant\n * @type {string}\n * @public\n */\n\nexports.TRANSITION_DURATION = TRANSITION_DURATION;\nvar DATA_TABLE_ID = 'dataTable';\n/**\n * Modal id: delete dataset confirm dialog\n * @constant\n * @type {string}\n * @public\n */\n\nexports.DATA_TABLE_ID = DATA_TABLE_ID;\nvar DELETE_DATA_ID = 'deleteData';\n/**\n * Modal id: add data modal\n * @constant\n * @type {string}\n * @public\n */\n\nexports.DELETE_DATA_ID = DELETE_DATA_ID;\nvar ADD_DATA_ID = 'addData';\n/**\n * Modal id: export image modal\n * @constant\n * @type {string}\n * @public\n */\n\nexports.ADD_DATA_ID = ADD_DATA_ID;\nvar EXPORT_IMAGE_ID = 'exportImage';\n/**\n * Modal id: export data modal\n * @constant\n * @type {string}\n * @public\n */\n\nexports.EXPORT_IMAGE_ID = EXPORT_IMAGE_ID;\nvar EXPORT_DATA_ID = 'exportData';\n/**\n * Modal id: add custom map style modal\n * @constant\n * @type {string}\n * @public\n */\n\nexports.EXPORT_DATA_ID = EXPORT_DATA_ID;\nvar ADD_MAP_STYLE_ID = 'addMapStyle';\n/**\n * Modal id: export map modal\n * @constant\n * @type {string}\n * @public\n */\n\nexports.ADD_MAP_STYLE_ID = ADD_MAP_STYLE_ID;\nvar EXPORT_MAP_ID = 'exportMap';\n/**\n * Modal id: save map modal\n * @constant\n * @type {string}\n * @public\n */\n\nexports.EXPORT_MAP_ID = EXPORT_MAP_ID;\nvar SAVE_MAP_ID = 'saveMap';\n/**\n * Modal id: confirm to overwrite saved map\n * @constant\n * @type {string}\n * @public\n */\n\nexports.SAVE_MAP_ID = SAVE_MAP_ID;\nvar OVERWRITE_MAP_ID = 'overwriteMap';\n/**\n * Modal id: share map url modal\n * @constant\n * @type {string}\n * @public\n */\n\nexports.OVERWRITE_MAP_ID = OVERWRITE_MAP_ID;\nvar SHARE_MAP_ID = 'shareMap';\nexports.SHARE_MAP_ID = SHARE_MAP_ID;\nvar KEPLER_GL_NAME = 'kepler.gl'; // __PACKAGE_VERSION__ is automatically injected by Babel/Webpack during the building process\n// Since we are injecting this during the build process with babel\n// while developing VERSION is not defined, we capture the exception and return\n// an empty string which will allow us to retrieve the latest umd version\n\nexports.KEPLER_GL_NAME = KEPLER_GL_NAME;\nvar KEPLER_GL_VERSION = \"3.0.0-alpha.0\";\nexports.KEPLER_GL_VERSION = KEPLER_GL_VERSION;\nvar KEPLER_GL_WEBSITE = 'http://kepler.gl/';\nexports.KEPLER_GL_WEBSITE = KEPLER_GL_WEBSITE;\nvar DIMENSIONS = {\n  sidePanel: {\n    width: 300,\n    margin: {\n      top: 20,\n      left: 20,\n      bottom: 30,\n      right: 20\n    },\n    headerHeight: 96\n  },\n  mapControl: {\n    width: 184,\n    padding: 12,\n    mapLegend: {\n      pinned: {\n        bottom: 22,\n        right: 12\n      }\n    }\n  }\n};\n/**\n * Theme name that can be passed to `KeplerGl` `prop.theme`.\n * Available themes are `THEME.light` and `THEME.dark`. Default theme is `THEME.dark`\n * @constant\n * @type {object}\n * @public\n * @example\n * ```js\n * const Map = () => <KeplerGl theme={THEME.light} id=\"map\"/>\n * ```\n */\n\nexports.DIMENSIONS = DIMENSIONS;\nvar THEME = (0, _keymirror[\"default\"])({\n  light: null,\n  dark: null,\n  base: null\n});\nexports.THEME = THEME;\nvar SIDEBAR_PANELS = [{\n  id: 'layer',\n  label: 'sidebar.panels.layer',\n  onClick: null\n}, {\n  id: 'filter',\n  label: 'sidebar.panels.filter',\n  onClick: null\n}, {\n  id: 'interaction',\n  label: 'sidebar.panels.interaction',\n  onClick: null\n}, {\n  id: 'map',\n  label: 'sidebar.panels.basemap',\n  onClick: null\n}]; // backward compatibility\n\nexports.SIDEBAR_PANELS = SIDEBAR_PANELS;\nvar PANELS = SIDEBAR_PANELS; // MAP STYLES\n\nexports.PANELS = PANELS;\nvar DEFAULT_LAYER_GROUPS = [{\n  slug: 'label',\n  filter: function filter(_ref) {\n    var id = _ref.id;\n    return id.match(/(?=(label|place-|poi-))/);\n  },\n  defaultVisibility: true\n}, {\n  slug: 'road',\n  filter: function filter(_ref2) {\n    var id = _ref2.id;\n    return id.match(/(?=(road|railway|tunnel|street|bridge))(?!.*label)/);\n  },\n  defaultVisibility: true\n}, {\n  slug: 'border',\n  filter: function filter(_ref3) {\n    var id = _ref3.id;\n    return id.match(/border|boundaries|boundary/);\n  },\n  defaultVisibility: false\n}, {\n  slug: 'building',\n  filter: function filter(_ref4) {\n    var id = _ref4.id;\n    return id.match(/building/);\n  },\n  defaultVisibility: true\n}, {\n  slug: 'water',\n  filter: function filter(_ref5) {\n    var id = _ref5.id;\n    return id.match(/(?=(water|stream|ferry))/);\n  },\n  defaultVisibility: true\n}, {\n  slug: 'land',\n  filter: function filter(_ref6) {\n    var id = _ref6.id;\n    return id.match(/(?=(parks|landcover|industrial|sand|hillshade))/);\n  },\n  defaultVisibility: true\n}, {\n  slug: '3d building',\n  filter: function filter() {\n    return false;\n  },\n  defaultVisibility: false\n}];\nexports.DEFAULT_LAYER_GROUPS = DEFAULT_LAYER_GROUPS;\nvar DEFAULT_MAP_STYLES = [{\n  id: 'dark',\n  label: 'Dark',\n  url: 'mapbox://styles/uberdata/cjoqbbf6l9k302sl96tyvka09',\n  icon: \"\".concat(ICON_PREFIX, \"/UBER_DARK_V2.png\"),\n  layerGroups: DEFAULT_LAYER_GROUPS\n}, {\n  id: 'light',\n  label: 'Light',\n  url: 'mapbox://styles/uberdata/cjoqb9j339k1f2sl9t5ic5bn4',\n  icon: \"\".concat(ICON_PREFIX, \"/UBER_LIGHT_V2.png\"),\n  layerGroups: DEFAULT_LAYER_GROUPS\n}, {\n  id: 'muted',\n  label: 'Muted Light',\n  url: 'mapbox://styles/uberdata/cjfyl03kp1tul2smf5v2tbdd4',\n  icon: \"\".concat(ICON_PREFIX, \"/UBER_MUTED_LIGHT.png\"),\n  layerGroups: DEFAULT_LAYER_GROUPS\n}, {\n  id: 'muted_night',\n  label: 'Muted Night',\n  url: 'mapbox://styles/uberdata/cjfxhlikmaj1b2soyzevnywgs',\n  icon: \"\".concat(ICON_PREFIX, \"/UBER_MUTED_NIGHT.png\"),\n  layerGroups: DEFAULT_LAYER_GROUPS\n}, {\n  id: 'satellite',\n  label: 'Satellite',\n  url: \"mapbox://styles/mapbox/satellite-v9\",\n  icon: \"\".concat(ICON_PREFIX, \"/UBER_SATELLITE.png\")\n}];\nexports.DEFAULT_MAP_STYLES = DEFAULT_MAP_STYLES;\nvar GEOJSON_FIELDS = {\n  geojson: ['_geojson', 'all_points', 'geojson']\n};\nexports.GEOJSON_FIELDS = GEOJSON_FIELDS;\nvar ICON_FIELDS = {\n  icon: ['icon']\n};\nexports.ICON_FIELDS = ICON_FIELDS;\nvar TRIP_POINT_FIELDS = [['lat', 'lng'], ['lat', 'lon'], ['lat', 'long'], ['latitude', 'longitude']];\nexports.TRIP_POINT_FIELDS = TRIP_POINT_FIELDS;\nvar ALTITUDE_FIELDS = ['alt', 'altitude'];\nexports.ALTITUDE_FIELDS = ALTITUDE_FIELDS;\nvar TRIP_ARC_FIELDS = {\n  lat0: 'begintrip',\n  lng0: 'begintrip',\n  lat1: 'dropoff',\n  lng1: 'dropoff'\n};\nexports.TRIP_ARC_FIELDS = TRIP_ARC_FIELDS;\nvar FILTER_TYPES = (0, _keymirror[\"default\"])({\n  range: null,\n  select: null,\n  input: null,\n  timeRange: null,\n  multiSelect: null,\n  polygon: null\n});\nexports.FILTER_TYPES = FILTER_TYPES;\nvar SCALE_TYPES = (0, _keymirror[\"default\"])({\n  ordinal: null,\n  quantile: null,\n  quantize: null,\n  linear: null,\n  sqrt: null,\n  log: null,\n  // ordinal domain to linear range\n  point: null\n});\nexports.SCALE_TYPES = SCALE_TYPES;\nvar SCALE_FUNC = (_SCALE_FUNC = {}, (0, _defineProperty2[\"default\"])(_SCALE_FUNC, SCALE_TYPES.linear, _d3Scale.scaleLinear), (0, _defineProperty2[\"default\"])(_SCALE_FUNC, SCALE_TYPES.quantize, _d3Scale.scaleQuantize), (0, _defineProperty2[\"default\"])(_SCALE_FUNC, SCALE_TYPES.quantile, _d3Scale.scaleQuantile), (0, _defineProperty2[\"default\"])(_SCALE_FUNC, SCALE_TYPES.ordinal, _d3Scale.scaleOrdinal), (0, _defineProperty2[\"default\"])(_SCALE_FUNC, SCALE_TYPES.sqrt, _d3Scale.scaleSqrt), (0, _defineProperty2[\"default\"])(_SCALE_FUNC, SCALE_TYPES.log, _d3Scale.scaleLog), (0, _defineProperty2[\"default\"])(_SCALE_FUNC, SCALE_TYPES.point, _d3Scale.scalePoint), _SCALE_FUNC);\nexports.SCALE_FUNC = SCALE_FUNC;\nvar ALL_FIELD_TYPES = (0, _keymirror[\"default\"])({\n  \"boolean\": null,\n  date: null,\n  geojson: null,\n  integer: null,\n  real: null,\n  string: null,\n  timestamp: null,\n  point: null\n}); // Data Table\n\nexports.ALL_FIELD_TYPES = ALL_FIELD_TYPES;\nvar SORT_ORDER = (0, _keymirror[\"default\"])({\n  ASCENDING: null,\n  DESCENDING: null,\n  UNSORT: null\n});\nexports.SORT_ORDER = SORT_ORDER;\nvar TABLE_OPTION = (0, _keymirror[\"default\"])({\n  SORT_ASC: null,\n  SORT_DES: null,\n  UNSORT: null,\n  PIN: null,\n  UNPIN: null,\n  COPY: null\n});\nexports.TABLE_OPTION = TABLE_OPTION;\nvar TABLE_OPTION_LIST = [{\n  value: TABLE_OPTION.SORT_ASC,\n  display: 'Sort Ascending',\n  icon: 'ArrowUp',\n  condition: function condition(props) {\n    return props.sortMode !== SORT_ORDER.ASCENDING;\n  }\n}, {\n  value: TABLE_OPTION.SORT_DES,\n  display: 'Sort Descending',\n  icon: 'ArrowDown',\n  condition: function condition(props) {\n    return props.sortMode !== SORT_ORDER.DESCENDING;\n  }\n}, {\n  value: TABLE_OPTION.UNSORT,\n  display: 'Unsort Column',\n  icon: 'Cancel',\n  condition: function condition(props) {\n    return props.isSorted;\n  }\n}, {\n  value: TABLE_OPTION.PIN,\n  display: 'Pin Column',\n  icon: 'Pin',\n  condition: function condition(props) {\n    return !props.isPinned;\n  }\n}, {\n  value: TABLE_OPTION.UNPIN,\n  display: 'Unpin Column',\n  icon: 'Cancel',\n  condition: function condition(props) {\n    return props.isPinned;\n  }\n}, {\n  value: TABLE_OPTION.COPY,\n  display: 'Copy Column',\n  icon: 'Clipboard'\n}];\nexports.TABLE_OPTION_LIST = TABLE_OPTION_LIST;\nvar ORANGE = '248, 194, 28';\nvar PINK = '231, 189, 194';\nvar PURPLE = '160, 106, 206';\nvar BLUE = '140, 210, 205';\nvar BLUE2 = '106, 160, 206';\nvar BLUE3 = '0, 172, 237';\nvar GREEN = '106, 160, 56';\nvar RED = '237, 88, 106';\nvar FIELD_TYPE_DISPLAY = (_FIELD_TYPE_DISPLAY = {}, (0, _defineProperty2[\"default\"])(_FIELD_TYPE_DISPLAY, ALL_FIELD_TYPES[\"boolean\"], {\n  label: 'bool',\n  color: PINK\n}), (0, _defineProperty2[\"default\"])(_FIELD_TYPE_DISPLAY, ALL_FIELD_TYPES.date, {\n  label: 'date',\n  color: PURPLE\n}), (0, _defineProperty2[\"default\"])(_FIELD_TYPE_DISPLAY, ALL_FIELD_TYPES.geojson, {\n  label: 'geo',\n  color: BLUE2\n}), (0, _defineProperty2[\"default\"])(_FIELD_TYPE_DISPLAY, ALL_FIELD_TYPES.integer, {\n  label: 'int',\n  color: ORANGE\n}), (0, _defineProperty2[\"default\"])(_FIELD_TYPE_DISPLAY, ALL_FIELD_TYPES.real, {\n  label: 'float',\n  color: ORANGE\n}), (0, _defineProperty2[\"default\"])(_FIELD_TYPE_DISPLAY, ALL_FIELD_TYPES.string, {\n  label: 'string',\n  color: BLUE\n}), (0, _defineProperty2[\"default\"])(_FIELD_TYPE_DISPLAY, ALL_FIELD_TYPES.timestamp, {\n  label: 'time',\n  color: GREEN\n}), (0, _defineProperty2[\"default\"])(_FIELD_TYPE_DISPLAY, ALL_FIELD_TYPES.point, {\n  label: 'point',\n  color: BLUE3\n}), _FIELD_TYPE_DISPLAY);\nexports.FIELD_TYPE_DISPLAY = FIELD_TYPE_DISPLAY;\nvar FIELD_COLORS = {\n  \"default\": RED\n};\nexports.FIELD_COLORS = FIELD_COLORS;\nvar HIGHLIGH_COLOR_3D = [255, 255, 255, 60];\nexports.HIGHLIGH_COLOR_3D = HIGHLIGH_COLOR_3D;\nvar CHANNEL_SCALES = (0, _keymirror[\"default\"])({\n  color: null,\n  radius: null,\n  size: null,\n  colorAggr: null,\n  sizeAggr: null\n});\nexports.CHANNEL_SCALES = CHANNEL_SCALES;\nvar AGGREGATION_TYPES = {\n  // default\n  count: 'count',\n  // linear\n  average: 'average',\n  maximum: 'maximum',\n  minimum: 'minimum',\n  median: 'median',\n  stdev: 'stdev',\n  sum: 'sum',\n  variance: 'variance',\n  // ordinal\n  mode: 'mode',\n  countUnique: 'count unique'\n};\nexports.AGGREGATION_TYPES = AGGREGATION_TYPES;\nvar linearFieldScaleFunctions = (_linearFieldScaleFunc = {}, (0, _defineProperty2[\"default\"])(_linearFieldScaleFunc, CHANNEL_SCALES.color, [SCALE_TYPES.quantize, SCALE_TYPES.quantile]), (0, _defineProperty2[\"default\"])(_linearFieldScaleFunc, CHANNEL_SCALES.radius, [SCALE_TYPES.sqrt]), (0, _defineProperty2[\"default\"])(_linearFieldScaleFunc, CHANNEL_SCALES.size, [SCALE_TYPES.linear, SCALE_TYPES.sqrt, SCALE_TYPES.log]), _linearFieldScaleFunc);\nexports.linearFieldScaleFunctions = linearFieldScaleFunctions;\nvar linearFieldAggrScaleFunctions = (_linearFieldAggrScale = {}, (0, _defineProperty2[\"default\"])(_linearFieldAggrScale, CHANNEL_SCALES.colorAggr, (_CHANNEL_SCALES$color = {}, (0, _defineProperty2[\"default\"])(_CHANNEL_SCALES$color, AGGREGATION_TYPES.average, [SCALE_TYPES.quantize, SCALE_TYPES.quantile]), (0, _defineProperty2[\"default\"])(_CHANNEL_SCALES$color, AGGREGATION_TYPES.maximum, [SCALE_TYPES.quantize, SCALE_TYPES.quantile]), (0, _defineProperty2[\"default\"])(_CHANNEL_SCALES$color, AGGREGATION_TYPES.minimum, [SCALE_TYPES.quantize, SCALE_TYPES.quantile]), (0, _defineProperty2[\"default\"])(_CHANNEL_SCALES$color, AGGREGATION_TYPES.median, [SCALE_TYPES.quantize, SCALE_TYPES.quantile]), (0, _defineProperty2[\"default\"])(_CHANNEL_SCALES$color, AGGREGATION_TYPES.stdev, [SCALE_TYPES.quantize, SCALE_TYPES.quantile]), (0, _defineProperty2[\"default\"])(_CHANNEL_SCALES$color, AGGREGATION_TYPES.sum, [SCALE_TYPES.quantize, SCALE_TYPES.quantile]), (0, _defineProperty2[\"default\"])(_CHANNEL_SCALES$color, AGGREGATION_TYPES.variance, [SCALE_TYPES.quantize, SCALE_TYPES.quantile]), _CHANNEL_SCALES$color)), (0, _defineProperty2[\"default\"])(_linearFieldAggrScale, CHANNEL_SCALES.sizeAggr, (_CHANNEL_SCALES$sizeA = {}, (0, _defineProperty2[\"default\"])(_CHANNEL_SCALES$sizeA, AGGREGATION_TYPES.average, [SCALE_TYPES.linear, SCALE_TYPES.sqrt, SCALE_TYPES.log]), (0, _defineProperty2[\"default\"])(_CHANNEL_SCALES$sizeA, AGGREGATION_TYPES.maximum, [SCALE_TYPES.linear, SCALE_TYPES.sqrt, SCALE_TYPES.log]), (0, _defineProperty2[\"default\"])(_CHANNEL_SCALES$sizeA, AGGREGATION_TYPES.minimum, [SCALE_TYPES.linear, SCALE_TYPES.sqrt, SCALE_TYPES.log]), (0, _defineProperty2[\"default\"])(_CHANNEL_SCALES$sizeA, AGGREGATION_TYPES.median, [SCALE_TYPES.linear, SCALE_TYPES.sqrt, SCALE_TYPES.log]), (0, _defineProperty2[\"default\"])(_CHANNEL_SCALES$sizeA, AGGREGATION_TYPES.stdev, [SCALE_TYPES.linear, SCALE_TYPES.sqrt, SCALE_TYPES.log]), (0, _defineProperty2[\"default\"])(_CHANNEL_SCALES$sizeA, AGGREGATION_TYPES.sum, [SCALE_TYPES.linear, SCALE_TYPES.sqrt, SCALE_TYPES.log]), (0, _defineProperty2[\"default\"])(_CHANNEL_SCALES$sizeA, AGGREGATION_TYPES.variance, [SCALE_TYPES.linear, SCALE_TYPES.sqrt, SCALE_TYPES.log]), _CHANNEL_SCALES$sizeA)), _linearFieldAggrScale);\nexports.linearFieldAggrScaleFunctions = linearFieldAggrScaleFunctions;\nvar ordinalFieldScaleFunctions = (_ordinalFieldScaleFun = {}, (0, _defineProperty2[\"default\"])(_ordinalFieldScaleFun, CHANNEL_SCALES.color, [SCALE_TYPES.ordinal]), (0, _defineProperty2[\"default\"])(_ordinalFieldScaleFun, CHANNEL_SCALES.radius, [SCALE_TYPES.point]), (0, _defineProperty2[\"default\"])(_ordinalFieldScaleFun, CHANNEL_SCALES.size, [SCALE_TYPES.point]), _ordinalFieldScaleFun);\nexports.ordinalFieldScaleFunctions = ordinalFieldScaleFunctions;\nvar ordinalFieldAggrScaleFunctions = (_ordinalFieldAggrScal = {}, (0, _defineProperty2[\"default\"])(_ordinalFieldAggrScal, CHANNEL_SCALES.colorAggr, (_CHANNEL_SCALES$color2 = {}, (0, _defineProperty2[\"default\"])(_CHANNEL_SCALES$color2, AGGREGATION_TYPES.mode, [SCALE_TYPES.ordinal]), (0, _defineProperty2[\"default\"])(_CHANNEL_SCALES$color2, AGGREGATION_TYPES.countUnique, [SCALE_TYPES.quantize, SCALE_TYPES.quantile]), _CHANNEL_SCALES$color2)), (0, _defineProperty2[\"default\"])(_ordinalFieldAggrScal, CHANNEL_SCALES.sizeAggr, {}), _ordinalFieldAggrScal);\nexports.ordinalFieldAggrScaleFunctions = ordinalFieldAggrScaleFunctions;\nvar notSupportedScaleOpts = (_notSupportedScaleOpt = {}, (0, _defineProperty2[\"default\"])(_notSupportedScaleOpt, CHANNEL_SCALES.color, []), (0, _defineProperty2[\"default\"])(_notSupportedScaleOpt, CHANNEL_SCALES.radius, []), (0, _defineProperty2[\"default\"])(_notSupportedScaleOpt, CHANNEL_SCALES.size, []), _notSupportedScaleOpt);\nexports.notSupportedScaleOpts = notSupportedScaleOpts;\nvar notSupportAggrOpts = (_notSupportAggrOpts = {}, (0, _defineProperty2[\"default\"])(_notSupportAggrOpts, CHANNEL_SCALES.colorAggr, {}), (0, _defineProperty2[\"default\"])(_notSupportAggrOpts, CHANNEL_SCALES.sizeAggr, {}), _notSupportAggrOpts);\n/**\n * Default aggregation are based on ocunt\n */\n\nexports.notSupportAggrOpts = notSupportAggrOpts;\nvar DEFAULT_AGGREGATION = (_DEFAULT_AGGREGATION = {}, (0, _defineProperty2[\"default\"])(_DEFAULT_AGGREGATION, CHANNEL_SCALES.colorAggr, (0, _defineProperty2[\"default\"])({}, AGGREGATION_TYPES.count, [SCALE_TYPES.quantize, SCALE_TYPES.quantile])), (0, _defineProperty2[\"default\"])(_DEFAULT_AGGREGATION, CHANNEL_SCALES.sizeAggr, (0, _defineProperty2[\"default\"])({}, AGGREGATION_TYPES.count, [SCALE_TYPES.linear, SCALE_TYPES.sqrt, SCALE_TYPES.log])), _DEFAULT_AGGREGATION);\n/**\n * Define what type of scale operation is allowed on each type of fields\n */\n\nexports.DEFAULT_AGGREGATION = DEFAULT_AGGREGATION;\nvar FIELD_OPTS = {\n  string: {\n    type: 'categorical',\n    scale: _objectSpread(_objectSpread({}, ordinalFieldScaleFunctions), ordinalFieldAggrScaleFunctions),\n    format: {\n      legend: function legend(d) {\n        return d;\n      },\n      tooltip: []\n    }\n  },\n  real: {\n    type: 'numerical',\n    scale: _objectSpread(_objectSpread({}, linearFieldScaleFunctions), linearFieldAggrScaleFunctions),\n    format: {\n      legend: function legend(d) {\n        return d;\n      },\n      tooltip: [_tooltip.TOOLTIP_FORMAT_TYPES.NONE, _tooltip.TOOLTIP_FORMAT_TYPES.DECIMAL, _tooltip.TOOLTIP_FORMAT_TYPES.PERCENTAGE]\n    }\n  },\n  timestamp: {\n    type: 'time',\n    scale: _objectSpread(_objectSpread({}, linearFieldScaleFunctions), notSupportAggrOpts),\n    format: {\n      legend: function legend(d) {\n        return d;\n      },\n      tooltip: [_tooltip.TOOLTIP_FORMAT_TYPES.NONE, _tooltip.TOOLTIP_FORMAT_TYPES.DATE, _tooltip.TOOLTIP_FORMAT_TYPES.DATE_TIME]\n    }\n  },\n  integer: {\n    type: 'numerical',\n    scale: _objectSpread(_objectSpread({}, linearFieldScaleFunctions), linearFieldAggrScaleFunctions),\n    format: {\n      legend: function legend(d) {\n        return d;\n      },\n      tooltip: [_tooltip.TOOLTIP_FORMAT_TYPES.NONE, _tooltip.TOOLTIP_FORMAT_TYPES.DECIMAL, _tooltip.TOOLTIP_FORMAT_TYPES.PERCENTAGE]\n    }\n  },\n  \"boolean\": {\n    type: 'boolean',\n    scale: _objectSpread(_objectSpread({}, ordinalFieldScaleFunctions), ordinalFieldAggrScaleFunctions),\n    format: {\n      legend: function legend(d) {\n        return d;\n      },\n      tooltip: [_tooltip.TOOLTIP_FORMAT_TYPES.NONE, _tooltip.TOOLTIP_FORMAT_TYPES.BOOLEAN]\n    }\n  },\n  date: {\n    scale: _objectSpread(_objectSpread({}, ordinalFieldScaleFunctions), ordinalFieldAggrScaleFunctions),\n    format: {\n      legend: function legend(d) {\n        return d;\n      },\n      tooltip: [_tooltip.TOOLTIP_FORMAT_TYPES.NONE, _tooltip.TOOLTIP_FORMAT_TYPES.DATE]\n    }\n  },\n  geojson: {\n    type: 'geometry',\n    scale: _objectSpread(_objectSpread({}, notSupportedScaleOpts), notSupportAggrOpts),\n    format: {\n      legend: function legend(d) {\n        return '...';\n      },\n      tooltip: []\n    }\n  }\n};\nexports.FIELD_OPTS = FIELD_OPTS;\nvar CHANNEL_SCALE_SUPPORTED_FIELDS = Object.keys(CHANNEL_SCALES).reduce(function (accu, key) {\n  return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2[\"default\"])({}, key, Object.keys(FIELD_OPTS).filter(function (ft) {\n    return Object.keys(FIELD_OPTS[ft].scale[key]).length;\n  })));\n}, {});\nexports.CHANNEL_SCALE_SUPPORTED_FIELDS = CHANNEL_SCALE_SUPPORTED_FIELDS;\nvar DEFAULT_LAYER_COLOR = {\n  tripArc: '#9226C6',\n  begintrip_lat: '#1E96BE',\n  dropoff_lat: '#FF991F',\n  request_lat: '#52A353'\n}; // let user pass in default tooltip fields\n\nexports.DEFAULT_LAYER_COLOR = DEFAULT_LAYER_COLOR;\nvar DEFAULT_TOOLTIP_FIELDS = [];\nexports.DEFAULT_TOOLTIP_FIELDS = DEFAULT_TOOLTIP_FIELDS;\nvar NO_VALUE_COLOR = [0, 0, 0, 0];\nexports.NO_VALUE_COLOR = NO_VALUE_COLOR;\nvar LAYER_BLENDINGS = {\n  additive: {\n    label: 'layerBlending.additive',\n    blendFunc: ['SRC_ALPHA', 'DST_ALPHA'],\n    blendEquation: 'FUNC_ADD'\n  },\n  normal: {\n    // reference to\n    // https://limnu.com/webgl-blending-youre-probably-wrong/\n    label: 'layerBlending.normal',\n    blendFunc: ['SRC_ALPHA', 'ONE_MINUS_SRC_ALPHA', 'ONE', 'ONE_MINUS_SRC_ALPHA'],\n    blendEquation: ['FUNC_ADD', 'FUNC_ADD']\n  },\n  subtractive: {\n    label: 'layerBlending.subtractive',\n    blendFunc: ['ONE', 'ONE_MINUS_DST_COLOR', 'SRC_ALPHA', 'DST_ALPHA'],\n    blendEquation: ['FUNC_SUBTRACT', 'FUNC_ADD']\n  }\n};\nexports.LAYER_BLENDINGS = LAYER_BLENDINGS;\nvar MAX_DEFAULT_TOOLTIPS = 5;\nexports.MAX_DEFAULT_TOOLTIPS = MAX_DEFAULT_TOOLTIPS;\nvar RESOLUTIONS = (0, _keymirror[\"default\"])({\n  ONE_X: null,\n  TWO_X: null\n});\nexports.RESOLUTIONS = RESOLUTIONS;\nvar EXPORT_IMG_RATIOS = (0, _keymirror[\"default\"])({\n  SCREEN: null,\n  FOUR_BY_THREE: null,\n  SIXTEEN_BY_NINE: null,\n  CUSTOM: null\n});\nexports.EXPORT_IMG_RATIOS = EXPORT_IMG_RATIOS;\nvar ScreenRatioOption = {\n  id: EXPORT_IMG_RATIOS.SCREEN,\n  label: 'modal.exportImage.ratioOriginalScreen',\n  getSize: function getSize(screenW, screenH) {\n    return {\n      width: screenW,\n      height: screenH\n    };\n  }\n};\nexports.ScreenRatioOption = ScreenRatioOption;\nvar CustomRatioOption = {\n  id: EXPORT_IMG_RATIOS.CUSTOM,\n  hidden: true,\n  label: 'modal.exportImage.ratioCustom',\n  getSize: function getSize(mapW, mapH) {\n    return {\n      width: mapW,\n      height: mapH\n    };\n  }\n};\nexports.CustomRatioOption = CustomRatioOption;\nvar FourByThreeRatioOption = {\n  id: EXPORT_IMG_RATIOS.FOUR_BY_THREE,\n  label: 'modal.exportImage.ratio4_3',\n  getSize: function getSize(screenW, screenH) {\n    return {\n      width: screenW,\n      height: Math.round(screenW * 0.75)\n    };\n  }\n};\nexports.FourByThreeRatioOption = FourByThreeRatioOption;\nvar SixteenByNineRatioOption = {\n  id: EXPORT_IMG_RATIOS.SIXTEEN_BY_NINE,\n  label: 'modal.exportImage.ratio16_9',\n  getSize: function getSize(screenW, screenH) {\n    return {\n      width: screenW,\n      height: Math.round(screenW * 0.5625)\n    };\n  }\n};\nexports.SixteenByNineRatioOption = SixteenByNineRatioOption;\nvar EXPORT_IMG_RATIO_OPTIONS = [ScreenRatioOption, CustomRatioOption, FourByThreeRatioOption, SixteenByNineRatioOption];\nexports.EXPORT_IMG_RATIO_OPTIONS = EXPORT_IMG_RATIO_OPTIONS;\nvar OneXResolutionOption = {\n  id: RESOLUTIONS.ONE_X,\n  label: '1x',\n  available: true,\n  scale: 1,\n  getSize: function getSize(screenW, screenH) {\n    return {\n      width: screenW,\n      height: screenH\n    };\n  }\n};\nexports.OneXResolutionOption = OneXResolutionOption;\nvar TwoXResolutionOption = {\n  id: RESOLUTIONS.TWO_X,\n  label: '2x',\n  available: true,\n  scale: 2,\n  getSize: function getSize(screenW, screenH) {\n    return {\n      width: screenW * 2,\n      height: screenH * 2\n    };\n  }\n};\nexports.TwoXResolutionOption = TwoXResolutionOption;\nvar EXPORT_IMG_RESOLUTION_OPTIONS = [OneXResolutionOption, TwoXResolutionOption];\nexports.EXPORT_IMG_RESOLUTION_OPTIONS = EXPORT_IMG_RESOLUTION_OPTIONS;\nvar EXPORT_DATA_TYPE = (0, _keymirror[\"default\"])({\n  CSV: null // SHAPEFILE: null,\n  // JSON: null,\n  // GEOJSON: null,\n  // TOPOJSON: null\n});\n\nexports.EXPORT_DATA_TYPE = EXPORT_DATA_TYPE;\nvar EXPORT_DATA_TYPE_OPTIONS = [{\n  id: EXPORT_DATA_TYPE.CSV,\n  label: EXPORT_DATA_TYPE.CSV.toLowerCase(),\n  available: true\n} // {\n//   id: EXPORT_DATA_TYPE.SHAPEFILE,\n//   label: 'shapefile',\n//   available: false\n// },\n// {\n//   id: EXPORT_DATA_TYPE.JSON,\n//   label: 'json',\n//   available: false\n// },\n// {\n//   id: EXPORT_DATA_TYPE.GEOJSON,\n//   label: 'geojson',\n//   available: false\n// },\n// {\n//   id: EXPORT_DATA_TYPE.TOPOJSON,\n//   label: 'topojson',\n//   available: false\n// }\n]; // Export map types\n\nexports.EXPORT_DATA_TYPE_OPTIONS = EXPORT_DATA_TYPE_OPTIONS;\nvar EXPORT_MAP_FORMATS = (0, _keymirror[\"default\"])({\n  HTML: null,\n  JSON: null\n});\nexports.EXPORT_MAP_FORMATS = EXPORT_MAP_FORMATS;\nvar EXPORT_HTML_MAP_MODES = (0, _keymirror[\"default\"])({\n  READ: null,\n  EDIT: null\n}); // Export map options\n\nexports.EXPORT_HTML_MAP_MODES = EXPORT_HTML_MAP_MODES;\nvar EXPORT_MAP_FORMAT_OPTIONS = Object.entries(EXPORT_MAP_FORMATS).map(function (entry) {\n  return {\n    id: entry[0],\n    label: entry[1].toLowerCase(),\n    available: true\n  };\n});\nexports.EXPORT_MAP_FORMAT_OPTIONS = EXPORT_MAP_FORMAT_OPTIONS;\nfunction getHTMLMapModeTileUrl(mode) {\n  return \"https://d1a3f4spazzrp4.cloudfront.net/kepler.gl/documentation/map-\".concat(mode.toLowerCase(), \"-mode.png\");\n}\nvar EXPORT_HTML_MAP_MODE_OPTIONS = Object.entries(EXPORT_HTML_MAP_MODES).map(function (entry) {\n  return {\n    id: entry[0],\n    label: \"modal.exportMap.html.\".concat(entry[1].toLowerCase()),\n    available: true,\n    url: getHTMLMapModeTileUrl(entry[1])\n  };\n});\nexports.EXPORT_HTML_MAP_MODE_OPTIONS = EXPORT_HTML_MAP_MODE_OPTIONS;\nvar DEFAULT_UUID_COUNT = 6;\nexports.DEFAULT_UUID_COUNT = DEFAULT_UUID_COUNT;\nvar DEFAULT_NOTIFICATION_MESSAGE = 'MESSAGE_NOT_PROVIDED';\nexports.DEFAULT_NOTIFICATION_MESSAGE = DEFAULT_NOTIFICATION_MESSAGE;\nvar DEFAULT_NOTIFICATION_TYPES = (0, _keymirror[\"default\"])({\n  info: null,\n  error: null,\n  warning: null,\n  success: null\n});\nexports.DEFAULT_NOTIFICATION_TYPES = DEFAULT_NOTIFICATION_TYPES;\nvar DEFAULT_NOTIFICATION_TOPICS = (0, _keymirror[\"default\"])({\n  global: null,\n  file: null\n}); // Minimum time between identical notifications about deck.gl errors\n\nexports.DEFAULT_NOTIFICATION_TOPICS = DEFAULT_NOTIFICATION_TOPICS;\nvar THROTTLE_NOTIFICATION_TIME = 2500; // Animation\n\nexports.THROTTLE_NOTIFICATION_TIME = THROTTLE_NOTIFICATION_TIME;\nvar BASE_SPEED = 600;\nexports.BASE_SPEED = BASE_SPEED;\nvar FPS = 60;\n/**\n * 4 Animation Window Types\n * 1. free\n *  |->  |->\n * Current time is a fixed range, animation controller calls next animation frames continuously to animation a moving window\n * The increment id based on domain / BASE_SPEED * SPEED\n *\n * 2. incremental\n * |    |->\n * Same as free, current time is a growing range, only the max value of range increment during animation.\n * The increment is also based on domain / BASE_SPEED * SPEED\n *\n * 3. point\n * o -> o\n * Current time is a point, animation controller calls next animation frame continuously to animation a moving point\n * The increment is based on domain / BASE_SPEED * SPEED\n *\n * 4. interval\n * o ~> o\n * Current time is a point. An array of sorted time steps need to be provided.\n * animation controller calls next animation at a interval when the point jumps to the next step\n */\n\nexports.FPS = FPS;\nvar ANIMATION_WINDOW = (0, _keymirror[\"default\"])({\n  free: null,\n  incremental: null,\n  point: null,\n  interval: null\n});\nexports.ANIMATION_WINDOW = ANIMATION_WINDOW;\nvar DEFAULT_TIME_FORMAT = 'MM/DD/YY HH:mm:ssa';\nexports.DEFAULT_TIME_FORMAT = DEFAULT_TIME_FORMAT;\nvar SPEED_CONTROL_RANGE = [0, 10];\nexports.SPEED_CONTROL_RANGE = SPEED_CONTROL_RANGE;\nvar SPEED_CONTROL_STEP = 0.001; // Geocoder\n\nexports.SPEED_CONTROL_STEP = SPEED_CONTROL_STEP;\nvar GEOCODER_DATASET_NAME = 'geocoder_dataset';\nexports.GEOCODER_DATASET_NAME = GEOCODER_DATASET_NAME;\nvar GEOCODER_LAYER_ID = 'geocoder_layer';\nexports.GEOCODER_LAYER_ID = GEOCODER_LAYER_ID;\nvar GEOCODER_GEO_OFFSET = 0.05;\nexports.GEOCODER_GEO_OFFSET = GEOCODER_GEO_OFFSET;\nvar GEOCODER_ICON_COLOR = [255, 0, 0];\nexports.GEOCODER_ICON_COLOR = GEOCODER_ICON_COLOR;\nvar GEOCODER_ICON_SIZE = 80; // We could use directly react-map-gl-draw EditorMode but this would\n// create a direct dependency with react-map-gl-draw\n// Created this map to be independent from react-map-gl-draw\n\nexports.GEOCODER_ICON_SIZE = GEOCODER_ICON_SIZE;\nvar EDITOR_MODES = {\n  READ_ONLY: _reactMapGlDraw.EditorModes.READ_ONLY,\n  DRAW_POLYGON: _reactMapGlDraw.EditorModes.DRAW_POLYGON,\n  DRAW_RECTANGLE: _reactMapGlDraw.EditorModes.DRAW_RECTANGLE,\n  EDIT: _reactMapGlDraw.EditorModes.EDIT_VERTEX\n};\nexports.EDITOR_MODES = EDITOR_MODES;\nvar PLOT_TYPES = (0, _keymirror[\"default\"])({\n  histogram: null,\n  lineChart: null\n}); // GPU Filtering\n\n/**\n * Max number of filter value buffers that deck.gl provides\n */\n\nexports.PLOT_TYPES = PLOT_TYPES;\nvar MAX_GPU_FILTERS = 4;\nexports.MAX_GPU_FILTERS = MAX_GPU_FILTERS;\nvar MAP_THUMBNAIL_DIMENSION = {\n  width: 300,\n  height: 200\n};\nexports.MAP_THUMBNAIL_DIMENSION = MAP_THUMBNAIL_DIMENSION;\nvar MAP_INFO_CHARACTER = {\n  title: 100,\n  description: 100\n}; // Load data\n\nexports.MAP_INFO_CHARACTER = MAP_INFO_CHARACTER;\nvar LOADING_METHODS = (0, _keymirror[\"default\"])({\n  upload: null,\n  storage: null\n});\nexports.LOADING_METHODS = LOADING_METHODS;\nvar DEFAULT_FEATURE_FLAGS = {};\nexports.DEFAULT_FEATURE_FLAGS = DEFAULT_FEATURE_FLAGS;\nvar DATASET_FORMATS = (0, _keymirror[\"default\"])({\n  row: null,\n  geojson: null,\n  csv: null,\n  keplergl: null\n});\nexports.DATASET_FORMATS = DATASET_FORMATS;\nvar MAP_CONTROLS = (0, _keymirror[\"default\"])({\n  visibleLayers: null,\n  mapLegend: null,\n  toggle3d: null,\n  splitMap: null,\n  mapDraw: null,\n  mapLocale: null\n});\n/**\n * A multiplier for screen-space width/scale for Arc, Line, Icon and Text layers.\n * Required in order to maintain the same appearance after upgrading to deck.gl v8.5.\n * https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md\n */\n\nexports.MAP_CONTROLS = MAP_CONTROLS;\nvar PROJECTED_PIXEL_SIZE_MULTIPLIER = 2 / 3;\nexports.PROJECTED_PIXEL_SIZE_MULTIPLIER = PROJECTED_PIXEL_SIZE_MULTIPLIER;","map":{"version":3,"names":["exports","PROJECTED_PIXEL_SIZE_MULTIPLIER","MAP_CONTROLS","DATASET_FORMATS","DEFAULT_FEATURE_FLAGS","LOADING_METHODS","MAP_INFO_CHARACTER","MAP_THUMBNAIL_DIMENSION","MAX_GPU_FILTERS","PLOT_TYPES","EDITOR_MODES","GEOCODER_ICON_SIZE","GEOCODER_ICON_COLOR","GEOCODER_GEO_OFFSET","GEOCODER_LAYER_ID","GEOCODER_DATASET_NAME","SPEED_CONTROL_STEP","SPEED_CONTROL_RANGE","DEFAULT_TIME_FORMAT","ANIMATION_WINDOW","FPS","BASE_SPEED","THROTTLE_NOTIFICATION_TIME","DEFAULT_NOTIFICATION_TOPICS","DEFAULT_NOTIFICATION_TYPES","DEFAULT_NOTIFICATION_MESSAGE","DEFAULT_UUID_COUNT","EXPORT_HTML_MAP_MODE_OPTIONS","EXPORT_MAP_FORMAT_OPTIONS","EXPORT_HTML_MAP_MODES","EXPORT_MAP_FORMATS","EXPORT_DATA_TYPE_OPTIONS","EXPORT_DATA_TYPE","EXPORT_IMG_RESOLUTION_OPTIONS","TwoXResolutionOption","OneXResolutionOption","EXPORT_IMG_RATIO_OPTIONS","SixteenByNineRatioOption","FourByThreeRatioOption","CustomRatioOption","ScreenRatioOption","EXPORT_IMG_RATIOS","RESOLUTIONS","MAX_DEFAULT_TOOLTIPS","LAYER_BLENDINGS","NO_VALUE_COLOR","DEFAULT_TOOLTIP_FIELDS","DEFAULT_LAYER_COLOR","CHANNEL_SCALE_SUPPORTED_FIELDS","FIELD_OPTS","DEFAULT_AGGREGATION","notSupportAggrOpts","notSupportedScaleOpts","ordinalFieldAggrScaleFunctions","ordinalFieldScaleFunctions","linearFieldAggrScaleFunctions","linearFieldScaleFunctions","AGGREGATION_TYPES","CHANNEL_SCALES","HIGHLIGH_COLOR_3D","FIELD_COLORS","FIELD_TYPE_DISPLAY","TABLE_OPTION_LIST","TABLE_OPTION","SORT_ORDER","ALL_FIELD_TYPES","SCALE_FUNC","SCALE_TYPES","FILTER_TYPES","TRIP_ARC_FIELDS","ALTITUDE_FIELDS","TRIP_POINT_FIELDS","ICON_FIELDS","GEOJSON_FIELDS","DEFAULT_MAP_STYLES","DEFAULT_LAYER_GROUPS","PANELS","SIDEBAR_PANELS","THEME","DIMENSIONS","KEPLER_GL_WEBSITE","KEPLER_GL_VERSION","KEPLER_GL_NAME","SHARE_MAP_ID","OVERWRITE_MAP_ID","SAVE_MAP_ID","EXPORT_MAP_ID","ADD_MAP_STYLE_ID","EXPORT_DATA_ID","EXPORT_IMAGE_ID","ADD_DATA_ID","DELETE_DATA_ID","DATA_TABLE_ID","TRANSITION_DURATION","DEFAULT_MAPBOX_API_URL","ICON_PREFIX","CLOUDFRONT","ACTION_PREFIX","_defineProperty2","_interopRequireDefault","require","_keymirror","_reactMapGlDraw","_d3Scale","_tooltip","_SCALE_FUNC","_FIELD_TYPE_DISPLAY","_linearFieldScaleFunc","_CHANNEL_SCALES$color","_CHANNEL_SCALES$sizeA","_linearFieldAggrScale","_ordinalFieldScaleFun","_CHANNEL_SCALES$color2","_ordinalFieldAggrScal","_notSupportedScaleOpt","_notSupportAggrOpts","_DEFAULT_AGGREGATION","_objectSpread","target","i","arguments","length","source","ownKeys","Object","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","getOwnPropertyDescriptor","concat","sidePanel","width","margin","top","left","bottom","right","headerHeight","mapControl","pinned","light","dark","label","onClick","id","slug","filter","_ref","match","defaultVisibility","_ref2","_ref3","_ref4","_ref5","_ref6","url","icon","layerGroups","geojson","lat0","lng0","lat1","lng1","select","input","timeRange","multiSelect","polygon","ordinal","quantile","sqrt","log","point","linear","scaleLinear","quantize","scaleQuantize","scaleQuantile","scaleOrdinal","scaleSqrt","scaleLog","scalePoint","date","integer","real","timestamp","ASCENDING","DESCENDING","UNSORT","SORT_ASC","SORT_DES","PIN","UNPIN","COPY","value","display","condition","props","sortMode","isSorted","isPinned","ORANGE","PINK","PURPLE","BLUE","BLUE2","BLUE3","GREEN","RED","color","string","radius","colorAggr","count","average","minimum","median","stdev","sum","mode","countUnique","maximum","variance","sizeAggr","size","type","scale","format","legend","d","tooltip","TOOLTIP_FORMAT_TYPES","NONE","DECIMAL","PERCENTAGE","DATE","DATE_TIME","BOOLEAN","keys","reduce","accu","ft","tripArc","begintrip_lat","dropoff_lat","request_lat","blendFunc","blendEquation","ONE_X","SCREEN","FOUR_BY_THREE","SIXTEEN_BY_NINE","CUSTOM","getSize","screenW","screenH","height","mapW","mapH","Math","round","available","TWO_X","CSV","toLowerCase","HTML","JSON","READ","EDIT","entries","map","entry","getHTMLMapModeTileUrl","info","error","warning","success","global","file","incremental","interval","READ_ONLY","EditorModes","DRAW_POLYGON","EDIT_VERTEX","title","description","upload","storage"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/constants/src/default-settings.ts"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport keyMirror from 'keymirror';\nimport {EditorModes} from 'react-map-gl-draw';\n\nimport {\n  scaleLinear,\n  scaleQuantize,\n  scaleQuantile,\n  scaleOrdinal,\n  scaleSqrt,\n  scaleLog,\n  scalePoint\n} from 'd3-scale';\nimport {TOOLTIP_FORMAT_TYPES} from './tooltip';\nimport {RGBAColor} from '@kepler.gl/types';\n\nexport const ACTION_PREFIX = '@@kepler.gl/';\nexport const CLOUDFRONT = 'https://d1a3f4spazzrp4.cloudfront.net/kepler.gl';\nexport const ICON_PREFIX = `${CLOUDFRONT}/geodude`;\nexport const DEFAULT_MAPBOX_API_URL = 'https://api.mapbox.com';\nexport const TRANSITION_DURATION = 0;\n\n// Modal Ids\n/**\n * Modal id: data table\n * @constant\n * @type {string}\n * @public\n */\nexport const DATA_TABLE_ID = 'dataTable';\n/**\n * Modal id: delete dataset confirm dialog\n * @constant\n * @type {string}\n * @public\n */\nexport const DELETE_DATA_ID = 'deleteData';\n/**\n * Modal id: add data modal\n * @constant\n * @type {string}\n * @public\n */\nexport const ADD_DATA_ID = 'addData';\n/**\n * Modal id: export image modal\n * @constant\n * @type {string}\n * @public\n */\nexport const EXPORT_IMAGE_ID = 'exportImage';\n/**\n * Modal id: export data modal\n * @constant\n * @type {string}\n * @public\n */\nexport const EXPORT_DATA_ID = 'exportData';\n/**\n * Modal id: add custom map style modal\n * @constant\n * @type {string}\n * @public\n */\nexport const ADD_MAP_STYLE_ID = 'addMapStyle';\n/**\n * Modal id: export map modal\n * @constant\n * @type {string}\n * @public\n */\nexport const EXPORT_MAP_ID = 'exportMap';\n/**\n * Modal id: save map modal\n * @constant\n * @type {string}\n * @public\n */\nexport const SAVE_MAP_ID = 'saveMap';\n/**\n * Modal id: confirm to overwrite saved map\n * @constant\n * @type {string}\n * @public\n */\nexport const OVERWRITE_MAP_ID = 'overwriteMap';\n/**\n * Modal id: share map url modal\n * @constant\n * @type {string}\n * @public\n */\nexport const SHARE_MAP_ID = 'shareMap';\n\nexport const KEPLER_GL_NAME = 'kepler.gl';\n\n// __PACKAGE_VERSION__ is automatically injected by Babel/Webpack during the building process\n// Since we are injecting this during the build process with babel\n// while developing VERSION is not defined, we capture the exception and return\n// an empty string which will allow us to retrieve the latest umd version\nexport const KEPLER_GL_VERSION = '__PACKAGE_VERSION__';\nexport const KEPLER_GL_WEBSITE = 'http://kepler.gl/';\n\nexport const DIMENSIONS = {\n  sidePanel: {\n    width: 300,\n    margin: {top: 20, left: 20, bottom: 30, right: 20},\n    headerHeight: 96\n  },\n  mapControl: {\n    width: 184,\n    padding: 12,\n    mapLegend: {\n      pinned: {\n        bottom: 22,\n        right: 12\n      }\n    }\n  }\n};\n\n/**\n * Theme name that can be passed to `KeplerGl` `prop.theme`.\n * Available themes are `THEME.light` and `THEME.dark`. Default theme is `THEME.dark`\n * @constant\n * @type {object}\n * @public\n * @example\n * ```js\n * const Map = () => <KeplerGl theme={THEME.light} id=\"map\"/>\n * ```\n */\nexport const THEME = keyMirror({\n  light: null,\n  dark: null,\n  base: null\n});\n\nexport const SIDEBAR_PANELS = [\n  {\n    id: 'layer',\n    label: 'sidebar.panels.layer',\n    onClick: null\n  },\n  {\n    id: 'filter',\n    label: 'sidebar.panels.filter',\n    onClick: null\n  },\n  {\n    id: 'interaction',\n    label: 'sidebar.panels.interaction',\n    onClick: null\n  },\n  {\n    id: 'map',\n    label: 'sidebar.panels.basemap',\n    onClick: null\n  }\n];\n\n// backward compatibility\nexport const PANELS = SIDEBAR_PANELS;\n\n// MAP STYLES\n\ntype DEFAULT_LAYER_GROUP = {\n  slug: string;\n  filter: (value) => boolean;\n  defaultVisibility: boolean;\n};\n\nexport const DEFAULT_LAYER_GROUPS: DEFAULT_LAYER_GROUP[] = [\n  {\n    slug: 'label',\n    filter: ({id}) => id.match(/(?=(label|place-|poi-))/),\n    defaultVisibility: true\n  },\n  {\n    slug: 'road',\n    filter: ({id}) => id.match(/(?=(road|railway|tunnel|street|bridge))(?!.*label)/),\n    defaultVisibility: true\n  },\n  {\n    slug: 'border',\n    filter: ({id}) => id.match(/border|boundaries|boundary/),\n    defaultVisibility: false\n  },\n  {\n    slug: 'building',\n    filter: ({id}) => id.match(/building/),\n    defaultVisibility: true\n  },\n  {\n    slug: 'water',\n    filter: ({id}) => id.match(/(?=(water|stream|ferry))/),\n    defaultVisibility: true\n  },\n  {\n    slug: 'land',\n    filter: ({id}) => id.match(/(?=(parks|landcover|industrial|sand|hillshade))/),\n    defaultVisibility: true\n  },\n  {\n    slug: '3d building',\n    filter: () => false,\n    defaultVisibility: false\n  }\n];\n\nexport const DEFAULT_MAP_STYLES = [\n  {\n    id: 'dark',\n    label: 'Dark',\n    url: 'mapbox://styles/uberdata/cjoqbbf6l9k302sl96tyvka09',\n    icon: `${ICON_PREFIX}/UBER_DARK_V2.png`,\n    layerGroups: DEFAULT_LAYER_GROUPS\n  },\n  {\n    id: 'light',\n    label: 'Light',\n    url: 'mapbox://styles/uberdata/cjoqb9j339k1f2sl9t5ic5bn4',\n    icon: `${ICON_PREFIX}/UBER_LIGHT_V2.png`,\n    layerGroups: DEFAULT_LAYER_GROUPS\n  },\n  {\n    id: 'muted',\n    label: 'Muted Light',\n    url: 'mapbox://styles/uberdata/cjfyl03kp1tul2smf5v2tbdd4',\n    icon: `${ICON_PREFIX}/UBER_MUTED_LIGHT.png`,\n    layerGroups: DEFAULT_LAYER_GROUPS\n  },\n  {\n    id: 'muted_night',\n    label: 'Muted Night',\n    url: 'mapbox://styles/uberdata/cjfxhlikmaj1b2soyzevnywgs',\n    icon: `${ICON_PREFIX}/UBER_MUTED_NIGHT.png`,\n    layerGroups: DEFAULT_LAYER_GROUPS\n  },\n  {\n    id: 'satellite',\n    label: 'Satellite',\n    url: `mapbox://styles/mapbox/satellite-v9`,\n    icon: `${ICON_PREFIX}/UBER_SATELLITE.png`\n  }\n];\n\nexport const GEOJSON_FIELDS = {\n  geojson: ['_geojson', 'all_points', 'geojson']\n};\n\nexport const ICON_FIELDS = {\n  icon: ['icon']\n};\n\nexport const TRIP_POINT_FIELDS: [string, string][] = [\n  ['lat', 'lng'],\n  ['lat', 'lon'],\n  ['lat', 'long'],\n  ['latitude', 'longitude']\n];\n\nexport const ALTITUDE_FIELDS = ['alt', 'altitude'];\nexport const TRIP_ARC_FIELDS = {\n  lat0: 'begintrip',\n  lng0: 'begintrip',\n  lat1: 'dropoff',\n  lng1: 'dropoff'\n};\n\nexport const FILTER_TYPES = keyMirror({\n  range: null,\n  select: null,\n  input: null,\n  timeRange: null,\n  multiSelect: null,\n  polygon: null\n});\n\nexport const SCALE_TYPES = keyMirror({\n  ordinal: null,\n  quantile: null,\n  quantize: null,\n  linear: null,\n  sqrt: null,\n  log: null,\n\n  // ordinal domain to linear range\n  point: null\n});\n\nexport const SCALE_FUNC = {\n  [SCALE_TYPES.linear]: scaleLinear,\n  [SCALE_TYPES.quantize]: scaleQuantize,\n  [SCALE_TYPES.quantile]: scaleQuantile,\n  [SCALE_TYPES.ordinal]: scaleOrdinal,\n  [SCALE_TYPES.sqrt]: scaleSqrt,\n  [SCALE_TYPES.log]: scaleLog,\n  [SCALE_TYPES.point]: scalePoint\n};\n\nexport const ALL_FIELD_TYPES = keyMirror({\n  boolean: null,\n  date: null,\n  geojson: null,\n  integer: null,\n  real: null,\n  string: null,\n  timestamp: null,\n  point: null\n});\n\n// Data Table\nexport const SORT_ORDER = keyMirror({\n  ASCENDING: null,\n  DESCENDING: null,\n  UNSORT: null\n});\n\nexport const TABLE_OPTION = keyMirror({\n  SORT_ASC: null,\n  SORT_DES: null,\n  UNSORT: null,\n  PIN: null,\n  UNPIN: null,\n  COPY: null\n});\n\nexport const TABLE_OPTION_LIST = [\n  {\n    value: TABLE_OPTION.SORT_ASC,\n    display: 'Sort Ascending',\n    icon: 'ArrowUp',\n    condition: props => props.sortMode !== SORT_ORDER.ASCENDING\n  },\n  {\n    value: TABLE_OPTION.SORT_DES,\n    display: 'Sort Descending',\n    icon: 'ArrowDown',\n    condition: props => props.sortMode !== SORT_ORDER.DESCENDING\n  },\n  {\n    value: TABLE_OPTION.UNSORT,\n    display: 'Unsort Column',\n    icon: 'Cancel',\n    condition: props => props.isSorted\n  },\n  {\n    value: TABLE_OPTION.PIN,\n    display: 'Pin Column',\n    icon: 'Pin',\n    condition: props => !props.isPinned\n  },\n  {\n    value: TABLE_OPTION.UNPIN,\n    display: 'Unpin Column',\n    icon: 'Cancel',\n    condition: props => props.isPinned\n  },\n  {value: TABLE_OPTION.COPY, display: 'Copy Column', icon: 'Clipboard'}\n];\n\nconst ORANGE = '248, 194, 28';\nconst PINK = '231, 189, 194';\nconst PURPLE = '160, 106, 206';\nconst BLUE = '140, 210, 205';\nconst BLUE2 = '106, 160, 206';\nconst BLUE3 = '0, 172, 237';\nconst GREEN = '106, 160, 56';\nconst RED = '237, 88, 106';\n\nexport const FIELD_TYPE_DISPLAY = {\n  [ALL_FIELD_TYPES.boolean]: {\n    label: 'bool',\n    color: PINK\n  },\n  [ALL_FIELD_TYPES.date]: {\n    label: 'date',\n    color: PURPLE\n  },\n  [ALL_FIELD_TYPES.geojson]: {\n    label: 'geo',\n    color: BLUE2\n  },\n  [ALL_FIELD_TYPES.integer]: {\n    label: 'int',\n    color: ORANGE\n  },\n  [ALL_FIELD_TYPES.real]: {\n    label: 'float',\n    color: ORANGE\n  },\n  [ALL_FIELD_TYPES.string]: {\n    label: 'string',\n    color: BLUE\n  },\n  [ALL_FIELD_TYPES.timestamp]: {\n    label: 'time',\n    color: GREEN\n  },\n  // field pairs\n  [ALL_FIELD_TYPES.point]: {\n    label: 'point',\n    color: BLUE3\n  }\n};\n\nexport const FIELD_COLORS = {\n  default: RED\n};\nexport const HIGHLIGH_COLOR_3D: RGBAColor = [255, 255, 255, 60];\nexport const CHANNEL_SCALES = keyMirror({\n  color: null,\n  radius: null,\n  size: null,\n  colorAggr: null,\n  sizeAggr: null\n});\n\nexport const AGGREGATION_TYPES: {\n  // default\n  count: 'count';\n  // linear\n  average: 'average';\n  maximum: 'maximum';\n  minimum: 'minimum';\n  median: 'median';\n  stdev: 'stdev';\n  sum: 'sum';\n  variance: 'variance';\n  // ordinal\n  mode: 'mode';\n  countUnique: 'count unique';\n} = {\n  // default\n  count: 'count',\n  // linear\n  average: 'average',\n  maximum: 'maximum',\n  minimum: 'minimum',\n  median: 'median',\n  stdev: 'stdev',\n  sum: 'sum',\n  variance: 'variance',\n  // ordinal\n  mode: 'mode',\n  countUnique: 'count unique'\n};\n\nexport const linearFieldScaleFunctions = {\n  [CHANNEL_SCALES.color]: [SCALE_TYPES.quantize, SCALE_TYPES.quantile],\n  [CHANNEL_SCALES.radius]: [SCALE_TYPES.sqrt],\n  [CHANNEL_SCALES.size]: [SCALE_TYPES.linear, SCALE_TYPES.sqrt, SCALE_TYPES.log]\n};\n\nexport const linearFieldAggrScaleFunctions = {\n  [CHANNEL_SCALES.colorAggr]: {\n    [AGGREGATION_TYPES.average]: [SCALE_TYPES.quantize, SCALE_TYPES.quantile],\n    [AGGREGATION_TYPES.maximum]: [SCALE_TYPES.quantize, SCALE_TYPES.quantile],\n    [AGGREGATION_TYPES.minimum]: [SCALE_TYPES.quantize, SCALE_TYPES.quantile],\n    [AGGREGATION_TYPES.median]: [SCALE_TYPES.quantize, SCALE_TYPES.quantile],\n    [AGGREGATION_TYPES.stdev]: [SCALE_TYPES.quantize, SCALE_TYPES.quantile],\n    [AGGREGATION_TYPES.sum]: [SCALE_TYPES.quantize, SCALE_TYPES.quantile],\n    [AGGREGATION_TYPES.variance]: [SCALE_TYPES.quantize, SCALE_TYPES.quantile]\n  },\n\n  [CHANNEL_SCALES.sizeAggr]: {\n    [AGGREGATION_TYPES.average]: [SCALE_TYPES.linear, SCALE_TYPES.sqrt, SCALE_TYPES.log],\n    [AGGREGATION_TYPES.maximum]: [SCALE_TYPES.linear, SCALE_TYPES.sqrt, SCALE_TYPES.log],\n    [AGGREGATION_TYPES.minimum]: [SCALE_TYPES.linear, SCALE_TYPES.sqrt, SCALE_TYPES.log],\n    [AGGREGATION_TYPES.median]: [SCALE_TYPES.linear, SCALE_TYPES.sqrt, SCALE_TYPES.log],\n    [AGGREGATION_TYPES.stdev]: [SCALE_TYPES.linear, SCALE_TYPES.sqrt, SCALE_TYPES.log],\n    [AGGREGATION_TYPES.sum]: [SCALE_TYPES.linear, SCALE_TYPES.sqrt, SCALE_TYPES.log],\n    [AGGREGATION_TYPES.variance]: [SCALE_TYPES.linear, SCALE_TYPES.sqrt, SCALE_TYPES.log]\n  }\n};\n\nexport const ordinalFieldScaleFunctions = {\n  [CHANNEL_SCALES.color]: [SCALE_TYPES.ordinal],\n  [CHANNEL_SCALES.radius]: [SCALE_TYPES.point],\n  [CHANNEL_SCALES.size]: [SCALE_TYPES.point]\n};\n\nexport const ordinalFieldAggrScaleFunctions = {\n  // [CHANNEL_SCALES.colorAggr]: [SCALE_TYPES.ordinal, SCALE_TYPES.linear],\n  [CHANNEL_SCALES.colorAggr]: {\n    [AGGREGATION_TYPES.mode]: [SCALE_TYPES.ordinal],\n    [AGGREGATION_TYPES.countUnique]: [SCALE_TYPES.quantize, SCALE_TYPES.quantile]\n  },\n\n  // Currently doesn't support yet\n  [CHANNEL_SCALES.sizeAggr]: {}\n};\n\nexport const notSupportedScaleOpts = {\n  [CHANNEL_SCALES.color]: [],\n  [CHANNEL_SCALES.radius]: [],\n  [CHANNEL_SCALES.size]: []\n};\n\nexport const notSupportAggrOpts = {\n  [CHANNEL_SCALES.colorAggr]: {},\n  [CHANNEL_SCALES.sizeAggr]: {}\n};\n\n/**\n * Default aggregation are based on ocunt\n */\nexport const DEFAULT_AGGREGATION = {\n  [CHANNEL_SCALES.colorAggr]: {\n    [AGGREGATION_TYPES.count]: [SCALE_TYPES.quantize, SCALE_TYPES.quantile]\n  },\n  [CHANNEL_SCALES.sizeAggr]: {\n    [AGGREGATION_TYPES.count]: [SCALE_TYPES.linear, SCALE_TYPES.sqrt, SCALE_TYPES.log]\n  }\n};\n\n/**\n * Define what type of scale operation is allowed on each type of fields\n */\nexport const FIELD_OPTS = {\n  string: {\n    type: 'categorical',\n    scale: {\n      ...ordinalFieldScaleFunctions,\n      ...ordinalFieldAggrScaleFunctions\n    },\n    format: {\n      legend: d => d,\n      tooltip: []\n    }\n  },\n  real: {\n    type: 'numerical',\n    scale: {\n      ...linearFieldScaleFunctions,\n      ...linearFieldAggrScaleFunctions\n    },\n    format: {\n      legend: d => d,\n      tooltip: [\n        TOOLTIP_FORMAT_TYPES.NONE,\n        TOOLTIP_FORMAT_TYPES.DECIMAL,\n        TOOLTIP_FORMAT_TYPES.PERCENTAGE\n      ]\n    }\n  },\n  timestamp: {\n    type: 'time',\n    scale: {\n      ...linearFieldScaleFunctions,\n      ...notSupportAggrOpts\n    },\n    format: {\n      legend: d => d,\n      tooltip: [\n        TOOLTIP_FORMAT_TYPES.NONE,\n        TOOLTIP_FORMAT_TYPES.DATE,\n        TOOLTIP_FORMAT_TYPES.DATE_TIME\n      ]\n    }\n  },\n  integer: {\n    type: 'numerical',\n    scale: {\n      ...linearFieldScaleFunctions,\n      ...linearFieldAggrScaleFunctions\n    },\n    format: {\n      legend: d => d,\n      tooltip: [\n        TOOLTIP_FORMAT_TYPES.NONE,\n        TOOLTIP_FORMAT_TYPES.DECIMAL,\n        TOOLTIP_FORMAT_TYPES.PERCENTAGE\n      ]\n    }\n  },\n  boolean: {\n    type: 'boolean',\n    scale: {\n      ...ordinalFieldScaleFunctions,\n      ...ordinalFieldAggrScaleFunctions\n    },\n    format: {\n      legend: d => d,\n      tooltip: [TOOLTIP_FORMAT_TYPES.NONE, TOOLTIP_FORMAT_TYPES.BOOLEAN]\n    }\n  },\n  date: {\n    scale: {\n      ...ordinalFieldScaleFunctions,\n      ...ordinalFieldAggrScaleFunctions\n    },\n    format: {\n      legend: d => d,\n      tooltip: [TOOLTIP_FORMAT_TYPES.NONE, TOOLTIP_FORMAT_TYPES.DATE]\n    }\n  },\n  geojson: {\n    type: 'geometry',\n    scale: {\n      ...notSupportedScaleOpts,\n      ...notSupportAggrOpts\n    },\n    format: {\n      legend: d => '...',\n      tooltip: []\n    }\n  }\n};\n\nexport const CHANNEL_SCALE_SUPPORTED_FIELDS = Object.keys(CHANNEL_SCALES).reduce(\n  (accu, key) => ({\n    ...accu,\n    [key]: Object.keys(FIELD_OPTS).filter(ft => Object.keys(FIELD_OPTS[ft].scale[key]).length)\n  }),\n  {} as {[id: string]: string[]}\n);\n\nexport const DEFAULT_LAYER_COLOR = {\n  tripArc: '#9226C6',\n  begintrip_lat: '#1E96BE',\n  dropoff_lat: '#FF991F',\n  request_lat: '#52A353'\n};\n\n// let user pass in default tooltip fields\nexport const DEFAULT_TOOLTIP_FIELDS: any[] = [];\n\nexport const NO_VALUE_COLOR: RGBAColor = [0, 0, 0, 0];\n\nexport const LAYER_BLENDINGS = {\n  additive: {\n    label: 'layerBlending.additive',\n    blendFunc: ['SRC_ALPHA', 'DST_ALPHA'],\n    blendEquation: 'FUNC_ADD'\n  },\n  normal: {\n    // reference to\n    // https://limnu.com/webgl-blending-youre-probably-wrong/\n    label: 'layerBlending.normal',\n    blendFunc: ['SRC_ALPHA', 'ONE_MINUS_SRC_ALPHA', 'ONE', 'ONE_MINUS_SRC_ALPHA'],\n    blendEquation: ['FUNC_ADD', 'FUNC_ADD']\n  },\n  subtractive: {\n    label: 'layerBlending.subtractive',\n    blendFunc: ['ONE', 'ONE_MINUS_DST_COLOR', 'SRC_ALPHA', 'DST_ALPHA'],\n    blendEquation: ['FUNC_SUBTRACT', 'FUNC_ADD']\n  }\n};\n\nexport const MAX_DEFAULT_TOOLTIPS = 5;\n\nexport const RESOLUTIONS = keyMirror({\n  ONE_X: null,\n  TWO_X: null\n});\n\nexport const EXPORT_IMG_RATIOS = keyMirror({\n  SCREEN: null,\n  FOUR_BY_THREE: null,\n  SIXTEEN_BY_NINE: null,\n  CUSTOM: null\n});\n\nexport type ExportImage = {\n  ratio: keyof typeof EXPORT_IMG_RATIOS;\n  resolution: keyof typeof RESOLUTIONS;\n  legend: boolean;\n  mapH: number;\n  mapW: number;\n  imageSize: {\n    zoomOffset: number;\n    scale: number;\n    imageW: number;\n    imageH: number;\n  };\n  // exporting state\n  imageDataUri: string;\n  exporting: boolean;\n  processing: boolean;\n  error: Error | false;\n  // This field was not in the .d.ts file\n  center: boolean;\n};\n\nexport type ImageRatioOption = {\n  id: keyof typeof EXPORT_IMG_RATIOS;\n  label: string;\n  hidden?: boolean;\n  getSize: (screenW: number, screenH: number) => {width: number; height: number};\n};\n\nexport const ScreenRatioOption: ImageRatioOption = {\n  id: EXPORT_IMG_RATIOS.SCREEN,\n  label: 'modal.exportImage.ratioOriginalScreen',\n  getSize: (screenW, screenH) => ({width: screenW, height: screenH})\n};\nexport const CustomRatioOption: ImageRatioOption = {\n  id: EXPORT_IMG_RATIOS.CUSTOM,\n  hidden: true,\n  label: 'modal.exportImage.ratioCustom',\n  getSize: (mapW, mapH) => ({width: mapW, height: mapH})\n};\nexport const FourByThreeRatioOption: ImageRatioOption = {\n  id: EXPORT_IMG_RATIOS.FOUR_BY_THREE,\n  label: 'modal.exportImage.ratio4_3',\n  getSize: (screenW, screenH) => ({\n    width: screenW,\n    height: Math.round(screenW * 0.75)\n  })\n};\nexport const SixteenByNineRatioOption: ImageRatioOption = {\n  id: EXPORT_IMG_RATIOS.SIXTEEN_BY_NINE,\n  label: 'modal.exportImage.ratio16_9',\n  getSize: (screenW, screenH) => ({\n    width: screenW,\n    height: Math.round(screenW * 0.5625)\n  })\n};\n\nexport const EXPORT_IMG_RATIO_OPTIONS: ReadonlyArray<ImageRatioOption> = [\n  ScreenRatioOption,\n  CustomRatioOption,\n  FourByThreeRatioOption,\n  SixteenByNineRatioOption\n];\n\nexport type ImageResolutionOption = {\n  id: keyof typeof RESOLUTIONS;\n  label: string;\n  available: boolean;\n  scale: number;\n  getSize: (screenW: number, screenH: number) => {width: number; height: number};\n};\n\nexport const OneXResolutionOption: ImageResolutionOption = {\n  id: RESOLUTIONS.ONE_X,\n  label: '1x',\n  available: true,\n  scale: 1,\n  getSize: (screenW, screenH) => ({\n    width: screenW,\n    height: screenH\n  })\n};\n\nexport const TwoXResolutionOption: ImageResolutionOption = {\n  id: RESOLUTIONS.TWO_X,\n  label: '2x',\n  available: true,\n  scale: 2,\n  getSize: (screenW, screenH) => ({\n    width: screenW * 2,\n    height: screenH * 2\n  })\n};\n\nexport const EXPORT_IMG_RESOLUTION_OPTIONS: ReadonlyArray<ImageResolutionOption> = [\n  OneXResolutionOption,\n  TwoXResolutionOption\n];\n\nexport const EXPORT_DATA_TYPE = keyMirror({\n  CSV: null\n  // SHAPEFILE: null,\n  // JSON: null,\n  // GEOJSON: null,\n  // TOPOJSON: null\n});\n\nexport const EXPORT_DATA_TYPE_OPTIONS = [\n  {\n    id: EXPORT_DATA_TYPE.CSV,\n    label: EXPORT_DATA_TYPE.CSV.toLowerCase(),\n    available: true\n  }\n  // {\n  //   id: EXPORT_DATA_TYPE.SHAPEFILE,\n  //   label: 'shapefile',\n  //   available: false\n  // },\n  // {\n  //   id: EXPORT_DATA_TYPE.JSON,\n  //   label: 'json',\n  //   available: false\n  // },\n  // {\n  //   id: EXPORT_DATA_TYPE.GEOJSON,\n  //   label: 'geojson',\n  //   available: false\n  // },\n  // {\n  //   id: EXPORT_DATA_TYPE.TOPOJSON,\n  //   label: 'topojson',\n  //   available: false\n  // }\n];\n\n// Export map types\nexport const EXPORT_MAP_FORMATS = keyMirror({\n  HTML: null,\n  JSON: null\n});\n\nexport const EXPORT_HTML_MAP_MODES = keyMirror({\n  READ: null,\n  EDIT: null\n});\n\n// Export map options\nexport const EXPORT_MAP_FORMAT_OPTIONS = Object.entries(EXPORT_MAP_FORMATS).map(\n  (entry: [string, any]) => ({\n    id: entry[0],\n    label: entry[1].toLowerCase(),\n    available: true\n  })\n);\n\nexport function getHTMLMapModeTileUrl(mode) {\n  return `https://d1a3f4spazzrp4.cloudfront.net/kepler.gl/documentation/map-${mode.toLowerCase()}-mode.png`;\n}\n\nexport const EXPORT_HTML_MAP_MODE_OPTIONS = Object.entries(EXPORT_HTML_MAP_MODES).map(\n  (entry: [string, any]) => ({\n    id: entry[0],\n    label: `modal.exportMap.html.${entry[1].toLowerCase()}`,\n    available: true,\n    url: getHTMLMapModeTileUrl(entry[1])\n  })\n);\n\nexport const DEFAULT_UUID_COUNT = 6;\n\nexport const DEFAULT_NOTIFICATION_MESSAGE = 'MESSAGE_NOT_PROVIDED';\n\nexport const DEFAULT_NOTIFICATION_TYPES = keyMirror({\n  info: null,\n  error: null,\n  warning: null,\n  success: null\n});\n\nexport const DEFAULT_NOTIFICATION_TOPICS = keyMirror({\n  global: null,\n  file: null\n});\n\n// Minimum time between identical notifications about deck.gl errors\nexport const THROTTLE_NOTIFICATION_TIME = 2500;\n\n// Animation\nexport const BASE_SPEED = 600;\nexport const FPS = 60;\n\n/**\n * 4 Animation Window Types\n * 1. free\n *  |->  |->\n * Current time is a fixed range, animation controller calls next animation frames continuously to animation a moving window\n * The increment id based on domain / BASE_SPEED * SPEED\n *\n * 2. incremental\n * |    |->\n * Same as free, current time is a growing range, only the max value of range increment during animation.\n * The increment is also based on domain / BASE_SPEED * SPEED\n *\n * 3. point\n * o -> o\n * Current time is a point, animation controller calls next animation frame continuously to animation a moving point\n * The increment is based on domain / BASE_SPEED * SPEED\n *\n * 4. interval\n * o ~> o\n * Current time is a point. An array of sorted time steps need to be provided.\n * animation controller calls next animation at a interval when the point jumps to the next step\n */\nexport const ANIMATION_WINDOW = keyMirror({\n  free: null,\n  incremental: null,\n  point: null,\n  interval: null\n});\nexport const DEFAULT_TIME_FORMAT = 'MM/DD/YY HH:mm:ssa';\nexport const SPEED_CONTROL_RANGE: [number, number] = [0, 10];\nexport const SPEED_CONTROL_STEP = 0.001;\n\n// Geocoder\nexport const GEOCODER_DATASET_NAME = 'geocoder_dataset';\nexport const GEOCODER_LAYER_ID = 'geocoder_layer';\nexport const GEOCODER_GEO_OFFSET = 0.05;\nexport const GEOCODER_ICON_COLOR: [number, number, number] = [255, 0, 0];\nexport const GEOCODER_ICON_SIZE = 80;\n\n// We could use directly react-map-gl-draw EditorMode but this would\n// create a direct dependency with react-map-gl-draw\n// Created this map to be independent from react-map-gl-draw\nexport const EDITOR_MODES = {\n  READ_ONLY: EditorModes.READ_ONLY,\n  DRAW_POLYGON: EditorModes.DRAW_POLYGON,\n  DRAW_RECTANGLE: EditorModes.DRAW_RECTANGLE,\n  EDIT: EditorModes.EDIT_VERTEX\n};\n\nexport const PLOT_TYPES = keyMirror({\n  histogram: null,\n  lineChart: null\n});\n\n// GPU Filtering\n/**\n * Max number of filter value buffers that deck.gl provides\n */\nexport const MAX_GPU_FILTERS = 4;\nexport const MAP_THUMBNAIL_DIMENSION = {\n  width: 300,\n  height: 200\n};\n\nexport const MAP_INFO_CHARACTER = {\n  title: 100,\n  description: 100\n};\n\n// Load data\nexport const LOADING_METHODS = keyMirror({\n  upload: null,\n  storage: null\n});\n\nexport const DEFAULT_FEATURE_FLAGS = {};\n\nexport const DATASET_FORMATS = keyMirror({\n  row: null,\n  geojson: null,\n  csv: null,\n  keplergl: null\n});\n\nexport const MAP_CONTROLS = keyMirror({\n  visibleLayers: null,\n  mapLegend: null,\n  toggle3d: null,\n  splitMap: null,\n  mapDraw: null,\n  mapLocale: null\n});\n\n/**\n * A multiplier for screen-space width/scale for Arc, Line, Icon and Text layers.\n * Required in order to maintain the same appearance after upgrading to deck.gl v8.5.\n * https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md\n */\nexport const PROJECTED_PIXEL_SIZE_MULTIPLIER = 2 / 3;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}