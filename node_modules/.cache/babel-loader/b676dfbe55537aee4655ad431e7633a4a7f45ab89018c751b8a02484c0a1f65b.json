{"ast":null,"code":"import _slicedToArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Viewport from '../viewports/viewport';\nimport { Matrix4, clamp } from '@math.gl/core';\nimport { pixelsToWorld } from '@math.gl/web-mercator';\nimport * as vec2 from 'gl-matrix/vec2';\nvar viewMatrix = new Matrix4().lookAt({\n  eye: [0, 0, 1]\n});\nfunction getProjectionMatrix(_ref) {\n  var width = _ref.width,\n    height = _ref.height,\n    near = _ref.near,\n    far = _ref.far,\n    padding = _ref.padding;\n  var left = -width / 2;\n  var right = width / 2;\n  var bottom = -height / 2;\n  var top = height / 2;\n  if (padding) {\n    var _padding$left = padding.left,\n      l = _padding$left === void 0 ? 0 : _padding$left,\n      _padding$right = padding.right,\n      r = _padding$right === void 0 ? 0 : _padding$right,\n      _padding$top = padding.top,\n      t = _padding$top === void 0 ? 0 : _padding$top,\n      _padding$bottom = padding.bottom,\n      b = _padding$bottom === void 0 ? 0 : _padding$bottom;\n    var offsetX = clamp((l + width - r) / 2, 0, width) - width / 2;\n    var offsetY = clamp((t + height - b) / 2, 0, height) - height / 2;\n    left -= offsetX;\n    right -= offsetX;\n    bottom += offsetY;\n    top += offsetY;\n  }\n  return new Matrix4().ortho({\n    left: left,\n    right: right,\n    bottom: bottom,\n    top: top,\n    near: near,\n    far: far\n  });\n}\nvar OrthographicViewport = /*#__PURE__*/function (_Viewport) {\n  _inherits(OrthographicViewport, _Viewport);\n  var _super = _createSuper(OrthographicViewport);\n  function OrthographicViewport(props) {\n    _classCallCheck(this, OrthographicViewport);\n    var width = props.width,\n      height = props.height,\n      _props$near = props.near,\n      near = _props$near === void 0 ? 0.1 : _props$near,\n      _props$far = props.far,\n      far = _props$far === void 0 ? 1000 : _props$far,\n      _props$zoom = props.zoom,\n      zoom = _props$zoom === void 0 ? 0 : _props$zoom,\n      _props$target = props.target,\n      target = _props$target === void 0 ? [0, 0, 0] : _props$target,\n      _props$padding = props.padding,\n      padding = _props$padding === void 0 ? null : _props$padding,\n      _props$flipY = props.flipY,\n      flipY = _props$flipY === void 0 ? true : _props$flipY;\n    var zoomX = Array.isArray(zoom) ? zoom[0] : zoom;\n    var zoomY = Array.isArray(zoom) ? zoom[1] : zoom;\n    var zoom_ = Math.min(zoomX, zoomY);\n    var scale = Math.pow(2, zoom_);\n    var distanceScales;\n    if (zoomX !== zoomY) {\n      var scaleX = Math.pow(2, zoomX);\n      var scaleY = Math.pow(2, zoomY);\n      distanceScales = {\n        unitsPerMeter: [scaleX / scale, scaleY / scale, 1],\n        metersPerUnit: [scale / scaleX, scale / scaleY, 1]\n      };\n    }\n    return _super.call(this, _objectSpread(_objectSpread({}, props), {}, {\n      longitude: undefined,\n      position: target,\n      viewMatrix: viewMatrix.clone().scale([scale, scale * (flipY ? -1 : 1), scale]),\n      projectionMatrix: getProjectionMatrix({\n        width: width || 1,\n        height: height || 1,\n        padding: padding,\n        near: near,\n        far: far\n      }),\n      zoom: zoom_,\n      distanceScales: distanceScales\n    }));\n  }\n  _createClass(OrthographicViewport, [{\n    key: \"projectFlat\",\n    value: function projectFlat(_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n        X = _ref3[0],\n        Y = _ref3[1];\n      var unitsPerMeter = this.distanceScales.unitsPerMeter;\n      return [X * unitsPerMeter[0], Y * unitsPerMeter[1]];\n    }\n  }, {\n    key: \"unprojectFlat\",\n    value: function unprojectFlat(_ref4) {\n      var _ref5 = _slicedToArray(_ref4, 2),\n        x = _ref5[0],\n        y = _ref5[1];\n      var metersPerUnit = this.distanceScales.metersPerUnit;\n      return [x * metersPerUnit[0], y * metersPerUnit[1]];\n    }\n  }, {\n    key: \"panByPosition\",\n    value: function panByPosition(coords, pixel) {\n      var fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n      var toLocation = this.projectFlat(coords);\n      var translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n      var newCenter = vec2.add([], this.center, translate);\n      return {\n        target: this.unprojectFlat(newCenter)\n      };\n    }\n  }]);\n  return OrthographicViewport;\n}(Viewport);\nexport { OrthographicViewport as default };","map":{"version":3,"names":["Viewport","Matrix4","clamp","pixelsToWorld","vec2","viewMatrix","lookAt","eye","getProjectionMatrix","_ref","width","height","near","far","padding","left","right","bottom","top","_padding$left","l","_padding$right","r","_padding$top","t","_padding$bottom","b","offsetX","offsetY","ortho","OrthographicViewport","_Viewport","_inherits","_super","_createSuper","props","_classCallCheck","_props$near","_props$far","_props$zoom","zoom","_props$target","target","_props$padding","_props$flipY","flipY","zoomX","Array","isArray","zoomY","zoom_","Math","min","scale","pow","distanceScales","scaleX","scaleY","unitsPerMeter","metersPerUnit","call","_objectSpread","longitude","undefined","position","clone","projectionMatrix","_createClass","key","value","projectFlat","_ref2","_ref3","_slicedToArray","X","Y","unprojectFlat","_ref4","_ref5","x","y","panByPosition","coords","pixel","fromLocation","pixelUnprojectionMatrix","toLocation","translate","add","negate","newCenter","center","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/core/src/viewports/orthographic-viewport.ts"],"sourcesContent":["import Viewport from '../viewports/viewport';\n\nimport {Matrix4, clamp} from '@math.gl/core';\nimport {pixelsToWorld} from '@math.gl/web-mercator';\nimport * as vec2 from 'gl-matrix/vec2';\n\nimport type {Padding} from './viewport';\n\nconst viewMatrix = new Matrix4().lookAt({eye: [0, 0, 1]});\n\nfunction getProjectionMatrix({\n  width,\n  height,\n  near,\n  far,\n  padding\n}: {\n  width: number;\n  height: number;\n  near: number;\n  far: number;\n  padding: Padding | null;\n}) {\n  let left = -width / 2;\n  let right = width / 2;\n  let bottom = -height / 2;\n  let top = height / 2;\n  if (padding) {\n    const {left: l = 0, right: r = 0, top: t = 0, bottom: b = 0} = padding;\n    const offsetX = clamp((l + width - r) / 2, 0, width) - width / 2;\n    const offsetY = clamp((t + height - b) / 2, 0, height) - height / 2;\n    left -= offsetX;\n    right -= offsetX;\n    bottom += offsetY;\n    top += offsetY;\n  }\n\n  return new Matrix4().ortho({\n    left,\n    right,\n    bottom,\n    top,\n    near,\n    far\n  });\n}\n\nexport type OrthographicViewportOptions = {\n  /** Name of the viewport */\n  id?: string;\n  /** Left offset from the canvas edge, in pixels */\n  x?: number;\n  /** Top offset from the canvas edge, in pixels */\n  y?: number;\n  /** Viewport width in pixels */\n  width?: number;\n  /** Viewport height in pixels */\n  height?: number;\n  /** The world position at the center of the viewport. Default `[0, 0, 0]`. */\n  target?: [number, number, number] | [number, number];\n  /**  The zoom level of the viewport. `zoom: 0` maps one unit distance to one pixel on screen, and increasing `zoom` by `1` scales the same object to twice as large.\n   *   To apply independent zoom levels to the X and Y axes, supply an array `[zoomX, zoomY]`. Default `0`. */\n  zoom?: number | [number, number];\n  /** Padding around the viewport, in pixels. */\n  padding?: Padding | null;\n  /** Distance of near clipping plane. Default `0.1`. */\n  near?: number;\n  /** Distance of far clipping plane. Default `1000`. */\n  far?: number;\n  /** Whether to use top-left coordinates (`true`) or bottom-left coordinates (`false`). Default `true`. */\n  flipY?: boolean;\n};\n\nexport default class OrthographicViewport extends Viewport {\n  constructor(props: OrthographicViewportOptions) {\n    const {\n      width,\n      height,\n      near = 0.1,\n      far = 1000,\n      zoom = 0,\n      target = [0, 0, 0],\n      padding = null,\n      flipY = true\n    } = props;\n    const zoomX = Array.isArray(zoom) ? zoom[0] : zoom;\n    const zoomY = Array.isArray(zoom) ? zoom[1] : zoom;\n    const zoom_ = Math.min(zoomX, zoomY);\n    const scale = Math.pow(2, zoom_);\n\n    let distanceScales;\n    if (zoomX !== zoomY) {\n      const scaleX = Math.pow(2, zoomX);\n      const scaleY = Math.pow(2, zoomY);\n\n      distanceScales = {\n        unitsPerMeter: [scaleX / scale, scaleY / scale, 1],\n        metersPerUnit: [scale / scaleX, scale / scaleY, 1]\n      };\n    }\n\n    super({\n      ...props,\n      // in case viewState contains longitude/latitude values,\n      // make sure that the base Viewport class does not treat this as a geospatial viewport\n      longitude: undefined,\n      position: target,\n      viewMatrix: viewMatrix.clone().scale([scale, scale * (flipY ? -1 : 1), scale]),\n      projectionMatrix: getProjectionMatrix({\n        width: width || 1,\n        height: height || 1,\n        padding,\n        near,\n        far\n      }),\n      zoom: zoom_,\n      distanceScales\n    });\n  }\n\n  projectFlat([X, Y]: number[]): [number, number] {\n    const {unitsPerMeter} = this.distanceScales;\n    return [X * unitsPerMeter[0], Y * unitsPerMeter[1]];\n  }\n\n  unprojectFlat([x, y]: number[]): [number, number] {\n    const {metersPerUnit} = this.distanceScales;\n    return [x * metersPerUnit[0], y * metersPerUnit[1]];\n  }\n\n  /* Needed by LinearInterpolator */\n  panByPosition(coords: number[], pixel: number[]): OrthographicViewportOptions {\n    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n    const toLocation = this.projectFlat(coords);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    return {target: this.unprojectFlat(newCenter)};\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}