{"ast":null,"code":"import _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { assert } from '@loaders.gl/loader-utils';\nimport { createTypedArrayFromAccessor } from './helpers/tile-3d-accessor-utils';\nimport { initializeHierarchy, traverseHierarchy } from './tile-3d-batch-table-hierarchy';\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\nvar clone = function clone(x, y) {\n  return x;\n};\nvar IGNORED_PROPERTY_FIELDS = {\n  HIERARCHY: true,\n  extensions: true,\n  extras: true\n};\nvar Tile3DBatchTableParser = /*#__PURE__*/function () {\n  function Tile3DBatchTableParser(json, binary, featureCount) {\n    _classCallCheck(this, Tile3DBatchTableParser);\n    var _this$json;\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    _defineProperty(this, \"json\", void 0);\n    _defineProperty(this, \"binary\", void 0);\n    _defineProperty(this, \"featureCount\", void 0);\n    _defineProperty(this, \"_extensions\", void 0);\n    _defineProperty(this, \"_properties\", void 0);\n    _defineProperty(this, \"_binaryProperties\", void 0);\n    _defineProperty(this, \"_hierarchy\", void 0);\n    assert(featureCount >= 0);\n    this.json = json || {};\n    this.binary = binary;\n    this.featureCount = featureCount;\n    this._extensions = ((_this$json = this.json) === null || _this$json === void 0 ? void 0 : _this$json.extensions) || {};\n    this._properties = {};\n    for (var propertyName in this.json) {\n      if (!IGNORED_PROPERTY_FIELDS[propertyName]) {\n        this._properties[propertyName] = this.json[propertyName];\n      }\n    }\n    this._binaryProperties = this._initializeBinaryProperties();\n    if (options['3DTILES_batch_table_hierarchy']) {\n      this._hierarchy = initializeHierarchy(this, this.json, this.binary);\n    }\n  }\n  _createClass(Tile3DBatchTableParser, [{\n    key: \"getExtension\",\n    value: function getExtension(extensionName) {\n      return this.json && this.json.extensions && this.json.extensions[extensionName];\n    }\n  }, {\n    key: \"memorySizeInBytes\",\n    value: function memorySizeInBytes() {\n      return 0;\n    }\n  }, {\n    key: \"isClass\",\n    value: function isClass(batchId, className) {\n      this._checkBatchId(batchId);\n      assert(typeof className === 'string', className);\n      if (this._hierarchy) {\n        var result = traverseHierarchy(this._hierarchy, batchId, function (hierarchy, instanceIndex) {\n          var classId = hierarchy.classIds[instanceIndex];\n          var instanceClass = hierarchy.classes[classId];\n          return instanceClass.name === className;\n        });\n        return defined(result);\n      }\n      return false;\n    }\n  }, {\n    key: \"isExactClass\",\n    value: function isExactClass(batchId, className) {\n      assert(typeof className === 'string', className);\n      return this.getExactClassName(batchId) === className;\n    }\n  }, {\n    key: \"getExactClassName\",\n    value: function getExactClassName(batchId) {\n      this._checkBatchId(batchId);\n      if (this._hierarchy) {\n        var classId = this._hierarchy.classIds[batchId];\n        var instanceClass = this._hierarchy.classes[classId];\n        return instanceClass.name;\n      }\n      return undefined;\n    }\n  }, {\n    key: \"hasProperty\",\n    value: function hasProperty(batchId, name) {\n      this._checkBatchId(batchId);\n      assert(typeof name === 'string', name);\n      return defined(this._properties[name]) || this._hasPropertyInHierarchy(batchId, name);\n    }\n  }, {\n    key: \"getPropertyNames\",\n    value: function getPropertyNames(batchId, results) {\n      var _results;\n      this._checkBatchId(batchId);\n      results = defined(results) ? results : [];\n      results.length = 0;\n      var propertyNames = Object.keys(this._properties);\n      (_results = results).push.apply(_results, propertyNames);\n      if (this._hierarchy) {\n        this._getPropertyNamesInHierarchy(batchId, results);\n      }\n      return results;\n    }\n  }, {\n    key: \"getProperty\",\n    value: function getProperty(batchId, name) {\n      this._checkBatchId(batchId);\n      assert(typeof name === 'string', name);\n      if (this._binaryProperties) {\n        var binaryProperty = this._binaryProperties[name];\n        if (defined(binaryProperty)) {\n          return this._getBinaryProperty(binaryProperty, batchId);\n        }\n      }\n      var propertyValues = this._properties[name];\n      if (defined(propertyValues)) {\n        return clone(propertyValues[batchId], true);\n      }\n      if (this._hierarchy) {\n        var hierarchyProperty = this._getHierarchyProperty(batchId, name);\n        if (defined(hierarchyProperty)) {\n          return hierarchyProperty;\n        }\n      }\n      return undefined;\n    }\n  }, {\n    key: \"setProperty\",\n    value: function setProperty(batchId, name, value) {\n      var featureCount = this.featureCount;\n      this._checkBatchId(batchId);\n      assert(typeof name === 'string', name);\n      if (this._binaryProperties) {\n        var binaryProperty = this._binaryProperties[name];\n        if (binaryProperty) {\n          this._setBinaryProperty(binaryProperty, batchId, value);\n          return;\n        }\n      }\n      if (this._hierarchy) {\n        if (this._setHierarchyProperty(this, batchId, name, value)) {\n          return;\n        }\n      }\n      var propertyValues = this._properties[name];\n      if (!defined(propertyValues)) {\n        this._properties[name] = new Array(featureCount);\n        propertyValues = this._properties[name];\n      }\n      propertyValues[batchId] = clone(value, true);\n    }\n  }, {\n    key: \"_checkBatchId\",\n    value: function _checkBatchId(batchId) {\n      var valid = batchId >= 0 && batchId < this.featureCount;\n      if (!valid) {\n        throw new Error('batchId not in range [0, featureCount - 1].');\n      }\n    }\n  }, {\n    key: \"_getBinaryProperty\",\n    value: function _getBinaryProperty(binaryProperty, index) {\n      return binaryProperty.unpack(binaryProperty.typedArray, index);\n    }\n  }, {\n    key: \"_setBinaryProperty\",\n    value: function _setBinaryProperty(binaryProperty, index, value) {\n      binaryProperty.pack(value, binaryProperty.typedArray, index);\n    }\n  }, {\n    key: \"_initializeBinaryProperties\",\n    value: function _initializeBinaryProperties() {\n      var binaryProperties = null;\n      for (var name in this._properties) {\n        var property = this._properties[name];\n        var binaryProperty = this._initializeBinaryProperty(name, property);\n        if (binaryProperty) {\n          binaryProperties = binaryProperties || {};\n          binaryProperties[name] = binaryProperty;\n        }\n      }\n      return binaryProperties;\n    }\n  }, {\n    key: \"_initializeBinaryProperty\",\n    value: function _initializeBinaryProperty(name, property) {\n      if ('byteOffset' in property) {\n        var tile3DAccessor = property;\n        assert(this.binary, \"Property \".concat(name, \" requires a batch table binary.\"));\n        assert(tile3DAccessor.type, \"Property \".concat(name, \" requires a type.\"));\n        var accessor = createTypedArrayFromAccessor(tile3DAccessor, this.binary.buffer, this.binary.byteOffset | 0, this.featureCount);\n        return {\n          typedArray: accessor.values,\n          componentCount: accessor.size,\n          unpack: accessor.unpacker,\n          pack: accessor.packer\n        };\n      }\n      return null;\n    }\n  }, {\n    key: \"_hasPropertyInHierarchy\",\n    value: function _hasPropertyInHierarchy(batchId, name) {\n      if (!this._hierarchy) {\n        return false;\n      }\n      var result = traverseHierarchy(this._hierarchy, batchId, function (hierarchy, instanceIndex) {\n        var classId = hierarchy.classIds[instanceIndex];\n        var instances = hierarchy.classes[classId].instances;\n        return defined(instances[name]);\n      });\n      return defined(result);\n    }\n  }, {\n    key: \"_getPropertyNamesInHierarchy\",\n    value: function _getPropertyNamesInHierarchy(batchId, results) {\n      traverseHierarchy(this._hierarchy, batchId, function (hierarchy, instanceIndex) {\n        var classId = hierarchy.classIds[instanceIndex];\n        var instances = hierarchy.classes[classId].instances;\n        for (var name in instances) {\n          if (instances.hasOwnProperty(name)) {\n            if (results.indexOf(name) === -1) {\n              results.push(name);\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"_getHierarchyProperty\",\n    value: function _getHierarchyProperty(batchId, name) {\n      var _this = this;\n      return traverseHierarchy(this._hierarchy, batchId, function (hierarchy, instanceIndex) {\n        var classId = hierarchy.classIds[instanceIndex];\n        var instanceClass = hierarchy.classes[classId];\n        var indexInClass = hierarchy.classIndexes[instanceIndex];\n        var propertyValues = instanceClass.instances[name];\n        if (defined(propertyValues)) {\n          if (defined(propertyValues.typedArray)) {\n            return _this._getBinaryProperty(propertyValues, indexInClass);\n          }\n          return clone(propertyValues[indexInClass], true);\n        }\n        return null;\n      });\n    }\n  }, {\n    key: \"_setHierarchyProperty\",\n    value: function _setHierarchyProperty(batchTable, batchId, name, value) {\n      var _this2 = this;\n      var result = traverseHierarchy(this._hierarchy, batchId, function (hierarchy, instanceIndex) {\n        var classId = hierarchy.classIds[instanceIndex];\n        var instanceClass = hierarchy.classes[classId];\n        var indexInClass = hierarchy.classIndexes[instanceIndex];\n        var propertyValues = instanceClass.instances[name];\n        if (defined(propertyValues)) {\n          assert(instanceIndex === batchId, \"Inherited property \\\"\".concat(name, \"\\\" is read-only.\"));\n          if (defined(propertyValues.typedArray)) {\n            _this2._setBinaryProperty(propertyValues, indexInClass, value);\n          } else {\n            propertyValues[indexInClass] = clone(value, true);\n          }\n          return true;\n        }\n        return false;\n      });\n      return defined(result);\n    }\n  }]);\n  return Tile3DBatchTableParser;\n}();\nexport { Tile3DBatchTableParser as default };","map":{"version":3,"names":["assert","createTypedArrayFromAccessor","initializeHierarchy","traverseHierarchy","defined","x","undefined","clone","y","IGNORED_PROPERTY_FIELDS","HIERARCHY","extensions","extras","Tile3DBatchTableParser","json","binary","featureCount","_classCallCheck","_this$json","options","arguments","length","_defineProperty","_extensions","_properties","propertyName","_binaryProperties","_initializeBinaryProperties","_hierarchy","_createClass","key","value","getExtension","extensionName","memorySizeInBytes","isClass","batchId","className","_checkBatchId","result","hierarchy","instanceIndex","classId","classIds","instanceClass","classes","name","isExactClass","getExactClassName","hasProperty","_hasPropertyInHierarchy","getPropertyNames","results","_results","propertyNames","Object","keys","push","apply","_getPropertyNamesInHierarchy","getProperty","binaryProperty","_getBinaryProperty","propertyValues","hierarchyProperty","_getHierarchyProperty","setProperty","_setBinaryProperty","_setHierarchyProperty","Array","valid","Error","index","unpack","typedArray","pack","binaryProperties","property","_initializeBinaryProperty","tile3DAccessor","concat","type","accessor","buffer","byteOffset","values","componentCount","size","unpacker","packer","instances","hasOwnProperty","indexOf","_this","indexInClass","classIndexes","batchTable","_this2","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/geo-layers/node_modules/@loaders.gl/3d-tiles/src/lib/classes/tile-3d-batch-table.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {assert} from '@loaders.gl/loader-utils';\n\nimport {createTypedArrayFromAccessor} from './helpers/tile-3d-accessor-utils';\nimport {initializeHierarchy, traverseHierarchy} from './tile-3d-batch-table-hierarchy';\n\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\n\nconst clone = (x, y) => x;\n\n// These top level fields in the batch table json are not properties\nconst IGNORED_PROPERTY_FIELDS = {\n  HIERARCHY: true, // Deprecated HIERARCHY property\n  extensions: true,\n  extras: true\n};\n\n// The size of this array equals the maximum instance count among all loaded tiles, which has the potential to be large.\nexport default class Tile3DBatchTableParser {\n  json;\n  binary;\n  featureCount;\n  _extensions;\n  // Copy all top-level property fields from the json object, ignoring special fields\n  _properties;\n  _binaryProperties;\n  // TODO: hierarchy support is only partially implemented and not tested\n  _hierarchy;\n\n  constructor(json, binary, featureCount, options = {}) {\n    assert(featureCount >= 0);\n    this.json = json || {};\n    this.binary = binary;\n    this.featureCount = featureCount;\n\n    this._extensions = this.json?.extensions || {};\n\n    // Copy all top-level property fields from the json object, ignoring special fields\n    this._properties = {};\n    for (const propertyName in this.json) {\n      if (!IGNORED_PROPERTY_FIELDS[propertyName]) {\n        this._properties[propertyName] = this.json[propertyName];\n      }\n    }\n\n    this._binaryProperties = this._initializeBinaryProperties();\n\n    // TODO: hierarchy support is only partially implemented and not tested\n    if (options['3DTILES_batch_table_hierarchy']) {\n      this._hierarchy = initializeHierarchy(this, this.json, this.binary);\n    }\n  }\n\n  getExtension(extensionName) {\n    return this.json && this.json.extensions && this.json.extensions[extensionName];\n  }\n\n  memorySizeInBytes(): number {\n    return 0;\n  }\n\n  isClass(batchId, className: string): boolean {\n    this._checkBatchId(batchId);\n    assert(typeof className === 'string', className);\n\n    // extension: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      // PERFORMANCE_IDEA : cache results in the ancestor classes\n      //   to speed up this check if this area becomes a hotspot\n      // PERFORMANCE_IDEA : treat class names as integers for faster comparisons\n      const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n        const classId = hierarchy.classIds[instanceIndex];\n        const instanceClass = hierarchy.classes[classId];\n        return instanceClass.name === className;\n      });\n      return defined(result);\n    }\n\n    return false;\n  }\n\n  isExactClass(batchId, className) {\n    assert(typeof className === 'string', className);\n\n    return this.getExactClassName(batchId) === className;\n  }\n\n  getExactClassName(batchId) {\n    this._checkBatchId(batchId);\n\n    // extension: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      const classId = this._hierarchy.classIds[batchId];\n      const instanceClass = this._hierarchy.classes[classId];\n      return instanceClass.name;\n    }\n\n    return undefined;\n  }\n\n  hasProperty(batchId, name) {\n    this._checkBatchId(batchId);\n    assert(typeof name === 'string', name);\n\n    return defined(this._properties[name]) || this._hasPropertyInHierarchy(batchId, name);\n  }\n\n  getPropertyNames(batchId, results) {\n    this._checkBatchId(batchId);\n\n    results = defined(results) ? results : [];\n    results.length = 0;\n\n    const propertyNames = Object.keys(this._properties);\n    results.push(...propertyNames);\n\n    if (this._hierarchy) {\n      this._getPropertyNamesInHierarchy(batchId, results);\n    }\n\n    return results;\n  }\n\n  getProperty(batchId, name) {\n    this._checkBatchId(batchId);\n    assert(typeof name === 'string', name);\n\n    if (this._binaryProperties) {\n      const binaryProperty = this._binaryProperties[name];\n      if (defined(binaryProperty)) {\n        return this._getBinaryProperty(binaryProperty, batchId);\n      }\n    }\n\n    const propertyValues = this._properties[name];\n    if (defined(propertyValues)) {\n      return clone(propertyValues[batchId], true);\n    }\n\n    // EXTENSION: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      const hierarchyProperty = this._getHierarchyProperty(batchId, name);\n      if (defined(hierarchyProperty)) {\n        return hierarchyProperty;\n      }\n    }\n\n    return undefined;\n  }\n\n  setProperty(batchId, name, value) {\n    const featureCount = this.featureCount;\n\n    this._checkBatchId(batchId);\n    assert(typeof name === 'string', name);\n\n    if (this._binaryProperties) {\n      const binaryProperty = this._binaryProperties[name];\n      if (binaryProperty) {\n        this._setBinaryProperty(binaryProperty, batchId, value);\n        return;\n      }\n    }\n\n    // EXTENSION: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      if (this._setHierarchyProperty(this, batchId, name, value)) {\n        return;\n      }\n    }\n\n    let propertyValues = this._properties[name];\n    if (!defined(propertyValues)) {\n      // Property does not exist. Create it.\n      this._properties[name] = new Array(featureCount);\n      propertyValues = this._properties[name];\n    }\n\n    propertyValues[batchId] = clone(value, true);\n  }\n\n  // PRIVATE METHODS\n\n  _checkBatchId(batchId) {\n    const valid = batchId >= 0 && batchId < this.featureCount;\n    if (!valid) {\n      throw new Error('batchId not in range [0, featureCount - 1].');\n    }\n  }\n\n  _getBinaryProperty(binaryProperty, index) {\n    return binaryProperty.unpack(binaryProperty.typedArray, index);\n  }\n\n  _setBinaryProperty(binaryProperty, index, value) {\n    binaryProperty.pack(value, binaryProperty.typedArray, index);\n  }\n\n  _initializeBinaryProperties() {\n    let binaryProperties: Record<string, any> | null = null;\n    for (const name in this._properties) {\n      const property = this._properties[name];\n      const binaryProperty = this._initializeBinaryProperty(name, property);\n      // Store any information needed to access the binary data, including the typed array,\n      // componentCount (e.g. a VEC4 would be 4), and the type used to pack and unpack (e.g. Cartesian4).\n      if (binaryProperty) {\n        binaryProperties = binaryProperties || {};\n        binaryProperties[name] = binaryProperty;\n      }\n    }\n    return binaryProperties;\n  }\n\n  _initializeBinaryProperty(name, property) {\n    if ('byteOffset' in property) {\n      // This is a binary property\n      const tile3DAccessor = property;\n\n      assert(this.binary, `Property ${name} requires a batch table binary.`);\n      assert(tile3DAccessor.type, `Property ${name} requires a type.`);\n\n      const accessor = createTypedArrayFromAccessor(\n        tile3DAccessor,\n        this.binary.buffer,\n        this.binary.byteOffset | 0,\n        this.featureCount\n      );\n\n      // Store any information needed to access the binary data, including the typed array,\n      // componentCount (e.g. a VEC4 would be 4), and the type used to pack and unpack (e.g. Cartesian4).\n      return {\n        typedArray: accessor.values,\n        componentCount: accessor.size,\n        unpack: accessor.unpacker,\n        pack: accessor.packer\n      };\n    }\n\n    return null;\n  }\n\n  //  EXTENSION SUPPORT: 3DTILES_batch_table_hierarchy\n\n  _hasPropertyInHierarchy(batchId, name) {\n    if (!this._hierarchy) {\n      return false;\n    }\n\n    const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instances = hierarchy.classes[classId].instances;\n      return defined(instances[name]);\n    });\n\n    return defined(result);\n  }\n\n  _getPropertyNamesInHierarchy(batchId, results) {\n    traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instances = hierarchy.classes[classId].instances;\n      for (const name in instances) {\n        if (instances.hasOwnProperty(name)) {\n          if (results.indexOf(name) === -1) {\n            results.push(name);\n          }\n        }\n      }\n    });\n  }\n\n  _getHierarchyProperty(batchId, name) {\n    return traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instanceClass = hierarchy.classes[classId];\n      const indexInClass = hierarchy.classIndexes[instanceIndex];\n      const propertyValues = instanceClass.instances[name];\n      if (defined(propertyValues)) {\n        if (defined(propertyValues.typedArray)) {\n          return this._getBinaryProperty(propertyValues, indexInClass);\n        }\n        return clone(propertyValues[indexInClass], true);\n      }\n      return null;\n    });\n  }\n\n  _setHierarchyProperty(batchTable, batchId, name, value) {\n    const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instanceClass = hierarchy.classes[classId];\n      const indexInClass = hierarchy.classIndexes[instanceIndex];\n      const propertyValues = instanceClass.instances[name];\n      if (defined(propertyValues)) {\n        assert(instanceIndex === batchId, `Inherited property \"${name}\" is read-only.`);\n        if (defined(propertyValues.typedArray)) {\n          this._setBinaryProperty(propertyValues, indexInClass, value);\n        } else {\n          propertyValues[indexInClass] = clone(value, true);\n        }\n        return true;\n      }\n      return false;\n    });\n    return defined(result);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}