{"ast":null,"code":"import _slicedToArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { DirectionalLight } from './directional-light';\nimport { getSunDirection } from '@math.gl/sun';\nvar SunLight = /*#__PURE__*/function (_DirectionalLight) {\n  _inherits(SunLight, _DirectionalLight);\n  var _super = _createSuper(SunLight);\n  function SunLight(opts) {\n    var _this;\n    _classCallCheck(this, SunLight);\n    _this = _super.call(this, opts);\n    _defineProperty(_assertThisInitialized(_this), \"timestamp\", void 0);\n    _this.timestamp = opts.timestamp;\n    return _this;\n  }\n  _createClass(SunLight, [{\n    key: \"getProjectedLight\",\n    value: function getProjectedLight(_ref) {\n      var layer = _ref.layer;\n      var viewport = layer.context.viewport;\n      var isGlobe = viewport.resolution && viewport.resolution > 0;\n      if (isGlobe) {\n        var _getSunDirection = getSunDirection(this.timestamp, 0, 0),\n          _getSunDirection2 = _slicedToArray(_getSunDirection, 3),\n          x = _getSunDirection2[0],\n          y = _getSunDirection2[1],\n          z = _getSunDirection2[2];\n        this.direction = [x, -z, y];\n      } else {\n        var latitude = viewport.latitude,\n          longitude = viewport.longitude;\n        this.direction = getSunDirection(this.timestamp, latitude, longitude);\n      }\n      return this;\n    }\n  }]);\n  return SunLight;\n}(DirectionalLight);\nexport { SunLight as default };","map":{"version":3,"names":["DirectionalLight","getSunDirection","SunLight","_DirectionalLight","_inherits","_super","_createSuper","opts","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","timestamp","_createClass","key","value","getProjectedLight","_ref","layer","viewport","context","isGlobe","resolution","_getSunDirection","_getSunDirection2","_slicedToArray","x","y","z","direction","latitude","longitude","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/core/src/effects/lighting/sun-light.ts"],"sourcesContent":["import {DirectionalLight} from './directional-light';\nimport {getSunDirection} from '@math.gl/sun';\n\nimport type Layer from '../../lib/layer';\n\nexport type SunLightOptions = {\n  id?: string;\n  /** Light color, [r, g, b] in the 0-255 range\n   * @default [255, 255, 255]\n   */\n  color?: number[];\n  /** Light intensity, higher number is brighter\n   * @default 1.0\n   */\n  intensity?: number;\n  /**\n   * The time at which to position the sun. Either a Date object or a timestamp (milliseconds elapsed since unix time 0)\n   */\n  timestamp: number | Date;\n  /** (Experimental) render shadows casted by this light\n   * @default false\n   */\n  _shadow?: boolean;\n};\n\nexport default class SunLight extends DirectionalLight {\n  timestamp: number | Date;\n\n  constructor(opts: SunLightOptions) {\n    super(opts);\n\n    this.timestamp = opts.timestamp;\n  }\n\n  getProjectedLight({layer}: {layer: Layer}): DirectionalLight {\n    const {viewport} = layer.context;\n    const isGlobe = viewport.resolution && viewport.resolution > 0;\n\n    if (isGlobe) {\n      // Rotate vector to align with the direction of the globe projection (up at lon:0,lat:0 is [0, -1, 0])\n      const [x, y, z] = getSunDirection(this.timestamp, 0, 0);\n      this.direction = [x, -z, y];\n    } else {\n      // @ts-expect-error longitude and latitude are not defined on all viewports\n      const {latitude, longitude} = viewport;\n      this.direction = getSunDirection(this.timestamp, latitude, longitude);\n    }\n\n    return this;\n  }\n}\n"],"mappings":";;;;;;;AAAA,SAAQA,gBAAR,QAA+B,qBAA/B;AACA,SAAQC,eAAR,QAA8B,cAA9B;AAAA,IAwBqBC,QAAN,0BAAAC,iBAAA;EAAAC,SAAA,CAAAF,QAAA,EAAAC,iBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,QAAA;EAGb,SAAAA,SAAYK,IAAD,EAAwB;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAP,QAAA;IACjCM,KAAA,GAAAH,MAAA,CAAAK,IAAA,OAAMH,IAAN;IADiCI,eAAA,CAAAC,sBAAA,CAAAJ,KAAA;IAGjCA,KAAA,CAAKK,SAAL,GAAiBN,IAAI,CAACM,SAAtB;IAAA,OAAAL,KAAA;EACD;EAAAM,YAAA,CAAAZ,QAAA;IAAAa,GAAA;IAAAC,KAAA,EAED,SAAAC,kBAAAC,IAAA,EAA6D;MAAA,IAA1CC,KAAA,GAAAD,IAAA,CAAAC,KAAA;MACjB,IAAOC,QAAA,GAAYD,KAAK,CAACE,OAAzB,CAAOD,QAAA;MACP,IAAME,OAAO,GAAGF,QAAQ,CAACG,UAAT,IAAuBH,QAAQ,CAACG,UAAT,GAAsB,CAA7D;MAEA,IAAID,OAAJ,EAAa;QAEX,IAAAE,gBAAA,GAAkBvB,eAAe,CAAC,KAAKY,SAAN,EAAiB,CAAjB,EAAoB,CAApB,CAAjC;UAAAY,iBAAA,GAAAC,cAAA,CAAAF,gBAAA;UAAOG,CAAD,GAAAF,iBAAA;UAAIG,CAAJ,GAAAH,iBAAA;UAAOI,CAAP,GAAAJ,iBAAA;QACN,KAAKK,SAAL,GAAiB,CAACH,CAAD,EAAI,CAACE,CAAL,EAAQD,CAAR,CAAjB;MACD,CAJD,MAIO;QAEL,IAAOG,QAAD,GAAwBX,QAA9B,CAAOW,QAAD;UAAWC,SAAA,GAAaZ,QAA9B,CAAiBY,SAAA;QACjB,KAAKF,SAAL,GAAiB7B,eAAe,CAAC,KAAKY,SAAN,EAAiBkB,QAAjB,EAA2BC,SAA3B,CAAhC;MACD;MAED,OAAO,IAAP;IACD;EAAA;EAAA,OAAA9B,QAAA;AAAA,EAxBmCF,gBAAvB;AAAA,SAAME,QAAN,IAAA+B,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}