{"ast":null,"code":"import _defineProperty from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport Texture2D from '../classes/texture-2d';\nimport TextureCube from '../classes/texture-cube';\nimport Texture3D from '../classes/texture-3d';\nimport Framebuffer from '../classes/framebuffer';\nimport { assert } from '../utils/assert';\nexport function cloneTextureFrom(refTexture, overrides) {\n  assert(refTexture instanceof Texture2D || refTexture instanceof TextureCube || refTexture instanceof Texture3D);\n  var TextureType = refTexture.constructor;\n  var gl = refTexture.gl,\n    width = refTexture.width,\n    height = refTexture.height,\n    format = refTexture.format,\n    type = refTexture.type,\n    dataFormat = refTexture.dataFormat,\n    border = refTexture.border,\n    mipmaps = refTexture.mipmaps;\n  var textureOptions = Object.assign({\n    width: width,\n    height: height,\n    format: format,\n    type: type,\n    dataFormat: dataFormat,\n    border: border,\n    mipmaps: mipmaps\n  }, overrides);\n  return new TextureType(gl, textureOptions);\n}\nexport function toFramebuffer(texture, opts) {\n  var gl = texture.gl,\n    width = texture.width,\n    height = texture.height,\n    id = texture.id;\n  var framebuffer = new Framebuffer(gl, Object.assign({}, opts, {\n    id: \"framebuffer-for-\".concat(id),\n    width: width,\n    height: height,\n    attachments: _defineProperty({}, 36064, texture)\n  }));\n  return framebuffer;\n}","map":{"version":3,"names":["Texture2D","TextureCube","Texture3D","Framebuffer","assert","cloneTextureFrom","refTexture","overrides","TextureType","constructor","gl","width","height","format","type","dataFormat","border","mipmaps","textureOptions","Object","assign","toFramebuffer","texture","opts","id","framebuffer","concat","attachments","_defineProperty"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@luma.gl/webgl/src/webgl-utils/texture-utils.js"],"sourcesContent":["// TODO: Two subdirectories must not depend on each other (classes vs utils)!\nimport Texture2D from '../classes/texture-2d';\nimport TextureCube from '../classes/texture-cube';\nimport Texture3D from '../classes/texture-3d';\nimport Framebuffer from '../classes/framebuffer';\nimport GL from '@luma.gl/constants';\nimport {assert} from '../utils/assert';\n\n// Clone a new texture object from a reference texture object.\n/** @type {import('./texture-utils').cloneTextureFrom} */\nexport function cloneTextureFrom(refTexture, overrides) {\n  assert(\n    refTexture instanceof Texture2D ||\n      refTexture instanceof TextureCube ||\n      refTexture instanceof Texture3D\n  );\n\n  const TextureType = refTexture.constructor;\n\n  // @ts-expect-error\n  const {gl, width, height, format, type, dataFormat, border, mipmaps} = refTexture;\n\n  const textureOptions = Object.assign(\n    {\n      width,\n      height,\n      format,\n      type,\n      dataFormat,\n      border,\n      mipmaps\n    },\n    overrides\n  );\n\n  // TODO: move this to `Texture` class as instance method and use this.constructor\n  // @ts-expect-error\n  return new TextureType(gl, textureOptions);\n}\n\n// Wraps a given texture into a framebuffer object, that can be further used\n// to read data from the texture object.\n/** @type {import('./texture-utils').toFramebuffer} */\nexport function toFramebuffer(texture, opts) {\n  const {gl, width, height, id} = texture;\n  const framebuffer = new Framebuffer(\n    gl,\n    Object.assign({}, opts, {\n      id: `framebuffer-for-${id}`,\n      width,\n      height,\n      attachments: {\n        [GL.COLOR_ATTACHMENT0]: texture\n      }\n    })\n  );\n  return framebuffer;\n}\n"],"mappings":";AACA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AAEA,SAAQC,MAAR,QAAqB,iBAArB;AAIA,OAAO,SAASC,gBAATA,CAA0BC,UAA1B,EAAsCC,SAAtC,EAAiD;EACtDH,MAAM,CACJE,UAAU,YAAYN,SAAtB,IACEM,UAAU,YAAYL,WADxB,IAEEK,UAAU,YAAYJ,SAHpB,CAAN;EAMA,IAAMM,WAAW,GAAGF,UAAU,CAACG,WAA/B;EAGA,IAAOC,EAAD,GAAiEJ,UAAvE,CAAOI,EAAD;IAAKC,KAAL,GAAiEL,UAAvE,CAAWK,KAAL;IAAYC,MAAZ,GAAiEN,UAAvE,CAAkBM,MAAZ;IAAoBC,MAApB,GAAiEP,UAAvE,CAA0BO,MAApB;IAA4BC,IAA5B,GAAiER,UAAvE,CAAkCQ,IAA5B;IAAkCC,UAAlC,GAAiET,UAAvE,CAAwCS,UAAlC;IAA8CC,MAA9C,GAAiEV,UAAvE,CAAoDU,MAA9C;IAAsDC,OAAA,GAAWX,UAAvE,CAA4DW,OAAA;EAE5D,IAAMC,cAAc,GAAGC,MAAM,CAACC,MAAP,CACrB;IACET,KADF,EACEA,KADF;IAEEC,MAFF,EAEEA,MAFF;IAGEC,MAHF,EAGEA,MAHF;IAIEC,IAJF,EAIEA,IAJF;IAKEC,UALF,EAKEA,UALF;IAMEC,MANF,EAMEA,MANF;IAOEC,OAAA,EAAAA;EAPF,CADqB,EAUrBV,SAVqB,CAAvB;EAeA,OAAO,IAAIC,WAAJ,CAAgBE,EAAhB,EAAoBQ,cAApB,CAAP;AACD;AAKD,OAAO,SAASG,aAATA,CAAuBC,OAAvB,EAAgCC,IAAhC,EAAsC;EAC3C,IAAOb,EAAD,GAA0BY,OAAhC,CAAOZ,EAAD;IAAKC,KAAL,GAA0BW,OAAhC,CAAWX,KAAL;IAAYC,MAAZ,GAA0BU,OAAhC,CAAkBV,MAAZ;IAAoBY,EAAA,GAAMF,OAAhC,CAA0BE,EAAA;EAC1B,IAAMC,WAAW,GAAG,IAAItB,WAAJ,CAClBO,EADkB,EAElBS,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBG,IAAlB,EAAwB;IACtBC,EAAE,qBAAAE,MAAA,CAAqBF,EAArB,CADoB;IAEtBb,KAFsB,EAEtBA,KAFsB;IAGtBC,MAHsB,EAGtBA,MAHsB;IAItBe,WAAW,EAAAC,eAAA,KACT,OAAwBN,OAAA;EALJ,CAAxB,CAFkB,CAApB;EAWA,OAAOG,WAAP;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}