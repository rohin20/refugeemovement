{"ast":null,"code":"import _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, gouraudLighting, phongLighting, picking, UNIT } from '@deck.gl/core';\nimport { Model, isWebGL2, hasFeature, FEATURES } from '@luma.gl/core';\nimport ColumnGeometry from './column-geometry';\nimport vs from './column-layer-vertex.glsl';\nimport fs from './column-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  diskResolution: {\n    type: 'number',\n    min: 4,\n    value: 20\n  },\n  vertices: null,\n  radius: {\n    type: 'number',\n    min: 0,\n    value: 1000\n  },\n  angle: {\n    type: 'number',\n    value: 0\n  },\n  offset: {\n    type: 'array',\n    value: [0, 0]\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusUnits: 'meters',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  extruded: true,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  material: true,\n  getColor: {\n    deprecatedFor: ['getFillColor', 'getLineColor']\n  }\n};\nvar ColumnLayer = /*#__PURE__*/function (_Layer) {\n  _inherits(ColumnLayer, _Layer);\n  var _super = _createSuper(ColumnLayer);\n  function ColumnLayer() {\n    _classCallCheck(this, ColumnLayer);\n    return _super.apply(this, arguments);\n  }\n  _createClass(ColumnLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      var gl = this.context.gl;\n      var transpileToGLSL100 = !isWebGL2(gl);\n      var defines = {};\n      var useDerivatives = this.props.flatShading && hasFeature(gl, FEATURES.GLSL_DERIVATIVES);\n      if (useDerivatives) {\n        defines.FLAT_SHADING = 1;\n      }\n      return _get(_getPrototypeOf(ColumnLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        defines: defines,\n        transpileToGLSL100: transpileToGLSL100,\n        modules: [project32, useDerivatives ? phongLighting : gouraudLighting, picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        instancePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getPosition'\n        },\n        instanceElevations: {\n          size: 1,\n          transition: true,\n          accessor: 'getElevation'\n        },\n        instanceFillColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: true,\n          accessor: 'getFillColor',\n          defaultValue: DEFAULT_COLOR\n        },\n        instanceLineColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: true,\n          accessor: 'getLineColor',\n          defaultValue: DEFAULT_COLOR\n        },\n        instanceStrokeWidths: {\n          size: 1,\n          accessor: 'getLineWidth',\n          transition: true\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(params) {\n      _get(_getPrototypeOf(ColumnLayer.prototype), \"updateState\", this).call(this, params);\n      var props = params.props,\n        oldProps = params.oldProps,\n        changeFlags = params.changeFlags;\n      var regenerateModels = changeFlags.extensionsChanged || props.flatShading !== oldProps.flatShading;\n      if (regenerateModels) {\n        var _this$state$model;\n        var gl = this.context.gl;\n        (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n        this.state.model = this._getModel(gl);\n        this.getAttributeManager().invalidateAll();\n      }\n      if (regenerateModels || props.diskResolution !== oldProps.diskResolution || props.vertices !== oldProps.vertices || (props.extruded || props.stroked) !== (oldProps.extruded || oldProps.stroked)) {\n        this._updateGeometry(props);\n      }\n    }\n  }, {\n    key: \"getGeometry\",\n    value: function getGeometry(diskResolution, vertices, hasThinkness) {\n      var geometry = new ColumnGeometry({\n        radius: 1,\n        height: hasThinkness ? 2 : 0,\n        vertices: vertices,\n        nradial: diskResolution\n      });\n      var meanVertexDistance = 0;\n      if (vertices) {\n        for (var i = 0; i < diskResolution; i++) {\n          var p = vertices[i];\n          var d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n          meanVertexDistance += d / diskResolution;\n        }\n      } else {\n        meanVertexDistance = 1;\n      }\n      this.setState({\n        edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n      });\n      return geometry;\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      return new Model(gl, _objectSpread(_objectSpread({}, this.getShaders()), {}, {\n        id: this.props.id,\n        isInstanced: true\n      }));\n    }\n  }, {\n    key: \"_updateGeometry\",\n    value: function _updateGeometry(_ref) {\n      var diskResolution = _ref.diskResolution,\n        vertices = _ref.vertices,\n        extruded = _ref.extruded,\n        stroked = _ref.stroked;\n      var geometry = this.getGeometry(diskResolution, vertices, extruded || stroked);\n      this.setState({\n        fillVertexCount: geometry.attributes.POSITION.value.length / 3,\n        wireframeVertexCount: geometry.indices.value.length\n      });\n      this.state.model.setProps({\n        geometry: geometry\n      });\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var _this$props = this.props,\n        lineWidthUnits = _this$props.lineWidthUnits,\n        lineWidthScale = _this$props.lineWidthScale,\n        lineWidthMinPixels = _this$props.lineWidthMinPixels,\n        lineWidthMaxPixels = _this$props.lineWidthMaxPixels,\n        radiusUnits = _this$props.radiusUnits,\n        elevationScale = _this$props.elevationScale,\n        extruded = _this$props.extruded,\n        filled = _this$props.filled,\n        stroked = _this$props.stroked,\n        wireframe = _this$props.wireframe,\n        offset = _this$props.offset,\n        coverage = _this$props.coverage,\n        radius = _this$props.radius,\n        angle = _this$props.angle;\n      var _this$state = this.state,\n        model = _this$state.model,\n        fillVertexCount = _this$state.fillVertexCount,\n        wireframeVertexCount = _this$state.wireframeVertexCount,\n        edgeDistance = _this$state.edgeDistance;\n      model.setUniforms(uniforms).setUniforms({\n        radius: radius,\n        angle: angle / 180 * Math.PI,\n        offset: offset,\n        extruded: extruded,\n        stroked: stroked,\n        coverage: coverage,\n        elevationScale: elevationScale,\n        edgeDistance: edgeDistance,\n        radiusUnits: UNIT[radiusUnits],\n        widthUnits: UNIT[lineWidthUnits],\n        widthScale: lineWidthScale,\n        widthMinPixels: lineWidthMinPixels,\n        widthMaxPixels: lineWidthMaxPixels\n      });\n      if (extruded && wireframe) {\n        model.setProps({\n          isIndexed: true\n        });\n        model.setVertexCount(wireframeVertexCount).setDrawMode(1).setUniforms({\n          isStroke: true\n        }).draw();\n      }\n      if (filled) {\n        model.setProps({\n          isIndexed: false\n        });\n        model.setVertexCount(fillVertexCount).setDrawMode(5).setUniforms({\n          isStroke: false\n        }).draw();\n      }\n      if (!extruded && stroked) {\n        model.setProps({\n          isIndexed: false\n        });\n        model.setVertexCount(fillVertexCount * 2 / 3).setDrawMode(5).setUniforms({\n          isStroke: true\n        }).draw();\n      }\n    }\n  }]);\n  return ColumnLayer;\n}(Layer);\nexport { ColumnLayer as default };\n_defineProperty(ColumnLayer, \"layerName\", 'ColumnLayer');\n_defineProperty(ColumnLayer, \"defaultProps\", defaultProps);","map":{"version":3,"names":["Layer","project32","gouraudLighting","phongLighting","picking","UNIT","Model","isWebGL2","hasFeature","FEATURES","ColumnGeometry","vs","fs","DEFAULT_COLOR","defaultProps","diskResolution","type","min","value","vertices","radius","angle","offset","coverage","max","elevationScale","radiusUnits","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","extruded","wireframe","filled","stroked","getPosition","x","position","getFillColor","getLineColor","getLineWidth","getElevation","material","getColor","deprecatedFor","ColumnLayer","_Layer","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","getShaders","gl","context","transpileToGLSL100","defines","useDerivatives","props","flatShading","GLSL_DERIVATIVES","FLAT_SHADING","_get","_getPrototypeOf","prototype","call","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceElevations","instanceFillColors","colorFormat","length","normalized","defaultValue","instanceLineColors","instanceStrokeWidths","updateState","params","oldProps","changeFlags","regenerateModels","extensionsChanged","_this$state$model","state","model","delete","_getModel","invalidateAll","_updateGeometry","getGeometry","hasThinkness","geometry","height","nradial","meanVertexDistance","i","p","d","Math","sqrt","setState","edgeDistance","cos","PI","_objectSpread","id","isInstanced","_ref","fillVertexCount","attributes","POSITION","wireframeVertexCount","indices","setProps","draw","_ref2","uniforms","_this$props","_this$state","setUniforms","widthUnits","widthScale","widthMinPixels","widthMaxPixels","isIndexed","setVertexCount","setDrawMode","isStroke","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/layers/src/column-layer/column-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  project32,\n  gouraudLighting,\n  phongLighting,\n  picking,\n  UNIT,\n  LayerProps,\n  UpdateParameters,\n  Unit,\n  AccessorFunction,\n  Position,\n  Accessor,\n  Color,\n  Material,\n  DefaultProps\n} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, isWebGL2, hasFeature, FEATURES} from '@luma.gl/core';\nimport ColumnGeometry from './column-geometry';\n\nimport vs from './column-layer-vertex.glsl';\nimport fs from './column-layer-fragment.glsl';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<ColumnLayerProps> = {\n  diskResolution: {type: 'number', min: 4, value: 20},\n  vertices: null,\n  radius: {type: 'number', min: 0, value: 1000},\n  angle: {type: 'number', value: 0},\n  offset: {type: 'array', value: [0, 0]},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  radiusUnits: 'meters',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  extruded: true,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n  getElevation: {type: 'accessor', value: 1000},\n  material: true,\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\n/** All properties supported by ColumnLayer. */\nexport type ColumnLayerProps<DataT = any> = _ColumnLayerProps<DataT> & LayerProps<DataT>;\n\n/** Properties added by ColumnLayer. */\ntype _ColumnLayerProps<DataT> = {\n  /**\n   * The number of sides to render the disk as.\n   * @default 20\n   */\n  diskResolution?: number;\n\n  /**\n   * isk size in units specified by `radiusUnits`.\n   * @default 1000\n   */\n  radius?: number;\n\n  /**\n   * Disk rotation, counter-clockwise in degrees.\n   * @default 0\n   */\n  angle?: number;\n\n  /**\n   * Replace the default geometry (regular polygon that fits inside the unit circle) with a custom one.\n   * @default null\n   */\n  vertices: Position[] | null;\n\n  /**\n   * Disk offset from the position, relative to the radius.\n   * @default [0,0]\n   */\n  offset?: [number, number];\n\n  /**\n   * Radius multiplier, between 0 - 1\n   * @default 1\n   */\n  coverage?: number;\n\n  /**\n   * Column elevation multiplier.\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /**\n   * Whether to draw a filled column (solid fill).\n   * @default true\n   */\n  filled?: boolean;\n\n  /**\n   * Whether to draw an outline around the disks.\n   * @default false\n   */\n  stroked?: boolean;\n\n  /**\n   * Whether to extrude the columns. If set to `false`, all columns will be rendered as flat polygons.\n   * @default true\n   */\n  extruded?: boolean;\n\n  /**\n   * Whether to generate a line wireframe of the column.\n   * @default false\n   */\n  wireframe?: boolean;\n\n  /**\n   * If `true`, the vertical surfaces of the columns use [flat shading](https://en.wikipedia.org/wiki/Shading#Flat_vs._smooth_shading).\n   * @default false\n   */\n  flatShading?: boolean;\n\n  /**\n   * The units of the radius.\n   * @default 'meters'\n   */\n  radiusUnits?: Unit;\n\n  /**\n   * The units of the line width.\n   * @default 'meters'\n   */\n  lineWidthUnits?: Unit;\n\n  /**\n   * The line width multiplier that multiplied to all outlines.\n   * @default 1\n   */\n  lineWidthScale?: number;\n\n  /**\n   * The minimum outline width in pixels.\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n\n  /**\n   * The maximum outline width in pixels.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n\n  /**\n   * Method called to retrieve the position of each column.\n   * @default object => object.position\n   */\n  getPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * @deprecated Use getFilledColor and getLineColor instead\n   */\n  getColor?: Accessor<DataT, Color>;\n\n  /**\n   * Fill collor value or accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line color value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n\n  /**\n   * The elevation of each cell in meters.\n   * @default 1000\n   */\n  getElevation?: Accessor<DataT, number>;\n\n  /**\n   * The width of the outline of the column, in units specified by `lineWidthUnits`.\n   *\n   * @default 1\n   */\n  getLineWidth?: Accessor<DataT, number>;\n};\n\n/** Render extruded cylinders (tessellated regular polygons) at given coordinates. */\nexport default class ColumnLayer<DataT = any, ExtraPropsT = {}> extends Layer<\n  ExtraPropsT & Required<_ColumnLayerProps<DataT>>\n> {\n  static layerName = 'ColumnLayer';\n  static defaultProps = defaultProps;\n\n  getShaders() {\n    const {gl} = this.context;\n    const transpileToGLSL100 = !isWebGL2(gl);\n    const defines: Record<string, any> = {};\n\n    const useDerivatives = this.props.flatShading && hasFeature(gl, FEATURES.GLSL_DERIVATIVES);\n    if (useDerivatives) {\n      defines.FLAT_SHADING = 1;\n    }\n    return super.getShaders({\n      vs,\n      fs,\n      defines,\n      transpileToGLSL100,\n      modules: [project32, useDerivatives ? phongLighting : gouraudLighting, picking]\n    });\n  }\n\n  /**\n   * DeckGL calls initializeState when GL context is available\n   * Essentially a deferred constructor\n   */\n  initializeState() {\n    const attributeManager = this.getAttributeManager()!;\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getLineWidth',\n        transition: true\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState(params: UpdateParameters<this>): void {\n    super.updateState(params);\n\n    const {props, oldProps, changeFlags} = params;\n    const regenerateModels =\n      changeFlags.extensionsChanged || props.flatShading !== oldProps.flatShading;\n\n    if (regenerateModels) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n\n    if (\n      regenerateModels ||\n      props.diskResolution !== oldProps.diskResolution ||\n      props.vertices !== oldProps.vertices ||\n      (props.extruded || props.stroked) !== (oldProps.extruded || oldProps.stroked)\n    ) {\n      this._updateGeometry(props);\n    }\n  }\n\n  getGeometry(diskResolution: number, vertices: number[] | undefined, hasThinkness: boolean) {\n    const geometry = new ColumnGeometry({\n      radius: 1,\n      height: hasThinkness ? 2 : 0,\n      vertices,\n      nradial: diskResolution\n    });\n\n    let meanVertexDistance = 0;\n    if (vertices) {\n      for (let i = 0; i < diskResolution; i++) {\n        const p = vertices[i];\n        const d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n        meanVertexDistance += d / diskResolution;\n      }\n    } else {\n      meanVertexDistance = 1;\n    }\n    this.setState({\n      edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n    });\n\n    return geometry;\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      isInstanced: true\n    });\n  }\n\n  protected _updateGeometry({diskResolution, vertices, extruded, stroked}) {\n    const geometry: any = this.getGeometry(diskResolution, vertices, extruded || stroked);\n\n    this.setState({\n      fillVertexCount: geometry.attributes.POSITION.value.length / 3,\n      wireframeVertexCount: geometry.indices.value.length\n    });\n\n    this.state.model.setProps({geometry});\n  }\n\n  draw({uniforms}) {\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      radiusUnits,\n      elevationScale,\n      extruded,\n      filled,\n      stroked,\n      wireframe,\n      offset,\n      coverage,\n      radius,\n      angle\n    } = this.props;\n    const {model, fillVertexCount, wireframeVertexCount, edgeDistance} = this.state;\n\n    model.setUniforms(uniforms).setUniforms({\n      radius,\n      angle: (angle / 180) * Math.PI,\n      offset,\n      extruded,\n      stroked,\n      coverage,\n      elevationScale,\n      edgeDistance,\n      radiusUnits: UNIT[radiusUnits],\n      widthUnits: UNIT[lineWidthUnits],\n      widthScale: lineWidthScale,\n      widthMinPixels: lineWidthMinPixels,\n      widthMaxPixels: lineWidthMaxPixels\n    });\n\n    // When drawing 3d: draw wireframe first so it doesn't get occluded by depth test\n    if (extruded && wireframe) {\n      model.setProps({isIndexed: true});\n      model\n        .setVertexCount(wireframeVertexCount)\n        .setDrawMode(GL.LINES)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n    if (filled) {\n      model.setProps({isIndexed: false});\n      model\n        .setVertexCount(fillVertexCount)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: false})\n        .draw();\n    }\n    // When drawing 2d: draw fill before stroke so that the outline is always on top\n    if (!extruded && stroked) {\n      model.setProps({isIndexed: false});\n      // The width of the stroke is achieved by flattening the side of the cylinder.\n      // Skip the last 1/3 of the vertices which is the top.\n      model\n        .setVertexCount((fillVertexCount * 2) / 3)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}