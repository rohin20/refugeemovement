{"ast":null,"code":"import _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { CompositeLayer } from '@deck.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport GPUGridLayer from '../gpu-grid-layer/gpu-grid-layer';\nimport CPUGridLayer from '../cpu-grid-layer/cpu-grid-layer';\nvar defaultProps = _objectSpread(_objectSpread(_objectSpread({}, GPUGridLayer.defaultProps), CPUGridLayer.defaultProps), {}, {\n  gpuAggregation: false\n});\nvar GridLayer = /*#__PURE__*/function (_CompositeLayer) {\n  _inherits(GridLayer, _CompositeLayer);\n  var _super = _createSuper(GridLayer);\n  function GridLayer() {\n    _classCallCheck(this, GridLayer);\n    return _super.apply(this, arguments);\n  }\n  _createClass(GridLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        useGPUAggregation: true\n      };\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var oldProps = _ref.oldProps,\n        props = _ref.props,\n        changeFlags = _ref.changeFlags;\n      var newState = {};\n      newState.useGPUAggregation = this.canUseGPUAggregation(props);\n      this.setState(newState);\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props = this.props,\n        data = _this$props.data,\n        updateTriggers = _this$props.updateTriggers;\n      var id = this.state.useGPUAggregation ? 'GPU' : 'CPU';\n      var LayerType = this.state.useGPUAggregation ? this.getSubLayerClass('GPU', GPUGridLayer) : this.getSubLayerClass('CPU', CPUGridLayer);\n      return new LayerType(this.props, this.getSubLayerProps({\n        id: id,\n        updateTriggers: updateTriggers\n      }), {\n        data: data\n      });\n    }\n  }, {\n    key: \"canUseGPUAggregation\",\n    value: function canUseGPUAggregation(props) {\n      var gpuAggregation = props.gpuAggregation,\n        lowerPercentile = props.lowerPercentile,\n        upperPercentile = props.upperPercentile,\n        getColorValue = props.getColorValue,\n        getElevationValue = props.getElevationValue,\n        colorScaleType = props.colorScaleType;\n      if (!gpuAggregation) {\n        return false;\n      }\n      if (!GPUGridAggregator.isSupported(this.context.gl)) {\n        return false;\n      }\n      if (lowerPercentile !== 0 || upperPercentile !== 100) {\n        return false;\n      }\n      if (getColorValue !== null || getElevationValue !== null) {\n        return false;\n      }\n      if (colorScaleType === 'quantile' || colorScaleType === 'ordinal') {\n        return false;\n      }\n      return true;\n    }\n  }]);\n  return GridLayer;\n}(CompositeLayer);\nexport { GridLayer as default };\nGridLayer.layerName = 'GridLayer';\nGridLayer.defaultProps = defaultProps;","map":{"version":3,"names":["CompositeLayer","GPUGridAggregator","GPUGridLayer","CPUGridLayer","defaultProps","_objectSpread","gpuAggregation","GridLayer","_CompositeLayer","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","initializeState","state","useGPUAggregation","updateState","_ref","oldProps","props","changeFlags","newState","canUseGPUAggregation","setState","renderLayers","_this$props","data","updateTriggers","id","LayerType","getSubLayerClass","getSubLayerProps","lowerPercentile","upperPercentile","getColorValue","getElevationValue","colorScaleType","isSupported","context","gl","default","layerName"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/aggregation-layers/src/grid-layer/grid-layer.js"],"sourcesContent":["import {CompositeLayer} from '@deck.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport GPUGridLayer from '../gpu-grid-layer/gpu-grid-layer';\nimport CPUGridLayer from '../cpu-grid-layer/cpu-grid-layer';\n\nconst defaultProps = {\n  ...GPUGridLayer.defaultProps,\n  ...CPUGridLayer.defaultProps,\n  gpuAggregation: false\n};\n\nexport default class GridLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      useGPUAggregation: true\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const newState = {};\n    newState.useGPUAggregation = this.canUseGPUAggregation(props);\n    this.setState(newState);\n  }\n\n  renderLayers() {\n    const {data, updateTriggers} = this.props;\n    const id = this.state.useGPUAggregation ? 'GPU' : 'CPU';\n    const LayerType = this.state.useGPUAggregation\n      ? this.getSubLayerClass('GPU', GPUGridLayer)\n      : this.getSubLayerClass('CPU', CPUGridLayer);\n    return new LayerType(\n      this.props,\n      this.getSubLayerProps({\n        id,\n        updateTriggers\n      }),\n      {\n        data\n      }\n    );\n  }\n\n  // Private methods\n\n  canUseGPUAggregation(props) {\n    const {\n      gpuAggregation,\n      lowerPercentile,\n      upperPercentile,\n      getColorValue,\n      getElevationValue,\n      colorScaleType\n    } = props;\n    if (!gpuAggregation) {\n      // cpu aggregation is requested\n      return false;\n    }\n    if (!GPUGridAggregator.isSupported(this.context.gl)) {\n      return false;\n    }\n    if (lowerPercentile !== 0 || upperPercentile !== 100) {\n      // percentile calculations requires sorting not supported on GPU\n      return false;\n    }\n    if (getColorValue !== null || getElevationValue !== null) {\n      // accessor for custom color or elevation calculation is specified\n      return false;\n    }\n    if (colorScaleType === 'quantile' || colorScaleType === 'ordinal') {\n      // quantile and ordinal scales are not supported on GPU\n      return false;\n    }\n    return true;\n  }\n}\n\nGridLayer.layerName = 'GridLayer';\nGridLayer.defaultProps = defaultProps;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}