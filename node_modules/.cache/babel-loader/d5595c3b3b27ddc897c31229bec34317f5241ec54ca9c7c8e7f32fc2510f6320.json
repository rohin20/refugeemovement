{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nexport default function fetchProgress(_x, _x2) {\n  return _fetchProgress.apply(this, arguments);\n}\nfunction _fetchProgress() {\n  _fetchProgress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(response, onProgress) {\n    var onDone,\n      onError,\n      body,\n      contentLength,\n      totalBytes,\n      progressStream,\n      _args2 = arguments;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          onDone = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : function () {};\n          onError = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : function () {};\n          _context2.next = 4;\n          return response;\n        case 4:\n          response = _context2.sent;\n          if (response.ok) {\n            _context2.next = 7;\n            break;\n          }\n          return _context2.abrupt(\"return\", response);\n        case 7:\n          body = response.body;\n          if (body) {\n            _context2.next = 10;\n            break;\n          }\n          return _context2.abrupt(\"return\", response);\n        case 10:\n          contentLength = response.headers.get('content-length') || 0;\n          totalBytes = contentLength && parseInt(contentLength);\n          if (contentLength > 0) {\n            _context2.next = 14;\n            break;\n          }\n          return _context2.abrupt(\"return\", response);\n        case 14:\n          if (!(typeof ReadableStream === 'undefined' || !body.getReader)) {\n            _context2.next = 16;\n            break;\n          }\n          return _context2.abrupt(\"return\", response);\n        case 16:\n          progressStream = new ReadableStream({\n            start: function start(controller) {\n              return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                var reader;\n                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      reader = body.getReader();\n                      _context.next = 3;\n                      return read(controller, reader, 0, totalBytes, onProgress, onDone, onError);\n                    case 3:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }, _callee);\n              }))();\n            }\n          });\n          return _context2.abrupt(\"return\", new Response(progressStream));\n        case 18:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _fetchProgress.apply(this, arguments);\n}\nfunction read(_x3, _x4, _x5, _x6, _x7, _x8, _x9) {\n  return _read.apply(this, arguments);\n}\nfunction _read() {\n  _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(controller, reader, loadedBytes, totalBytes, onProgress, onDone, onError) {\n    var _yield$reader$read, done, value, percent;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return reader.read();\n        case 3:\n          _yield$reader$read = _context3.sent;\n          done = _yield$reader$read.done;\n          value = _yield$reader$read.value;\n          if (!done) {\n            _context3.next = 10;\n            break;\n          }\n          onDone();\n          controller.close();\n          return _context3.abrupt(\"return\");\n        case 10:\n          loadedBytes += value.byteLength;\n          percent = Math.round(loadedBytes / totalBytes * 100);\n          onProgress(percent, {\n            loadedBytes: loadedBytes,\n            totalBytes: totalBytes\n          });\n          controller.enqueue(value);\n          _context3.next = 16;\n          return read(controller, reader, loadedBytes, totalBytes, onProgress, onDone, onError);\n        case 16:\n          _context3.next = 22;\n          break;\n        case 18:\n          _context3.prev = 18;\n          _context3.t0 = _context3[\"catch\"](0);\n          controller.error(_context3.t0);\n          onError(_context3.t0);\n        case 22:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[0, 18]]);\n  }));\n  return _read.apply(this, arguments);\n}","map":{"version":3,"names":["fetchProgress","_x","_x2","_fetchProgress","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","response","onProgress","onDone","onError","body","contentLength","totalBytes","progressStream","_args2","wrap","_callee2$","_context2","prev","next","length","undefined","sent","ok","abrupt","headers","get","parseInt","ReadableStream","getReader","start","controller","_callee","reader","_callee$","_context","read","stop","Response","_x3","_x4","_x5","_x6","_x7","_x8","_x9","_read","_callee3","loadedBytes","_yield$reader$read","done","value","percent","_callee3$","_context3","close","byteLength","Math","round","enqueue","t0","error"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/processors/node_modules/@loaders.gl/core/src/lib/progress/fetch-progress.ts"],"sourcesContent":["// Forked from github AnthumChris/fetch-progress-indicators under MIT license\n\n/**\n * Intercepts the Response stream and creates a new Response\n */\nexport default async function fetchProgress(\n  response: Response | Promise<Response>,\n  onProgress: any, // TODO better callback types\n  onDone = () => {},\n  onError = () => {}\n) {\n  response = await response;\n  if (!response.ok) {\n    // ERROR checking needs to be done separately\n    return response;\n  }\n  const body = response.body;\n  if (!body) {\n    // 'ReadableStream not yet supported in this browser.\n    return response;\n  }\n  const contentLength = response.headers.get('content-length') || 0;\n  const totalBytes = contentLength && parseInt(contentLength);\n  if (!(contentLength > 0)) {\n    return response;\n  }\n  // Currently override only implemented in browser\n  if (typeof ReadableStream === 'undefined' || !body.getReader) {\n    return response;\n  }\n\n  // Create a new stream that invisbly wraps original stream\n  const progressStream = new ReadableStream({\n    async start(controller) {\n      const reader = body.getReader();\n      await read(controller, reader, 0, totalBytes, onProgress, onDone, onError);\n    }\n  });\n\n  return new Response(progressStream);\n}\n\n// Forward to original streams controller\n// TODO - this causes a crazy deep \"async stack\"... rewrite as async iterator?\n// eslint-disable-next-line max-params\nasync function read(controller, reader, loadedBytes, totalBytes, onProgress, onDone, onError) {\n  try {\n    const {done, value} = await reader.read();\n    if (done) {\n      onDone();\n      controller.close();\n      return;\n    }\n    loadedBytes += value.byteLength;\n    const percent = Math.round((loadedBytes / totalBytes) * 100);\n    onProgress(percent, {loadedBytes, totalBytes});\n    controller.enqueue(value);\n    await read(controller, reader, loadedBytes, totalBytes, onProgress, onDone, onError);\n  } catch (error) {\n    controller.error(error);\n    onError(error);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}