{"ast":null,"code":"import _slicedToArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { Vector3 } from '@math.gl/core';\nimport { BoundingSphere, OrientedBoundingBox } from '@math.gl/culling';\nimport { Ellipsoid } from '@math.gl/geospatial';\nvar WGS84_RADIUS_X = 6378137.0;\nvar WGS84_RADIUS_Y = 6378137.0;\nvar WGS84_RADIUS_Z = 6356752.3142451793;\nvar scratchVector = new Vector3();\nexport function getZoomFromBoundingVolume(boundingVolume, cartorgraphicCenter) {\n  if (boundingVolume instanceof OrientedBoundingBox) {\n    var halfAxes = boundingVolume.halfAxes;\n    var obbSize = getObbSize(halfAxes);\n    return Math.log2(WGS84_RADIUS_Z / (obbSize + cartorgraphicCenter[2]));\n  } else if (boundingVolume instanceof BoundingSphere) {\n    var radius = boundingVolume.radius;\n    return Math.log2(WGS84_RADIUS_Z / (radius + cartorgraphicCenter[2]));\n  } else if (boundingVolume.width && boundingVolume.height) {\n    var width = boundingVolume.width,\n      height = boundingVolume.height;\n    var zoomX = Math.log2(WGS84_RADIUS_X / width);\n    var zoomY = Math.log2(WGS84_RADIUS_Y / height);\n    return (zoomX + zoomY) / 2;\n  }\n  return 1;\n}\nexport function getZoomFromFullExtent(fullExtent, cartorgraphicCenter, cartesianCenter) {\n  var extentVertex = Ellipsoid.WGS84.cartographicToCartesian([fullExtent.xmax, fullExtent.ymax, fullExtent.zmax], new Vector3());\n  var extentSize = Math.sqrt(Math.pow(extentVertex[0] - cartesianCenter[0], 2) + Math.pow(extentVertex[1] - cartesianCenter[1], 2) + Math.pow(extentVertex[2] - cartesianCenter[2], 2));\n  return Math.log2(WGS84_RADIUS_Z / (extentSize + cartorgraphicCenter[2]));\n}\nexport function getZoomFromExtent(extent, cartorgraphicCenter, cartesianCenter) {\n  var _extent = _slicedToArray(extent, 4),\n    xmin = _extent[0],\n    ymin = _extent[1],\n    xmax = _extent[2],\n    ymax = _extent[3];\n  return getZoomFromFullExtent({\n    xmin: xmin,\n    xmax: xmax,\n    ymin: ymin,\n    ymax: ymax,\n    zmin: 0,\n    zmax: 0\n  }, cartorgraphicCenter, cartesianCenter);\n}\nfunction getObbSize(halfAxes) {\n  halfAxes.getColumn(0, scratchVector);\n  var axeY = halfAxes.getColumn(1);\n  var axeZ = halfAxes.getColumn(2);\n  var farthestVertex = scratchVector.add(axeY).add(axeZ);\n  var size = farthestVertex.len();\n  return size;\n}","map":{"version":3,"names":["Vector3","BoundingSphere","OrientedBoundingBox","Ellipsoid","WGS84_RADIUS_X","WGS84_RADIUS_Y","WGS84_RADIUS_Z","scratchVector","getZoomFromBoundingVolume","boundingVolume","cartorgraphicCenter","halfAxes","obbSize","getObbSize","Math","log2","radius","width","height","zoomX","zoomY","getZoomFromFullExtent","fullExtent","cartesianCenter","extentVertex","WGS84","cartographicToCartesian","xmax","ymax","zmax","extentSize","sqrt","pow","getZoomFromExtent","extent","_extent","_slicedToArray","xmin","ymin","zmin","getColumn","axeY","axeZ","farthestVertex","add","size","len"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/geo-layers/node_modules/@loaders.gl/tiles/src/tileset/helpers/zoom.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport {Vector3} from '@math.gl/core';\nimport {BoundingSphere, OrientedBoundingBox} from '@math.gl/culling';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {BoundingRectangle} from '../../types';\n\nconst WGS84_RADIUS_X = 6378137.0;\nconst WGS84_RADIUS_Y = 6378137.0;\nconst WGS84_RADIUS_Z = 6356752.3142451793;\n\nconst scratchVector = new Vector3();\n\n/**\n * Calculate appropriate zoom value for a particular boundingVolume\n * @param boundingVolume - the instance of bounding volume\n * @param cartorgraphicCenter - cartographic center of the bounding volume\n * @returns {number} - zoom value\n */\nexport function getZoomFromBoundingVolume(\n  boundingVolume: BoundingSphere | OrientedBoundingBox | BoundingRectangle,\n  cartorgraphicCenter: Vector3\n) {\n  if (boundingVolume instanceof OrientedBoundingBox) {\n    // OrientedBoundingBox\n    const {halfAxes} = boundingVolume;\n    const obbSize = getObbSize(halfAxes);\n    // Use WGS84_RADIUS_Z to allign with BoundingSphere algorithm\n    // Add the tile elevation value for correct zooming to elevated tiles\n    return Math.log2(WGS84_RADIUS_Z / (obbSize + cartorgraphicCenter[2]));\n  } else if (boundingVolume instanceof BoundingSphere) {\n    // BoundingSphere\n    const {radius} = boundingVolume;\n    // Add the tile elevation value for correct zooming to elevated tiles\n    return Math.log2(WGS84_RADIUS_Z / (radius + cartorgraphicCenter[2]));\n  } else if (boundingVolume.width && boundingVolume.height) {\n    // BoundingRectangle\n    const {width, height} = boundingVolume;\n    const zoomX = Math.log2(WGS84_RADIUS_X / width);\n    const zoomY = Math.log2(WGS84_RADIUS_Y / height);\n\n    return (zoomX + zoomY) / 2;\n  }\n\n  return 1;\n}\n\n/**\n * Calculate initial zoom for the tileset from 3D `fullExtent` defined in\n * the tileset metadata\n * @param fullExtent - 3D extent of the tileset\n * @param fullExtent.xmin - minimal longitude in decimal degrees\n * @param fullExtent.xmax - maximal longitude in decimal degrees\n * @param fullExtent.ymin - minimal latitude in decimal degrees\n * @param fullExtent.ymax - maximal latitude in decimal degrees\n * @param fullExtent.zmin - minimal elevation in meters\n * @param fullExtent.zmax - maximal elevation in meters\n * @param cartorgraphicCenter - tileset center in cartographic coordinate system\n * @param cartesianCenter - tileset center in cartesian coordinate system\n * @returns - initial zoom for the tileset\n */\nexport function getZoomFromFullExtent(\n  fullExtent: {\n    xmin: number;\n    xmax: number;\n    ymin: number;\n    ymax: number;\n    zmin: number;\n    zmax: number;\n  },\n  cartorgraphicCenter: Vector3,\n  cartesianCenter: Vector3\n) {\n  const extentVertex = Ellipsoid.WGS84.cartographicToCartesian(\n    [fullExtent.xmax, fullExtent.ymax, fullExtent.zmax],\n    new Vector3()\n  );\n  const extentSize = Math.sqrt(\n    Math.pow(extentVertex[0] - cartesianCenter[0], 2) +\n      Math.pow(extentVertex[1] - cartesianCenter[1], 2) +\n      Math.pow(extentVertex[2] - cartesianCenter[2], 2)\n  );\n  return Math.log2(WGS84_RADIUS_Z / (extentSize + cartorgraphicCenter[2]));\n}\n\n/**\n * Calculate initial zoom for the tileset from 2D `extent` defined in\n * the tileset metadata\n * @param extent - 2D extent of the tileset. It is array of 4 elements [xmin, ymin, xmax, ymax]\n * @param extent[0] - minimal longitude in decimal degrees\n * @param extent[1] - minimal latitude in decimal degrees\n * @param extent[2] - maximal longitude in decimal degrees\n * @param extent[3] - maximal latitude in decimal degrees\n * @param cartorgraphicCenter - tileset center in cartographic coordinate system\n * @param cartesianCenter - tileset center in cartesian coordinate system\n * @returns - initial zoom for the tileset\n */\nexport function getZoomFromExtent(\n  extent: [number, number, number, number],\n  cartorgraphicCenter: Vector3,\n  cartesianCenter: Vector3\n) {\n  const [xmin, ymin, xmax, ymax] = extent;\n  return getZoomFromFullExtent(\n    {xmin, xmax, ymin, ymax, zmin: 0, zmax: 0},\n    cartorgraphicCenter,\n    cartesianCenter\n  );\n}\n\nfunction getObbSize(halfAxes) {\n  halfAxes.getColumn(0, scratchVector);\n  const axeY = halfAxes.getColumn(1);\n  const axeZ = halfAxes.getColumn(2);\n  const farthestVertex = scratchVector.add(axeY).add(axeZ);\n  const size = farthestVertex.len();\n  return size;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}