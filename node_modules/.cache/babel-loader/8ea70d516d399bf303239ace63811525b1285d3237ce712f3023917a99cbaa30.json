{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _awaitAsyncGenerator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { TableBatchBuilder } from '@loaders.gl/schema';\nimport { assert, makeTextDecoderIterator } from '@loaders.gl/loader-utils';\nimport StreamingJSONParser from './parser/streaming-json-parser';\nimport JSONPath from './jsonpath/jsonpath';\nexport default function parseJSONInBatches(_x, _x2) {\n  return _parseJSONInBatches.apply(this, arguments);\n}\nfunction _parseJSONInBatches() {\n  _parseJSONInBatches = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(binaryAsyncIterator, options) {\n    var _options$json, asyncIterator, metadata, _ref, jsonpaths, isFirstChunk, schema, shape, tableBatchBuilder, parser, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk, rows, _jsonpath, initialBatch, _iterator2, _step2, row, _batch2, _batch, jsonpath, batch, finalBatch;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          asyncIterator = makeTextDecoderIterator(binaryAsyncIterator);\n          metadata = options.metadata;\n          _ref = options.json || {}, jsonpaths = _ref.jsonpaths;\n          isFirstChunk = true;\n          schema = null;\n          shape = (options === null || options === void 0 ? void 0 : (_options$json = options.json) === null || _options$json === void 0 ? void 0 : _options$json.shape) || 'row-table';\n          tableBatchBuilder = new TableBatchBuilder(schema, _objectSpread(_objectSpread({}, options), {}, {\n            shape: shape\n          }));\n          parser = new StreamingJSONParser({\n            jsonpaths: jsonpaths\n          });\n          _iteratorAbruptCompletion = false;\n          _didIteratorError = false;\n          _context.prev = 10;\n          _iterator = _asyncIterator(asyncIterator);\n        case 12:\n          _context.next = 14;\n          return _awaitAsyncGenerator(_iterator.next());\n        case 14:\n          if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n            _context.next = 52;\n            break;\n          }\n          chunk = _step.value;\n          rows = parser.write(chunk);\n          _jsonpath = rows.length > 0 && parser.getStreamingJsonPathAsString();\n          if (!(rows.length > 0 && isFirstChunk)) {\n            _context.next = 24;\n            break;\n          }\n          if (!metadata) {\n            _context.next = 23;\n            break;\n          }\n          initialBatch = {\n            shape: shape,\n            batchType: 'partial-result',\n            data: [],\n            length: 0,\n            bytesUsed: 0,\n            container: parser.getPartialResult(),\n            jsonpath: _jsonpath\n          };\n          _context.next = 23;\n          return initialBatch;\n        case 23:\n          isFirstChunk = false;\n        case 24:\n          _iterator2 = _createForOfIteratorHelper(rows);\n          _context.prev = 25;\n          _iterator2.s();\n        case 27:\n          if ((_step2 = _iterator2.n()).done) {\n            _context.next = 36;\n            break;\n          }\n          row = _step2.value;\n          tableBatchBuilder.addRow(row);\n          _batch2 = tableBatchBuilder.getFullBatch({\n            jsonpath: _jsonpath\n          });\n          if (!_batch2) {\n            _context.next = 34;\n            break;\n          }\n          _context.next = 34;\n          return _batch2;\n        case 34:\n          _context.next = 27;\n          break;\n        case 36:\n          _context.next = 41;\n          break;\n        case 38:\n          _context.prev = 38;\n          _context.t0 = _context[\"catch\"](25);\n          _iterator2.e(_context.t0);\n        case 41:\n          _context.prev = 41;\n          _iterator2.f();\n          return _context.finish(41);\n        case 44:\n          tableBatchBuilder.chunkComplete(chunk);\n          _batch = tableBatchBuilder.getFullBatch({\n            jsonpath: _jsonpath\n          });\n          if (!_batch) {\n            _context.next = 49;\n            break;\n          }\n          _context.next = 49;\n          return _batch;\n        case 49:\n          _iteratorAbruptCompletion = false;\n          _context.next = 12;\n          break;\n        case 52:\n          _context.next = 58;\n          break;\n        case 54:\n          _context.prev = 54;\n          _context.t1 = _context[\"catch\"](10);\n          _didIteratorError = true;\n          _iteratorError = _context.t1;\n        case 58:\n          _context.prev = 58;\n          _context.prev = 59;\n          if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n            _context.next = 63;\n            break;\n          }\n          _context.next = 63;\n          return _awaitAsyncGenerator(_iterator.return());\n        case 63:\n          _context.prev = 63;\n          if (!_didIteratorError) {\n            _context.next = 66;\n            break;\n          }\n          throw _iteratorError;\n        case 66:\n          return _context.finish(63);\n        case 67:\n          return _context.finish(58);\n        case 68:\n          jsonpath = parser.getStreamingJsonPathAsString();\n          batch = tableBatchBuilder.getFinalBatch({\n            jsonpath: jsonpath\n          });\n          if (!batch) {\n            _context.next = 73;\n            break;\n          }\n          _context.next = 73;\n          return batch;\n        case 73:\n          if (!metadata) {\n            _context.next = 77;\n            break;\n          }\n          finalBatch = {\n            shape: shape,\n            batchType: 'final-result',\n            container: parser.getPartialResult(),\n            jsonpath: parser.getStreamingJsonPathAsString(),\n            data: [],\n            length: 0\n          };\n          _context.next = 77;\n          return finalBatch;\n        case 77:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[10, 54, 58, 68], [25, 38, 41, 44], [59,, 63, 67]]);\n  }));\n  return _parseJSONInBatches.apply(this, arguments);\n}\nexport function rebuildJsonObject(batch, data) {\n  assert(batch.batchType === 'final-result');\n  if (batch.jsonpath === '$') {\n    return data;\n  }\n  if (batch.jsonpath && batch.jsonpath.length > 1) {\n    var topLevelObject = batch.container;\n    var streamingPath = new JSONPath(batch.jsonpath);\n    streamingPath.setFieldAtPath(topLevelObject, data);\n    return topLevelObject;\n  }\n  return batch.container;\n}","map":{"version":3,"names":["TableBatchBuilder","assert","makeTextDecoderIterator","StreamingJSONParser","JSONPath","parseJSONInBatches","_x","_x2","_parseJSONInBatches","apply","arguments","_wrapAsyncGenerator","_regeneratorRuntime","mark","_callee","binaryAsyncIterator","options","_options$json","asyncIterator","metadata","_ref","jsonpaths","isFirstChunk","schema","shape","tableBatchBuilder","parser","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","chunk","rows","_jsonpath","initialBatch","_iterator2","_step2","row","_batch2","_batch","jsonpath","batch","finalBatch","wrap","_callee$","_context","prev","next","json","_objectSpread","_asyncIterator","_awaitAsyncGenerator","sent","done","value","write","length","getStreamingJsonPathAsString","batchType","data","bytesUsed","container","getPartialResult","_createForOfIteratorHelper","s","n","addRow","getFullBatch","t0","e","f","finish","chunkComplete","t1","return","getFinalBatch","stop","rebuildJsonObject","topLevelObject","streamingPath","setFieldAtPath"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/processors/node_modules/@loaders.gl/json/src/lib/parse-json-in-batches.ts"],"sourcesContent":["import type {Batch} from '@loaders.gl/schema';\nimport type {JSONLoaderOptions} from '../json-loader';\nimport {TableBatchBuilder} from '@loaders.gl/schema';\nimport {assert, makeTextDecoderIterator} from '@loaders.gl/loader-utils';\nimport StreamingJSONParser from './parser/streaming-json-parser';\nimport JSONPath from './jsonpath/jsonpath';\n\n// TODO - support batch size 0 = no batching/single batch?\n// eslint-disable-next-line max-statements, complexity\nexport default async function* parseJSONInBatches(\n  binaryAsyncIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>,\n  options: JSONLoaderOptions\n): AsyncIterable<Batch> {\n  const asyncIterator = makeTextDecoderIterator(binaryAsyncIterator);\n\n  const {metadata} = options;\n  const {jsonpaths} = options.json || {};\n\n  let isFirstChunk: boolean = true;\n\n  // TODO fix Schema deduction\n  const schema = null; // new Schema([]);\n  const shape = options?.json?.shape || 'row-table';\n  // @ts-ignore\n  const tableBatchBuilder = new TableBatchBuilder(schema, {\n    ...options,\n    shape\n  });\n\n  const parser = new StreamingJSONParser({jsonpaths});\n\n  for await (const chunk of asyncIterator) {\n    const rows = parser.write(chunk);\n\n    const jsonpath = rows.length > 0 && parser.getStreamingJsonPathAsString();\n\n    if (rows.length > 0 && isFirstChunk) {\n      if (metadata) {\n        const initialBatch: Batch = {\n          // Common fields\n          shape,\n          batchType: 'partial-result',\n          data: [],\n          length: 0,\n          bytesUsed: 0,\n          // JSON additions\n          container: parser.getPartialResult(),\n          jsonpath\n        };\n        yield initialBatch;\n      }\n      isFirstChunk = false;\n      // schema = deduceSchema(rows);\n    }\n\n    // Add the row\n    for (const row of rows) {\n      tableBatchBuilder.addRow(row);\n      // If a batch has been completed, emit it\n      const batch = tableBatchBuilder.getFullBatch({jsonpath});\n      if (batch) {\n        yield batch;\n      }\n    }\n\n    tableBatchBuilder.chunkComplete(chunk);\n    const batch = tableBatchBuilder.getFullBatch({jsonpath});\n    if (batch) {\n      yield batch;\n    }\n  }\n\n  // yield final batch\n  const jsonpath = parser.getStreamingJsonPathAsString();\n  const batch = tableBatchBuilder.getFinalBatch({jsonpath});\n  if (batch) {\n    yield batch;\n  }\n\n  if (metadata) {\n    const finalBatch: Batch = {\n      shape,\n      batchType: 'final-result',\n      container: parser.getPartialResult(),\n      jsonpath: parser.getStreamingJsonPathAsString(),\n      data: [],\n      length: 0\n      // schema: null\n    };\n    yield finalBatch;\n  }\n}\n\nexport function rebuildJsonObject(batch, data) {\n  // Last batch will have this special type and will provide all the root object of the parsed file\n  assert(batch.batchType === 'final-result');\n\n  // The streamed JSON data is a top level array (jsonpath = '$'), just return the array of row objects\n  if (batch.jsonpath === '$') {\n    return data;\n  }\n\n  // (jsonpath !== '$') The streamed data is not a top level array, so stitch it back in to the top-level object\n  if (batch.jsonpath && batch.jsonpath.length > 1) {\n    const topLevelObject = batch.container;\n    const streamingPath = new JSONPath(batch.jsonpath);\n    streamingPath.setFieldAtPath(topLevelObject, data);\n    return topLevelObject;\n  }\n\n  // No jsonpath, in this case nothing was streamed.\n  return batch.container;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}