{"ast":null,"code":"import { Matrix4, Vector3, clamp } from '@math.gl/core';\nvar scratchPositionNormal = new Vector3();\nvar scratchCartographic = new Vector3();\nvar scratchMatrix = new Matrix4();\nvar scratchCenter = new Vector3();\nvar scratchPosition = new Vector3();\nvar scratchDirection = new Vector3();\nexport function calculateDynamicScreenSpaceError(root, _ref) {\n  var camera = _ref.camera,\n    mapProjection = _ref.mapProjection;\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var _options$dynamicScree = options.dynamicScreenSpaceErrorHeightFalloff,\n    dynamicScreenSpaceErrorHeightFalloff = _options$dynamicScree === void 0 ? 0.25 : _options$dynamicScree,\n    _options$dynamicScree2 = options.dynamicScreenSpaceErrorDensity,\n    dynamicScreenSpaceErrorDensity = _options$dynamicScree2 === void 0 ? 0.00278 : _options$dynamicScree2;\n  var up;\n  var direction;\n  var height;\n  var minimumHeight;\n  var maximumHeight;\n  var tileBoundingVolume = root.contentBoundingVolume;\n  if (tileBoundingVolume instanceof TileBoundingRegion) {\n    up = Cartesian3.normalize(camera.positionWC, scratchPositionNormal);\n    direction = camera.directionWC;\n    height = camera.positionCartographic.height;\n    minimumHeight = tileBoundingVolume.minimumHeight;\n    maximumHeight = tileBoundingVolume.maximumHeight;\n  } else {\n    var transformLocal = Matrix4.inverseTransformation(root.computedTransform, scratchMatrix);\n    var ellipsoid = mapProjection.ellipsoid;\n    var boundingVolume = tileBoundingVolume.boundingVolume;\n    var centerLocal = Matrix4.multiplyByPoint(transformLocal, boundingVolume.center, scratchCenter);\n    if (Cartesian3.magnitude(centerLocal) > ellipsoid.minimumRadius) {\n      var centerCartographic = Cartographic.fromCartesian(centerLocal, ellipsoid, scratchCartographic);\n      up = Cartesian3.normalize(camera.positionWC, scratchPositionNormal);\n      direction = camera.directionWC;\n      height = camera.positionCartographic.height;\n      minimumHeight = 0.0;\n      maximumHeight = centerCartographic.height * 2.0;\n    } else {\n      var positionLocal = Matrix4.multiplyByPoint(transformLocal, camera.positionWC, scratchPosition);\n      up = Cartesian3.UNIT_Z;\n      direction = Matrix4.multiplyByPointAsVector(transformLocal, camera.directionWC, scratchDirection);\n      direction = Cartesian3.normalize(direction, direction);\n      height = positionLocal.z;\n      if (tileBoundingVolume instanceof TileOrientedBoundingBox) {\n        var boxHeight = root._header.boundingVolume.box[11];\n        minimumHeight = centerLocal.z - boxHeight;\n        maximumHeight = centerLocal.z + boxHeight;\n      } else if (tileBoundingVolume instanceof TileBoundingSphere) {\n        var radius = boundingVolume.radius;\n        minimumHeight = centerLocal.z - radius;\n        maximumHeight = centerLocal.z + radius;\n      }\n    }\n  }\n  var heightFalloff = dynamicScreenSpaceErrorHeightFalloff;\n  var heightClose = minimumHeight + (maximumHeight - minimumHeight) * heightFalloff;\n  var heightFar = maximumHeight;\n  var t = clamp((height - heightClose) / (heightFar - heightClose), 0.0, 1.0);\n  var dot = Math.abs(Cartesian3.dot(direction, up));\n  var horizonFactor = 1.0 - dot;\n  horizonFactor = horizonFactor * (1.0 - t);\n  return dynamicScreenSpaceErrorDensity * horizonFactor;\n}\nexport function fog(distanceToCamera, density) {\n  var scalar = distanceToCamera * density;\n  return 1.0 - Math.exp(-(scalar * scalar));\n}\nexport function getDynamicScreenSpaceError(tileset, distanceToCamera) {\n  if (tileset.dynamicScreenSpaceError && tileset.dynamicScreenSpaceErrorComputedDensity) {\n    var density = tileset.dynamicScreenSpaceErrorComputedDensity;\n    var factor = tileset.dynamicScreenSpaceErrorFactor;\n    var dynamicError = fog(distanceToCamera, density) * factor;\n    return dynamicError;\n  }\n  return 0;\n}\nexport function getTiles3DScreenSpaceError(tile, frameState, useParentLodMetric) {\n  var tileset = tile.tileset;\n  var parentLodMetricValue = tile.parent && tile.parent.lodMetricValue || tile.lodMetricValue;\n  var lodMetricValue = useParentLodMetric ? parentLodMetricValue : tile.lodMetricValue;\n  if (lodMetricValue === 0.0) {\n    return 0.0;\n  }\n  var distance = Math.max(tile._distanceToCamera, 1e-7);\n  var height = frameState.height,\n    sseDenominator = frameState.sseDenominator;\n  var viewDistanceScale = tileset.options.viewDistanceScale;\n  var error = lodMetricValue * height * (viewDistanceScale || 1.0) / (distance * sseDenominator);\n  error -= getDynamicScreenSpaceError(tileset, distance);\n  return error;\n}","map":{"version":3,"names":["Matrix4","Vector3","clamp","scratchPositionNormal","scratchCartographic","scratchMatrix","scratchCenter","scratchPosition","scratchDirection","calculateDynamicScreenSpaceError","root","_ref","camera","mapProjection","options","arguments","length","undefined","_options$dynamicScree","dynamicScreenSpaceErrorHeightFalloff","_options$dynamicScree2","dynamicScreenSpaceErrorDensity","up","direction","height","minimumHeight","maximumHeight","tileBoundingVolume","contentBoundingVolume","TileBoundingRegion","Cartesian3","normalize","positionWC","directionWC","positionCartographic","transformLocal","inverseTransformation","computedTransform","ellipsoid","boundingVolume","centerLocal","multiplyByPoint","center","magnitude","minimumRadius","centerCartographic","Cartographic","fromCartesian","positionLocal","UNIT_Z","multiplyByPointAsVector","z","TileOrientedBoundingBox","boxHeight","_header","box","TileBoundingSphere","radius","heightFalloff","heightClose","heightFar","t","dot","Math","abs","horizonFactor","fog","distanceToCamera","density","scalar","exp","getDynamicScreenSpaceError","tileset","dynamicScreenSpaceError","dynamicScreenSpaceErrorComputedDensity","factor","dynamicScreenSpaceErrorFactor","dynamicError","getTiles3DScreenSpaceError","tile","frameState","useParentLodMetric","parentLodMetricValue","parent","lodMetricValue","distance","max","_distanceToCamera","sseDenominator","viewDistanceScale","error"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/geo-layers/node_modules/@loaders.gl/tiles/src/tileset/helpers/tiles-3d-lod.ts"],"sourcesContent":["// loaders.gl, MIT license\n\n// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n// TODO - Dynamic screen space error provides an optimization when looking at\n// tilesets from above\n\n/* eslint-disable */\n// @ts-nocheck\nimport {Matrix4, Vector3, clamp} from '@math.gl/core';\n\nconst scratchPositionNormal = new Vector3();\nconst scratchCartographic = new Vector3();\nconst scratchMatrix = new Matrix4();\nconst scratchCenter = new Vector3();\nconst scratchPosition = new Vector3();\nconst scratchDirection = new Vector3();\n\n// eslint-disable-next-line max-statements, complexity\nexport function calculateDynamicScreenSpaceError(root, {camera, mapProjection}, options = {}) {\n  const {dynamicScreenSpaceErrorHeightFalloff = 0.25, dynamicScreenSpaceErrorDensity = 0.00278} =\n    options;\n\n  let up;\n  let direction;\n  let height;\n  let minimumHeight;\n  let maximumHeight;\n\n  const tileBoundingVolume = root.contentBoundingVolume;\n\n  if (tileBoundingVolume instanceof TileBoundingRegion) {\n    up = Cartesian3.normalize(camera.positionWC, scratchPositionNormal);\n    direction = camera.directionWC;\n    height = camera.positionCartographic.height;\n    minimumHeight = tileBoundingVolume.minimumHeight;\n    maximumHeight = tileBoundingVolume.maximumHeight;\n  } else {\n    // Transform camera position and direction into the local coordinate system of the tileset\n    const transformLocal = Matrix4.inverseTransformation(root.computedTransform, scratchMatrix);\n    const ellipsoid = mapProjection.ellipsoid;\n    const boundingVolume = tileBoundingVolume.boundingVolume;\n    const centerLocal = Matrix4.multiplyByPoint(\n      transformLocal,\n      boundingVolume.center,\n      scratchCenter\n    );\n    if (Cartesian3.magnitude(centerLocal) > ellipsoid.minimumRadius) {\n      // The tileset is defined in WGS84. Approximate the minimum and maximum height.\n      const centerCartographic = Cartographic.fromCartesian(\n        centerLocal,\n        ellipsoid,\n        scratchCartographic\n      );\n      up = Cartesian3.normalize(camera.positionWC, scratchPositionNormal);\n      direction = camera.directionWC;\n      height = camera.positionCartographic.height;\n      minimumHeight = 0.0;\n      maximumHeight = centerCartographic.height * 2.0;\n    } else {\n      // The tileset is defined in local coordinates (z-up)\n      const positionLocal = Matrix4.multiplyByPoint(\n        transformLocal,\n        camera.positionWC,\n        scratchPosition\n      );\n      up = Cartesian3.UNIT_Z;\n      direction = Matrix4.multiplyByPointAsVector(\n        transformLocal,\n        camera.directionWC,\n        scratchDirection\n      );\n      direction = Cartesian3.normalize(direction, direction);\n      height = positionLocal.z;\n      if (tileBoundingVolume instanceof TileOrientedBoundingBox) {\n        // Assuming z-up, the last component stores the half-height of the box\n        const boxHeight = root._header.boundingVolume.box[11];\n        minimumHeight = centerLocal.z - boxHeight;\n        maximumHeight = centerLocal.z + boxHeight;\n      } else if (tileBoundingVolume instanceof TileBoundingSphere) {\n        const radius = boundingVolume.radius;\n        minimumHeight = centerLocal.z - radius;\n        maximumHeight = centerLocal.z + radius;\n      }\n    }\n  }\n\n  // The range where the density starts to lessen. Start at the quarter height of the tileset.\n  const heightFalloff = dynamicScreenSpaceErrorHeightFalloff;\n  const heightClose = minimumHeight + (maximumHeight - minimumHeight) * heightFalloff;\n  const heightFar = maximumHeight;\n\n  const t = clamp((height - heightClose) / (heightFar - heightClose), 0.0, 1.0);\n\n  // Increase density as the camera tilts towards the horizon\n  const dot = Math.abs(Cartesian3.dot(direction, up));\n\n  let horizonFactor = 1.0 - dot;\n\n  // Weaken the horizon factor as the camera height increases, implying the camera is further away from the tileset.\n  // The goal is to increase density for the \"street view\", not when viewing the tileset from a distance.\n  horizonFactor = horizonFactor * (1.0 - t);\n\n  return dynamicScreenSpaceErrorDensity * horizonFactor;\n}\n\nexport function fog(distanceToCamera, density) {\n  const scalar = distanceToCamera * density;\n  return 1.0 - Math.exp(-(scalar * scalar));\n}\n\nexport function getDynamicScreenSpaceError(tileset, distanceToCamera) {\n  if (tileset.dynamicScreenSpaceError && tileset.dynamicScreenSpaceErrorComputedDensity) {\n    const density = tileset.dynamicScreenSpaceErrorComputedDensity;\n    const factor = tileset.dynamicScreenSpaceErrorFactor;\n    // TODO: Refined screen space error that minimizes tiles in non-first-person\n    const dynamicError = fog(distanceToCamera, density) * factor;\n    return dynamicError;\n  }\n\n  return 0;\n}\n\nexport function getTiles3DScreenSpaceError(tile, frameState, useParentLodMetric) {\n  const tileset = tile.tileset;\n  const parentLodMetricValue = (tile.parent && tile.parent.lodMetricValue) || tile.lodMetricValue;\n  const lodMetricValue = useParentLodMetric ? parentLodMetricValue : tile.lodMetricValue;\n\n  // Leaf tiles do not have any error so save the computation\n  if (lodMetricValue === 0.0) {\n    return 0.0;\n  }\n\n  // TODO: Orthographic Frustum needs special treatment?\n  // this._getOrthograhicScreenSpaceError();\n\n  // Avoid divide by zero when viewer is inside the tile\n  const distance = Math.max(tile._distanceToCamera, 1e-7);\n  const {height, sseDenominator} = frameState;\n  const {viewDistanceScale} = tileset.options;\n  let error = (lodMetricValue * height * (viewDistanceScale || 1.0)) / (distance * sseDenominator);\n\n  error -= getDynamicScreenSpaceError(tileset, distance);\n\n  return error;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}