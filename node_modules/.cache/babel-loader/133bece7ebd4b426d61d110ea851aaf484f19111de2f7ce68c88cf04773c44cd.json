{"ast":null,"code":"import _toConsumableArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nexport function extractGeometryInfo(features) {\n  var pointPositionsCount = 0;\n  var pointFeaturesCount = 0;\n  var linePositionsCount = 0;\n  var linePathsCount = 0;\n  var lineFeaturesCount = 0;\n  var polygonPositionsCount = 0;\n  var polygonObjectsCount = 0;\n  var polygonRingsCount = 0;\n  var polygonFeaturesCount = 0;\n  var coordLengths = new Set();\n  var _iterator = _createForOfIteratorHelper(features),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var feature = _step.value;\n      var geometry = feature.geometry;\n      switch (geometry.type) {\n        case 'Point':\n          pointFeaturesCount++;\n          pointPositionsCount++;\n          coordLengths.add(geometry.coordinates.length);\n          break;\n        case 'MultiPoint':\n          pointFeaturesCount++;\n          pointPositionsCount += geometry.coordinates.length;\n          var _iterator2 = _createForOfIteratorHelper(geometry.coordinates),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var point = _step2.value;\n              coordLengths.add(point.length);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n          break;\n        case 'LineString':\n          lineFeaturesCount++;\n          linePositionsCount += geometry.coordinates.length;\n          linePathsCount++;\n          var _iterator3 = _createForOfIteratorHelper(geometry.coordinates),\n            _step3;\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var coord = _step3.value;\n              coordLengths.add(coord.length);\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n          break;\n        case 'MultiLineString':\n          lineFeaturesCount++;\n          var _iterator4 = _createForOfIteratorHelper(geometry.coordinates),\n            _step4;\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var line = _step4.value;\n              linePositionsCount += line.length;\n              linePathsCount++;\n              var _iterator5 = _createForOfIteratorHelper(line),\n                _step5;\n              try {\n                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                  var _coord = _step5.value;\n                  coordLengths.add(_coord.length);\n                }\n              } catch (err) {\n                _iterator5.e(err);\n              } finally {\n                _iterator5.f();\n              }\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n          break;\n        case 'Polygon':\n          polygonFeaturesCount++;\n          polygonObjectsCount++;\n          polygonRingsCount += geometry.coordinates.length;\n          var flattened = geometry.coordinates.flat();\n          polygonPositionsCount += flattened.length;\n          var _iterator6 = _createForOfIteratorHelper(flattened),\n            _step6;\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var _coord2 = _step6.value;\n              coordLengths.add(_coord2.length);\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n          break;\n        case 'MultiPolygon':\n          polygonFeaturesCount++;\n          var _iterator7 = _createForOfIteratorHelper(geometry.coordinates),\n            _step7;\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var polygon = _step7.value;\n              polygonObjectsCount++;\n              polygonRingsCount += polygon.length;\n              var _flattened = polygon.flat();\n              polygonPositionsCount += _flattened.length;\n              var _iterator8 = _createForOfIteratorHelper(_flattened),\n                _step8;\n              try {\n                for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                  var _coord3 = _step8.value;\n                  coordLengths.add(_coord3.length);\n                }\n              } catch (err) {\n                _iterator8.e(err);\n              } finally {\n                _iterator8.f();\n              }\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n          break;\n        default:\n          throw new Error(\"Unsupported geometry type: \".concat(geometry.type));\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return {\n    coordLength: coordLengths.size > 0 ? Math.max.apply(Math, _toConsumableArray(coordLengths)) : 2,\n    pointPositionsCount: pointPositionsCount,\n    pointFeaturesCount: pointFeaturesCount,\n    linePositionsCount: linePositionsCount,\n    linePathsCount: linePathsCount,\n    lineFeaturesCount: lineFeaturesCount,\n    polygonPositionsCount: polygonPositionsCount,\n    polygonObjectsCount: polygonObjectsCount,\n    polygonRingsCount: polygonRingsCount,\n    polygonFeaturesCount: polygonFeaturesCount\n  };\n}","map":{"version":3,"names":["extractGeometryInfo","features","pointPositionsCount","pointFeaturesCount","linePositionsCount","linePathsCount","lineFeaturesCount","polygonPositionsCount","polygonObjectsCount","polygonRingsCount","polygonFeaturesCount","coordLengths","Set","_iterator","_createForOfIteratorHelper","_step","s","n","done","feature","value","geometry","type","add","coordinates","length","_iterator2","_step2","point","err","e","f","_iterator3","_step3","coord","_iterator4","_step4","line","_iterator5","_step5","flattened","flat","_iterator6","_step6","_iterator7","_step7","polygon","_iterator8","_step8","Error","concat","coordLength","size","Math","max","apply","_toConsumableArray"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/gis/src/lib/extract-geometry-info.ts"],"sourcesContent":["import {Feature, GeojsonGeometryInfo} from '@loaders.gl/schema';\n\n/**\n *  Initial scan over GeoJSON features\n *  Counts number of coordinates of each geometry type and\n *  keeps track of the max coordinate dimensions\n */\n// eslint-disable-next-line complexity, max-statements\nexport function extractGeometryInfo(features: Feature[]): GeojsonGeometryInfo {\n  // Counts the number of _positions_, so [x, y, z] counts as one\n  let pointPositionsCount = 0;\n  let pointFeaturesCount = 0;\n  let linePositionsCount = 0;\n  let linePathsCount = 0;\n  let lineFeaturesCount = 0;\n  let polygonPositionsCount = 0;\n  let polygonObjectsCount = 0;\n  let polygonRingsCount = 0;\n  let polygonFeaturesCount = 0;\n  const coordLengths = new Set<number>();\n\n  for (const feature of features) {\n    const geometry = feature.geometry;\n    switch (geometry.type) {\n      case 'Point':\n        pointFeaturesCount++;\n        pointPositionsCount++;\n        coordLengths.add(geometry.coordinates.length);\n        break;\n      case 'MultiPoint':\n        pointFeaturesCount++;\n        pointPositionsCount += geometry.coordinates.length;\n        for (const point of geometry.coordinates) {\n          coordLengths.add(point.length);\n        }\n        break;\n      case 'LineString':\n        lineFeaturesCount++;\n        linePositionsCount += geometry.coordinates.length;\n        linePathsCount++;\n\n        for (const coord of geometry.coordinates) {\n          coordLengths.add(coord.length);\n        }\n        break;\n      case 'MultiLineString':\n        lineFeaturesCount++;\n        for (const line of geometry.coordinates) {\n          linePositionsCount += line.length;\n          linePathsCount++;\n\n          // eslint-disable-next-line max-depth\n          for (const coord of line) {\n            coordLengths.add(coord.length);\n          }\n        }\n        break;\n      case 'Polygon':\n        polygonFeaturesCount++;\n        polygonObjectsCount++;\n        polygonRingsCount += geometry.coordinates.length;\n        const flattened = geometry.coordinates.flat();\n        polygonPositionsCount += flattened.length;\n\n        for (const coord of flattened) {\n          coordLengths.add(coord.length);\n        }\n        break;\n      case 'MultiPolygon':\n        polygonFeaturesCount++;\n        for (const polygon of geometry.coordinates) {\n          polygonObjectsCount++;\n          polygonRingsCount += polygon.length;\n          const flattened = polygon.flat();\n          polygonPositionsCount += flattened.length;\n\n          // eslint-disable-next-line max-depth\n          for (const coord of flattened) {\n            coordLengths.add(coord.length);\n          }\n        }\n        break;\n      default:\n        throw new Error(`Unsupported geometry type: ${geometry.type}`);\n    }\n  }\n\n  return {\n    coordLength: coordLengths.size > 0 ? Math.max(...coordLengths) : 2,\n\n    pointPositionsCount,\n    pointFeaturesCount,\n    linePositionsCount,\n    linePathsCount,\n    lineFeaturesCount,\n    polygonPositionsCount,\n    polygonObjectsCount,\n    polygonRingsCount,\n    polygonFeaturesCount\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}