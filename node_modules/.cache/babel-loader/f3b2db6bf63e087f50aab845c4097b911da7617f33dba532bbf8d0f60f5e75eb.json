{"ast":null,"code":"import { assert } from '@loaders.gl/loader-utils';\nexport function getStringFromArrayBuffer(arrayBuffer, byteOffset, byteLength) {\n  assert(arrayBuffer instanceof ArrayBuffer);\n  var textDecoder = new TextDecoder('utf8');\n  var typedArray = new Uint8Array(arrayBuffer, byteOffset, byteLength);\n  var string = textDecoder.decode(typedArray);\n  return string;\n}\nexport function getStringFromTypedArray(typedArray) {\n  assert(ArrayBuffer.isView(typedArray));\n  var textDecoder = new TextDecoder('utf8');\n  var string = textDecoder.decode(typedArray);\n  return string;\n}\nexport function getMagicString(arrayBuffer) {\n  var byteOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var dataView = new DataView(arrayBuffer);\n  return \"\".concat(String.fromCharCode(dataView.getUint8(byteOffset + 0))).concat(String.fromCharCode(dataView.getUint8(byteOffset + 1))).concat(String.fromCharCode(dataView.getUint8(byteOffset + 2))).concat(String.fromCharCode(dataView.getUint8(byteOffset + 3)));\n}","map":{"version":3,"names":["assert","getStringFromArrayBuffer","arrayBuffer","byteOffset","byteLength","ArrayBuffer","textDecoder","TextDecoder","typedArray","Uint8Array","string","decode","getStringFromTypedArray","isView","getMagicString","arguments","length","undefined","dataView","DataView","concat","String","fromCharCode","getUint8"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/geo-layers/node_modules/@loaders.gl/3d-tiles/src/lib/parsers/helpers/parse-utils.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {assert} from '@loaders.gl/loader-utils';\n\n// Decode the JSON binary array into clear text\nexport function getStringFromArrayBuffer(arrayBuffer, byteOffset, byteLength) {\n  assert(arrayBuffer instanceof ArrayBuffer);\n  const textDecoder = new TextDecoder('utf8');\n  const typedArray = new Uint8Array(arrayBuffer, byteOffset, byteLength);\n  const string = textDecoder.decode(typedArray);\n  return string;\n}\n\n// Decode the JSON binary array into clear text\nexport function getStringFromTypedArray(typedArray) {\n  assert(ArrayBuffer.isView(typedArray));\n  const textDecoder = new TextDecoder('utf8');\n  const string = textDecoder.decode(typedArray);\n  return string;\n}\n\nexport function getMagicString(arrayBuffer, byteOffset = 0) {\n  const dataView = new DataView(arrayBuffer);\n  return `\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 0))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 1))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 2))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 3))}`;\n}\n"],"mappings":"AAGA,SAAQA,MAAM,QAAO,0BAA0B;AAG/C,OAAO,SAASC,wBAAwBA,CAACC,WAAW,EAAEC,UAAU,EAAEC,UAAU,EAAE;EAC5EJ,MAAM,CAACE,WAAW,YAAYG,WAAW,CAAC;EAC1C,IAAMC,WAAW,GAAG,IAAIC,WAAW,CAAC,MAAM,CAAC;EAC3C,IAAMC,UAAU,GAAG,IAAIC,UAAU,CAACP,WAAW,EAAEC,UAAU,EAAEC,UAAU,CAAC;EACtE,IAAMM,MAAM,GAAGJ,WAAW,CAACK,MAAM,CAACH,UAAU,CAAC;EAC7C,OAAOE,MAAM;AACf;AAGA,OAAO,SAASE,uBAAuBA,CAACJ,UAAU,EAAE;EAClDR,MAAM,CAACK,WAAW,CAACQ,MAAM,CAACL,UAAU,CAAC,CAAC;EACtC,IAAMF,WAAW,GAAG,IAAIC,WAAW,CAAC,MAAM,CAAC;EAC3C,IAAMG,MAAM,GAAGJ,WAAW,CAACK,MAAM,CAACH,UAAU,CAAC;EAC7C,OAAOE,MAAM;AACf;AAEA,OAAO,SAASI,cAAcA,CAACZ,WAAW,EAAkB;EAAA,IAAhBC,UAAU,GAAAY,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EACxD,IAAMG,QAAQ,GAAG,IAAIC,QAAQ,CAACjB,WAAW,CAAC;EAC1C,UAAAkB,MAAA,CACAC,MAAM,CAACC,YAAY,CAACJ,QAAQ,CAACK,QAAQ,CAACpB,UAAU,GAAG,CAAC,CAAC,CAAC,EAAAiB,MAAA,CACtDC,MAAM,CAACC,YAAY,CAACJ,QAAQ,CAACK,QAAQ,CAACpB,UAAU,GAAG,CAAC,CAAC,CAAC,EAAAiB,MAAA,CACtDC,MAAM,CAACC,YAAY,CAACJ,QAAQ,CAACK,QAAQ,CAACpB,UAAU,GAAG,CAAC,CAAC,CAAC,EAAAiB,MAAA,CACtDC,MAAM,CAACC,YAAY,CAACJ,QAAQ,CAACK,QAAQ,CAACpB,UAAU,GAAG,CAAC,CAAC,CAAC;AACxD"},"metadata":{},"sourceType":"module","externalDependencies":[]}