{"ast":null,"code":"'use strict';\n\nvar invariant = require('../../vendor/invariant');\nvar uriTemplate = require('rest/util/uriTemplate');\nvar makeService = require('../make_service');\n\n/**\n * @class MapboxStyles\n */\nvar MapboxStyles = module.exports = makeService('MapboxStyles');\nvar API_STYLES_LIST = '/styles/v1/{owner}{?access_token}';\nvar API_STYLES_CREATE = '/styles/v1/{owner}{?access_token}';\nvar API_STYLES_READ = '/styles/v1/{owner}/{styleid}{?access_token}';\nvar API_STYLES_UPDATE = '/styles/v1/{owner}/{styleid}{?access_token}';\nvar API_STYLES_DELETE = '/styles/v1/{owner}/{styleid}{?access_token}';\nvar API_STYLES_EMBED = '/styles/v1/{owner}/{styleid}.html{?access_token,zoomwheel,title}';\nvar API_STYLES_SPRITE = '/styles/v1/{owner}/{styleid}/sprite{+retina}{.format}{?access_token}';\nvar API_STYLES_SPRITE_ICON = '/styles/v1/{owner}/{styleid}/sprite/{iconName}{?access_token}';\nvar API_STYLES_FONT_GLYPH_RANGES = '/fonts/v1/{owner}/{font}/{start}-{end}.pbf{?access_token}';\n\n/**\n * To retrieve a listing of styles for a particular account.\n *\n * @param {Function} callback called with (err, styles)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.listStyles(function(err, styles) {\n *   console.log(styles);\n *   // [{ version: 8,\n *   //  name: 'Light',\n *   //  center: [ -77.0469979435026, 38.898634927602814 ],\n *   //  zoom: 12.511766533145998,\n *   //  bearing: 0,\n *   //  pitch: 0,\n *   //  created: '2016-02-09T14:26:15.059Z',\n *   //  id: 'STYLEID',\n *   //  modified: '2016-02-09T14:28:31.253Z',\n *   //  owner: '{username}' },\n *   //  { version: 8,\n *   //  name: 'Dark',\n *   //  created: '2015-08-28T18:05:22.517Z',\n *   //  id: 'STYILEID',\n *   //  modified: '2015-08-28T18:05:22.517Z',\n *   //  owner: '{username}' }]\n * });\n */\nMapboxStyles.prototype.listStyles = function (callback) {\n  return this.client({\n    path: API_STYLES_LIST,\n    params: {\n      owner: this.owner\n    },\n    callback: callback\n  });\n};\n\n/**\n * Create a style, given the style as a JSON object.\n *\n * @param {Object} style Mapbox GL Style Spec object\n * @param {Function} callback called with (err, createdStyle)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * var style = {\n *   'version': 8,\n *   'name': 'My Awesome Style',\n *   'metadata': {},\n *   'sources': {},\n *   'layers': [],\n *   'glyphs': 'mapbox://fonts/{owner}/{fontstack}/{range}.pbf'\n * };\n * client.createStyle(style, function(err, createdStyle) {\n *   console.log(createdStyle);\n * });\n */\nMapboxStyles.prototype.createStyle = function (style, callback) {\n  return this.client({\n    path: API_STYLES_CREATE,\n    params: {\n      owner: this.owner\n    },\n    entity: style,\n    callback: callback\n  });\n};\n\n/**\n * Update a style, given the style as a JSON object.\n *\n * @param {Object} style Mapbox GL Style Spec object\n * @param {string} styleid style id\n * @param {Function} callback called with (err, createdStyle)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * var style = {\n *   'version': 8,\n *   'name': 'My Awesome Style',\n *   'metadata': {},\n *   'sources': {},\n *   'layers': [],\n *   'glyphs': 'mapbox://fonts/{owner}/{fontstack}/{range}.pbf'\n * };\n * client.updateStyle(style, 'style-id', function(err, createdStyle) {\n *   console.log(createdStyle);\n * });\n */\nMapboxStyles.prototype.updateStyle = function (style, styleid, callback) {\n  invariant(typeof styleid === 'string', 'style id must be a string');\n  return this.client({\n    path: API_STYLES_UPDATE,\n    params: {\n      owner: this.owner,\n      styleid: styleid\n    },\n    entity: style,\n    method: 'patch',\n    callback: callback\n  });\n};\n\n/**\n * Deletes a particular style.\n *\n * @param {string} styleid the id for an existing style\n * @param {Function} callback called with (err)\n * @returns {Promise} a promise with the response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.deleteStyle('style-id', function(err) {\n *   if (!err) console.log('deleted!');\n * });\n */\nMapboxStyles.prototype.deleteStyle = function (styleid, callback) {\n  invariant(typeof styleid === 'string', 'styleid must be a string');\n  return this.client({\n    path: API_STYLES_DELETE,\n    params: {\n      owner: this.owner,\n      styleid: styleid\n    },\n    method: 'delete',\n    callback: callback\n  });\n};\n\n/**\n * Reads a particular style.\n *\n * @param {string} styleid the id for an existing style\n * @param {Function} callback called with (err, style)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.readStyle('style-id', function(err, style) {\n *   if (!err) console.log(style);\n * });\n */\nMapboxStyles.prototype.readStyle = function (styleid, callback) {\n  invariant(typeof styleid === 'string', 'styleid must be a string');\n  return this.client({\n    path: API_STYLES_READ,\n    params: {\n      owner: this.owner,\n      styleid: styleid\n    },\n    callback: callback\n  });\n};\n\n/**\n * Read sprite\n *\n * @param {string} styleid the id for an existing style\n * @param {Object=} options optional options\n * @param {boolean} options.retina whether the sprite JSON should be for a\n * retina sprite.\n * @param {Function} callback called with (err)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.readSprite('style-id', {\n *   retina: true\n * }, function(err) {\n *   if (!err) console.log('deleted!');\n * });\n */\nMapboxStyles.prototype.readSprite = function (styleid, options, callback) {\n  invariant(typeof styleid === 'string', 'styleid must be a string');\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  var retina = '';\n  if (options.retina) {\n    invariant(typeof options.retina === 'boolean', 'retina option must be a boolean value');\n    if (options.retina) {\n      retina = '@2x';\n    }\n  }\n  var format = 'json';\n  if (options.format) {\n    invariant(options.format === 'json' || options.format === 'png', 'format parameter must be either json or png');\n    format = options.format;\n  }\n  return this.client({\n    path: API_STYLES_SPRITE,\n    params: {\n      owner: this.owner,\n      retina: retina,\n      format: format,\n      styleid: styleid\n    },\n    callback: callback\n  });\n};\n\n/**\n * Get font glyph ranges\n *\n * @param {string} font or fonts\n * @param {number} start character code of starting glyph\n * @param {number} end character code of last glyph. typically the same\n * as start + 255\n * @param {Function} callback called with (err)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.readFontGlyphRanges('Arial Unicode', 0, 255, function(err, ranges) {\n *   if (!err) console.log(ranges);\n * });\n */\nMapboxStyles.prototype.readFontGlyphRanges = function (font, start, end, callback) {\n  invariant(typeof font === 'string', 'font must be a string');\n  invariant(typeof start === 'number', 'start must be a number');\n  invariant(typeof end === 'number', 'end must be a number');\n  return this.client({\n    path: API_STYLES_FONT_GLYPH_RANGES,\n    params: {\n      owner: this.owner,\n      font: font,\n      start: start,\n      end: end\n    },\n    callback: callback\n  });\n};\n\n/**\n * Add an icon to a sprite.\n *\n * @param {string} styleid the id for an existing style\n * @param {string} iconName icon's name\n * @param {Buffer} icon icon content as a buffer\n * @param {Function} callback called with (err)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var fs = require('fs');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.addIcon('style-id', 'icon-name', fs.readFileSync('icon.png'), function(err) {\n *   if (!err) console.log('added icon!');\n * });\n */\nMapboxStyles.prototype.addIcon = function (styleid, iconName, icon, callback) {\n  invariant(typeof styleid === 'string', 'style must be a string');\n  invariant(typeof iconName === 'string', 'icon name must be a string');\n  invariant(Buffer.isBuffer(icon), 'icon must be a Buffer');\n  return this.client({\n    path: API_STYLES_SPRITE_ICON,\n    params: {\n      owner: this.owner,\n      styleid: styleid,\n      iconName: iconName\n    },\n    headers: {\n      'Content-Type': 'text/plain'\n    },\n    entity: icon,\n    method: 'put',\n    callback: callback\n  });\n};\n\n/**\n * Delete an icon from a sprite.\n *\n * @param {string} styleid the id for an existing style\n * @param {string} iconName icon's name\n * @param {Function} callback called with (err)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.deleteIcon('style-id', 'icon-name', function(err) {\n *   if (!err) console.log('deleted icon!');\n * });\n */\nMapboxStyles.prototype.deleteIcon = function (styleid, iconName, callback) {\n  invariant(typeof styleid === 'string', 'style must be a string');\n  invariant(typeof iconName === 'string', 'icon name must be a string');\n  return this.client({\n    path: API_STYLES_SPRITE_ICON,\n    params: {\n      owner: this.owner,\n      styleid: styleid,\n      iconName: iconName\n    },\n    method: 'delete',\n    callback: callback\n  });\n};\n\n/**\n * Embed a style.\n *\n * @param {string} styleid the id for an existing style\n * @param {Object} options optional params\n * @param {boolean} [options.title=false] If true, shows a title box in upper right\n * corner with map title and owner\n * @param {boolean} [options.zoomwheel=true] Disables zooming with mouse scroll wheel\n * @returns {string} URL of style embed page\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * var url = client.embedStyle('style-id');\n */\nMapboxStyles.prototype.embedStyle = function (styleid, options) {\n  invariant(typeof styleid === 'string', 'style must be a string');\n  var params = {\n    styleid: styleid,\n    access_token: this.accessToken,\n    owner: this.owner,\n    title: false,\n    zoomwheel: true\n  };\n  if (options) {\n    if (options.title !== undefined) {\n      invariant(typeof options.title === 'boolean', 'title must be a boolean');\n      params.title = options.title;\n    }\n    if (options.zoomwheel !== undefined) {\n      invariant(typeof options.zoomwheel === 'boolean', 'zoomwheel must be a boolean');\n      params.zoomwheel = options.zoomwheel;\n    }\n  }\n  return this.endpoint + uriTemplate.expand(API_STYLES_EMBED, params);\n};","map":{"version":3,"names":["invariant","require","uriTemplate","makeService","MapboxStyles","module","exports","API_STYLES_LIST","API_STYLES_CREATE","API_STYLES_READ","API_STYLES_UPDATE","API_STYLES_DELETE","API_STYLES_EMBED","API_STYLES_SPRITE","API_STYLES_SPRITE_ICON","API_STYLES_FONT_GLYPH_RANGES","prototype","listStyles","callback","client","path","params","owner","createStyle","style","entity","updateStyle","styleid","method","deleteStyle","readStyle","readSprite","options","retina","format","readFontGlyphRanges","font","start","end","addIcon","iconName","icon","Buffer","isBuffer","headers","deleteIcon","embedStyle","access_token","accessToken","title","zoomwheel","undefined","endpoint","expand"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/mapbox/lib/services/styles.js"],"sourcesContent":["'use strict';\n\nvar invariant = require('../../vendor/invariant');\nvar uriTemplate = require('rest/util/uriTemplate');\nvar makeService = require('../make_service');\n\n/**\n * @class MapboxStyles\n */\nvar MapboxStyles = module.exports = makeService('MapboxStyles');\n\nvar API_STYLES_LIST = '/styles/v1/{owner}{?access_token}';\nvar API_STYLES_CREATE = '/styles/v1/{owner}{?access_token}';\nvar API_STYLES_READ = '/styles/v1/{owner}/{styleid}{?access_token}';\nvar API_STYLES_UPDATE = '/styles/v1/{owner}/{styleid}{?access_token}';\nvar API_STYLES_DELETE = '/styles/v1/{owner}/{styleid}{?access_token}';\nvar API_STYLES_EMBED = '/styles/v1/{owner}/{styleid}.html{?access_token,zoomwheel,title}';\nvar API_STYLES_SPRITE = '/styles/v1/{owner}/{styleid}/sprite{+retina}{.format}{?access_token}';\nvar API_STYLES_SPRITE_ICON = '/styles/v1/{owner}/{styleid}/sprite/{iconName}{?access_token}';\nvar API_STYLES_FONT_GLYPH_RANGES = '/fonts/v1/{owner}/{font}/{start}-{end}.pbf{?access_token}';\n\n/**\n * To retrieve a listing of styles for a particular account.\n *\n * @param {Function} callback called with (err, styles)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.listStyles(function(err, styles) {\n *   console.log(styles);\n *   // [{ version: 8,\n *   //  name: 'Light',\n *   //  center: [ -77.0469979435026, 38.898634927602814 ],\n *   //  zoom: 12.511766533145998,\n *   //  bearing: 0,\n *   //  pitch: 0,\n *   //  created: '2016-02-09T14:26:15.059Z',\n *   //  id: 'STYLEID',\n *   //  modified: '2016-02-09T14:28:31.253Z',\n *   //  owner: '{username}' },\n *   //  { version: 8,\n *   //  name: 'Dark',\n *   //  created: '2015-08-28T18:05:22.517Z',\n *   //  id: 'STYILEID',\n *   //  modified: '2015-08-28T18:05:22.517Z',\n *   //  owner: '{username}' }]\n * });\n */\nMapboxStyles.prototype.listStyles = function(callback) {\n  return this.client({\n    path: API_STYLES_LIST,\n    params: {\n      owner: this.owner\n    },\n    callback: callback\n  });\n};\n\n/**\n * Create a style, given the style as a JSON object.\n *\n * @param {Object} style Mapbox GL Style Spec object\n * @param {Function} callback called with (err, createdStyle)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * var style = {\n *   'version': 8,\n *   'name': 'My Awesome Style',\n *   'metadata': {},\n *   'sources': {},\n *   'layers': [],\n *   'glyphs': 'mapbox://fonts/{owner}/{fontstack}/{range}.pbf'\n * };\n * client.createStyle(style, function(err, createdStyle) {\n *   console.log(createdStyle);\n * });\n */\nMapboxStyles.prototype.createStyle = function(style, callback) {\n  return this.client({\n    path: API_STYLES_CREATE,\n    params: {\n      owner: this.owner\n    },\n    entity: style,\n    callback: callback\n  });\n};\n\n/**\n * Update a style, given the style as a JSON object.\n *\n * @param {Object} style Mapbox GL Style Spec object\n * @param {string} styleid style id\n * @param {Function} callback called with (err, createdStyle)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * var style = {\n *   'version': 8,\n *   'name': 'My Awesome Style',\n *   'metadata': {},\n *   'sources': {},\n *   'layers': [],\n *   'glyphs': 'mapbox://fonts/{owner}/{fontstack}/{range}.pbf'\n * };\n * client.updateStyle(style, 'style-id', function(err, createdStyle) {\n *   console.log(createdStyle);\n * });\n */\nMapboxStyles.prototype.updateStyle = function(style, styleid, callback) {\n  invariant(typeof styleid === 'string', 'style id must be a string');\n  return this.client({\n    path: API_STYLES_UPDATE,\n    params: {\n      owner: this.owner,\n      styleid: styleid\n    },\n    entity: style,\n    method: 'patch',\n    callback: callback\n  });\n};\n\n/**\n * Deletes a particular style.\n *\n * @param {string} styleid the id for an existing style\n * @param {Function} callback called with (err)\n * @returns {Promise} a promise with the response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.deleteStyle('style-id', function(err) {\n *   if (!err) console.log('deleted!');\n * });\n */\nMapboxStyles.prototype.deleteStyle = function(styleid, callback) {\n  invariant(typeof styleid === 'string', 'styleid must be a string');\n\n  return this.client({\n    path: API_STYLES_DELETE,\n    params: {\n      owner: this.owner,\n      styleid: styleid\n    },\n    method: 'delete',\n    callback: callback\n  });\n};\n\n/**\n * Reads a particular style.\n *\n * @param {string} styleid the id for an existing style\n * @param {Function} callback called with (err, style)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.readStyle('style-id', function(err, style) {\n *   if (!err) console.log(style);\n * });\n */\nMapboxStyles.prototype.readStyle = function(styleid, callback) {\n  invariant(typeof styleid === 'string', 'styleid must be a string');\n\n  return this.client({\n    path: API_STYLES_READ,\n    params: {\n      owner: this.owner,\n      styleid: styleid\n    },\n    callback: callback\n  });\n};\n\n/**\n * Read sprite\n *\n * @param {string} styleid the id for an existing style\n * @param {Object=} options optional options\n * @param {boolean} options.retina whether the sprite JSON should be for a\n * retina sprite.\n * @param {Function} callback called with (err)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.readSprite('style-id', {\n *   retina: true\n * }, function(err) {\n *   if (!err) console.log('deleted!');\n * });\n */\nMapboxStyles.prototype.readSprite = function(styleid, options, callback) {\n  invariant(typeof styleid === 'string', 'styleid must be a string');\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  var retina = '';\n  if (options.retina) {\n    invariant(typeof options.retina === 'boolean',\n      'retina option must be a boolean value');\n    if (options.retina) {\n      retina = '@2x';\n    }\n  }\n\n  var format = 'json';\n  if (options.format) {\n    invariant(options.format === 'json' ||\n      options.format === 'png',\n      'format parameter must be either json or png');\n    format = options.format;\n  }\n\n  return this.client({\n    path: API_STYLES_SPRITE,\n    params: {\n      owner: this.owner,\n      retina: retina,\n      format: format,\n      styleid: styleid\n    },\n    callback: callback\n  });\n};\n\n/**\n * Get font glyph ranges\n *\n * @param {string} font or fonts\n * @param {number} start character code of starting glyph\n * @param {number} end character code of last glyph. typically the same\n * as start + 255\n * @param {Function} callback called with (err)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.readFontGlyphRanges('Arial Unicode', 0, 255, function(err, ranges) {\n *   if (!err) console.log(ranges);\n * });\n */\nMapboxStyles.prototype.readFontGlyphRanges = function(font, start, end, callback) {\n  invariant(typeof font === 'string', 'font must be a string');\n  invariant(typeof start === 'number', 'start must be a number');\n  invariant(typeof end === 'number', 'end must be a number');\n\n  return this.client({\n    path: API_STYLES_FONT_GLYPH_RANGES,\n    params: {\n      owner: this.owner,\n      font: font,\n      start: start,\n      end: end\n    },\n    callback: callback\n  });\n};\n\n/**\n * Add an icon to a sprite.\n *\n * @param {string} styleid the id for an existing style\n * @param {string} iconName icon's name\n * @param {Buffer} icon icon content as a buffer\n * @param {Function} callback called with (err)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var fs = require('fs');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.addIcon('style-id', 'icon-name', fs.readFileSync('icon.png'), function(err) {\n *   if (!err) console.log('added icon!');\n * });\n */\nMapboxStyles.prototype.addIcon = function(styleid, iconName, icon, callback) {\n  invariant(typeof styleid === 'string', 'style must be a string');\n  invariant(typeof iconName === 'string', 'icon name must be a string');\n  invariant(Buffer.isBuffer(icon), 'icon must be a Buffer');\n\n  return this.client({\n    path: API_STYLES_SPRITE_ICON,\n    params: {\n      owner: this.owner,\n      styleid: styleid,\n      iconName: iconName\n    },\n    headers: {\n      'Content-Type': 'text/plain'\n    },\n    entity: icon,\n    method: 'put',\n    callback: callback\n  });\n};\n\n/**\n * Delete an icon from a sprite.\n *\n * @param {string} styleid the id for an existing style\n * @param {string} iconName icon's name\n * @param {Function} callback called with (err)\n * @returns {Promise} response\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * client.deleteIcon('style-id', 'icon-name', function(err) {\n *   if (!err) console.log('deleted icon!');\n * });\n */\nMapboxStyles.prototype.deleteIcon = function(styleid, iconName, callback) {\n  invariant(typeof styleid === 'string', 'style must be a string');\n  invariant(typeof iconName === 'string', 'icon name must be a string');\n\n  return this.client({\n    path: API_STYLES_SPRITE_ICON,\n    params: {\n      owner: this.owner,\n      styleid: styleid,\n      iconName: iconName\n    },\n    method: 'delete',\n    callback: callback\n  });\n};\n\n/**\n * Embed a style.\n *\n * @param {string} styleid the id for an existing style\n * @param {Object} options optional params\n * @param {boolean} [options.title=false] If true, shows a title box in upper right\n * corner with map title and owner\n * @param {boolean} [options.zoomwheel=true] Disables zooming with mouse scroll wheel\n * @returns {string} URL of style embed page\n * @example\n * var MapboxClient = require('mapbox');\n * var client = new MapboxClient('ACCESSTOKEN');\n * var url = client.embedStyle('style-id');\n */\nMapboxStyles.prototype.embedStyle = function(styleid, options) {\n  invariant(typeof styleid === 'string', 'style must be a string');\n\n  var params = {\n    styleid: styleid,\n    access_token: this.accessToken,\n    owner: this.owner,\n    title: false,\n    zoomwheel: true\n  };\n\n  if (options) {\n    if (options.title !== undefined) {\n      invariant(typeof options.title === 'boolean', 'title must be a boolean');\n      params.title = options.title;\n    }\n    if (options.zoomwheel !== undefined) {\n      invariant(typeof options.zoomwheel === 'boolean', 'zoomwheel must be a boolean');\n      params.zoomwheel = options.zoomwheel;\n    }\n  }\n\n  return this.endpoint + uriTemplate.expand(API_STYLES_EMBED, params);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}