{"ast":null,"code":"import _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { NodeWorker } from '../node/worker_threads';\nimport { isBrowser } from '../env-utils/globals';\nimport { assert } from '../env-utils/assert';\nimport { getLoadableWorkerURL } from '../worker-utils/get-loadable-worker-url';\nimport { getTransferList } from '../worker-utils/get-transfer-list';\nvar NOOP = function NOOP() {};\nvar WorkerThread = /*#__PURE__*/function () {\n  function WorkerThread(props) {\n    _classCallCheck(this, WorkerThread);\n    _defineProperty(this, \"name\", void 0);\n    _defineProperty(this, \"source\", void 0);\n    _defineProperty(this, \"url\", void 0);\n    _defineProperty(this, \"terminated\", false);\n    _defineProperty(this, \"worker\", void 0);\n    _defineProperty(this, \"onMessage\", void 0);\n    _defineProperty(this, \"onError\", void 0);\n    _defineProperty(this, \"_loadableURL\", '');\n    var name = props.name,\n      source = props.source,\n      url = props.url;\n    assert(source || url);\n    this.name = name;\n    this.source = source;\n    this.url = url;\n    this.onMessage = NOOP;\n    this.onError = function (error) {\n      return console.log(error);\n    };\n    this.worker = isBrowser ? this._createBrowserWorker() : this._createNodeWorker();\n  }\n  _createClass(WorkerThread, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this.onMessage = NOOP;\n      this.onError = NOOP;\n      this.worker.terminate();\n      this.terminated = true;\n    }\n  }, {\n    key: \"isRunning\",\n    get: function get() {\n      return Boolean(this.onMessage);\n    }\n  }, {\n    key: \"postMessage\",\n    value: function postMessage(data, transferList) {\n      transferList = transferList || getTransferList(data);\n      this.worker.postMessage(data, transferList);\n    }\n  }, {\n    key: \"_getErrorFromErrorEvent\",\n    value: function _getErrorFromErrorEvent(event) {\n      var message = 'Failed to load ';\n      message += \"worker \".concat(this.name, \" from \").concat(this.url, \". \");\n      if (event.message) {\n        message += \"\".concat(event.message, \" in \");\n      }\n      if (event.lineno) {\n        message += \":\".concat(event.lineno, \":\").concat(event.colno);\n      }\n      return new Error(message);\n    }\n  }, {\n    key: \"_createBrowserWorker\",\n    value: function _createBrowserWorker() {\n      var _this = this;\n      this._loadableURL = getLoadableWorkerURL({\n        source: this.source,\n        url: this.url\n      });\n      var worker = new Worker(this._loadableURL, {\n        name: this.name\n      });\n      worker.onmessage = function (event) {\n        if (!event.data) {\n          _this.onError(new Error('No data received'));\n        } else {\n          _this.onMessage(event.data);\n        }\n      };\n      worker.onerror = function (error) {\n        _this.onError(_this._getErrorFromErrorEvent(error));\n        _this.terminated = true;\n      };\n      worker.onmessageerror = function (event) {\n        return console.error(event);\n      };\n      return worker;\n    }\n  }, {\n    key: \"_createNodeWorker\",\n    value: function _createNodeWorker() {\n      var _this2 = this;\n      var worker;\n      if (this.url) {\n        var absolute = this.url.includes(':/') || this.url.startsWith('/');\n        var url = absolute ? this.url : \"./\".concat(this.url);\n        worker = new NodeWorker(url, {\n          eval: false\n        });\n      } else if (this.source) {\n        worker = new NodeWorker(this.source, {\n          eval: true\n        });\n      } else {\n        throw new Error('no worker');\n      }\n      worker.on('message', function (data) {\n        _this2.onMessage(data);\n      });\n      worker.on('error', function (error) {\n        _this2.onError(error);\n      });\n      worker.on('exit', function (code) {});\n      return worker;\n    }\n  }], [{\n    key: \"isSupported\",\n    value: function isSupported() {\n      return typeof Worker !== 'undefined' && isBrowser || typeof NodeWorker !== 'undefined' && !isBrowser;\n    }\n  }]);\n  return WorkerThread;\n}();\nexport { WorkerThread as default };","map":{"version":3,"names":["NodeWorker","isBrowser","assert","getLoadableWorkerURL","getTransferList","NOOP","WorkerThread","props","_classCallCheck","_defineProperty","name","source","url","onMessage","onError","error","console","log","worker","_createBrowserWorker","_createNodeWorker","_createClass","key","value","destroy","terminate","terminated","get","Boolean","postMessage","data","transferList","_getErrorFromErrorEvent","event","message","concat","lineno","colno","Error","_this","_loadableURL","Worker","onmessage","onerror","onmessageerror","_this2","absolute","includes","startsWith","eval","on","code","isSupported","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/worker-utils/src/lib/worker-farm/worker-thread.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport {NodeWorker, NodeWorkerType} from '../node/worker_threads';\nimport {isBrowser} from '../env-utils/globals';\nimport {assert} from '../env-utils/assert';\nimport {getLoadableWorkerURL} from '../worker-utils/get-loadable-worker-url';\nimport {getTransferList} from '../worker-utils/get-transfer-list';\n\nconst NOOP = () => {};\n\nexport type WorkerThreadProps = {\n  name: string;\n  source?: string;\n  url?: string;\n};\n\n/**\n * Represents one worker thread\n */\nexport default class WorkerThread {\n  readonly name: string;\n  readonly source: string | undefined;\n  readonly url: string | undefined;\n  terminated: boolean = false;\n  worker: Worker | NodeWorkerType;\n  onMessage: (message: any) => void;\n  onError: (error: Error) => void;\n\n  private _loadableURL: string = '';\n\n  /** Checks if workers are supported on this platform */\n  static isSupported(): boolean {\n    return (\n      (typeof Worker !== 'undefined' && isBrowser) ||\n      (typeof NodeWorker !== 'undefined' && !isBrowser)\n    );\n  }\n\n  constructor(props: WorkerThreadProps) {\n    const {name, source, url} = props;\n    assert(source || url); // Either source or url must be defined\n    this.name = name;\n    this.source = source;\n    this.url = url;\n    this.onMessage = NOOP;\n    this.onError = (error) => console.log(error); // eslint-disable-line\n\n    this.worker = isBrowser ? this._createBrowserWorker() : this._createNodeWorker();\n  }\n\n  /**\n   * Terminate this worker thread\n   * @note Can free up significant memory\n   */\n  destroy(): void {\n    this.onMessage = NOOP;\n    this.onError = NOOP;\n    this.worker.terminate(); // eslint-disable-line @typescript-eslint/no-floating-promises\n    this.terminated = true;\n  }\n\n  get isRunning() {\n    return Boolean(this.onMessage);\n  }\n\n  /**\n   * Send a message to this worker thread\n   * @param data any data structure, ideally consisting mostly of transferrable objects\n   * @param transferList If not supplied, calculated automatically by traversing data\n   */\n  postMessage(data: any, transferList?: any[]): void {\n    transferList = transferList || getTransferList(data);\n    // @ts-ignore\n    this.worker.postMessage(data, transferList);\n  }\n\n  // PRIVATE\n\n  /**\n   * Generate a standard Error from an ErrorEvent\n   * @param event\n   */\n  _getErrorFromErrorEvent(event: ErrorEvent): Error {\n    // Note Error object does not have the expected fields if loading failed completely\n    // https://developer.mozilla.org/en-US/docs/Web/API/Worker#Event_handlers\n    // https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent\n    let message = 'Failed to load ';\n    message += `worker ${this.name} from ${this.url}. `;\n    if (event.message) {\n      message += `${event.message} in `;\n    }\n    // const hasFilename = event.filename && !event.filename.startsWith('blob:');\n    // message += hasFilename ? event.filename : this.source.slice(0, 100);\n    if (event.lineno) {\n      message += `:${event.lineno}:${event.colno}`;\n    }\n    return new Error(message);\n  }\n\n  /**\n   * Creates a worker thread on the browser\n   */\n  _createBrowserWorker(): Worker {\n    this._loadableURL = getLoadableWorkerURL({source: this.source, url: this.url});\n    const worker = new Worker(this._loadableURL, {name: this.name});\n\n    worker.onmessage = (event) => {\n      if (!event.data) {\n        this.onError(new Error('No data received'));\n      } else {\n        this.onMessage(event.data);\n      }\n    };\n    // This callback represents an uncaught exception in the worker thread\n    worker.onerror = (error: ErrorEvent): void => {\n      this.onError(this._getErrorFromErrorEvent(error));\n      this.terminated = true;\n    };\n    // TODO - not clear when this would be called, for now just log in case it happens\n    worker.onmessageerror = (event) => console.error(event); // eslint-disable-line\n\n    return worker;\n  }\n\n  /**\n   * Creates a worker thread in node.js\n   * @todo https://nodejs.org/api/async_hooks.html#async-resource-worker-pool\n   */\n  _createNodeWorker(): NodeWorkerType {\n    let worker: NodeWorkerType;\n    if (this.url) {\n      // Make sure relative URLs start with './'\n      const absolute = this.url.includes(':/') || this.url.startsWith('/');\n      const url = absolute ? this.url : `./${this.url}`;\n      // console.log('Starting work from', url);\n      worker = new NodeWorker(url, {eval: false});\n    } else if (this.source) {\n      worker = new NodeWorker(this.source, {eval: true});\n    } else {\n      throw new Error('no worker');\n    }\n    worker.on('message', (data) => {\n      // console.error('message', data);\n      this.onMessage(data);\n    });\n    worker.on('error', (error) => {\n      // console.error('error', error);\n      this.onError(error);\n    });\n    worker.on('exit', (code) => {\n      // console.error('exit', code);\n    });\n    return worker;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}