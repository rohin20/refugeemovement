{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _awaitAsyncGenerator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { TableBatchBuilder } from '@loaders.gl/schema';\nimport { makeLineIterator, makeNumberedLineIterator, makeTextDecoderIterator } from '@loaders.gl/loader-utils';\nexport default function parseNDJSONInBatches(_x, _x2) {\n  return _parseNDJSONInBatches.apply(this, arguments);\n}\nfunction _parseNDJSONInBatches() {\n  _parseNDJSONInBatches = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(binaryAsyncIterator, options) {\n    var textIterator, lineIterator, numberedLineIterator, schema, shape, tableBatchBuilder, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, counter, line, row, _batch, batch;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          textIterator = makeTextDecoderIterator(binaryAsyncIterator);\n          lineIterator = makeLineIterator(textIterator);\n          numberedLineIterator = makeNumberedLineIterator(lineIterator);\n          schema = null;\n          shape = 'row-table';\n          tableBatchBuilder = new TableBatchBuilder(schema, _objectSpread(_objectSpread({}, options), {}, {\n            shape: shape\n          }));\n          _iteratorAbruptCompletion = false;\n          _didIteratorError = false;\n          _context.prev = 8;\n          _iterator = _asyncIterator(numberedLineIterator);\n        case 10:\n          _context.next = 12;\n          return _awaitAsyncGenerator(_iterator.next());\n        case 12:\n          if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n            _context.next = 30;\n            break;\n          }\n          _step$value = _step.value, counter = _step$value.counter, line = _step$value.line;\n          _context.prev = 14;\n          row = JSON.parse(line);\n          tableBatchBuilder.addRow(row);\n          tableBatchBuilder.chunkComplete(line);\n          _batch = tableBatchBuilder.getFullBatch();\n          if (!_batch) {\n            _context.next = 22;\n            break;\n          }\n          _context.next = 22;\n          return _batch;\n        case 22:\n          _context.next = 27;\n          break;\n        case 24:\n          _context.prev = 24;\n          _context.t0 = _context[\"catch\"](14);\n          throw new Error(\"NDJSONLoader: failed to parse JSON on line \".concat(counter));\n        case 27:\n          _iteratorAbruptCompletion = false;\n          _context.next = 10;\n          break;\n        case 30:\n          _context.next = 36;\n          break;\n        case 32:\n          _context.prev = 32;\n          _context.t1 = _context[\"catch\"](8);\n          _didIteratorError = true;\n          _iteratorError = _context.t1;\n        case 36:\n          _context.prev = 36;\n          _context.prev = 37;\n          if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n            _context.next = 41;\n            break;\n          }\n          _context.next = 41;\n          return _awaitAsyncGenerator(_iterator.return());\n        case 41:\n          _context.prev = 41;\n          if (!_didIteratorError) {\n            _context.next = 44;\n            break;\n          }\n          throw _iteratorError;\n        case 44:\n          return _context.finish(41);\n        case 45:\n          return _context.finish(36);\n        case 46:\n          batch = tableBatchBuilder.getFinalBatch();\n          if (!batch) {\n            _context.next = 50;\n            break;\n          }\n          _context.next = 50;\n          return batch;\n        case 50:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[8, 32, 36, 46], [14, 24], [37,, 41, 45]]);\n  }));\n  return _parseNDJSONInBatches.apply(this, arguments);\n}","map":{"version":3,"names":["TableBatchBuilder","makeLineIterator","makeNumberedLineIterator","makeTextDecoderIterator","parseNDJSONInBatches","_x","_x2","_parseNDJSONInBatches","apply","arguments","_wrapAsyncGenerator","_regeneratorRuntime","mark","_callee","binaryAsyncIterator","options","textIterator","lineIterator","numberedLineIterator","schema","shape","tableBatchBuilder","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","_step$value","counter","line","row","_batch","batch","wrap","_callee$","_context","prev","next","_objectSpread","_asyncIterator","_awaitAsyncGenerator","sent","done","value","JSON","parse","addRow","chunkComplete","getFullBatch","t0","Error","concat","t1","return","finish","getFinalBatch","stop"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/processors/node_modules/@loaders.gl/json/src/lib/parse-ndjson-in-batches.ts"],"sourcesContent":["import type {Batch} from '@loaders.gl/schema';\nimport {TableBatchBuilder} from '@loaders.gl/schema';\nimport {\n  LoaderOptions,\n  makeLineIterator,\n  makeNumberedLineIterator,\n  makeTextDecoderIterator\n} from '@loaders.gl/loader-utils';\n\nexport default async function* parseNDJSONInBatches(\n  binaryAsyncIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>,\n  options?: LoaderOptions\n): AsyncIterable<Batch> {\n  const textIterator = makeTextDecoderIterator(binaryAsyncIterator);\n  const lineIterator = makeLineIterator(textIterator);\n  const numberedLineIterator = makeNumberedLineIterator(lineIterator);\n\n  const schema = null;\n  const shape = 'row-table';\n  // @ts-ignore\n  const tableBatchBuilder = new TableBatchBuilder(schema, {\n    ...options,\n    shape\n  });\n\n  for await (const {counter, line} of numberedLineIterator) {\n    try {\n      const row = JSON.parse(line);\n      tableBatchBuilder.addRow(row);\n      tableBatchBuilder.chunkComplete(line);\n      const batch = tableBatchBuilder.getFullBatch();\n      if (batch) {\n        yield batch;\n      }\n    } catch (error) {\n      throw new Error(`NDJSONLoader: failed to parse JSON on line ${counter}`);\n    }\n  }\n\n  const batch = tableBatchBuilder.getFinalBatch();\n  if (batch) {\n    yield batch;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}