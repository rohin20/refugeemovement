{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = LayerConfiguratorFactory;\nexports.ChannelByValueSelectorFactory = ChannelByValueSelectorFactory;\nexports.AggregationTypeSelector = exports.AggregationScaleSelector = exports.LayerColorRangeSelector = exports.ArcLayerColorSelector = exports.LayerColorSelector = exports.getLayerChannelConfigProps = exports.getVisConfiguratorProps = exports.getLayerConfiguratorProps = exports.getLayerDataset = exports.getLayerFields = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _taggedTemplateLiteral2 = _interopRequireDefault(require(\"@babel/runtime/helpers/taggedTemplateLiteral\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _styledComponents = _interopRequireDefault(require(\"styled-components\"));\nvar _localization = require(\"@kepler.gl/localization\");\nvar _styledComponents2 = require(\"../../common/styled-components\");\nvar _itemSelector = _interopRequireDefault(require(\"../../common/item-selector/item-selector\"));\nvar _visConfigByFieldSelector = _interopRequireDefault(require(\"./vis-config-by-field-selector\"));\nvar _layerColumnConfig = _interopRequireDefault(require(\"./layer-column-config\"));\nvar _layerTypeSelector = _interopRequireDefault(require(\"./layer-type-selector\"));\nvar _dimensionScaleSelector = _interopRequireDefault(require(\"./dimension-scale-selector\"));\nvar _colorSelector = _interopRequireDefault(require(\"./color-selector\"));\nvar _sourceDataSelector = _interopRequireDefault(require(\"../common/source-data-selector\"));\nvar _visConfigSwitch = _interopRequireDefault(require(\"./vis-config-switch\"));\nvar _visConfigSlider = _interopRequireDefault(require(\"./vis-config-slider\"));\nvar _layerConfigGroup = _interopRequireWildcard(require(\"./layer-config-group\"));\nvar _textLabelPanel = _interopRequireDefault(require(\"./text-label-panel\"));\nvar _howToButton = _interopRequireDefault(require(\"./how-to-button\"));\nvar _utils = require(\"@kepler.gl/utils\");\nvar _constants = require(\"@kepler.gl/constants\");\nvar _templateObject, _templateObject2;\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar StyledLayerConfigurator = _styledComponents[\"default\"].div.attrs({\n  className: 'layer-panel__config'\n})(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2[\"default\"])([\"\\n  position: relative;\\n  margin-top: \", \";\\n  padding: \", \";\\n  border-left: \", \" dashed\\n    \", \";\\n\"])), function (props) {\n  return props.theme.layerConfiguratorMargin;\n}, function (props) {\n  return props.theme.layerConfiguratorPadding;\n}, function (props) {\n  return props.theme.layerConfiguratorBorder;\n}, function (props) {\n  return props.theme.layerConfiguratorBorderColor;\n});\nvar StyledLayerVisualConfigurator = _styledComponents[\"default\"].div.attrs({\n  className: 'layer-panel__config__visualC-config'\n})(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2[\"default\"])([\"\\n  margin-top: 12px;\\n\"])));\nvar getLayerFields = function getLayerFields(datasets, layer) {\n  var _layer$config;\n  return (_layer$config = layer.config) !== null && _layer$config !== void 0 && _layer$config.dataId && datasets[layer.config.dataId] ? datasets[layer.config.dataId].fields : [];\n};\nexports.getLayerFields = getLayerFields;\nvar getLayerDataset = function getLayerDataset(datasets, layer) {\n  var _layer$config2;\n  return (_layer$config2 = layer.config) !== null && _layer$config2 !== void 0 && _layer$config2.dataId && datasets[layer.config.dataId] ? datasets[layer.config.dataId] : null;\n};\nexports.getLayerDataset = getLayerDataset;\nvar getLayerConfiguratorProps = function getLayerConfiguratorProps(props) {\n  return {\n    layer: props.layer,\n    fields: getLayerFields(props.datasets, props.layer),\n    onChange: props.updateLayerConfig,\n    setColorUI: props.updateLayerColorUI\n  };\n};\nexports.getLayerConfiguratorProps = getLayerConfiguratorProps;\nvar getVisConfiguratorProps = function getVisConfiguratorProps(props) {\n  return {\n    layer: props.layer,\n    fields: getLayerFields(props.datasets, props.layer),\n    onChange: props.updateLayerVisConfig,\n    setColorUI: props.updateLayerColorUI\n  };\n};\nexports.getVisConfiguratorProps = getVisConfiguratorProps;\nvar getLayerChannelConfigProps = function getLayerChannelConfigProps(props) {\n  return {\n    layer: props.layer,\n    fields: getLayerFields(props.datasets, props.layer),\n    onChange: props.updateLayerVisualChannelConfig\n  };\n};\nexports.getLayerChannelConfigProps = getLayerChannelConfigProps;\nLayerConfiguratorFactory.deps = [_sourceDataSelector[\"default\"], _visConfigSlider[\"default\"], _textLabelPanel[\"default\"], _layerConfigGroup[\"default\"], ChannelByValueSelectorFactory, _layerColumnConfig[\"default\"], _layerTypeSelector[\"default\"], _visConfigSwitch[\"default\"]];\nfunction LayerConfiguratorFactory(SourceDataSelector, VisConfigSlider, TextLabelPanel, LayerConfigGroup, ChannelByValueSelector, LayerColumnConfig, LayerTypeSelector, VisConfigSwitch) {\n  var LayerConfigurator = /*#__PURE__*/function (_Component) {\n    (0, _inherits2[\"default\"])(LayerConfigurator, _Component);\n    var _super = _createSuper(LayerConfigurator);\n    function LayerConfigurator() {\n      (0, _classCallCheck2[\"default\"])(this, LayerConfigurator);\n      return _super.apply(this, arguments);\n    }\n    (0, _createClass2[\"default\"])(LayerConfigurator, [{\n      key: \"_renderPointLayerConfig\",\n      value: function _renderPointLayerConfig(props) {\n        return this._renderScatterplotLayerConfig(props);\n      }\n    }, {\n      key: \"_renderIconLayerConfig\",\n      value: function _renderIconLayerConfig(props) {\n        return this._renderScatterplotLayerConfig(props);\n      }\n    }, {\n      key: \"_renderScatterplotLayerConfig\",\n      value: function _renderScatterplotLayerConfig(_ref) {\n        var layer = _ref.layer,\n          visConfiguratorProps = _ref.visConfiguratorProps,\n          layerChannelConfigProps = _ref.layerChannelConfigProps,\n          layerConfiguratorProps = _ref.layerConfiguratorProps;\n        return /*#__PURE__*/_react[\"default\"].createElement(StyledLayerVisualConfigurator, null, /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, (0, _extends2[\"default\"])({}, layer.visConfigSettings.filled || {\n          label: 'layer.color'\n        }, visConfiguratorProps, {\n          collapsible: true\n        }), layer.config.colorField ? /*#__PURE__*/_react[\"default\"].createElement(LayerColorRangeSelector, visConfiguratorProps) : /*#__PURE__*/_react[\"default\"].createElement(LayerColorSelector, layerConfiguratorProps), /*#__PURE__*/_react[\"default\"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react[\"default\"].createElement(ChannelByValueSelector, (0, _extends2[\"default\"])({\n          channel: layer.visualChannels.color\n        }, layerChannelConfigProps)), /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)))), layer.type === _constants.LAYER_TYPES.point ? /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, (0, _extends2[\"default\"])({}, layer.visConfigSettings.outline, visConfiguratorProps, {\n          collapsible: true\n        }), layer.config.strokeColorField ? /*#__PURE__*/_react[\"default\"].createElement(LayerColorRangeSelector, (0, _extends2[\"default\"])({}, visConfiguratorProps, {\n          property: \"strokeColorRange\"\n        })) : /*#__PURE__*/_react[\"default\"].createElement(LayerColorSelector, (0, _extends2[\"default\"])({}, visConfiguratorProps, {\n          selectedColor: layer.config.visConfig.strokeColor,\n          property: \"strokeColor\"\n        })), /*#__PURE__*/_react[\"default\"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react[\"default\"].createElement(ChannelByValueSelector, (0, _extends2[\"default\"])({\n          channel: layer.visualChannels.strokeColor\n        }, layerChannelConfigProps)), /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.thickness, visConfiguratorProps, {\n          disabled: !layer.config.visConfig.outline\n        })))) : null, /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, {\n          label: 'layer.radius',\n          collapsible: true\n        }, !layer.config.sizeField ? /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.radius, visConfiguratorProps, {\n          label: false,\n          disabled: Boolean(layer.config.sizeField)\n        })) : /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.radiusRange, visConfiguratorProps, {\n          label: false,\n          disabled: !layer.config.sizeField || layer.config.visConfig.fixedRadius\n        })), /*#__PURE__*/_react[\"default\"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react[\"default\"].createElement(ChannelByValueSelector, (0, _extends2[\"default\"])({\n          channel: layer.visualChannels.size\n        }, layerChannelConfigProps)), layer.config.sizeField ? /*#__PURE__*/_react[\"default\"].createElement(VisConfigSwitch, (0, _extends2[\"default\"])({}, layer.visConfigSettings.fixedRadius, visConfiguratorProps)) : null)), /*#__PURE__*/_react[\"default\"].createElement(TextLabelPanel, {\n          fields: visConfiguratorProps.fields,\n          updateLayerTextLabel: this.props.updateLayerTextLabel,\n          textLabel: layer.config.textLabel\n        }));\n      }\n    }, {\n      key: \"_renderClusterLayerConfig\",\n      value: function _renderClusterLayerConfig(_ref2) {\n        var layer = _ref2.layer,\n          visConfiguratorProps = _ref2.visConfiguratorProps,\n          layerConfiguratorProps = _ref2.layerConfiguratorProps,\n          layerChannelConfigProps = _ref2.layerChannelConfigProps;\n        return /*#__PURE__*/_react[\"default\"].createElement(StyledLayerVisualConfigurator, null, /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, {\n          label: 'layer.color',\n          collapsible: true\n        }, /*#__PURE__*/_react[\"default\"].createElement(LayerColorRangeSelector, visConfiguratorProps), /*#__PURE__*/_react[\"default\"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react[\"default\"].createElement(AggregationScaleSelector, (0, _extends2[\"default\"])({}, layerConfiguratorProps, {\n          channel: layer.visualChannels.color\n        })), /*#__PURE__*/_react[\"default\"].createElement(ChannelByValueSelector, (0, _extends2[\"default\"])({\n          channel: layer.visualChannels.color\n        }, layerChannelConfigProps)), layer.visConfigSettings.colorAggregation.condition(layer.config) ? /*#__PURE__*/_react[\"default\"].createElement(AggregationTypeSelector, (0, _extends2[\"default\"])({}, layer.visConfigSettings.colorAggregation, layerChannelConfigProps, {\n          channel: layer.visualChannels.color\n        })) : null, /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)))), /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, {\n          label: 'layer.radius',\n          collapsible: true\n        }, /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.clusterRadius, visConfiguratorProps)), /*#__PURE__*/_react[\"default\"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.radiusRange, visConfiguratorProps)))));\n      }\n    }, {\n      key: \"_renderHeatmapLayerConfig\",\n      value: function _renderHeatmapLayerConfig(_ref3) {\n        var layer = _ref3.layer,\n          visConfiguratorProps = _ref3.visConfiguratorProps,\n          layerConfiguratorProps = _ref3.layerConfiguratorProps,\n          layerChannelConfigProps = _ref3.layerChannelConfigProps;\n        return /*#__PURE__*/_react[\"default\"].createElement(StyledLayerVisualConfigurator, null, /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, {\n          label: 'layer.color',\n          collapsible: true\n        }, /*#__PURE__*/_react[\"default\"].createElement(LayerColorRangeSelector, visConfiguratorProps), /*#__PURE__*/_react[\"default\"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)))), /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, {\n          label: 'layer.radius'\n        }, /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.radius, visConfiguratorProps, {\n          label: false\n        }))), /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, {\n          label: 'layer.weight'\n        }, /*#__PURE__*/_react[\"default\"].createElement(ChannelByValueSelector, (0, _extends2[\"default\"])({\n          channel: layer.visualChannels.weight\n        }, layerChannelConfigProps))));\n      }\n    }, {\n      key: \"_renderGridLayerConfig\",\n      value: function _renderGridLayerConfig(props) {\n        return this._renderAggregationLayerConfig(props);\n      }\n    }, {\n      key: \"_renderHexagonLayerConfig\",\n      value: function _renderHexagonLayerConfig(props) {\n        return this._renderAggregationLayerConfig(props);\n      }\n    }, {\n      key: \"_renderAggregationLayerConfig\",\n      value: function _renderAggregationLayerConfig(_ref4) {\n        var layer = _ref4.layer,\n          visConfiguratorProps = _ref4.visConfiguratorProps,\n          layerConfiguratorProps = _ref4.layerConfiguratorProps,\n          layerChannelConfigProps = _ref4.layerChannelConfigProps;\n        var config = layer.config;\n        var enable3d = config.visConfig.enable3d;\n        var elevationByDescription = 'layer.elevationByDescription';\n        var colorByDescription = 'layer.colorByDescription';\n        return /*#__PURE__*/_react[\"default\"].createElement(StyledLayerVisualConfigurator, null, /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, {\n          label: 'layer.color',\n          collapsible: true\n        }, /*#__PURE__*/_react[\"default\"].createElement(LayerColorRangeSelector, visConfiguratorProps), /*#__PURE__*/_react[\"default\"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react[\"default\"].createElement(AggregationScaleSelector, (0, _extends2[\"default\"])({}, layerConfiguratorProps, {\n          channel: layer.visualChannels.color\n        })), /*#__PURE__*/_react[\"default\"].createElement(ChannelByValueSelector, (0, _extends2[\"default\"])({\n          channel: layer.visualChannels.color\n        }, layerChannelConfigProps)), layer.visConfigSettings.colorAggregation.condition(layer.config) ? /*#__PURE__*/_react[\"default\"].createElement(AggregationTypeSelector, (0, _extends2[\"default\"])({}, layer.visConfigSettings.colorAggregation, layerChannelConfigProps, {\n          description: colorByDescription,\n          channel: layer.visualChannels.color\n        })) : null, layer.visConfigSettings.percentile && layer.visConfigSettings.percentile.condition(layer.config) ? /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.percentile, visConfiguratorProps)) : null, /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)))), /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, {\n          label: 'layer.radius',\n          collapsible: true\n        }, /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.worldUnitSize, visConfiguratorProps)), /*#__PURE__*/_react[\"default\"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.coverage, visConfiguratorProps)))), layer.visConfigSettings.enable3d ? /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, (0, _extends2[\"default\"])({}, layer.visConfigSettings.enable3d, visConfiguratorProps, {\n          collapsible: true\n        }), /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.elevationScale, visConfiguratorProps, {\n          label: \"layerVisConfigs.heightMultiplier\"\n        })), /*#__PURE__*/_react[\"default\"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react[\"default\"].createElement(ChannelByValueSelector, (0, _extends2[\"default\"])({}, layerChannelConfigProps, {\n          channel: layer.visualChannels.size,\n          description: elevationByDescription,\n          disabled: !enable3d\n        })), /*#__PURE__*/_react[\"default\"].createElement(AggregationScaleSelector, (0, _extends2[\"default\"])({}, layerConfiguratorProps, {\n          channel: layer.visualChannels.size\n        })), /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.sizeRange, visConfiguratorProps, {\n          label: \"layerVisConfigs.heightRange\"\n        })), /*#__PURE__*/_react[\"default\"].createElement(VisConfigSwitch, (0, _extends2[\"default\"])({}, layer.visConfigSettings.enableElevationZoomFactor, visConfiguratorProps, {\n          label: \"layerVisConfigs.enableHeightZoomFactor\"\n        })), layer.visConfigSettings.sizeAggregation.condition(layer.config) ? /*#__PURE__*/_react[\"default\"].createElement(AggregationTypeSelector, (0, _extends2[\"default\"])({}, layer.visConfigSettings.sizeAggregation, layerChannelConfigProps, {\n          channel: layer.visualChannels.size\n        })) : null, layer.visConfigSettings.elevationPercentile.condition(layer.config) ? /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.elevationPercentile, visConfiguratorProps)) : null)) : null);\n      } // TODO: Shan move these into layer class\n    }, {\n      key: \"_renderHexagonIdLayerConfig\",\n      value: function _renderHexagonIdLayerConfig(_ref5) {\n        var layer = _ref5.layer,\n          visConfiguratorProps = _ref5.visConfiguratorProps,\n          layerConfiguratorProps = _ref5.layerConfiguratorProps,\n          layerChannelConfigProps = _ref5.layerChannelConfigProps;\n        return /*#__PURE__*/_react[\"default\"].createElement(StyledLayerVisualConfigurator, null, /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, {\n          label: 'layer.color',\n          collapsible: true\n        }, layer.config.colorField ? /*#__PURE__*/_react[\"default\"].createElement(LayerColorRangeSelector, visConfiguratorProps) : /*#__PURE__*/_react[\"default\"].createElement(LayerColorSelector, layerConfiguratorProps), /*#__PURE__*/_react[\"default\"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react[\"default\"].createElement(ChannelByValueSelector, (0, _extends2[\"default\"])({\n          channel: layer.visualChannels.color\n        }, layerChannelConfigProps)), /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)))), /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, {\n          label: 'layer.coverage',\n          collapsible: true\n        }, !layer.config.coverageField ? /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.coverage, visConfiguratorProps, {\n          label: false\n        })) : /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.coverageRange, visConfiguratorProps, {\n          label: false\n        })), /*#__PURE__*/_react[\"default\"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react[\"default\"].createElement(ChannelByValueSelector, (0, _extends2[\"default\"])({\n          channel: layer.visualChannels.coverage\n        }, layerChannelConfigProps)))), /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, (0, _extends2[\"default\"])({}, layer.visConfigSettings.enable3d, visConfiguratorProps, {\n          collapsible: true\n        }), /*#__PURE__*/_react[\"default\"].createElement(ChannelByValueSelector, (0, _extends2[\"default\"])({\n          channel: layer.visualChannels.size\n        }, layerChannelConfigProps)), /*#__PURE__*/_react[\"default\"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.elevationScale, visConfiguratorProps)), /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.sizeRange, visConfiguratorProps, {\n          label: \"layerVisConfigs.heightRange\"\n        })), /*#__PURE__*/_react[\"default\"].createElement(VisConfigSwitch, (0, _extends2[\"default\"])({}, layer.visConfigSettings.enableElevationZoomFactor, visConfiguratorProps)))));\n      }\n    }, {\n      key: \"_renderArcLayerConfig\",\n      value: function _renderArcLayerConfig(args) {\n        return this._renderLineLayerConfig(args);\n      }\n    }, {\n      key: \"_renderLineLayerConfig\",\n      value: function _renderLineLayerConfig(_ref6) {\n        var layer = _ref6.layer,\n          visConfiguratorProps = _ref6.visConfiguratorProps,\n          layerConfiguratorProps = _ref6.layerConfiguratorProps,\n          layerChannelConfigProps = _ref6.layerChannelConfigProps;\n        return /*#__PURE__*/_react[\"default\"].createElement(StyledLayerVisualConfigurator, null, /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, {\n          label: 'layer.color',\n          collapsible: true\n        }, layer.config.colorField ? /*#__PURE__*/_react[\"default\"].createElement(LayerColorRangeSelector, visConfiguratorProps) : /*#__PURE__*/_react[\"default\"].createElement(ArcLayerColorSelector, {\n          layer: layer,\n          setColorUI: layerConfiguratorProps.setColorUI,\n          onChangeConfig: layerConfiguratorProps.onChange,\n          onChangeVisConfig: visConfiguratorProps.onChange\n        }), /*#__PURE__*/_react[\"default\"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react[\"default\"].createElement(ChannelByValueSelector, (0, _extends2[\"default\"])({\n          channel: layer.visualChannels.sourceColor\n        }, layerChannelConfigProps)), /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)))), /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, {\n          label: 'layer.stroke',\n          collapsible: true\n        }, layer.config.sizeField ? /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.sizeRange, visConfiguratorProps, {\n          disabled: !layer.config.sizeField,\n          label: false\n        })) : /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.thickness, visConfiguratorProps, {\n          label: false\n        })), /*#__PURE__*/_react[\"default\"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react[\"default\"].createElement(ChannelByValueSelector, (0, _extends2[\"default\"])({\n          channel: layer.visualChannels.size\n        }, layerChannelConfigProps)))), layer.visConfigSettings.elevationScale ? /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, {\n          label: \"layerVisConfigs.elevationScale\",\n          collapsible: true\n        }, /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.elevationScale, visConfiguratorProps))) : null);\n      }\n    }, {\n      key: \"_renderTripLayerConfig\",\n      value: function _renderTripLayerConfig(_ref7) {\n        var layer = _ref7.layer,\n          visConfiguratorProps = _ref7.visConfiguratorProps,\n          layerConfiguratorProps = _ref7.layerConfiguratorProps,\n          layerChannelConfigProps = _ref7.layerChannelConfigProps;\n        var _layer$meta$featureTy = layer.meta.featureTypes,\n          featureTypes = _layer$meta$featureTy === void 0 ? {} : _layer$meta$featureTy;\n        return /*#__PURE__*/_react[\"default\"].createElement(StyledLayerVisualConfigurator, null, /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, {\n          label: 'layer.color',\n          collapsible: true\n        }, layer.config.colorField ? /*#__PURE__*/_react[\"default\"].createElement(LayerColorRangeSelector, visConfiguratorProps) : /*#__PURE__*/_react[\"default\"].createElement(LayerColorSelector, layerConfiguratorProps), /*#__PURE__*/_react[\"default\"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react[\"default\"].createElement(ChannelByValueSelector, (0, _extends2[\"default\"])({\n          channel: layer.visualChannels.color\n        }, layerChannelConfigProps)), /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)))), /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, (0, _extends2[\"default\"])({}, visConfiguratorProps, {\n          label: \"layer.strokeWidth\",\n          collapsible: true\n        }), layer.config.sizeField ? /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.sizeRange, visConfiguratorProps, {\n          label: false\n        })) : /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.thickness, visConfiguratorProps, {\n          label: false\n        })), /*#__PURE__*/_react[\"default\"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react[\"default\"].createElement(ChannelByValueSelector, (0, _extends2[\"default\"])({\n          channel: layer.visualChannels.size\n        }, layerChannelConfigProps)))), /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, (0, _extends2[\"default\"])({}, visConfiguratorProps, featureTypes.polygon ? layer.visConfigSettings.stroked : {}, {\n          label: \"layer.trailLength\",\n          description: \"layer.trailLengthDescription\"\n        }), /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.trailLength, visConfiguratorProps, {\n          label: false\n        }))));\n      }\n    }, {\n      key: \"_renderGeojsonLayerConfig\",\n      value: function _renderGeojsonLayerConfig(_ref8) {\n        var layer = _ref8.layer,\n          visConfiguratorProps = _ref8.visConfiguratorProps,\n          layerConfiguratorProps = _ref8.layerConfiguratorProps,\n          layerChannelConfigProps = _ref8.layerChannelConfigProps;\n        var _layer$meta$featureTy2 = layer.meta.featureTypes,\n          featureTypes = _layer$meta$featureTy2 === void 0 ? {} : _layer$meta$featureTy2,\n          visConfig = layer.config.visConfig;\n        return /*#__PURE__*/_react[\"default\"].createElement(StyledLayerVisualConfigurator, null, featureTypes.polygon || featureTypes.point ? /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, (0, _extends2[\"default\"])({}, layer.visConfigSettings.filled, visConfiguratorProps, {\n          label: \"layer.fillColor\",\n          collapsible: true\n        }), layer.config.colorField ? /*#__PURE__*/_react[\"default\"].createElement(LayerColorRangeSelector, visConfiguratorProps) : /*#__PURE__*/_react[\"default\"].createElement(LayerColorSelector, layerConfiguratorProps), /*#__PURE__*/_react[\"default\"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react[\"default\"].createElement(ChannelByValueSelector, (0, _extends2[\"default\"])({\n          channel: layer.visualChannels.color\n        }, layerChannelConfigProps)), /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)))) : null, /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, (0, _extends2[\"default\"])({}, layer.visConfigSettings.stroked, visConfiguratorProps, {\n          label: \"layer.strokeColor\",\n          collapsible: true\n        }), layer.config.strokeColorField ? /*#__PURE__*/_react[\"default\"].createElement(LayerColorRangeSelector, (0, _extends2[\"default\"])({}, visConfiguratorProps, {\n          property: \"strokeColorRange\"\n        })) : /*#__PURE__*/_react[\"default\"].createElement(LayerColorSelector, (0, _extends2[\"default\"])({}, visConfiguratorProps, {\n          selectedColor: layer.config.visConfig.strokeColor,\n          property: \"strokeColor\"\n        })), /*#__PURE__*/_react[\"default\"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react[\"default\"].createElement(ChannelByValueSelector, (0, _extends2[\"default\"])({\n          channel: layer.visualChannels.strokeColor\n        }, layerChannelConfigProps)), /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.strokeOpacity, visConfiguratorProps)))), /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, (0, _extends2[\"default\"])({}, visConfiguratorProps, featureTypes.polygon ? layer.visConfigSettings.stroked : {}, {\n          label: \"layer.strokeWidth\",\n          collapsible: true\n        }), layer.config.sizeField ? /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.sizeRange, visConfiguratorProps, {\n          label: false\n        })) : /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.thickness, visConfiguratorProps, {\n          label: false\n        })), /*#__PURE__*/_react[\"default\"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react[\"default\"].createElement(ChannelByValueSelector, (0, _extends2[\"default\"])({\n          channel: layer.visualChannels.size\n        }, layerChannelConfigProps)))), featureTypes.polygon ? /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, (0, _extends2[\"default\"])({}, visConfiguratorProps, layer.visConfigSettings.enable3d, {\n          disabled: !visConfig.filled,\n          collapsible: true\n        }), /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.elevationScale, visConfiguratorProps, {\n          label: false\n        })), /*#__PURE__*/_react[\"default\"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react[\"default\"].createElement(ChannelByValueSelector, (0, _extends2[\"default\"])({\n          channel: layer.visualChannels.height\n        }, layerChannelConfigProps)), /*#__PURE__*/_react[\"default\"].createElement(VisConfigSwitch, (0, _extends2[\"default\"])({}, layer.visConfigSettings.enableElevationZoomFactor, visConfiguratorProps)), /*#__PURE__*/_react[\"default\"].createElement(VisConfigSwitch, (0, _extends2[\"default\"])({}, visConfiguratorProps, layer.visConfigSettings.wireframe)))) : null, featureTypes.point ? /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, {\n          label: 'layer.radius',\n          collapsible: true\n        }, !layer.config.radiusField ? /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.radius, visConfiguratorProps, {\n          label: false,\n          disabled: Boolean(layer.config.radiusField)\n        })) : /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.radiusRange, visConfiguratorProps, {\n          label: false,\n          disabled: !layer.config.radiusField\n        })), /*#__PURE__*/_react[\"default\"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react[\"default\"].createElement(ChannelByValueSelector, (0, _extends2[\"default\"])({\n          channel: layer.visualChannels.radius\n        }, layerChannelConfigProps)))) : null);\n      }\n    }, {\n      key: \"_render3DLayerConfig\",\n      value: function _render3DLayerConfig(_ref9) {\n        var layer = _ref9.layer,\n          visConfiguratorProps = _ref9.visConfiguratorProps;\n        return /*#__PURE__*/_react[\"default\"].createElement(_react.Fragment, null, /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, {\n          label: 'layer.3DModel',\n          collapsible: true\n        }, /*#__PURE__*/_react[\"default\"].createElement(_styledComponents2.Input, {\n          type: \"file\",\n          accept: \".glb,.gltf\",\n          onChange: function onChange(e) {\n            if (e.target.files && e.target.files[0]) {\n              var url = URL.createObjectURL(e.target.files[0]);\n              visConfiguratorProps.onChange({\n                scenegraph: url\n              });\n            }\n          }\n        })), /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, {\n          label: 'layer.3DModelOptions',\n          collapsible: true\n        }, /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.sizeScale, visConfiguratorProps, {\n          disabled: false\n        })), /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.angleX, visConfiguratorProps, {\n          disabled: false\n        })), /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.angleY, visConfiguratorProps, {\n          disabled: false\n        })), /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.angleZ, visConfiguratorProps, {\n          disabled: false\n        }))));\n      }\n    }, {\n      key: \"_renderS2LayerConfig\",\n      value: function _renderS2LayerConfig(_ref10) {\n        var layer = _ref10.layer,\n          visConfiguratorProps = _ref10.visConfiguratorProps,\n          layerConfiguratorProps = _ref10.layerConfiguratorProps,\n          layerChannelConfigProps = _ref10.layerChannelConfigProps;\n        var visConfig = layer.config.visConfig;\n        return /*#__PURE__*/_react[\"default\"].createElement(StyledLayerVisualConfigurator, null, /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, (0, _extends2[\"default\"])({}, layer.visConfigSettings.filled, visConfiguratorProps, {\n          label: \"layer.fillColor\",\n          collapsible: true\n        }), layer.config.colorField ? /*#__PURE__*/_react[\"default\"].createElement(LayerColorRangeSelector, visConfiguratorProps) : /*#__PURE__*/_react[\"default\"].createElement(LayerColorSelector, layerConfiguratorProps), /*#__PURE__*/_react[\"default\"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react[\"default\"].createElement(ChannelByValueSelector, (0, _extends2[\"default\"])({\n          channel: layer.visualChannels.color\n        }, layerChannelConfigProps)), /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.opacity, visConfiguratorProps)))), /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, (0, _extends2[\"default\"])({}, layer.visConfigSettings.stroked, visConfiguratorProps, {\n          label: \"layer.strokeColor\",\n          collapsible: true\n        }), layer.config.strokeColorField ? /*#__PURE__*/_react[\"default\"].createElement(LayerColorRangeSelector, (0, _extends2[\"default\"])({}, visConfiguratorProps, {\n          property: \"strokeColorRange\"\n        })) : /*#__PURE__*/_react[\"default\"].createElement(LayerColorSelector, (0, _extends2[\"default\"])({}, visConfiguratorProps, {\n          selectedColor: layer.config.visConfig.strokeColor,\n          property: \"strokeColor\"\n        })), /*#__PURE__*/_react[\"default\"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react[\"default\"].createElement(ChannelByValueSelector, (0, _extends2[\"default\"])({\n          channel: layer.visualChannels.strokeColor\n        }, layerChannelConfigProps)))), /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, (0, _extends2[\"default\"])({}, visConfiguratorProps, {\n          label: \"layer.strokeWidth\",\n          collapsible: true\n        }), layer.config.sizeField ? /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.sizeRange, visConfiguratorProps, {\n          label: false\n        })) : /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.thickness, visConfiguratorProps, {\n          label: false\n        })), /*#__PURE__*/_react[\"default\"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react[\"default\"].createElement(ChannelByValueSelector, (0, _extends2[\"default\"])({\n          channel: layer.visualChannels.size\n        }, layerChannelConfigProps)))), /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, (0, _extends2[\"default\"])({}, visConfiguratorProps, layer.visConfigSettings.enable3d, {\n          disabled: !visConfig.filled,\n          collapsible: true\n        }), /*#__PURE__*/_react[\"default\"].createElement(ChannelByValueSelector, (0, _extends2[\"default\"])({\n          channel: layer.visualChannels.height\n        }, layerChannelConfigProps)), /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.elevationScale, visConfiguratorProps, {\n          label: \"layerVisConfigs.elevationScale\"\n        })), /*#__PURE__*/_react[\"default\"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react[\"default\"].createElement(VisConfigSlider, (0, _extends2[\"default\"])({}, layer.visConfigSettings.heightRange, visConfiguratorProps, {\n          label: \"layerVisConfigs.heightRange\"\n        })), /*#__PURE__*/_react[\"default\"].createElement(VisConfigSwitch, (0, _extends2[\"default\"])({}, layer.visConfigSettings.enableElevationZoomFactor, visConfiguratorProps)), /*#__PURE__*/_react[\"default\"].createElement(VisConfigSwitch, (0, _extends2[\"default\"])({}, visConfiguratorProps, layer.visConfigSettings.wireframe)))));\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this = this;\n        var _this$props = this.props,\n          layer = _this$props.layer,\n          datasets = _this$props.datasets,\n          updateLayerConfig = _this$props.updateLayerConfig,\n          layerTypeOptions = _this$props.layerTypeOptions,\n          updateLayerType = _this$props.updateLayerType;\n        var _ref11 = layer.config.dataId ? datasets[layer.config.dataId] : {},\n          _ref11$fields = _ref11.fields,\n          fields = _ref11$fields === void 0 ? [] : _ref11$fields,\n          _ref11$fieldPairs = _ref11.fieldPairs,\n          fieldPairs = _ref11$fieldPairs === void 0 ? undefined : _ref11$fieldPairs;\n        var config = layer.config;\n        var visConfiguratorProps = getVisConfiguratorProps(this.props);\n        var layerConfiguratorProps = getLayerConfiguratorProps(this.props);\n        var layerChannelConfigProps = getLayerChannelConfigProps(this.props);\n        var dataset = getLayerDataset(datasets, layer);\n        var renderTemplate = layer.type && \"_render\".concat((0, _utils.capitalizeFirstLetter)(layer.type), \"LayerConfig\");\n        return /*#__PURE__*/_react[\"default\"].createElement(StyledLayerConfigurator, null, layer.layerInfoModal ? /*#__PURE__*/_react[\"default\"].createElement(_howToButton[\"default\"], {\n          onClick: function onClick() {\n            return _this.props.openModal(layer.layerInfoModal);\n          }\n        }) : null, /*#__PURE__*/_react[\"default\"].createElement(LayerConfigGroup, {\n          label: 'layer.basic',\n          collapsible: true,\n          expanded: !layer.hasAllColumns()\n        }, /*#__PURE__*/_react[\"default\"].createElement(LayerTypeSelector, {\n          selected: layer.type,\n          options: layerTypeOptions // @ts-ignore\n          ,\n\n          onSelect: updateLayerType\n        }), /*#__PURE__*/_react[\"default\"].createElement(_layerConfigGroup.ConfigGroupCollapsibleContent, null, /*#__PURE__*/_react[\"default\"].createElement(SourceDataSelector, {\n          datasets: datasets,\n          id: layer.id,\n          dataId: config.dataId // @ts-ignore\n          ,\n\n          onSelect: function onSelect(value) {\n            return updateLayerConfig({\n              dataId: value\n            });\n          }\n        }), /*#__PURE__*/_react[\"default\"].createElement(LayerColumnConfig, {\n          columnPairs: layer.columnPairs,\n          columns: layer.config.columns,\n          assignColumnPairs: layer.assignColumnPairs.bind(layer),\n          assignColumn: layer.assignColumn.bind(layer) // @ts-ignore\n          ,\n\n          columnLabels: layer.columnLabels,\n          fields: fields,\n          fieldPairs: fieldPairs,\n          updateLayerConfig: updateLayerConfig\n        }))), renderTemplate && this[renderTemplate] && this[renderTemplate]({\n          layer: layer,\n          dataset: dataset,\n          visConfiguratorProps: visConfiguratorProps,\n          layerChannelConfigProps: layerChannelConfigProps,\n          layerConfiguratorProps: layerConfiguratorProps\n        }));\n      }\n    }]);\n    return LayerConfigurator;\n  }(_react.Component);\n  return LayerConfigurator;\n}\nvar LayerColorSelector = function LayerColorSelector(_ref12) {\n  var layer = _ref12.layer,\n    onChange = _ref12.onChange,\n    selectedColor = _ref12.selectedColor,\n    _ref12$property = _ref12.property,\n    property = _ref12$property === void 0 ? 'color' : _ref12$property,\n    _setColorUI = _ref12.setColorUI;\n  return /*#__PURE__*/_react[\"default\"].createElement(_styledComponents2.SidePanelSection, null, /*#__PURE__*/_react[\"default\"].createElement(_colorSelector[\"default\"], {\n    colorSets: [{\n      selectedColor: selectedColor || layer.config.color,\n      setColor: function setColor(rgbValue) {\n        return onChange((0, _defineProperty2[\"default\"])({}, property, rgbValue));\n      }\n    }],\n    colorUI: layer.config.colorUI[property],\n    setColorUI: function setColorUI(newConfig) {\n      return _setColorUI(property, newConfig);\n    }\n  }));\n};\nexports.LayerColorSelector = LayerColorSelector;\nvar ArcLayerColorSelector = function ArcLayerColorSelector(_ref13) {\n  var layer = _ref13.layer,\n    onChangeConfig = _ref13.onChangeConfig,\n    onChangeVisConfig = _ref13.onChangeVisConfig,\n    _ref13$property = _ref13.property,\n    property = _ref13$property === void 0 ? 'color' : _ref13$property,\n    _setColorUI2 = _ref13.setColorUI;\n  return /*#__PURE__*/_react[\"default\"].createElement(_styledComponents2.SidePanelSection, null, /*#__PURE__*/_react[\"default\"].createElement(_colorSelector[\"default\"], {\n    colorSets: [{\n      selectedColor: layer.config.color,\n      setColor: function setColor(rgbValue) {\n        return onChangeConfig({\n          color: rgbValue\n        });\n      },\n      label: 'Source'\n    }, {\n      selectedColor: layer.config.visConfig.targetColor || layer.config.color,\n      setColor: function setColor(rgbValue) {\n        return onChangeVisConfig({\n          targetColor: rgbValue\n        });\n      },\n      label: 'Target'\n    }],\n    colorUI: layer.config.colorUI[property],\n    setColorUI: function setColorUI(newConfig) {\n      return _setColorUI2(property, newConfig);\n    }\n  }));\n};\nexports.ArcLayerColorSelector = ArcLayerColorSelector;\nvar LayerColorRangeSelector = function LayerColorRangeSelector(_ref14) {\n  var layer = _ref14.layer,\n    onChange = _ref14.onChange,\n    _ref14$property = _ref14.property,\n    property = _ref14$property === void 0 ? 'colorRange' : _ref14$property,\n    _setColorUI3 = _ref14.setColorUI;\n  return /*#__PURE__*/_react[\"default\"].createElement(_styledComponents2.SidePanelSection, null, /*#__PURE__*/_react[\"default\"].createElement(_colorSelector[\"default\"], {\n    colorSets: [{\n      selectedColor: layer.config.visConfig[property],\n      isRange: true,\n      setColor: function setColor(colorRange) {\n        return onChange((0, _defineProperty2[\"default\"])({}, property, colorRange));\n      }\n    }],\n    colorUI: layer.config.colorUI[property],\n    setColorUI: function setColorUI(newConfig) {\n      return _setColorUI3(property, newConfig);\n    }\n  }));\n};\nexports.LayerColorRangeSelector = LayerColorRangeSelector;\nChannelByValueSelectorFactory.deps = [_visConfigByFieldSelector[\"default\"]];\nfunction ChannelByValueSelectorFactory(VisConfigByFieldSelector) {\n  var ChannelByValueSelector = function ChannelByValueSelector(_ref15) {\n    var layer = _ref15.layer,\n      channel = _ref15.channel,\n      onChange = _ref15.onChange,\n      fields = _ref15.fields,\n      description = _ref15.description;\n    var channelScaleType = channel.channelScaleType,\n      field = channel.field,\n      key = channel.key,\n      property = channel.property,\n      scale = channel.scale,\n      defaultMeasure = channel.defaultMeasure,\n      supportedFieldTypes = channel.supportedFieldTypes;\n    var channelSupportedFieldTypes = supportedFieldTypes || _constants.CHANNEL_SCALE_SUPPORTED_FIELDS[channelScaleType];\n    var supportedFields = fields.filter(function (_ref16) {\n      var type = _ref16.type;\n      return channelSupportedFieldTypes.includes(type);\n    });\n    var scaleOptions = layer.getScaleOptions(channel.key);\n    var showScale = !layer.isAggregated && layer.config[scale] && scaleOptions.length > 1;\n    var defaultDescription = 'layerConfiguration.defaultDescription';\n    return /*#__PURE__*/_react[\"default\"].createElement(VisConfigByFieldSelector, {\n      channel: channel.key,\n      description: description || defaultDescription,\n      fields: supportedFields,\n      id: layer.id,\n      key: \"\".concat(key, \"-channel-selector\"),\n      property: property,\n      placeholder: defaultMeasure || 'placeholder.selectField',\n      scaleOptions: scaleOptions,\n      scaleType: scale ? layer.config[scale] : null,\n      selectedField: layer.config[field],\n      showScale: showScale,\n      updateField: function updateField(val) {\n        return onChange((0, _defineProperty2[\"default\"])({}, field, val), key);\n      },\n      updateScale: function updateScale(val) {\n        return onChange((0, _defineProperty2[\"default\"])({}, scale, val), key);\n      }\n    });\n  };\n  return ChannelByValueSelector;\n}\nvar AggregationScaleSelector = function AggregationScaleSelector(_ref17) {\n  var channel = _ref17.channel,\n    layer = _ref17.layer,\n    onChange = _ref17.onChange;\n  var scale = channel.scale,\n    key = channel.key;\n  var scaleOptions = layer.getScaleOptions(key);\n  return Array.isArray(scaleOptions) && scaleOptions.length > 1 ? /*#__PURE__*/_react[\"default\"].createElement(_dimensionScaleSelector[\"default\"], {\n    label: \"\".concat(key, \" Scale\"),\n    options: scaleOptions,\n    scaleType: layer.config[scale],\n    onSelect: function onSelect(val) {\n      return onChange((0, _defineProperty2[\"default\"])({}, scale, val), key);\n    }\n  }) : null;\n};\nexports.AggregationScaleSelector = AggregationScaleSelector;\nvar AggregationTypeSelector = function AggregationTypeSelector(_ref18) {\n  var channel = _ref18.channel,\n    layer = _ref18.layer,\n    _onChange6 = _ref18.onChange;\n  var field = channel.field,\n    aggregation = channel.aggregation,\n    key = channel.key;\n  var selectedField = layer.config[field];\n  var visConfig = layer.config.visConfig; // aggregation should only be selectable when field is selected\n\n  var aggregationOptions = layer.getAggregationOptions(key);\n  return /*#__PURE__*/_react[\"default\"].createElement(_styledComponents2.SidePanelSection, null, /*#__PURE__*/_react[\"default\"].createElement(_styledComponents2.PanelLabel, null, /*#__PURE__*/_react[\"default\"].createElement(_localization.FormattedMessage, {\n    id: 'layer.aggregateBy',\n    values: {\n      field: selectedField.name\n    }\n  })), /*#__PURE__*/_react[\"default\"].createElement(_itemSelector[\"default\"], {\n    selectedItems: visConfig[aggregation],\n    options: aggregationOptions,\n    multiSelect: false,\n    searchable: false,\n    onChange: function onChange(value) {\n      return _onChange6({\n        visConfig: _objectSpread(_objectSpread({}, layer.config.visConfig), {}, (0, _defineProperty2[\"default\"])({}, aggregation, value))\n      }, channel.key);\n    }\n  }));\n};\n/* eslint-enable max-params */\n\nexports.AggregationTypeSelector = AggregationTypeSelector;","map":{"version":3,"names":["exports","LayerConfiguratorFactory","AggregationTypeSelector","AggregationScaleSelector","LayerColorRangeSelector","ArcLayerColorSelector","LayerColorSelector","getLayerChannelConfigProps","getVisConfiguratorProps","getLayerConfiguratorProps","getLayerDataset","getLayerFields","_defineProperty2","_interopRequireDefault","require","_extends2","_classCallCheck2","_createClass2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_taggedTemplateLiteral2","_react","_interopRequireWildcard","_styledComponents","_localization","_styledComponents2","_itemSelector","_visConfigByFieldSelector","_layerColumnConfig","_layerTypeSelector","_layerConfigGroup","_textLabelPanel","_howToButton","_utils","_constants","_templateObject","_templateObject2","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","StyledLayerConfigurator","div","attrs","props","theme","layerConfiguratorPadding","layerConfiguratorBorder","StyledLayerVisualConfigurator","className","updateLayerConfig","datasets","layer","_layer$config","config","dataId","fields","_layer$config2","onChange","setColorUI","updateLayerColorUI","updateLayerVisConfig","updateLayerVisualChannelConfig","deps","_sourceDataSelector","_visConfigSlider","ChannelByValueSelectorFactory","_visConfigSwitch","SourceDataSelector","VisConfigSlider","TextLabelPanel","LayerConfigGroup","ChannelByValueSelector","LayerColumnConfig","LayerTypeSelector","VisConfigSwitch","LayerConfigurator","_Component","_super","value","_renderPointLayerConfig","_renderScatterplotLayerConfig","_renderIconLayerConfig","layerChannelConfigProps","_ref","visConfiguratorProps","layerConfiguratorProps","createElement","visConfigSettings","filled","label","collapsible","colorField","ConfigGroupCollapsibleContent","channel","visualChannels","color","opacity","type","LAYER_TYPES","point","outline","strokeColorField","property","selectedColor","visConfig","strokeColor","thickness","disabled","sizeField","radius","Boolean","radiusRange","fixedRadius","size","updateLayerTextLabel","textLabel","_renderClusterLayerConfig","_ref2","colorAggregation","condition","clusterRadius","_renderHeatmapLayerConfig","_ref3","weight","_renderGridLayerConfig","_renderAggregationLayerConfig","_renderHexagonLayerConfig","_ref4","enable3d","elevationByDescription","colorByDescription","description","percentile","worldUnitSize","coverage","elevationScale","sizeRange","enableElevationZoomFactor","sizeAggregation","elevationPercentile","_renderHexagonIdLayerConfig","_ref5","coverageField","coverageRange","_renderArcLayerConfig","args","_renderLineLayerConfig","_ref6","onChangeConfig","onChangeVisConfig","sourceColor","_renderTripLayerConfig","_ref7","_layer$meta$featureTy","meta","featureTypes","polygon","stroked","trailLength","_renderGeojsonLayerConfig","_ref8","_layer$meta$featureTy2","strokeOpacity","height","wireframe","radiusField","_render3DLayerConfig","_ref9","Fragment","Input","accept","e","files","url","URL","createObjectURL","scenegraph","sizeScale","angleX","angleY","angleZ","_renderS2LayerConfig","_ref10","heightRange","render","_this","_this$props","layerTypeOptions","updateLayerType","_ref11","_ref11$fields","_ref11$fieldPairs","fieldPairs","undefined","dataset","renderTemplate","concat","capitalizeFirstLetter","layerInfoModal","onClick","openModal","expanded","hasAllColumns","selected","options","onSelect","id","columns","assignColumnPairs","bind","columnLabels","Component","_ref12","_ref12$property","_setColorUI","SidePanelSection","_colorSelector","colorSets","setColor","rgbValue","colorUI","newConfig","_ref13","_ref13$property","_setColorUI2","targetColor","_ref14","_ref14$property","_setColorUI3","isRange","colorRange","scale","VisConfigByFieldSelector","_ref15","channelScaleType","field","defaultMeasure","supportedFieldTypes","channelSupportedFieldTypes","CHANNEL_SCALE_SUPPORTED_FIELDS","supportedFields","_ref16","includes","scaleOptions","getScaleOptions","showScale","isAggregated","defaultDescription","placeholder","scaleType","selectedField","updateField","val","updateScale","_ref17","Array","isArray","_dimensionScaleSelector","_ref18","_onChange6","aggregation"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/components/src/side-panel/layer-panel/layer-configurator.tsx"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable complexity */\nimport React, {Component, Fragment} from 'react';\nimport styled from 'styled-components';\nimport {FormattedMessage} from '@kepler.gl/localization';\n\nimport {Input, PanelLabel, SidePanelSection} from '../../common/styled-components';\nimport ItemSelector from '../../common/item-selector/item-selector';\n\nimport VisConfigByFieldSelectorFactory from './vis-config-by-field-selector';\nimport LayerColumnConfigFactory from './layer-column-config';\nimport LayerTypeSelectorFactory from './layer-type-selector';\nimport DimensionScaleSelector from './dimension-scale-selector';\nimport ColorSelector from './color-selector';\nimport SourceDataSelectorFactory from '../common/source-data-selector';\nimport VisConfigSwitchFactory from './vis-config-switch';\nimport VisConfigSliderFactory from './vis-config-slider';\nimport LayerConfigGroupFactory, {ConfigGroupCollapsibleContent} from './layer-config-group';\nimport TextLabelPanelFactory from './text-label-panel';\nimport HowToButton from './how-to-button';\n\nimport {capitalizeFirstLetter} from '@kepler.gl/utils';\n\nimport {CHANNEL_SCALE_SUPPORTED_FIELDS, LAYER_TYPES, ColorRange} from '@kepler.gl/constants';\nimport {Layer, LayerBaseConfig, VisualChannel, AggregationLayer} from '@kepler.gl/layers';\n\nimport {NestedPartial, RGBColor, LayerVisConfig, ColorUI, Field} from '@kepler.gl/types';\nimport {toggleModal, ActionHandler} from '@kepler.gl/actions';\nimport {Datasets} from '@kepler.gl/table';\n\ntype LayerConfiguratorProps = {\n  layer: Layer;\n  datasets: Datasets;\n  layerTypeOptions: {\n    id: string;\n    label: string;\n    icon: React.ElementType;\n    requireData: boolean;\n  }[];\n  openModal: ActionHandler<typeof toggleModal>;\n  updateLayerConfig: (newConfig: Partial<LayerBaseConfig>) => void;\n  updateLayerType: (newType: string) => void;\n  updateLayerVisConfig: (newVisConfig: Partial<LayerVisConfig>) => void;\n  updateLayerVisualChannelConfig: (\n    newConfig: Partial<LayerBaseConfig>,\n    channel: string,\n    newVisConfig?: Partial<LayerVisConfig>\n  ) => void;\n  updateLayerColorUI: (prop: string, newConfig: NestedPartial<ColorUI>) => void;\n  updateLayerTextLabel: (idx: number | 'all', prop: string, value: any) => void;\n};\n\ntype LayerColorSelectorProps = {\n  layer: Layer;\n  onChange: (v: Record<string, RGBColor>) => void;\n  selectedColor?: RGBColor;\n  property?: string;\n  setColorUI: (prop: string, newConfig: NestedPartial<ColorUI>) => void;\n};\n\ntype ArcLayerColorSelectorProps = {\n  layer: Layer;\n  onChangeConfig: (v: {color: RGBColor}) => void;\n  onChangeVisConfig: (v: {targetColor: RGBColor}) => void;\n  property?: string;\n  setColorUI: (prop: string, newConfig: NestedPartial<ColorUI>) => void;\n};\n\ntype LayerColorRangeSelectorProps = {\n  layer: Layer;\n  onChange: (v: Record<string, ColorRange>) => void;\n  property?: string;\n  setColorUI: (prop: string, newConfig: NestedPartial<ColorUI>) => void;\n};\n\ntype ChannelByValueSelectorProps = {\n  layer: Layer;\n  channel: VisualChannel;\n  onChange: (\n    val: Record<\n      string,\n      string | number | boolean | object | readonly (string | number | boolean | object)[] | null\n    >,\n    key: string\n  ) => void;\n  fields: Field[];\n  description: string;\n};\n\ntype AggregationSelectorProps = {\n  channel: VisualChannel;\n  layer: AggregationLayer;\n  onChange: (\n    val: Record<\n      string,\n      string | number | boolean | object | readonly (string | number | boolean | object)[] | null\n    >,\n    key: string\n  ) => void;\n};\n\nconst StyledLayerConfigurator = styled.div.attrs({\n  className: 'layer-panel__config'\n})`\n  position: relative;\n  margin-top: ${props => props.theme.layerConfiguratorMargin};\n  padding: ${props => props.theme.layerConfiguratorPadding};\n  border-left: ${props => props.theme.layerConfiguratorBorder} dashed\n    ${props => props.theme.layerConfiguratorBorderColor};\n`;\n\nconst StyledLayerVisualConfigurator = styled.div.attrs({\n  className: 'layer-panel__config__visualC-config'\n})`\n  margin-top: 12px;\n`;\n\nexport const getLayerFields = (datasets: Datasets, layer: Layer) =>\n  layer.config?.dataId && datasets[layer.config.dataId] ? datasets[layer.config.dataId].fields : [];\n\nexport const getLayerDataset = (datasets: Datasets, layer: Layer) =>\n  layer.config?.dataId && datasets[layer.config.dataId] ? datasets[layer.config.dataId] : null;\n\nexport const getLayerConfiguratorProps = (props: LayerConfiguratorProps) => ({\n  layer: props.layer,\n  fields: getLayerFields(props.datasets, props.layer),\n  onChange: props.updateLayerConfig,\n  setColorUI: props.updateLayerColorUI\n});\n\nexport const getVisConfiguratorProps = (props: LayerConfiguratorProps) => ({\n  layer: props.layer,\n  fields: getLayerFields(props.datasets, props.layer),\n  onChange: props.updateLayerVisConfig,\n  setColorUI: props.updateLayerColorUI\n});\n\nexport const getLayerChannelConfigProps = (props: LayerConfiguratorProps) => ({\n  layer: props.layer,\n  fields: getLayerFields(props.datasets, props.layer),\n  onChange: props.updateLayerVisualChannelConfig\n});\n\nLayerConfiguratorFactory.deps = [\n  SourceDataSelectorFactory,\n  VisConfigSliderFactory,\n  TextLabelPanelFactory,\n  LayerConfigGroupFactory,\n  ChannelByValueSelectorFactory,\n  LayerColumnConfigFactory,\n  LayerTypeSelectorFactory,\n  VisConfigSwitchFactory\n];\n\nexport default function LayerConfiguratorFactory(\n  SourceDataSelector: ReturnType<typeof SourceDataSelectorFactory>,\n  VisConfigSlider: ReturnType<typeof VisConfigSliderFactory>,\n  TextLabelPanel: ReturnType<typeof TextLabelPanelFactory>,\n  LayerConfigGroup: ReturnType<typeof LayerConfigGroupFactory>,\n  ChannelByValueSelector: ReturnType<typeof ChannelByValueSelectorFactory>,\n  LayerColumnConfig: ReturnType<typeof LayerColumnConfigFactory>,\n  LayerTypeSelector: ReturnType<typeof LayerTypeSelectorFactory>,\n  VisConfigSwitch: ReturnType<typeof VisConfigSwitchFactory>\n): React.ComponentType<LayerConfiguratorProps> {\n  class LayerConfigurator extends Component<LayerConfiguratorProps> {\n    _renderPointLayerConfig(props) {\n      return this._renderScatterplotLayerConfig(props);\n    }\n\n    _renderIconLayerConfig(props) {\n      return this._renderScatterplotLayerConfig(props);\n    }\n\n    _renderScatterplotLayerConfig({\n      layer,\n      visConfiguratorProps,\n      layerChannelConfigProps,\n      layerConfiguratorProps\n    }) {\n      return (\n        <StyledLayerVisualConfigurator>\n          {/* Fill Color */}\n          <LayerConfigGroup\n            {...(layer.visConfigSettings.filled || {label: 'layer.color'})}\n            {...visConfiguratorProps}\n            collapsible\n          >\n            {layer.config.colorField ? (\n              <LayerColorRangeSelector {...visConfiguratorProps} />\n            ) : (\n              <LayerColorSelector {...layerConfiguratorProps} />\n            )}\n            <ConfigGroupCollapsibleContent>\n              <ChannelByValueSelector\n                channel={layer.visualChannels.color}\n                {...layerChannelConfigProps}\n              />\n              <VisConfigSlider {...layer.visConfigSettings.opacity} {...visConfiguratorProps} />\n            </ConfigGroupCollapsibleContent>\n          </LayerConfigGroup>\n\n          {/* outline color */}\n          {layer.type === LAYER_TYPES.point ? (\n            <LayerConfigGroup\n              {...layer.visConfigSettings.outline}\n              {...visConfiguratorProps}\n              collapsible\n            >\n              {layer.config.strokeColorField ? (\n                <LayerColorRangeSelector {...visConfiguratorProps} property=\"strokeColorRange\" />\n              ) : (\n                <LayerColorSelector\n                  {...visConfiguratorProps}\n                  selectedColor={layer.config.visConfig.strokeColor}\n                  property=\"strokeColor\"\n                />\n              )}\n              <ConfigGroupCollapsibleContent>\n                <ChannelByValueSelector\n                  channel={layer.visualChannels.strokeColor}\n                  {...layerChannelConfigProps}\n                />\n                <VisConfigSlider\n                  {...layer.visConfigSettings.thickness}\n                  {...visConfiguratorProps}\n                  disabled={!layer.config.visConfig.outline}\n                />\n              </ConfigGroupCollapsibleContent>\n            </LayerConfigGroup>\n          ) : null}\n\n          {/* Radius */}\n          <LayerConfigGroup label={'layer.radius'} collapsible>\n            {!layer.config.sizeField ? (\n              <VisConfigSlider\n                {...layer.visConfigSettings.radius}\n                {...visConfiguratorProps}\n                label={false}\n                disabled={Boolean(layer.config.sizeField)}\n              />\n            ) : (\n              <VisConfigSlider\n                {...layer.visConfigSettings.radiusRange}\n                {...visConfiguratorProps}\n                label={false}\n                disabled={!layer.config.sizeField || layer.config.visConfig.fixedRadius}\n              />\n            )}\n            <ConfigGroupCollapsibleContent>\n              <ChannelByValueSelector\n                channel={layer.visualChannels.size}\n                {...layerChannelConfigProps}\n              />\n              {layer.config.sizeField ? (\n                <VisConfigSwitch\n                  {...layer.visConfigSettings.fixedRadius}\n                  {...visConfiguratorProps}\n                />\n              ) : null}\n            </ConfigGroupCollapsibleContent>\n          </LayerConfigGroup>\n\n          {/* text label */}\n          <TextLabelPanel\n            fields={visConfiguratorProps.fields}\n            updateLayerTextLabel={this.props.updateLayerTextLabel}\n            textLabel={layer.config.textLabel}\n          />\n        </StyledLayerVisualConfigurator>\n      );\n    }\n\n    _renderClusterLayerConfig({\n      layer,\n      visConfiguratorProps,\n      layerConfiguratorProps,\n      layerChannelConfigProps\n    }) {\n      return (\n        <StyledLayerVisualConfigurator>\n          {/* Color */}\n          <LayerConfigGroup label={'layer.color'} collapsible>\n            <LayerColorRangeSelector {...visConfiguratorProps} />\n            <ConfigGroupCollapsibleContent>\n              <AggregationScaleSelector\n                {...layerConfiguratorProps}\n                channel={layer.visualChannels.color}\n              />\n              <ChannelByValueSelector\n                channel={layer.visualChannels.color}\n                {...layerChannelConfigProps}\n              />\n              {layer.visConfigSettings.colorAggregation.condition(layer.config) ? (\n                <AggregationTypeSelector\n                  {...layer.visConfigSettings.colorAggregation}\n                  {...layerChannelConfigProps}\n                  channel={layer.visualChannels.color}\n                />\n              ) : null}\n              <VisConfigSlider {...layer.visConfigSettings.opacity} {...visConfiguratorProps} />\n            </ConfigGroupCollapsibleContent>\n          </LayerConfigGroup>\n\n          {/* Cluster Radius */}\n          <LayerConfigGroup label={'layer.radius'} collapsible>\n            <VisConfigSlider {...layer.visConfigSettings.clusterRadius} {...visConfiguratorProps} />\n            <ConfigGroupCollapsibleContent>\n              <VisConfigSlider {...layer.visConfigSettings.radiusRange} {...visConfiguratorProps} />\n            </ConfigGroupCollapsibleContent>\n          </LayerConfigGroup>\n        </StyledLayerVisualConfigurator>\n      );\n    }\n\n    _renderHeatmapLayerConfig({\n      layer,\n      visConfiguratorProps,\n      layerConfiguratorProps,\n      layerChannelConfigProps\n    }) {\n      return (\n        <StyledLayerVisualConfigurator>\n          {/* Color */}\n          <LayerConfigGroup label={'layer.color'} collapsible>\n            <LayerColorRangeSelector {...visConfiguratorProps} />\n            <ConfigGroupCollapsibleContent>\n              <VisConfigSlider {...layer.visConfigSettings.opacity} {...visConfiguratorProps} />\n            </ConfigGroupCollapsibleContent>\n          </LayerConfigGroup>\n          {/* Radius */}\n          <LayerConfigGroup label={'layer.radius'}>\n            <VisConfigSlider\n              {...layer.visConfigSettings.radius}\n              {...visConfiguratorProps}\n              label={false}\n            />\n          </LayerConfigGroup>\n          {/* Weight */}\n          <LayerConfigGroup label={'layer.weight'}>\n            <ChannelByValueSelector\n              channel={layer.visualChannels.weight}\n              {...layerChannelConfigProps}\n            />\n          </LayerConfigGroup>\n        </StyledLayerVisualConfigurator>\n      );\n    }\n\n    _renderGridLayerConfig(props) {\n      return this._renderAggregationLayerConfig(props);\n    }\n\n    _renderHexagonLayerConfig(props) {\n      return this._renderAggregationLayerConfig(props);\n    }\n\n    _renderAggregationLayerConfig({\n      layer,\n      visConfiguratorProps,\n      layerConfiguratorProps,\n      layerChannelConfigProps\n    }) {\n      const {config} = layer;\n      const {\n        visConfig: {enable3d}\n      } = config;\n      const elevationByDescription = 'layer.elevationByDescription';\n      const colorByDescription = 'layer.colorByDescription';\n\n      return (\n        <StyledLayerVisualConfigurator>\n          {/* Color */}\n          <LayerConfigGroup label={'layer.color'} collapsible>\n            <LayerColorRangeSelector {...visConfiguratorProps} />\n            <ConfigGroupCollapsibleContent>\n              <AggregationScaleSelector\n                {...layerConfiguratorProps}\n                channel={layer.visualChannels.color}\n              />\n              <ChannelByValueSelector\n                channel={layer.visualChannels.color}\n                {...layerChannelConfigProps}\n              />\n              {layer.visConfigSettings.colorAggregation.condition(layer.config) ? (\n                <AggregationTypeSelector\n                  {...layer.visConfigSettings.colorAggregation}\n                  {...layerChannelConfigProps}\n                  description={colorByDescription}\n                  channel={layer.visualChannels.color}\n                />\n              ) : null}\n              {layer.visConfigSettings.percentile &&\n              layer.visConfigSettings.percentile.condition(layer.config) ? (\n                <VisConfigSlider\n                  {...layer.visConfigSettings.percentile}\n                  {...visConfiguratorProps}\n                />\n              ) : null}\n              <VisConfigSlider {...layer.visConfigSettings.opacity} {...visConfiguratorProps} />\n            </ConfigGroupCollapsibleContent>\n          </LayerConfigGroup>\n\n          {/* Cell size */}\n          <LayerConfigGroup label={'layer.radius'} collapsible>\n            <VisConfigSlider {...layer.visConfigSettings.worldUnitSize} {...visConfiguratorProps} />\n            <ConfigGroupCollapsibleContent>\n              <VisConfigSlider {...layer.visConfigSettings.coverage} {...visConfiguratorProps} />\n            </ConfigGroupCollapsibleContent>\n          </LayerConfigGroup>\n\n          {/* Elevation */}\n          {layer.visConfigSettings.enable3d ? (\n            <LayerConfigGroup\n              {...layer.visConfigSettings.enable3d}\n              {...visConfiguratorProps}\n              collapsible\n            >\n              <VisConfigSlider\n                {...layer.visConfigSettings.elevationScale}\n                {...visConfiguratorProps}\n                label=\"layerVisConfigs.heightMultiplier\"\n              />\n              <ConfigGroupCollapsibleContent>\n                <ChannelByValueSelector\n                  {...layerChannelConfigProps}\n                  channel={layer.visualChannels.size}\n                  description={elevationByDescription}\n                  disabled={!enable3d}\n                />\n                <AggregationScaleSelector\n                  {...layerConfiguratorProps}\n                  channel={layer.visualChannels.size}\n                />\n                <VisConfigSlider\n                  {...layer.visConfigSettings.sizeRange}\n                  {...visConfiguratorProps}\n                  label=\"layerVisConfigs.heightRange\"\n                />\n                <VisConfigSwitch\n                  {...layer.visConfigSettings.enableElevationZoomFactor}\n                  {...visConfiguratorProps}\n                  label=\"layerVisConfigs.enableHeightZoomFactor\"\n                />\n                {layer.visConfigSettings.sizeAggregation.condition(layer.config) ? (\n                  <AggregationTypeSelector\n                    {...layer.visConfigSettings.sizeAggregation}\n                    {...layerChannelConfigProps}\n                    channel={layer.visualChannels.size}\n                  />\n                ) : null}\n                {layer.visConfigSettings.elevationPercentile.condition(layer.config) ? (\n                  <VisConfigSlider\n                    {...layer.visConfigSettings.elevationPercentile}\n                    {...visConfiguratorProps}\n                  />\n                ) : null}\n              </ConfigGroupCollapsibleContent>\n            </LayerConfigGroup>\n          ) : null}\n        </StyledLayerVisualConfigurator>\n      );\n    }\n\n    // TODO: Shan move these into layer class\n    _renderHexagonIdLayerConfig({\n      layer,\n      visConfiguratorProps,\n      layerConfiguratorProps,\n      layerChannelConfigProps\n    }) {\n      return (\n        <StyledLayerVisualConfigurator>\n          {/* Color */}\n          <LayerConfigGroup label={'layer.color'} collapsible>\n            {layer.config.colorField ? (\n              <LayerColorRangeSelector {...visConfiguratorProps} />\n            ) : (\n              <LayerColorSelector {...layerConfiguratorProps} />\n            )}\n            <ConfigGroupCollapsibleContent>\n              <ChannelByValueSelector\n                channel={layer.visualChannels.color}\n                {...layerChannelConfigProps}\n              />\n              <VisConfigSlider {...layer.visConfigSettings.opacity} {...visConfiguratorProps} />\n            </ConfigGroupCollapsibleContent>\n          </LayerConfigGroup>\n\n          {/* Coverage */}\n          <LayerConfigGroup label={'layer.coverage'} collapsible>\n            {!layer.config.coverageField ? (\n              <VisConfigSlider\n                {...layer.visConfigSettings.coverage}\n                {...visConfiguratorProps}\n                label={false}\n              />\n            ) : (\n              <VisConfigSlider\n                {...layer.visConfigSettings.coverageRange}\n                {...visConfiguratorProps}\n                label={false}\n              />\n            )}\n            <ConfigGroupCollapsibleContent>\n              <ChannelByValueSelector\n                channel={layer.visualChannels.coverage}\n                {...layerChannelConfigProps}\n              />\n            </ConfigGroupCollapsibleContent>\n          </LayerConfigGroup>\n\n          {/* height */}\n          <LayerConfigGroup\n            {...layer.visConfigSettings.enable3d}\n            {...visConfiguratorProps}\n            collapsible\n          >\n            <ChannelByValueSelector\n              channel={layer.visualChannels.size}\n              {...layerChannelConfigProps}\n            />\n            <ConfigGroupCollapsibleContent>\n              <VisConfigSlider\n                {...layer.visConfigSettings.elevationScale}\n                {...visConfiguratorProps}\n              />\n              <VisConfigSlider\n                {...layer.visConfigSettings.sizeRange}\n                {...visConfiguratorProps}\n                label=\"layerVisConfigs.heightRange\"\n              />\n              <VisConfigSwitch\n                {...layer.visConfigSettings.enableElevationZoomFactor}\n                {...visConfiguratorProps}\n              />\n            </ConfigGroupCollapsibleContent>\n          </LayerConfigGroup>\n        </StyledLayerVisualConfigurator>\n      );\n    }\n\n    _renderArcLayerConfig(args) {\n      return this._renderLineLayerConfig(args);\n    }\n\n    _renderLineLayerConfig({\n      layer,\n      visConfiguratorProps,\n      layerConfiguratorProps,\n      layerChannelConfigProps\n    }) {\n      return (\n        <StyledLayerVisualConfigurator>\n          {/* Color */}\n          <LayerConfigGroup label={'layer.color'} collapsible>\n            {layer.config.colorField ? (\n              <LayerColorRangeSelector {...visConfiguratorProps} />\n            ) : (\n              <ArcLayerColorSelector\n                layer={layer}\n                setColorUI={layerConfiguratorProps.setColorUI}\n                onChangeConfig={layerConfiguratorProps.onChange}\n                onChangeVisConfig={visConfiguratorProps.onChange}\n              />\n            )}\n            <ConfigGroupCollapsibleContent>\n              <ChannelByValueSelector\n                channel={layer.visualChannels.sourceColor}\n                {...layerChannelConfigProps}\n              />\n              <VisConfigSlider {...layer.visConfigSettings.opacity} {...visConfiguratorProps} />\n            </ConfigGroupCollapsibleContent>\n          </LayerConfigGroup>\n\n          {/* thickness */}\n          <LayerConfigGroup label={'layer.stroke'} collapsible>\n            {layer.config.sizeField ? (\n              <VisConfigSlider\n                {...layer.visConfigSettings.sizeRange}\n                {...visConfiguratorProps}\n                disabled={!layer.config.sizeField}\n                label={false}\n              />\n            ) : (\n              <VisConfigSlider\n                {...layer.visConfigSettings.thickness}\n                {...visConfiguratorProps}\n                label={false}\n              />\n            )}\n            <ConfigGroupCollapsibleContent>\n              <ChannelByValueSelector\n                channel={layer.visualChannels.size}\n                {...layerChannelConfigProps}\n              />\n            </ConfigGroupCollapsibleContent>\n          </LayerConfigGroup>\n\n          {/* elevation scale */}\n          {layer.visConfigSettings.elevationScale ? (\n            <LayerConfigGroup label=\"layerVisConfigs.elevationScale\" collapsible>\n              <VisConfigSlider\n                {...layer.visConfigSettings.elevationScale}\n                {...visConfiguratorProps}\n              />\n            </LayerConfigGroup>\n          ) : null}\n        </StyledLayerVisualConfigurator>\n      );\n    }\n\n    _renderTripLayerConfig({\n      layer,\n      visConfiguratorProps,\n      layerConfiguratorProps,\n      layerChannelConfigProps\n    }) {\n      const {\n        meta: {featureTypes = {}}\n      } = layer;\n\n      return (\n        <StyledLayerVisualConfigurator>\n          {/* Color */}\n          <LayerConfigGroup label={'layer.color'} collapsible>\n            {layer.config.colorField ? (\n              <LayerColorRangeSelector {...visConfiguratorProps} />\n            ) : (\n              <LayerColorSelector {...layerConfiguratorProps} />\n            )}\n            <ConfigGroupCollapsibleContent>\n              <ChannelByValueSelector\n                channel={layer.visualChannels.color}\n                {...layerChannelConfigProps}\n              />\n              <VisConfigSlider {...layer.visConfigSettings.opacity} {...visConfiguratorProps} />\n            </ConfigGroupCollapsibleContent>\n          </LayerConfigGroup>\n\n          {/* Stroke Width */}\n          <LayerConfigGroup {...visConfiguratorProps} label=\"layer.strokeWidth\" collapsible>\n            {layer.config.sizeField ? (\n              <VisConfigSlider\n                {...layer.visConfigSettings.sizeRange}\n                {...visConfiguratorProps}\n                label={false}\n              />\n            ) : (\n              <VisConfigSlider\n                {...layer.visConfigSettings.thickness}\n                {...visConfiguratorProps}\n                label={false}\n              />\n            )}\n\n            <ConfigGroupCollapsibleContent>\n              <ChannelByValueSelector\n                channel={layer.visualChannels.size}\n                {...layerChannelConfigProps}\n              />\n            </ConfigGroupCollapsibleContent>\n          </LayerConfigGroup>\n\n          {/* Trail Length*/}\n          <LayerConfigGroup\n            {...visConfiguratorProps}\n            {...(featureTypes.polygon ? layer.visConfigSettings.stroked : {})}\n            label=\"layer.trailLength\"\n            description=\"layer.trailLengthDescription\"\n          >\n            <VisConfigSlider\n              {...layer.visConfigSettings.trailLength}\n              {...visConfiguratorProps}\n              label={false}\n            />\n          </LayerConfigGroup>\n        </StyledLayerVisualConfigurator>\n      );\n    }\n\n    _renderGeojsonLayerConfig({\n      layer,\n      visConfiguratorProps,\n      layerConfiguratorProps,\n      layerChannelConfigProps\n    }) {\n      const {\n        meta: {featureTypes = {}},\n        config: {visConfig}\n      } = layer;\n\n      return (\n        <StyledLayerVisualConfigurator>\n          {/* Fill Color */}\n          {featureTypes.polygon || featureTypes.point ? (\n            <LayerConfigGroup\n              {...layer.visConfigSettings.filled}\n              {...visConfiguratorProps}\n              label=\"layer.fillColor\"\n              collapsible\n            >\n              {layer.config.colorField ? (\n                <LayerColorRangeSelector {...visConfiguratorProps} />\n              ) : (\n                <LayerColorSelector {...layerConfiguratorProps} />\n              )}\n              <ConfigGroupCollapsibleContent>\n                <ChannelByValueSelector\n                  channel={layer.visualChannels.color}\n                  {...layerChannelConfigProps}\n                />\n                <VisConfigSlider {...layer.visConfigSettings.opacity} {...visConfiguratorProps} />\n              </ConfigGroupCollapsibleContent>\n            </LayerConfigGroup>\n          ) : null}\n\n          {/* stroke color */}\n          <LayerConfigGroup\n            {...layer.visConfigSettings.stroked}\n            {...visConfiguratorProps}\n            label=\"layer.strokeColor\"\n            collapsible\n          >\n            {layer.config.strokeColorField ? (\n              <LayerColorRangeSelector {...visConfiguratorProps} property=\"strokeColorRange\" />\n            ) : (\n              <LayerColorSelector\n                {...visConfiguratorProps}\n                selectedColor={layer.config.visConfig.strokeColor}\n                property=\"strokeColor\"\n              />\n            )}\n            <ConfigGroupCollapsibleContent>\n              <ChannelByValueSelector\n                channel={layer.visualChannels.strokeColor}\n                {...layerChannelConfigProps}\n              />\n              <VisConfigSlider\n                {...layer.visConfigSettings.strokeOpacity}\n                {...visConfiguratorProps}\n              />\n            </ConfigGroupCollapsibleContent>\n          </LayerConfigGroup>\n\n          {/* Stroke Width */}\n          <LayerConfigGroup\n            {...visConfiguratorProps}\n            {...(featureTypes.polygon ? layer.visConfigSettings.stroked : {})}\n            label=\"layer.strokeWidth\"\n            collapsible\n          >\n            {layer.config.sizeField ? (\n              <VisConfigSlider\n                {...layer.visConfigSettings.sizeRange}\n                {...visConfiguratorProps}\n                label={false}\n              />\n            ) : (\n              <VisConfigSlider\n                {...layer.visConfigSettings.thickness}\n                {...visConfiguratorProps}\n                label={false}\n              />\n            )}\n            <ConfigGroupCollapsibleContent>\n              <ChannelByValueSelector\n                channel={layer.visualChannels.size}\n                {...layerChannelConfigProps}\n              />\n            </ConfigGroupCollapsibleContent>\n          </LayerConfigGroup>\n\n          {/* Elevation */}\n          {featureTypes.polygon ? (\n            <LayerConfigGroup\n              {...visConfiguratorProps}\n              {...layer.visConfigSettings.enable3d}\n              disabled={!visConfig.filled}\n              collapsible\n            >\n              <VisConfigSlider\n                {...layer.visConfigSettings.elevationScale}\n                {...visConfiguratorProps}\n                label={false}\n              />\n              <ConfigGroupCollapsibleContent>\n                <ChannelByValueSelector\n                  channel={layer.visualChannels.height}\n                  {...layerChannelConfigProps}\n                />\n                <VisConfigSwitch\n                  {...layer.visConfigSettings.enableElevationZoomFactor}\n                  {...visConfiguratorProps}\n                />\n                <VisConfigSwitch {...visConfiguratorProps} {...layer.visConfigSettings.wireframe} />\n              </ConfigGroupCollapsibleContent>\n            </LayerConfigGroup>\n          ) : null}\n\n          {/* Radius */}\n          {featureTypes.point ? (\n            <LayerConfigGroup label={'layer.radius'} collapsible>\n              {!layer.config.radiusField ? (\n                <VisConfigSlider\n                  {...layer.visConfigSettings.radius}\n                  {...visConfiguratorProps}\n                  label={false}\n                  disabled={Boolean(layer.config.radiusField)}\n                />\n              ) : (\n                <VisConfigSlider\n                  {...layer.visConfigSettings.radiusRange}\n                  {...visConfiguratorProps}\n                  label={false}\n                  disabled={!layer.config.radiusField}\n                />\n              )}\n              <ConfigGroupCollapsibleContent>\n                <ChannelByValueSelector\n                  channel={layer.visualChannels.radius}\n                  {...layerChannelConfigProps}\n                />\n              </ConfigGroupCollapsibleContent>\n            </LayerConfigGroup>\n          ) : null}\n        </StyledLayerVisualConfigurator>\n      );\n    }\n\n    _render3DLayerConfig({layer, visConfiguratorProps}) {\n      return (\n        <Fragment>\n          <LayerConfigGroup label={'layer.3DModel'} collapsible>\n            <Input\n              type=\"file\"\n              accept=\".glb,.gltf\"\n              onChange={e => {\n                if (e.target.files && e.target.files[0]) {\n                  const url = URL.createObjectURL(e.target.files[0]);\n                  visConfiguratorProps.onChange({scenegraph: url});\n                }\n              }}\n            />\n          </LayerConfigGroup>\n          <LayerConfigGroup label={'layer.3DModelOptions'} collapsible>\n            <VisConfigSlider\n              {...layer.visConfigSettings.sizeScale}\n              {...visConfiguratorProps}\n              disabled={false}\n            />\n            <VisConfigSlider\n              {...layer.visConfigSettings.angleX}\n              {...visConfiguratorProps}\n              disabled={false}\n            />\n            <VisConfigSlider\n              {...layer.visConfigSettings.angleY}\n              {...visConfiguratorProps}\n              disabled={false}\n            />\n            <VisConfigSlider\n              {...layer.visConfigSettings.angleZ}\n              {...visConfiguratorProps}\n              disabled={false}\n            />\n          </LayerConfigGroup>\n        </Fragment>\n      );\n    }\n\n    _renderS2LayerConfig({\n      layer,\n      visConfiguratorProps,\n      layerConfiguratorProps,\n      layerChannelConfigProps\n    }) {\n      const {\n        config: {visConfig}\n      } = layer;\n\n      return (\n        <StyledLayerVisualConfigurator>\n          {/* Color */}\n          <LayerConfigGroup\n            {...layer.visConfigSettings.filled}\n            {...visConfiguratorProps}\n            label=\"layer.fillColor\"\n            collapsible\n          >\n            {layer.config.colorField ? (\n              <LayerColorRangeSelector {...visConfiguratorProps} />\n            ) : (\n              <LayerColorSelector {...layerConfiguratorProps} />\n            )}\n            <ConfigGroupCollapsibleContent>\n              <ChannelByValueSelector\n                channel={layer.visualChannels.color}\n                {...layerChannelConfigProps}\n              />\n              <VisConfigSlider {...layer.visConfigSettings.opacity} {...visConfiguratorProps} />\n            </ConfigGroupCollapsibleContent>\n          </LayerConfigGroup>\n\n          {/* Stroke */}\n          <LayerConfigGroup\n            {...layer.visConfigSettings.stroked}\n            {...visConfiguratorProps}\n            label=\"layer.strokeColor\"\n            collapsible\n          >\n            {layer.config.strokeColorField ? (\n              <LayerColorRangeSelector {...visConfiguratorProps} property=\"strokeColorRange\" />\n            ) : (\n              <LayerColorSelector\n                {...visConfiguratorProps}\n                selectedColor={layer.config.visConfig.strokeColor}\n                property=\"strokeColor\"\n              />\n            )}\n            <ConfigGroupCollapsibleContent>\n              <ChannelByValueSelector\n                channel={layer.visualChannels.strokeColor}\n                {...layerChannelConfigProps}\n              />\n            </ConfigGroupCollapsibleContent>\n          </LayerConfigGroup>\n\n          {/* Stroke Width */}\n          <LayerConfigGroup {...visConfiguratorProps} label=\"layer.strokeWidth\" collapsible>\n            {layer.config.sizeField ? (\n              <VisConfigSlider\n                {...layer.visConfigSettings.sizeRange}\n                {...visConfiguratorProps}\n                label={false}\n              />\n            ) : (\n              <VisConfigSlider\n                {...layer.visConfigSettings.thickness}\n                {...visConfiguratorProps}\n                label={false}\n              />\n            )}\n            <ConfigGroupCollapsibleContent>\n              <ChannelByValueSelector\n                channel={layer.visualChannels.size}\n                {...layerChannelConfigProps}\n              />\n            </ConfigGroupCollapsibleContent>\n          </LayerConfigGroup>\n\n          {/* Elevation */}\n          <LayerConfigGroup\n            {...visConfiguratorProps}\n            {...layer.visConfigSettings.enable3d}\n            disabled={!visConfig.filled}\n            collapsible\n          >\n            <ChannelByValueSelector\n              channel={layer.visualChannels.height}\n              {...layerChannelConfigProps}\n            />\n            <VisConfigSlider\n              {...layer.visConfigSettings.elevationScale}\n              {...visConfiguratorProps}\n              label=\"layerVisConfigs.elevationScale\"\n            />\n            <ConfigGroupCollapsibleContent>\n              <VisConfigSlider\n                {...layer.visConfigSettings.heightRange}\n                {...visConfiguratorProps}\n                label=\"layerVisConfigs.heightRange\"\n              />\n              <VisConfigSwitch\n                {...layer.visConfigSettings.enableElevationZoomFactor}\n                {...visConfiguratorProps}\n              />\n              <VisConfigSwitch {...visConfiguratorProps} {...layer.visConfigSettings.wireframe} />\n            </ConfigGroupCollapsibleContent>\n          </LayerConfigGroup>\n        </StyledLayerVisualConfigurator>\n      );\n    }\n\n    render() {\n      const {layer, datasets, updateLayerConfig, layerTypeOptions, updateLayerType} = this.props;\n      const {fields = [], fieldPairs = undefined} = layer.config.dataId\n        ? datasets[layer.config.dataId]\n        : {};\n      const {config} = layer;\n\n      const visConfiguratorProps = getVisConfiguratorProps(this.props);\n      const layerConfiguratorProps = getLayerConfiguratorProps(this.props);\n      const layerChannelConfigProps = getLayerChannelConfigProps(this.props);\n      const dataset = getLayerDataset(datasets, layer);\n      const renderTemplate = layer.type && `_render${capitalizeFirstLetter(layer.type)}LayerConfig`;\n\n      return (\n        <StyledLayerConfigurator>\n          {layer.layerInfoModal ? (\n            <HowToButton onClick={() => this.props.openModal(layer.layerInfoModal)} />\n          ) : null}\n          <LayerConfigGroup label={'layer.basic'} collapsible expanded={!layer.hasAllColumns()}>\n            <LayerTypeSelector\n              selected={layer.type}\n              options={layerTypeOptions}\n              // @ts-ignore\n              onSelect={updateLayerType}\n            />\n            <ConfigGroupCollapsibleContent>\n              <SourceDataSelector\n                datasets={datasets}\n                id={layer.id}\n                dataId={config.dataId}\n                // @ts-ignore\n                onSelect={(value: string) => updateLayerConfig({dataId: value})}\n              />\n              <LayerColumnConfig\n                columnPairs={layer.columnPairs}\n                columns={layer.config.columns}\n                assignColumnPairs={layer.assignColumnPairs.bind(layer)}\n                assignColumn={layer.assignColumn.bind(layer)}\n                // @ts-ignore\n                columnLabels={layer.columnLabels}\n                fields={fields}\n                fieldPairs={fieldPairs}\n                updateLayerConfig={updateLayerConfig}\n              />\n            </ConfigGroupCollapsibleContent>\n          </LayerConfigGroup>\n          {renderTemplate &&\n            this[renderTemplate] &&\n            this[renderTemplate]({\n              layer,\n              dataset,\n              visConfiguratorProps,\n              layerChannelConfigProps,\n              layerConfiguratorProps\n            })}\n        </StyledLayerConfigurator>\n      );\n    }\n  }\n\n  return LayerConfigurator;\n}\n\nexport const LayerColorSelector = ({\n  layer,\n  onChange,\n  selectedColor,\n  property = 'color',\n  setColorUI\n}: LayerColorSelectorProps) => (\n  <SidePanelSection>\n    <ColorSelector\n      colorSets={[\n        {\n          selectedColor: selectedColor || layer.config.color,\n          setColor: (rgbValue: RGBColor) => onChange({[property]: rgbValue})\n        }\n      ]}\n      colorUI={layer.config.colorUI[property]}\n      setColorUI={newConfig => setColorUI(property, newConfig)}\n    />\n  </SidePanelSection>\n);\n\nexport const ArcLayerColorSelector = ({\n  layer,\n  onChangeConfig,\n  onChangeVisConfig,\n  property = 'color',\n  setColorUI\n}: ArcLayerColorSelectorProps) => (\n  <SidePanelSection>\n    <ColorSelector\n      colorSets={[\n        {\n          selectedColor: layer.config.color,\n          setColor: (rgbValue: RGBColor) => onChangeConfig({color: rgbValue}),\n          label: 'Source'\n        },\n        {\n          selectedColor: layer.config.visConfig.targetColor || layer.config.color,\n          setColor: (rgbValue: RGBColor) => onChangeVisConfig({targetColor: rgbValue}),\n          label: 'Target'\n        }\n      ]}\n      colorUI={layer.config.colorUI[property]}\n      setColorUI={newConfig => setColorUI(property, newConfig)}\n    />\n  </SidePanelSection>\n);\n\nexport const LayerColorRangeSelector = ({\n  layer,\n  onChange,\n  property = 'colorRange',\n  setColorUI\n}: LayerColorRangeSelectorProps) => (\n  <SidePanelSection>\n    <ColorSelector\n      colorSets={[\n        {\n          selectedColor: layer.config.visConfig[property],\n          isRange: true,\n          setColor: (colorRange: ColorRange) => onChange({[property]: colorRange})\n        }\n      ]}\n      colorUI={layer.config.colorUI[property]}\n      setColorUI={newConfig => setColorUI(property, newConfig)}\n    />\n  </SidePanelSection>\n);\n\nChannelByValueSelectorFactory.deps = [VisConfigByFieldSelectorFactory];\n\nexport function ChannelByValueSelectorFactory(\n  VisConfigByFieldSelector: ReturnType<typeof VisConfigByFieldSelectorFactory>\n) {\n  const ChannelByValueSelector = ({\n    layer,\n    channel,\n    onChange,\n    fields,\n    description\n  }: ChannelByValueSelectorProps) => {\n    const {\n      channelScaleType,\n      field,\n      key,\n      property,\n      scale,\n      defaultMeasure,\n      supportedFieldTypes\n    } = channel;\n    const channelSupportedFieldTypes =\n      supportedFieldTypes || CHANNEL_SCALE_SUPPORTED_FIELDS[channelScaleType];\n    const supportedFields = fields.filter(({type}) => channelSupportedFieldTypes.includes(type));\n    const scaleOptions = layer.getScaleOptions(channel.key);\n    const showScale = !layer.isAggregated && layer.config[scale] && scaleOptions.length > 1;\n    const defaultDescription = 'layerConfiguration.defaultDescription';\n\n    return (\n      <VisConfigByFieldSelector\n        channel={channel.key}\n        description={description || defaultDescription}\n        fields={supportedFields}\n        id={layer.id}\n        key={`${key}-channel-selector`}\n        property={property}\n        placeholder={defaultMeasure || 'placeholder.selectField'}\n        scaleOptions={scaleOptions}\n        scaleType={scale ? layer.config[scale] : null}\n        selectedField={layer.config[field]}\n        showScale={showScale}\n        updateField={val => onChange({[field]: val}, key)}\n        updateScale={val => onChange({[scale]: val}, key)}\n      />\n    );\n  };\n\n  return ChannelByValueSelector;\n}\n\nexport const AggregationScaleSelector = ({channel, layer, onChange}: AggregationSelectorProps) => {\n  const {scale, key} = channel;\n  const scaleOptions = layer.getScaleOptions(key);\n\n  return Array.isArray(scaleOptions) && scaleOptions.length > 1 ? (\n    <DimensionScaleSelector\n      label={`${key} Scale`}\n      options={scaleOptions}\n      scaleType={layer.config[scale]}\n      onSelect={val => onChange({[scale]: val}, key)}\n    />\n  ) : null;\n};\n\nexport const AggregationTypeSelector = ({channel, layer, onChange}: AggregationSelectorProps) => {\n  const {field, aggregation, key} = channel;\n  const selectedField = layer.config[field];\n  const {visConfig} = layer.config;\n\n  // aggregation should only be selectable when field is selected\n  const aggregationOptions = layer.getAggregationOptions(key);\n\n  return (\n    <SidePanelSection>\n      <PanelLabel>\n        <FormattedMessage id={'layer.aggregateBy'} values={{field: selectedField.name}} />\n      </PanelLabel>\n      <ItemSelector\n        selectedItems={visConfig[aggregation as string]}\n        options={aggregationOptions}\n        multiSelect={false}\n        searchable={false}\n        onChange={value =>\n          onChange(\n            {\n              visConfig: {\n                ...layer.config.visConfig,\n                [aggregation as string]: value\n              }\n            },\n            channel.key\n          )\n        }\n      />\n    </SidePanelSection>\n  );\n};\n/* eslint-enable max-params */\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}