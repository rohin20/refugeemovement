{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toggleLayerPanelListViewUpdater = exports.setLocaleUpdater = exports.showDatasetTableUpdater = exports.toggleSplitMapUpdater = exports.loadFilesErrUpdater = exports.loadFilesSuccessUpdater = exports.loadFilesUpdater = exports.removeNotificationUpdater = exports.addNotificationUpdater = exports.setExportMapHTMLModeUpdater = exports.setExportMapFormatUpdater = exports.setUserMapboxAccessTokenUpdater = exports.setExportDataUpdater = exports.setExportFilteredUpdater = exports.setExportDataTypeUpdater = exports.setExportSelectedDatasetUpdater = exports.startExportingImageUpdater = exports.cleanupExportImageUpdater = exports.setExportImageErrorUpdater = exports.setExportImageDataUriUpdater = exports.setExportImageSettingUpdater = exports.openDeleteModalUpdater = exports.setMapControlVisibilityUpdater = exports.toggleMapControlUpdater = exports.hideExportDropdownUpdater = exports.showExportDropdownUpdater = exports.toggleModalUpdater = exports.toggleSidePanelUpdater = exports.initUiStateUpdater = exports.INITIAL_UI_STATE = exports.DEFAULT_EXPORT_MAP = exports.DEFAULT_EXPORT_JSON = exports.DEFAULT_EXPORT_HTML = exports.DEFAULT_NOTIFICATIONS = exports.DEFAULT_EXPORT_DATA = exports.DEFAULT_LOAD_FILES = exports.DEFAULT_EXPORT_IMAGE = exports.DEFAULT_MAP_CONTROLS = exports.DEFAULT_MODAL = exports.DEFAULT_ACTIVE_SIDE_PANEL = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _constants = require(\"@kepler.gl/constants\");\nvar _localization = require(\"@kepler.gl/localization\");\nvar _utils = require(\"@kepler.gl/utils\");\nvar _composerHelpers = require(\"./composer-helpers\");\nvar _DEFAULT_EXPORT_MAP;\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar DEFAULT_ACTIVE_SIDE_PANEL = 'layer';\nexports.DEFAULT_ACTIVE_SIDE_PANEL = DEFAULT_ACTIVE_SIDE_PANEL;\nvar DEFAULT_MODAL = _constants.ADD_DATA_ID;\n/**\n * Updaters for `uiState` reducer. Can be used in your root reducer to directly modify kepler.gl's state.\n * Read more about [Using updaters](../advanced-usage/using-updaters.md)\n *\n * @public\n * @example\n *\n * import keplerGlReducer, {uiStateUpdaters} from 'kepler.gl/reducers';\n * // Root Reducer\n * const reducers = combineReducers({\n *  keplerGl: keplerGlReducer,\n *  app: appReducer\n * });\n *\n * const composedReducer = (state, action) => {\n *  switch (action.type) {\n *    // click button to close side panel\n *    case 'CLICK_BUTTON':\n *      return {\n *        ...state,\n *        keplerGl: {\n *          ...state.keplerGl,\n *          foo: {\n *             ...state.keplerGl.foo,\n *             uiState: uiStateUpdaters.toggleSidePanelUpdater(\n *               uiState, {payload: null}\n *             )\n *          }\n *        }\n *      };\n *  }\n *  return reducers(state, action);\n * };\n *\n * export default composedReducer;\n */\n\n/* eslint-disable no-unused-vars */\n// @ts-ignore\n\nexports.DEFAULT_MODAL = DEFAULT_MODAL;\nvar uiStateUpdaters = null;\n/* eslint-enable no-unused-vars */\n\nvar DEFAULT_MAP_CONTROLS_FEATURES = {\n  show: true,\n  active: false,\n  disableClose: false,\n  // defines which map index users are interacting with (through map controls)\n  activeMapIndex: 0\n};\n/**\n * A list of map control visibility and whether is it active.\n * @memberof uiStateUpdaters\n * @constant\n * @property visibleLayers Default: `{show: true, active: false}`\n * @property mapLegend Default: `{show: true, active: false}`\n * @property toggle3d Default: `{show: true}`\n * @property splitMap Default: `{show: true}`\n * @property mapDraw Default: `{show: true, active: false}`\n * @property mapLocale Default: `{show: false, active: false}`\n * @public\n */\n\nvar DEFAULT_MAP_CONTROLS = Object.keys(_constants.MAP_CONTROLS).reduce(function (_final, current) {\n  return _objectSpread(_objectSpread({}, _final), {}, (0, _defineProperty2[\"default\"])({}, current, DEFAULT_MAP_CONTROLS_FEATURES));\n}, {});\n/**\n * Default image export config\n * @memberof uiStateUpdaters\n * @constant\n * @property ratio Default: `'SCREEN'`,\n * @property resolution Default: `'ONE_X'`,\n * @property legend Default: `false`,\n * @property mapH Default: 0,\n * @property mapW Default: 0,\n * @property imageSize Default: {zoomOffset: 0, scale: 1, imageW: 0, imageH: 0},\n * @property imageDataUri Default: `''`,\n * @property exporting Default: `false`\n * @property error Default: `false`\n * @public\n */\n\nexports.DEFAULT_MAP_CONTROLS = DEFAULT_MAP_CONTROLS;\nvar DEFAULT_EXPORT_IMAGE = {\n  // user options\n  ratio: _constants.EXPORT_IMG_RATIOS.SCREEN,\n  resolution: _constants.RESOLUTIONS.ONE_X,\n  legend: false,\n  mapH: 0,\n  mapW: 0,\n  imageSize: {\n    zoomOffset: 0,\n    scale: 1,\n    imageW: 0,\n    imageH: 0\n  },\n  // when this is set to true, the mock map viewport will move to the center of data\n  center: false,\n  // exporting state\n  imageDataUri: '',\n  // exporting: used to attach plot-container to dom\n  exporting: false,\n  // processing: used as loading indicator when export image is being produced\n  processing: false,\n  error: false\n};\nexports.DEFAULT_EXPORT_IMAGE = DEFAULT_EXPORT_IMAGE;\nvar DEFAULT_LOAD_FILES = {\n  fileLoading: false\n};\n/**\n * Default initial `exportData` settings\n * @memberof uiStateUpdaters\n * @constant\n * @property selectedDataset Default: `''`,\n * @property dataType Default: `'csv'`,\n * @property filtered Default: `true`,\n * @public\n */\n\nexports.DEFAULT_LOAD_FILES = DEFAULT_LOAD_FILES;\nvar DEFAULT_EXPORT_DATA = {\n  selectedDataset: '',\n  dataType: _constants.EXPORT_DATA_TYPE.CSV,\n  filtered: true\n};\n/**\n * @constant\n */\n\nexports.DEFAULT_EXPORT_DATA = DEFAULT_EXPORT_DATA;\nvar DEFAULT_NOTIFICATIONS = [];\n/**\n * @constant\n * @property exportMapboxAccessToken - Default: null, this is used when we provide a default mapbox token for users to take advantage of\n * @property userMapboxToken - Default: '', mapbox token provided by user through input field\n * @property mode - Default: 'READ', read only or editable\n * @public\n */\n\nexports.DEFAULT_NOTIFICATIONS = DEFAULT_NOTIFICATIONS;\nvar DEFAULT_EXPORT_HTML = {\n  exportMapboxAccessToken: null,\n  userMapboxToken: '',\n  mode: _constants.EXPORT_HTML_MAP_MODES.READ\n};\n/**\n * @constant\n * @property hasData - Default: 'true',\n * @public\n */\n\nexports.DEFAULT_EXPORT_HTML = DEFAULT_EXPORT_HTML;\nvar DEFAULT_EXPORT_JSON = {\n  hasData: true\n};\n/**\n * Export Map Config\n * @constant\n * @property HTML - Default: 'DEFAULT_EXPORT_HTML',\n * @property JSON - Default: 'DEFAULT_EXPORT_JSON',\n * @property format - Default: 'HTML',\n * @public\n */\n\nexports.DEFAULT_EXPORT_JSON = DEFAULT_EXPORT_JSON;\nvar DEFAULT_EXPORT_MAP = (_DEFAULT_EXPORT_MAP = {}, (0, _defineProperty2[\"default\"])(_DEFAULT_EXPORT_MAP, _constants.EXPORT_MAP_FORMATS.HTML, DEFAULT_EXPORT_HTML), (0, _defineProperty2[\"default\"])(_DEFAULT_EXPORT_MAP, _constants.EXPORT_MAP_FORMATS.JSON, DEFAULT_EXPORT_JSON), (0, _defineProperty2[\"default\"])(_DEFAULT_EXPORT_MAP, \"format\", _constants.EXPORT_MAP_FORMATS.HTML), _DEFAULT_EXPORT_MAP);\n/**\n * Default initial `uiState`\n * @memberof uiStateUpdaters\n * @constant\n * @property readOnly Default: `false`\n * @property activeSidePanel Default: `'layer'`\n * @property currentModal Default: `'addData'`\n * @property datasetKeyToRemove Default: `null`\n * @property visibleDropdown Default: `null`\n * @property exportImage Default: [`DEFAULT_EXPORT_IMAGE`](#default_export_image)\n * @property exportData Default: [`DEFAULT_EXPORT_DATA`](#default_export_data)\n * @property exportMap Default: [`DEFAULT_EXPORT_MAP`](#default_export_map)\n * @property mapControls Default: [`DEFAULT_MAP_CONTROLS`](#default_map_controls)\n * @property notifications Default: `[]`\n * @property notifications Default: `[]`\n * @property loadFiles\n * @public\n */\n\nexports.DEFAULT_EXPORT_MAP = DEFAULT_EXPORT_MAP;\nvar INITIAL_UI_STATE = {\n  readOnly: false,\n  activeSidePanel: DEFAULT_ACTIVE_SIDE_PANEL,\n  currentModal: DEFAULT_MODAL,\n  datasetKeyToRemove: null,\n  visibleDropdown: null,\n  // export image modal ui\n  exportImage: DEFAULT_EXPORT_IMAGE,\n  // export data modal ui\n  exportData: DEFAULT_EXPORT_DATA,\n  // html export\n  exportMap: DEFAULT_EXPORT_MAP,\n  // map control panels\n  mapControls: DEFAULT_MAP_CONTROLS,\n  // ui notifications\n  notifications: DEFAULT_NOTIFICATIONS,\n  // load files\n  loadFiles: DEFAULT_LOAD_FILES,\n  // Locale of the UI\n  locale: _localization.LOCALE_CODES.en,\n  layerPanelListView: 'list'\n};\n/* Updaters */\n\n/**\n * @memberof uiStateUpdaters\n\n */\n\nexports.INITIAL_UI_STATE = INITIAL_UI_STATE;\nvar initUiStateUpdater = function initUiStateUpdater(state, action) {\n  return _objectSpread(_objectSpread({}, state), (action.payload || {}).initialUiState);\n};\n/**\n * Toggle active side panel\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload id of side panel to be shown, one of `layer`, `filter`, `interaction`, `map`. close side panel if `null`\n * @returns nextState\n * @public\n */\n\nexports.initUiStateUpdater = initUiStateUpdater;\nvar toggleSidePanelUpdater = function toggleSidePanelUpdater(state, _ref) {\n  var id = _ref.payload;\n  return id === state.activeSidePanel ? state : _objectSpread(_objectSpread({}, state), {}, {\n    activeSidePanel: id\n  });\n};\n/**\n * Show and hide modal dialog\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @paramaction.payload id of modal to be shown, null to hide modals. One of:\n *  - [`DATA_TABLE_ID`](../constants/default-settings.md#data_table_id)\n *  - [`DELETE_DATA_ID`](../constants/default-settings.md#delete_data_id)\n *  - [`ADD_DATA_ID`](../constants/default-settings.md#add_data_id)\n *  - [`EXPORT_IMAGE_ID`](../constants/default-settings.md#export_image_id)\n *  - [`EXPORT_DATA_ID`](../constants/default-settings.md#export_data_id)\n *  - [`ADD_MAP_STYLE_ID`](../constants/default-settings.md#add_map_style_id)\n * @returns nextState\n * @public\n */\n\nexports.toggleSidePanelUpdater = toggleSidePanelUpdater;\nvar toggleModalUpdater = function toggleModalUpdater(state, _ref2) {\n  var id = _ref2.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    currentModal: id\n  });\n};\n/**\n * Hide and show side panel header dropdown, activated by clicking the share link on top of the side panel\n * @memberof uiStateUpdaters\n * @public\n */\n\nexports.toggleModalUpdater = toggleModalUpdater;\nvar showExportDropdownUpdater = function showExportDropdownUpdater(state, _ref3) {\n  var id = _ref3.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    visibleDropdown: id\n  });\n};\n/**\n * Hide side panel header dropdown, activated by clicking the share link on top of the side panel\n * @memberof uiStateUpdaters\n * @public\n */\n\nexports.showExportDropdownUpdater = showExportDropdownUpdater;\nvar hideExportDropdownUpdater = function hideExportDropdownUpdater(state) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    visibleDropdown: null\n  });\n};\n/**\n * Toggle active map control panel\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action action\n * @param action.payload map control panel id, one of the keys of: [`DEFAULT_MAP_CONTROLS`](#default_map_controls)\n * @returns nextState\n * @public\n */\n\nexports.hideExportDropdownUpdater = hideExportDropdownUpdater;\nvar toggleMapControlUpdater = function toggleMapControlUpdater(state, _ref4) {\n  var _ref4$payload = _ref4.payload,\n    panelId = _ref4$payload.panelId,\n    _ref4$payload$index = _ref4$payload.index,\n    index = _ref4$payload$index === void 0 ? 0 : _ref4$payload$index;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    mapControls: _objectSpread(_objectSpread({}, state.mapControls), {}, (0, _defineProperty2[\"default\"])({}, panelId, _objectSpread(_objectSpread({}, state.mapControls[panelId]), {}, {\n      // this handles split map interaction\n      // Toggling from within the same map will simply toggle the active property\n      // Toggling from within different maps we set the active property to true\n      active: index === state.mapControls[panelId].activeMapIndex ? !state.mapControls[panelId].active : true,\n      activeMapIndex: index\n    })))\n  });\n};\n/**\n * Toggle map control visibility\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action action\n * @param action.payload map control panel id, one of the keys of: [`DEFAULT_MAP_CONTROLS`](#default_map_controls)\n * @returns nextState\n * @public\n */\n\nexports.toggleMapControlUpdater = toggleMapControlUpdater;\nvar setMapControlVisibilityUpdater = function setMapControlVisibilityUpdater(state, _ref5) {\n  var _state$mapControls;\n  var _ref5$payload = _ref5.payload,\n    panelId = _ref5$payload.panelId,\n    show = _ref5$payload.show;\n  if (!((_state$mapControls = state.mapControls) !== null && _state$mapControls !== void 0 && _state$mapControls[panelId])) {\n    return state;\n  }\n  return _objectSpread(_objectSpread({}, state), {}, {\n    mapControls: _objectSpread(_objectSpread({}, state.mapControls), {}, (0, _defineProperty2[\"default\"])({}, panelId, _objectSpread(_objectSpread({}, state.mapControls[panelId]), {}, {\n      show: Boolean(show)\n    })))\n  });\n};\n/**\n * Toggle active map control panel\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload dataset id\n * @returns nextState\n * @public\n */\n\nexports.setMapControlVisibilityUpdater = setMapControlVisibilityUpdater;\nvar openDeleteModalUpdater = function openDeleteModalUpdater(state, _ref6) {\n  var datasetKeyToRemove = _ref6.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    currentModal: _constants.DELETE_DATA_ID,\n    datasetKeyToRemove: datasetKeyToRemove\n  });\n};\n/**\n * Set `exportImage.legend` to `true` or `false`\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @returns nextState\n * @public\n */\n\nexports.openDeleteModalUpdater = openDeleteModalUpdater;\nvar setExportImageSettingUpdater = function setExportImageSettingUpdater(state, _ref7) {\n  var newSetting = _ref7.payload;\n  var updated = _objectSpread(_objectSpread({}, state.exportImage), newSetting);\n  var imageSize = (0, _utils.calculateExportImageSize)(updated) || state.exportImage.imageSize;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    exportImage: _objectSpread(_objectSpread({}, updated), {}, {\n      // @ts-expect-error\n      // TODO: calculateExportImageSize does not return imageSize.zoomOffset,\n      // do we need take this value from current state, or return defaul value = 0\n      imageSize: imageSize\n    })\n  });\n};\n/**\n * Set `exportImage.setExportImageDataUri` to a image dataUri\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload export image data uri\n * @returns nextState\n * @public\n */\n\nexports.setExportImageSettingUpdater = setExportImageSettingUpdater;\nvar setExportImageDataUriUpdater = function setExportImageDataUriUpdater(state, _ref8) {\n  var dataUri = _ref8.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    exportImage: _objectSpread(_objectSpread({}, state.exportImage), {}, {\n      processing: false,\n      imageDataUri: dataUri\n    })\n  });\n};\n/**\n * @memberof uiStateUpdaters\n * @public\n */\n\nexports.setExportImageDataUriUpdater = setExportImageDataUriUpdater;\nvar setExportImageErrorUpdater = function setExportImageErrorUpdater(state, _ref9) {\n  var error = _ref9.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    exportImage: _objectSpread(_objectSpread({}, state.exportImage), {}, {\n      processing: false,\n      error: error\n    })\n  });\n};\n/**\n * Delete cached export image\n * @memberof uiStateUpdaters\n * @public\n */\n\nexports.setExportImageErrorUpdater = setExportImageErrorUpdater;\nvar cleanupExportImageUpdater = function cleanupExportImageUpdater(state) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    exportImage: _objectSpread(_objectSpread({}, state.exportImage), {}, {\n      exporting: false,\n      imageDataUri: '',\n      error: false,\n      processing: false,\n      center: false\n    })\n  });\n};\n/**\n * Start image exporting flow\n * @memberof uiStateUpdaters\n * @param state\n * @param options\n * @returns {UiState}\n * @public\n */\n\nexports.cleanupExportImageUpdater = cleanupExportImageUpdater;\nvar startExportingImageUpdater = function startExportingImageUpdater(state, _ref10) {\n  var _ref10$payload = _ref10.payload,\n    options = _ref10$payload === void 0 ? {} : _ref10$payload;\n  var imageSettings = _objectSpread(_objectSpread({}, options), {}, {\n    exporting: true\n  });\n  return (0, _composerHelpers.compose_)([cleanupExportImageUpdater, (0, _composerHelpers.apply_)(setExportImageSettingUpdater, (0, _composerHelpers.payload_)(imageSettings))])(state);\n};\n/**\n * Set selected dataset for export\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload dataset id\n * @returns nextState\n * @public\n */\n\nexports.startExportingImageUpdater = startExportingImageUpdater;\nvar setExportSelectedDatasetUpdater = function setExportSelectedDatasetUpdater(state, _ref11) {\n  var dataset = _ref11.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    exportData: _objectSpread(_objectSpread({}, state.exportData), {}, {\n      selectedDataset: dataset\n    })\n  });\n};\n/**\n * Set data format for exporting data\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload one of `'text/csv'`\n * @returns nextState\n * @public\n */\n\nexports.setExportSelectedDatasetUpdater = setExportSelectedDatasetUpdater;\nvar setExportDataTypeUpdater = function setExportDataTypeUpdater(state, _ref12) {\n  var dataType = _ref12.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    exportData: _objectSpread(_objectSpread({}, state.exportData), {}, {\n      dataType: dataType\n    })\n  });\n};\n/**\n * Whether to export filtered data, `true` or `false`\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload\n * @returns nextState\n * @public\n */\n\nexports.setExportDataTypeUpdater = setExportDataTypeUpdater;\nvar setExportFilteredUpdater = function setExportFilteredUpdater(state, _ref13) {\n  var filtered = _ref13.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    exportData: _objectSpread(_objectSpread({}, state.exportData), {}, {\n      filtered: filtered\n    })\n  });\n};\n/**\n * Whether to including data in map config, toggle between `true` or `false`\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @returns nextState\n * @public\n */\n\nexports.setExportFilteredUpdater = setExportFilteredUpdater;\nvar setExportDataUpdater = function setExportDataUpdater(state) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    exportMap: _objectSpread(_objectSpread({}, state.exportMap), {}, (0, _defineProperty2[\"default\"])({}, _constants.EXPORT_MAP_FORMATS.JSON, _objectSpread(_objectSpread({}, state.exportMap[_constants.EXPORT_MAP_FORMATS.JSON]), {}, {\n      hasData: !state.exportMap[_constants.EXPORT_MAP_FORMATS.JSON].hasData\n    })))\n  });\n};\n/**\n * whether to export a mapbox access to HTML single page\n * @param state - `uiState`\n * @param action\n * @param action.payload\n * @returns nextState\n * @public\n */\n\nexports.setExportDataUpdater = setExportDataUpdater;\nvar setUserMapboxAccessTokenUpdater = function setUserMapboxAccessTokenUpdater(state, _ref14) {\n  var userMapboxToken = _ref14.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    exportMap: _objectSpread(_objectSpread({}, state.exportMap), {}, (0, _defineProperty2[\"default\"])({}, _constants.EXPORT_MAP_FORMATS.HTML, _objectSpread(_objectSpread({}, state.exportMap[_constants.EXPORT_MAP_FORMATS.HTML]), {}, {\n      userMapboxToken: userMapboxToken\n    })))\n  });\n};\n/**\n * Sets the export map format\n * @param state - `uiState`\n * @param action\n * @param action.payload format to use to export the map into\n * @return nextState\n */\n\nexports.setUserMapboxAccessTokenUpdater = setUserMapboxAccessTokenUpdater;\nvar setExportMapFormatUpdater = function setExportMapFormatUpdater(state, _ref15) {\n  var format = _ref15.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    exportMap: _objectSpread(_objectSpread({}, state.exportMap), {}, {\n      // @ts-expect-error\n      format: format\n    })\n  });\n};\n/**\n * Set the export html map mode\n * @param state - `uiState`\n * @param action\n * @param action.payload to be set (available modes: EXPORT_HTML_MAP_MODES)\n * @return nextState\n */\n\nexports.setExportMapFormatUpdater = setExportMapFormatUpdater;\nvar setExportMapHTMLModeUpdater = function setExportMapHTMLModeUpdater(state, _ref16) {\n  var mode = _ref16.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    exportMap: _objectSpread(_objectSpread({}, state.exportMap), {}, (0, _defineProperty2[\"default\"])({}, _constants.EXPORT_MAP_FORMATS.HTML, _objectSpread(_objectSpread({}, state.exportMap[_constants.EXPORT_MAP_FORMATS.HTML]), {}, {\n      mode: mode\n    })))\n  });\n};\n/**\n * Adds a new notification.\n * Updates a notification in case of matching ids.\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload Params of a notification\n * @returns nextState\n * @public\n */\n\nexports.setExportMapHTMLModeUpdater = setExportMapHTMLModeUpdater;\nvar addNotificationUpdater = function addNotificationUpdater(state, _ref17) {\n  var payload = _ref17.payload;\n  var notifications; // @ts-expect-error\n\n  var payloadId = payload === null || payload === void 0 ? void 0 : payload.id;\n  var notificationToUpdate = payloadId ? state.notifications.find(function (n) {\n    return n.id === payloadId;\n  }) : null;\n  if (notificationToUpdate) {\n    notifications = state.notifications.map(function (n) {\n      return n.id === payloadId ? (0, _utils.createNotification)(payload) : n;\n    });\n  } else {\n    notifications = [].concat((0, _toConsumableArray2[\"default\"])(state.notifications || []), [(0, _utils.createNotification)(payload)]);\n  }\n  return _objectSpread(_objectSpread({}, state), {}, {\n    notifications: notifications\n  });\n};\n/**\n * Remove a notification\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload id of the notification to be removed\n * @returns nextState\n * @public\n */\n\nexports.addNotificationUpdater = addNotificationUpdater;\nvar removeNotificationUpdater = function removeNotificationUpdater(state, _ref18) {\n  var id = _ref18.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    notifications: state.notifications.filter(function (n) {\n      return n.id !== id;\n    })\n  });\n};\n/**\n * Fired when file loading begin\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @returns nextState\n * @public\n */\n\nexports.removeNotificationUpdater = removeNotificationUpdater;\nvar loadFilesUpdater = function loadFilesUpdater(state) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    loadFiles: _objectSpread(_objectSpread({}, state.loadFiles), {}, {\n      fileLoading: true\n    })\n  });\n};\n/**\n * Handles loading file success and set fileLoading property to false\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @returns nextState\n */\n\nexports.loadFilesUpdater = loadFilesUpdater;\nvar loadFilesSuccessUpdater = function loadFilesSuccessUpdater(state) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    loadFiles: _objectSpread(_objectSpread({}, state.loadFiles), {}, {\n      fileLoading: false\n    })\n  });\n};\n/**\n * Handles load file error and set fileLoading property to false\n * @memberof uiStateUpdaters\n * @param state\n * @param action\n * @param action.error\n * @returns nextState\n * @public\n */\n\nexports.loadFilesSuccessUpdater = loadFilesSuccessUpdater;\nvar loadFilesErrUpdater = function loadFilesErrUpdater(state, _ref19) {\n  var error = _ref19.error;\n  return addNotificationUpdater(_objectSpread(_objectSpread({}, state), {}, {\n    loadFiles: _objectSpread(_objectSpread({}, state.loadFiles), {}, {\n      fileLoading: false\n    })\n  }), {\n    payload: (0, _utils.errorNotification)({\n      message: (error || {}).message || 'Failed to upload files',\n      topic: _constants.DEFAULT_NOTIFICATION_TOPICS.global\n    })\n  });\n};\n/**\n * Handles toggle map split and reset all map control index to 0\n * @memberof uiStateUpdaters\n * @param state\n * @returns nextState\n * @public\n */\n\nexports.loadFilesErrUpdater = loadFilesErrUpdater;\nvar toggleSplitMapUpdater = function toggleSplitMapUpdater(state) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    mapControls: Object.entries(state.mapControls).reduce(function (acc, entry) {\n      return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2[\"default\"])({}, entry[0], _objectSpread(_objectSpread({}, entry[1]), {}, {\n        activeMapIndex: 0\n      })));\n    }, {})\n  });\n};\n/**\n * Toggle modal data\n * @memberof uiStateUpdaters\n * @param state\n * @returns nextState\n * @public\n */\n\nexports.toggleSplitMapUpdater = toggleSplitMapUpdater;\nvar showDatasetTableUpdater = function showDatasetTableUpdater(state) {\n  return toggleModalUpdater(state, {\n    payload: _constants.DATA_TABLE_ID\n  });\n};\n/**\n * Set the locale of the UI\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload\n * @param action.payload.locale locale\n * @returns nextState\n * @public\n */\n\nexports.showDatasetTableUpdater = showDatasetTableUpdater;\nvar setLocaleUpdater = function setLocaleUpdater(state, _ref20) {\n  var locale = _ref20.payload.locale;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    locale: locale\n  });\n};\n/**\n * Toggle layer panel list view\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload layer panel listView value. Can be 'list' or 'sortByDataset'\n * @returns nextState\n * @public\n */\n\nexports.setLocaleUpdater = setLocaleUpdater;\nvar toggleLayerPanelListViewUpdater = function toggleLayerPanelListViewUpdater(state, _ref21) {\n  var listView = _ref21.payload;\n  // @ts-expect-error\n  return listView === state.layerPanelListView ? state : _objectSpread(_objectSpread({}, state), {}, {\n    layerPanelListView: listView\n  });\n};\nexports.toggleLayerPanelListViewUpdater = toggleLayerPanelListViewUpdater;","map":{"version":3,"names":["exports","toggleLayerPanelListViewUpdater","setLocaleUpdater","showDatasetTableUpdater","toggleSplitMapUpdater","loadFilesErrUpdater","loadFilesSuccessUpdater","loadFilesUpdater","removeNotificationUpdater","addNotificationUpdater","setExportMapHTMLModeUpdater","setExportMapFormatUpdater","setUserMapboxAccessTokenUpdater","setExportDataUpdater","setExportFilteredUpdater","setExportDataTypeUpdater","setExportSelectedDatasetUpdater","startExportingImageUpdater","cleanupExportImageUpdater","setExportImageErrorUpdater","setExportImageDataUriUpdater","setExportImageSettingUpdater","openDeleteModalUpdater","setMapControlVisibilityUpdater","toggleMapControlUpdater","hideExportDropdownUpdater","showExportDropdownUpdater","toggleModalUpdater","toggleSidePanelUpdater","initUiStateUpdater","INITIAL_UI_STATE","DEFAULT_EXPORT_MAP","DEFAULT_EXPORT_JSON","DEFAULT_EXPORT_HTML","DEFAULT_NOTIFICATIONS","DEFAULT_EXPORT_DATA","DEFAULT_LOAD_FILES","DEFAULT_EXPORT_IMAGE","DEFAULT_MAP_CONTROLS","DEFAULT_MODAL","DEFAULT_ACTIVE_SIDE_PANEL","_toConsumableArray2","_interopRequireDefault","require","_defineProperty2","_constants","_localization","_utils","_composerHelpers","_DEFAULT_EXPORT_MAP","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","ADD_DATA_ID","uiStateUpdaters","DEFAULT_MAP_CONTROLS_FEATURES","show","active","disableClose","activeMapIndex","MAP_CONTROLS","reduce","_final","current","ratio","EXPORT_IMG_RATIOS","SCREEN","legend","mapH","mapW","imageSize","zoomOffset","scale","imageW","imageH","center","exporting","processing","error","fileLoading","selectedDataset","dataType","EXPORT_DATA_TYPE","CSV","filtered","exportMapboxAccessToken","userMapboxToken","hasData","readOnly","activeSidePanel","datasetKeyToRemove","visibleDropdown","exportImage","exportMap","mapControls","notifications","loadFiles","locale","LOCALE_CODES","en","layerPanelListView","state","action","payload","initialUiState","_ref","_ref2","id","currentModal","_ref3","_ref4","_ref4$payload","panelId","_ref4$payload$index","index","_ref5","_state$mapControls","_ref5$payload","Boolean","_ref6","DELETE_DATA_ID","_ref7","newSetting","updated","_ref8","dataUri","imageDataUri","_ref9","imageSettings","options","compose_","apply_","payload_","dataset","_ref11","exportData","_ref12","_ref13","EXPORT_MAP_FORMATS","JSON","_ref14","HTML","_ref15","format","mode","_ref17","payloadId","notificationToUpdate","find","n","concat","createNotification","_ref18","errorNotification","message","topic","DEFAULT_NOTIFICATION_TOPICS","global","entries","acc","entry","DATA_TABLE_ID","_ref20"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/reducers/src/ui-state-updaters.ts"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  ADD_DATA_ID,\n  DATA_TABLE_ID,\n  DEFAULT_NOTIFICATION_TOPICS,\n  DELETE_DATA_ID,\n  EXPORT_DATA_TYPE,\n  EXPORT_HTML_MAP_MODES,\n  EXPORT_IMG_RATIOS,\n  EXPORT_MAP_FORMATS,\n  RESOLUTIONS,\n  MAP_CONTROLS,\n  ExportImage\n} from '@kepler.gl/constants';\nimport {LOCALE_CODES} from '@kepler.gl/localization';\nimport {\n  createNotification,\n  errorNotification,\n  calculateExportImageSize\n} from '@kepler.gl/utils';\nimport {payload_, apply_, compose_} from './composer-helpers';\n\nimport {\n  ActionTypes,\n  KeplerGlInitPayload,\n  LoadFilesErrUpdaterAction,\n  UIStateActions\n} from '@kepler.gl/actions';\nimport {\n  ExportData,\n  ExportHtml,\n  ExportJson,\n  ExportMap,\n  MapControl,\n  MapControls,\n  UiState\n} from '@kepler.gl/types';\n\nexport const DEFAULT_ACTIVE_SIDE_PANEL = 'layer';\nexport const DEFAULT_MODAL = ADD_DATA_ID;\n\n/**\n * Updaters for `uiState` reducer. Can be used in your root reducer to directly modify kepler.gl's state.\n * Read more about [Using updaters](../advanced-usage/using-updaters.md)\n *\n * @public\n * @example\n *\n * import keplerGlReducer, {uiStateUpdaters} from 'kepler.gl/reducers';\n * // Root Reducer\n * const reducers = combineReducers({\n *  keplerGl: keplerGlReducer,\n *  app: appReducer\n * });\n *\n * const composedReducer = (state, action) => {\n *  switch (action.type) {\n *    // click button to close side panel\n *    case 'CLICK_BUTTON':\n *      return {\n *        ...state,\n *        keplerGl: {\n *          ...state.keplerGl,\n *          foo: {\n *             ...state.keplerGl.foo,\n *             uiState: uiStateUpdaters.toggleSidePanelUpdater(\n *               uiState, {payload: null}\n *             )\n *          }\n *        }\n *      };\n *  }\n *  return reducers(state, action);\n * };\n *\n * export default composedReducer;\n */\n/* eslint-disable no-unused-vars */\n// @ts-ignore\nconst uiStateUpdaters = null;\n/* eslint-enable no-unused-vars */\n\nconst DEFAULT_MAP_CONTROLS_FEATURES: MapControl = {\n  show: true,\n  active: false,\n  disableClose: false,\n  // defines which map index users are interacting with (through map controls)\n  activeMapIndex: 0\n};\n\n/**\n * A list of map control visibility and whether is it active.\n * @memberof uiStateUpdaters\n * @constant\n * @property visibleLayers Default: `{show: true, active: false}`\n * @property mapLegend Default: `{show: true, active: false}`\n * @property toggle3d Default: `{show: true}`\n * @property splitMap Default: `{show: true}`\n * @property mapDraw Default: `{show: true, active: false}`\n * @property mapLocale Default: `{show: false, active: false}`\n * @public\n */\nexport const DEFAULT_MAP_CONTROLS: MapControls = (Object.keys(MAP_CONTROLS) as Array<\n  keyof typeof MAP_CONTROLS\n>).reduce(\n  (final, current) => ({\n    ...final,\n    [current]: DEFAULT_MAP_CONTROLS_FEATURES\n  }),\n  {} as MapControls\n);\n\n/**\n * Default image export config\n * @memberof uiStateUpdaters\n * @constant\n * @property ratio Default: `'SCREEN'`,\n * @property resolution Default: `'ONE_X'`,\n * @property legend Default: `false`,\n * @property mapH Default: 0,\n * @property mapW Default: 0,\n * @property imageSize Default: {zoomOffset: 0, scale: 1, imageW: 0, imageH: 0},\n * @property imageDataUri Default: `''`,\n * @property exporting Default: `false`\n * @property error Default: `false`\n * @public\n */\nexport const DEFAULT_EXPORT_IMAGE: ExportImage = {\n  // user options\n  ratio: EXPORT_IMG_RATIOS.SCREEN,\n  resolution: RESOLUTIONS.ONE_X,\n  legend: false,\n  mapH: 0,\n  mapW: 0,\n  imageSize: {\n    zoomOffset: 0,\n    scale: 1,\n    imageW: 0,\n    imageH: 0\n  },\n  // when this is set to true, the mock map viewport will move to the center of data\n  center: false,\n  // exporting state\n  imageDataUri: '',\n  // exporting: used to attach plot-container to dom\n  exporting: false,\n  // processing: used as loading indicator when export image is being produced\n  processing: false,\n  error: false\n};\n\nexport const DEFAULT_LOAD_FILES = {\n  fileLoading: false\n};\n\n/**\n * Default initial `exportData` settings\n * @memberof uiStateUpdaters\n * @constant\n * @property selectedDataset Default: `''`,\n * @property dataType Default: `'csv'`,\n * @property filtered Default: `true`,\n * @public\n */\nexport const DEFAULT_EXPORT_DATA: ExportData = {\n  selectedDataset: '',\n  dataType: EXPORT_DATA_TYPE.CSV,\n  filtered: true\n};\n\n/**\n * @constant\n */\nexport const DEFAULT_NOTIFICATIONS = [];\n\n/**\n * @constant\n * @property exportMapboxAccessToken - Default: null, this is used when we provide a default mapbox token for users to take advantage of\n * @property userMapboxToken - Default: '', mapbox token provided by user through input field\n * @property mode - Default: 'READ', read only or editable\n * @public\n */\nexport const DEFAULT_EXPORT_HTML: ExportHtml = {\n  exportMapboxAccessToken: null,\n  userMapboxToken: '',\n  mode: EXPORT_HTML_MAP_MODES.READ\n};\n\n/**\n * @constant\n * @property hasData - Default: 'true',\n * @public\n */\nexport const DEFAULT_EXPORT_JSON: ExportJson = {\n  hasData: true\n};\n\n/**\n * Export Map Config\n * @constant\n * @property HTML - Default: 'DEFAULT_EXPORT_HTML',\n * @property JSON - Default: 'DEFAULT_EXPORT_JSON',\n * @property format - Default: 'HTML',\n * @public\n */\nexport const DEFAULT_EXPORT_MAP: ExportMap = {\n  [EXPORT_MAP_FORMATS.HTML]: DEFAULT_EXPORT_HTML,\n  [EXPORT_MAP_FORMATS.JSON]: DEFAULT_EXPORT_JSON,\n  format: EXPORT_MAP_FORMATS.HTML\n};\n\n/**\n * Default initial `uiState`\n * @memberof uiStateUpdaters\n * @constant\n * @property readOnly Default: `false`\n * @property activeSidePanel Default: `'layer'`\n * @property currentModal Default: `'addData'`\n * @property datasetKeyToRemove Default: `null`\n * @property visibleDropdown Default: `null`\n * @property exportImage Default: [`DEFAULT_EXPORT_IMAGE`](#default_export_image)\n * @property exportData Default: [`DEFAULT_EXPORT_DATA`](#default_export_data)\n * @property exportMap Default: [`DEFAULT_EXPORT_MAP`](#default_export_map)\n * @property mapControls Default: [`DEFAULT_MAP_CONTROLS`](#default_map_controls)\n * @property notifications Default: `[]`\n * @property notifications Default: `[]`\n * @property loadFiles\n * @public\n */\nexport const INITIAL_UI_STATE: UiState = {\n  readOnly: false,\n  activeSidePanel: DEFAULT_ACTIVE_SIDE_PANEL,\n  currentModal: DEFAULT_MODAL,\n  datasetKeyToRemove: null,\n  visibleDropdown: null,\n  // export image modal ui\n  exportImage: DEFAULT_EXPORT_IMAGE,\n  // export data modal ui\n  exportData: DEFAULT_EXPORT_DATA,\n  // html export\n  exportMap: DEFAULT_EXPORT_MAP,\n  // map control panels\n  mapControls: DEFAULT_MAP_CONTROLS,\n  // ui notifications\n  notifications: DEFAULT_NOTIFICATIONS,\n  // load files\n  loadFiles: DEFAULT_LOAD_FILES,\n  // Locale of the UI\n  locale: LOCALE_CODES.en,\n  layerPanelListView: 'list'\n};\n\n/* Updaters */\n/**\n * @memberof uiStateUpdaters\n\n */\nexport const initUiStateUpdater = (\n  state: UiState,\n  action: {\n    type?: typeof ActionTypes['INIT'];\n    payload: KeplerGlInitPayload;\n  }\n): UiState => ({\n  ...state,\n  ...(action.payload || {}).initialUiState\n});\n\n/**\n * Toggle active side panel\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload id of side panel to be shown, one of `layer`, `filter`, `interaction`, `map`. close side panel if `null`\n * @returns nextState\n * @public\n */\nexport const toggleSidePanelUpdater = (\n  state: UiState,\n  {payload: id}: UIStateActions.ToggleSidePanelUpdaterAction\n): UiState => {\n  return id === state.activeSidePanel\n    ? state\n    : {\n        ...state,\n        activeSidePanel: id\n      };\n};\n\n/**\n * Show and hide modal dialog\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @paramaction.payload id of modal to be shown, null to hide modals. One of:\n *  - [`DATA_TABLE_ID`](../constants/default-settings.md#data_table_id)\n *  - [`DELETE_DATA_ID`](../constants/default-settings.md#delete_data_id)\n *  - [`ADD_DATA_ID`](../constants/default-settings.md#add_data_id)\n *  - [`EXPORT_IMAGE_ID`](../constants/default-settings.md#export_image_id)\n *  - [`EXPORT_DATA_ID`](../constants/default-settings.md#export_data_id)\n *  - [`ADD_MAP_STYLE_ID`](../constants/default-settings.md#add_map_style_id)\n * @returns nextState\n * @public\n */\nexport const toggleModalUpdater = (\n  state: UiState,\n  {payload: id}: UIStateActions.ToggleModalUpdaterAction\n): UiState => ({\n  ...state,\n  currentModal: id\n});\n\n/**\n * Hide and show side panel header dropdown, activated by clicking the share link on top of the side panel\n * @memberof uiStateUpdaters\n * @public\n */\nexport const showExportDropdownUpdater = (\n  state: UiState,\n  {payload: id}: UIStateActions.ShowExportDropdownUpdaterAction\n): UiState => ({\n  ...state,\n  visibleDropdown: id\n});\n\n/**\n * Hide side panel header dropdown, activated by clicking the share link on top of the side panel\n * @memberof uiStateUpdaters\n * @public\n */\nexport const hideExportDropdownUpdater = (state: UiState): UiState => ({\n  ...state,\n  visibleDropdown: null\n});\n\n/**\n * Toggle active map control panel\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action action\n * @param action.payload map control panel id, one of the keys of: [`DEFAULT_MAP_CONTROLS`](#default_map_controls)\n * @returns nextState\n * @public\n */\nexport const toggleMapControlUpdater = (\n  state: UiState,\n  {payload: {panelId, index = 0}}: UIStateActions.ToggleMapControlUpdaterAction\n): UiState => ({\n  ...state,\n  mapControls: {\n    ...state.mapControls,\n    [panelId]: {\n      ...state.mapControls[panelId],\n      // this handles split map interaction\n      // Toggling from within the same map will simply toggle the active property\n      // Toggling from within different maps we set the active property to true\n      active:\n        index === state.mapControls[panelId].activeMapIndex\n          ? !state.mapControls[panelId].active\n          : true,\n      activeMapIndex: index\n    }\n  }\n});\n\n/**\n * Toggle map control visibility\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action action\n * @param action.payload map control panel id, one of the keys of: [`DEFAULT_MAP_CONTROLS`](#default_map_controls)\n * @returns nextState\n * @public\n */\nexport const setMapControlVisibilityUpdater = (\n  state: UiState,\n  {payload: {panelId, show}}: UIStateActions.setMapControlVisibilityUpdaterAction\n): UiState => {\n  if (!state.mapControls?.[panelId]) {\n    return state;\n  }\n\n  return {\n    ...state,\n    mapControls: {\n      ...state.mapControls,\n      [panelId]: {\n        ...state.mapControls[panelId],\n        show: Boolean(show)\n      }\n    }\n  };\n};\n\n/**\n * Toggle active map control panel\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload dataset id\n * @returns nextState\n * @public\n */\nexport const openDeleteModalUpdater = (\n  state: UiState,\n  {payload: datasetKeyToRemove}: UIStateActions.OpenDeleteModalUpdaterAction\n): UiState => ({\n  ...state,\n  currentModal: DELETE_DATA_ID,\n  datasetKeyToRemove\n});\n\n/**\n * Set `exportImage.legend` to `true` or `false`\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @returns nextState\n * @public\n */\nexport const setExportImageSettingUpdater = (\n  state: UiState,\n  {payload: newSetting}: UIStateActions.SetExportImageSettingUpdaterAction\n): UiState => {\n  const updated = {...state.exportImage, ...newSetting};\n  const imageSize = calculateExportImageSize(updated) || state.exportImage.imageSize;\n\n  return {\n    ...state,\n    exportImage: {\n      ...updated,\n      // @ts-expect-error\n      // TODO: calculateExportImageSize does not return imageSize.zoomOffset,\n      // do we need take this value from current state, or return defaul value = 0\n      imageSize\n    }\n  };\n};\n\n/**\n * Set `exportImage.setExportImageDataUri` to a image dataUri\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload export image data uri\n * @returns nextState\n * @public\n */\nexport const setExportImageDataUriUpdater = (\n  state: UiState,\n  {payload: dataUri}: UIStateActions.SetExportImageDataUriUpdaterAction\n): UiState => ({\n  ...state,\n  exportImage: {\n    ...state.exportImage,\n    processing: false,\n    imageDataUri: dataUri\n  }\n});\n\n/**\n * @memberof uiStateUpdaters\n * @public\n */\nexport const setExportImageErrorUpdater = (\n  state: UiState,\n  {payload: error}: UIStateActions.SetExportImageErrorUpdaterAction\n): UiState => ({\n  ...state,\n  exportImage: {\n    ...state.exportImage,\n    processing: false,\n    error\n  }\n});\n\n/**\n * Delete cached export image\n * @memberof uiStateUpdaters\n * @public\n */\nexport const cleanupExportImageUpdater = (state: UiState): UiState => ({\n  ...state,\n  exportImage: {\n    ...state.exportImage,\n    exporting: false,\n    imageDataUri: '',\n    error: false,\n    processing: false,\n    center: false\n  }\n});\n\n/**\n * Start image exporting flow\n * @memberof uiStateUpdaters\n * @param state\n * @param options\n * @returns {UiState}\n * @public\n */\nexport const startExportingImageUpdater = (\n  state: UiState,\n  {payload: options = {}}: {payload: Partial<ExportImage>}\n): UiState => {\n  const imageSettings = {\n    ...options,\n    exporting: true\n  };\n\n  return compose_([\n    cleanupExportImageUpdater,\n    apply_(setExportImageSettingUpdater, payload_(imageSettings))\n  ])(state);\n};\n\n/**\n * Set selected dataset for export\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload dataset id\n * @returns nextState\n * @public\n */\nexport const setExportSelectedDatasetUpdater = (\n  state: UiState,\n  {payload: dataset}: UIStateActions.SetExportSelectedDatasetUpdaterAction\n): UiState => ({\n  ...state,\n  exportData: {\n    ...state.exportData,\n    selectedDataset: dataset\n  }\n});\n\n/**\n * Set data format for exporting data\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload one of `'text/csv'`\n * @returns nextState\n * @public\n */\nexport const setExportDataTypeUpdater = (\n  state: UiState,\n  {payload: dataType}: UIStateActions.SetExportDataTypeUpdaterAction\n): UiState => ({\n  ...state,\n  exportData: {\n    ...state.exportData,\n    dataType\n  }\n});\n\n/**\n * Whether to export filtered data, `true` or `false`\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload\n * @returns nextState\n * @public\n */\nexport const setExportFilteredUpdater = (\n  state: UiState,\n  {payload: filtered}: UIStateActions.SetExportFilteredUpdaterAction\n): UiState => ({\n  ...state,\n  exportData: {\n    ...state.exportData,\n    filtered\n  }\n});\n\n/**\n * Whether to including data in map config, toggle between `true` or `false`\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @returns nextState\n * @public\n */\nexport const setExportDataUpdater = (state: UiState): UiState => ({\n  ...state,\n  exportMap: {\n    ...state.exportMap,\n    [EXPORT_MAP_FORMATS.JSON]: {\n      ...state.exportMap[EXPORT_MAP_FORMATS.JSON],\n      hasData: !state.exportMap[EXPORT_MAP_FORMATS.JSON].hasData\n    }\n  }\n});\n\n/**\n * whether to export a mapbox access to HTML single page\n * @param state - `uiState`\n * @param action\n * @param action.payload\n * @returns nextState\n * @public\n */\nexport const setUserMapboxAccessTokenUpdater = (\n  state: UiState,\n  {payload: userMapboxToken}: UIStateActions.SetUserMapboxAccessTokenUpdaterAction\n): UiState => ({\n  ...state,\n  exportMap: {\n    ...state.exportMap,\n    [EXPORT_MAP_FORMATS.HTML]: {\n      ...state.exportMap[EXPORT_MAP_FORMATS.HTML],\n      userMapboxToken\n    }\n  }\n});\n\n/**\n * Sets the export map format\n * @param state - `uiState`\n * @param action\n * @param action.payload format to use to export the map into\n * @return nextState\n */\nexport const setExportMapFormatUpdater = (\n  state: UiState,\n  {payload: format}: UIStateActions.SetExportMapFormatUpdaterAction\n): UiState => ({\n  ...state,\n  exportMap: {\n    ...state.exportMap,\n    // @ts-expect-error\n    format\n  }\n});\n\n/**\n * Set the export html map mode\n * @param state - `uiState`\n * @param action\n * @param action.payload to be set (available modes: EXPORT_HTML_MAP_MODES)\n * @return nextState\n */\nexport const setExportMapHTMLModeUpdater = (\n  state: UiState,\n  {payload: mode}: UIStateActions.SetExportHTMLMapModeUpdaterAction\n): UiState => ({\n  ...state,\n  exportMap: {\n    ...state.exportMap,\n    [EXPORT_MAP_FORMATS.HTML]: {\n      ...state.exportMap[EXPORT_MAP_FORMATS.HTML],\n      mode\n    }\n  }\n});\n\n/**\n * Adds a new notification.\n * Updates a notification in case of matching ids.\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload Params of a notification\n * @returns nextState\n * @public\n */\nexport const addNotificationUpdater = (\n  state: UiState,\n  {payload}: UIStateActions.AddNotificationUpdaterAction\n): UiState => {\n  let notifications;\n\n  // @ts-expect-error\n  const payloadId = payload?.id;\n  const notificationToUpdate = payloadId ? state.notifications.find(n => n.id === payloadId) : null;\n  if (notificationToUpdate) {\n    notifications = state.notifications.map(n =>\n      n.id === payloadId ? createNotification(payload) : n\n    );\n  } else {\n    notifications = [...(state.notifications || []), createNotification(payload)];\n  }\n\n  return {...state, notifications};\n};\n\n/**\n * Remove a notification\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload id of the notification to be removed\n * @returns nextState\n * @public\n */\nexport const removeNotificationUpdater = (\n  state: UiState,\n  {payload: id}: UIStateActions.RemoveNotificationUpdaterAction\n): UiState => ({\n  ...state,\n  notifications: state.notifications.filter(n => n.id !== id)\n});\n\n/**\n * Fired when file loading begin\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @returns nextState\n * @public\n */\nexport const loadFilesUpdater = (state: UiState): UiState => ({\n  ...state,\n  loadFiles: {\n    ...state.loadFiles,\n    fileLoading: true\n  }\n});\n\n/**\n * Handles loading file success and set fileLoading property to false\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @returns nextState\n */\nexport const loadFilesSuccessUpdater = (state: UiState): UiState => ({\n  ...state,\n  loadFiles: {\n    ...state.loadFiles,\n    fileLoading: false\n  }\n});\n\n/**\n * Handles load file error and set fileLoading property to false\n * @memberof uiStateUpdaters\n * @param state\n * @param action\n * @param action.error\n * @returns nextState\n * @public\n */\nexport const loadFilesErrUpdater = (state: UiState, {error}: LoadFilesErrUpdaterAction): UiState =>\n  addNotificationUpdater(\n    {\n      ...state,\n      loadFiles: {\n        ...state.loadFiles,\n        fileLoading: false\n      }\n    },\n    {\n      payload: errorNotification({\n        message: (error || {}).message || 'Failed to upload files',\n        topic: DEFAULT_NOTIFICATION_TOPICS.global\n      })\n    }\n  );\n\n/**\n * Handles toggle map split and reset all map control index to 0\n * @memberof uiStateUpdaters\n * @param state\n * @returns nextState\n * @public\n */\nexport const toggleSplitMapUpdater = (state: UiState): UiState => ({\n  ...state,\n  mapControls: Object.entries(state.mapControls).reduce(\n    (acc, entry) => ({\n      ...acc,\n      [entry[0]]: {\n        ...entry[1],\n        activeMapIndex: 0\n      }\n    }),\n    {} as MapControls\n  )\n});\n\n/**\n * Toggle modal data\n * @memberof uiStateUpdaters\n * @param state\n * @returns nextState\n * @public\n */\nexport const showDatasetTableUpdater = (state: UiState): UiState =>\n  toggleModalUpdater(state, {payload: DATA_TABLE_ID});\n\n/**\n * Set the locale of the UI\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload\n * @param action.payload.locale locale\n * @returns nextState\n * @public\n */\nexport const setLocaleUpdater = (\n  state: UiState,\n  {payload: {locale}}: UIStateActions.SetLocaleUpdaterAction\n): UiState => ({\n  ...state,\n  locale\n});\n\n/**\n * Toggle layer panel list view\n * @memberof uiStateUpdaters\n * @param state `uiState`\n * @param action\n * @param action.payload layer panel listView value. Can be 'list' or 'sortByDataset'\n * @returns nextState\n * @public\n */\nexport const toggleLayerPanelListViewUpdater = (\n  state: UiState,\n  {payload: listView}: UIStateActions.ToggleLayerPanelListViewAction\n): UiState => {\n  // @ts-expect-error\n  return listView === state.layerPanelListView\n    ? state\n    : {\n        ...state,\n        layerPanelListView: listView\n      };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}