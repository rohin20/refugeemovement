{"ast":null,"code":"import _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { assert, Vector2 } from '@math.gl/core';\nimport PerspectiveOffCenterFrustum from './perspective-off-center-frustum';\nvar defined = function defined(val) {\n  return val !== null && typeof val !== 'undefined';\n};\nvar PerspectiveFrustum = /*#__PURE__*/function () {\n  function PerspectiveFrustum() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, PerspectiveFrustum);\n    _defineProperty(this, \"_offCenterFrustum\", new PerspectiveOffCenterFrustum());\n    _defineProperty(this, \"fov\", void 0);\n    _defineProperty(this, \"_fov\", void 0);\n    _defineProperty(this, \"_fovy\", void 0);\n    _defineProperty(this, \"_sseDenominator\", void 0);\n    _defineProperty(this, \"aspectRatio\", void 0);\n    _defineProperty(this, \"_aspectRatio\", void 0);\n    _defineProperty(this, \"near\", void 0);\n    _defineProperty(this, \"_near\", void 0);\n    _defineProperty(this, \"far\", void 0);\n    _defineProperty(this, \"_far\", void 0);\n    _defineProperty(this, \"xOffset\", void 0);\n    _defineProperty(this, \"_xOffset\", void 0);\n    _defineProperty(this, \"yOffset\", void 0);\n    _defineProperty(this, \"_yOffset\", void 0);\n    var fov = options.fov,\n      aspectRatio = options.aspectRatio,\n      _options$near = options.near,\n      near = _options$near === void 0 ? 1.0 : _options$near,\n      _options$far = options.far,\n      far = _options$far === void 0 ? 500000000.0 : _options$far,\n      _options$xOffset = options.xOffset,\n      xOffset = _options$xOffset === void 0 ? 0.0 : _options$xOffset,\n      _options$yOffset = options.yOffset,\n      yOffset = _options$yOffset === void 0 ? 0.0 : _options$yOffset;\n    this.fov = fov;\n    this.aspectRatio = aspectRatio;\n    this.near = near;\n    this.far = far;\n    this.xOffset = xOffset;\n    this.yOffset = yOffset;\n  }\n  _createClass(PerspectiveFrustum, [{\n    key: \"clone\",\n    value: function clone() {\n      return new PerspectiveFrustum({\n        aspectRatio: this.aspectRatio,\n        fov: this.fov,\n        near: this.near,\n        far: this.far\n      });\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      if (!defined(other) || !(other instanceof PerspectiveFrustum)) {\n        return false;\n      }\n      this._update();\n      other._update();\n      return this.fov === other.fov && this.aspectRatio === other.aspectRatio && this.near === other.near && this.far === other.far && this._offCenterFrustum.equals(other._offCenterFrustum);\n    }\n  }, {\n    key: \"projectionMatrix\",\n    get: function get() {\n      this._update();\n      return this._offCenterFrustum.projectionMatrix;\n    }\n  }, {\n    key: \"infiniteProjectionMatrix\",\n    get: function get() {\n      this._update();\n      return this._offCenterFrustum.infiniteProjectionMatrix;\n    }\n  }, {\n    key: \"fovy\",\n    get: function get() {\n      this._update();\n      return this._fovy;\n    }\n  }, {\n    key: \"sseDenominator\",\n    get: function get() {\n      this._update();\n      return this._sseDenominator;\n    }\n  }, {\n    key: \"computeCullingVolume\",\n    value: function computeCullingVolume(position, direction, up) {\n      this._update();\n      return this._offCenterFrustum.computeCullingVolume(position, direction, up);\n    }\n  }, {\n    key: \"getPixelDimensions\",\n    value: function getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, result) {\n      this._update();\n      return this._offCenterFrustum.getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, result || new Vector2());\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      assert(Number.isFinite(this.fov) && Number.isFinite(this.aspectRatio) && Number.isFinite(this.near) && Number.isFinite(this.far));\n      var f = this._offCenterFrustum;\n      if (this.fov !== this._fov || this.aspectRatio !== this._aspectRatio || this.near !== this._near || this.far !== this._far || this.xOffset !== this._xOffset || this.yOffset !== this._yOffset) {\n        assert(this.fov >= 0 && this.fov < Math.PI);\n        assert(this.aspectRatio > 0);\n        assert(this.near >= 0 && this.near < this.far);\n        this._aspectRatio = this.aspectRatio;\n        this._fov = this.fov;\n        this._fovy = this.aspectRatio <= 1 ? this.fov : Math.atan(Math.tan(this.fov * 0.5) / this.aspectRatio) * 2.0;\n        this._near = this.near;\n        this._far = this.far;\n        this._sseDenominator = 2.0 * Math.tan(0.5 * this._fovy);\n        this._xOffset = this.xOffset;\n        this._yOffset = this.yOffset;\n        f.top = this.near * Math.tan(0.5 * this._fovy);\n        f.bottom = -f.top;\n        f.right = this.aspectRatio * f.top;\n        f.left = -f.right;\n        f.near = this.near;\n        f.far = this.far;\n        f.right += this.xOffset;\n        f.left += this.xOffset;\n        f.top += this.yOffset;\n        f.bottom += this.yOffset;\n      }\n    }\n  }]);\n  return PerspectiveFrustum;\n}();\nexport { PerspectiveFrustum as default };","map":{"version":3,"names":["assert","Vector2","PerspectiveOffCenterFrustum","defined","val","PerspectiveFrustum","options","arguments","length","undefined","_classCallCheck","_defineProperty","fov","aspectRatio","_options$near","near","_options$far","far","_options$xOffset","xOffset","_options$yOffset","yOffset","_createClass","key","value","clone","equals","other","_update","_offCenterFrustum","get","projectionMatrix","infiniteProjectionMatrix","_fovy","_sseDenominator","computeCullingVolume","position","direction","up","getPixelDimensions","drawingBufferWidth","drawingBufferHeight","distance","result","Number","isFinite","f","_fov","_aspectRatio","_near","_far","_xOffset","_yOffset","Math","PI","atan","tan","top","bottom","right","left","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@math.gl/culling/src/lib/perspective-frustum.ts"],"sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n// Note: This class is still an experimental export, mainly used by other test cases\n// - It has not been fully adapted to math.gl conventions\n// - Documentation has not been ported\n\nimport {assert, Matrix4, NumericArray, Vector2} from '@math.gl/core';\nimport PerspectiveOffCenterFrustum from './perspective-off-center-frustum';\nimport CullingVolume from './culling-volume';\n\nconst defined = (val) => val !== null && typeof val !== 'undefined';\n\ntype PerspectiveFrustumOptions = {\n  /** The angle of the field of view (FOV), in radians. */\n  fov?: number;\n  /** The aspect ratio of the frustum's width to it's height. */\n  aspectRatio?: number;\n  /** The distance of the near plane. */\n  near?: number;\n  /** The distance of the far plane. */\n  far?: number;\n  /** The offset in the x direction. */\n  xOffset?: number;\n  /** The offset in the y direction. */\n  yOffset?: number;\n};\n\n/**\n * The viewing frustum is defined by 6 planes.\n * Each plane is represented by a {@link Vector4} object, where the x, y, and z components\n * define the unit vector normal to the plane, and the w component is the distance of the\n * plane from the origin/camera position.\n *\n * @alias PerspectiveFrustum\n *\n * @example\n * var frustum = new PerspectiveFrustum({\n *     fov : Math.PI_OVER_THREE,\n *     aspectRatio : canvas.clientWidth / canvas.clientHeight\n *     near : 1.0,\n *     far : 1000.0\n * });\n *\n * @see PerspectiveOffCenterFrustum\n */\nexport default class PerspectiveFrustum {\n  private _offCenterFrustum = new PerspectiveOffCenterFrustum();\n  /**\n   * The angle of the field of view (FOV), in radians.  This angle will be used\n   * as the horizontal FOV if the width is greater than the height, otherwise\n   * it will be the vertical FOV.\n   */\n  fov?: number;\n  private _fov: number;\n  private _fovy: number;\n  private _sseDenominator: number;\n  /**\n   * The aspect ratio of the frustum's width to it's height.\n   */\n  aspectRatio?: number;\n  private _aspectRatio: number;\n  /**\n   * The distance of the near plane.\n   * @default 1.0\n   */\n  near: number;\n  private _near: number;\n  /**\n   * The distance of the far plane.\n   * @default 500000000.0\n   */\n  far: number;\n  private _far: number;\n  /**\n   * Offsets the frustum in the x direction.\n   * @default 0.0\n   */\n  xOffset: number;\n  private _xOffset: number;\n  /**\n   * Offsets the frustum in the y direction.\n   * @default 0.0\n   */\n  yOffset: number;\n  private _yOffset: number;\n\n  constructor(options: PerspectiveFrustumOptions = {}) {\n    const {fov, aspectRatio, near = 1.0, far = 500000000.0, xOffset = 0.0, yOffset = 0.0} = options;\n\n    this.fov = fov;\n    this.aspectRatio = aspectRatio;\n    this.near = near;\n    this.far = far;\n    this.xOffset = xOffset;\n    this.yOffset = yOffset;\n  }\n\n  /**\n   * Returns a duplicate of a PerspectiveFrustum instance.\n   */\n  clone(): PerspectiveFrustum {\n    return new PerspectiveFrustum({\n      aspectRatio: this.aspectRatio,\n      fov: this.fov,\n      near: this.near,\n      far: this.far\n    });\n  }\n\n  /**\n   * Compares the provided PerspectiveFrustum componentwise and returns\n   * <code>true</code> if they are equal, <code>false</code> otherwise.\n   */\n  equals(other: PerspectiveFrustum): boolean {\n    if (!defined(other) || !(other instanceof PerspectiveFrustum)) {\n      return false;\n    }\n\n    this._update();\n    other._update();\n\n    return (\n      this.fov === other.fov &&\n      this.aspectRatio === other.aspectRatio &&\n      this.near === other.near &&\n      this.far === other.far &&\n      this._offCenterFrustum.equals(other._offCenterFrustum)\n    );\n  }\n\n  /**\n   * Gets the perspective projection matrix computed from the view this.\n   */\n  get projectionMatrix(): Matrix4 {\n    this._update();\n    return this._offCenterFrustum.projectionMatrix;\n  }\n\n  /**\n   * The perspective projection matrix computed from the view frustum with an infinite far plane.\n   */\n  get infiniteProjectionMatrix(): Matrix4 {\n    this._update();\n    return this._offCenterFrustum.infiniteProjectionMatrix;\n  }\n\n  /**\n   * Gets the angle of the vertical field of view, in radians.\n   */\n  get fovy(): number {\n    this._update();\n    return this._fovy;\n  }\n\n  /**\n   * @private\n   */\n  get sseDenominator(): number {\n    this._update();\n    return this._sseDenominator;\n  }\n\n  /**\n   * Creates a culling volume for this this.ion.\n   * @returns {CullingVolume} A culling volume at the given position and orientation.\n   *\n   * @example\n   * // Check if a bounding volume intersects the this.\n   * var cullingVolume = this.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\n   * var intersect = cullingVolume.computeVisibility(boundingVolume);\n   */\n  computeCullingVolume(\n    /** A Vector3 defines the eye position. */\n    position: Readonly<NumericArray>,\n    /** A Vector3 defines the view direction. */\n    direction: Readonly<NumericArray>,\n    /** A Vector3 defines the up direction. */\n    up: Readonly<NumericArray>\n  ): CullingVolume {\n    this._update();\n    return this._offCenterFrustum.computeCullingVolume(position, direction, up);\n  }\n\n  /**\n   * Returns the pixel's width and height in meters.\n   * @returns {Vector2} The modified result parameter or a new instance of {@link Vector2} with the pixel's width and height in the x and y properties, respectively.\n   *\n   * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\n   * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\n   *\n   * @example\n   * // Example 1\n   * // Get the width and height of a pixel.\n   * var pixelSize = camera.this.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 1.0, new Vector2());\n   *\n   * @example\n   * // Example 2\n   * // Get the width and height of a pixel if the near plane was set to 'distance'.\n   * // For example, get the size of a pixel of an image on a billboard.\n   * var position = camera.position;\n   * var direction = camera.direction;\n   * var toCenter = Vector3.subtract(primitive.boundingVolume.center, position, new Vector3());      // vector from camera to a primitive\n   * var toCenterProj = Vector3.multiplyByScalar(direction, Vector3.dot(direction, toCenter), new Vector3()); // project vector onto camera direction vector\n   * var distance = Vector3.magnitude(toCenterProj);\n   * var pixelSize = camera.this.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, distance, new Vector2());\n   */\n  getPixelDimensions(\n    /** The width of the drawing buffer. */\n    drawingBufferWidth: number,\n    /** The height of the drawing buffer. */\n    drawingBufferHeight: number,\n    /** The distance to the near plane in meters. */\n    distance: number,\n    /** The object onto which to store the result. */\n    result?: Vector2\n  ): Vector2 {\n    this._update();\n    return this._offCenterFrustum.getPixelDimensions(\n      drawingBufferWidth,\n      drawingBufferHeight,\n      distance,\n      result || new Vector2()\n    );\n  }\n\n  // eslint-disable-next-line complexity, max-statements\n  private _update(): void {\n    assert(\n      Number.isFinite(this.fov) &&\n        Number.isFinite(this.aspectRatio) &&\n        Number.isFinite(this.near) &&\n        Number.isFinite(this.far)\n    );\n    // 'fov, aspectRatio, near, or far parameters are not set.'\n\n    const f = this._offCenterFrustum;\n\n    if (\n      this.fov !== this._fov ||\n      this.aspectRatio !== this._aspectRatio ||\n      this.near !== this._near ||\n      this.far !== this._far ||\n      this.xOffset !== this._xOffset ||\n      this.yOffset !== this._yOffset\n    ) {\n      assert(this.fov >= 0 && this.fov < Math.PI);\n      // throw new DeveloperError('fov must be in the range [0, PI).');\n\n      assert(this.aspectRatio > 0);\n      // throw new DeveloperError('aspectRatio must be positive.');\n\n      assert(this.near >= 0 && this.near < this.far);\n      // throw new DeveloperError('near must be greater than zero and less than far.');\n\n      this._aspectRatio = this.aspectRatio;\n      this._fov = this.fov;\n      this._fovy =\n        this.aspectRatio <= 1\n          ? this.fov\n          : Math.atan(Math.tan(this.fov * 0.5) / this.aspectRatio) * 2.0;\n      this._near = this.near;\n      this._far = this.far;\n      this._sseDenominator = 2.0 * Math.tan(0.5 * this._fovy);\n      this._xOffset = this.xOffset;\n      this._yOffset = this.yOffset;\n\n      f.top = this.near * Math.tan(0.5 * this._fovy);\n      f.bottom = -f.top;\n      f.right = this.aspectRatio * f.top;\n      f.left = -f.right;\n      f.near = this.near;\n      f.far = this.far;\n\n      f.right += this.xOffset;\n      f.left += this.xOffset;\n      f.top += this.yOffset;\n      f.bottom += this.yOffset;\n    }\n  }\n}\n"],"mappings":";;;AAOA,SAAQA,MAAR,EAAuCC,OAAvC,QAAqD,eAArD;AACA,OAAOC,2BAAP,MAAwC,kCAAxC;AAGA,IAAMC,OAAO,GAAI,SAAXA,OAAOA,CAAIC,GAAD;EAAA,OAASA,GAAG,KAAK,IAAR,IAAgB,OAAOA,GAAP,KAAe,WAAxD;AAAA;AAAA,IAmCqBC,kBAAN;EAyCb,SAAAA,mBAAA,EAAqD;IAAA,IAAzCC,OAAkC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAtC;IAAAG,eAAA,OAAAL,kBAAA;IAA0CM,eAAA,4BAxCzB,IAAIT,2BAAJ,EAwCyB;IAAAS,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IACnD,IAAOC,GAAD,GAAkFN,OAAxF,CAAOM,GAAD;MAAMC,WAAN,GAAkFP,OAAxF,CAAYO,WAAN;MAAAC,aAAA,GAAkFR,OAAxF,CAAyBS,IAAI;MAAJA,IAAI,GAAAD,aAAA,cAAG,GAA1B,GAAAA,aAAA;MAAAE,YAAA,GAAkFV,OAAxF,CAAqCW,GAAG;MAAHA,GAAG,GAAAD,YAAA,cAAG,WAArC,GAAAA,YAAA;MAAAE,gBAAA,GAAkFZ,OAAxF,CAAwDa,OAAO;MAAPA,OAAO,GAAAD,gBAAA,cAAG,GAA5D,GAAAA,gBAAA;MAAAE,gBAAA,GAAkFd,OAAxF,CAAuEe,OAAO;MAAPA,OAAO,GAAAD,gBAAA,cAAG,MAAAA,gBAAA;IAEjF,KAAKR,GAAL,GAAWA,GAAX;IACA,KAAKC,WAAL,GAAmBA,WAAnB;IACA,KAAKE,IAAL,GAAYA,IAAZ;IACA,KAAKE,GAAL,GAAWA,GAAX;IACA,KAAKE,OAAL,GAAeA,OAAf;IACA,KAAKE,OAAL,GAAeA,OAAf;EACD;EAAAC,YAAA,CAAAjB,kBAAA;IAAAkB,GAAA;IAAAC,KAAA,EAKD,SAAAC,MAAA,EAA4B;MAC1B,OAAO,IAAIpB,kBAAJ,CAAuB;QAC5BQ,WAAW,EAAE,KAAKA,WADU;QAE5BD,GAAG,EAAE,KAAKA,GAFkB;QAG5BG,IAAI,EAAE,KAAKA,IAHiB;QAI5BE,GAAG,EAAE,KAAKA;MAJkB,CAAvB,CAAP;IAMD;EAAA;IAAAM,GAAA;IAAAC,KAAA,EAMD,SAAAE,OAAOC,KAAD,EAAqC;MACzC,IAAI,CAACxB,OAAO,CAACwB,KAAD,CAAR,IAAmB,EAAEA,KAAK,YAAYtB,kBAAnB,CAAvB,EAA+D;QAC7D,OAAO,KAAP;MACD;MAED,KAAKuB,OAAL;MACAD,KAAK,CAACC,OAAN;MAEA,OACE,KAAKhB,GAAL,KAAae,KAAK,CAACf,GAAnB,IACA,KAAKC,WAAL,KAAqBc,KAAK,CAACd,WAD3B,IAEA,KAAKE,IAAL,KAAcY,KAAK,CAACZ,IAFpB,IAGA,KAAKE,GAAL,KAAaU,KAAK,CAACV,GAHnB,IAIA,KAAKY,iBAAL,CAAuBH,MAAvB,CAA8BC,KAAK,CAACE,iBAApC,CALF;IAOD;EAAA;IAAAN,GAAA;IAAAO,GAAA,EAKmB,SAAAA,IAAA,EAAY;MAC9B,KAAKF,OAAL;MACA,OAAO,KAAKC,iBAAL,CAAuBE,gBAA9B;IACD;EAAA;IAAAR,GAAA;IAAAO,GAAA,EAK2B,SAAAA,IAAA,EAAY;MACtC,KAAKF,OAAL;MACA,OAAO,KAAKC,iBAAL,CAAuBG,wBAA9B;IACD;EAAA;IAAAT,GAAA;IAAAO,GAAA,EAKO,SAAAA,IAAA,EAAW;MACjB,KAAKF,OAAL;MACA,OAAO,KAAKK,KAAZ;IACD;EAAA;IAAAV,GAAA;IAAAO,GAAA,EAKiB,SAAAA,IAAA,EAAW;MAC3B,KAAKF,OAAL;MACA,OAAO,KAAKM,eAAZ;IACD;EAAA;IAAAX,GAAA;IAAAC,KAAA,EAWD,SAAAW,qBAEEC,QAFkB,EAIlBC,SAJkB,EAMlBC,EANkB,EAOH;MACf,KAAKV,OAAL;MACA,OAAO,KAAKC,iBAAL,CAAuBM,oBAAvB,CAA4CC,QAA5C,EAAsDC,SAAtD,EAAiEC,EAAjE,CAAP;IACD;EAAA;IAAAf,GAAA;IAAAC,KAAA,EAyBD,SAAAe,mBAEEC,kBAFgB,EAIhBC,mBAJgB,EAMhBC,QANgB,EAQhBC,MARgB,EASP;MACT,KAAKf,OAAL;MACA,OAAO,KAAKC,iBAAL,CAAuBU,kBAAvB,CACLC,kBADK,EAELC,mBAFK,EAGLC,QAHK,EAILC,MAAM,IAAI,IAAI1C,OAAJ,EAJL,CAAP;IAMD;EAAA;IAAAsB,GAAA;IAAAC,KAAA,EAGO,SAAAI,QAAA,EAAgB;MACtB5B,MAAM,CACJ4C,MAAM,CAACC,QAAP,CAAgB,KAAKjC,GAArB,KACEgC,MAAM,CAACC,QAAP,CAAgB,KAAKhC,WAArB,CADF,IAEE+B,MAAM,CAACC,QAAP,CAAgB,KAAK9B,IAArB,CAFF,IAGE6B,MAAM,CAACC,QAAP,CAAgB,KAAK5B,GAArB,CAJE,CAAN;MAQA,IAAM6B,CAAC,GAAG,KAAKjB,iBAAf;MAEA,IACE,KAAKjB,GAAL,KAAa,KAAKmC,IAAlB,IACA,KAAKlC,WAAL,KAAqB,KAAKmC,YAD1B,IAEA,KAAKjC,IAAL,KAAc,KAAKkC,KAFnB,IAGA,KAAKhC,GAAL,KAAa,KAAKiC,IAHlB,IAIA,KAAK/B,OAAL,KAAiB,KAAKgC,QAJtB,IAKA,KAAK9B,OAAL,KAAiB,KAAK+B,QANxB,EAOE;QACApD,MAAM,CAAC,KAAKY,GAAL,IAAY,CAAZ,IAAiB,KAAKA,GAAL,GAAWyC,IAAI,CAACC,EAAlC,CAAN;QAGAtD,MAAM,CAAC,KAAKa,WAAL,GAAmB,CAApB,CAAN;QAGAb,MAAM,CAAC,KAAKe,IAAL,IAAa,CAAb,IAAkB,KAAKA,IAAL,GAAY,KAAKE,GAApC,CAAN;QAGA,KAAK+B,YAAL,GAAoB,KAAKnC,WAAzB;QACA,KAAKkC,IAAL,GAAY,KAAKnC,GAAjB;QACA,KAAKqB,KAAL,GACE,KAAKpB,WAAL,IAAoB,CAApB,GACI,KAAKD,GADT,GAEIyC,IAAI,CAACE,IAAL,CAAUF,IAAI,CAACG,GAAL,CAAS,KAAK5C,GAAL,GAAW,GAApB,IAA2B,KAAKC,WAA1C,IAAyD,GAH/D;QAIA,KAAKoC,KAAL,GAAa,KAAKlC,IAAlB;QACA,KAAKmC,IAAL,GAAY,KAAKjC,GAAjB;QACA,KAAKiB,eAAL,GAAuB,MAAMmB,IAAI,CAACG,GAAL,CAAS,MAAM,KAAKvB,KAApB,CAA7B;QACA,KAAKkB,QAAL,GAAgB,KAAKhC,OAArB;QACA,KAAKiC,QAAL,GAAgB,KAAK/B,OAArB;QAEAyB,CAAC,CAACW,GAAF,GAAQ,KAAK1C,IAAL,GAAYsC,IAAI,CAACG,GAAL,CAAS,MAAM,KAAKvB,KAApB,CAApB;QACAa,CAAC,CAACY,MAAF,GAAW,CAACZ,CAAC,CAACW,GAAd;QACAX,CAAC,CAACa,KAAF,GAAU,KAAK9C,WAAL,GAAmBiC,CAAC,CAACW,GAA/B;QACAX,CAAC,CAACc,IAAF,GAAS,CAACd,CAAC,CAACa,KAAZ;QACAb,CAAC,CAAC/B,IAAF,GAAS,KAAKA,IAAd;QACA+B,CAAC,CAAC7B,GAAF,GAAQ,KAAKA,GAAb;QAEA6B,CAAC,CAACa,KAAF,IAAW,KAAKxC,OAAhB;QACA2B,CAAC,CAACc,IAAF,IAAU,KAAKzC,OAAf;QACA2B,CAAC,CAACW,GAAF,IAAS,KAAKpC,OAAd;QACAyB,CAAC,CAACY,MAAF,IAAY,KAAKrC,OAAjB;MACD;IACF;EAAA;EAAA,OAAAhB,kBAAA;AAAA;AAAA,SAzOkBA,kBAAN,IAAAwD,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}