{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(makeArrayBufferIterator);\nvar DEFAULT_CHUNK_SIZE = 256 * 1024;\nexport function makeArrayBufferIterator(arrayBuffer) {\n  var options,\n    _options$chunkSize,\n    chunkSize,\n    byteOffset,\n    chunkByteLength,\n    chunk,\n    sourceArray,\n    chunkArray,\n    _args = arguments;\n  return _regeneratorRuntime().wrap(function makeArrayBufferIterator$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n        _options$chunkSize = options.chunkSize, chunkSize = _options$chunkSize === void 0 ? DEFAULT_CHUNK_SIZE : _options$chunkSize;\n        byteOffset = 0;\n      case 3:\n        if (!(byteOffset < arrayBuffer.byteLength)) {\n          _context.next = 14;\n          break;\n        }\n        chunkByteLength = Math.min(arrayBuffer.byteLength - byteOffset, chunkSize);\n        chunk = new ArrayBuffer(chunkByteLength);\n        sourceArray = new Uint8Array(arrayBuffer, byteOffset, chunkByteLength);\n        chunkArray = new Uint8Array(chunk);\n        chunkArray.set(sourceArray);\n        byteOffset += chunkByteLength;\n        _context.next = 12;\n        return chunk;\n      case 12:\n        _context.next = 3;\n        break;\n      case 14:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n}","map":{"version":3,"names":["makeArrayBufferIterator","DEFAULT_CHUNK_SIZE","arrayBuffer","options","_options$chunkSize","chunkSize","byteOffset","chunkByteLength","chunk","sourceArray","chunkArray","_args","arguments","_regeneratorRuntime","wrap","makeArrayBufferIterator$","_context","prev","next","length","undefined","byteLength","Math","min","ArrayBuffer","Uint8Array","set","stop","_marked"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/processors/node_modules/@loaders.gl/core/src/iterators/make-iterator/make-array-buffer-iterator.ts"],"sourcesContent":["import type {IteratorOptions} from './make-iterator';\n\nconst DEFAULT_CHUNK_SIZE = 256 * 1024;\n\n/**\n * Returns an iterator that breaks a big ArrayBuffer into chunks and yields them one-by-one\n * @param blob ArrayBuffer to iterate over\n * @param options\n * @param options.chunkSize\n */\nexport function* makeArrayBufferIterator(\n  arrayBuffer: ArrayBuffer,\n  options: IteratorOptions = {}\n): Iterable<ArrayBuffer> {\n  const {chunkSize = DEFAULT_CHUNK_SIZE} = options;\n\n  let byteOffset = 0;\n\n  while (byteOffset < arrayBuffer.byteLength) {\n    // Create a chunk of the right size\n    const chunkByteLength = Math.min(arrayBuffer.byteLength - byteOffset, chunkSize);\n    const chunk = new ArrayBuffer(chunkByteLength);\n\n    // Copy data from the big chunk\n    const sourceArray = new Uint8Array(arrayBuffer, byteOffset, chunkByteLength);\n    const chunkArray = new Uint8Array(chunk);\n    chunkArray.set(sourceArray);\n\n    // yield the chunk\n    byteOffset += chunkByteLength;\n    yield chunk;\n  }\n}\n"],"mappings":";sDAUiBA,uBAAuB;AARxC,IAAMC,kBAAkB,GAAG,GAAG,GAAG,IAAI;AAQrC,OAAO,SAAUD,uBAAuBA,CACtCE,WAAwB;EAAA,IAAAC,OAAA;IAAAC,kBAAA;IAAAC,SAAA;IAAAC,UAAA;IAAAC,eAAA;IAAAC,KAAA;IAAAC,WAAA;IAAAC,UAAA;IAAAC,KAAA,GAAAC,SAAA;EAAA,OAAAC,mBAAA,GAAAC,IAAA,UAAAC,yBAAAC,QAAA;IAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;MAAA;QACxBf,OAAwB,GAAAQ,KAAA,CAAAQ,MAAA,QAAAR,KAAA,QAAAS,SAAA,GAAAT,KAAA,MAAG,CAAC,CAAC;QAAAP,kBAAA,GAEYD,OAAO,CAAzCE,SAAS,EAATA,SAAS,GAAAD,kBAAA,cAAGH,kBAAA,GAAAG,kBAAA;QAEfE,UAAU,GAAG,CAAC;MAAA;QAAA,MAEXA,UAAU,GAAGJ,WAAW,CAACmB,UAAU;UAAAL,QAAA,CAAAE,IAAA;UAAA;QAAA;QAElCX,eAAe,GAAGe,IAAI,CAACC,GAAG,CAACrB,WAAW,CAACmB,UAAU,GAAGf,UAAU,EAAED,SAAS,CAAC;QAC1EG,KAAK,GAAG,IAAIgB,WAAW,CAACjB,eAAe,CAAC;QAGxCE,WAAW,GAAG,IAAIgB,UAAU,CAACvB,WAAW,EAAEI,UAAU,EAAEC,eAAe,CAAC;QACtEG,UAAU,GAAG,IAAIe,UAAU,CAACjB,KAAK,CAAC;QACxCE,UAAU,CAACgB,GAAG,CAACjB,WAAW,CAAC;QAG3BH,UAAU,IAAIC,eAAe;QAAAS,QAAA,CAAAE,IAAA;QAC7B,OAAMV,KAAK;MAAA;QAAAQ,QAAA,CAAAE,IAAA;QAAA;MAAA;MAAA;QAAA,OAAAF,QAAA,CAAAW,IAAA;IAAA;EAAA,GAAAC,OAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}