{"ast":null,"code":"import _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Vector3, Matrix4 } from '@math.gl/core';\nimport { assert, uid } from '@luma.gl/webgl';\nvar ScenegraphNode = /*#__PURE__*/function () {\n  function ScenegraphNode() {\n    _classCallCheck(this, ScenegraphNode);\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var id = props.id;\n    this.id = id || uid(this.constructor.name);\n    this.display = true;\n    this.position = new Vector3();\n    this.rotation = new Vector3();\n    this.scale = new Vector3(1, 1, 1);\n    this.matrix = new Matrix4();\n    this.userData = {};\n    this.props = {};\n    this._setScenegraphNodeProps(props);\n  }\n  _createClass(ScenegraphNode, [{\n    key: \"delete\",\n    value: function _delete() {}\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      this._setScenegraphNodeProps(props);\n      return this;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"{type: ScenegraphNode, id: \".concat(this.id, \")}\");\n    }\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(position) {\n      assert(position.length === 3, 'setPosition requires vector argument');\n      this.position = position;\n      return this;\n    }\n  }, {\n    key: \"setRotation\",\n    value: function setRotation(rotation) {\n      assert(rotation.length === 3, 'setRotation requires vector argument');\n      this.rotation = rotation;\n      return this;\n    }\n  }, {\n    key: \"setScale\",\n    value: function setScale(scale) {\n      assert(scale.length === 3, 'setScale requires vector argument');\n      this.scale = scale;\n      return this;\n    }\n  }, {\n    key: \"setMatrix\",\n    value: function setMatrix(matrix) {\n      var copyMatrix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (copyMatrix) {\n        this.matrix.copy(matrix);\n      } else {\n        this.matrix = matrix;\n      }\n    }\n  }, {\n    key: \"setMatrixComponents\",\n    value: function setMatrixComponents(_ref) {\n      var position = _ref.position,\n        rotation = _ref.rotation,\n        scale = _ref.scale,\n        _ref$update = _ref.update,\n        update = _ref$update === void 0 ? true : _ref$update;\n      if (position) {\n        this.setPosition(position);\n      }\n      if (rotation) {\n        this.setRotation(rotation);\n      }\n      if (scale) {\n        this.setScale(scale);\n      }\n      if (update) {\n        this.updateMatrix();\n      }\n      return this;\n    }\n  }, {\n    key: \"updateMatrix\",\n    value: function updateMatrix() {\n      var pos = this.position;\n      var rot = this.rotation;\n      var scale = this.scale;\n      this.matrix.identity();\n      this.matrix.translate(pos);\n      this.matrix.rotateXYZ(rot);\n      this.matrix.scale(scale);\n      return this;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var position = options.position,\n        rotation = options.rotation,\n        scale = options.scale;\n      if (position) {\n        this.setPosition(position);\n      }\n      if (rotation) {\n        this.setRotation(rotation);\n      }\n      if (scale) {\n        this.setScale(scale);\n      }\n      this.updateMatrix();\n      return this;\n    }\n  }, {\n    key: \"getCoordinateUniforms\",\n    value: function getCoordinateUniforms(viewMatrix, modelMatrix) {\n      assert(viewMatrix);\n      modelMatrix = modelMatrix || this.matrix;\n      var worldMatrix = new Matrix4(viewMatrix).multiplyRight(modelMatrix);\n      var worldInverse = worldMatrix.invert();\n      var worldInverseTranspose = worldInverse.transpose();\n      return {\n        viewMatrix: viewMatrix,\n        modelMatrix: modelMatrix,\n        objectMatrix: modelMatrix,\n        worldMatrix: worldMatrix,\n        worldInverseMatrix: worldInverse,\n        worldInverseTransposeMatrix: worldInverseTranspose\n      };\n    }\n  }, {\n    key: \"_setScenegraphNodeProps\",\n    value: function _setScenegraphNodeProps(props) {\n      if ('display' in props) {\n        this.display = props.display;\n      }\n      if ('position' in props) {\n        this.setPosition(props.position);\n      }\n      if ('rotation' in props) {\n        this.setRotation(props.rotation);\n      }\n      if ('scale' in props) {\n        this.setScale(props.scale);\n      }\n      if ('matrix' in props) {\n        this.setMatrix(props.matrix);\n      }\n      Object.assign(this.props, props);\n    }\n  }]);\n  return ScenegraphNode;\n}();\nexport { ScenegraphNode as default };","map":{"version":3,"names":["Vector3","Matrix4","assert","uid","ScenegraphNode","_classCallCheck","props","arguments","length","undefined","id","constructor","name","display","position","rotation","scale","matrix","userData","_setScenegraphNodeProps","_createClass","key","value","_delete","setProps","toString","concat","setPosition","setRotation","setScale","setMatrix","copyMatrix","copy","setMatrixComponents","_ref","_ref$update","update","updateMatrix","pos","rot","identity","translate","rotateXYZ","options","getCoordinateUniforms","viewMatrix","modelMatrix","worldMatrix","multiplyRight","worldInverse","invert","worldInverseTranspose","transpose","objectMatrix","worldInverseMatrix","worldInverseTransposeMatrix","Object","assign","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@luma.gl/experimental/src/scenegraph/scenegraph-node.js"],"sourcesContent":["import {Vector3, Matrix4} from '@math.gl/core';\nimport {assert, uid} from '@luma.gl/webgl';\n\nexport default class ScenegraphNode {\n  constructor(props = {}) {\n    const {id} = props;\n\n    this.id = id || uid(this.constructor.name);\n\n    this.display = true; // whether to display the object at all\n    this.position = new Vector3();\n    this.rotation = new Vector3();\n    this.scale = new Vector3(1, 1, 1);\n    this.matrix = new Matrix4();\n    this.userData = {};\n\n    this.props = {};\n    this._setScenegraphNodeProps(props);\n  }\n\n  delete() {}\n\n  setProps(props) {\n    this._setScenegraphNodeProps(props);\n    return this;\n  }\n\n  toString() {\n    return `{type: ScenegraphNode, id: ${this.id})}`;\n  }\n\n  setPosition(position) {\n    assert(position.length === 3, 'setPosition requires vector argument');\n    this.position = position;\n    return this;\n  }\n\n  setRotation(rotation) {\n    assert(rotation.length === 3, 'setRotation requires vector argument');\n    this.rotation = rotation;\n    return this;\n  }\n\n  setScale(scale) {\n    assert(scale.length === 3, 'setScale requires vector argument');\n    this.scale = scale;\n    return this;\n  }\n\n  setMatrix(matrix, copyMatrix = true) {\n    if (copyMatrix) {\n      this.matrix.copy(matrix);\n    } else {\n      this.matrix = matrix;\n    }\n  }\n\n  setMatrixComponents({position, rotation, scale, update = true}) {\n    if (position) {\n      this.setPosition(position);\n    }\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n    if (scale) {\n      this.setScale(scale);\n    }\n    if (update) {\n      this.updateMatrix();\n    }\n    return this;\n  }\n\n  updateMatrix() {\n    const pos = this.position;\n    const rot = this.rotation;\n    const scale = this.scale;\n\n    this.matrix.identity();\n    this.matrix.translate(pos);\n    this.matrix.rotateXYZ(rot);\n    this.matrix.scale(scale);\n    return this;\n  }\n\n  update(options = {}) {\n    const {position, rotation, scale} = options;\n    if (position) {\n      this.setPosition(position);\n    }\n    if (rotation) {\n      this.setRotation(rotation);\n    }\n    if (scale) {\n      this.setScale(scale);\n    }\n    this.updateMatrix();\n    return this;\n  }\n\n  getCoordinateUniforms(viewMatrix, modelMatrix) {\n    // TODO - solve multiple class problem\n    // assert(viewMatrix instanceof Matrix4);\n    assert(viewMatrix);\n    modelMatrix = modelMatrix || this.matrix;\n    const worldMatrix = new Matrix4(viewMatrix).multiplyRight(modelMatrix);\n    const worldInverse = worldMatrix.invert();\n    const worldInverseTranspose = worldInverse.transpose();\n\n    return {\n      viewMatrix,\n      modelMatrix,\n      objectMatrix: modelMatrix,\n      worldMatrix,\n      worldInverseMatrix: worldInverse,\n      worldInverseTransposeMatrix: worldInverseTranspose\n    };\n  }\n\n  // TODO - copied code, not yet vetted\n  /*\n  transform() {\n    if (!this.parent) {\n      this.endPosition.set(this.position);\n      this.endRotation.set(this.rotation);\n      this.endScale.set(this.scale);\n    } else {\n      const parent = this.parent;\n      this.endPosition.set(this.position.add(parent.endPosition));\n      this.endRotation.set(this.rotation.add(parent.endRotation));\n      this.endScale.set(this.scale.add(parent.endScale));\n    }\n\n    const ch = this.children;\n    for (let i = 0; i < ch.length; ++i) {\n      ch[i].transform();\n    }\n\n    return this;\n  }\n  */\n\n  _setScenegraphNodeProps(props) {\n    if ('display' in props) {\n      this.display = props.display;\n    }\n\n    if ('position' in props) {\n      this.setPosition(props.position);\n    }\n    if ('rotation' in props) {\n      this.setRotation(props.rotation);\n    }\n    if ('scale' in props) {\n      this.setScale(props.scale);\n    }\n\n    // Matrix overwrites other props\n    if ('matrix' in props) {\n      this.setMatrix(props.matrix);\n    }\n\n    Object.assign(this.props, props);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}