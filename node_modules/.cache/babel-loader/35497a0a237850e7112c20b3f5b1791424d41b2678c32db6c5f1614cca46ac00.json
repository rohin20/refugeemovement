{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findFieldsToShow = findFieldsToShow;\nexports.getTooltipDisplayDeltaValue = getTooltipDisplayDeltaValue;\nexports.getTooltipDisplayValue = getTooltipDisplayValue;\nexports.BRUSH_CONFIG = exports.NEGATIVE_SIGNS = exports.TOOLTIP_MINUS_SIGN = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _constants = require(\"@kepler.gl/constants\");\nvar _utils = require(\"@kepler.gl/utils\"); /**\n                                          * Minus sign used in tooltip formatting.\n                                          * \\u2212 or \\u002D is the minus sign that d3-format uses for decimal number formatting\n                                          * d3-format 2.0 uses \\u002D\n                                          */\nvar TOOLTIP_MINUS_SIGN = \"\\u2212\"; // both are posible negative signs\n\nexports.TOOLTIP_MINUS_SIGN = TOOLTIP_MINUS_SIGN;\nvar NEGATIVE_SIGNS = [\"-\", \"\\u2212\"];\nexports.NEGATIVE_SIGNS = NEGATIVE_SIGNS;\nvar BRUSH_CONFIG = {\n  range: [0, 50]\n};\nexports.BRUSH_CONFIG = BRUSH_CONFIG;\nfunction findFieldsToShow(_ref) {\n  var fields = _ref.fields,\n    id = _ref.id,\n    maxDefaultTooltips = _ref.maxDefaultTooltips;\n\n  // first find default tooltip fields for trips\n  var fieldsToShow = _constants.DEFAULT_TOOLTIP_FIELDS.reduce(function (prev, curr) {\n    if (fields.find(function (_ref2) {\n      var name = _ref2.name;\n      return curr.name === name;\n    })) {\n      // @ts-ignore\n      prev.push(curr);\n    }\n    return prev;\n  }, []);\n  return (0, _defineProperty2[\"default\"])({}, id, fieldsToShow.length ? fieldsToShow : autoFindTooltipFields(fields, maxDefaultTooltips));\n}\nfunction autoFindTooltipFields(fields, maxDefaultTooltips) {\n  var ptFields = _mergeFieldPairs(_constants.TRIP_POINT_FIELDS); // filter out the default fields that contains lat and lng and any geometry\n\n  var fieldsToShow = fields.filter(function (_ref4) {\n    var name = _ref4.name,\n      type = _ref4.type;\n    return name.replace(/[_,.]+/g, ' ').trim().split(' ').every(function (seg) {\n      return !ptFields.includes(seg);\n    }) && type !== _constants.ALL_FIELD_TYPES.geojson && type !== 'object';\n  });\n  return fieldsToShow.slice(0, maxDefaultTooltips).map(function (_ref5) {\n    var name = _ref5.name;\n    return {\n      name: name,\n      format: null\n    };\n  });\n}\nfunction _mergeFieldPairs(pairs) {\n  return pairs.reduce(function (prev, pair) {\n    return [].concat((0, _toConsumableArray2[\"default\"])(prev), (0, _toConsumableArray2[\"default\"])(pair));\n  }, []);\n}\n/**\n * @type {typeof import('./interaction-utils').getTooltipDisplayDeltaValue}\n */\n\nfunction getTooltipDisplayDeltaValue(_ref6) {\n  var primaryData = _ref6.primaryData,\n    field = _ref6.field,\n    compareType = _ref6.compareType,\n    data = _ref6.data,\n    fieldIdx = _ref6.fieldIdx,\n    item = _ref6.item;\n  var displayDeltaValue = null;\n  if (primaryData && (\n  // comparison mode only works for numeric field\n  field.type === _constants.ALL_FIELD_TYPES.integer || field.type === _constants.ALL_FIELD_TYPES.real)) {\n    var baseDp = primaryData.valueAt(fieldIdx);\n    var dp = data.valueAt(fieldIdx);\n    if ((0, _utils.isNumber)(baseDp) && (0, _utils.isNumber)(dp)) {\n      var deltaValue = compareType === _constants.COMPARE_TYPES.RELATIVE ? dp / baseDp - 1 : dp - baseDp;\n      var deltaFormat = compareType === _constants.COMPARE_TYPES.RELATIVE ? _constants.TOOLTIP_FORMATS.DECIMAL_PERCENT_FULL_2[_constants.TOOLTIP_KEY] : item.format || _constants.TOOLTIP_FORMATS.DECIMAL_DECIMAL_FIXED_3[_constants.TOOLTIP_KEY];\n      displayDeltaValue = (0, _utils.getFormatter)(deltaFormat, field)(deltaValue); // safely cast string\n\n      displayDeltaValue = (0, _utils.defaultFormatter)(displayDeltaValue);\n      var deltaFirstChar = displayDeltaValue.charAt(0);\n      if (deltaFirstChar !== '+' && !NEGATIVE_SIGNS.includes(deltaFirstChar)) {\n        displayDeltaValue = \"+\".concat(displayDeltaValue);\n      }\n    } else {\n      displayDeltaValue = TOOLTIP_MINUS_SIGN;\n    }\n  }\n  return displayDeltaValue;\n}\nfunction getTooltipDisplayValue(_ref7) {\n  var item = _ref7.item,\n    field = _ref7.field,\n    value = _ref7.value;\n  if (!(0, _utils.notNullorUndefined)(value)) {\n    return '';\n  }\n  return item !== null && item !== void 0 && item.format ? (0, _utils.getFormatter)(item.format, field)(value) : (0, _utils.parseFieldValue)(value, field.type);\n}","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","findFieldsToShow","getTooltipDisplayDeltaValue","getTooltipDisplayValue","BRUSH_CONFIG","NEGATIVE_SIGNS","TOOLTIP_MINUS_SIGN","_toConsumableArray2","_defineProperty2","_constants","_utils","id","_ref","maxDefaultTooltips","fields","find","_ref2","name","curr","prev","push","fieldsToShow","length","autoFindTooltipFields","type","_ref4","replace","trim","split","every","seg","ptFields","includes","ALL_FIELD_TYPES","geojson","slice","map","_ref5","format","_mergeFieldPairs","pairs","concat","pair","field","_ref6","compareType","data","fieldIdx","item","displayDeltaValue","primaryData","baseDp","valueAt","dp","isNumber","deltaFormat","COMPARE_TYPES","RELATIVE","TOOLTIP_FORMATS","DECIMAL_PERCENT_FULL_2","TOOLTIP_KEY","DECIMAL_DECIMAL_FIXED_3","getFormatter","deltaValue","defaultFormatter","deltaFirstChar","_ref7","notNullorUndefined","parseFieldValue"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/reducers/src/interaction-utils.ts"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  DEFAULT_TOOLTIP_FIELDS,\n  ALL_FIELD_TYPES,\n  TRIP_POINT_FIELDS,\n  TOOLTIP_FORMATS,\n  TOOLTIP_KEY,\n  COMPARE_TYPES\n} from '@kepler.gl/constants';\n\nimport {Field, TooltipField, CompareType} from '@kepler.gl/types';\nimport {\n  DataRow,\n  parseFieldValue,\n  getFormatter,\n  isNumber,\n  defaultFormatter,\n  notNullorUndefined\n} from '@kepler.gl/utils';\n\n/**\n * Minus sign used in tooltip formatting.\n * \\u2212 or \\u002D is the minus sign that d3-format uses for decimal number formatting\n * d3-format 2.0 uses \\u002D\n */\nexport const TOOLTIP_MINUS_SIGN = '\\u2212';\n// both are posible negative signs\nexport const NEGATIVE_SIGNS = ['\\u002D', '\\u2212'];\n\nexport const BRUSH_CONFIG: {\n  range: [number, number];\n} = {\n  range: [0, 50]\n};\n\nexport function findFieldsToShow({\n  fields,\n  id,\n  maxDefaultTooltips\n}: {\n  fields: Field[];\n  id: string;\n  maxDefaultTooltips: number;\n}): {\n  [key: string]: string[];\n} {\n  // first find default tooltip fields for trips\n  const fieldsToShow = DEFAULT_TOOLTIP_FIELDS.reduce((prev, curr) => {\n    if (fields.find(({name}) => curr.name === name)) {\n      // @ts-ignore\n      prev.push(curr);\n    }\n    return prev;\n  }, []);\n\n  return {\n    [id]: fieldsToShow.length ? fieldsToShow : autoFindTooltipFields(fields, maxDefaultTooltips)\n  };\n}\n\nfunction autoFindTooltipFields(fields, maxDefaultTooltips) {\n  const ptFields = _mergeFieldPairs(TRIP_POINT_FIELDS);\n  // filter out the default fields that contains lat and lng and any geometry\n  const fieldsToShow = fields.filter(\n    ({name, type}) =>\n      name\n        .replace(/[_,.]+/g, ' ')\n        .trim()\n        .split(' ')\n        .every(seg => !ptFields.includes(seg)) &&\n      type !== ALL_FIELD_TYPES.geojson &&\n      type !== 'object'\n  );\n\n  return fieldsToShow.slice(0, maxDefaultTooltips).map(({name}) => {\n    return {\n      name,\n      format: null\n    };\n  });\n}\n\nfunction _mergeFieldPairs(pairs) {\n  return pairs.reduce((prev, pair) => [...prev, ...pair], []);\n}\n\n/**\n * @type {typeof import('./interaction-utils').getTooltipDisplayDeltaValue}\n */\nexport function getTooltipDisplayDeltaValue({\n  primaryData,\n  field,\n  compareType,\n  data,\n  fieldIdx,\n  item\n}: {\n  item: TooltipField;\n  field: Field;\n  data: DataRow;\n  fieldIdx: number;\n  primaryData: DataRow;\n  compareType: CompareType;\n}): string | null {\n  let displayDeltaValue: string | null = null;\n\n  if (\n    primaryData &&\n    // comparison mode only works for numeric field\n    (field.type === ALL_FIELD_TYPES.integer || field.type === ALL_FIELD_TYPES.real)\n  ) {\n    const baseDp = primaryData.valueAt(fieldIdx);\n    const dp = data.valueAt(fieldIdx);\n    if (isNumber(baseDp) && isNumber(dp)) {\n      const deltaValue = compareType === COMPARE_TYPES.RELATIVE ? dp / baseDp - 1 : dp - baseDp;\n      const deltaFormat =\n        compareType === COMPARE_TYPES.RELATIVE\n          ? TOOLTIP_FORMATS.DECIMAL_PERCENT_FULL_2[TOOLTIP_KEY]\n          : item.format || TOOLTIP_FORMATS.DECIMAL_DECIMAL_FIXED_3[TOOLTIP_KEY];\n\n      displayDeltaValue = getFormatter(deltaFormat, field)(deltaValue);\n\n      // safely cast string\n      displayDeltaValue = defaultFormatter(displayDeltaValue) as string;\n      const deltaFirstChar = displayDeltaValue.charAt(0);\n\n      if (deltaFirstChar !== '+' && !NEGATIVE_SIGNS.includes(deltaFirstChar)) {\n        displayDeltaValue = `+${displayDeltaValue}`;\n      }\n    } else {\n      displayDeltaValue = TOOLTIP_MINUS_SIGN;\n    }\n  }\n\n  return displayDeltaValue;\n}\n\nexport function getTooltipDisplayValue({\n  item,\n  field,\n  value\n}: {\n  item: TooltipField | undefined;\n  field: Field;\n  value: any;\n}): string {\n  if (!notNullorUndefined(value)) {\n    return '';\n  }\n\n  return item?.format\n    ? getFormatter(item.format, field)(value)\n    : parseFieldValue(value, field.type);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}