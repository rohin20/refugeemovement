{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _awaitAsyncGenerator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nvar DEFAULT_CHUNK_SIZE = 1024 * 1024;\nexport function makeBlobIterator(_x, _x2) {\n  return _makeBlobIterator.apply(this, arguments);\n}\nfunction _makeBlobIterator() {\n  _makeBlobIterator = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(blob, options) {\n    var chunkSize, offset, end, chunk;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          chunkSize = (options === null || options === void 0 ? void 0 : options.chunkSize) || DEFAULT_CHUNK_SIZE;\n          offset = 0;\n        case 2:\n          if (!(offset < blob.size)) {\n            _context.next = 12;\n            break;\n          }\n          end = offset + chunkSize;\n          _context.next = 6;\n          return _awaitAsyncGenerator(blob.slice(offset, end).arrayBuffer());\n        case 6:\n          chunk = _context.sent;\n          offset = end;\n          _context.next = 10;\n          return chunk;\n        case 10:\n          _context.next = 2;\n          break;\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _makeBlobIterator.apply(this, arguments);\n}","map":{"version":3,"names":["DEFAULT_CHUNK_SIZE","makeBlobIterator","_x","_x2","_makeBlobIterator","apply","arguments","_wrapAsyncGenerator","_regeneratorRuntime","mark","_callee","blob","options","chunkSize","offset","end","chunk","wrap","_callee$","_context","prev","next","size","_awaitAsyncGenerator","slice","arrayBuffer","sent","stop"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/geo-layers/node_modules/@loaders.gl/core/src/iterators/make-iterator/make-blob-iterator.ts"],"sourcesContent":["import type {IteratorOptions} from './make-iterator';\n\nconst DEFAULT_CHUNK_SIZE = 1024 * 1024; // 1MB â€” biggest value that keeps UI responsive\n\n/**\n * Returns an iterator that breaks a big Blob into chunks and yields them one-by-one\n * @param blob Blob or File object\n * @param options\n * @param options.chunkSize\n */\nexport async function* makeBlobIterator(\n  blob: Blob,\n  options?: IteratorOptions\n): AsyncIterable<ArrayBuffer> {\n  const chunkSize = options?.chunkSize || DEFAULT_CHUNK_SIZE;\n\n  let offset = 0;\n  while (offset < blob.size) {\n    const end = offset + chunkSize;\n\n    const chunk = await blob.slice(offset, end).arrayBuffer();\n\n    offset = end;\n    yield chunk;\n  }\n}\n"],"mappings":";;;AAEA,IAAMA,kBAAkB,GAAG,IAAI,GAAG,IAAI;AAQtC,gBAAuBC,gBAAgBA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,iBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAevC,SAAAF,kBAAA;EAAAA,iBAAA,GAAAG,mBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAfO,SAAAC,QACLC,IAAU,EACVC,OAAyB;IAAA,IAAAC,SAAA,EAAAC,MAAA,EAAAC,GAAA,EAAAC,KAAA;IAAA,OAAAR,mBAAA,GAAAS,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAEnBR,SAAS,GAAG,CAAAD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC,SAAS,KAAIb,kBAAkB;UAEtDc,MAAM,GAAG,CAAC;QAAA;UAAA,MACPA,MAAM,GAAGH,IAAI,CAACW,IAAI;YAAAH,QAAA,CAAAE,IAAA;YAAA;UAAA;UACjBN,GAAG,GAAGD,MAAM,GAAGD,SAAS;UAAAM,QAAA,CAAAE,IAAA;UAAA,OAAAE,oBAAA,CAEVZ,IAAI,CAACa,KAAK,CAACV,MAAM,EAAEC,GAAG,CAAC,CAACU,WAAW,EAAE;QAAA;UAAnDT,KAAK,GAAAG,QAAA,CAAAO,IAAA;UAEXZ,MAAM,GAAGC,GAAG;UAAAI,QAAA,CAAAE,IAAA;UACZ,OAAML,KAAK;QAAA;UAAAG,QAAA,CAAAE,IAAA;UAAA;QAAA;QAAA;UAAA,OAAAF,QAAA,CAAAQ,IAAA;MAAA;IAAA,GAAAjB,OAAA;EAAA,CAEf;EAAA,OAAAN,iBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}