{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._updateProperty = exports.forwardTo = exports._actionFor = exports.unwrap = exports.isForwardAction = exports.wrapTo = exports.getActionForwardAddress = exports.ADDRESS_PREFIX = exports.FORWARD = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _lodash = _interopRequireDefault(require(\"lodash.curry\"));\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar FORWARD = '@redux-forward/FORWARD';\nexports.FORWARD = FORWARD;\nvar ADDRESS_PREFIX = '@@KG_';\nexports.ADDRESS_PREFIX = ADDRESS_PREFIX;\nvar getActionForwardAddress = function getActionForwardAddress(id) {\n  return \"\".concat(ADDRESS_PREFIX).concat(id.toUpperCase());\n};\n/**\n * Wrap an action into a forward action that only modify the state of a specific\n * kepler.gl instance. kepler.gl reducer will look for signatures in the action to\n * determine whether it needs to be forwarded to a specific instance reducer.\n *\n * wrapTo can be curried. You can create a curried action wrapper by only supply the `id` argument\n *\n * A forward action looks like this\n * ```js\n *  {\n *    type: \"@@kepler.gl/LAYER_CONFIG_CHANGE\",\n *    payload: {\n *      type: '@@kepler.gl/LAYER_CONFIG_CHANGE',\n *      payload: {},\n *      meta: {\n *       // id of instance\n *        _id_: id\n *       // other meta\n *      }\n *    },\n *    meta: {\n *      _forward_: '@redux-forward/FORWARD',\n *      _addr_: '@@KG_id'\n *    }\n *  };\n * ```\n *\n * @memberof forwardActions\n * @param {string} id - The id to forward to\n * @param {Object} action - the action object {type: string, payload: *}\n * @returns {{type: string, payload: {type: string, payload: *, meta: {_id_: string}, meta: {_forward_: string, _addr_: string}}}}\n * @public\n * @example\n *\n * import {wrapTo, togglePerspective} from 'kepler.gl/actions';\n *\n * // This action will only dispatch to the KeplerGl instance with `id: map_1`\n * this.props.dispatch(wrapTo('map_1', togglePerspective()));\n *\n * // You can also create a curried action for each instance\n * const wrapToMap1 = wrapTo('map_1');\n * this.props.dispatch(wrapToMap1(togglePerspective()));\n */\n\nexports.getActionForwardAddress = getActionForwardAddress;\nvar wrapTo = (0, _lodash[\"default\"])(function (id, action) {\n  return {\n    // keep original action.type\n    type: action.type,\n    // actual action\n    payload: _objectSpread(_objectSpread({}, action), {}, {\n      meta: _objectSpread(_objectSpread({}, action.meta), {}, {\n        _id_: id\n      })\n    }),\n    // add forward signature to meta\n    meta: _objectSpread(_objectSpread({}, action.meta || {}), {}, {\n      _forward_: FORWARD,\n      _addr_: getActionForwardAddress(id)\n    })\n  };\n});\n/**\n * Whether an action is a forward action\n * @memberof forwardActions\n * @param {Object} action - the action object\n * @returns {boolean} boolean - whether the action is a forward action\n * @public\n */\n\nexports.wrapTo = wrapTo;\nvar isForwardAction = function isForwardAction(action) {\n  return Boolean(action && action.meta && action.meta._forward_ === FORWARD);\n};\n/**\n * Unwrap an action\n * @memberof forwardActions\n * @param {Object} action - the action object\n * @returns {Object} - unwrapped action\n * @public\n */\n\nexports.isForwardAction = isForwardAction;\nvar unwrap = function unwrap(action) {\n  return isForwardAction(action) ? unwrap(action.payload) : action;\n};\n/**\n * Given an id, returns the action for that id.\n * If the action is not a forward action, return the action\n * @memberof forwardActions\n * @param {String} id\n * @param {Object} action\n * @private\n */\n\nexports.unwrap = unwrap;\nvar _actionFor = function _actionFor(id, action) {\n  return isForwardAction(action) ? action.meta._addr_ === getActionForwardAddress(id) ? action.payload : {} : action;\n};\n/**\n * Returns an action dispatcher that wraps and forwards the actions to a specific instance\n * @memberof forwardActions\n * @param {string} id - instance id\n * @param {Function} dispatch - action dispatcher\n * @public\n * @example\n *\n * // action and forward dispatcher\n * import {toggleSplitMap, forwardTo} from 'kepler.gl/actions';\n * import {connect} from 'react-redux';\n *\n * const MapContainer = props => (\n *  <div>\n *   <button onClick={() => props.keplerGlDispatch(toggleSplitMap())}/>\n *  </div>\n * )\n *\n * const mapDispatchToProps = (dispatch, props) => ({\n *  dispatch,\n *  keplerGlDispatch: forwardTo(‘foo’, dispatch)\n * });\n *\n * export default connect(\n *  state => state,\n *  mapDispatchToProps\n * )(MapContainer);\n */\n\nexports._actionFor = _actionFor;\nvar forwardTo = function forwardTo(id, dispatch) {\n  return function (action) {\n    return dispatch(wrapTo(id, action));\n  };\n};\n/**\n * Update the state of a kepler.gl instance\n * @memberof forwardActions\n * @param {Object} state\n * @param {string} id\n * @param {Object} nextState\n * @private\n */\n\nexports.forwardTo = forwardTo;\nvar _updateProperty = function _updateProperty(state, id, nextState) {\n  return state[id] === nextState ? state : _objectSpread(_objectSpread({}, state), {}, (0, _defineProperty2[\"default\"])({}, id, nextState));\n};\n/**\n * This declaration is needed to group actions in docs\n */\n\n/**\n * A set of helpers to forward dispatch actions to a specific instance reducer\n * @public\n */\n\n/* eslint-disable no-unused-vars */\n// @ts-ignore\n\nexports._updateProperty = _updateProperty;\nvar forwardActions = null;\n/* eslint-enable no-unused-vars */","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_updateProperty","forwardTo","_actionFor","unwrap","isForwardAction","wrapTo","getActionForwardAddress","ADDRESS_PREFIX","FORWARD","_defineProperty2","_lodash","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","concat","id","toUpperCase","type","action","payload","meta","_id_","_forward_","_addr_","Boolean","dispatch","state","nextState"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/actions/src/action-wrapper.ts"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport const FORWARD = '@redux-forward/FORWARD';\nexport const ADDRESS_PREFIX = '@@KG_';\n\nimport curry from 'lodash.curry';\n\nexport const getActionForwardAddress = id => `${ADDRESS_PREFIX}${id.toUpperCase()}`;\n\n/**\n * Wrap an action into a forward action that only modify the state of a specific\n * kepler.gl instance. kepler.gl reducer will look for signatures in the action to\n * determine whether it needs to be forwarded to a specific instance reducer.\n *\n * wrapTo can be curried. You can create a curried action wrapper by only supply the `id` argument\n *\n * A forward action looks like this\n * ```js\n *  {\n *    type: \"@@kepler.gl/LAYER_CONFIG_CHANGE\",\n *    payload: {\n *      type: '@@kepler.gl/LAYER_CONFIG_CHANGE',\n *      payload: {},\n *      meta: {\n *       // id of instance\n *        _id_: id\n *       // other meta\n *      }\n *    },\n *    meta: {\n *      _forward_: '@redux-forward/FORWARD',\n *      _addr_: '@@KG_id'\n *    }\n *  };\n * ```\n *\n * @memberof forwardActions\n * @param {string} id - The id to forward to\n * @param {Object} action - the action object {type: string, payload: *}\n * @returns {{type: string, payload: {type: string, payload: *, meta: {_id_: string}, meta: {_forward_: string, _addr_: string}}}}\n * @public\n * @example\n *\n * import {wrapTo, togglePerspective} from 'kepler.gl/actions';\n *\n * // This action will only dispatch to the KeplerGl instance with `id: map_1`\n * this.props.dispatch(wrapTo('map_1', togglePerspective()));\n *\n * // You can also create a curried action for each instance\n * const wrapToMap1 = wrapTo('map_1');\n * this.props.dispatch(wrapToMap1(togglePerspective()));\n */\nexport const wrapTo = curry((id, action) => ({\n  // keep original action.type\n  type: action.type,\n\n  // actual action\n  payload: {\n    ...action,\n    meta: {\n      ...action.meta,\n      _id_: id\n    }\n  },\n\n  // add forward signature to meta\n  meta: {\n    ...(action.meta || {}),\n    _forward_: FORWARD,\n    _addr_: getActionForwardAddress(id)\n  }\n}));\n\n/**\n * Whether an action is a forward action\n * @memberof forwardActions\n * @param {Object} action - the action object\n * @returns {boolean} boolean - whether the action is a forward action\n * @public\n */\nexport const isForwardAction = action => {\n  return Boolean(action && action.meta && action.meta._forward_ === FORWARD);\n};\n\n/**\n * Unwrap an action\n * @memberof forwardActions\n * @param {Object} action - the action object\n * @returns {Object} - unwrapped action\n * @public\n */\nexport const unwrap = action => (isForwardAction(action) ? unwrap(action.payload) : action);\n\n/**\n * Given an id, returns the action for that id.\n * If the action is not a forward action, return the action\n * @memberof forwardActions\n * @param {String} id\n * @param {Object} action\n * @private\n */\nexport const _actionFor = (id, action) =>\n  isForwardAction(action)\n    ? action.meta._addr_ === getActionForwardAddress(id)\n      ? action.payload\n      : {}\n    : action;\n\n/**\n * Returns an action dispatcher that wraps and forwards the actions to a specific instance\n * @memberof forwardActions\n * @param {string} id - instance id\n * @param {Function} dispatch - action dispatcher\n * @public\n * @example\n *\n * // action and forward dispatcher\n * import {toggleSplitMap, forwardTo} from 'kepler.gl/actions';\n * import {connect} from 'react-redux';\n *\n * const MapContainer = props => (\n *  <div>\n *   <button onClick={() => props.keplerGlDispatch(toggleSplitMap())}/>\n *  </div>\n * )\n *\n * const mapDispatchToProps = (dispatch, props) => ({\n *  dispatch,\n *  keplerGlDispatch: forwardTo(‘foo’, dispatch)\n * });\n *\n * export default connect(\n *  state => state,\n *  mapDispatchToProps\n * )(MapContainer);\n */\nexport const forwardTo = (id, dispatch) => action => dispatch(wrapTo(id, action));\n\n/**\n * Update the state of a kepler.gl instance\n * @memberof forwardActions\n * @param {Object} state\n * @param {string} id\n * @param {Object} nextState\n * @private\n */\nexport const _updateProperty = (state, id, nextState) =>\n  state[id] === nextState\n    ? state\n    : {\n        ...state,\n        [id]: nextState\n      };\n\n/**\n * This declaration is needed to group actions in docs\n */\n/**\n * A set of helpers to forward dispatch actions to a specific instance reducer\n * @public\n */\n/* eslint-disable no-unused-vars */\n// @ts-ignore\nconst forwardActions = null;\n/* eslint-enable no-unused-vars */\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}