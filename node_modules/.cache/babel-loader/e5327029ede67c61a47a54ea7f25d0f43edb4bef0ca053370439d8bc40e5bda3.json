{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(makePrimitiveIterator);\nimport { GL } from '../constants';\nimport { getPrimitiveModeType } from '../primitives/modes';\nimport { assert } from '@loaders.gl/loader-utils';\nexport function makePrimitiveIterator(indices) {\n  var attributes,\n    mode,\n    start,\n    end,\n    info,\n    i,\n    _args = arguments;\n  return _regeneratorRuntime().wrap(function makePrimitiveIterator$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        attributes = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n        mode = _args.length > 2 ? _args[2] : undefined;\n        start = _args.length > 3 && _args[3] !== undefined ? _args[3] : 0;\n        end = _args.length > 4 ? _args[4] : undefined;\n        if (indices) {\n          indices = indices.values || indices.value || indices;\n        }\n        if (end === undefined) {\n          end = indices ? indices.length : start;\n        }\n        info = {\n          attributes: attributes,\n          type: getPrimitiveModeType(mode),\n          i1: 0,\n          i2: 0,\n          i3: 0\n        };\n        i = start;\n      case 8:\n        if (!(i < end)) {\n          _context.next = 47;\n          break;\n        }\n        _context.t0 = mode;\n        _context.next = _context.t0 === GL.POINTS ? 12 : _context.t0 === GL.LINES ? 15 : _context.t0 === GL.LINE_STRIP ? 19 : _context.t0 === GL.LINE_LOOP ? 23 : _context.t0 === GL.TRIANGLES ? 27 : _context.t0 === GL.TRIANGLE_STRIP ? 32 : _context.t0 === GL.TRIANGLE_FAN ? 36 : 41;\n        break;\n      case 12:\n        info.i1 = i;\n        i += 1;\n        return _context.abrupt(\"break\", 42);\n      case 15:\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 2;\n        return _context.abrupt(\"break\", 42);\n      case 19:\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        return _context.abrupt(\"break\", 42);\n      case 23:\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        return _context.abrupt(\"break\", 42);\n      case 27:\n        info.i1 = i;\n        info.i2 = i + 1;\n        info.i3 = i + 2;\n        i += 3;\n        return _context.abrupt(\"break\", 42);\n      case 32:\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        return _context.abrupt(\"break\", 42);\n      case 36:\n        info.i1 = 1;\n        info.i2 = i;\n        info.i3 = i + 1;\n        i += 1;\n        return _context.abrupt(\"break\", 42);\n      case 41:\n        assert(false);\n      case 42:\n        if (indices) {\n          if ('i1' in info) {\n            info.i1 = indices[info.i1];\n            info.i2 = indices[info.i2];\n            info.i3 = indices[info.i3];\n          }\n        }\n        _context.next = 45;\n        return info;\n      case 45:\n        _context.next = 8;\n        break;\n      case 47:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n}","map":{"version":3,"names":["makePrimitiveIterator","GL","getPrimitiveModeType","assert","indices","attributes","mode","start","end","info","i","_args","arguments","_regeneratorRuntime","wrap","makePrimitiveIterator$","_context","prev","next","length","undefined","values","value","type","i1","i2","i3","t0","POINTS","LINES","LINE_STRIP","LINE_LOOP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","abrupt","stop","_marked"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/geo-layers/node_modules/@loaders.gl/math/src/geometry/iterators/primitive-iterator.ts"],"sourcesContent":["import {GL} from '../constants';\nimport {getPrimitiveModeType} from '../primitives/modes';\nimport {assert} from '@loaders.gl/loader-utils';\n\n/**\n * Iteration info for making primitive iterator\n */\ntype Information = {\n  attributes: object;\n  type: number | void;\n  i1: number;\n  i2: number;\n  i3: number;\n  primitiveIndex?: object;\n};\n/**\n * Will iterate over each primitive, expanding (dereferencing) indices\n * @param indices\n * @param attributes\n * @param mode\n * @param start\n * @param end\n */\n// eslint-disable-next-line complexity\nexport function* makePrimitiveIterator(\n  indices?: any,\n  attributes: object = {},\n  mode?: number,\n  start = 0,\n  end?: number\n): Iterable<{attributes: object; type: number; i1: number; i2: number; i3: number}> {\n  // support indices being an object with a values array\n  if (indices) {\n    indices = indices.values || indices.value || indices;\n  }\n\n  // Autodeduce length from indices\n  if (end === undefined) {\n    end = indices ? indices.length : start;\n  }\n\n  // iteration info\n  const info: Information = {\n    attributes,\n    type: getPrimitiveModeType(mode),\n    i1: 0,\n    i2: 0,\n    i3: 0\n  };\n\n  let i = start;\n  // @ts-ignore\n  while (i < end) {\n    switch (mode) {\n      case GL.POINTS: // draw single points.\n        info.i1 = i;\n        i += 1;\n        break;\n      case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 2;\n        break;\n      case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLES: // draw triangles. Each set of three vertices creates a separate triangle.\n        info.i1 = i;\n        info.i2 = i + 1;\n        info.i3 = i + 2;\n        i += 3;\n        break;\n      case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n        info.i1 = 1;\n        info.i2 = i;\n        info.i3 = i + 1;\n        i += 1;\n        break;\n\n      default:\n        assert(false);\n    }\n\n    // if indices are present, lookup actual vertices in indices\n    if (indices) {\n      if ('i1' in info) {\n        info.i1 = indices[info.i1];\n        info.i2 = indices[info.i2];\n        info.i3 = indices[info.i3];\n      }\n    }\n    // @ts-ignore\n    yield info;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}