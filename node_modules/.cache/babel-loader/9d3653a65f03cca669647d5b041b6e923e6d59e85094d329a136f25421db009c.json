{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { isWebGL2, assertWebGLContext } from '@luma.gl/gltools';\nimport { lumaStats } from '../init';\nimport { getKey, getKeyValue } from '../webgl-utils/constants-to-keys';\nimport { assert } from '../utils/assert';\nimport { uid } from '../utils/utils';\nimport { stubRemovedMethods as _stubRemovedMethods } from '../utils/stub-methods';\nvar ERR_RESOURCE_METHOD_UNDEFINED = 'Resource subclass must define virtual methods';\nvar Resource = /*#__PURE__*/function (_Symbol$toStringTag) {\n  function Resource(gl) {\n    _classCallCheck(this, Resource);\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assertWebGLContext(gl);\n    var id = opts.id,\n      _opts$userData = opts.userData,\n      userData = _opts$userData === void 0 ? {} : _opts$userData;\n    this.gl = gl;\n    this.gl2 = gl;\n    this.id = id || uid(this[Symbol.toStringTag]);\n    this.userData = userData;\n    this._bound = false;\n    this._handle = opts.handle;\n    if (this._handle === undefined) {\n      this._handle = this._createHandle();\n    }\n    this.byteLength = 0;\n    this._addStats();\n  }\n  _createClass(Resource, [{\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return 'Resource';\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this[Symbol.toStringTag] || this.constructor.name, \"(\").concat(this.id, \")\");\n    }\n  }, {\n    key: \"handle\",\n    get: function get() {\n      return this._handle;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$deleteChildren = _ref.deleteChildren,\n        deleteChildren = _ref$deleteChildren === void 0 ? false : _ref$deleteChildren;\n      var children = this._handle && this._deleteHandle(this._handle);\n      if (this._handle) {\n        this._removeStats();\n      }\n      this._handle = null;\n      if (children && deleteChildren) {\n        children.filter(Boolean).forEach(function (child) {\n          return child.delete();\n        });\n      }\n      return this;\n    }\n  }, {\n    key: \"bind\",\n    value: function bind() {\n      var funcOrHandle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.handle;\n      if (typeof funcOrHandle !== 'function') {\n        this._bindHandle(funcOrHandle);\n        return this;\n      }\n      var value;\n      if (!this._bound) {\n        this._bindHandle(this.handle);\n        this._bound = true;\n        value = funcOrHandle();\n        this._bound = false;\n        this._bindHandle(null);\n      } else {\n        value = funcOrHandle();\n      }\n      return value;\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      this.bind(null);\n    }\n  }, {\n    key: \"getParameter\",\n    value: function getParameter(pname) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      pname = getKeyValue(this.gl, pname);\n      assert(pname);\n      var parameters = this.constructor.PARAMETERS || {};\n      var parameter = parameters[pname];\n      if (parameter) {\n        var isWebgl2 = isWebGL2(this.gl);\n        var parameterAvailable = (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n        if (!parameterAvailable) {\n          var webgl1Default = parameter.webgl1;\n          var webgl2Default = 'webgl2' in parameter ? parameter.webgl2 : parameter.webgl1;\n          var defaultValue = isWebgl2 ? webgl2Default : webgl1Default;\n          return defaultValue;\n        }\n      }\n      return this._getParameter(pname, opts);\n    }\n  }, {\n    key: \"getParameters\",\n    value: function getParameters() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var parameters = options.parameters,\n        keys = options.keys;\n      var PARAMETERS = this.constructor.PARAMETERS || {};\n      var isWebgl2 = isWebGL2(this.gl);\n      var values = {};\n      var parameterKeys = parameters || Object.keys(PARAMETERS);\n      var _iterator = _createForOfIteratorHelper(parameterKeys),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var pname = _step.value;\n          var parameter = PARAMETERS[pname];\n          var parameterAvailable = parameter && (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n          if (parameterAvailable) {\n            var key = keys ? getKey(this.gl, pname) : pname;\n            values[key] = this.getParameter(pname, options);\n            if (keys && parameter.type === 'GLenum') {\n              values[key] = getKey(this.gl, values[key]);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return values;\n    }\n  }, {\n    key: \"setParameter\",\n    value: function setParameter(pname, value) {\n      pname = getKeyValue(this.gl, pname);\n      assert(pname);\n      var parameters = this.constructor.PARAMETERS || {};\n      var parameter = parameters[pname];\n      if (parameter) {\n        var isWebgl2 = isWebGL2(this.gl);\n        var parameterAvailable = (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n        if (!parameterAvailable) {\n          throw new Error('Parameter not available on this platform');\n        }\n        if (parameter.type === 'GLenum') {\n          value = getKeyValue(value);\n        }\n      }\n      this._setParameter(pname, value);\n      return this;\n    }\n  }, {\n    key: \"setParameters\",\n    value: function setParameters(parameters) {\n      for (var pname in parameters) {\n        this.setParameter(pname, parameters[pname]);\n      }\n      return this;\n    }\n  }, {\n    key: \"stubRemovedMethods\",\n    value: function stubRemovedMethods(className, version, methodNames) {\n      return _stubRemovedMethods(this, className, version, methodNames);\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize(opts) {}\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle() {\n      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n    }\n  }, {\n    key: \"_bindHandle\",\n    value: function _bindHandle(handle) {\n      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n    }\n  }, {\n    key: \"_getOptsFromHandle\",\n    value: function _getOptsFromHandle() {\n      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n    }\n  }, {\n    key: \"_getParameter\",\n    value: function _getParameter(pname, opts) {\n      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n    }\n  }, {\n    key: \"_setParameter\",\n    value: function _setParameter(pname, value) {\n      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n    }\n  }, {\n    key: \"_context\",\n    value: function _context() {\n      this.gl.luma = this.gl.luma || {};\n      return this.gl.luma;\n    }\n  }, {\n    key: \"_addStats\",\n    value: function _addStats() {\n      var name = this[Symbol.toStringTag];\n      var stats = lumaStats.get('Resource Counts');\n      stats.get('Resources Created').incrementCount();\n      stats.get(\"\".concat(name, \"s Created\")).incrementCount();\n      stats.get(\"\".concat(name, \"s Active\")).incrementCount();\n    }\n  }, {\n    key: \"_removeStats\",\n    value: function _removeStats() {\n      var name = this[Symbol.toStringTag];\n      var stats = lumaStats.get('Resource Counts');\n      stats.get(\"\".concat(name, \"s Active\")).decrementCount();\n    }\n  }, {\n    key: \"_trackAllocatedMemory\",\n    value: function _trackAllocatedMemory(bytes) {\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this[Symbol.toStringTag];\n      this._trackAllocatedMemoryForContext(bytes, name);\n      this._trackAllocatedMemoryForContext(bytes, name, this.gl.canvas && this.gl.canvas.id);\n      this.byteLength = bytes;\n    }\n  }, {\n    key: \"_trackAllocatedMemoryForContext\",\n    value: function _trackAllocatedMemoryForContext(bytes) {\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this[Symbol.toStringTag];\n      var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      var stats = lumaStats.get(\"Memory Usage\".concat(id));\n      stats.get('GPU Memory').addCount(bytes);\n      stats.get(\"\".concat(name, \" Memory\")).addCount(bytes);\n    }\n  }, {\n    key: \"_trackDeallocatedMemory\",\n    value: function _trackDeallocatedMemory() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this[Symbol.toStringTag];\n      this._trackDeallocatedMemoryForContext(name);\n      this._trackDeallocatedMemoryForContext(name, this.gl.canvas && this.gl.canvas.id);\n      this.byteLength = 0;\n    }\n  }, {\n    key: \"_trackDeallocatedMemoryForContext\",\n    value: function _trackDeallocatedMemoryForContext() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this[Symbol.toStringTag];\n      var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var stats = lumaStats.get(\"Memory Usage\".concat(id));\n      stats.get('GPU Memory').subtractCount(this.byteLength);\n      stats.get(\"\".concat(name, \" Memory\")).subtractCount(this.byteLength);\n    }\n  }]);\n  return Resource;\n}(Symbol.toStringTag);\nexport { Resource as default };","map":{"version":3,"names":["isWebGL2","assertWebGLContext","lumaStats","getKey","getKeyValue","assert","uid","stubRemovedMethods","ERR_RESOURCE_METHOD_UNDEFINED","Resource","_Symbol$toStringTag","gl","_classCallCheck","opts","arguments","length","undefined","id","_opts$userData","userData","gl2","Symbol","toStringTag","_bound","_handle","handle","_createHandle","byteLength","_addStats","_createClass","key","get","value","toString","concat","constructor","name","_delete","_ref","_ref$deleteChildren","deleteChildren","children","_deleteHandle","_removeStats","filter","Boolean","forEach","child","delete","bind","funcOrHandle","_bindHandle","unbind","getParameter","pname","parameters","PARAMETERS","parameter","isWebgl2","parameterAvailable","getExtension","extension","webgl1Default","webgl1","webgl2Default","webgl2","defaultValue","_getParameter","getParameters","options","keys","values","parameterKeys","Object","_iterator","_createForOfIteratorHelper","_step","s","n","done","type","err","e","f","setParameter","Error","_setParameter","setParameters","className","version","methodNames","initialize","_getOptsFromHandle","_context","luma","stats","incrementCount","decrementCount","_trackAllocatedMemory","bytes","_trackAllocatedMemoryForContext","canvas","addCount","_trackDeallocatedMemory","_trackDeallocatedMemoryForContext","subtractCount","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@luma.gl/webgl/src/classes/resource.js"],"sourcesContent":["import {isWebGL2, assertWebGLContext} from '@luma.gl/gltools';\nimport {lumaStats} from '../init';\nimport {getKey, getKeyValue} from '../webgl-utils/constants-to-keys';\nimport {assert} from '../utils/assert';\nimport {uid} from '../utils/utils';\nimport {stubRemovedMethods} from '../utils/stub-methods';\n\nconst ERR_RESOURCE_METHOD_UNDEFINED = 'Resource subclass must define virtual methods';\n\n// TODO - Handle context loss\n// function glGetContextLossCount(gl) {\n//   return (gl.luma && gl.luma.glCount) || 0;\n// }\n\nexport default class Resource {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'Resource';\n  }\n  constructor(gl, opts = {}) {\n    assertWebGLContext(gl);\n\n    const {id, userData = {}} = opts;\n    this.gl = gl;\n    // @ts-ignore\n    this.gl2 = gl;\n    // this.ext = polyfillContext(gl);\n    this.id = id || uid(this[Symbol.toStringTag]);\n    this.userData = userData;\n    this._bound = false;\n\n    // Set the handle\n    // If handle was provided, use it, otherwise create a new handle\n\n    // TODO - Stores the handle with context loss information\n    // this.glCount = glGetContextLossCount(this.gl);\n\n    // Default VertexArray needs to be created with null handle, so compare against undefined\n    this._handle = opts.handle;\n    if (this._handle === undefined) {\n      this._handle = this._createHandle();\n    }\n\n    // Only meaningful for resources that allocate GPU memory\n    this.byteLength = 0;\n\n    this._addStats();\n  }\n\n  toString() {\n    return `${this[Symbol.toStringTag] || this.constructor.name}(${this.id})`;\n  }\n\n  get handle() {\n    // TODO - Add context loss handling\n    // Will regenerate and reinitialize the handle if necessary\n    // const glCount = glGetContextLossCount(this.gl);\n    // if (this.glCount !== glCount) {\n    //   this._handle = this._createHandle(this.opts);\n    //   this._glCount = glCount;\n    //   // Reinitialize object\n    //   this.initialize(this.opts);\n    // }\n    return this._handle;\n  }\n\n  delete({deleteChildren = false} = {}) {\n    // Delete this object, and get refs to any children\n    // @ts-ignore\n    const children = this._handle && this._deleteHandle(this._handle);\n    if (this._handle) {\n      this._removeStats();\n    }\n    this._handle = null;\n\n    // Optionally, recursively delete the children\n    // @ts-ignore\n    if (children && deleteChildren) {\n      // @ts-ignore\n      children.filter(Boolean).forEach(child => child.delete());\n    }\n\n    return this;\n  }\n\n  bind(funcOrHandle = this.handle) {\n    if (typeof funcOrHandle !== 'function') {\n      this._bindHandle(funcOrHandle);\n      return this;\n    }\n\n    let value;\n\n    if (!this._bound) {\n      this._bindHandle(this.handle);\n      this._bound = true;\n\n      value = funcOrHandle();\n\n      this._bound = false;\n      this._bindHandle(null);\n    } else {\n      value = funcOrHandle();\n    }\n\n    return value;\n  }\n\n  unbind() {\n    this.bind(null);\n  }\n\n  /**\n   * Query a Resource parameter\n   *\n   * @param {GLenum} pname\n   * @return {GLint|GLfloat|GLenum} param\n   */\n  getParameter(pname, opts = {}) {\n    pname = getKeyValue(this.gl, pname);\n    assert(pname);\n\n    // @ts-ignore\n    const parameters = this.constructor.PARAMETERS || {};\n\n    // Use parameter definitions to handle unsupported parameters\n    const parameter = parameters[pname];\n    if (parameter) {\n      const isWebgl2 = isWebGL2(this.gl);\n\n      // Check if we can query for this parameter\n      const parameterAvailable =\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (!parameterAvailable) {\n        const webgl1Default = parameter.webgl1;\n        const webgl2Default = 'webgl2' in parameter ? parameter.webgl2 : parameter.webgl1;\n        const defaultValue = isWebgl2 ? webgl2Default : webgl1Default;\n        return defaultValue;\n      }\n    }\n\n    // If unknown parameter - Could be a valid parameter not covered by PARAMS\n    // Attempt to query for it and let WebGL report errors\n    return this._getParameter(pname, opts);\n  }\n\n  // Many resources support a getParameter call -\n  // getParameters will get all parameters - slow but useful for debugging\n  // eslint-disable-next-line complexity\n  getParameters(options = {}) {\n    const {parameters, keys} = options;\n\n    // Get parameter definitions for this Resource\n    // @ts-ignore\n    const PARAMETERS = this.constructor.PARAMETERS || {};\n\n    const isWebgl2 = isWebGL2(this.gl);\n\n    const values = {};\n\n    // Query all parameters if no list provided\n    const parameterKeys = parameters || Object.keys(PARAMETERS);\n\n    // WEBGL limits\n    for (const pname of parameterKeys) {\n      const parameter = PARAMETERS[pname];\n\n      // Check if this parameter is available on this platform\n      const parameterAvailable =\n        parameter &&\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (parameterAvailable) {\n        const key = keys ? getKey(this.gl, pname) : pname;\n        values[key] = this.getParameter(pname, options);\n        if (keys && parameter.type === 'GLenum') {\n          values[key] = getKey(this.gl, values[key]);\n        }\n      }\n    }\n\n    return values;\n  }\n\n  /**\n   * Update a Resource setting\n   *\n   * @todo - cache parameter to avoid issuing WebGL calls?\n   *\n   * @param {string} pname - parameter (GL constant, value or key)\n   * @param {GLint|GLfloat|GLenum} value\n   * @return {Resource} returns self to enable chaining\n   */\n  setParameter(pname, value) {\n    pname = getKeyValue(this.gl, pname);\n    assert(pname);\n\n    // @ts-ignore\n    const parameters = this.constructor.PARAMETERS || {};\n\n    const parameter = parameters[pname];\n    if (parameter) {\n      const isWebgl2 = isWebGL2(this.gl);\n\n      // Check if this parameter is available on this platform\n      const parameterAvailable =\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (!parameterAvailable) {\n        throw new Error('Parameter not available on this platform');\n      }\n\n      // Handle string keys\n      if (parameter.type === 'GLenum') {\n        value = getKeyValue(value);\n      }\n    }\n\n    // If unknown parameter - Could be a valid parameter not covered by PARAMS\n    // attempt to set it and let WebGL report errors\n    this._setParameter(pname, value);\n    return this;\n  }\n\n  /*\n   * Batch update resource parameters\n   * Assumes the subclass supports a setParameter call\n   */\n  setParameters(parameters) {\n    for (const pname in parameters) {\n      this.setParameter(pname, parameters[pname]);\n    }\n    return this;\n  }\n\n  // Install stubs for removed methods\n  stubRemovedMethods(className, version, methodNames) {\n    return stubRemovedMethods(this, className, version, methodNames);\n  }\n\n  // PUBLIC VIRTUAL METHODS\n  initialize(opts) {}\n\n  // PROTECTED METHODS - These must be overridden by subclass\n  _createHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _deleteHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _bindHandle(handle) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _getOptsFromHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  /** @returns {number} */\n  _getParameter(pname, opts) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _setParameter(pname, value) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  // PRIVATE METHODS\n\n  _context() {\n    this.gl.luma = this.gl.luma || {};\n    return this.gl.luma;\n  }\n\n  _addStats() {\n    const name = this[Symbol.toStringTag];\n    const stats = lumaStats.get('Resource Counts');\n\n    stats.get('Resources Created').incrementCount();\n    stats.get(`${name}s Created`).incrementCount();\n    stats.get(`${name}s Active`).incrementCount();\n  }\n\n  _removeStats() {\n    const name = this[Symbol.toStringTag];\n    const stats = lumaStats.get('Resource Counts');\n\n    stats.get(`${name}s Active`).decrementCount();\n  }\n\n  /**\n   * Track common allocated memory and memory based on particular gl context.\n   * @param {number} bytes\n   * @param {string} name\n   */\n  _trackAllocatedMemory(bytes, name = this[Symbol.toStringTag]) {\n    this._trackAllocatedMemoryForContext(bytes, name);\n    this._trackAllocatedMemoryForContext(bytes, name, this.gl.canvas && this.gl.canvas.id);\n    this.byteLength = bytes;\n  }\n\n  _trackAllocatedMemoryForContext(bytes, name = this[Symbol.toStringTag], id = '') {\n    const stats = lumaStats.get(`Memory Usage${id}`);\n    stats.get('GPU Memory').addCount(bytes);\n    stats.get(`${name} Memory`).addCount(bytes);\n  }\n\n  /**\n   * Deallocate memory for common statistic and for each gl context as well.\n   * @param {string} name\n   */\n  _trackDeallocatedMemory(name = this[Symbol.toStringTag]) {\n    this._trackDeallocatedMemoryForContext(name);\n    this._trackDeallocatedMemoryForContext(name, this.gl.canvas && this.gl.canvas.id);\n    this.byteLength = 0;\n  }\n\n  _trackDeallocatedMemoryForContext(name = this[Symbol.toStringTag], id = '') {\n    const stats = lumaStats.get(`Memory Usage${id}`);\n\n    stats.get('GPU Memory').subtractCount(this.byteLength);\n    stats.get(`${name} Memory`).subtractCount(this.byteLength);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}