{"ast":null,"code":"'use strict';\n\nvar invariant = require('../../vendor/invariant');\nvar xtend = require('../../vendor/xtend').extend;\nvar uriTemplate = require('rest/util/uriTemplate');\nvar encodeOverlay = require('../encode_overlay');\nvar invariantLocation = require('../invariant_location');\nvar makeService = require('../make_service');\n\n/**\n * @class MapboxStatic\n */\nvar MapboxStatic = makeService('MapboxStatic');\nvar API_STATIC = '/styles/v1/{username}/{styleid}/static{+overlay}/{+xyzbp}/{width}x{height}{+retina}{?access_token,attribution,logo,before_layer}';\nvar API_STATIC_CLASSIC = '/v4/{mapid}{+overlay}/{+xyz}/{width}x{height}{+retina}{.format}{?access_token}';\n\n/**\n * Determine a URL for a static map image, using the [Mapbox Static Map API](https://www.mapbox.com/api-documentation/#static).\n *\n * @param {string} username Mapbox username\n * @param {string} styleid Mapbox Style ID\n * @param {number} width width of the image\n * @param {number} height height of the image\n *\n * @param {Object|string} position either an object with longitude and latitude members, or the string 'auto'\n * @param {number} position.longitude east, west bearing\n * @param {number} position.latitude north, south bearing\n * @param {number} position.zoom map zoom level\n * @param {number} position.bearing map bearing in degrees between 0 and 360\n * @param {number} position.pitch map pitch in degrees between 0 (straight down, no pitch) and 60 (maximum pitch)\n *\n * @param {Object} options all map options\n * @param {boolean} [options.retina=false] whether to double image pixel density\n *\n * @param {Array<Object>} [options.markers=[]] an array of simple marker objects as an overlay\n * @param {Object} [options.geojson={}] geojson data for the overlay\n * @param {Object} [options.path={}] a path and\n * @param {Array<Object>} options.path.geojson data for the path as an array of longitude, latitude objects\n * @param {Array<Object>} options.path.style optional style definitions for a path\n * @param {boolean} options.attribution controlling whether there is attribution on the image; defaults to true\n * @param {boolean} options.logo controlling whether there is a Mapbox logo on the image; defaults to true\n * @param {string} options.before_layer value for controlling where the overlay is inserted in the style\n *\n * @returns {string} static map url\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n * var url = mapboxClient.getStaticURL('mapbox', 'streets-v10', 600, 400, {\n *   longitude: 151.22,\n *   latitude: -33.87,\n *   zoom: 11\n * }, {\n *   markers: [{ longitude: 151.22, latitude: -33.87 }],\n *   before_layer: 'housenum-label'\n * });\n * // url = https://api.mapbox.com/styles/v1/mapbox/streets-v10/static/pin-l-circle(151.22,-33.87)/151.22,-33.87,11/600x400?access_token=ACCESS_TOKEN&before_layer=housenum-label\n */\nMapboxStatic.prototype.getStaticURL = function (username, styleid, width, height, position, options) {\n  invariant(typeof username === 'string', 'username option required and must be a string');\n  invariant(typeof styleid === 'string', 'styleid option required and must be a string');\n  invariant(typeof width === 'number', 'width option required and must be a number');\n  invariant(typeof height === 'number', 'height option required and must be a number');\n  var defaults = {\n    retina: ''\n  };\n  var xyzbp;\n  if (position === 'auto') {\n    xyzbp = 'auto';\n  } else {\n    invariantLocation(position);\n    xyzbp = position.longitude + ',' + position.latitude + ',' + position.zoom;\n    if ('pitch' in position) {\n      xyzbp += ',' + (position.bearing || 0) + ',' + position.pitch;\n    } else if ('bearing' in position) {\n      xyzbp += ',' + position.bearing;\n    }\n  }\n  var userOptions = {};\n  if (options) {\n    invariant(typeof options === 'object', 'options must be an object');\n    if (options.format) {\n      invariant(typeof options.format === 'string', 'format must be a string');\n      userOptions.format = options.format;\n    }\n    if (options.retina) {\n      invariant(typeof options.retina === 'boolean', 'retina must be a boolean');\n      userOptions.retina = options.retina;\n    }\n    if (options.markers) {\n      userOptions.overlay = '/' + encodeOverlay.encodeMarkers(options.markers);\n    } else if (options.geojson) {\n      userOptions.overlay = '/' + encodeOverlay.encodeGeoJSON(options.geojson);\n    } else if (options.path) {\n      userOptions.overlay = '/' + encodeOverlay.encodePath(options.path);\n    }\n    if ('attribution' in options) {\n      invariant(typeof options.attribution === 'boolean', 'attribution must be a boolean');\n      userOptions.attribution = options.attribution;\n    }\n    if ('logo' in options) {\n      invariant(typeof options.logo === 'boolean', 'logo must be a boolean');\n      userOptions.logo = options.logo;\n    }\n    if (options.before_layer) {\n      invariant(typeof options.before_layer === 'string', 'before_layer must be a string');\n      userOptions.before_layer = options.before_layer;\n    }\n  }\n  var params = xtend(defaults, userOptions, {\n    username: username,\n    styleid: styleid,\n    width: width,\n    xyzbp: xyzbp,\n    height: height,\n    access_token: this.accessToken\n  });\n  if (params.retina === true) {\n    params.retina = '@2x';\n  }\n  return this.endpoint + uriTemplate.expand(API_STATIC, params);\n};\n\n/**\n * Determine a URL for a static classic map image, using the [Mapbox Static (Classic) Map API](https://www.mapbox.com/api-documentation/pages/static_classic.html).\n *\n * @param {string} mapid a Mapbox map id in username.id form\n * @param {number} width width of the image\n * @param {number} height height of the image\n *\n * @param {Object|string} position either an object with longitude and latitude members, or the string 'auto'\n * @param {number} position.longitude east, west bearing\n * @param {number} position.latitude north, south bearing\n * @param {number} position.zoom zoom level\n *\n * @param {Object} options all map options\n * @param {string} [options.format=png] image format. can be jpg70, jpg80, jpg90, png32, png64, png128, png256\n * @param {boolean} [options.retina=false] whether to double image pixel density\n *\n * @param {Array<Object>} [options.markers=[]] an array of simple marker objects as an overlay\n * @param {Object} [options.geojson={}] geojson data for the overlay\n * @param {Object} [options.path={}] a path and\n * @param {Array<Object>} options.path.geojson data for the path as an array of longitude, latitude objects\n * @param {Array<Object>} options.path.style optional style definitions for a path\n *\n * @returns {string} static classic map url\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n */\nMapboxStatic.prototype.getStaticClassicURL = function (mapid, width, height, position, options) {\n  invariant(typeof mapid === 'string', 'mapid option required and must be a string');\n  invariant(typeof width === 'number', 'width option required and must be a number');\n  invariant(typeof height === 'number', 'height option required and must be a number');\n  var defaults = {\n    format: 'png',\n    retina: ''\n  };\n  var xyz;\n  if (position === 'auto') {\n    xyz = 'auto';\n  } else {\n    invariantLocation(position);\n    xyz = position.longitude + ',' + position.latitude + ',' + position.zoom;\n  }\n  var userOptions = {};\n  if (options) {\n    invariant(typeof options === 'object', 'options must be an object');\n    if (options.format) {\n      invariant(typeof options.format === 'string', 'format must be a string');\n      userOptions.format = options.format;\n    }\n    if (options.retina) {\n      invariant(typeof options.retina === 'boolean', 'retina must be a boolean');\n      userOptions.retina = options.retina;\n    }\n    if (options.markers) {\n      userOptions.overlay = '/' + encodeOverlay.encodeMarkers(options.markers);\n    } else if (options.geojson) {\n      userOptions.overlay = '/' + encodeOverlay.encodeGeoJSON(options.geojson);\n    } else if (options.path) {\n      userOptions.overlay = '/' + encodeOverlay.encodePath(options.path);\n    }\n  }\n  var params = xtend(defaults, userOptions, {\n    mapid: mapid,\n    width: width,\n    xyz: xyz,\n    height: height,\n    access_token: this.accessToken\n  });\n  if (params.retina === true) {\n    params.retina = '@2x';\n  }\n  return this.endpoint + uriTemplate.expand(API_STATIC_CLASSIC, params);\n};\nmodule.exports = MapboxStatic;","map":{"version":3,"names":["invariant","require","xtend","extend","uriTemplate","encodeOverlay","invariantLocation","makeService","MapboxStatic","API_STATIC","API_STATIC_CLASSIC","prototype","getStaticURL","username","styleid","width","height","position","options","defaults","retina","xyzbp","longitude","latitude","zoom","bearing","pitch","userOptions","format","markers","overlay","encodeMarkers","geojson","encodeGeoJSON","path","encodePath","attribution","logo","before_layer","params","access_token","accessToken","endpoint","expand","getStaticClassicURL","mapid","xyz","module","exports"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/mapbox/lib/services/static.js"],"sourcesContent":["'use strict';\n\nvar invariant = require('../../vendor/invariant');\nvar xtend = require('../../vendor/xtend').extend;\nvar uriTemplate = require('rest/util/uriTemplate');\nvar encodeOverlay = require('../encode_overlay');\nvar invariantLocation = require('../invariant_location');\nvar makeService = require('../make_service');\n\n/**\n * @class MapboxStatic\n */\nvar MapboxStatic = makeService('MapboxStatic');\n\nvar API_STATIC = '/styles/v1/{username}/{styleid}/static{+overlay}/{+xyzbp}/{width}x{height}{+retina}{?access_token,attribution,logo,before_layer}';\nvar API_STATIC_CLASSIC = '/v4/{mapid}{+overlay}/{+xyz}/{width}x{height}{+retina}{.format}{?access_token}';\n\n/**\n * Determine a URL for a static map image, using the [Mapbox Static Map API](https://www.mapbox.com/api-documentation/#static).\n *\n * @param {string} username Mapbox username\n * @param {string} styleid Mapbox Style ID\n * @param {number} width width of the image\n * @param {number} height height of the image\n *\n * @param {Object|string} position either an object with longitude and latitude members, or the string 'auto'\n * @param {number} position.longitude east, west bearing\n * @param {number} position.latitude north, south bearing\n * @param {number} position.zoom map zoom level\n * @param {number} position.bearing map bearing in degrees between 0 and 360\n * @param {number} position.pitch map pitch in degrees between 0 (straight down, no pitch) and 60 (maximum pitch)\n *\n * @param {Object} options all map options\n * @param {boolean} [options.retina=false] whether to double image pixel density\n *\n * @param {Array<Object>} [options.markers=[]] an array of simple marker objects as an overlay\n * @param {Object} [options.geojson={}] geojson data for the overlay\n * @param {Object} [options.path={}] a path and\n * @param {Array<Object>} options.path.geojson data for the path as an array of longitude, latitude objects\n * @param {Array<Object>} options.path.style optional style definitions for a path\n * @param {boolean} options.attribution controlling whether there is attribution on the image; defaults to true\n * @param {boolean} options.logo controlling whether there is a Mapbox logo on the image; defaults to true\n * @param {string} options.before_layer value for controlling where the overlay is inserted in the style\n *\n * @returns {string} static map url\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n * var url = mapboxClient.getStaticURL('mapbox', 'streets-v10', 600, 400, {\n *   longitude: 151.22,\n *   latitude: -33.87,\n *   zoom: 11\n * }, {\n *   markers: [{ longitude: 151.22, latitude: -33.87 }],\n *   before_layer: 'housenum-label'\n * });\n * // url = https://api.mapbox.com/styles/v1/mapbox/streets-v10/static/pin-l-circle(151.22,-33.87)/151.22,-33.87,11/600x400?access_token=ACCESS_TOKEN&before_layer=housenum-label\n */\nMapboxStatic.prototype.getStaticURL = function(username, styleid, width, height, position, options) {\n  invariant(typeof username === 'string', 'username option required and must be a string');\n  invariant(typeof styleid === 'string', 'styleid option required and must be a string');\n  invariant(typeof width === 'number', 'width option required and must be a number');\n  invariant(typeof height === 'number', 'height option required and must be a number');\n\n  var defaults = {\n    retina: ''\n  };\n\n  var xyzbp;\n\n  if (position === 'auto') {\n    xyzbp = 'auto';\n  } else {\n    invariantLocation(position);\n    xyzbp = position.longitude + ',' + position.latitude + ',' + position.zoom;\n    if ('pitch' in position) {\n        xyzbp += ',' + (position.bearing || 0) + ',' + position.pitch;\n    } else if ('bearing' in position) {\n        xyzbp += ',' + position.bearing;\n    }\n  }\n\n  var userOptions = {};\n\n  if (options) {\n    invariant(typeof options === 'object', 'options must be an object');\n    if (options.format) {\n      invariant(typeof options.format === 'string', 'format must be a string');\n      userOptions.format = options.format;\n    }\n    if (options.retina) {\n      invariant(typeof options.retina === 'boolean', 'retina must be a boolean');\n      userOptions.retina = options.retina;\n    }\n    if (options.markers) {\n      userOptions.overlay = '/' + encodeOverlay.encodeMarkers(options.markers);\n    } else if (options.geojson) {\n      userOptions.overlay = '/' + encodeOverlay.encodeGeoJSON(options.geojson);\n    } else if (options.path) {\n      userOptions.overlay = '/' + encodeOverlay.encodePath(options.path);\n    }\n    if ('attribution' in options) {\n      invariant(typeof options.attribution === 'boolean', 'attribution must be a boolean');\n      userOptions.attribution = options.attribution;\n    }\n    if ('logo' in options) {\n      invariant(typeof options.logo === 'boolean', 'logo must be a boolean');\n      userOptions.logo = options.logo;\n    }\n    if (options.before_layer) {\n      invariant(typeof options.before_layer === 'string', 'before_layer must be a string');\n      userOptions.before_layer = options.before_layer;\n    }\n  }\n\n  var params = xtend(defaults, userOptions, {\n    username: username,\n    styleid: styleid,\n    width: width,\n    xyzbp: xyzbp,\n    height: height,\n    access_token: this.accessToken\n  });\n\n  if (params.retina === true) {\n    params.retina = '@2x';\n  }\n\n  return this.endpoint + uriTemplate.expand(API_STATIC, params);\n};\n\n/**\n * Determine a URL for a static classic map image, using the [Mapbox Static (Classic) Map API](https://www.mapbox.com/api-documentation/pages/static_classic.html).\n *\n * @param {string} mapid a Mapbox map id in username.id form\n * @param {number} width width of the image\n * @param {number} height height of the image\n *\n * @param {Object|string} position either an object with longitude and latitude members, or the string 'auto'\n * @param {number} position.longitude east, west bearing\n * @param {number} position.latitude north, south bearing\n * @param {number} position.zoom zoom level\n *\n * @param {Object} options all map options\n * @param {string} [options.format=png] image format. can be jpg70, jpg80, jpg90, png32, png64, png128, png256\n * @param {boolean} [options.retina=false] whether to double image pixel density\n *\n * @param {Array<Object>} [options.markers=[]] an array of simple marker objects as an overlay\n * @param {Object} [options.geojson={}] geojson data for the overlay\n * @param {Object} [options.path={}] a path and\n * @param {Array<Object>} options.path.geojson data for the path as an array of longitude, latitude objects\n * @param {Array<Object>} options.path.style optional style definitions for a path\n *\n * @returns {string} static classic map url\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n */\nMapboxStatic.prototype.getStaticClassicURL = function(mapid, width, height, position, options) {\n  invariant(typeof mapid === 'string', 'mapid option required and must be a string');\n  invariant(typeof width === 'number', 'width option required and must be a number');\n  invariant(typeof height === 'number', 'height option required and must be a number');\n\n  var defaults = {\n    format: 'png',\n    retina: ''\n  };\n\n  var xyz;\n\n  if (position === 'auto') {\n    xyz = 'auto';\n  } else {\n    invariantLocation(position);\n    xyz = position.longitude + ',' + position.latitude + ',' + position.zoom;\n  }\n\n  var userOptions = {};\n\n  if (options) {\n    invariant(typeof options === 'object', 'options must be an object');\n    if (options.format) {\n      invariant(typeof options.format === 'string', 'format must be a string');\n      userOptions.format = options.format;\n    }\n    if (options.retina) {\n      invariant(typeof options.retina === 'boolean', 'retina must be a boolean');\n      userOptions.retina = options.retina;\n    }\n    if (options.markers) {\n      userOptions.overlay = '/' + encodeOverlay.encodeMarkers(options.markers);\n    } else if (options.geojson) {\n      userOptions.overlay = '/' + encodeOverlay.encodeGeoJSON(options.geojson);\n    } else if (options.path) {\n      userOptions.overlay = '/' + encodeOverlay.encodePath(options.path);\n    }\n  }\n\n  var params = xtend(defaults, userOptions, {\n    mapid: mapid,\n    width: width,\n    xyz: xyz,\n    height: height,\n    access_token: this.accessToken\n  });\n\n  if (params.retina === true) {\n    params.retina = '@2x';\n  }\n\n  return this.endpoint + uriTemplate.expand(API_STATIC_CLASSIC, params);\n};\n\nmodule.exports = MapboxStatic;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}