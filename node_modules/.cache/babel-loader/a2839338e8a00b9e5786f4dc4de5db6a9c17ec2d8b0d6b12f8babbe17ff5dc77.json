{"ast":null,"code":"import _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar MAX_BUFFER_LENGTH = Number.MAX_SAFE_INTEGER;\nvar STATE;\n(function (STATE) {\n  STATE[STATE[\"BEGIN\"] = 0] = \"BEGIN\";\n  STATE[STATE[\"VALUE\"] = 1] = \"VALUE\";\n  STATE[STATE[\"OPEN_OBJECT\"] = 2] = \"OPEN_OBJECT\";\n  STATE[STATE[\"CLOSE_OBJECT\"] = 3] = \"CLOSE_OBJECT\";\n  STATE[STATE[\"OPEN_ARRAY\"] = 4] = \"OPEN_ARRAY\";\n  STATE[STATE[\"CLOSE_ARRAY\"] = 5] = \"CLOSE_ARRAY\";\n  STATE[STATE[\"TEXT_ESCAPE\"] = 6] = \"TEXT_ESCAPE\";\n  STATE[STATE[\"STRING\"] = 7] = \"STRING\";\n  STATE[STATE[\"BACKSLASH\"] = 8] = \"BACKSLASH\";\n  STATE[STATE[\"END\"] = 9] = \"END\";\n  STATE[STATE[\"OPEN_KEY\"] = 10] = \"OPEN_KEY\";\n  STATE[STATE[\"CLOSE_KEY\"] = 11] = \"CLOSE_KEY\";\n  STATE[STATE[\"TRUE\"] = 12] = \"TRUE\";\n  STATE[STATE[\"TRUE2\"] = 13] = \"TRUE2\";\n  STATE[STATE[\"TRUE3\"] = 14] = \"TRUE3\";\n  STATE[STATE[\"FALSE\"] = 15] = \"FALSE\";\n  STATE[STATE[\"FALSE2\"] = 16] = \"FALSE2\";\n  STATE[STATE[\"FALSE3\"] = 17] = \"FALSE3\";\n  STATE[STATE[\"FALSE4\"] = 18] = \"FALSE4\";\n  STATE[STATE[\"NULL\"] = 19] = \"NULL\";\n  STATE[STATE[\"NULL2\"] = 20] = \"NULL2\";\n  STATE[STATE[\"NULL3\"] = 21] = \"NULL3\";\n  STATE[STATE[\"NUMBER_DECIMAL_POINT\"] = 22] = \"NUMBER_DECIMAL_POINT\";\n  STATE[STATE[\"NUMBER_DIGIT\"] = 23] = \"NUMBER_DIGIT\";\n})(STATE || (STATE = {}));\nvar Char = {\n  tab: 0x09,\n  lineFeed: 0x0a,\n  carriageReturn: 0x0d,\n  space: 0x20,\n  doubleQuote: 0x22,\n  plus: 0x2b,\n  comma: 0x2c,\n  minus: 0x2d,\n  period: 0x2e,\n  _0: 0x30,\n  _9: 0x39,\n  colon: 0x3a,\n  E: 0x45,\n  openBracket: 0x5b,\n  backslash: 0x5c,\n  closeBracket: 0x5d,\n  a: 0x61,\n  b: 0x62,\n  e: 0x65,\n  f: 0x66,\n  l: 0x6c,\n  n: 0x6e,\n  r: 0x72,\n  s: 0x73,\n  t: 0x74,\n  u: 0x75,\n  openBrace: 0x7b,\n  closeBrace: 0x7d\n};\nvar stringTokenPattern = /[\\\\\"\\n]/g;\nvar DEFAULT_OPTIONS = {\n  onready: function onready() {},\n  onopenobject: function onopenobject() {},\n  onkey: function onkey() {},\n  oncloseobject: function oncloseobject() {},\n  onopenarray: function onopenarray() {},\n  onclosearray: function onclosearray() {},\n  onvalue: function onvalue() {},\n  onerror: function onerror() {},\n  onend: function onend() {},\n  onchunkparsed: function onchunkparsed() {}\n};\nvar ClarinetParser = /*#__PURE__*/function () {\n  function ClarinetParser() {\n    _classCallCheck(this, ClarinetParser);\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _defineProperty(this, \"options\", DEFAULT_OPTIONS);\n    _defineProperty(this, \"bufferCheckPosition\", MAX_BUFFER_LENGTH);\n    _defineProperty(this, \"q\", '');\n    _defineProperty(this, \"c\", '');\n    _defineProperty(this, \"p\", '');\n    _defineProperty(this, \"closed\", false);\n    _defineProperty(this, \"closedRoot\", false);\n    _defineProperty(this, \"sawRoot\", false);\n    _defineProperty(this, \"error\", null);\n    _defineProperty(this, \"state\", STATE.BEGIN);\n    _defineProperty(this, \"stack\", []);\n    _defineProperty(this, \"position\", 0);\n    _defineProperty(this, \"column\", 0);\n    _defineProperty(this, \"line\", 1);\n    _defineProperty(this, \"slashed\", false);\n    _defineProperty(this, \"unicodeI\", 0);\n    _defineProperty(this, \"unicodeS\", null);\n    _defineProperty(this, \"depth\", 0);\n    _defineProperty(this, \"textNode\", void 0);\n    _defineProperty(this, \"numberNode\", void 0);\n    this.options = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n    this.textNode = undefined;\n    this.numberNode = '';\n    this.emit('onready');\n  }\n  _createClass(ClarinetParser, [{\n    key: \"end\",\n    value: function end() {\n      if (this.state !== STATE.VALUE || this.depth !== 0) this._error('Unexpected end');\n      this._closeValue();\n      this.c = '';\n      this.closed = true;\n      this.emit('onend');\n      return this;\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      this.error = null;\n      return this;\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.write(null);\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(event, data) {\n      var _this$options$event, _this$options;\n      (_this$options$event = (_this$options = this.options)[event]) === null || _this$options$event === void 0 ? void 0 : _this$options$event.call(_this$options, data, this);\n    }\n  }, {\n    key: \"emitNode\",\n    value: function emitNode(event, data) {\n      this._closeValue();\n      this.emit(event, data);\n    }\n  }, {\n    key: \"write\",\n    value: function write(chunk) {\n      if (this.error) {\n        throw this.error;\n      }\n      if (this.closed) {\n        return this._error('Cannot write after close. Assign an onready handler.');\n      }\n      if (chunk === null) {\n        return this.end();\n      }\n      var i = 0;\n      var c = chunk.charCodeAt(0);\n      var p = this.p;\n      while (c) {\n        p = c;\n        this.c = c = chunk.charCodeAt(i++);\n        if (p !== c) {\n          this.p = p;\n        } else {\n          p = this.p;\n        }\n        if (!c) break;\n        this.position++;\n        if (c === Char.lineFeed) {\n          this.line++;\n          this.column = 0;\n        } else this.column++;\n        switch (this.state) {\n          case STATE.BEGIN:\n            if (c === Char.openBrace) this.state = STATE.OPEN_OBJECT;else if (c === Char.openBracket) this.state = STATE.OPEN_ARRAY;else if (!isWhitespace(c)) {\n              this._error('Non-whitespace before {[.');\n            }\n            continue;\n          case STATE.OPEN_KEY:\n          case STATE.OPEN_OBJECT:\n            if (isWhitespace(c)) continue;\n            if (this.state === STATE.OPEN_KEY) this.stack.push(STATE.CLOSE_KEY);else if (c === Char.closeBrace) {\n              this.emit('onopenobject');\n              this.depth++;\n              this.emit('oncloseobject');\n              this.depth--;\n              this.state = this.stack.pop() || STATE.VALUE;\n              continue;\n            } else this.stack.push(STATE.CLOSE_OBJECT);\n            if (c === Char.doubleQuote) this.state = STATE.STRING;else this._error('Malformed object key should start with \"');\n            continue;\n          case STATE.CLOSE_KEY:\n          case STATE.CLOSE_OBJECT:\n            if (isWhitespace(c)) continue;\n            if (c === Char.colon) {\n              if (this.state === STATE.CLOSE_OBJECT) {\n                this.stack.push(STATE.CLOSE_OBJECT);\n                this._closeValue('onopenobject');\n                this.depth++;\n              } else this._closeValue('onkey');\n              this.state = STATE.VALUE;\n            } else if (c === Char.closeBrace) {\n              this.emitNode('oncloseobject');\n              this.depth--;\n              this.state = this.stack.pop() || STATE.VALUE;\n            } else if (c === Char.comma) {\n              if (this.state === STATE.CLOSE_OBJECT) this.stack.push(STATE.CLOSE_OBJECT);\n              this._closeValue();\n              this.state = STATE.OPEN_KEY;\n            } else this._error('Bad object');\n            continue;\n          case STATE.OPEN_ARRAY:\n          case STATE.VALUE:\n            if (isWhitespace(c)) continue;\n            if (this.state === STATE.OPEN_ARRAY) {\n              this.emit('onopenarray');\n              this.depth++;\n              this.state = STATE.VALUE;\n              if (c === Char.closeBracket) {\n                this.emit('onclosearray');\n                this.depth--;\n                this.state = this.stack.pop() || STATE.VALUE;\n                continue;\n              } else {\n                this.stack.push(STATE.CLOSE_ARRAY);\n              }\n            }\n            if (c === Char.doubleQuote) this.state = STATE.STRING;else if (c === Char.openBrace) this.state = STATE.OPEN_OBJECT;else if (c === Char.openBracket) this.state = STATE.OPEN_ARRAY;else if (c === Char.t) this.state = STATE.TRUE;else if (c === Char.f) this.state = STATE.FALSE;else if (c === Char.n) this.state = STATE.NULL;else if (c === Char.minus) {\n              this.numberNode += '-';\n            } else if (Char._0 <= c && c <= Char._9) {\n              this.numberNode += String.fromCharCode(c);\n              this.state = STATE.NUMBER_DIGIT;\n            } else this._error('Bad value');\n            continue;\n          case STATE.CLOSE_ARRAY:\n            if (c === Char.comma) {\n              this.stack.push(STATE.CLOSE_ARRAY);\n              this._closeValue('onvalue');\n              this.state = STATE.VALUE;\n            } else if (c === Char.closeBracket) {\n              this.emitNode('onclosearray');\n              this.depth--;\n              this.state = this.stack.pop() || STATE.VALUE;\n            } else if (isWhitespace(c)) continue;else this._error('Bad array');\n            continue;\n          case STATE.STRING:\n            if (this.textNode === undefined) {\n              this.textNode = '';\n            }\n            var starti = i - 1;\n            var slashed = this.slashed;\n            var unicodeI = this.unicodeI;\n            STRING_BIGLOOP: while (true) {\n              while (unicodeI > 0) {\n                this.unicodeS += String.fromCharCode(c);\n                c = chunk.charCodeAt(i++);\n                this.position++;\n                if (unicodeI === 4) {\n                  this.textNode += String.fromCharCode(parseInt(this.unicodeS, 16));\n                  unicodeI = 0;\n                  starti = i - 1;\n                } else {\n                  unicodeI++;\n                }\n                if (!c) break STRING_BIGLOOP;\n              }\n              if (c === Char.doubleQuote && !slashed) {\n                this.state = this.stack.pop() || STATE.VALUE;\n                this.textNode += chunk.substring(starti, i - 1);\n                this.position += i - 1 - starti;\n                break;\n              }\n              if (c === Char.backslash && !slashed) {\n                slashed = true;\n                this.textNode += chunk.substring(starti, i - 1);\n                this.position += i - 1 - starti;\n                c = chunk.charCodeAt(i++);\n                this.position++;\n                if (!c) break;\n              }\n              if (slashed) {\n                slashed = false;\n                if (c === Char.n) {\n                  this.textNode += '\\n';\n                } else if (c === Char.r) {\n                  this.textNode += '\\r';\n                } else if (c === Char.t) {\n                  this.textNode += '\\t';\n                } else if (c === Char.f) {\n                  this.textNode += '\\f';\n                } else if (c === Char.b) {\n                  this.textNode += '\\b';\n                } else if (c === Char.u) {\n                  unicodeI = 1;\n                  this.unicodeS = '';\n                } else {\n                  this.textNode += String.fromCharCode(c);\n                }\n                c = chunk.charCodeAt(i++);\n                this.position++;\n                starti = i - 1;\n                if (!c) break;else continue;\n              }\n              stringTokenPattern.lastIndex = i;\n              var reResult = stringTokenPattern.exec(chunk);\n              if (reResult === null) {\n                i = chunk.length + 1;\n                this.textNode += chunk.substring(starti, i - 1);\n                this.position += i - 1 - starti;\n                break;\n              }\n              i = reResult.index + 1;\n              c = chunk.charCodeAt(reResult.index);\n              if (!c) {\n                this.textNode += chunk.substring(starti, i - 1);\n                this.position += i - 1 - starti;\n                break;\n              }\n            }\n            this.slashed = slashed;\n            this.unicodeI = unicodeI;\n            continue;\n          case STATE.TRUE:\n            if (c === Char.r) this.state = STATE.TRUE2;else this._error(\"Invalid true started with t\".concat(c));\n            continue;\n          case STATE.TRUE2:\n            if (c === Char.u) this.state = STATE.TRUE3;else this._error(\"Invalid true started with tr\".concat(c));\n            continue;\n          case STATE.TRUE3:\n            if (c === Char.e) {\n              this.emit('onvalue', true);\n              this.state = this.stack.pop() || STATE.VALUE;\n            } else this._error(\"Invalid true started with tru\".concat(c));\n            continue;\n          case STATE.FALSE:\n            if (c === Char.a) this.state = STATE.FALSE2;else this._error(\"Invalid false started with f\".concat(c));\n            continue;\n          case STATE.FALSE2:\n            if (c === Char.l) this.state = STATE.FALSE3;else this._error(\"Invalid false started with fa\".concat(c));\n            continue;\n          case STATE.FALSE3:\n            if (c === Char.s) this.state = STATE.FALSE4;else this._error(\"Invalid false started with fal\".concat(c));\n            continue;\n          case STATE.FALSE4:\n            if (c === Char.e) {\n              this.emit('onvalue', false);\n              this.state = this.stack.pop() || STATE.VALUE;\n            } else this._error(\"Invalid false started with fals\".concat(c));\n            continue;\n          case STATE.NULL:\n            if (c === Char.u) this.state = STATE.NULL2;else this._error(\"Invalid null started with n\".concat(c));\n            continue;\n          case STATE.NULL2:\n            if (c === Char.l) this.state = STATE.NULL3;else this._error(\"Invalid null started with nu\".concat(c));\n            continue;\n          case STATE.NULL3:\n            if (c === Char.l) {\n              this.emit('onvalue', null);\n              this.state = this.stack.pop() || STATE.VALUE;\n            } else this._error(\"Invalid null started with nul\".concat(c));\n            continue;\n          case STATE.NUMBER_DECIMAL_POINT:\n            if (c === Char.period) {\n              this.numberNode += '.';\n              this.state = STATE.NUMBER_DIGIT;\n            } else this._error('Leading zero not followed by .');\n            continue;\n          case STATE.NUMBER_DIGIT:\n            if (Char._0 <= c && c <= Char._9) this.numberNode += String.fromCharCode(c);else if (c === Char.period) {\n              if (this.numberNode.indexOf('.') !== -1) this._error('Invalid number has two dots');\n              this.numberNode += '.';\n            } else if (c === Char.e || c === Char.E) {\n              if (this.numberNode.indexOf('e') !== -1 || this.numberNode.indexOf('E') !== -1) this._error('Invalid number has two exponential');\n              this.numberNode += 'e';\n            } else if (c === Char.plus || c === Char.minus) {\n              if (!(p === Char.e || p === Char.E)) this._error('Invalid symbol in number');\n              this.numberNode += String.fromCharCode(c);\n            } else {\n              this._closeNumber();\n              i--;\n              this.state = this.stack.pop() || STATE.VALUE;\n            }\n            continue;\n          default:\n            this._error(\"Unknown state: \".concat(this.state));\n        }\n      }\n      if (this.position >= this.bufferCheckPosition) {\n        checkBufferLength(this);\n      }\n      this.emit('onchunkparsed');\n      return this;\n    }\n  }, {\n    key: \"_closeValue\",\n    value: function _closeValue() {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'onvalue';\n      if (this.textNode !== undefined) {\n        this.emit(event, this.textNode);\n      }\n      this.textNode = undefined;\n    }\n  }, {\n    key: \"_closeNumber\",\n    value: function _closeNumber() {\n      if (this.numberNode) this.emit('onvalue', parseFloat(this.numberNode));\n      this.numberNode = '';\n    }\n  }, {\n    key: \"_error\",\n    value: function _error() {\n      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this._closeValue();\n      message += \"\\nLine: \".concat(this.line, \"\\nColumn: \").concat(this.column, \"\\nChar: \").concat(this.c);\n      var error = new Error(message);\n      this.error = error;\n      this.emit('onerror', error);\n    }\n  }]);\n  return ClarinetParser;\n}();\nexport { ClarinetParser as default };\nfunction isWhitespace(c) {\n  return c === Char.carriageReturn || c === Char.lineFeed || c === Char.space || c === Char.tab;\n}\nfunction checkBufferLength(parser) {\n  var maxAllowed = Math.max(MAX_BUFFER_LENGTH, 10);\n  var maxActual = 0;\n  for (var _i = 0, _arr = ['textNode', 'numberNode']; _i < _arr.length; _i++) {\n    var buffer = _arr[_i];\n    var len = parser[buffer] === undefined ? 0 : parser[buffer].length;\n    if (len > maxAllowed) {\n      switch (buffer) {\n        case 'text':\n          break;\n        default:\n          parser._error(\"Max buffer length exceeded: \".concat(buffer));\n      }\n    }\n    maxActual = Math.max(maxActual, len);\n  }\n  parser.bufferCheckPosition = MAX_BUFFER_LENGTH - maxActual + parser.position;\n}","map":{"version":3,"names":["MAX_BUFFER_LENGTH","Number","MAX_SAFE_INTEGER","STATE","Char","tab","lineFeed","carriageReturn","space","doubleQuote","plus","comma","minus","period","_0","_9","colon","E","openBracket","backslash","closeBracket","a","b","e","f","l","n","r","s","t","u","openBrace","closeBrace","stringTokenPattern","DEFAULT_OPTIONS","onready","onopenobject","onkey","oncloseobject","onopenarray","onclosearray","onvalue","onerror","onend","onchunkparsed","ClarinetParser","_classCallCheck","options","arguments","length","undefined","_defineProperty","BEGIN","_objectSpread","textNode","numberNode","emit","_createClass","key","value","end","state","VALUE","depth","_error","_closeValue","c","closed","resume","error","close","write","event","data","_this$options$event","_this$options","call","emitNode","chunk","i","charCodeAt","p","position","line","column","OPEN_OBJECT","OPEN_ARRAY","isWhitespace","OPEN_KEY","stack","push","CLOSE_KEY","pop","CLOSE_OBJECT","STRING","CLOSE_ARRAY","TRUE","FALSE","NULL","String","fromCharCode","NUMBER_DIGIT","starti","slashed","unicodeI","STRING_BIGLOOP","unicodeS","parseInt","substring","lastIndex","reResult","exec","index","TRUE2","concat","TRUE3","FALSE2","FALSE3","FALSE4","NULL2","NULL3","NUMBER_DECIMAL_POINT","indexOf","_closeNumber","bufferCheckPosition","checkBufferLength","parseFloat","message","Error","default","parser","maxAllowed","Math","max","maxActual","_i","_arr","buffer","len"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/processors/node_modules/@loaders.gl/json/src/lib/clarinet/clarinet.ts"],"sourcesContent":["// loaders.gl, MIT license\n// This is a fork of the clarinet library, originally BSD license (see LICENSE file)\n// loaders.gl changes:\n// - typescript port\n\nexport type ClarinetEvent =\n  | 'onvalue'\n  | 'onstring'\n  | 'onkey'\n  | 'onopenobject'\n  | 'oncloseobject'\n  | 'onopenarray'\n  | 'onclosearray'\n  | 'onerror'\n  | 'onend'\n  | 'onready';\n\n// Removes the MAX_BUFFER_LENGTH, originally set to 64 * 1024\nconst MAX_BUFFER_LENGTH = Number.MAX_SAFE_INTEGER;\n// const DEBUG = false;\n\nenum STATE {\n  BEGIN = 0,\n  VALUE, // general stuff\n  OPEN_OBJECT, // {\n  CLOSE_OBJECT, // }\n  OPEN_ARRAY, // [\n  CLOSE_ARRAY, // ]\n  TEXT_ESCAPE, // \\ stuff\n  STRING, // \"\"\n  BACKSLASH,\n  END, // No more stack\n  OPEN_KEY, // , \"a\"\n  CLOSE_KEY, // :\n  TRUE, // r\n  TRUE2, // u\n  TRUE3, // e\n  FALSE, // a\n  FALSE2, // l\n  FALSE3, // s\n  FALSE4, // e\n  NULL, // u\n  NULL2, // l\n  NULL3, // l\n  NUMBER_DECIMAL_POINT, // .\n  NUMBER_DIGIT // [0-9]\n}\n\nconst Char = {\n  tab: 0x09, // \\t\n  lineFeed: 0x0a, // \\n\n  carriageReturn: 0x0d, // \\r\n  space: 0x20, // \" \"\n\n  doubleQuote: 0x22, // \"\n  plus: 0x2b, // +\n  comma: 0x2c, // ,\n  minus: 0x2d, // -\n  period: 0x2e, // .\n\n  _0: 0x30, // 0\n  _9: 0x39, // 9\n\n  colon: 0x3a, // :\n\n  E: 0x45, // E\n\n  openBracket: 0x5b, // [\n  backslash: 0x5c, // \\\n  closeBracket: 0x5d, // ]\n\n  a: 0x61, // a\n  b: 0x62, // b\n  e: 0x65, // e\n  f: 0x66, // f\n  l: 0x6c, // l\n  n: 0x6e, // n\n  r: 0x72, // r\n  s: 0x73, // s\n  t: 0x74, // t\n  u: 0x75, // u\n\n  openBrace: 0x7b, // {\n  closeBrace: 0x7d // }\n};\n\nconst stringTokenPattern = /[\\\\\"\\n]/g;\n\ntype ParserEvent = (parser: ClarinetParser, event: string, data?: any) => void;\n\nexport type ClarinetParserOptions = {\n  onready?: ParserEvent;\n  onopenobject?: ParserEvent;\n  onkey?: ParserEvent;\n  oncloseobject?: ParserEvent;\n  onopenarray?: ParserEvent;\n  onclosearray?: ParserEvent;\n  onvalue?: ParserEvent;\n  onerror?: ParserEvent;\n  onend?: ParserEvent;\n  onchunkparsed?: ParserEvent;\n};\n\nconst DEFAULT_OPTIONS: Required<ClarinetParserOptions> = {\n  onready: () => {},\n  onopenobject: () => {},\n  onkey: () => {},\n  oncloseobject: () => {},\n  onopenarray: () => {},\n  onclosearray: () => {},\n  onvalue: () => {},\n  onerror: () => {},\n  onend: () => {},\n  onchunkparsed: () => {}\n};\nexport default class ClarinetParser {\n  protected options: Required<ClarinetParserOptions> = DEFAULT_OPTIONS;\n\n  bufferCheckPosition = MAX_BUFFER_LENGTH;\n  q = '';\n  c = '';\n  p = '';\n  closed = false;\n  closedRoot = false;\n  sawRoot = false;\n  // tag = null;\n  error: Error | null = null;\n  state = STATE.BEGIN;\n  stack: STATE[] = [];\n  // mostly just for error reporting\n  position: number = 0;\n  column: number = 0;\n  line: number = 1;\n  slashed: boolean = false;\n  unicodeI: number = 0;\n  unicodeS: string | null = null;\n  depth: number = 0;\n\n  textNode;\n  numberNode;\n\n  constructor(options: ClarinetParserOptions = {}) {\n    this.options = {...DEFAULT_OPTIONS, ...options};\n    this.textNode = undefined;\n    this.numberNode = '';\n    this.emit('onready');\n  }\n\n  end() {\n    if (this.state !== STATE.VALUE || this.depth !== 0) this._error('Unexpected end');\n\n    this._closeValue();\n    this.c = '';\n    this.closed = true;\n    this.emit('onend');\n    return this;\n  }\n\n  resume() {\n    this.error = null;\n    return this;\n  }\n\n  close() {\n    return this.write(null);\n  }\n\n  // protected\n\n  emit(event: string, data?: any): void {\n    // if (DEBUG) console.log('-- emit', event, data);\n    this.options[event]?.(data, this);\n  }\n\n  emitNode(event: string, data?: any): void {\n    this._closeValue();\n    this.emit(event, data);\n  }\n\n  /* eslint-disable no-continue */\n  // eslint-disable-next-line complexity, max-statements\n  write(chunk) {\n    if (this.error) {\n      throw this.error;\n    }\n    if (this.closed) {\n      return this._error('Cannot write after close. Assign an onready handler.');\n    }\n    if (chunk === null) {\n      return this.end();\n    }\n    let i = 0;\n    let c = chunk.charCodeAt(0);\n    let p = this.p;\n    // if (DEBUG) console.log(`write -> [${  chunk  }]`);\n    while (c) {\n      p = c;\n      this.c = c = chunk.charCodeAt(i++);\n      // if chunk doesnt have next, like streaming char by char\n      // this way we need to check if previous is really previous\n      // if not we need to reset to what the this says is the previous\n      // from buffer\n      if (p !== c) {\n        this.p = p;\n      } else {\n        p = this.p;\n      }\n\n      if (!c) break;\n\n      // if (DEBUG) console.log(i, c, STATE[this.state]);\n      this.position++;\n      if (c === Char.lineFeed) {\n        this.line++;\n        this.column = 0;\n      } else this.column++;\n\n      switch (this.state) {\n        case STATE.BEGIN:\n          if (c === Char.openBrace) this.state = STATE.OPEN_OBJECT;\n          else if (c === Char.openBracket) this.state = STATE.OPEN_ARRAY;\n          else if (!isWhitespace(c)) {\n            this._error('Non-whitespace before {[.');\n          }\n          continue;\n\n        case STATE.OPEN_KEY:\n        case STATE.OPEN_OBJECT:\n          if (isWhitespace(c)) continue;\n          if (this.state === STATE.OPEN_KEY) this.stack.push(STATE.CLOSE_KEY);\n          else if (c === Char.closeBrace) {\n            this.emit('onopenobject');\n            this.depth++;\n            this.emit('oncloseobject');\n            this.depth--;\n            this.state = this.stack.pop() || STATE.VALUE;\n            continue;\n          } else this.stack.push(STATE.CLOSE_OBJECT);\n          if (c === Char.doubleQuote) this.state = STATE.STRING;\n          else this._error('Malformed object key should start with \"');\n          continue;\n\n        case STATE.CLOSE_KEY:\n        case STATE.CLOSE_OBJECT:\n          if (isWhitespace(c)) continue;\n          // let event = this.state === STATE.CLOSE_KEY ? 'key' : 'object';\n          if (c === Char.colon) {\n            if (this.state === STATE.CLOSE_OBJECT) {\n              this.stack.push(STATE.CLOSE_OBJECT);\n              this._closeValue('onopenobject');\n              this.depth++;\n            } else this._closeValue('onkey');\n            this.state = STATE.VALUE;\n          } else if (c === Char.closeBrace) {\n            this.emitNode('oncloseobject');\n            this.depth--;\n            this.state = this.stack.pop() || STATE.VALUE;\n          } else if (c === Char.comma) {\n            if (this.state === STATE.CLOSE_OBJECT) this.stack.push(STATE.CLOSE_OBJECT);\n            this._closeValue();\n            this.state = STATE.OPEN_KEY;\n          } else this._error('Bad object');\n          continue;\n\n        case STATE.OPEN_ARRAY: // after an array there always a value\n        case STATE.VALUE:\n          if (isWhitespace(c)) continue;\n          if (this.state === STATE.OPEN_ARRAY) {\n            this.emit('onopenarray');\n            this.depth++;\n            this.state = STATE.VALUE;\n            if (c === Char.closeBracket) {\n              this.emit('onclosearray');\n              this.depth--;\n              this.state = this.stack.pop() || STATE.VALUE;\n              continue;\n            } else {\n              this.stack.push(STATE.CLOSE_ARRAY);\n            }\n          }\n          if (c === Char.doubleQuote) this.state = STATE.STRING;\n          else if (c === Char.openBrace) this.state = STATE.OPEN_OBJECT;\n          else if (c === Char.openBracket) this.state = STATE.OPEN_ARRAY;\n          else if (c === Char.t) this.state = STATE.TRUE;\n          else if (c === Char.f) this.state = STATE.FALSE;\n          else if (c === Char.n) this.state = STATE.NULL;\n          else if (c === Char.minus) {\n            // keep and continue\n            this.numberNode += '-';\n          } else if (Char._0 <= c && c <= Char._9) {\n            this.numberNode += String.fromCharCode(c);\n            this.state = STATE.NUMBER_DIGIT;\n          } else this._error('Bad value');\n          continue;\n\n        case STATE.CLOSE_ARRAY:\n          if (c === Char.comma) {\n            this.stack.push(STATE.CLOSE_ARRAY);\n            this._closeValue('onvalue');\n            this.state = STATE.VALUE;\n          } else if (c === Char.closeBracket) {\n            this.emitNode('onclosearray');\n            this.depth--;\n            this.state = this.stack.pop() || STATE.VALUE;\n          } else if (isWhitespace(c)) continue;\n          else this._error('Bad array');\n          continue;\n\n        case STATE.STRING:\n          if (this.textNode === undefined) {\n            this.textNode = '';\n          }\n\n          // thanks thejh, this is an about 50% performance improvement.\n          let starti = i - 1;\n          let slashed = this.slashed;\n          let unicodeI = this.unicodeI;\n          // eslint-disable-next-line no-constant-condition, no-labels\n          STRING_BIGLOOP: while (true) {\n            // if (DEBUG) console.log(i, c, STATE[this.state], slashed);\n            // zero means \"no unicode active\". 1-4 mean \"parse some more\". end after 4.\n            while (unicodeI > 0) {\n              this.unicodeS += String.fromCharCode(c);\n              c = chunk.charCodeAt(i++);\n              this.position++;\n              if (unicodeI === 4) {\n                // TODO this might be slow? well, probably not used too often anyway\n                this.textNode += String.fromCharCode(parseInt(this.unicodeS as string, 16));\n                unicodeI = 0;\n                starti = i - 1;\n              } else {\n                unicodeI++;\n              }\n              // we can just break here: no stuff we skipped that still has to be sliced out or so\n              // eslint-disable-next-line no-labels\n              if (!c) break STRING_BIGLOOP;\n            }\n            if (c === Char.doubleQuote && !slashed) {\n              this.state = this.stack.pop() || STATE.VALUE;\n              this.textNode += chunk.substring(starti, i - 1);\n              this.position += i - 1 - starti;\n              break;\n            }\n            if (c === Char.backslash && !slashed) {\n              slashed = true;\n              this.textNode += chunk.substring(starti, i - 1);\n              this.position += i - 1 - starti;\n              c = chunk.charCodeAt(i++);\n              this.position++;\n              if (!c) break;\n            }\n            if (slashed) {\n              slashed = false;\n              if (c === Char.n) {\n                this.textNode += '\\n';\n              } else if (c === Char.r) {\n                this.textNode += '\\r';\n              } else if (c === Char.t) {\n                this.textNode += '\\t';\n              } else if (c === Char.f) {\n                this.textNode += '\\f';\n              } else if (c === Char.b) {\n                this.textNode += '\\b';\n              } else if (c === Char.u) {\n                // \\uxxxx. meh!\n                unicodeI = 1;\n                this.unicodeS = '';\n              } else {\n                this.textNode += String.fromCharCode(c);\n              }\n              c = chunk.charCodeAt(i++);\n              this.position++;\n              starti = i - 1;\n              if (!c) break;\n              else continue;\n            }\n\n            stringTokenPattern.lastIndex = i;\n            const reResult = stringTokenPattern.exec(chunk);\n            if (reResult === null) {\n              i = chunk.length + 1;\n              this.textNode += chunk.substring(starti, i - 1);\n              this.position += i - 1 - starti;\n              break;\n            }\n            i = reResult.index + 1;\n            c = chunk.charCodeAt(reResult.index);\n            if (!c) {\n              this.textNode += chunk.substring(starti, i - 1);\n              this.position += i - 1 - starti;\n              break;\n            }\n          }\n          this.slashed = slashed;\n          this.unicodeI = unicodeI;\n          continue;\n\n        case STATE.TRUE:\n          if (c === Char.r) this.state = STATE.TRUE2;\n          else this._error(`Invalid true started with t${c}`);\n          continue;\n\n        case STATE.TRUE2:\n          if (c === Char.u) this.state = STATE.TRUE3;\n          else this._error(`Invalid true started with tr${c}`);\n          continue;\n\n        case STATE.TRUE3:\n          if (c === Char.e) {\n            this.emit('onvalue', true);\n            this.state = this.stack.pop() || STATE.VALUE;\n          } else this._error(`Invalid true started with tru${c}`);\n          continue;\n\n        case STATE.FALSE:\n          if (c === Char.a) this.state = STATE.FALSE2;\n          else this._error(`Invalid false started with f${c}`);\n          continue;\n\n        case STATE.FALSE2:\n          if (c === Char.l) this.state = STATE.FALSE3;\n          else this._error(`Invalid false started with fa${c}`);\n          continue;\n\n        case STATE.FALSE3:\n          if (c === Char.s) this.state = STATE.FALSE4;\n          else this._error(`Invalid false started with fal${c}`);\n          continue;\n\n        case STATE.FALSE4:\n          if (c === Char.e) {\n            this.emit('onvalue', false);\n            this.state = this.stack.pop() || STATE.VALUE;\n          } else this._error(`Invalid false started with fals${c}`);\n          continue;\n\n        case STATE.NULL:\n          if (c === Char.u) this.state = STATE.NULL2;\n          else this._error(`Invalid null started with n${c}`);\n          continue;\n\n        case STATE.NULL2:\n          if (c === Char.l) this.state = STATE.NULL3;\n          else this._error(`Invalid null started with nu${c}`);\n          continue;\n\n        case STATE.NULL3:\n          if (c === Char.l) {\n            this.emit('onvalue', null);\n            this.state = this.stack.pop() || STATE.VALUE;\n          } else this._error(`Invalid null started with nul${c}`);\n          continue;\n\n        case STATE.NUMBER_DECIMAL_POINT:\n          if (c === Char.period) {\n            this.numberNode += '.';\n            this.state = STATE.NUMBER_DIGIT;\n          } else this._error('Leading zero not followed by .');\n          continue;\n\n        case STATE.NUMBER_DIGIT:\n          if (Char._0 <= c && c <= Char._9) this.numberNode += String.fromCharCode(c);\n          else if (c === Char.period) {\n            if (this.numberNode.indexOf('.') !== -1) this._error('Invalid number has two dots');\n            this.numberNode += '.';\n          } else if (c === Char.e || c === Char.E) {\n            if (this.numberNode.indexOf('e') !== -1 || this.numberNode.indexOf('E') !== -1)\n              this._error('Invalid number has two exponential');\n            this.numberNode += 'e';\n          } else if (c === Char.plus || c === Char.minus) {\n            // @ts-expect-error\n            if (!(p === Char.e || p === Char.E)) this._error('Invalid symbol in number');\n            this.numberNode += String.fromCharCode(c);\n          } else {\n            this._closeNumber();\n            i--; // go back one\n            this.state = this.stack.pop() || STATE.VALUE;\n          }\n          continue;\n\n        default:\n          this._error(`Unknown state: ${this.state}`);\n      }\n    }\n    if (this.position >= this.bufferCheckPosition) {\n      checkBufferLength(this);\n    }\n\n    this.emit('onchunkparsed');\n\n    return this;\n  }\n\n  _closeValue(event: string = 'onvalue'): void {\n    if (this.textNode !== undefined) {\n      this.emit(event, this.textNode);\n    }\n    this.textNode = undefined;\n  }\n\n  _closeNumber(): void {\n    if (this.numberNode) this.emit('onvalue', parseFloat(this.numberNode));\n    this.numberNode = '';\n  }\n\n  _error(message: string = ''): void {\n    this._closeValue();\n    message += `\\nLine: ${this.line}\\nColumn: ${this.column}\\nChar: ${this.c}`;\n    const error = new Error(message);\n    this.error = error;\n    this.emit('onerror', error);\n  }\n}\n\nfunction isWhitespace(c): boolean {\n  return c === Char.carriageReturn || c === Char.lineFeed || c === Char.space || c === Char.tab;\n}\n\nfunction checkBufferLength(parser) {\n  const maxAllowed = Math.max(MAX_BUFFER_LENGTH, 10);\n  let maxActual = 0;\n\n  for (const buffer of ['textNode', 'numberNode']) {\n    const len = parser[buffer] === undefined ? 0 : parser[buffer].length;\n    if (len > maxAllowed) {\n      switch (buffer) {\n        case 'text':\n          // TODO - should this be closeValue?\n          // closeText(parser);\n          break;\n\n        default:\n          parser._error(`Max buffer length exceeded: ${buffer}`);\n      }\n    }\n    maxActual = Math.max(maxActual, len);\n  }\n  parser.bufferCheckPosition = MAX_BUFFER_LENGTH - maxActual + parser.position;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}