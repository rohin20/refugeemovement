{"ast":null,"code":"import _slicedToArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport earcut from 'earcut';\nimport { modifyPolygonWindingDirection, WINDING } from '@math.gl/polygon';\nvar OUTER_POLYGON_WINDING = WINDING.CLOCKWISE;\nvar HOLE_POLYGON_WINDING = WINDING.COUNTER_CLOCKWISE;\nvar windingOptions = {\n  isClosed: true\n};\nfunction validate(polygon) {\n  polygon = polygon && polygon.positions || polygon;\n  if (!Array.isArray(polygon) && !ArrayBuffer.isView(polygon)) {\n    throw new Error('invalid polygon');\n  }\n}\nexport function getPositions(polygon) {\n  return 'positions' in polygon ? polygon.positions : polygon;\n}\nexport function getHoleIndices(polygon) {\n  return 'holeIndices' in polygon ? polygon.holeIndices : null;\n}\nfunction isNested(polygon) {\n  return Array.isArray(polygon[0]);\n}\nfunction isSimple(polygon) {\n  return polygon.length >= 1 && polygon[0].length >= 2 && Number.isFinite(polygon[0][0]);\n}\nfunction isNestedRingClosed(simplePolygon) {\n  var p0 = simplePolygon[0];\n  var p1 = simplePolygon[simplePolygon.length - 1];\n  return p0[0] === p1[0] && p0[1] === p1[1] && p0[2] === p1[2];\n}\nfunction isFlatRingClosed(positions, size, startIndex, endIndex) {\n  for (var i = 0; i < size; i++) {\n    if (positions[startIndex + i] !== positions[endIndex - size + i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction copyNestedRing(target, targetStartIndex, simplePolygon, size, windingDirection) {\n  var targetIndex = targetStartIndex;\n  var len = simplePolygon.length;\n  for (var i = 0; i < len; i++) {\n    for (var j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[i][j] || 0;\n    }\n  }\n  if (!isNestedRingClosed(simplePolygon)) {\n    for (var _j = 0; _j < size; _j++) {\n      target[targetIndex++] = simplePolygon[0][_j] || 0;\n    }\n  }\n  windingOptions.start = targetStartIndex;\n  windingOptions.end = targetIndex;\n  windingOptions.size = size;\n  modifyPolygonWindingDirection(target, windingDirection, windingOptions);\n  return targetIndex;\n}\nfunction copyFlatRing(target, targetStartIndex, positions, size) {\n  var srcStartIndex = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  var srcEndIndex = arguments.length > 5 ? arguments[5] : undefined;\n  var windingDirection = arguments.length > 6 ? arguments[6] : undefined;\n  srcEndIndex = srcEndIndex || positions.length;\n  var srcLength = srcEndIndex - srcStartIndex;\n  if (srcLength <= 0) {\n    return targetStartIndex;\n  }\n  var targetIndex = targetStartIndex;\n  for (var i = 0; i < srcLength; i++) {\n    target[targetIndex++] = positions[srcStartIndex + i];\n  }\n  if (!isFlatRingClosed(positions, size, srcStartIndex, srcEndIndex)) {\n    for (var _i = 0; _i < size; _i++) {\n      target[targetIndex++] = positions[srcStartIndex + _i];\n    }\n  }\n  windingOptions.start = targetStartIndex;\n  windingOptions.end = targetIndex;\n  windingOptions.size = size;\n  modifyPolygonWindingDirection(target, windingDirection, windingOptions);\n  return targetIndex;\n}\nexport function normalize(polygon, positionSize) {\n  validate(polygon);\n  var positions = [];\n  var holeIndices = [];\n  if ('positions' in polygon) {\n    var _polygon = polygon,\n      srcPositions = _polygon.positions,\n      srcHoleIndices = _polygon.holeIndices;\n    if (srcHoleIndices) {\n      var targetIndex = 0;\n      for (var i = 0; i <= srcHoleIndices.length; i++) {\n        targetIndex = copyFlatRing(positions, targetIndex, srcPositions, positionSize, srcHoleIndices[i - 1], srcHoleIndices[i], i === 0 ? OUTER_POLYGON_WINDING : HOLE_POLYGON_WINDING);\n        holeIndices.push(targetIndex);\n      }\n      holeIndices.pop();\n      return {\n        positions: positions,\n        holeIndices: holeIndices\n      };\n    }\n    polygon = srcPositions;\n  }\n  if (!isNested(polygon)) {\n    copyFlatRing(positions, 0, polygon, positionSize, 0, positions.length, OUTER_POLYGON_WINDING);\n    return positions;\n  }\n  if (!isSimple(polygon)) {\n    var _targetIndex = 0;\n    var _iterator = _createForOfIteratorHelper(polygon.entries()),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n          polygonIndex = _step$value[0],\n          simplePolygon = _step$value[1];\n        _targetIndex = copyNestedRing(positions, _targetIndex, simplePolygon, positionSize, polygonIndex === 0 ? OUTER_POLYGON_WINDING : HOLE_POLYGON_WINDING);\n        holeIndices.push(_targetIndex);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    holeIndices.pop();\n    return {\n      positions: positions,\n      holeIndices: holeIndices\n    };\n  }\n  copyNestedRing(positions, 0, polygon, positionSize, OUTER_POLYGON_WINDING);\n  return positions;\n}\nexport function getSurfaceIndices(polygon, positionSize, preproject) {\n  var holeIndices = getHoleIndices(polygon);\n  if (holeIndices) {\n    holeIndices = holeIndices.map(function (positionIndex) {\n      return positionIndex / positionSize;\n    });\n  }\n  var positions = getPositions(polygon);\n  if (preproject) {\n    var n = positions.length;\n    positions = positions.slice();\n    var p = [];\n    for (var i = 0; i < n; i += positionSize) {\n      p[0] = positions[i];\n      p[1] = positions[i + 1];\n      var xy = preproject(p);\n      positions[i] = xy[0];\n      positions[i + 1] = xy[1];\n    }\n  }\n  return earcut(positions, holeIndices, positionSize);\n}","map":{"version":3,"names":["earcut","modifyPolygonWindingDirection","WINDING","OUTER_POLYGON_WINDING","CLOCKWISE","HOLE_POLYGON_WINDING","COUNTER_CLOCKWISE","windingOptions","isClosed","validate","polygon","positions","Array","isArray","ArrayBuffer","isView","Error","getPositions","getHoleIndices","holeIndices","isNested","isSimple","length","Number","isFinite","isNestedRingClosed","simplePolygon","p0","p1","isFlatRingClosed","size","startIndex","endIndex","i","copyNestedRing","target","targetStartIndex","windingDirection","targetIndex","len","j","start","end","copyFlatRing","srcStartIndex","arguments","undefined","srcEndIndex","srcLength","normalize","positionSize","_polygon","srcPositions","srcHoleIndices","push","pop","_iterator","_createForOfIteratorHelper","entries","_step","s","n","done","_step$value","_slicedToArray","value","polygonIndex","err","e","f","getSurfaceIndices","preproject","map","positionIndex","slice","p","xy"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/layers/src/solid-polygon-layer/polygon.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable max-params */\nimport earcut from 'earcut';\nimport {modifyPolygonWindingDirection, WINDING} from '@math.gl/polygon';\n\nimport type {Position} from '@deck.gl/core';\nimport type {NumericArray} from '@math.gl/core';\n\nconst OUTER_POLYGON_WINDING = WINDING.CLOCKWISE;\nconst HOLE_POLYGON_WINDING = WINDING.COUNTER_CLOCKWISE;\n\ntype WindingOptions = {\n  start?: number;\n  end?: number;\n  size?: number;\n  isClosed?: boolean;\n};\n\n/** A scratch object for sending winding options */\nconst windingOptions: WindingOptions = {\n  isClosed: true\n};\n\n// 4 data formats are supported:\n\n/** Simple Polygon: an array of points */\nexport type NestedSimplePolygonGeometry = Position[];\n/** Complex Polygon: an array of array of points (array of rings)\n * with the first ring representing the outer hull and other rings representing holes\n */\nexport type NestedComplexPolygonGeometry = Position[][];\n/** An array of numbers (flattened \"simple polygon\") */\nexport type FlatSimplePolygonGeometry = NumericArray;\n/** Flattened \"complex polygon\" */\nexport type FlatComplexPolygonGeometry = {positions: NumericArray; holeIndices: NumericArray};\n\nexport type PolygonGeometry =\n  | NestedSimplePolygonGeometry\n  | NestedComplexPolygonGeometry\n  | FlatSimplePolygonGeometry\n  | FlatComplexPolygonGeometry;\n\nexport type NormalizedPolygonGeometry = FlatSimplePolygonGeometry | FlatComplexPolygonGeometry;\n\n/**\n * Ensure a polygon is valid format\n */\nfunction validate(polygon: PolygonGeometry): void {\n  polygon = (polygon && (polygon as FlatComplexPolygonGeometry).positions) || polygon;\n  if (!Array.isArray(polygon) && !ArrayBuffer.isView(polygon)) {\n    throw new Error('invalid polygon');\n  }\n}\n\n/** Get the positions from a normalized polygon */\nexport function getPositions(polygon: NormalizedPolygonGeometry): NumericArray {\n  return 'positions' in polygon ? polygon.positions : polygon;\n}\n\n/** Get the hole indices from a normalized polygon */\nexport function getHoleIndices(polygon: NormalizedPolygonGeometry): NumericArray | null {\n  return 'holeIndices' in polygon ? polygon.holeIndices : null;\n}\n\n/**\n * Check if a polygon is nested or flat\n * Returns true if the polygon is a flat polygon (i.e. not an array of polygons)\n */\nfunction isNested(\n  polygon: PolygonGeometry\n): polygon is NestedSimplePolygonGeometry | NestedComplexPolygonGeometry {\n  return Array.isArray(polygon[0]);\n}\n\n/**\n * Check if a polygon is simple or complex\n * Returns true if the polygon is a simple polygon (i.e. not an array of polygons)\n */\nfunction isSimple(\n  polygon: NestedSimplePolygonGeometry | NestedComplexPolygonGeometry\n): polygon is NestedSimplePolygonGeometry {\n  return polygon.length >= 1 && polygon[0].length >= 2 && Number.isFinite(polygon[0][0]);\n}\n\n/**\n * Check if a simple polygon is a closed ring\n * Returns true if the simple polygon is a closed ring\n */\nfunction isNestedRingClosed(simplePolygon: NestedSimplePolygonGeometry): boolean {\n  // check if first and last vertex are the same\n  const p0 = simplePolygon[0];\n  const p1 = simplePolygon[simplePolygon.length - 1];\n\n  return p0[0] === p1[0] && p0[1] === p1[1] && p0[2] === p1[2];\n}\n\n/**\n * Check if a simple flat array is a closed ring\n * Returns true if the simple flat array is a closed ring\n */\nfunction isFlatRingClosed(\n  positions: FlatSimplePolygonGeometry,\n  /** size of a position, 2 (xy) or 3 (xyz) */\n  size: number,\n  /** start index of the path in the positions array */\n  startIndex: number,\n  /** end index of the path in the positions array */\n  endIndex: number\n): boolean {\n  for (let i = 0; i < size; i++) {\n    if (positions[startIndex + i] !== positions[endIndex - size + i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Copy a simple polygon coordinates into a flat array, closes the ring if needed.\n * Returns the index of the write head in the destination\n */\nfunction copyNestedRing(\n  /** destination */\n  target: NumericArray,\n  /** index in the destination to start copying into */\n  targetStartIndex: number,\n  /** the source polygon */\n  simplePolygon: NestedSimplePolygonGeometry,\n  /** size of a position, 2 (xy) or 3 (xyz) */\n  size: number,\n  /** modify polygon to be of the specified winding direction */\n  windingDirection: number\n): number {\n  let targetIndex = targetStartIndex;\n  const len = simplePolygon.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[i][j] || 0;\n    }\n  }\n\n  if (!isNestedRingClosed(simplePolygon)) {\n    for (let j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[0][j] || 0;\n    }\n  }\n\n  windingOptions.start = targetStartIndex;\n  windingOptions.end = targetIndex;\n  windingOptions.size = size;\n  modifyPolygonWindingDirection(target, windingDirection, windingOptions);\n\n  return targetIndex;\n}\n\n/**\n * Copy a simple flat array into another flat array, closes the ring if needed.\n * Returns the index of the write head in the destination\n */\nfunction copyFlatRing(\n  /** destination */\n  target: NumericArray,\n  /** index in the destination to start copying into */\n  targetStartIndex: number,\n  /** the source polygon */\n  positions: FlatSimplePolygonGeometry,\n  /** size of a position, 2 (xy) or 3 (xyz) */\n  size: number,\n  /** start index of the path in the positions array */\n  srcStartIndex: number = 0,\n  /** end index of the path in the positions array */\n  srcEndIndex: number,\n  windingDirection: number\n): number {\n  srcEndIndex = srcEndIndex || positions.length;\n  const srcLength = srcEndIndex - srcStartIndex;\n  if (srcLength <= 0) {\n    return targetStartIndex;\n  }\n  let targetIndex = targetStartIndex;\n\n  for (let i = 0; i < srcLength; i++) {\n    target[targetIndex++] = positions[srcStartIndex + i];\n  }\n\n  if (!isFlatRingClosed(positions, size, srcStartIndex, srcEndIndex)) {\n    for (let i = 0; i < size; i++) {\n      target[targetIndex++] = positions[srcStartIndex + i];\n    }\n  }\n\n  windingOptions.start = targetStartIndex;\n  windingOptions.end = targetIndex;\n  windingOptions.size = size;\n  modifyPolygonWindingDirection(target, windingDirection, windingOptions);\n\n  return targetIndex;\n}\n\n/**\n * Normalize any polygon representation into the \"complex flat\" format\n */\n/* eslint-disable max-statements */\nexport function normalize(\n  polygon: PolygonGeometry,\n  positionSize: number\n): NormalizedPolygonGeometry {\n  validate(polygon);\n\n  const positions: number[] = [];\n  const holeIndices: number[] = [];\n\n  if ('positions' in polygon) {\n    // complex flat\n    const {positions: srcPositions, holeIndices: srcHoleIndices} = polygon;\n\n    if (srcHoleIndices) {\n      let targetIndex = 0;\n      // split the positions array into `holeIndices.length + 1` rings\n      // holeIndices[-1] falls back to 0\n      // holeIndices[holeIndices.length] falls back to positions.length\n      for (let i = 0; i <= srcHoleIndices.length; i++) {\n        targetIndex = copyFlatRing(\n          positions,\n          targetIndex,\n          srcPositions,\n          positionSize,\n          srcHoleIndices[i - 1],\n          srcHoleIndices[i],\n          i === 0 ? OUTER_POLYGON_WINDING : HOLE_POLYGON_WINDING\n        );\n        holeIndices.push(targetIndex);\n      }\n      // The last one is not a starting index of a hole, remove\n      holeIndices.pop();\n\n      return {positions, holeIndices};\n    }\n    polygon = srcPositions;\n  }\n  if (!isNested(polygon)) {\n    // simple flat\n    copyFlatRing(positions, 0, polygon, positionSize, 0, positions.length, OUTER_POLYGON_WINDING);\n    return positions;\n  }\n  if (!isSimple(polygon)) {\n    // complex polygon\n    let targetIndex = 0;\n\n    for (const [polygonIndex, simplePolygon] of polygon.entries()) {\n      targetIndex = copyNestedRing(\n        positions,\n        targetIndex,\n        simplePolygon,\n        positionSize,\n        polygonIndex === 0 ? OUTER_POLYGON_WINDING : HOLE_POLYGON_WINDING\n      );\n      holeIndices.push(targetIndex);\n    }\n    // The last one is not a starting index of a hole, remove\n    holeIndices.pop();\n    // last index points to the end of the array, remove it\n    return {positions, holeIndices};\n  }\n  // simple polygon\n  copyNestedRing(positions, 0, polygon, positionSize, OUTER_POLYGON_WINDING);\n  return positions;\n}\n/* eslint-enable max-statements */\n\n/*\n * Get vertex indices for drawing polygon mesh (triangulation)\n */\nexport function getSurfaceIndices(\n  polygon: NormalizedPolygonGeometry,\n  positionSize: number,\n  preproject?: (xy: number[]) => number[]\n): number[] {\n  let holeIndices = getHoleIndices(polygon);\n  if (holeIndices) {\n    holeIndices = holeIndices.map(positionIndex => positionIndex / positionSize);\n  }\n\n  let positions = getPositions(polygon);\n\n  if (preproject) {\n    // When tesselating lnglat coordinates, project them to the common space for accuracy\n    const n = positions.length;\n    // Clone the array\n    positions = positions.slice();\n    const p: number[] = [];\n    for (let i = 0; i < n; i += positionSize) {\n      p[0] = positions[i];\n      p[1] = positions[i + 1];\n      const xy = preproject(p);\n      positions[i] = xy[0];\n      positions[i + 1] = xy[1];\n    }\n  }\n\n  // Let earcut triangulate the polygon\n  return earcut(positions, holeIndices, positionSize);\n}\n"],"mappings":";;AAqBA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAAQC,6BAAR,EAAuCC,OAAvC,QAAqD,kBAArD;AAKA,IAAMC,qBAAqB,GAAGD,OAAO,CAACE,SAAtC;AACA,IAAMC,oBAAoB,GAAGH,OAAO,CAACI,iBAArC;AAUA,IAAMC,cAA8B,GAAG;EACrCC,QAAQ,EAAE;AAD2B,CAAvC;AA4BA,SAASC,QAATA,CAAkBC,OAAlB,EAAkD;EAChDA,OAAO,GAAIA,OAAO,IAAKA,OAAD,CAAwCC,SAApD,IAAkED,OAA5E;EACA,IAAI,CAACE,KAAK,CAACC,OAAN,CAAcH,OAAd,CAAD,IAA2B,CAACI,WAAW,CAACC,MAAZ,CAAmBL,OAAnB,CAAhC,EAA6D;IAC3D,MAAM,IAAIM,KAAJ,CAAU,iBAAV,CAAN;EACD;AACF;AAGD,OAAO,SAASC,YAATA,CAAsBP,OAAtB,EAAwE;EAC7E,OAAO,eAAeA,OAAf,GAAyBA,OAAO,CAACC,SAAjC,GAA6CD,OAApD;AACD;AAGD,OAAO,SAASQ,cAATA,CAAwBR,OAAxB,EAAiF;EACtF,OAAO,iBAAiBA,OAAjB,GAA2BA,OAAO,CAACS,WAAnC,GAAiD,IAAxD;AACD;AAMD,SAASC,QAATA,CACEV,OADF,EAEyE;EACvE,OAAOE,KAAK,CAACC,OAAN,CAAcH,OAAO,CAAC,CAAD,CAArB,CAAP;AACD;AAMD,SAASW,QAATA,CACEX,OADF,EAE0C;EACxC,OAAOA,OAAO,CAACY,MAAR,IAAkB,CAAlB,IAAuBZ,OAAO,CAAC,CAAD,CAAP,CAAWY,MAAX,IAAqB,CAA5C,IAAiDC,MAAM,CAACC,QAAP,CAAgBd,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAhB,CAAxD;AACD;AAMD,SAASe,kBAATA,CAA4BC,aAA5B,EAAiF;EAE/E,IAAMC,EAAE,GAAGD,aAAa,CAAC,CAAD,CAAxB;EACA,IAAME,EAAE,GAAGF,aAAa,CAACA,aAAa,CAACJ,MAAd,GAAuB,CAAxB,CAAxB;EAEA,OAAOK,EAAE,CAAC,CAAD,CAAF,KAAUC,EAAE,CAAC,CAAD,CAAZ,IAAmBD,EAAE,CAAC,CAAD,CAAF,KAAUC,EAAE,CAAC,CAAD,CAA/B,IAAsCD,EAAE,CAAC,CAAD,CAAF,KAAUC,EAAE,CAAC,CAAD,CAAzD;AACD;AAMD,SAASC,gBAATA,CACElB,SADF,EAGEmB,IAHF,EAKEC,UALF,EAOEC,QAPF,EAQW;EACT,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAApB,EAA0BG,CAAC,EAA3B,EAA+B;IAC7B,IAAItB,SAAS,CAACoB,UAAU,GAAGE,CAAd,CAAT,KAA8BtB,SAAS,CAACqB,QAAQ,GAAGF,IAAX,GAAkBG,CAAnB,CAA3C,EAAkE;MAChE,OAAO,KAAP;IACD;EACF;EACD,OAAO,IAAP;AACD;AAMD,SAASC,cAATA,CAEEC,MAFF,EAIEC,gBAJF,EAMEV,aANF,EAQEI,IARF,EAUEO,gBAVF,EAWU;EACR,IAAIC,WAAW,GAAGF,gBAAlB;EACA,IAAMG,GAAG,GAAGb,aAAa,CAACJ,MAA1B;EACA,KAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGM,GAApB,EAAyBN,CAAC,EAA1B,EAA8B;IAC5B,KAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,IAApB,EAA0BU,CAAC,EAA3B,EAA+B;MAC7BL,MAAM,CAACG,WAAW,EAAZ,CAAN,GAAwBZ,aAAa,CAACO,CAAD,CAAb,CAAiBO,CAAjB,KAAuB,CAA/C;IACD;EACF;EAED,IAAI,CAACf,kBAAkB,CAACC,aAAD,CAAvB,EAAwC;IACtC,KAAK,IAAIc,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGV,IAApB,EAA0BU,EAAC,EAA3B,EAA+B;MAC7BL,MAAM,CAACG,WAAW,EAAZ,CAAN,GAAwBZ,aAAa,CAAC,CAAD,CAAb,CAAiBc,EAAjB,KAAuB,CAA/C;IACD;EACF;EAEDjC,cAAc,CAACkC,KAAf,GAAuBL,gBAAvB;EACA7B,cAAc,CAACmC,GAAf,GAAqBJ,WAArB;EACA/B,cAAc,CAACuB,IAAf,GAAsBA,IAAtB;EACA7B,6BAA6B,CAACkC,MAAD,EAASE,gBAAT,EAA2B9B,cAA3B,CAA7B;EAEA,OAAO+B,WAAP;AACD;AAMD,SAASK,YAATA,CAEER,MAFF,EAIEC,gBAJF,EAMEzB,SANF,EAQEmB,IARF,EAcU;EAAA,IAJRc,aAAqB,GAAAC,SAAA,CAAAvB,MAAA,QAAAuB,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAV1B;EAAA,IAYEE,WAZF,GAAAF,SAAA,CAAAvB,MAAA,OAAAuB,SAAA,MAAAC,SAAA;EAAA,IAaET,gBAbF,GAAAQ,SAAA,CAAAvB,MAAA,OAAAuB,SAAA,MAAAC,SAAA;EAeEC,WAAW,GAAGA,WAAW,IAAIpC,SAAS,CAACW,MAAvC;EACA,IAAM0B,SAAS,GAAGD,WAAW,GAAGH,aAAhC;EACA,IAAII,SAAS,IAAI,CAAjB,EAAoB;IAClB,OAAOZ,gBAAP;EACD;EACD,IAAIE,WAAW,GAAGF,gBAAlB;EAEA,KAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGe,SAApB,EAA+Bf,CAAC,EAAhC,EAAoC;IAClCE,MAAM,CAACG,WAAW,EAAZ,CAAN,GAAwB3B,SAAS,CAACiC,aAAa,GAAGX,CAAjB,CAAjC;EACD;EAED,IAAI,CAACJ,gBAAgB,CAAClB,SAAD,EAAYmB,IAAZ,EAAkBc,aAAlB,EAAiCG,WAAjC,CAArB,EAAoE;IAClE,KAAK,IAAId,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGH,IAApB,EAA0BG,EAAC,EAA3B,EAA+B;MAC7BE,MAAM,CAACG,WAAW,EAAZ,CAAN,GAAwB3B,SAAS,CAACiC,aAAa,GAAGX,EAAjB,CAAjC;IACD;EACF;EAED1B,cAAc,CAACkC,KAAf,GAAuBL,gBAAvB;EACA7B,cAAc,CAACmC,GAAf,GAAqBJ,WAArB;EACA/B,cAAc,CAACuB,IAAf,GAAsBA,IAAtB;EACA7B,6BAA6B,CAACkC,MAAD,EAASE,gBAAT,EAA2B9B,cAA3B,CAA7B;EAEA,OAAO+B,WAAP;AACD;AAMD,OAAO,SAASW,SAATA,CACLvC,OADK,EAELwC,YAFK,EAGsB;EAC3BzC,QAAQ,CAACC,OAAD,CAAR;EAEA,IAAMC,SAAmB,GAAG,EAA5B;EACA,IAAMQ,WAAqB,GAAG,EAA9B;EAEA,IAAI,eAAeT,OAAnB,EAA4B;IAE1B,IAAAyC,QAAA,GAA+DzC,OAA/D;MAAkB0C,YAAZ,GAAAD,QAAA,CAACxC,SAAS;MAA6B0C,cAAA,GAAAF,QAAA,CAAbhC,WAAW;IAE3C,IAAIkC,cAAJ,EAAoB;MAClB,IAAIf,WAAW,GAAG,CAAlB;MAIA,KAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIoB,cAAc,CAAC/B,MAApC,EAA4CW,CAAC,EAA7C,EAAiD;QAC/CK,WAAW,GAAGK,YAAY,CACxBhC,SADwB,EAExB2B,WAFwB,EAGxBc,YAHwB,EAIxBF,YAJwB,EAKxBG,cAAc,CAACpB,CAAC,GAAG,CAAL,CALU,EAMxBoB,cAAc,CAACpB,CAAD,CANU,EAOxBA,CAAC,KAAK,CAAN,GAAU9B,qBAAV,GAAkCE,oBAPV,CAA1B;QASAc,WAAW,CAACmC,IAAZ,CAAiBhB,WAAjB;MACD;MAEDnB,WAAW,CAACoC,GAAZ;MAEA,OAAO;QAAC5C,SAAD,EAACA,SAAD;QAAYQ,WAAA,EAAAA;MAAZ,CAAP;IACD;IACDT,OAAO,GAAG0C,YAAV;EACD;EACD,IAAI,CAAChC,QAAQ,CAACV,OAAD,CAAb,EAAwB;IAEtBiC,YAAY,CAAChC,SAAD,EAAY,CAAZ,EAAeD,OAAf,EAAwBwC,YAAxB,EAAsC,CAAtC,EAAyCvC,SAAS,CAACW,MAAnD,EAA2DnB,qBAA3D,CAAZ;IACA,OAAOQ,SAAP;EACD;EACD,IAAI,CAACU,QAAQ,CAACX,OAAD,CAAb,EAAwB;IAEtB,IAAI4B,YAAW,GAAG,CAAlB;IAAA,IAAAkB,SAAA,GAAAC,0BAAA,CAE4C/C,OAAO,CAACgD,OAAR,EAA5C;MAAAC,KAAA;IAAA;MAAA,KAAAH,SAAA,CAAAI,CAAA,MAAAD,KAAA,GAAAH,SAAA,CAAAK,CAAA,IAAAC,IAAA,GAA+D;QAAA,IAAAC,WAAA,GAAAC,cAAA,CAAAL,KAAA,CAAAM,KAAA;UAAnDC,YAAD,GAAAH,WAAA;UAAerC,aAAf,GAAAqC,WAAA;QACTzB,YAAW,GAAGJ,cAAc,CAC1BvB,SAD0B,EAE1B2B,YAF0B,EAG1BZ,aAH0B,EAI1BwB,YAJ0B,EAK1BgB,YAAY,KAAK,CAAjB,GAAqB/D,qBAArB,GAA6CE,oBALnB,CAA5B;QAOAc,WAAW,CAACmC,IAAZ,CAAiBhB,YAAjB;MACD;IAAA,SAAA6B,GAAA;MAAAX,SAAA,CAAAY,CAAA,CAAAD,GAAA;IAAA;MAAAX,SAAA,CAAAa,CAAA;IAAA;IAEDlD,WAAW,CAACoC,GAAZ;IAEA,OAAO;MAAC5C,SAAD,EAACA,SAAD;MAAYQ,WAAA,EAAAA;IAAZ,CAAP;EACD;EAEDe,cAAc,CAACvB,SAAD,EAAY,CAAZ,EAAeD,OAAf,EAAwBwC,YAAxB,EAAsC/C,qBAAtC,CAAd;EACA,OAAOQ,SAAP;AACD;AAMD,OAAO,SAAS2D,iBAATA,CACL5D,OADK,EAELwC,YAFK,EAGLqB,UAHK,EAIK;EACV,IAAIpD,WAAW,GAAGD,cAAc,CAACR,OAAD,CAAhC;EACA,IAAIS,WAAJ,EAAiB;IACfA,WAAW,GAAGA,WAAW,CAACqD,GAAZ,CAAgB,UAAAC,aAAa;MAAA,OAAIA,aAAa,GAAGvB,YAAjD;IAAA,EAAd;EACD;EAED,IAAIvC,SAAS,GAAGM,YAAY,CAACP,OAAD,CAA5B;EAEA,IAAI6D,UAAJ,EAAgB;IAEd,IAAMV,CAAC,GAAGlD,SAAS,CAACW,MAApB;IAEAX,SAAS,GAAGA,SAAS,CAAC+D,KAAV,EAAZ;IACA,IAAMC,CAAW,GAAG,EAApB;IACA,KAAK,IAAI1C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4B,CAApB,EAAuB5B,CAAC,IAAIiB,YAA5B,EAA0C;MACxCyB,CAAC,CAAC,CAAD,CAAD,GAAOhE,SAAS,CAACsB,CAAD,CAAhB;MACA0C,CAAC,CAAC,CAAD,CAAD,GAAOhE,SAAS,CAACsB,CAAC,GAAG,CAAL,CAAhB;MACA,IAAM2C,EAAE,GAAGL,UAAU,CAACI,CAAD,CAArB;MACAhE,SAAS,CAACsB,CAAD,CAAT,GAAe2C,EAAE,CAAC,CAAD,CAAjB;MACAjE,SAAS,CAACsB,CAAC,GAAG,CAAL,CAAT,GAAmB2C,EAAE,CAAC,CAAD,CAArB;IACD;EACF;EAGD,OAAO5E,MAAM,CAACW,SAAD,EAAYQ,WAAZ,EAAyB+B,YAAzB,CAAb;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}