{"ast":null,"code":"import _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { assertWebGLContext, log } from '@luma.gl/gltools';\nimport { parseGLSLCompilerError, getShaderName } from '../glsl-utils';\nimport { assert } from '../utils/assert';\nimport { uid } from '../utils/utils';\nimport Resource from './resource';\nvar ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';\nexport var Shader = /*#__PURE__*/function (_Resource, _Symbol$toStringTag) {\n  _inherits(Shader, _Resource);\n  var _super = _createSuper(Shader);\n  function Shader(gl, props) {\n    var _this;\n    _classCallCheck(this, Shader);\n    assertWebGLContext(gl);\n    assert(typeof props.source === 'string', ERR_SOURCE);\n    var id = getShaderName(props.source, null) || props.id || uid(\"unnamed \".concat(Shader.getTypeName(props.shaderType)));\n    _this = _super.call(this, gl, {\n      id: id\n    });\n    _this.shaderType = props.shaderType;\n    _this.source = props.source;\n    _this.initialize(props);\n    return _this;\n  }\n  _createClass(Shader, [{\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return 'Shader';\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize(_ref) {\n      var source = _ref.source;\n      var shaderName = getShaderName(source, null);\n      if (shaderName) {\n        this.id = uid(shaderName);\n      }\n      this._compile(source);\n    }\n  }, {\n    key: \"getParameter\",\n    value: function getParameter(pname) {\n      return this.gl.getShaderParameter(this.handle, pname);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(Shader.getTypeName(this.shaderType), \":\").concat(this.id);\n    }\n  }, {\n    key: \"getName\",\n    value: function getName() {\n      return getShaderName(this.source) || 'unnamed-shader';\n    }\n  }, {\n    key: \"getSource\",\n    value: function getSource() {\n      return this.gl.getShaderSource(this.handle);\n    }\n  }, {\n    key: \"getTranslatedSource\",\n    value: function getTranslatedSource() {\n      var extension = this.gl.getExtension('WEBGL_debug_shaders');\n      return extension ? extension.getTranslatedShaderSource(this.handle) : 'No translated source available. WEBGL_debug_shaders not implemented';\n    }\n  }, {\n    key: \"_compile\",\n    value: function _compile() {\n      var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.source;\n      if (!source.startsWith('#version ')) {\n        source = \"#version 100\\n\".concat(source);\n      }\n      this.source = source;\n      this.gl.shaderSource(this.handle, this.source);\n      this.gl.compileShader(this.handle);\n      var compileStatus = this.getParameter(35713);\n      if (!compileStatus) {\n        var infoLog = this.gl.getShaderInfoLog(this.handle);\n        var _parseGLSLCompilerErr = parseGLSLCompilerError(infoLog, this.source, this.shaderType, this.id),\n          shaderName = _parseGLSLCompilerErr.shaderName,\n          errors = _parseGLSLCompilerErr.errors,\n          warnings = _parseGLSLCompilerErr.warnings;\n        log.error(\"GLSL compilation errors in \".concat(shaderName, \"\\n\").concat(errors))();\n        log.warn(\"GLSL compilation warnings in \".concat(shaderName, \"\\n\").concat(warnings))();\n        throw new Error(\"GLSL compilation errors in \".concat(shaderName));\n      }\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle() {\n      this.gl.deleteShader(this.handle);\n    }\n  }, {\n    key: \"_getOptsFromHandle\",\n    value: function _getOptsFromHandle() {\n      return {\n        type: this.getParameter(35663),\n        source: this.getSource()\n      };\n    }\n  }], [{\n    key: \"getTypeName\",\n    value: function getTypeName(shaderType) {\n      switch (shaderType) {\n        case 35633:\n          return 'vertex-shader';\n        case 35632:\n          return 'fragment-shader';\n        default:\n          assert(false);\n          return 'unknown';\n      }\n    }\n  }]);\n  return Shader;\n}(Resource, Symbol.toStringTag);\nexport var VertexShader = /*#__PURE__*/function (_Shader, _Symbol$toStringTag2) {\n  _inherits(VertexShader, _Shader);\n  var _super2 = _createSuper(VertexShader);\n  function VertexShader(gl, props) {\n    _classCallCheck(this, VertexShader);\n    if (typeof props === 'string') {\n      props = {\n        source: props\n      };\n    }\n    return _super2.call(this, gl, Object.assign({}, props, {\n      shaderType: 35633\n    }));\n  }\n  _createClass(VertexShader, [{\n    key: _Symbol$toStringTag2,\n    get: function get() {\n      return 'VertexShader';\n    }\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return this.gl.createShader(35633);\n    }\n  }]);\n  return VertexShader;\n}(Shader, Symbol.toStringTag);\nexport var FragmentShader = /*#__PURE__*/function (_Shader2, _Symbol$toStringTag3) {\n  _inherits(FragmentShader, _Shader2);\n  var _super3 = _createSuper(FragmentShader);\n  function FragmentShader(gl, props) {\n    _classCallCheck(this, FragmentShader);\n    if (typeof props === 'string') {\n      props = {\n        source: props\n      };\n    }\n    return _super3.call(this, gl, Object.assign({}, props, {\n      shaderType: 35632\n    }));\n  }\n  _createClass(FragmentShader, [{\n    key: _Symbol$toStringTag3,\n    get: function get() {\n      return 'FragmentShader';\n    }\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return this.gl.createShader(35632);\n    }\n  }]);\n  return FragmentShader;\n}(Shader, Symbol.toStringTag);","map":{"version":3,"names":["assertWebGLContext","log","parseGLSLCompilerError","getShaderName","assert","uid","Resource","ERR_SOURCE","Shader","_Resource","_Symbol$toStringTag","_inherits","_super","_createSuper","gl","props","_this","_classCallCheck","source","id","concat","getTypeName","shaderType","call","initialize","_createClass","key","get","value","_ref","shaderName","_compile","getParameter","pname","getShaderParameter","handle","toString","getName","getSource","getShaderSource","getTranslatedSource","extension","getExtension","getTranslatedShaderSource","arguments","length","undefined","startsWith","shaderSource","compileShader","compileStatus","infoLog","getShaderInfoLog","_parseGLSLCompilerErr","errors","warnings","error","warn","Error","_deleteHandle","deleteShader","_getOptsFromHandle","type","Symbol","toStringTag","VertexShader","_Shader","_Symbol$toStringTag2","_super2","Object","assign","_createHandle","createShader","FragmentShader","_Shader2","_Symbol$toStringTag3","_super3"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@luma.gl/webgl/src/classes/shader.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {assertWebGLContext, log} from '@luma.gl/gltools';\nimport {parseGLSLCompilerError, getShaderName} from '../glsl-utils';\nimport {assert} from '../utils/assert';\nimport {uid} from '../utils/utils';\nimport Resource from './resource';\n\nconst ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';\n\n// For now this is an internal class\nexport class Shader extends Resource {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'Shader';\n  }\n\n  static getTypeName(shaderType) {\n    switch (shaderType) {\n      case GL.VERTEX_SHADER:\n        return 'vertex-shader';\n      case GL.FRAGMENT_SHADER:\n        return 'fragment-shader';\n      default:\n        assert(false);\n        return 'unknown';\n    }\n  }\n\n  /* eslint-disable max-statements */\n  constructor(gl, props) {\n    assertWebGLContext(gl);\n\n    // Validate arguments\n    assert(typeof props.source === 'string', ERR_SOURCE);\n\n    // Deduce an id, from shader source, or supplied id, or shader type\n    const id =\n      getShaderName(props.source, null) ||\n      props.id ||\n      uid(`unnamed ${Shader.getTypeName(props.shaderType)}`);\n\n    super(gl, {id});\n\n    this.shaderType = props.shaderType;\n    this.source = props.source;\n\n    this.initialize(props);\n  }\n\n  initialize({source}) {\n    const shaderName = getShaderName(source, null);\n    if (shaderName) {\n      this.id = uid(shaderName);\n    }\n    this._compile(source);\n  }\n\n  // Accessors\n\n  getParameter(pname) {\n    return this.gl.getShaderParameter(this.handle, pname);\n  }\n\n  toString() {\n    return `${Shader.getTypeName(this.shaderType)}:${this.id}`;\n  }\n\n  getName() {\n    return getShaderName(this.source) || 'unnamed-shader';\n  }\n\n  getSource() {\n    return this.gl.getShaderSource(this.handle);\n  }\n\n  // Debug method - Returns translated source if available\n  getTranslatedSource() {\n    const extension = this.gl.getExtension('WEBGL_debug_shaders');\n    return extension\n      ? extension.getTranslatedShaderSource(this.handle)\n      : 'No translated source available. WEBGL_debug_shaders not implemented';\n  }\n\n  // PRIVATE METHODS\n  _compile(source = this.source) {\n    if (!source.startsWith('#version ')) {\n      source = `#version 100\\n${source}`;\n    }\n    this.source = source;\n    this.gl.shaderSource(this.handle, this.source);\n    this.gl.compileShader(this.handle);\n\n    // TODO - For performance reasons, avoid checking shader compilation errors on production?\n    // TODO - Load log even when no error reported, to catch warnings?\n    // https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings\n    const compileStatus = this.getParameter(GL.COMPILE_STATUS);\n    if (!compileStatus) {\n      const infoLog = this.gl.getShaderInfoLog(this.handle);\n      const {shaderName, errors, warnings} = parseGLSLCompilerError(\n        infoLog,\n        this.source,\n        this.shaderType,\n        this.id\n      );\n      log.error(`GLSL compilation errors in ${shaderName}\\n${errors}`)();\n      log.warn(`GLSL compilation warnings in ${shaderName}\\n${warnings}`)();\n      throw new Error(`GLSL compilation errors in ${shaderName}`);\n    }\n  }\n\n  _deleteHandle() {\n    this.gl.deleteShader(this.handle);\n  }\n\n  _getOptsFromHandle() {\n    return {\n      type: this.getParameter(GL.SHADER_TYPE),\n      source: this.getSource()\n    };\n  }\n}\n\nexport class VertexShader extends Shader {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'VertexShader';\n  }\n\n  constructor(gl, props) {\n    // Signature: new VertexShader(gl, source)\n    if (typeof props === 'string') {\n      props = {source: props};\n    }\n    super(gl, Object.assign({}, props, {shaderType: GL.VERTEX_SHADER}));\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL.VERTEX_SHADER);\n  }\n}\n\nexport class FragmentShader extends Shader {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'FragmentShader';\n  }\n  constructor(gl, props) {\n    // Signature: new FragmentShader(gl, source)\n    if (typeof props === 'string') {\n      props = {source: props};\n    }\n\n    super(gl, Object.assign({}, props, {shaderType: GL.FRAGMENT_SHADER}));\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL.FRAGMENT_SHADER);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}