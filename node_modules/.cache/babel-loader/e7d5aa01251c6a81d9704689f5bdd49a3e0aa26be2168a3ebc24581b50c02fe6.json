{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ImageLoader } from '@loaders.gl/images';\nimport { getImageUrls } from './load-image';\nimport { deepLoad } from './deep-load';\nvar GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;\nvar GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;\nvar GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;\nvar GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;\nvar GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;\nvar GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851a;\nvar CUBE_FACES = [{\n  face: GL_TEXTURE_CUBE_MAP_POSITIVE_X,\n  direction: 'right',\n  axis: 'x',\n  sign: 'positive'\n}, {\n  face: GL_TEXTURE_CUBE_MAP_NEGATIVE_X,\n  direction: 'left',\n  axis: 'x',\n  sign: 'negative'\n}, {\n  face: GL_TEXTURE_CUBE_MAP_POSITIVE_Y,\n  direction: 'top',\n  axis: 'y',\n  sign: 'positive'\n}, {\n  face: GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,\n  direction: 'bottom',\n  axis: 'y',\n  sign: 'negative'\n}, {\n  face: GL_TEXTURE_CUBE_MAP_POSITIVE_Z,\n  direction: 'front',\n  axis: 'z',\n  sign: 'positive'\n}, {\n  face: GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,\n  direction: 'back',\n  axis: 'z',\n  sign: 'negative'\n}];\nexport function getImageCubeUrls(_x, _x2) {\n  return _getImageCubeUrls.apply(this, arguments);\n}\nfunction _getImageCubeUrls() {\n  _getImageCubeUrls = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(getUrl, options) {\n    var urls, promises, index, _loop, i;\n    return _regeneratorRuntime().wrap(function _callee$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          urls = {};\n          promises = [];\n          index = 0;\n          _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n            var face, promise;\n            return _regeneratorRuntime().wrap(function _loop$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  face = CUBE_FACES[index];\n                  promise = getImageUrls(getUrl, options, _objectSpread(_objectSpread({}, face), {}, {\n                    index: index++\n                  })).then(function (url) {\n                    urls[face.face] = url;\n                  });\n                  promises.push(promise);\n                case 3:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _loop);\n          });\n          i = 0;\n        case 5:\n          if (!(i < CUBE_FACES.length)) {\n            _context2.next = 10;\n            break;\n          }\n          return _context2.delegateYield(_loop(), \"t0\", 7);\n        case 7:\n          ++i;\n          _context2.next = 5;\n          break;\n        case 10:\n          _context2.next = 12;\n          return Promise.all(promises);\n        case 12:\n          return _context2.abrupt(\"return\", urls);\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee);\n  }));\n  return _getImageCubeUrls.apply(this, arguments);\n}\nexport function loadImageTextureCube(_x3) {\n  return _loadImageTextureCube.apply(this, arguments);\n}\nfunction _loadImageTextureCube() {\n  _loadImageTextureCube = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(getUrl) {\n    var options,\n      urls,\n      _args3 = arguments;\n    return _regeneratorRuntime().wrap(function _callee2$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          options = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n          _context3.next = 3;\n          return getImageCubeUrls(getUrl, options);\n        case 3:\n          urls = _context3.sent;\n          _context3.next = 6;\n          return deepLoad(urls, ImageLoader.parse, options);\n        case 6:\n          return _context3.abrupt(\"return\", _context3.sent);\n        case 7:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee2);\n  }));\n  return _loadImageTextureCube.apply(this, arguments);\n}","map":{"version":3,"names":["ImageLoader","getImageUrls","deepLoad","GL_TEXTURE_CUBE_MAP_POSITIVE_X","GL_TEXTURE_CUBE_MAP_NEGATIVE_X","GL_TEXTURE_CUBE_MAP_POSITIVE_Y","GL_TEXTURE_CUBE_MAP_NEGATIVE_Y","GL_TEXTURE_CUBE_MAP_POSITIVE_Z","GL_TEXTURE_CUBE_MAP_NEGATIVE_Z","CUBE_FACES","face","direction","axis","sign","getImageCubeUrls","_x","_x2","_getImageCubeUrls","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","getUrl","options","urls","promises","index","_loop","i","wrap","_callee$","_context2","prev","next","promise","_loop$","_context","_objectSpread","then","url","push","stop","length","delegateYield","Promise","all","abrupt","loadImageTextureCube","_x3","_loadImageTextureCube","_callee2","_args3","_callee2$","_context3","undefined","sent","parse"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/textures/src/lib/texture-api/load-image-cube.ts"],"sourcesContent":["// loaders.gl, MIT license\nimport {ImageLoader} from '@loaders.gl/images';\nimport type {GetUrl, UrlOptions} from './texture-api-types';\nimport {getImageUrls} from './load-image';\nimport {deepLoad} from './deep-load';\n\n// Returned map will be have keys corresponding to GL cubemap constants\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;\nconst GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;\nconst GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851a;\n\nconst CUBE_FACES = [\n  {face: GL_TEXTURE_CUBE_MAP_POSITIVE_X, direction: 'right', axis: 'x', sign: 'positive'},\n  {face: GL_TEXTURE_CUBE_MAP_NEGATIVE_X, direction: 'left', axis: 'x', sign: 'negative'},\n  {face: GL_TEXTURE_CUBE_MAP_POSITIVE_Y, direction: 'top', axis: 'y', sign: 'positive'},\n  {face: GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, direction: 'bottom', axis: 'y', sign: 'negative'},\n  {face: GL_TEXTURE_CUBE_MAP_POSITIVE_Z, direction: 'front', axis: 'z', sign: 'positive'},\n  {face: GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, direction: 'back', axis: 'z', sign: 'negative'}\n];\n\nexport type ImageCubeTexture = {\n  GL_TEXTURE_CUBE_MAP_POSITIVE_X: any;\n  GL_TEXTURE_CUBE_MAP_NEGATIVE_X: any;\n  GL_TEXTURE_CUBE_MAP_POSITIVE_Y: any;\n  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y: any;\n  GL_TEXTURE_CUBE_MAP_POSITIVE_Z: any;\n  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z: any;\n};\n\n// Returns an object with six key-value pairs containing the urls (or url mip arrays)\n// for each cube face\nexport async function getImageCubeUrls(getUrl: GetUrl, options: UrlOptions) {\n  // Calculate URLs\n  const urls: Record<number, string | string[]> = {};\n  const promises: Promise<any>[] = [];\n\n  let index = 0;\n  for (let i = 0; i < CUBE_FACES.length; ++i) {\n    const face = CUBE_FACES[index];\n    const promise = getImageUrls(getUrl, options, {...face, index: index++}).then((url) => {\n      urls[face.face] = url;\n    });\n    promises.push(promise);\n  }\n\n  await Promise.all(promises);\n\n  return urls;\n}\n\n// Returns an object with six key-value pairs containing the images (or image mip arrays)\n// for each cube face\nexport async function loadImageTextureCube(\n  getUrl: GetUrl,\n  options = {}\n): Promise<ImageCubeTexture> {\n  const urls = await getImageCubeUrls(getUrl, options);\n  return (await deepLoad(urls, ImageLoader.parse, options)) as ImageCubeTexture;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}