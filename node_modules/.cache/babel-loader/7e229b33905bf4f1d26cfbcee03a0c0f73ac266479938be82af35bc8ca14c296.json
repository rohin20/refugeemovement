{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.heatmapVisConfigs = exports.pointColResolver = exports.pointPosAccessor = exports.MAX_ZOOM_LEVEL = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _reselect = require(\"reselect\");\nvar _lodash = _interopRequireDefault(require(\"lodash.memoize\"));\nvar _constants = require(\"@kepler.gl/constants\");\nvar _mapboxglLayer = _interopRequireDefault(require(\"../mapboxgl-layer\"));\nvar _heatmapLayerIcon = _interopRequireDefault(require(\"./heatmap-layer-icon\"));\nvar _utils = require(\"@kepler.gl/utils\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar MAX_ZOOM_LEVEL = 18;\nexports.MAX_ZOOM_LEVEL = MAX_ZOOM_LEVEL;\nvar pointPosAccessor = function pointPosAccessor(_ref) {\n  var lat = _ref.lat,\n    lng = _ref.lng;\n  return function (dc) {\n    return function (d) {\n      return [dc.valueAt(d.index, lng.fieldIdx), dc.valueAt(d.index, lat.fieldIdx)];\n    };\n  };\n};\nexports.pointPosAccessor = pointPosAccessor;\nvar pointColResolver = function pointColResolver(_ref2) {\n  var lat = _ref2.lat,\n    lng = _ref2.lng;\n  return \"\".concat(lat.fieldIdx, \"-\").concat(lng.fieldIdx);\n};\nexports.pointColResolver = pointColResolver;\nvar heatmapVisConfigs = {\n  opacity: 'opacity',\n  colorRange: 'colorRange',\n  radius: 'heatmapRadius'\n};\n/**\n *\n * @param colorRange\n * @return [\n *  0, \"rgba(33,102,172,0)\",\n *  0.2, \"rgb(103,169,207)\",\n *  0.4, \"rgb(209,229,240)\",\n *  0.6, \"rgb(253,219,199)\",\n *  0.8, \"rgb(239,138,98)\",\n *  1, \"rgb(178,24,43)\"\n * ]\n */\n\nexports.heatmapVisConfigs = heatmapVisConfigs;\nvar heatmapDensity = function heatmapDensity(colorRange) {\n  var scaleFunction = _constants.SCALE_FUNC.quantize;\n  var colors = ['#000000'].concat((0, _toConsumableArray2[\"default\"])(colorRange.colors));\n  var scale = scaleFunction().domain([0, 1]).range(colors);\n  var colorDensity = scale.range().reduce(function (bands, level) {\n    var invert = scale.invertExtent(level);\n    return [].concat((0, _toConsumableArray2[\"default\"])(bands), [invert[0],\n    // first value in the range\n    \"rgb(\".concat((0, _utils.hexToRgb)(level).join(','), \")\") // color\n    ]);\n  }, []);\n  colorDensity[1] = 'rgba(0,0,0,0)';\n  return colorDensity;\n};\nvar HeatmapLayer = /*#__PURE__*/function (_MapboxGLLayer) {\n  (0, _inherits2[\"default\"])(HeatmapLayer, _MapboxGLLayer);\n  var _super = _createSuper(HeatmapLayer);\n  function HeatmapLayer(props) {\n    var _this;\n    (0, _classCallCheck2[\"default\"])(this, HeatmapLayer);\n    _this = _super.call(this, props);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"getPosition\", void 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"columnsSelector\", function (config) {\n      return pointColResolver(config.columns);\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"visConfigSelector\", function (config) {\n      return config.visConfig;\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"weightFieldSelector\", function (config) {\n      return config.weightField ? config.weightField.name : null;\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"weightDomainSelector\", function (config) {\n      return config.weightDomain;\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"paintSelector\", (0, _reselect.createSelector)(_this.visConfigSelector, _this.weightFieldSelector, _this.weightDomainSelector, function (visConfig, weightField, weightDomain) {\n      return {\n        'heatmap-weight': weightField ? ['interpolate', ['linear'], ['get', weightField], weightDomain[0], 0, weightDomain[1], 1] : 1,\n        'heatmap-intensity': ['interpolate', ['linear'], ['zoom'], 0, 1, MAX_ZOOM_LEVEL, 3],\n        'heatmap-color': ['interpolate', ['linear'], ['heatmap-density']].concat((0, _toConsumableArray2[\"default\"])(heatmapDensity(visConfig.colorRange))),\n        'heatmap-radius': ['interpolate', ['linear'], ['zoom'], 0, 2, MAX_ZOOM_LEVEL, visConfig.radius // radius\n        ],\n\n        'heatmap-opacity': visConfig.opacity\n      };\n    }));\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"computeHeatmapConfiguration\", (0, _reselect.createSelector)(_this.sourceSelector, _this.filterSelector, _this.paintSelector, function (source, filter, paint) {\n      return _objectSpread({\n        type: 'heatmap',\n        id: _this.id,\n        source: source,\n        layout: {\n          visibility: 'visible'\n        },\n        paint: paint\n      }, _this.isValidFilter(filter) ? {\n        filter: filter\n      } : {});\n    }));\n    _this.registerVisConfig(heatmapVisConfigs);\n    _this.getPosition = (0, _lodash[\"default\"])(pointPosAccessor, pointColResolver);\n    return _this;\n  }\n  (0, _createClass2[\"default\"])(HeatmapLayer, [{\n    key: \"type\",\n    get: function get() {\n      return 'heatmap';\n    }\n  }, {\n    key: \"visualChannels\",\n    get: function get() {\n      return {\n        // @ts-expect-error\n        weight: {\n          property: 'weight',\n          field: 'weightField',\n          scale: 'weightScale',\n          domain: 'weightDomain',\n          key: 'weight',\n          // supportedFieldTypes can be determined by channelScaleType\n          // or specified here\n          defaultMeasure: 'property.density',\n          supportedFieldTypes: [_constants.ALL_FIELD_TYPES.real, _constants.ALL_FIELD_TYPES.integer],\n          channelScaleType: _constants.CHANNEL_SCALES.size\n        }\n      };\n    }\n  }, {\n    key: \"layerIcon\",\n    get: function get() {\n      return _heatmapLayerIcon[\"default\"];\n    }\n  }, {\n    key: \"getVisualChannelDescription\",\n    value: function getVisualChannelDescription(channel) {\n      return channel === 'color' ? {\n        label: 'property.color',\n        measure: 'property.density'\n      } : {\n        label: 'property.weight',\n        measure: this.config.weightField ? this.config.weightField.name : 'property.density'\n      };\n    }\n  }, {\n    key: \"getDefaultLayerConfig\",\n    value: function getDefaultLayerConfig() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      // mapbox heatmap layer color is always based on density\n      // no need to set colorField, colorDomain and colorScale\n      // eslint-disable-next-line no-unused-vars\n      var _get$call$weightField = _objectSpread(_objectSpread({}, (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(HeatmapLayer.prototype), \"getDefaultLayerConfig\", this).call(this, props)), {}, {\n          weightField: null,\n          weightDomain: [0, 1],\n          weightScale: 'linear'\n        }),\n        colorField = _get$call$weightField.colorField,\n        colorDomain = _get$call$weightField.colorDomain,\n        colorScale = _get$call$weightField.colorScale,\n        layerConfig = (0, _objectWithoutProperties2[\"default\"])(_get$call$weightField, [\"colorField\", \"colorDomain\", \"colorScale\"]); // @ts-expect-error\n\n      return layerConfig;\n    }\n  }, {\n    key: \"getPositionAccessor\",\n    value: function getPositionAccessor(dataContainer) {\n      return this.getPosition(this.config.columns)(dataContainer);\n    }\n  }, {\n    key: \"updateLayerMeta\",\n    value: function updateLayerMeta(dataContainer) {\n      var getPosition = this.getPositionAccessor(dataContainer);\n      var bounds = this.getPointsBounds(dataContainer, getPosition);\n      this.updateMeta({\n        bounds: bounds\n      });\n    }\n  }, {\n    key: \"formatLayerData\",\n    value: function formatLayerData(datasets, oldLayerData) {\n      if (this.config.dataId === null) {\n        return {};\n      }\n      var weightField = this.config.weightField;\n      var dataContainer = datasets[this.config.dataId].dataContainer;\n      var getPosition = this.getPositionAccessor(dataContainer);\n      var _this$updateData = this.updateData(datasets, oldLayerData),\n        data = _this$updateData.data;\n      var newConfig = this.computeHeatmapConfiguration(this.config, datasets);\n      newConfig.id = this.id;\n      return {\n        columns: this.config.columns,\n        config: newConfig,\n        data: data,\n        weightField: weightField,\n        getPosition: getPosition\n      };\n    }\n  }]);\n  return HeatmapLayer;\n}(_mapboxglLayer[\"default\"]);\nvar _default = HeatmapLayer;\nexports[\"default\"] = _default;","map":{"version":3,"names":["_objectWithoutProperties2","_interopRequireDefault","require","_classCallCheck2","_createClass2","_assertThisInitialized2","_get2","_inherits2","_reselect","_constants","_mapboxglLayer","_heatmapLayerIcon","_utils","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","prototype","valueOf","call","e","pointPosAccessor","_ref","lat","lng","dc","d","valueAt","index","fieldIdx","exports","pointColResolver","_ref2","concat","heatmapVisConfigs","opacity","colorRange","radius","heatmapDensity","colors","_toConsumableArray2","scale","scaleFunction","domain","range","colorDensity","reduce","bands","level","invert","invertExtent","hexToRgb","join","HeatmapLayer","_MapboxGLLayer","_super","props","_this","_defineProperty2","config","columns","visConfig","weightField","name","weightDomain","createSelector","visConfigSelector","weightFieldSelector","weightDomainSelector","id","source","paint","isValidFilter","filter","registerVisConfig","getPosition","_lodash","key","get","field","defaultMeasure","supportedFieldTypes","ALL_FIELD_TYPES","real","integer","value","getVisualChannelDescription","channel","label","measure","length","undefined","_objectSpread","weightScale","colorField","_get$call$weightField","colorDomain","layerConfig","getPositionAccessor","dataContainer","bounds","getPointsBounds","updateMeta","formatLayerData","datasets","oldLayerData","dataId"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/layers/src/heatmap-layer/heatmap-layer.ts"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {createSelector} from 'reselect';\nimport memoize from 'lodash.memoize';\nimport {CHANNEL_SCALES, SCALE_FUNC, ALL_FIELD_TYPES, ColorRange} from '@kepler.gl/constants';\nimport MapboxGLLayer, {MapboxLayerGLConfig} from '../mapboxgl-layer';\nimport HeatmapLayerIcon from './heatmap-layer-icon';\nimport {LayerColumn, LayerWeightConfig, VisualChannels} from '../base-layer';\nimport {VisConfigColorRange, VisConfigNumber, HexColor, Merge} from '@kepler.gl/types';\nimport {hexToRgb, DataContainerInterface} from '@kepler.gl/utils';\n\nexport type HeatmapLayerVisConfigSettings = {\n  opacity: VisConfigNumber;\n  colorRange: VisConfigColorRange;\n  radius: VisConfigNumber;\n};\n\nexport type HeatmapLayerColumnsConfig = {lat: LayerColumn; lng: LayerColumn};\n\nexport type HeatmapLayerVisConfig = {\n  opacity: number;\n  colorRange: ColorRange;\n  radius: number;\n};\n\nexport type HeatmapLayerVisualChannelConfig = LayerWeightConfig;\nexport type HeatmapLayerConfig = Merge<\n  MapboxLayerGLConfig,\n  {columns: HeatmapLayerColumnsConfig; visConfig: HeatmapLayerVisConfig}\n> &\n  HeatmapLayerVisualChannelConfig;\n\nexport const MAX_ZOOM_LEVEL = 18;\n\nexport const pointPosAccessor = ({lat, lng}: HeatmapLayerColumnsConfig) => (\n  dc: DataContainerInterface\n) => d => [dc.valueAt(d.index, lng.fieldIdx), dc.valueAt(d.index, lat.fieldIdx)];\n\nexport const pointColResolver = ({lat, lng}: HeatmapLayerColumnsConfig) =>\n  `${lat.fieldIdx}-${lng.fieldIdx}`;\n\nexport const heatmapVisConfigs: {\n  opacity: 'opacity';\n  colorRange: 'colorRange';\n  radius: 'heatmapRadius';\n} = {\n  opacity: 'opacity',\n  colorRange: 'colorRange',\n  radius: 'heatmapRadius'\n};\n\n/**\n *\n * @param colorRange\n * @return [\n *  0, \"rgba(33,102,172,0)\",\n *  0.2, \"rgb(103,169,207)\",\n *  0.4, \"rgb(209,229,240)\",\n *  0.6, \"rgb(253,219,199)\",\n *  0.8, \"rgb(239,138,98)\",\n *  1, \"rgb(178,24,43)\"\n * ]\n */\nconst heatmapDensity = (colorRange: ColorRange): (string | number)[] => {\n  const scaleFunction = SCALE_FUNC.quantize;\n\n  const colors: HexColor[] = ['#000000', ...colorRange.colors];\n\n  const scale = scaleFunction<HexColor>()\n    .domain([0, 1])\n    .range(colors);\n\n  const colorDensity = scale.range().reduce((bands: (string | number)[], level) => {\n    const invert = scale.invertExtent(level);\n    return [\n      ...bands,\n      invert[0], // first value in the range\n      `rgb(${hexToRgb(level).join(',')})` // color\n    ];\n  }, []);\n  colorDensity[1] = 'rgba(0,0,0,0)';\n  return colorDensity;\n};\n\nclass HeatmapLayer extends MapboxGLLayer {\n  declare visConfigSettings: HeatmapLayerVisConfigSettings;\n  declare config: HeatmapLayerConfig;\n\n  getPosition: (config: HeatmapLayerColumnsConfig) => any;\n\n  constructor(props) {\n    super(props);\n    this.registerVisConfig(heatmapVisConfigs);\n    this.getPosition = memoize(pointPosAccessor, pointColResolver);\n  }\n\n  get type(): 'heatmap' {\n    return 'heatmap';\n  }\n\n  get visualChannels(): VisualChannels {\n    return {\n      // @ts-expect-error\n      weight: {\n        property: 'weight',\n        field: 'weightField',\n        scale: 'weightScale',\n        domain: 'weightDomain',\n        key: 'weight',\n        // supportedFieldTypes can be determined by channelScaleType\n        // or specified here\n        defaultMeasure: 'property.density',\n        supportedFieldTypes: [ALL_FIELD_TYPES.real, ALL_FIELD_TYPES.integer],\n        channelScaleType: CHANNEL_SCALES.size\n      }\n    };\n  }\n\n  get layerIcon() {\n    return HeatmapLayerIcon;\n  }\n\n  getVisualChannelDescription(channel) {\n    return channel === 'color'\n      ? {\n          label: 'property.color',\n          measure: 'property.density'\n        }\n      : {\n          label: 'property.weight',\n          measure: this.config.weightField ? this.config.weightField.name : 'property.density'\n        };\n  }\n\n  getDefaultLayerConfig(props = {}): HeatmapLayerConfig {\n    // mapbox heatmap layer color is always based on density\n    // no need to set colorField, colorDomain and colorScale\n    // eslint-disable-next-line no-unused-vars\n    const {colorField, colorDomain, colorScale, ...layerConfig} = {\n      ...super.getDefaultLayerConfig(props),\n\n      weightField: null,\n      weightDomain: [0, 1],\n      weightScale: 'linear'\n    };\n\n    // @ts-expect-error\n    return layerConfig;\n  }\n\n  getPositionAccessor(dataContainer) {\n    return this.getPosition(this.config.columns)(dataContainer);\n  }\n\n  updateLayerMeta(dataContainer) {\n    const getPosition = this.getPositionAccessor(dataContainer);\n    const bounds = this.getPointsBounds(dataContainer, getPosition);\n    this.updateMeta({bounds});\n  }\n\n  columnsSelector = config => pointColResolver(config.columns);\n  visConfigSelector = config => config.visConfig;\n  weightFieldSelector = config => (config.weightField ? config.weightField.name : null);\n  weightDomainSelector = config => config.weightDomain;\n\n  paintSelector = createSelector(\n    this.visConfigSelector,\n    this.weightFieldSelector,\n    this.weightDomainSelector,\n    (visConfig, weightField, weightDomain) => ({\n      'heatmap-weight': weightField\n        ? ['interpolate', ['linear'], ['get', weightField], weightDomain[0], 0, weightDomain[1], 1]\n        : 1,\n      'heatmap-intensity': ['interpolate', ['linear'], ['zoom'], 0, 1, MAX_ZOOM_LEVEL, 3],\n      'heatmap-color': [\n        'interpolate',\n        ['linear'],\n        ['heatmap-density'],\n        ...heatmapDensity(visConfig.colorRange)\n      ],\n      'heatmap-radius': [\n        'interpolate',\n        ['linear'],\n        ['zoom'],\n        0,\n        2,\n        MAX_ZOOM_LEVEL,\n        visConfig.radius // radius\n      ],\n      'heatmap-opacity': visConfig.opacity\n    })\n  );\n\n  computeHeatmapConfiguration = createSelector(\n    this.sourceSelector,\n    this.filterSelector,\n    this.paintSelector,\n    (source, filter, paint) => {\n      return {\n        type: 'heatmap',\n        id: this.id,\n        source,\n        layout: {\n          visibility: 'visible'\n        },\n        paint,\n        ...(this.isValidFilter(filter) ? {filter} : {})\n      };\n    }\n  );\n\n  formatLayerData(datasets, oldLayerData) {\n    if (this.config.dataId === null) {\n      return {};\n    }\n    const {weightField} = this.config;\n    const {dataContainer} = datasets[this.config.dataId];\n    const getPosition = this.getPositionAccessor(dataContainer);\n    const {data} = this.updateData(datasets, oldLayerData);\n\n    const newConfig = this.computeHeatmapConfiguration(this.config, datasets);\n    newConfig.id = this.id;\n\n    return {\n      columns: this.config.columns,\n      config: newConfig,\n      data,\n      weightField,\n      getPosition\n    };\n  }\n}\n\nexport default HeatmapLayer;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,IAAAA,yBAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,gBAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,aAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,uBAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,KAAA,GAAAL,sBAAA,CAAAC,OAAA;AAGA,IAAAK,UAAA,GAAAN,sBAAA,CAAAC,OAAA;;;;;AAuBO,IAAMM,SAAA,GAAAN,OAAN;;AAEyB,IAAAO,UAAA,GAAEP,OAAF;AAAA,IAAAQ,cAA2C,GAAAT,sBAAA,CAAAC,OAAA;AAErE,IAAAS,iBAAQ,GAAHV,sBAAA,CAADC,OAAuC,uBAAqB;AAFK,IAA3CU,MAAA,GAAAV,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,SAAAW,aAAAC,OAAA;EAAA,IAAAC,yBAAA,GAAAC,yBAAA;EAAA,gBAAAC,qBAAA;IAAA,IAAAC,KAAA,OAAAC,gBAAA,aAAAL,OAAA;MAAAM,MAAA;IAAA,IAAAL,yBAAA;MAAA,IAAAM,SAAA,OAAAF,gBAAA,mBAAAG,WAAA;MAAAF,MAAA,GAAAG,OAAA,CAAAC,SAAA,CAAAN,KAAA,EAAAO,SAAA,EAAAJ,SAAA;IAAA;MAAAD,MAAA,GAAAF,KAAA,CAAAQ,KAAA,OAAAD,SAAA;IAAA;IAAA,WAAAE,2BAAA,mBAAAP,MAAA;EAAA;AAAA;AAAA,SAAAJ,0BAAA;EAAA,WACPO,OADO,qBAAAA,OAAA,CAAAC,SAAA;EAAA,IAAAD,OAAA,CAAAC,SAAA,CAAAI,IAAA;EAAA,WAAAC,KAAA;EAAA;IAAAC,OAAA,CAAAC,SAAA,CAAAC,OAAA,CAAAC,IAAA,CAAAV,OAAA,CAAAC,SAAA,CAAAM,OAAA;IAAA;EAAA,SAAAI,CAAA;IAAA;EAAA;AAAA;;;AAQ9B,IAAAC,gBADE,YAAAA,iBAAAC,IAAA;EAEF,IAAAC,GAAA,GAAUD,IAAE,CAAAC,GAAA;IACZC,GAAM,GAAEF,IAAA,CAAAE,GAAA;EAPH,iBAAAC,EAAA;IAUP,iBAAAC,CAAA;MACA,QAAAD,EAAA,CAAAE,OAAA,CAAAD,CAAA,CAAAE,KAAA,EAAAJ,GAAA,CAAAK,QAAA,GAAAJ,EAAA,CAAAE,OAAA,CAAAD,CAAA,CAAAE,KAAA,EAAAL,GAAA,CAAAM,QAAA;IACA;EACA;AACA;AAEAC,OAAA,CAAAT,gBAAA,GAAAA,gBAAA;AAEA,IAAAU,gBAAA,YAAAA,iBAAAC,KAAA;EACA,IAAAT,GAAA,GAAAS,KAAA,CAAAT,GAAA;IACAC,GAAA,GAAAQ,KAAA,CAAAR,GAAA;EACA,UAAAS,MAAA,CAAAV,GAAA,CAAAM,QAAA,OAAAI,MAAA,CAAAT,GAAA,CAAAK,QAAA;;;AACA,IAAMK,iBAAiB;EACrBC,OAAM,WAAa;EAEnBC,UAAwB;EAExBC,MAAM;AAIN;AACE;AACA;AAAA;AAAA;AAKD;AACD;AACA;AACD;;;;;;;AAQoB,IAAAC,cAAA,YAAAA,eAAAF,UAAA;;EAAA,IAAAG,MAAA,eAAAN,MAAA,KAAAO,mBAAA,aAAAJ,UAAA,CAAAG,MAAA;EACjB,IAAAE,KAAA,GAAAC,aAAA,GAAMC,MAAN,SAAAC,KAAA,CAAAL,MAAA;EADiB,IAAAM,YAAA,GAAAJ,KAAA,CAAAG,KAAA,GAAAE,MAAA,WAAAC,KAAA,EAAAC,KAAA;IAAA,IAAAC,MAAA,GAAAR,KAAA,CAAAS,YAAA,CAAAF,KAAA;IAsEK,SAAI,CAAAf,MAAA,KAAAO,mBAAgB,CAApB,YAAAO,KAAA,IAAAE,MAAA;IAAA;IAAA,MAtEL,CAAAhB,MAAA,KAAAnC,MAAA,CAAAqD,QAAA,EAAAH,KAAA,EAAAI,IAAA;IAAA;EAuEO;EAAAP,YAvEP;EAAA,OAAAA,YAAA;AAwES;AAxET,IAAAQ,YAAA,0BAAAC,cAAA;EAyEU,IAAA7D,UAAI,UAAO,GAAA4D,YAAX,EAAAC,cAAA;EAzEV,IAAAC,MAAA,GAAAxD,YAAA,CAAAsD,YAAA;EAgFf,SAAAA,aAAAG,KAAkB;IAGlB,IAAAC,KAAA;IAOA,IAAApE,gBAAA,UACE,OADgB,EAEfgE,YACA;IAHeI,KAXuB,GAAAF,MAAA,CAAApC,IAAA,OAAAqC,KAAA;IAoBzC,IAAAE,gBAAA,UAAmB,GAAU,IAAAnE,uBAAA,aAAAkE,KAAA;IApBY,IAA3CC,gBAAA,iBAAAnE,uBAAA,aAAAkE,KAAA,gCAAAE,MAAA;MA/EiB,OAAA5B,gBAAA,CAAA4B,MAAA,CAAAC,OAAA;IAAA;IA4Gf,IAAAF,gBAAA,iBAAAnE,uBAAA,aAAAkE,KAAA,kCAAAE,MAAA;MACE,OAAIA,MAAE,CAAAE,SADR;IAEE;IACA,IAAAH,gBAHF,iBAAAnE,uBAAA,aAAAkE,KAAA,oCAAAE,MAAA;MAIE,OAAAA,MAAQ,CAAAG,WAAA,GAAAH,MAAA,CAAAG,WAAA,CAAAC,IAAA;IACN;IADM,IAAAL,gBAJV,iBAAAnE,uBAAA,aAAAkE,KAAA,qCAAAE,MAAA;MAOE,OAAKA,MAAL,CAAAK,YAAA;IAPF;IAQoC,IAAAN,gBAAA,iBAAAnE,uBAAA,aAAAkE,KAAA,wBAAA/D,SAAA,CAAAuE,cAAA,EAAAR,KAAA,CAAAS,iBAAA,EAAAT,KAAA,CAAAU,mBAAA,EAAAV,KAAA,CAAAW,oBAAA,YAAAP,SAAA,EAAAC,WAAA,EAAAE,YAAA;MAAD,OARnC;QA5Ge,kBAAAF,WAAA,uCAAAA,WAAA,GAAAE,YAAA,QAAAA,YAAA;;QAEjB,eAAK,gBAAkB,WAAvB,wBAAA/B,MAAA,KAAAO,mBAAA,aAAAF,cAAA,CAAAuB,SAAA,CAAAzB,UAAA;;SACA;;QAHiB,mBAAAyB,SAAA,CAAA1B;MAIlB;;;;YAED;QACEkC,EAAA,EAAAZ,KAAO,CAAAY,EAAA;QACRC,MAAA,EAAAA,MAAA;;;SAED;QACEC,KAAO,EAAAA;MACL,GAAAd,KAAA,CAAAe,aAAA,CAAAC,MAAA;QACAA,MAAM,EAAEA;MACN;IACA;IAEAhB,KAAA,CAAAiB,iBAAQ,CAAAxC,iBAJF;IAMNuB,KAAA,CAAAkB,WAAA,OAAAC,OAAA,aAAAvD,gBAAA,EAAAU,gBAAA;IACA,OAAA0B,KAAA;EACA;EAEA,IAAAnE,aAAA,UAAkB,GAAA+D,YAAA;IAVZwB,GAAA;IAFHC,GAAP,WAAAA,IAAA;MAeD;;;SAED,gBAAgB;IACdA,GAAA,WAAOA,IAAA;MACR;;;kBAED;UACEC,KAAO,eAAY;UAEbtC,KAAO;UACPE,MAAO,EAAE;UAEXkC,GAAA;UACE;UACA;UAPNG,cAAA;UASDC,mBAAA,GAAAtF,UAAA,CAAAuF,eAAA,CAAAC,IAAA,EAAAxF,UAAA,CAAAuF,eAAA,CAAAE,OAAA;;;;IAEqD;;IACpDP,GAAA;IACAC,GAAA,WAAAA,IAAA;MACA,OAAAjF,iBAAA;IAHoD;EAOlD;IACAgF,GAAA,+BARkD;IASlDQ,KAAA,WAAWC,2BAAEA,CAAAC,OAAA;MATqC,OAAAA,OAAA;QAAAC,KAI7C,kBAJ6C;QAAAC,OAIjC;MAJiC,IAIpB;QAJoBD,KAIL,mBAJK;;;IAapD;EACD;;;eAED,GAAA7E,SAAA,CAAA+E,MAAA,QAAoB/E,SAAA,EAApB,MAAmCgF,SAAA,GAAAhF,SAAA;;MAElC;;;+BAED,GAAAiF,aAAgB,CAAAA,aAAe,SAAApG,KAAA,iBAAAa,gBAAA,aAAAgD,YAAA,CAAApC,SAAA,kCAAAE,IAAA,OAAAqC,KAAA;UAC7BM,WAAM,EAAW,IAAG;UACpBE,YAAe,IAAK;UACpB6B,WAAK,EAAL;QAAiB;QAAjBC,UAAA,GAAAC,qBAAA,CAAAD,UAAA;QACDE,WAAA,GAAAD,qBAAA,CAAAC,WAAA;;;;MAuDG,OAAAC,WAAA;IACD;;IAHqCpB,GAAA,uBAIX;IAJWQ,KAAA,EAK/B,SAAAa,mBAA0BC,CAAKA,aAAN,EAAzB;MACP,OAAM,KAAAxB,WAAmB,MAAAhB,MAAA,CAAAC,OAAoB,EAAAuC,aAA7C;;EANsC;IAAAtB,GAAA;;MAStC,IAAMF,WAAS,GAAG,IAAK,CAAAuB,mBAAA,CAAAC,aAAiC;MACxD,IAAAC,MAAU,GAAV,IAAe,CAAAC,eAAf,CAAAF,aAAA,EAAAxB,WAAA;MAEA,KAAA2B,UAAO;QACLF,MAAA,EAAOA;MACP;IACA;EACA;IACAvB,GAAA;IALKQ,KAAP,WAAAkB,gBAAAC,QAAA,EAAAC,YAAA;MAOD,SAAA9C,MAAA,CAAA+C,MAAA;;;;uBAGY,GAAAF,Q"},"metadata":{},"sourceType":"script","externalDependencies":[]}