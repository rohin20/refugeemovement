{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { CompositeLayer, AttributeManager, _compareProps as compareProps } from '@deck.gl/core';\nimport { cssToDeviceRatio } from '@luma.gl/core';\nimport { filterProps } from './utils/prop-utils';\nvar AggregationLayer = /*#__PURE__*/function (_CompositeLayer) {\n  _inherits(AggregationLayer, _CompositeLayer);\n  var _super = _createSuper(AggregationLayer);\n  function AggregationLayer() {\n    _classCallCheck(this, AggregationLayer);\n    return _super.apply(this, arguments);\n  }\n  _createClass(AggregationLayer, [{\n    key: \"initializeState\",\n    value: function initializeState(dimensions) {\n      _get(_getPrototypeOf(AggregationLayer.prototype), \"initializeState\", this).call(this);\n      this.setState({\n        ignoreProps: filterProps(this.constructor._propTypes, dimensions.data.props),\n        dimensions: dimensions\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      _get(_getPrototypeOf(AggregationLayer.prototype), \"updateState\", this).call(this, opts);\n      var changeFlags = opts.changeFlags;\n      if (changeFlags.extensionsChanged) {\n        var shaders = this.getShaders({});\n        if (shaders && shaders.defines) {\n          shaders.defines.NON_INSTANCED_MODEL = 1;\n        }\n        this.updateShaders(shaders);\n      }\n      this._updateAttributes(opts.props);\n    }\n  }, {\n    key: \"updateAttributes\",\n    value: function updateAttributes(changedAttributes) {\n      this.setState({\n        changedAttributes: changedAttributes\n      });\n    }\n  }, {\n    key: \"getAttributes\",\n    value: function getAttributes() {\n      return this.getAttributeManager().getShaderAttributes();\n    }\n  }, {\n    key: \"getModuleSettings\",\n    value: function getModuleSettings() {\n      var _this$context = this.context,\n        viewport = _this$context.viewport,\n        mousePosition = _this$context.mousePosition,\n        gl = _this$context.gl;\n      var moduleSettings = Object.assign(Object.create(this.props), {\n        viewport: viewport,\n        mousePosition: mousePosition,\n        pickingActive: 0,\n        devicePixelRatio: cssToDeviceRatio(gl)\n      });\n      return moduleSettings;\n    }\n  }, {\n    key: \"updateShaders\",\n    value: function updateShaders(shaders) {}\n  }, {\n    key: \"isAggregationDirty\",\n    value: function isAggregationDirty(updateOpts) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var props = updateOpts.props,\n        oldProps = updateOpts.oldProps,\n        changeFlags = updateOpts.changeFlags;\n      var _params$compareAll = params.compareAll,\n        compareAll = _params$compareAll === void 0 ? false : _params$compareAll,\n        dimension = params.dimension;\n      var ignoreProps = this.state.ignoreProps;\n      var dataProps = dimension.props,\n        _dimension$accessors = dimension.accessors,\n        accessors = _dimension$accessors === void 0 ? [] : _dimension$accessors;\n      var updateTriggersChanged = changeFlags.updateTriggersChanged;\n      if (changeFlags.dataChanged) {\n        return true;\n      }\n      if (updateTriggersChanged) {\n        if (updateTriggersChanged.all) {\n          return true;\n        }\n        var _iterator = _createForOfIteratorHelper(accessors),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var accessor = _step.value;\n            if (updateTriggersChanged[accessor]) {\n              return true;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      if (compareAll) {\n        if (changeFlags.extensionsChanged) {\n          return true;\n        }\n        return compareProps({\n          oldProps: oldProps,\n          newProps: props,\n          ignoreProps: ignoreProps,\n          propTypes: this.constructor._propTypes\n        });\n      }\n      var _iterator2 = _createForOfIteratorHelper(dataProps),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var name = _step2.value;\n          if (props[name] !== oldProps[name]) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return false;\n    }\n  }, {\n    key: \"isAttributeChanged\",\n    value: function isAttributeChanged(name) {\n      var changedAttributes = this.state.changedAttributes;\n      if (!name) {\n        return !isObjectEmpty(changedAttributes);\n      }\n      return changedAttributes && changedAttributes[name] !== undefined;\n    }\n  }, {\n    key: \"_getAttributeManager\",\n    value: function _getAttributeManager() {\n      return new AttributeManager(this.context.gl, {\n        id: this.props.id,\n        stats: this.context.stats\n      });\n    }\n  }]);\n  return AggregationLayer;\n}(CompositeLayer);\nexport { AggregationLayer as default };\nfunction isObjectEmpty(obj) {\n  var isEmpty = true;\n  for (var key in obj) {\n    isEmpty = false;\n    break;\n  }\n  return isEmpty;\n}\nAggregationLayer.layerName = 'AggregationLayer';","map":{"version":3,"names":["CompositeLayer","AttributeManager","_compareProps","compareProps","cssToDeviceRatio","filterProps","AggregationLayer","_CompositeLayer","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","initializeState","dimensions","_get","_getPrototypeOf","prototype","call","setState","ignoreProps","constructor","_propTypes","data","props","updateState","opts","changeFlags","extensionsChanged","shaders","getShaders","defines","NON_INSTANCED_MODEL","updateShaders","_updateAttributes","updateAttributes","changedAttributes","getAttributes","getAttributeManager","getShaderAttributes","getModuleSettings","_this$context","context","viewport","mousePosition","gl","moduleSettings","Object","assign","create","pickingActive","devicePixelRatio","isAggregationDirty","updateOpts","params","length","undefined","oldProps","_params$compareAll","compareAll","dimension","state","dataProps","_dimension$accessors","accessors","updateTriggersChanged","dataChanged","all","_iterator","_createForOfIteratorHelper","_step","s","n","done","accessor","err","e","f","newProps","propTypes","_iterator2","_step2","name","isAttributeChanged","isObjectEmpty","_getAttributeManager","id","stats","default","obj","isEmpty","layerName"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/aggregation-layers/src/aggregation-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, AttributeManager, _compareProps as compareProps} from '@deck.gl/core';\nimport {cssToDeviceRatio} from '@luma.gl/core';\nimport {filterProps} from './utils/prop-utils';\n\nexport default class AggregationLayer extends CompositeLayer {\n  initializeState(dimensions) {\n    super.initializeState();\n\n    this.setState({\n      // Layer props , when changed doesn't require updating aggregation\n      ignoreProps: filterProps(this.constructor._propTypes, dimensions.data.props),\n      dimensions\n    });\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n    const {changeFlags} = opts;\n    if (changeFlags.extensionsChanged) {\n      const shaders = this.getShaders({});\n      if (shaders && shaders.defines) {\n        shaders.defines.NON_INSTANCED_MODEL = 1;\n      }\n      this.updateShaders(shaders);\n    }\n\n    // Explictly call to update attributes as 'CompositeLayer' doesn't call this\n    this._updateAttributes(opts.props);\n  }\n\n  updateAttributes(changedAttributes) {\n    // Super classes, can refer to state.changedAttributes to determine what\n    // attributes changed\n    this.setState({changedAttributes});\n  }\n\n  getAttributes() {\n    return this.getAttributeManager().getShaderAttributes();\n  }\n\n  getModuleSettings() {\n    // For regular layer draw this happens during draw cycle (_drawLayersInViewport) not during update cycle\n    // For aggregation layers this is called during updateState to update aggregation data\n    // NOTE: it is similar to LayerPass._getModuleParameters() but doesn't inlcude `effects` it is not needed for aggregation\n    const {viewport, mousePosition, gl} = this.context;\n    const moduleSettings = Object.assign(Object.create(this.props), {\n      viewport,\n      mousePosition,\n      pickingActive: 0,\n      devicePixelRatio: cssToDeviceRatio(gl)\n    });\n    return moduleSettings;\n  }\n\n  updateShaders(shaders) {\n    // Default implemention is empty, subclasses can update their Model objects if needed\n  }\n\n  /**\n   * Checks if aggregation is dirty\n   * @param {Object} updateOpts - object {props, oldProps, changeFlags}\n   * @param {Object} params - object {dimension, compareAll}\n   * @param {Object} params.dimension - {props, accessors} array of props and/or accessors\n   * @param {Boolean} params.compareAll - when `true` it will include non layer props for comparision\n   * @returns {Boolean} - returns true if dimensions' prop or accessor is changed\n   **/\n  isAggregationDirty(updateOpts, params = {}) {\n    const {props, oldProps, changeFlags} = updateOpts;\n    const {compareAll = false, dimension} = params;\n    const {ignoreProps} = this.state;\n    const {props: dataProps, accessors = []} = dimension;\n    const {updateTriggersChanged} = changeFlags;\n    if (changeFlags.dataChanged) {\n      return true;\n    }\n    if (updateTriggersChanged) {\n      if (updateTriggersChanged.all) {\n        return true;\n      }\n      for (const accessor of accessors) {\n        if (updateTriggersChanged[accessor]) {\n          return true;\n        }\n      }\n    }\n    if (compareAll) {\n      if (changeFlags.extensionsChanged) {\n        return true;\n      }\n      // Compare non layer props too (like extension props)\n      // ignoreprops refers to all Layer props other than aggregation props that need to be comapred\n      return compareProps({\n        oldProps,\n        newProps: props,\n        ignoreProps,\n        propTypes: this.constructor._propTypes\n      });\n    }\n    // Compare props of the dimension\n    for (const name of dataProps) {\n      if (props[name] !== oldProps[name]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks if an attribute is changed\n   * @param {String} name - name of the attribute\n   * @returns {Boolean} - `true` if attribute `name` is changed, `false` otherwise,\n   *                       If `name` is not passed or `undefiend`, `true` if any attribute is changed, `false` otherwise\n   **/\n  isAttributeChanged(name) {\n    const {changedAttributes} = this.state;\n    if (!name) {\n      // if name not specified return true if any attribute is changed\n      return !isObjectEmpty(changedAttributes);\n    }\n    return changedAttributes && changedAttributes[name] !== undefined;\n  }\n\n  // Private\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n}\n\n// Helper methods\n\n// Returns true if given object is empty, false otherwise.\nfunction isObjectEmpty(obj) {\n  let isEmpty = true;\n  /* eslint-disable no-unused-vars  */\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n  /* eslint-enable no-unused-vars  */\n  return isEmpty;\n}\n\nAggregationLayer.layerName = 'AggregationLayer';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}