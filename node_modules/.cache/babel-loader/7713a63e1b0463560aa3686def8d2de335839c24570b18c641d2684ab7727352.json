{"ast":null,"code":"export function replaceInRange(_ref) {\n  var data = _ref.data,\n    getIndex = _ref.getIndex,\n    dataRange = _ref.dataRange,\n    replace = _ref.replace;\n  var _dataRange$startRow = dataRange.startRow,\n    startRow = _dataRange$startRow === void 0 ? 0 : _dataRange$startRow,\n    _dataRange$endRow = dataRange.endRow,\n    endRow = _dataRange$endRow === void 0 ? Infinity : _dataRange$endRow;\n  var count = data.length;\n  var replaceStart = count;\n  var replaceEnd = count;\n  for (var i = 0; i < count; i++) {\n    var row = getIndex(data[i]);\n    if (replaceStart > i && row >= startRow) {\n      replaceStart = i;\n    }\n    if (row >= endRow) {\n      replaceEnd = i;\n      break;\n    }\n  }\n  var index = replaceStart;\n  var dataLengthChanged = replaceEnd - replaceStart !== replace.length;\n  var endChunk = dataLengthChanged ? data.slice(replaceEnd) : undefined;\n  for (var _i = 0; _i < replace.length; _i++) {\n    data[index++] = replace[_i];\n  }\n  if (endChunk) {\n    for (var _i2 = 0; _i2 < endChunk.length; _i2++) {\n      data[index++] = endChunk[_i2];\n    }\n    data.length = index;\n  }\n  return {\n    startRow: replaceStart,\n    endRow: replaceStart + replace.length\n  };\n}","map":{"version":3,"names":["replaceInRange","_ref","data","getIndex","dataRange","replace","_dataRange$startRow","startRow","_dataRange$endRow","endRow","Infinity","count","length","replaceStart","replaceEnd","i","row","index","dataLengthChanged","endChunk","slice","undefined"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/layers/src/utils.ts"],"sourcesContent":["// Assume data array is sorted by <accessor>\n// Replaces the specified range with a new subarray\n// Mutates the data array\n// Returns {startRow, endRow} of the inserted items\nexport function replaceInRange({\n  data,\n  getIndex,\n  dataRange,\n  replace\n}: {\n  data: any[];\n  getIndex: (d: any) => number;\n  dataRange: {startRow?: number; endRow?: number};\n  replace: any[];\n}): {startRow: Number; endRow: number} {\n  const {startRow = 0, endRow = Infinity} = dataRange;\n  const count = data.length;\n  let replaceStart = count;\n  let replaceEnd = count;\n  for (let i = 0; i < count; i++) {\n    const row = getIndex(data[i]);\n    if (replaceStart > i && row >= startRow) {\n      replaceStart = i;\n    }\n    if (row >= endRow) {\n      replaceEnd = i;\n      break;\n    }\n  }\n  let index = replaceStart;\n  const dataLengthChanged = replaceEnd - replaceStart !== replace.length;\n  // Save the items after replaceEnd before we overwrite data\n  const endChunk = dataLengthChanged ? data.slice(replaceEnd) : undefined;\n  // Insert new items\n  for (let i = 0; i < replace.length; i++) {\n    data[index++] = replace[i];\n  }\n  if (endChunk) {\n    // Append items after replaceEnd\n    for (let i = 0; i < endChunk.length; i++) {\n      data[index++] = endChunk[i];\n    }\n    // Trim additional items\n    data.length = index;\n  }\n\n  return {\n    startRow: replaceStart,\n    endRow: replaceStart + replace.length\n  };\n}\n"],"mappings":"AAIA,OAAO,SAASA,cAATA,CAAAC,IAAA,EAUgC;EAAA,IATrCC,IAD6B,GAAAD,IAAA,CAC7BC,IAD6B;IAE7BC,QAF6B,GAAAF,IAAA,CAE7BE,QAF6B;IAG7BC,SAH6B,GAAAH,IAAA,CAG7BG,SAH6B;IAI7BC,OAAA,GAAAJ,IAAA,CAAAI,OAAA;EAOA,IAAAC,mBAAA,GAA0CF,SAA1C,CAAOG,QAAQ;IAARA,QAAQ,GAAAD,mBAAA,cAAG,CAAZ,GAAAA,mBAAA;IAAAE,iBAAA,GAAoCJ,SAA1C,CAAqBK,MAAM;IAANA,MAAM,GAAAD,iBAAA,cAAGE,QAAA,GAAAF,iBAAA;EAC9B,IAAMG,KAAK,GAAGT,IAAI,CAACU,MAAnB;EACA,IAAIC,YAAY,GAAGF,KAAnB;EACA,IAAIG,UAAU,GAAGH,KAAjB;EACA,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAApB,EAA2BI,CAAC,EAA5B,EAAgC;IAC9B,IAAMC,GAAG,GAAGb,QAAQ,CAACD,IAAI,CAACa,CAAD,CAAL,CAApB;IACA,IAAIF,YAAY,GAAGE,CAAf,IAAoBC,GAAG,IAAIT,QAA/B,EAAyC;MACvCM,YAAY,GAAGE,CAAf;IACD;IACD,IAAIC,GAAG,IAAIP,MAAX,EAAmB;MACjBK,UAAU,GAAGC,CAAb;MACA;IACD;EACF;EACD,IAAIE,KAAK,GAAGJ,YAAZ;EACA,IAAMK,iBAAiB,GAAGJ,UAAU,GAAGD,YAAb,KAA8BR,OAAO,CAACO,MAAhE;EAEA,IAAMO,QAAQ,GAAGD,iBAAiB,GAAGhB,IAAI,CAACkB,KAAL,CAAWN,UAAX,CAAH,GAA4BO,SAA9D;EAEA,KAAK,IAAIN,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGV,OAAO,CAACO,MAA5B,EAAoCG,EAAC,EAArC,EAAyC;IACvCb,IAAI,CAACe,KAAK,EAAN,CAAJ,GAAgBZ,OAAO,CAACU,EAAD,CAAvB;EACD;EACD,IAAII,QAAJ,EAAc;IAEZ,KAAK,IAAIJ,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGI,QAAQ,CAACP,MAA7B,EAAqCG,GAAC,EAAtC,EAA0C;MACxCb,IAAI,CAACe,KAAK,EAAN,CAAJ,GAAgBE,QAAQ,CAACJ,GAAD,CAAxB;IACD;IAEDb,IAAI,CAACU,MAAL,GAAcK,KAAd;EACD;EAED,OAAO;IACLV,QAAQ,EAAEM,YADL;IAELJ,MAAM,EAAEI,YAAY,GAAGR,OAAO,CAACO;EAF1B,CAAP;AAID"},"metadata":{},"sourceType":"module","externalDependencies":[]}