{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.HexagonIdVisConfigs = exports.defaultCoverage = exports.defaultElevation = exports.hexIdAccessor = exports.hexIdRequiredColumns = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _baseLayer = _interopRequireDefault(require(\"../base-layer\"));\nvar _layers = require(\"@deck.gl/layers\");\nvar _geoLayers = require(\"@deck.gl/geo-layers\");\nvar _deckglLayers = require(\"@kepler.gl/deckgl-layers\");\nvar _utils = require(\"@kepler.gl/utils\");\nvar _h3HexagonLayerIcon = _interopRequireDefault(require(\"./h3-hexagon-layer-icon\"));\nvar _constants = require(\"@kepler.gl/constants\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar DEFAULT_LINE_SCALE_VALUE = 8;\nvar hexIdRequiredColumns = ['hex_id'];\nexports.hexIdRequiredColumns = hexIdRequiredColumns;\nvar hexIdAccessor = function hexIdAccessor(_ref) {\n  var hex_id = _ref.hex_id;\n  return function (dc) {\n    return function (d) {\n      return dc.valueAt(d.index, hex_id.fieldIdx);\n    };\n  };\n};\nexports.hexIdAccessor = hexIdAccessor;\nvar defaultElevation = 500;\nexports.defaultElevation = defaultElevation;\nvar defaultCoverage = 1;\nexports.defaultCoverage = defaultCoverage;\nvar HexagonIdVisConfigs = {\n  opacity: 'opacity',\n  colorRange: 'colorRange',\n  coverage: 'coverage',\n  enable3d: 'enable3d',\n  sizeRange: 'elevationRange',\n  coverageRange: 'coverageRange',\n  elevationScale: 'elevationScale',\n  enableElevationZoomFactor: 'enableElevationZoomFactor'\n};\nexports.HexagonIdVisConfigs = HexagonIdVisConfigs;\nvar HexagonIdLayer = /*#__PURE__*/function (_Layer) {\n  (0, _inherits2[\"default\"])(HexagonIdLayer, _Layer);\n  var _super = _createSuper(HexagonIdLayer);\n  function HexagonIdLayer(props) {\n    var _this;\n    (0, _classCallCheck2[\"default\"])(this, HexagonIdLayer);\n    _this = _super.call(this, props);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"dataToFeature\", void 0);\n    _this.dataToFeature = {\n      centroids: []\n    };\n    _this.registerVisConfig(HexagonIdVisConfigs);\n    _this.getPositionAccessor = function (dataContainer) {\n      return hexIdAccessor(_this.config.columns)(dataContainer);\n    };\n    return _this;\n  }\n  (0, _createClass2[\"default\"])(HexagonIdLayer, [{\n    key: \"type\",\n    get: function get() {\n      return 'hexagonId';\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'H3';\n    }\n  }, {\n    key: \"requiredLayerColumns\",\n    get: function get() {\n      return hexIdRequiredColumns;\n    }\n  }, {\n    key: \"layerIcon\",\n    get: function get() {\n      // use hexagon layer icon for now\n      return _h3HexagonLayerIcon[\"default\"];\n    }\n  }, {\n    key: \"visualChannels\",\n    get: function get() {\n      var visualChannels = (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(HexagonIdLayer.prototype), \"visualChannels\", this);\n      return {\n        color: _objectSpread(_objectSpread({}, visualChannels.color), {}, {\n          accessor: 'getFillColor'\n        }),\n        size: _objectSpread(_objectSpread({}, visualChannels.size), {}, {\n          property: 'height',\n          accessor: 'getElevation',\n          nullValue: 0,\n          condition: function condition(config) {\n            return config.visConfig.enable3d;\n          },\n          defaultValue: defaultElevation\n        }),\n        coverage: {\n          property: 'coverage',\n          field: 'coverageField',\n          scale: 'coverageScale',\n          domain: 'coverageDomain',\n          range: 'coverageRange',\n          key: 'coverage',\n          channelScaleType: _constants.CHANNEL_SCALES.radius,\n          accessor: 'getCoverage',\n          nullValue: 0,\n          defaultValue: defaultCoverage\n        }\n      };\n    }\n  }, {\n    key: \"setInitialLayerConfig\",\n    value: function setInitialLayerConfig(dataset) {\n      if (!dataset.dataContainer.numRows()) {\n        return this;\n      }\n      var defaultColorField = (0, _utils.findDefaultColorField)(dataset);\n      if (defaultColorField) {\n        this.updateLayerConfig({\n          colorField: defaultColorField\n        });\n        this.updateLayerVisualChannel(dataset, 'color');\n      }\n      return this;\n    }\n  }, {\n    key: \"getDefaultLayerConfig\",\n    value: function getDefaultLayerConfig() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _objectSpread(_objectSpread({}, (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(HexagonIdLayer.prototype), \"getDefaultLayerConfig\", this).call(this, props)), {}, {\n        // add height visual channel\n        coverageField: null,\n        coverageDomain: [0, 1],\n        coverageScale: 'linear'\n      });\n    }\n  }, {\n    key: \"calculateDataAttribute\",\n    value: function calculateDataAttribute(_ref2, getHexId) {\n      var dataContainer = _ref2.dataContainer,\n        filteredIndex = _ref2.filteredIndex;\n      var data = [];\n      for (var i = 0; i < filteredIndex.length; i++) {\n        var index = filteredIndex[i];\n        var id = getHexId({\n          index: index\n        });\n        var centroid = this.dataToFeature.centroids[index];\n        if (centroid) {\n          data.push({\n            index: index,\n            id: id,\n            centroid: centroid\n          });\n        }\n      }\n      return data;\n    } // TODO: fix complexity\n\n    /* eslint-disable complexity */\n  }, {\n    key: \"formatLayerData\",\n    value: function formatLayerData(datasets, oldLayerData) {\n      var opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (this.config.dataId === null) {\n        return {};\n      }\n      var _datasets$this$config = datasets[this.config.dataId],\n        gpuFilter = _datasets$this$config.gpuFilter,\n        dataContainer = _datasets$this$config.dataContainer;\n      var getHexId = this.getPositionAccessor(dataContainer);\n      var _this$updateData = this.updateData(datasets, oldLayerData),\n        data = _this$updateData.data;\n      var accessors = this.getAttributeAccessors({\n        dataContainer: dataContainer\n      });\n      return _objectSpread({\n        data: data,\n        getHexId: getHexId,\n        getFilterValue: gpuFilter.filterValueAccessor(dataContainer)()\n      }, accessors);\n    }\n    /* eslint-enable complexity */\n  }, {\n    key: \"updateLayerMeta\",\n    value: function updateLayerMeta(dataContainer, getHexId) {\n      var centroids = dataContainer.map(function (d, index) {\n        var id = getHexId({\n          index: index\n        });\n        if (!(0, _utils.h3IsValid)(id)) {\n          return null;\n        } // save a reference of centroids to dataToFeature\n        // so we don't have to re calculate it again\n\n        return (0, _utils.getCentroid)({\n          id: id\n        });\n      }, true);\n      var centroidsDataContainer = (0, _utils.createDataContainer)(centroids);\n      var bounds = this.getPointsBounds(centroidsDataContainer, function (d, dc) {\n        return [dc.valueAt(d.index, 0), dc.valueAt(d.index, 1)];\n      });\n      this.dataToFeature = {\n        centroids: centroids\n      };\n      this.updateMeta({\n        bounds: bounds\n      });\n    }\n  }, {\n    key: \"renderLayer\",\n    value: function renderLayer(opts) {\n      var data = opts.data,\n        gpuFilter = opts.gpuFilter,\n        objectHovered = opts.objectHovered,\n        mapState = opts.mapState;\n      var zoomFactor = this.getZoomFactor(mapState);\n      var eleZoomFactor = this.getElevationZoomFactor(mapState);\n      var config = this.config;\n      var visConfig = config.visConfig;\n      var updateTriggers = this.getVisualChannelUpdateTriggers();\n      var h3HexagonLayerTriggers = {\n        getHexagon: this.config.columns,\n        getFillColor: updateTriggers.getFillColor,\n        getElevation: updateTriggers.getElevation,\n        getFilterValue: gpuFilter.filterValueUpdateTriggers\n      };\n      var columnLayerTriggers = {\n        getCoverage: updateTriggers.getCoverage\n      };\n      var defaultLayerProps = this.getDefaultDeckLayerProps(opts);\n      var hoveredObject = this.hasHoveredObject(objectHovered);\n      return [new _geoLayers.H3HexagonLayer(_objectSpread(_objectSpread(_objectSpread({}, defaultLayerProps), data), {}, {\n        wrapLongitude: false,\n        getHexagon: function getHexagon(x) {\n          return x.id;\n        },\n        // coverage\n        coverage: config.coverageField ? 1 : visConfig.coverage,\n        // highlight\n        autoHighlight: visConfig.enable3d,\n        highlightColor: _constants.HIGHLIGH_COLOR_3D,\n        // elevation\n        extruded: visConfig.enable3d,\n        elevationScale: visConfig.elevationScale * eleZoomFactor,\n        // render\n        updateTriggers: h3HexagonLayerTriggers,\n        _subLayerProps: {\n          'hexagon-cell': {\n            type: _deckglLayers.EnhancedColumnLayer,\n            getCoverage: data.getCoverage,\n            updateTriggers: columnLayerTriggers\n          }\n        }\n      }))].concat((0, _toConsumableArray2[\"default\"])(hoveredObject && !config.sizeField ? [new _layers.GeoJsonLayer(_objectSpread(_objectSpread({}, this.getDefaultHoverLayerProps()), {}, {\n        data: [(0, _utils.idToPolygonGeo)(hoveredObject)],\n        getLineColor: config.highlightColor,\n        lineWidthScale: DEFAULT_LINE_SCALE_VALUE * zoomFactor,\n        wrapLongitude: false\n      }))] : []));\n    }\n  }], [{\n    key: \"findDefaultLayerProps\",\n    value: function findDefaultLayerProps(_ref3) {\n      var _ref3$fields = _ref3.fields,\n        fields = _ref3$fields === void 0 ? [] : _ref3$fields,\n        dataContainer = _ref3.dataContainer;\n      var hexFields = (0, _utils.getHexFields)(fields, dataContainer);\n      if (!hexFields.length) {\n        return {\n          props: []\n        };\n      }\n      return {\n        props: hexFields.map(function (f) {\n          return {\n            isVisible: true,\n            label: f.displayName || f.name,\n            columns: {\n              hex_id: {\n                value: f.name,\n                fieldIdx: fields.findIndex(function (fid) {\n                  return fid.name === f.name;\n                })\n              }\n            }\n          };\n        })\n      };\n    }\n  }]);\n  return HexagonIdLayer;\n}(_baseLayer[\"default\"]);\nexports[\"default\"] = HexagonIdLayer;","map":{"version":3,"names":["exports","HexagonIdVisConfigs","defaultCoverage","defaultElevation","hexIdAccessor","hexIdRequiredColumns","_toConsumableArray2","_interopRequireDefault","require","_classCallCheck2","_createClass2","_assertThisInitialized2","_get2","_inherits2","_layers","_deckglLayers","_utils","_h3HexagonLayerIcon","_constants","_objectSpread","target","i","arguments","length","source","ownKeys","Object","forEach","key","_defineProperty2","getOwnPropertyDescriptors","defineProperties","defineProperty","getOwnPropertyDescriptor","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","result","NewTarget","constructor","Reflect","construct","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","prototype","valueOf","call","e","DEFAULT_LINE_SCALE_VALUE","_ref","hex_id","dc","d","opacity","colorRange","coverage","enable3d","sizeRange","elevationScale","HexagonIdLayer","_Layer","dataToFeature","centroids","_this","getPositionAccessor","dataContainer","config","columns","get","nullValue","visualChannels","color","accessor","size","property","visConfig","defaultValue","scale","domain","range","channelScaleType","CHANNEL_SCALES","radius","value","setInitialLayerConfig","dataset","numRows","defaultColorField","findDefaultColorField","updateLayerVisualChannel","getDefaultLayerConfig","props","undefined","coverageField","coverageDomain","coverageScale","_ref2","filteredIndex","index","centroid","data","push","id","formatLayerData","getHexId","datasets","oldLayerData","opt","dataId","_datasets$this$config","gpuFilter","_this$updateData","updateData","accessors","getAttributeAccessors","getFilterValue","filterValueAccessor","updateLayerMeta","map","h3IsValid","getCentroid","centroidsDataContainer","createDataContainer","bounds","getPointsBounds","valueAt","updateMeta","renderLayer","opts","objectHovered","mapState","zoomFactor","getZoomFactor","eleZoomFactor","getElevationZoomFactor","updateTriggers","getVisualChannelUpdateTriggers","h3HexagonLayerTriggers","getHexagon","getFillColor","getElevation","filterValueUpdateTriggers","columnLayerTriggers","getCoverage","defaultLayerProps","getDefaultDeckLayerProps","hoveredObject","hasHoveredObject","_geoLayers","H3HexagonLayer","wrapLongitude","x","autoHighlight","_subLayerProps","type","EnhancedColumnLayer","idToPolygonGeo","getLineColor","highlightColor","lineWidthScale","findDefaultLayerProps","_ref3","_ref3$fields","fields","hexFields","getHexFields"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/layers/src/h3-hexagon-layer/h3-hexagon-layer.ts"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport Layer, {\n  LayerBaseConfig,\n  LayerColorConfig,\n  LayerColumn,\n  LayerCoverageConfig,\n  LayerSizeConfig\n} from '../base-layer';\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {H3HexagonLayer} from '@deck.gl/geo-layers';\nimport {EnhancedColumnLayer} from '@kepler.gl/deckgl-layers';\nimport {\n  getCentroid,\n  idToPolygonGeo,\n  h3IsValid,\n  getHexFields,\n  Centroid,\n  findDefaultColorField,\n  DataContainerInterface,\n  createDataContainer\n} from '@kepler.gl/utils';\nimport H3HexagonLayerIcon from './h3-hexagon-layer-icon';\nimport {CHANNEL_SCALES, HIGHLIGH_COLOR_3D, ColorRange} from '@kepler.gl/constants';\n\nimport {\n  VisConfigBoolean,\n  VisConfigColorRange,\n  VisConfigNumber,\n  VisConfigRange,\n  Merge\n} from '@kepler.gl/types';\nimport {KeplerTable} from '@kepler.gl/table';\n\nexport type HexagonIdLayerColumnsConfig = {\n  hex_id: LayerColumn;\n};\n\nexport type HexagonIdLayerVisConfigSettings = {\n  opacity: VisConfigNumber;\n  colorRange: VisConfigColorRange;\n  coverage: VisConfigNumber;\n  enable3d: VisConfigBoolean;\n  sizeRange: VisConfigRange;\n  coverageRange: VisConfigRange;\n  elevationScale: VisConfigNumber;\n  enableElevationZoomFactor: VisConfigBoolean;\n};\n\nexport type HexagonIdLayerVisConfig = {\n  opacity: number;\n  colorRange: ColorRange;\n  coverage: number;\n  enable3d: boolean;\n  sizeRange: [number, number];\n  coverageRange: [number, number];\n  elevationScale: number;\n  enableElevationZoomFactor: boolean;\n};\n\nexport type HexagonIdLayerVisualChannelConfig = LayerColorConfig &\n  LayerSizeConfig &\n  LayerCoverageConfig;\nexport type HexagonIdLayerConfig = Merge<\n  LayerBaseConfig,\n  {columns: HexagonIdLayerColumnsConfig; visConfig: HexagonIdLayerVisConfig}\n> &\n  HexagonIdLayerVisualChannelConfig;\n\nexport type HexagonIdLayerData = {index: number; id; centroid: Centroid};\n\nconst DEFAULT_LINE_SCALE_VALUE = 8;\n\nexport const hexIdRequiredColumns: ['hex_id'] = ['hex_id'];\nexport const hexIdAccessor = ({hex_id}: HexagonIdLayerColumnsConfig) => (\n  dc: DataContainerInterface\n) => d => dc.valueAt(d.index, hex_id.fieldIdx);\n\nexport const defaultElevation = 500;\nexport const defaultCoverage = 1;\n\nexport const HexagonIdVisConfigs: {\n  opacity: 'opacity';\n  colorRange: 'colorRange';\n  coverage: 'coverage';\n  enable3d: 'enable3d';\n  sizeRange: 'elevationRange';\n  coverageRange: 'coverageRange';\n  elevationScale: 'elevationScale';\n  enableElevationZoomFactor: 'enableElevationZoomFactor';\n} = {\n  opacity: 'opacity',\n  colorRange: 'colorRange',\n  coverage: 'coverage',\n  enable3d: 'enable3d',\n  sizeRange: 'elevationRange',\n  coverageRange: 'coverageRange',\n  elevationScale: 'elevationScale',\n  enableElevationZoomFactor: 'enableElevationZoomFactor'\n};\n\nexport default class HexagonIdLayer extends Layer {\n  dataToFeature: {centroids: Centroid[]};\n\n  declare config: HexagonIdLayerConfig;\n  declare visConfigSettings: HexagonIdLayerVisConfigSettings;\n  constructor(props) {\n    super(props);\n    this.dataToFeature = {centroids: []};\n    this.registerVisConfig(HexagonIdVisConfigs);\n    this.getPositionAccessor = (dataContainer: DataContainerInterface) =>\n      hexIdAccessor(this.config.columns)(dataContainer);\n  }\n\n  get type(): 'hexagonId' {\n    return 'hexagonId';\n  }\n\n  get name(): 'H3' {\n    return 'H3';\n  }\n\n  get requiredLayerColumns() {\n    return hexIdRequiredColumns;\n  }\n\n  get layerIcon() {\n    // use hexagon layer icon for now\n    return H3HexagonLayerIcon;\n  }\n\n  get visualChannels() {\n    const visualChannels = super.visualChannels;\n    return {\n      color: {\n        ...visualChannels.color,\n        accessor: 'getFillColor'\n      },\n      size: {\n        ...visualChannels.size,\n        property: 'height',\n        accessor: 'getElevation',\n        nullValue: 0,\n        condition: config => config.visConfig.enable3d,\n        defaultValue: defaultElevation\n      },\n      coverage: {\n        property: 'coverage',\n        field: 'coverageField',\n        scale: 'coverageScale',\n        domain: 'coverageDomain',\n        range: 'coverageRange',\n        key: 'coverage',\n        channelScaleType: CHANNEL_SCALES.radius,\n        accessor: 'getCoverage',\n        nullValue: 0,\n        defaultValue: defaultCoverage\n      }\n    };\n  }\n\n  setInitialLayerConfig(dataset) {\n    if (!dataset.dataContainer.numRows()) {\n      return this;\n    }\n    const defaultColorField = findDefaultColorField(dataset);\n\n    if (defaultColorField) {\n      this.updateLayerConfig<HexagonIdLayerConfig>({\n        colorField: defaultColorField\n      });\n      this.updateLayerVisualChannel(dataset, 'color');\n    }\n\n    return this;\n  }\n\n  static findDefaultLayerProps({fields = [], dataContainer}: KeplerTable) {\n    const hexFields = getHexFields(fields, dataContainer);\n    if (!hexFields.length) {\n      return {props: []};\n    }\n\n    return {\n      props: hexFields.map(f => ({\n        isVisible: true,\n        label: f.displayName || f.name,\n        columns: {\n          hex_id: {\n            value: f.name,\n            fieldIdx: fields.findIndex(fid => fid.name === f.name)\n          }\n        }\n      }))\n    };\n  }\n\n  getDefaultLayerConfig(props = {}) {\n    return {\n      ...super.getDefaultLayerConfig(props),\n\n      // add height visual channel\n      coverageField: null,\n      coverageDomain: [0, 1],\n      coverageScale: 'linear'\n    };\n  }\n\n  calculateDataAttribute({dataContainer, filteredIndex}: KeplerTable, getHexId) {\n    const data: HexagonIdLayerData[] = [];\n\n    for (let i = 0; i < filteredIndex.length; i++) {\n      const index = filteredIndex[i];\n      const id = getHexId({index});\n      const centroid = this.dataToFeature.centroids[index];\n\n      if (centroid) {\n        data.push({\n          index,\n          id,\n          centroid\n        });\n      }\n    }\n    return data;\n  }\n\n  // TODO: fix complexity\n  /* eslint-disable complexity */\n  formatLayerData(datasets, oldLayerData, opt = {}) {\n    if (this.config.dataId === null) {\n      return {};\n    }\n    const {gpuFilter, dataContainer} = datasets[this.config.dataId];\n    const getHexId = this.getPositionAccessor(dataContainer);\n    const {data} = this.updateData(datasets, oldLayerData);\n    const accessors = this.getAttributeAccessors({dataContainer});\n\n    return {\n      data,\n      getHexId,\n      getFilterValue: gpuFilter.filterValueAccessor(dataContainer)(),\n      ...accessors\n    };\n  }\n  /* eslint-enable complexity */\n\n  updateLayerMeta(dataContainer, getHexId) {\n    const centroids = dataContainer.map((d, index) => {\n      const id = getHexId({index});\n      if (!h3IsValid(id)) {\n        return null;\n      }\n      // save a reference of centroids to dataToFeature\n      // so we don't have to re calculate it again\n      return getCentroid({id});\n    }, true);\n\n    const centroidsDataContainer = createDataContainer(centroids);\n\n    const bounds = this.getPointsBounds(centroidsDataContainer, (d, dc) => {\n      return [dc.valueAt(d.index, 0), dc.valueAt(d.index, 1)];\n    });\n    this.dataToFeature = {centroids};\n    this.updateMeta({bounds});\n  }\n\n  renderLayer(opts) {\n    const {data, gpuFilter, objectHovered, mapState} = opts;\n\n    const zoomFactor = this.getZoomFactor(mapState);\n    const eleZoomFactor = this.getElevationZoomFactor(mapState);\n    const {config} = this;\n    const {visConfig} = config;\n    const updateTriggers = this.getVisualChannelUpdateTriggers();\n\n    const h3HexagonLayerTriggers = {\n      getHexagon: this.config.columns,\n      getFillColor: updateTriggers.getFillColor,\n      getElevation: updateTriggers.getElevation,\n      getFilterValue: gpuFilter.filterValueUpdateTriggers\n    };\n\n    const columnLayerTriggers = {\n      getCoverage: updateTriggers.getCoverage\n    };\n\n    const defaultLayerProps = this.getDefaultDeckLayerProps(opts);\n    const hoveredObject = this.hasHoveredObject(objectHovered);\n\n    return [\n      new H3HexagonLayer({\n        ...defaultLayerProps,\n        ...data,\n        wrapLongitude: false,\n\n        getHexagon: (x: any) => x.id,\n\n        // coverage\n        coverage: config.coverageField ? 1 : visConfig.coverage,\n\n        // highlight\n        autoHighlight: visConfig.enable3d,\n        highlightColor: HIGHLIGH_COLOR_3D,\n\n        // elevation\n        extruded: visConfig.enable3d,\n        elevationScale: visConfig.elevationScale * eleZoomFactor,\n\n        // render\n        updateTriggers: h3HexagonLayerTriggers,\n        _subLayerProps: {\n          'hexagon-cell': {\n            type: EnhancedColumnLayer,\n            getCoverage: data.getCoverage,\n            updateTriggers: columnLayerTriggers\n          }\n        }\n      }),\n      ...(hoveredObject && !config.sizeField\n        ? [\n            new GeoJsonLayer({\n              ...this.getDefaultHoverLayerProps(),\n              data: [idToPolygonGeo(hoveredObject)],\n              getLineColor: config.highlightColor,\n              lineWidthScale: DEFAULT_LINE_SCALE_VALUE * zoomFactor,\n              wrapLongitude: false\n            })\n          ]\n        : [])\n    ];\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}