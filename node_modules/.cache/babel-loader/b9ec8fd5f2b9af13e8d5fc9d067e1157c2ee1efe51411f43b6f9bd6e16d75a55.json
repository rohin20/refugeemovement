{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _mjolnir = require(\"mjolnir.js\");\nvar _reactMapGl = require(\"react-map-gl\");\nvar _uuid = _interopRequireDefault(require(\"uuid\"));\nvar _feature2 = _interopRequireDefault(require(\"./feature\"));\nvar _style = require(\"./style\");\nvar _constants = require(\"./constants\");\nvar _utils = require(\"./utils\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n  return target;\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar defaultProps = {\n  mode: _constants.MODES.READ_ONLY,\n  clickRadius: 0,\n  getEditHandleStyle: _style.getEditHandleStyle,\n  getFeatureStyle: _style.getFeatureStyle,\n  getFeatureShape: 'circle',\n  getEditHandleShape: 'circle',\n  onSelect: function onSelect() {}\n};\nvar UNCOMMITTED_ID = 'uncommitted';\nvar Editor = /*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Editor, _PureComponent);\n  function Editor(props) {\n    var _this;\n    _classCallCheck(this, Editor);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Editor).call(this, props));\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_containerRef\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_events\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_context\", void 0);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_update\", function (features) {\n      if (features) {\n        _this.props.onUpdate(features.map(function (f) {\n          return f.toFeature();\n        }));\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_updateRectangle\", function (feature, options) {\n      var vertexIndex = options.vertexIndex,\n        lngLat = options.lngLat;\n      /*\n      *   p0.x, p0.y   ----------  diagonal.x, p0.y\n      *       |                             |\n      *       |                             |\n      *   p0.x, diagonal.y ----- diagonal.x, diagonal.y\n      */\n\n      var diagonal = vertexIndex;\n      var p0 = feature.points[(diagonal + 2) % 4];\n      feature.replacePoint(diagonal, [lngLat[0], lngLat[1]]);\n      feature.replacePoint((diagonal + 1) % 4, [lngLat[0], p0[1]]);\n      feature.replacePoint((diagonal + 3) % 4, [p0[0], lngLat[1]]);\n      _this._update(_this.state.features);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_updateFeature\", function (feature, mode, options) {\n      switch (mode) {\n        case 'vertex':\n          if (feature.renderType === _constants.RENDER_TYPE.RECTANGLE) {\n            _this._updateRectangle(feature, options);\n          } else {\n            feature.replacePoint(options.vertexIndex, [options.lngLat[0], options.lngLat[1]]);\n            _this._update(_this.state.features);\n          }\n          break;\n        case 'feature':\n          var dx = options.dx,\n            dy = options.dy;\n          feature.points = feature.points.map(function (lngLat) {\n            var pixels = _this._project(lngLat);\n            if (pixels) {\n              pixels[0] += dx;\n              pixels[1] += dy;\n              return _this._unproject(pixels);\n            }\n            return null;\n          }).filter(Boolean);\n          _this._update(_this.state.features);\n          break;\n        case 'Rectangle':\n          _this._updateRectangle(feature, options);\n          break;\n        default:\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_addPoint\", function (x, y, feature) {\n      var isNew = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      feature = feature || _this._getSelectedFeature();\n      if (!feature) {\n        return;\n      }\n      var lngLat = _this._unproject([x, y]);\n      if (!lngLat) {\n        return;\n      }\n      feature.addPoint([lngLat[0], lngLat[1]]);\n      var features = _this.state.features || [];\n      if (isNew) {\n        features.push(feature);\n      }\n      var validPath = feature.points && feature.points.length >= 2;\n      var _this$props = _this.props,\n        mode = _this$props.mode,\n        onSelect = _this$props.onSelect;\n      if (mode === _constants.MODES.DRAW_POINT || mode === _constants.MODES.DRAW_PATH && validPath) {\n        _this._update(features);\n        onSelect({\n          selectedFeatureId: feature && feature.id\n        });\n      } else {\n        _this.setState({\n          features: _toConsumableArray(features),\n          selectedFeatureId: feature && feature.id\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_clearCache\", function () {\n      _this.setState({\n        selectedFeatureId: null,\n        uncommittedLngLat: null,\n        hoveredFeatureId: null,\n        hoveredLngLat: null,\n        hoveredVertexIndex: -1,\n        draggingVertexIndex: -1,\n        startDragPos: null,\n        isDragging: false,\n        didDrag: false\n      });\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_closePath\", function () {\n      var selectedFeature = _this._getSelectedFeature();\n      if (selectedFeature) {\n        selectedFeature.closePath();\n        _this._update(_this.state.features);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_addFeature\", function (mode, point) {\n      var type = _constants.MODE_TO_GEOJSON_TYPE[mode];\n      var renderType = _constants.MODE_TO_RENDER_TYPE[mode];\n      var feature = new _feature2.default({\n        id: (0, _uuid.default)(),\n        type: type,\n        renderType: renderType\n      });\n      _this._addPoint(point.x, point.y, feature, true);\n      if (mode === _constants.MODES.DRAW_RECTANGLE) {\n        for (var i = 0; i < 3; i++) {\n          _this._addPoint(point.x, point.y, feature, false);\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_onEvent\", function (handler, evt, stopPropagation) {\n      var mode = _this.props.mode;\n      if (mode === _constants.MODES.READ_ONLY) {\n        return;\n      }\n      for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n        args[_key - 3] = arguments[_key];\n      }\n      handler.apply(void 0, [evt].concat(args));\n      if (stopPropagation) {\n        evt.stopImmediatePropagation();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_onMouseUp\", function (evt) {\n      _this.setState({\n        isDragging: false,\n        didDrag: false\n      });\n      var draggingVertexIndex = _this.state.draggingVertexIndex;\n      if (Number(draggingVertexIndex) >= 0) {\n        _this.setState({\n          draggingVertexIndex: -1\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_onMouseDown\", function (evt) {\n      var _this$_getEventPositi = _this._getEventPosition(evt),\n        x = _this$_getEventPositi.x,\n        y = _this$_getEventPositi.y;\n      var attributes = (0, _utils.parseElemDataAttributes)(evt.target); // click segment\n\n      if (attributes && attributes.type === _constants.ELEMENT_TYPE.VERTEX) {\n        var vertexIndex = attributes.vertexIndex;\n        _this.setState({\n          draggingVertexIndex: vertexIndex,\n          startDragPos: {\n            x: x,\n            y: y\n          },\n          isDragging: true\n        }); // click selected feature\n      } else if (_this._matchesFeature(attributes, _this._getSelectedFeature())) {\n        _this.setState({\n          startDragPos: {\n            x: x,\n            y: y\n          },\n          isDragging: true\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_onMouseMove\", function (evt) {\n      var attributes = (0, _utils.parseElemDataAttributes)(evt.target) || {};\n      var vertexIndex = attributes.vertexIndex,\n        featureIndex = attributes.featureIndex,\n        type = attributes.type;\n      var _this$state = _this.state,\n        startDragPos = _this$state.startDragPos,\n        isDragging = _this$state.isDragging,\n        didDrag = _this$state.didDrag;\n      var mode = _this.props.mode;\n      var _this$_getEventPositi2 = _this._getEventPosition(evt),\n        x = _this$_getEventPositi2.x,\n        y = _this$_getEventPositi2.y;\n      var lngLat = _this._unproject([x, y]);\n      if (isDragging && !didDrag && startDragPos) {\n        var dx = x - startDragPos.x;\n        var dy = y - startDragPos.y;\n        if (dx * dx + dy * dy > 5) {\n          _this.setState({\n            didDrag: true\n          });\n        }\n      }\n      var selectedFeature = _this._getSelectedFeature();\n      var isDrawing = _constants.DRAWING_MODES.indexOf(mode) !== -1;\n      var isEditing = mode === _constants.MODES.EDIT_VERTEX;\n      if (selectedFeature) {\n        // dragging\n        if (didDrag && startDragPos) {\n          var draggingVertexIndex = Number(_this.state.draggingVertexIndex);\n          if (draggingVertexIndex >= 0) {\n            // dragging vertex\n            _this._updateFeature(selectedFeature, 'vertex', {\n              vertexIndex: draggingVertexIndex,\n              lngLat: lngLat\n            });\n          } else {\n            // dragging feature\n            var _dx = x - startDragPos.x;\n            var _dy = y - startDragPos.y;\n            _this.setState({\n              startDragPos: {\n                x: x,\n                y: y\n              }\n            });\n            _this._updateFeature(selectedFeature, 'feature', {\n              dx: _dx,\n              dy: _dy\n            });\n          }\n        } else if (mode === _constants.MODES.DRAW_RECTANGLE) {\n          // drawing rectangle\n          _this._updateFeature(selectedFeature, 'Rectangle', {\n            vertexIndex: 2,\n            lngLat: lngLat\n          });\n        } else if (isDrawing) {\n          // drawing other shapes\n          _this.setState({\n            uncommittedLngLat: lngLat\n          });\n        } else if (isEditing) {\n          if ((selectedFeature.renderType === _constants.RENDER_TYPE.LINE_STRING || selectedFeature.renderType === _constants.RENDER_TYPE.POLYGON) && type === _constants.ELEMENT_TYPE.SEGMENT) {\n            // segmentId is start vertexIndex\n            var uncommittedLngLat = null;\n            if (lngLat && typeof vertexIndex === 'number') {\n              uncommittedLngLat = _this._getClosestPositionOnSegment(vertexIndex, lngLat, selectedFeature);\n            }\n            _this.setState({\n              uncommittedLngLat: uncommittedLngLat\n            });\n          } else {\n            _this.setState({\n              uncommittedLngLat: null\n            });\n          }\n        }\n      }\n      var _this$state2 = _this.state,\n        features = _this$state2.features,\n        selectedFeatureId = _this$state2.selectedFeatureId;\n      if (selectedFeatureId && type === _constants.ELEMENT_TYPE.VERTEX && typeof featureIndex === 'number') {\n        var feature = features && features[featureIndex];\n        if (selectedFeatureId === (feature && feature.id)) {\n          _this.setState({\n            hoveredVertexIndex: vertexIndex\n          });\n        }\n      } else if (type !== _constants.ELEMENT_TYPE.VERTEX) {\n        _this.setState({\n          hoveredVertexIndex: null\n        });\n      }\n      if (type === _constants.ELEMENT_TYPE.FEATURE && typeof featureIndex === 'number') {\n        var _feature = features && features[featureIndex];\n        _this.setState({\n          hoveredFeatureId: _feature && _feature.id\n        });\n      } else {\n        _this.setState({\n          hoveredFeatureId: null\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_onClickFeature\", function (evt, attributes) {\n      var featureIndex = attributes.featureIndex;\n      var features = _this.state.features;\n      var selectedFeature = features && typeof featureIndex === 'number' && features[featureIndex];\n      if (selectedFeature) {\n        _this.props.onSelect({\n          selectedFeatureId: selectedFeature.id,\n          sourceEvent: evt\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_onClickVertex\", function (evt, attributes) {\n      var mode = _this.props.mode;\n      var operation = attributes.operation;\n      if (operation === _constants.OPERATIONS.INTERSECT || operation === _constants.OPERATIONS.SET && mode === _constants.MODES.DRAW_RECTANGLE) {\n        _this._closePath();\n        _this._clearCache();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_onClickSegment\", function (evt, attributes) {\n      var feature = _this._getSelectedFeature();\n      if (feature && (feature.renderType === _constants.RENDER_TYPE.POLYGON || feature.renderType === _constants.RENDER_TYPE.LINE_STRING) && attributes) {\n        var vertexIndex = attributes.vertexIndex;\n        var uncommittedLngLat = _this.state.uncommittedLngLat;\n        var lngLat = uncommittedLngLat;\n        if (!lngLat && typeof vertexIndex === 'number') {\n          var _this$_getEventPositi3 = _this._getEventPosition(evt),\n            x = _this$_getEventPositi3.x,\n            y = _this$_getEventPositi3.y;\n          lngLat = _this._unproject([x, y]);\n          lngLat = _this._getClosestPositionOnSegment(vertexIndex, lngLat, feature);\n        }\n        if (lngLat) {\n          var insertPosition = (vertexIndex + 1) % feature.points.length;\n          feature.insertPoint(lngLat, insertPosition);\n          _this._update(_this.state.features);\n        }\n        _this.setState({\n          uncommittedLngLat: null,\n          hoveredLngLat: null\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_onClick\", function (evt) {\n      var mode = _this.props.mode;\n      var attributes = (0, _utils.parseElemDataAttributes)(evt.target);\n      if (attributes && attributes.type === _constants.ELEMENT_TYPE.VERTEX) {\n        _this._onClickVertex(evt, attributes);\n        return;\n      }\n      if (mode === _constants.MODES.EDIT_VERTEX && attributes && attributes.type === _constants.ELEMENT_TYPE.SEGMENT) {\n        _this._onClickSegment(evt, attributes);\n        return;\n      }\n      if ((mode === _constants.MODES.SELECT_FEATURE || mode === _constants.MODES.EDIT_VERTEX) && attributes && attributes.type === _constants.ELEMENT_TYPE.FEATURE) {\n        _this._onClickFeature(evt, attributes);\n        return;\n      }\n      var selectedFeature = _this._getSelectedFeature();\n      var _this$_getEventPositi4 = _this._getEventPosition(evt),\n        x = _this$_getEventPositi4.x,\n        y = _this$_getEventPositi4.y;\n      switch (mode) {\n        case _constants.MODES.EDIT_VERTEX:\n          if (selectedFeature) {\n            _this.props.onSelect({\n              selectedFeatureId: null,\n              sourceEvent: evt\n            });\n          }\n          break;\n        case _constants.MODES.DRAW_POINT:\n          _this._addFeature(mode, {\n            x: x,\n            y: y\n          });\n          break;\n        case _constants.MODES.DRAW_PATH:\n        case _constants.MODES.DRAW_POLYGON:\n          if (selectedFeature && selectedFeature.isClosed) {\n            // clicked outside\n            _this._clearCache();\n          } else if (selectedFeature) {\n            _this._addPoint(x, y, selectedFeature);\n          } else {\n            _this._addFeature(mode, {\n              x: x,\n              y: y\n            });\n          }\n          break;\n        case _constants.MODES.DRAW_RECTANGLE:\n          if (selectedFeature && selectedFeature.isClosed) {\n            // clicked outside\n            _this._clearCache();\n            _this.props.onSelect({\n              selectedFeatureId: null,\n              sourceEvent: evt\n            });\n          } else {\n            _this._addFeature(mode, {\n              x: x,\n              y: y\n            });\n          }\n          break;\n        default:\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_onPan\", function (evt) {\n      var attributes = (0, _utils.parseElemDataAttributes)(evt.target);\n      var type = attributes && attributes.type;\n      if (type === _constants.ELEMENT_TYPE.VERTEX || type === _constants.ELEMENT_TYPE.SEGMENT || _this.state.isDragging || _this.state.uncommittedLngLat !== null) {\n        evt.stopImmediatePropagation();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_project\", function (pt) {\n      return _this._context && _this._context.viewport && _this._context.viewport.project(pt);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_unproject\", function (pt) {\n      return _this._context && _this._context.viewport && _this._context.viewport.unproject(pt);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_matchesFeature\", function (attributes, feature) {\n      if (!attributes || attributes.type !== _constants.ELEMENT_TYPE.FEATURE || !feature) {\n        return false;\n      }\n      var featureIndex = attributes.featureIndex;\n      var features = _this.props.features;\n      var elemFeature = features && features[featureIndex];\n      return elemFeature && feature.id === elemFeature.id;\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_getClosestPositionOnSegment\", function (vertexIndex, pointLngLat, feature) {\n      var points = feature && feature.points;\n      if (!points || !points.length) {\n        return null;\n      } // segmentId is start vertexIndex\n\n      var startPos = points[vertexIndex];\n      var endPos = points[(vertexIndex + 1) % points.length];\n      return (0, _utils.findClosestPointOnLineSegment)(startPos, endPos, pointLngLat);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_getEventPosition\", function (evt) {\n      var _evt$offsetCenter = evt.offsetCenter,\n        x = _evt$offsetCenter.x,\n        y = _evt$offsetCenter.y;\n      return {\n        x: Number(x),\n        y: Number(y)\n      };\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_getSelectedFeature\", function () {\n      var _this$state3 = _this.state,\n        features = _this$state3.features,\n        selectedFeatureId = _this$state3.selectedFeatureId;\n      return features && features.find(function (f) {\n        return f.id === selectedFeatureId;\n      });\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_getEditHandleState\", function (index, renderState) {\n      var mode = _this.props.mode;\n      var _this$state4 = _this.state,\n        draggingVertexIndex = _this$state4.draggingVertexIndex,\n        hoveredVertexIndex = _this$state4.hoveredVertexIndex;\n      var selectedFeature = _this._getSelectedFeature();\n      var isSelected = index === draggingVertexIndex || selectedFeature && selectedFeature.renderType === _constants.RENDER_TYPE.POINT;\n      var isClosing = mode === _constants.MODES.DRAW_POLYGON && hoveredVertexIndex === 0 && index === -1;\n      if (renderState) {\n        return renderState;\n      }\n      if (isClosing) {\n        return _constants.RENDER_STATE.CLOSING;\n      }\n      if (isSelected) {\n        return _constants.RENDER_STATE.SELECTED;\n      }\n      switch (index) {\n        case hoveredVertexIndex:\n          return _constants.RENDER_STATE.HOVERED;\n        case UNCOMMITTED_ID:\n          return _constants.RENDER_STATE.UNCOMMITTED;\n        default:\n          return _constants.RENDER_STATE.INACTIVE;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_getFeatureRenderState\", function (id, renderState) {\n      var _this$state5 = _this.state,\n        selectedFeatureId = _this$state5.selectedFeatureId,\n        hoveredFeatureId = _this$state5.hoveredFeatureId;\n      if (renderState) {\n        return renderState;\n      }\n      switch (id) {\n        case selectedFeatureId:\n          return _constants.RENDER_STATE.SELECTED;\n        case hoveredFeatureId:\n          return _constants.RENDER_STATE.HOVERED;\n        case UNCOMMITTED_ID:\n          return _constants.RENDER_STATE.UNCOMMITTED;\n        default:\n          return _constants.RENDER_STATE.INACTIVE;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderVertex\", function (position, featureIndex, vertexIndex, operation, style, shape) {\n      /* eslint-enable max-params */\n      var p = _this._project(position);\n      if (!p) {\n        return null;\n      }\n      var clickRadius = _this.props.clickRadius;\n      var elemKey = \"\".concat(_constants.ELEMENT_TYPE.VERTEX, \".\").concat(featureIndex, \".\").concat(vertexIndex, \".\").concat(operation); // first <circle|rect> is to make path easily interacted with\n\n      switch (shape) {\n        case 'circle':\n          return _react.default.createElement(\"g\", {\n            key: elemKey,\n            transform: \"translate(\".concat(p[0], \", \").concat(p[1], \")\")\n          }, _react.default.createElement(\"circle\", {\n            \"data-type\": _constants.ELEMENT_TYPE.VERTEX,\n            \"data-feature-index\": featureIndex,\n            \"data-vertex-index\": vertexIndex,\n            \"data-operation\": operation,\n            key: \"\".concat(elemKey, \".hidden\"),\n            style: _objectSpread({}, style, _style.HIDDEN_CLICKABLE_STYLE, {\n              stroke: 'none'\n            }),\n            cx: 0,\n            cy: 0,\n            r: clickRadius\n          }), _react.default.createElement(\"circle\", {\n            \"data-type\": _constants.ELEMENT_TYPE.VERTEX,\n            \"data-feature-index\": featureIndex,\n            \"data-vertex-index\": vertexIndex,\n            \"data-operation\": operation,\n            key: elemKey,\n            style: style,\n            cx: 0,\n            cy: 0\n          }));\n        case 'rect':\n          return _react.default.createElement(\"g\", {\n            key: \"vertex.\".concat(vertexIndex),\n            transform: \"translate(\".concat(p[0], \", \").concat(p[1], \")\")\n          }, _react.default.createElement(\"rect\", {\n            \"data-type\": _constants.ELEMENT_TYPE.VERTEX,\n            \"data-feature-index\": featureIndex,\n            \"data-vertex-index\": vertexIndex,\n            \"data-operation\": operation,\n            key: \"\".concat(elemKey, \".hidden\"),\n            style: _objectSpread({}, style, _style.HIDDEN_CLICKABLE_STYLE, {\n              width: clickRadius,\n              height: clickRadius\n            })\n          }), _react.default.createElement(\"rect\", {\n            \"data-type\": _constants.ELEMENT_TYPE.VERTEX,\n            \"data-feature-index\": featureIndex,\n            \"data-vertex-index\": vertexIndex,\n            \"data-operation\": operation,\n            key: elemKey,\n            style: style\n          }));\n        default:\n          return null;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderSegment\", function (featureIndex, startVertexId, startPos, endPos) {\n      var style = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n      var clickRadius = _this.props.clickRadius;\n      var projected = _this._getProjectedData([startPos, endPos], _constants.RENDER_TYPE.LINE_STRING);\n      var radius = style.radius,\n        others = _objectWithoutProperties(style, [\"radius\"]);\n      var elemKey = \"\".concat(_constants.ELEMENT_TYPE.SEGMENT, \".\").concat(featureIndex, \".\").concat(startVertexId);\n      return _react.default.createElement(\"g\", {\n        key: elemKey\n      }, _react.default.createElement(\"path\", {\n        \"data-type\": _constants.ELEMENT_TYPE.SEGMENT,\n        \"data-feature-index\": featureIndex,\n        \"data-vertex-index\": startVertexId,\n        key: \"\".concat(elemKey, \".hidden\"),\n        style: _objectSpread({}, others, {\n          strokeWidth: clickRadius || radius,\n          opacity: 0\n        }),\n        d: projected\n      }), _react.default.createElement(\"path\", {\n        \"data-type\": _constants.ELEMENT_TYPE.SEGMENT,\n        \"data-feature-index\": featureIndex,\n        \"data-vertex-index\": startVertexId,\n        key: elemKey,\n        style: others,\n        d: projected\n      }));\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderCommittedStroke\", function (featureIndex, feature, style) {\n      var points = feature.points,\n        isClosed = feature.isClosed,\n        renderType = feature.renderType;\n      if (!points || points.length < 2 || renderType === _constants.RENDER_TYPE.RECTANGLE && !isClosed) {\n        return null;\n      }\n      var segments = [];\n      for (var i = 0; i < points.length - 1; i++) {\n        segments.push(_this._renderSegment(featureIndex, i, points[i], points[i + 1], style));\n      }\n      if (isClosed) {\n        var lastIndex = points.length - 1;\n        segments.push(_this._renderSegment(featureIndex, lastIndex, points[lastIndex], points[0], style));\n      }\n      return _react.default.createElement(\"g\", {\n        key: \"committed group\"\n      }, segments);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderUncommittedStrokes\", function (featureIndex, feature, style) {\n      var points = feature.points,\n        isClosed = feature.isClosed,\n        renderType = feature.renderType;\n      var mode = _this.props.mode;\n      var uncommittedLngLat = _this.state.uncommittedLngLat;\n      var isDrawing = _constants.DRAWING_MODES.find(function (m) {\n        return m === mode;\n      });\n      if (!points || isClosed || !isDrawing) {\n        return null;\n      }\n      var uncommittedSegments = [];\n      if (renderType === _constants.RENDER_TYPE.RECTANGLE) {\n        for (var i = 0; i < points.length - 1; i++) {\n          uncommittedSegments.push(_this._renderSegment(featureIndex, i, points[i], points[i + 1], style));\n        }\n        if (points.length === 4) {\n          uncommittedSegments.push(_this._renderSegment(featureIndex, 3, points[3], points[0], style));\n        }\n      }\n      if (!uncommittedLngLat) {\n        return uncommittedSegments.length ? uncommittedSegments : null;\n      }\n      /* eslint-disable no-inline-comments */\n\n      uncommittedSegments.push(_this._renderSegment(featureIndex, points.length - 1,\n      // id\n      points.slice(-1)[0],\n      // startPos\n      uncommittedLngLat,\n      // endPos\n      style));\n      /* eslint-enable no-inline-comments */\n\n      return uncommittedSegments.filter(Boolean);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderClosingStroke\", function (featureIndex, feature, style) {\n      var points = feature.points,\n        isClosed = feature.isClosed;\n      var mode = _this.props.mode;\n      var uncommittedLngLat = _this.state.uncommittedLngLat;\n      if (uncommittedLngLat && mode === _constants.MODES.DRAW_POLYGON && points.length > 2 && !isClosed) {\n        // from uncommitted position to the first point of the polygon\n        return _this._renderSegment(featureIndex, 'uncommitted-close', uncommittedLngLat, points[0], style);\n      }\n      return null;\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderFill\", function (index, feature, style) {\n      var mode = _this.props.mode;\n      var isDrawing = _constants.DRAWING_MODES.find(function (m) {\n        return m === mode;\n      });\n      var points = feature.points,\n        renderType = feature.renderType,\n        isClosed = feature.isClosed;\n      if (renderType !== _constants.RENDER_TYPE.POLYGON && renderType !== _constants.RENDER_TYPE.RECTANGLE) {\n        return null;\n      }\n      var uncommittedLngLat = _this.state.uncommittedLngLat;\n      var fillPoints = points;\n      if (uncommittedLngLat && isDrawing) {\n        fillPoints = _toConsumableArray(points).concat([uncommittedLngLat]);\n      }\n      var fillPath = _this._getProjectedData(fillPoints, renderType, isClosed);\n      return _react.default.createElement(\"path\", {\n        \"data-type\": _constants.ELEMENT_TYPE.FEATURE,\n        \"data-feature-index\": index,\n        key: \"\".concat(_constants.ELEMENT_TYPE.FEATURE, \".\").concat(index, \".fill\"),\n        style: _objectSpread({}, style, {\n          stroke: 'none'\n        }),\n        d: fillPath\n      });\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderCurrentPath\", function (feature, index) {\n      var points = feature.points,\n        renderType = feature.renderType;\n      if (!points || !points.length || renderType === _constants.RENDER_TYPE.POINT) {\n        return null;\n      }\n      var getFeatureStyle = _this.props.getFeatureStyle;\n      var geoJson = feature.toFeature();\n      var committedStyle = getFeatureStyle({\n        feature: geoJson,\n        state: _constants.RENDER_STATE.SELECTED\n      });\n      var uncommittedStyle = getFeatureStyle({\n        feature: geoJson,\n        state: _constants.RENDER_STATE.UNCOMMITTED\n      });\n      var closingStyle = getFeatureStyle({\n        feature: geoJson,\n        state: _constants.RENDER_STATE.CLOSING\n      });\n      var committedStroke = _this._renderCommittedStroke(index, feature, committedStyle);\n      var uncommittedStrokes = _this._renderUncommittedStrokes(index, feature, uncommittedStyle) || [];\n      var closingStroke = _this._renderClosingStroke(index, feature, closingStyle);\n      var fill = _this._renderFill(index, feature, uncommittedStyle);\n      return [fill, committedStroke].concat(_toConsumableArray(uncommittedStrokes), [closingStroke]).filter(Boolean);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderCommittedVertices\", function (featureIndex, feature, geoJson) {\n      var _this$props2 = _this.props,\n        mode = _this$props2.mode,\n        getEditHandleStyle = _this$props2.getEditHandleStyle,\n        getEditHandleShape = _this$props2.getEditHandleShape;\n      var isClosed = feature.isClosed,\n        points = feature.points;\n      var committedVertices = [];\n      for (var i = 0; i < points.length; i++) {\n        var p = points[i];\n        var operation = _constants.OPERATIONS.SET;\n        var style = getEditHandleStyle({\n          feature: geoJson,\n          index: i,\n          state: _this._getEditHandleState(i)\n        });\n        var shape = typeof getEditHandleShape === 'function' ? getEditHandleShape({\n          feature: geoJson,\n          index: i,\n          state: _this._getEditHandleState(i)\n        }) : getEditHandleShape;\n        if (isClosed) {\n          committedVertices.push(_this._renderVertex(p, featureIndex, i, operation, style, shape));\n        } else {\n          if (mode === _constants.MODES.DRAW_POLYGON && i === 0 && points.length > 2) {\n            operation = _constants.OPERATIONS.INTERSECT;\n          }\n          committedVertices.push(_this._renderVertex(p, featureIndex, i, operation, style, shape));\n        }\n      }\n      return committedVertices;\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderUncommittedVertex\", function (featureIndex, feature, geoJson) {\n      var _this$props3 = _this.props,\n        getEditHandleStyle = _this$props3.getEditHandleStyle,\n        getEditHandleShape = _this$props3.getEditHandleShape;\n      var _this$state6 = _this.state,\n        selectedFeatureId = _this$state6.selectedFeatureId,\n        uncommittedLngLat = _this$state6.uncommittedLngLat;\n      var id = feature.id;\n      var uncommittedVertex = null;\n      if (selectedFeatureId === id && uncommittedLngLat) {\n        var style = getEditHandleStyle({\n          feature: geoJson,\n          index: 'uncommitted',\n          state: _this._getEditHandleState(-1, _constants.RENDER_STATE.UNCOMMITTED)\n        });\n        var shape = typeof getEditHandleShape === 'function' ? getEditHandleShape({\n          feature: geoJson,\n          index: null,\n          state: _this._getEditHandleState(-1)\n        }) : getEditHandleShape;\n        uncommittedVertex = _this._renderVertex(uncommittedLngLat, featureIndex, 'uncommitted', _constants.OPERATIONS.INSERT, _objectSpread({}, style, {\n          pointerEvents: 'none'\n        }), shape);\n      }\n      return uncommittedVertex;\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderCurrentVertices\", function (feature, featureIndex) {\n      var points = feature.points;\n      if (!points || !points.length) {\n        return null;\n      }\n      var geoJson = feature.toFeature();\n      var committedVertices = _this._renderCommittedVertices(featureIndex, feature, geoJson);\n      var uncommittedVertex = _this._renderUncommittedVertex(featureIndex, feature, geoJson);\n      return _react.default.createElement(\"g\", {\n        key: \"edit-handles\"\n      }, committedVertices, uncommittedVertex);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderCurrent\", function () {\n      var features = _this.state.features;\n      var feature = _this._getSelectedFeature();\n      if (!features || !feature || !feature.points) {\n        return null;\n      }\n      var mode = _this.props.mode;\n      var index = features.findIndex(function (f) {\n        return f.id === feature.id;\n      });\n      return _react.default.createElement(\"g\", {\n        key: \"feature current\",\n        style: mode === _constants.MODES.READ_ONLY || mode === _constants.MODES.SELECT_FEATURE ? _constants.STATIC_STYLE : null\n      }, _this._renderCurrentPath(feature, index), _this._renderCurrentVertices(feature, index));\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderFeature\", function (feature, index) {\n      if (feature === _this._getSelectedFeature()) {\n        return null;\n      }\n      var clickRadius = _this.props.clickRadius;\n      var id = feature.id,\n        points = feature.points,\n        renderType = feature.renderType,\n        isClosed = feature.isClosed;\n      if (!points || !points.length) {\n        return null;\n      }\n      var projected = _this._getProjectedData(points, renderType, isClosed);\n      if (!projected) {\n        return null;\n      }\n      var geoJson = feature.toFeature();\n      var renderState = _this._getFeatureRenderState(id);\n      var _this$props4 = _this.props,\n        getFeatureStyle = _this$props4.getFeatureStyle,\n        getFeatureShape = _this$props4.getFeatureShape;\n      var style = getFeatureStyle({\n        feature: geoJson,\n        state: renderState\n      });\n      var shape = typeof getFeatureShape === 'function' ? getFeatureShape({\n        feature: geoJson,\n        state: renderState\n      }) : getFeatureShape;\n      var elemKey = \"\".concat(_constants.ELEMENT_TYPE.FEATURE, \".\").concat(index);\n      switch (renderType) {\n        case _constants.RENDER_TYPE.POINT:\n          if (shape === 'rect') {\n            return _react.default.createElement(\"g\", {\n              key: elemKey,\n              transform: \"translate(\".concat(projected[0][0], \", \").concat(projected[0][1], \")\")\n            }, _react.default.createElement(\"rect\", {\n              \"data-type\": _constants.ELEMENT_TYPE.FEATURE,\n              \"data-feature-index\": index,\n              key: \"\".concat(elemKey, \".hidden\"),\n              style: _objectSpread({}, style, _style.HIDDEN_CLICKABLE_STYLE, {\n                width: clickRadius,\n                height: clickRadius\n              })\n            }), _react.default.createElement(\"rect\", {\n              \"data-type\": _constants.ELEMENT_TYPE.FEATURE,\n              \"data-feature-index\": index,\n              key: elemKey,\n              style: style\n            }));\n          }\n          return _react.default.createElement(\"g\", {\n            key: elemKey,\n            transform: \"translate(\".concat(projected[0][0], \", \").concat(projected[0][1], \")\")\n          }, _react.default.createElement(\"circle\", {\n            \"data-type\": _constants.ELEMENT_TYPE.FEATURE,\n            \"data-feature-index\": index,\n            key: \"\".concat(elemKey, \".hidden\"),\n            style: _objectSpread({}, style, {\n              opacity: 0\n            }),\n            cx: 0,\n            cy: 0,\n            r: clickRadius\n          }), _react.default.createElement(\"circle\", {\n            \"data-type\": _constants.ELEMENT_TYPE.FEATURE,\n            \"data-feature-index\": index,\n            key: \"feature.\".concat(index),\n            style: style,\n            cx: 0,\n            cy: 0\n          }));\n        // first <path> is to make path easily interacted with\n\n        case _constants.RENDER_TYPE.LINE_STRING:\n          return _react.default.createElement(\"g\", {\n            key: elemKey\n          }, _react.default.createElement(\"path\", {\n            \"data-type\": _constants.ELEMENT_TYPE.FEATURE,\n            \"data-feature-index\": index,\n            key: \"\".concat(elemKey, \".hidden\"),\n            style: _objectSpread({}, style, {\n              strokeWidth: clickRadius,\n              opacity: 0\n            }),\n            d: projected\n          }), _react.default.createElement(\"path\", {\n            \"data-type\": _constants.ELEMENT_TYPE.FEATURE,\n            \"data-feature-index\": index,\n            key: elemKey,\n            style: style,\n            d: projected\n          }));\n        case 'Polygon':\n        case 'Rectangle':\n          return _react.default.createElement(\"path\", {\n            \"data-type\": _constants.ELEMENT_TYPE.FEATURE,\n            \"data-feature-index\": index,\n            key: elemKey,\n            style: style,\n            d: projected\n          });\n        default:\n          return null;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderFeatures\", function () {\n      var features = _this.state.features;\n      return features && features.map(_this._renderFeature);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderCanvas\", function () {\n      var _this$state7 = _this.state,\n        selectedFeatureId = _this$state7.selectedFeatureId,\n        features = _this$state7.features;\n      return _react.default.createElement(\"svg\", {\n        key: \"draw-canvas\",\n        width: \"100%\",\n        height: \"100%\"\n      }, features && features.length > 0 && _react.default.createElement(\"g\", {\n        key: \"feature-group\"\n      }, _this._renderFeatures()), selectedFeatureId && _this._renderCurrent());\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_renderEditor\", function () {\n      var viewport = _this._context && _this._context.viewport || {};\n      var style = _this.props.style;\n      var width = viewport.width,\n        height = viewport.height;\n      return _react.default.createElement(\"div\", {\n        id: \"editor\",\n        style: _objectSpread({\n          width: width,\n          height: height\n        }, style),\n        ref: function ref(_) {\n          _this._containerRef = _;\n        }\n      }, _this._renderCanvas());\n    });\n    _this.state = {\n      features: props.features ? props.features.map(function (f) {\n        return _feature2.default.fromFeature(f);\n      }).filter(Boolean) : null,\n      selectedFeatureId: -1,\n      hoveredFeatureId: null,\n      hoveredLngLat: null,\n      hoveredVertexIndex: -1,\n      // intermediate mouse position when drawing\n      uncommittedLngLat: null,\n      draggingVertexIndex: -1,\n      startDragPos: null,\n      isDragging: false,\n      didDrag: false\n    };\n    _this._containerRef = null;\n    _this._events = {};\n    _this._context = null;\n    return _this;\n  }\n  _createClass(Editor, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.mode && this.props.mode !== _constants.MODES.READ_ONLY) {\n        this._setupEvents();\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.props.mode !== nextProps.mode) {\n        if (!nextProps.mode || nextProps.mode === _constants.MODES.READ_ONLY) {\n          this._removeEvents();\n        }\n        if (!this.props.mode || this.props.mode === _constants.MODES.READ_ONLY) {\n          this._setupEvents();\n        }\n      }\n      if (this.props.mode !== nextProps.mode || this.props.features !== nextProps.features) {\n        this.setState({\n          features: nextProps.features && nextProps.features.map(function (f) {\n            return _feature2.default.fromFeature(f);\n          }).filter(Boolean)\n        });\n      }\n      if (this.props.mode !== nextProps.mode || this.props.selectedFeatureId !== nextProps.selectedFeatureId) {\n        this._clearCache();\n        this.setState({\n          selectedFeatureId: nextProps.selectedFeatureId\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._removeEvents();\n    }\n  }, {\n    key: \"_setupEvents\",\n    /* EVENTS */\n    value: function _setupEvents() {\n      var _this2 = this;\n      var ref = this._containerRef;\n      if (!ref || !this._context || !this._context.eventManager) {\n        return;\n      }\n      this._events = {\n        anyclick: function anyclick(evt) {\n          return _this2._onEvent(_this2._onClick, evt, true);\n        },\n        click: function click(evt) {\n          return evt.stopImmediatePropagation();\n        },\n        pointermove: function pointermove(evt) {\n          return _this2._onEvent(_this2._onMouseMove, evt, true);\n        },\n        pointerdown: function pointerdown(evt) {\n          return _this2._onEvent(_this2._onMouseDown, evt, true);\n        },\n        pointerup: function pointerup(evt) {\n          return _this2._onEvent(_this2._onMouseUp, evt, true);\n        },\n        panmove: function panmove(evt) {\n          return _this2._onEvent(_this2._onPan, evt, false);\n        },\n        panstart: function panstart(evt) {\n          return _this2._onEvent(_this2._onPan, evt, false);\n        },\n        panend: function panend(evt) {\n          return _this2._onEvent(_this2._onPan, evt, false);\n        }\n      };\n      this._context.eventManager.on(this._events, ref);\n    }\n  }, {\n    key: \"_removeEvents\",\n    value: function _removeEvents() {\n      if (!this._context || !this._context.eventManager || !this._events) {\n        return;\n      }\n      this._context.eventManager.off(this._events);\n      this._events = null;\n    }\n  }, {\n    key: \"_getProjectedData\",\n    value: function _getProjectedData(points, renderType) {\n      var _this3 = this;\n      var isClosed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (points.length === 0) {\n        return '';\n      }\n      var projected = points.map(function (p) {\n        return _this3._project(p);\n      });\n      switch (renderType) {\n        case _constants.RENDER_TYPE.POINT:\n          return projected;\n        case _constants.RENDER_TYPE.LINE_STRING:\n        case _constants.RENDER_TYPE.POLYGON:\n        case _constants.RENDER_TYPE.RECTANGLE:\n          var pathString = projected.map(function (p) {\n            return \"\".concat(p[0], \",\").concat(p[1]);\n          }).join('L');\n          return \"M \".concat(pathString, \" \").concat(isClosed ? 'z' : '');\n        default:\n          return null;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n      return _react.default.createElement(_reactMapGl._MapContext.Consumer, null, function (context) {\n        _this4._context = context;\n        var viewport = context && context.viewport;\n        if (!viewport || viewport.height <= 0 || viewport.width <= 0) {\n          return null;\n        }\n        return _this4._renderEditor();\n      });\n    }\n  }]);\n  return Editor;\n}(_react.PureComponent);\nexports.default = Editor;\n_defineProperty(Editor, \"defaultProps\", defaultProps);","map":{"version":3,"names":["_react","_interopRequireWildcard","require","_mjolnir","_reactMapGl","_uuid","_interopRequireDefault","_feature2","_style","_constants","_utils","defaultProps","mode","MODES","READ_ONLY","clickRadius","getEditHandleStyle","getFeatureStyle","getFeatureShape","getEditHandleShape","onSelect","UNCOMMITTED_ID","Editor","props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","_defineProperty","_assertThisInitialized","features","onUpdate","map","f","toFeature","feature","options","vertexIndex","lngLat","diagonal","p0","points","replacePoint","_update","state","renderType","RENDER_TYPE","RECTANGLE","_updateRectangle","dx","dy","pixels","_project","_unproject","filter","Boolean","x","y","isNew","arguments","length","undefined","_getSelectedFeature","addPoint","push","validPath","_this$props","DRAW_POINT","DRAW_PATH","selectedFeatureId","id","setState","_toConsumableArray","uncommittedLngLat","hoveredFeatureId","hoveredLngLat","hoveredVertexIndex","draggingVertexIndex","startDragPos","isDragging","didDrag","selectedFeature","closePath","point","type","MODE_TO_GEOJSON_TYPE","MODE_TO_RENDER_TYPE","default","_addPoint","DRAW_RECTANGLE","i","handler","evt","stopPropagation","_len","args","Array","_key","apply","concat","stopImmediatePropagation","Number","_this$_getEventPositi","_getEventPosition","attributes","parseElemDataAttributes","target","ELEMENT_TYPE","VERTEX","_matchesFeature","featureIndex","_this$state","_this$_getEventPositi2","isDrawing","DRAWING_MODES","indexOf","isEditing","EDIT_VERTEX","_updateFeature","_dx","_dy","LINE_STRING","POLYGON","SEGMENT","_getClosestPositionOnSegment","_this$state2","FEATURE","_feature","sourceEvent","operation","OPERATIONS","INTERSECT","SET","_closePath","_clearCache","_this$_getEventPositi3","insertPosition","insertPoint","_onClickVertex","_onClickSegment","SELECT_FEATURE","_onClickFeature","_this$_getEventPositi4","_addFeature","DRAW_POLYGON","isClosed","pt","_context","viewport","project","unproject","elemFeature","pointLngLat","startPos","endPos","findClosestPointOnLineSegment","_evt$offsetCenter","offsetCenter","_this$state3","find","index","renderState","_this$state4","isSelected","POINT","isClosing","RENDER_STATE","CLOSING","SELECTED","HOVERED","UNCOMMITTED","INACTIVE","_this$state5","position","style","shape","p","elemKey","createElement","key","transform","_objectSpread","HIDDEN_CLICKABLE_STYLE","stroke","cx","cy","r","width","height","startVertexId","projected","_getProjectedData","radius","others","_objectWithoutProperties","strokeWidth","opacity","d","segments","_renderSegment","lastIndex","m","uncommittedSegments","slice","fillPoints","fillPath","geoJson","committedStyle","uncommittedStyle","closingStyle","committedStroke","_renderCommittedStroke","uncommittedStrokes","_renderUncommittedStrokes","closingStroke","_renderClosingStroke","fill","_renderFill","_this$props2","committedVertices","_getEditHandleState","_renderVertex","_this$props3","_this$state6","uncommittedVertex","INSERT","pointerEvents","_renderCommittedVertices","_renderUncommittedVertex","findIndex","STATIC_STYLE","_renderCurrentPath","_renderCurrentVertices","_getFeatureRenderState","_this$props4","_renderFeature","_this$state7","_renderFeatures","_renderCurrent","ref","_","_containerRef","_renderCanvas","fromFeature","_events","_setupEvents","nextProps","_removeEvents","_this2","eventManager","anyclick","_onEvent","_onClick","click","pointermove","_onMouseMove","pointerdown","_onMouseDown","pointerup","_onMouseUp","panmove","_onPan","panstart","panend","on","off","_this3","pathString","join","_this4","_MapContext","Consumer","context","_renderEditor","PureComponent"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/react-map-gl-draw/src/editor.js"],"sourcesContent":["// @flow\nimport React, { PureComponent } from 'react';\nimport { MjolnirEvent } from 'mjolnir.js';\nimport type { Position, Feature as GeoJson } from '@nebula.gl/edit-modes';\nimport { _MapContext as MapContext } from 'react-map-gl';\nimport uuid from 'uuid';\n\nimport Feature from './feature';\nimport type { Id, ScreenCoordinates, Operation, RenderType } from './types';\nimport {\n  getEditHandleStyle as defaultGetEditHandleStyle,\n  getFeatureStyle as defaultGetFeatureStyle,\n  HIDDEN_CLICKABLE_STYLE\n} from './style';\n\nimport {\n  OPERATIONS,\n  MODES,\n  DRAWING_MODES,\n  MODE_TO_GEOJSON_TYPE,\n  MODE_TO_RENDER_TYPE,\n  RENDER_STATE,\n  RENDER_TYPE,\n  STATIC_STYLE,\n  ELEMENT_TYPE\n} from './constants';\nimport { parseElemDataAttributes, findClosestPointOnLineSegment } from './utils';\n\ntype EditorProps = {\n  features: ?Array<GeoJson>,\n  selectedFeatureId: ?Id,\n  mode: string,\n  clickRadius: ?number,\n  style: ?Object,\n\n  onSelect: Function,\n  onUpdate: Function,\n\n  getEditHandleStyle: Function,\n  getFeatureStyle: Function,\n  getFeatureShape: Function | string,\n  getEditHandleShape: Function | string\n};\n\ntype EditorState = {\n  features: ?Array<Feature>,\n  selectedFeatureId: ?Id,\n  uncommittedLngLat: ?Position,\n\n  hoveredFeatureId: ?Id,\n  hoveredLngLat: ?Position,\n  hoveredVertexIndex: ?Id,\n\n  draggingVertexIndex: ?number,\n  startDragPos: ?ScreenCoordinates,\n  isDragging: ?boolean,\n  didDrag: ?boolean\n};\n\nconst defaultProps = {\n  mode: MODES.READ_ONLY,\n  clickRadius: 0,\n  getEditHandleStyle: defaultGetEditHandleStyle,\n  getFeatureStyle: defaultGetFeatureStyle,\n  getFeatureShape: 'circle',\n  getEditHandleShape: 'circle',\n  onSelect: () => {}\n};\n\nconst UNCOMMITTED_ID = 'uncommitted';\n\nexport default class Editor extends PureComponent<EditorProps, EditorState> {\n  static defaultProps = defaultProps;\n\n  constructor(props: EditorProps) {\n    super(props);\n    this.state = {\n      features: props.features\n        ? props.features.map(f => Feature.fromFeature(f)).filter(Boolean)\n        : null,\n\n      selectedFeatureId: -1,\n\n      hoveredFeatureId: null,\n      hoveredLngLat: null,\n      hoveredVertexIndex: -1,\n\n      // intermediate mouse position when drawing\n      uncommittedLngLat: null,\n\n      draggingVertexIndex: -1,\n      startDragPos: null,\n      isDragging: false,\n      didDrag: false\n    };\n\n    this._containerRef = null;\n    this._events = {};\n    this._context = null;\n  }\n\n  componentDidMount() {\n    if (this.props.mode && this.props.mode !== MODES.READ_ONLY) {\n      this._setupEvents();\n    }\n  }\n\n  componentWillReceiveProps(nextProps: EditorProps) {\n    if (this.props.mode !== nextProps.mode) {\n      if (!nextProps.mode || nextProps.mode === MODES.READ_ONLY) {\n        this._removeEvents();\n      }\n      if (!this.props.mode || this.props.mode === MODES.READ_ONLY) {\n        this._setupEvents();\n      }\n    }\n\n    if (this.props.mode !== nextProps.mode || this.props.features !== nextProps.features) {\n      this.setState({\n        features:\n          nextProps.features && nextProps.features.map(f => Feature.fromFeature(f)).filter(Boolean)\n      });\n    }\n\n    if (\n      this.props.mode !== nextProps.mode ||\n      this.props.selectedFeatureId !== nextProps.selectedFeatureId\n    ) {\n      this._clearCache();\n      this.setState({\n        selectedFeatureId: nextProps.selectedFeatureId\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this._removeEvents();\n  }\n\n  _containerRef: ?HTMLDivElement;\n  _events: any;\n  _context: ?MapContext;\n\n  /* FEATURE OPERATIONS */\n  _update = (features: ?Array<Feature>) => {\n    if (features) {\n      this.props.onUpdate(features.map(f => f.toFeature()));\n    }\n  };\n\n  _updateRectangle = (feature: Feature, options: any) => {\n    const { vertexIndex, lngLat } = options;\n    /*\n    *   p0.x, p0.y   ----------  diagonal.x, p0.y\n    *       |                             |\n    *       |                             |\n    *   p0.x, diagonal.y ----- diagonal.x, diagonal.y\n    */\n    const diagonal = vertexIndex;\n    const p0 = feature.points[(diagonal + 2) % 4];\n\n    feature.replacePoint(diagonal, [lngLat[0], lngLat[1]]);\n    feature.replacePoint((diagonal + 1) % 4, [lngLat[0], p0[1]]);\n    feature.replacePoint((diagonal + 3) % 4, [p0[0], lngLat[1]]);\n\n    this._update(this.state.features);\n  };\n\n  _updateFeature = (feature: any, mode: string, options: any) => {\n    switch (mode) {\n      case 'vertex':\n        if (feature.renderType === RENDER_TYPE.RECTANGLE) {\n          this._updateRectangle(feature, options);\n        } else {\n          feature.replacePoint(options.vertexIndex, [options.lngLat[0], options.lngLat[1]]);\n          this._update(this.state.features);\n        }\n        break;\n\n      case 'feature':\n        const { dx, dy } = options;\n        feature.points = feature.points\n          .map(lngLat => {\n            const pixels = this._project(lngLat);\n            if (pixels) {\n              pixels[0] += dx;\n              pixels[1] += dy;\n              return this._unproject(pixels);\n            }\n            return null;\n          })\n          .filter(Boolean);\n\n        this._update(this.state.features);\n        break;\n\n      case 'Rectangle':\n        this._updateRectangle(feature, options);\n        break;\n\n      default:\n    }\n  };\n\n  _addPoint = (x: number, y: number, feature: ?Feature, isNew: boolean = false) => {\n    feature = feature || this._getSelectedFeature();\n\n    if (!feature) {\n      return;\n    }\n\n    const lngLat = this._unproject([x, y]);\n    if (!lngLat) {\n      return;\n    }\n\n    feature.addPoint([lngLat[0], lngLat[1]]);\n\n    const features = this.state.features || [];\n    if (isNew) {\n      features.push(feature);\n    }\n\n    const validPath = feature.points && feature.points.length >= 2;\n    const { mode, onSelect } = this.props;\n\n    if (mode === MODES.DRAW_POINT || (mode === MODES.DRAW_PATH && validPath)) {\n      this._update(features);\n      onSelect({ selectedFeatureId: feature && feature.id });\n    } else {\n      this.setState({\n        features: [...features],\n        selectedFeatureId: feature && feature.id\n      });\n    }\n  };\n\n  _clearCache = () => {\n    this.setState({\n      selectedFeatureId: null,\n      uncommittedLngLat: null,\n\n      hoveredFeatureId: null,\n      hoveredLngLat: null,\n      hoveredVertexIndex: -1,\n\n      draggingVertexIndex: -1,\n      startDragPos: null,\n      isDragging: false,\n      didDrag: false\n    });\n  };\n\n  _closePath = () => {\n    const selectedFeature = this._getSelectedFeature();\n    if (selectedFeature) {\n      selectedFeature.closePath();\n      this._update(this.state.features);\n    }\n  };\n\n  _addFeature = (mode: string, point: ScreenCoordinates) => {\n    const type = MODE_TO_GEOJSON_TYPE[mode];\n    const renderType = MODE_TO_RENDER_TYPE[mode];\n\n    const feature = new Feature({\n      id: uuid(),\n      type,\n      renderType\n    });\n\n    this._addPoint(point.x, point.y, feature, true);\n\n    if (mode === MODES.DRAW_RECTANGLE) {\n      for (let i = 0; i < 3; i++) {\n        this._addPoint(point.x, point.y, feature, false);\n      }\n    }\n  };\n\n  /* EVENTS */\n  _setupEvents() {\n    const ref = this._containerRef;\n\n    if (!ref || !this._context || !this._context.eventManager) {\n      return;\n    }\n\n    this._events = {\n      anyclick: evt => this._onEvent(this._onClick, evt, true),\n      click: evt => evt.stopImmediatePropagation(),\n      pointermove: evt => this._onEvent(this._onMouseMove, evt, true),\n      pointerdown: evt => this._onEvent(this._onMouseDown, evt, true),\n      pointerup: evt => this._onEvent(this._onMouseUp, evt, true),\n      panmove: evt => this._onEvent(this._onPan, evt, false),\n      panstart: evt => this._onEvent(this._onPan, evt, false),\n      panend: evt => this._onEvent(this._onPan, evt, false)\n    };\n\n    this._context.eventManager.on(this._events, ref);\n  }\n\n  _removeEvents() {\n    if (!this._context || !this._context.eventManager || !this._events) {\n      return;\n    }\n    this._context.eventManager.off(this._events);\n    this._events = null;\n  }\n\n  _onEvent = (handler: Function, evt: MjolnirEvent, stopPropagation: boolean, ...args: any) => {\n    const { mode } = this.props;\n    if (mode === MODES.READ_ONLY) {\n      return;\n    }\n\n    handler(evt, ...args);\n\n    if (stopPropagation) {\n      evt.stopImmediatePropagation();\n    }\n  };\n\n  _onMouseUp = (evt: MjolnirEvent) => {\n    this.setState({\n      isDragging: false,\n      didDrag: false\n    });\n    const { draggingVertexIndex } = this.state;\n\n    if (Number(draggingVertexIndex) >= 0) {\n      this.setState({\n        draggingVertexIndex: -1\n      });\n    }\n  };\n\n  _onMouseDown = (evt: MjolnirEvent) => {\n    const { x, y } = this._getEventPosition(evt);\n    const attributes = parseElemDataAttributes(evt.target);\n\n    // click segment\n    if (attributes && attributes.type === ELEMENT_TYPE.VERTEX) {\n      const { vertexIndex } = attributes;\n      this.setState({\n        draggingVertexIndex: vertexIndex,\n        startDragPos: { x, y },\n        isDragging: true\n      });\n\n      // click selected feature\n    } else if (this._matchesFeature(attributes, this._getSelectedFeature())) {\n      this.setState({\n        startDragPos: { x, y },\n        isDragging: true\n      });\n    }\n  };\n\n  /* eslint-disable max-depth */\n  _onMouseMove = (evt: MjolnirEvent) => {\n    const attributes = parseElemDataAttributes(evt.target) || {};\n    const { vertexIndex, featureIndex, type } = attributes;\n\n    const { startDragPos, isDragging, didDrag } = this.state;\n    const { mode } = this.props;\n    const { x, y } = this._getEventPosition(evt);\n    const lngLat = this._unproject([x, y]);\n\n    if (isDragging && !didDrag && startDragPos) {\n      const dx = x - startDragPos.x;\n      const dy = y - startDragPos.y;\n      if (dx * dx + dy * dy > 5) {\n        this.setState({ didDrag: true });\n      }\n    }\n\n    const selectedFeature = this._getSelectedFeature();\n    const isDrawing = DRAWING_MODES.indexOf(mode) !== -1;\n    const isEditing = mode === MODES.EDIT_VERTEX;\n\n    if (selectedFeature) {\n      // dragging\n      if (didDrag && startDragPos) {\n        const draggingVertexIndex = Number(this.state.draggingVertexIndex);\n\n        if (draggingVertexIndex >= 0) {\n          // dragging vertex\n          this._updateFeature(selectedFeature, 'vertex', {\n            vertexIndex: draggingVertexIndex,\n            lngLat\n          });\n        } else {\n          // dragging feature\n          const dx = x - startDragPos.x;\n          const dy = y - startDragPos.y;\n          this.setState({ startDragPos: { x, y } });\n\n          this._updateFeature(selectedFeature, 'feature', { dx, dy });\n        }\n      } else if (mode === MODES.DRAW_RECTANGLE) {\n        // drawing rectangle\n        this._updateFeature(selectedFeature, 'Rectangle', { vertexIndex: 2, lngLat });\n      } else if (isDrawing) {\n        // drawing other shapes\n        this.setState({ uncommittedLngLat: lngLat });\n      } else if (isEditing) {\n        if (\n          (selectedFeature.renderType === RENDER_TYPE.LINE_STRING ||\n            selectedFeature.renderType === RENDER_TYPE.POLYGON) &&\n          type === ELEMENT_TYPE.SEGMENT\n        ) {\n          // segmentId is start vertexIndex\n          let uncommittedLngLat = null;\n          if (lngLat && typeof vertexIndex === 'number') {\n            uncommittedLngLat = this._getClosestPositionOnSegment(\n              vertexIndex,\n              lngLat,\n              selectedFeature\n            );\n          }\n\n          this.setState({\n            uncommittedLngLat\n          });\n        } else {\n          this.setState({\n            uncommittedLngLat: null\n          });\n        }\n      }\n    }\n\n    const { features, selectedFeatureId } = this.state;\n    if (selectedFeatureId && type === ELEMENT_TYPE.VERTEX && typeof featureIndex === 'number') {\n      const feature = features && features[featureIndex];\n      if (selectedFeatureId === (feature && feature.id)) {\n        this.setState({\n          hoveredVertexIndex: vertexIndex\n        });\n      }\n    } else if (type !== ELEMENT_TYPE.VERTEX) {\n      this.setState({\n        hoveredVertexIndex: null\n      });\n    }\n\n    if (type === ELEMENT_TYPE.FEATURE && typeof featureIndex === 'number') {\n      const feature = features && features[featureIndex];\n      this.setState({\n        hoveredFeatureId: feature && feature.id\n      });\n    } else {\n      this.setState({\n        hoveredFeatureId: null\n      });\n    }\n  };\n  /* eslint-enable max-depth */\n\n  _onClickFeature = (evt: MjolnirEvent, attributes: any) => {\n    const { featureIndex } = attributes;\n    const { features } = this.state;\n    const selectedFeature = features && typeof featureIndex === 'number' && features[featureIndex];\n\n    if (selectedFeature) {\n      this.props.onSelect({\n        selectedFeatureId: selectedFeature.id,\n        sourceEvent: evt\n      });\n    }\n  };\n\n  _onClickVertex = (evt: MjolnirEvent, attributes: any) => {\n    const { mode } = this.props;\n    const operation = attributes.operation;\n    if (\n      operation === OPERATIONS.INTERSECT ||\n      (operation === OPERATIONS.SET && mode === MODES.DRAW_RECTANGLE)\n    ) {\n      this._closePath();\n      this._clearCache();\n    }\n  };\n\n  _onClickSegment = (evt: MjolnirEvent, attributes: any) => {\n    const feature = this._getSelectedFeature();\n\n    if (\n      feature &&\n      (feature.renderType === RENDER_TYPE.POLYGON ||\n        feature.renderType === RENDER_TYPE.LINE_STRING) &&\n      attributes\n    ) {\n      const { vertexIndex } = attributes;\n\n      const { uncommittedLngLat } = this.state;\n\n      let lngLat = uncommittedLngLat;\n      if (!lngLat && typeof vertexIndex === 'number') {\n        const { x, y } = this._getEventPosition(evt);\n        lngLat = this._unproject([x, y]);\n        lngLat = this._getClosestPositionOnSegment(vertexIndex, lngLat, feature);\n      }\n\n      if (lngLat) {\n        const insertPosition = (vertexIndex + 1) % feature.points.length;\n        feature.insertPoint(lngLat, insertPosition);\n        this._update(this.state.features);\n      }\n\n      this.setState({\n        uncommittedLngLat: null,\n        hoveredLngLat: null\n      });\n    }\n  };\n\n  _onClick = (evt: MjolnirEvent) => {\n    const { mode } = this.props;\n    const attributes = parseElemDataAttributes(evt.target);\n\n    if (attributes && attributes.type === ELEMENT_TYPE.VERTEX) {\n      this._onClickVertex(evt, attributes);\n      return;\n    }\n\n    if (mode === MODES.EDIT_VERTEX && attributes && attributes.type === ELEMENT_TYPE.SEGMENT) {\n      this._onClickSegment(evt, attributes);\n      return;\n    }\n\n    if (\n      (mode === MODES.SELECT_FEATURE || mode === MODES.EDIT_VERTEX) &&\n      attributes &&\n      attributes.type === ELEMENT_TYPE.FEATURE\n    ) {\n      this._onClickFeature(evt, attributes);\n      return;\n    }\n\n    const selectedFeature = this._getSelectedFeature();\n    const { x, y } = this._getEventPosition(evt);\n\n    switch (mode) {\n      case MODES.EDIT_VERTEX:\n        if (selectedFeature) {\n          this.props.onSelect({\n            selectedFeatureId: null,\n            sourceEvent: evt\n          });\n        }\n        break;\n\n      case MODES.DRAW_POINT:\n        this._addFeature(mode, { x, y });\n        break;\n\n      case MODES.DRAW_PATH:\n      case MODES.DRAW_POLYGON:\n        if (selectedFeature && selectedFeature.isClosed) {\n          // clicked outside\n          this._clearCache();\n        } else if (selectedFeature) {\n          this._addPoint(x, y, selectedFeature);\n        } else {\n          this._addFeature(mode, { x, y });\n        }\n        break;\n\n      case MODES.DRAW_RECTANGLE:\n        if (selectedFeature && selectedFeature.isClosed) {\n          // clicked outside\n          this._clearCache();\n          this.props.onSelect({\n            selectedFeatureId: null,\n            sourceEvent: evt\n          });\n        } else {\n          this._addFeature(mode, { x, y });\n        }\n\n        break;\n\n      default:\n    }\n  };\n\n  // don't forward pan events to the underlying map when:\n  // - the pan target is a vertex/line/the currently selected feature\n  // - the user is dragging something around\n  // - there is currently an uncommitted position\n  // (i.e. the user is creating a feature/vertex/line)\n  _onPan = (evt: MjolnirEvent) => {\n    const attributes = parseElemDataAttributes(evt.target);\n    const type = attributes && attributes.type;\n    if (\n      type === ELEMENT_TYPE.VERTEX ||\n      type === ELEMENT_TYPE.SEGMENT ||\n      this.state.isDragging ||\n      this.state.uncommittedLngLat !== null\n    ) {\n      evt.stopImmediatePropagation();\n    }\n  };\n\n  /* HELPERS */\n  // lngLat to pixels\n  _project = (pt: Position) => {\n    return this._context && this._context.viewport && this._context.viewport.project(pt);\n  };\n\n  // pixels to lngLat\n  _unproject = (pt: Position) => {\n    return this._context && this._context.viewport && this._context.viewport.unproject(pt);\n  };\n\n  _matchesFeature = (attributes: any, feature: ?Feature) => {\n    if (!attributes || attributes.type !== ELEMENT_TYPE.FEATURE || !feature) {\n      return false;\n    }\n\n    const { featureIndex } = attributes;\n    const { features } = this.props;\n    const elemFeature = features && features[featureIndex];\n    return elemFeature && feature.id === elemFeature.id;\n  };\n\n  _getClosestPositionOnSegment = (vertexIndex: number, pointLngLat: Position, feature: Feature) => {\n    const points = feature && feature.points;\n    if (!points || !points.length) {\n      return null;\n    }\n\n    // segmentId is start vertexIndex\n    const startPos = points[vertexIndex];\n    const endPos = points[(vertexIndex + 1) % points.length];\n    return findClosestPointOnLineSegment(startPos, endPos, pointLngLat);\n  };\n\n  _getEventPosition = (evt: MjolnirEvent): { x: number, y: number } => {\n    const {\n      offsetCenter: { x, y }\n    } = evt;\n    return { x: Number(x), y: Number(y) };\n  };\n\n  _getProjectedData(points: any, renderType: ?RenderType | string, isClosed: ?boolean = false) {\n    if (points.length === 0) {\n      return '';\n    }\n\n    const projected = points.map(p => this._project(p));\n    switch (renderType) {\n      case RENDER_TYPE.POINT:\n        return projected;\n      case RENDER_TYPE.LINE_STRING:\n      case RENDER_TYPE.POLYGON:\n      case RENDER_TYPE.RECTANGLE:\n        const pathString = projected\n          .map(p => {\n            return `${p[0]},${p[1]}`;\n          })\n          .join('L');\n        return `M ${pathString} ${isClosed ? 'z' : ''}`;\n      default:\n        return null;\n    }\n  }\n\n  _getSelectedFeature = (): ?Feature => {\n    const { features, selectedFeatureId } = this.state;\n    return features && features.find(f => f.id === selectedFeatureId);\n  };\n\n  _getEditHandleState = (index: number, renderState: ?string) => {\n    const { mode } = this.props;\n    const { draggingVertexIndex, hoveredVertexIndex } = this.state;\n    const selectedFeature = this._getSelectedFeature();\n    const isSelected =\n      index === draggingVertexIndex ||\n      (selectedFeature && selectedFeature.renderType === RENDER_TYPE.POINT);\n    const isClosing = mode === MODES.DRAW_POLYGON && hoveredVertexIndex === 0 && index === -1;\n\n    if (renderState) {\n      return renderState;\n    }\n\n    if (isClosing) {\n      return RENDER_STATE.CLOSING;\n    }\n\n    if (isSelected) {\n      return RENDER_STATE.SELECTED;\n    }\n\n    switch (index) {\n      case hoveredVertexIndex:\n        return RENDER_STATE.HOVERED;\n      case UNCOMMITTED_ID:\n        return RENDER_STATE.UNCOMMITTED;\n      default:\n        return RENDER_STATE.INACTIVE;\n    }\n  };\n\n  _getFeatureRenderState = (id: Id, renderState: ?string) => {\n    const { selectedFeatureId, hoveredFeatureId } = this.state;\n    if (renderState) {\n      return renderState;\n    }\n    switch (id) {\n      case selectedFeatureId:\n        return RENDER_STATE.SELECTED;\n      case hoveredFeatureId:\n        return RENDER_STATE.HOVERED;\n      case UNCOMMITTED_ID:\n        return RENDER_STATE.UNCOMMITTED;\n      default:\n        return RENDER_STATE.INACTIVE;\n    }\n  };\n\n  /* RENDER */\n  /* eslint-disable max-params */\n  _renderVertex = (\n    position: Position,\n    featureIndex: number,\n    vertexIndex: Id,\n    operation: Operation,\n    style: any,\n    shape: string\n  ) => {\n    /* eslint-enable max-params */\n    const p = this._project(position);\n    if (!p) {\n      return null;\n    }\n\n    const { clickRadius } = this.props;\n\n    const elemKey = `${ELEMENT_TYPE.VERTEX}.${featureIndex}.${vertexIndex}.${operation}`;\n    // first <circle|rect> is to make path easily interacted with\n    switch (shape) {\n      case 'circle':\n        return (\n          <g key={elemKey} transform={`translate(${p[0]}, ${p[1]})`}>\n            <circle\n              data-type={ELEMENT_TYPE.VERTEX}\n              data-feature-index={featureIndex}\n              data-vertex-index={vertexIndex}\n              data-operation={operation}\n              key={`${elemKey}.hidden`}\n              style={{ ...style, ...HIDDEN_CLICKABLE_STYLE, stroke: 'none' }}\n              cx={0}\n              cy={0}\n              r={clickRadius}\n            />\n            <circle\n              data-type={ELEMENT_TYPE.VERTEX}\n              data-feature-index={featureIndex}\n              data-vertex-index={vertexIndex}\n              data-operation={operation}\n              key={elemKey}\n              style={style}\n              cx={0}\n              cy={0}\n            />\n          </g>\n        );\n      case 'rect':\n        return (\n          <g key={`vertex.${vertexIndex}`} transform={`translate(${p[0]}, ${p[1]})`}>\n            <rect\n              data-type={ELEMENT_TYPE.VERTEX}\n              data-feature-index={featureIndex}\n              data-vertex-index={vertexIndex}\n              data-operation={operation}\n              key={`${elemKey}.hidden`}\n              style={{\n                ...style,\n                ...HIDDEN_CLICKABLE_STYLE,\n                width: clickRadius,\n                height: clickRadius\n              }}\n            />\n            <rect\n              data-type={ELEMENT_TYPE.VERTEX}\n              data-feature-index={featureIndex}\n              data-vertex-index={vertexIndex}\n              data-operation={operation}\n              key={elemKey}\n              style={style}\n            />\n          </g>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  _renderSegment = (\n    featureIndex: number,\n    startVertexId: Id,\n    startPos: Position,\n    endPos: Position,\n    style: any = {}\n  ) => {\n    const { clickRadius } = this.props;\n    const projected = this._getProjectedData([startPos, endPos], RENDER_TYPE.LINE_STRING);\n    const { radius, ...others } = style;\n\n    const elemKey = `${ELEMENT_TYPE.SEGMENT}.${featureIndex}.${startVertexId}`;\n    return (\n      <g key={elemKey}>\n        <path\n          data-type={ELEMENT_TYPE.SEGMENT}\n          data-feature-index={featureIndex}\n          data-vertex-index={startVertexId}\n          key={`${elemKey}.hidden`}\n          style={{ ...others, strokeWidth: clickRadius || radius, opacity: 0 }}\n          d={projected}\n        />\n        <path\n          data-type={ELEMENT_TYPE.SEGMENT}\n          data-feature-index={featureIndex}\n          data-vertex-index={startVertexId}\n          key={elemKey}\n          style={others}\n          d={projected}\n        />\n      </g>\n    );\n  };\n\n  _renderCommittedStroke = (featureIndex: number, feature: Feature, style: any) => {\n    const { points, isClosed, renderType } = feature;\n    if (!points || points.length < 2 || (renderType === RENDER_TYPE.RECTANGLE && !isClosed)) {\n      return null;\n    }\n\n    const segments = [];\n    for (let i = 0; i < points.length - 1; i++) {\n      segments.push(this._renderSegment(featureIndex, i, points[i], points[i + 1], style));\n    }\n\n    if (isClosed) {\n      const lastIndex = points.length - 1;\n      segments.push(\n        this._renderSegment(featureIndex, lastIndex, points[lastIndex], points[0], style)\n      );\n    }\n\n    return <g key=\"committed group\">{segments}</g>;\n  };\n\n  _renderUncommittedStrokes = (featureIndex: number, feature: Feature, style: any) => {\n    const { points, isClosed, renderType } = feature;\n    const { mode } = this.props;\n    const { uncommittedLngLat } = this.state;\n    const isDrawing = DRAWING_MODES.find(m => m === mode);\n\n    if (!points || isClosed || !isDrawing) {\n      return null;\n    }\n\n    const uncommittedSegments = [];\n\n    if (renderType === RENDER_TYPE.RECTANGLE) {\n      for (let i = 0; i < points.length - 1; i++) {\n        uncommittedSegments.push(\n          this._renderSegment(featureIndex, i, points[i], points[i + 1], style)\n        );\n      }\n      if (points.length === 4) {\n        uncommittedSegments.push(this._renderSegment(featureIndex, 3, points[3], points[0], style));\n      }\n    }\n\n    if (!uncommittedLngLat) {\n      return uncommittedSegments.length ? uncommittedSegments : null;\n    }\n\n    /* eslint-disable no-inline-comments */\n    uncommittedSegments.push(\n      this._renderSegment(\n        featureIndex,\n        points.length - 1, // id\n        points.slice(-1)[0], // startPos\n        uncommittedLngLat, // endPos\n        style\n      )\n    );\n    /* eslint-enable no-inline-comments */\n\n    return uncommittedSegments.filter(Boolean);\n  };\n\n  _renderClosingStroke = (featureIndex: number, feature: Feature, style: any) => {\n    const { points, isClosed } = feature;\n    const { mode } = this.props;\n    const { uncommittedLngLat } = this.state;\n    if (uncommittedLngLat && mode === MODES.DRAW_POLYGON && points.length > 2 && !isClosed) {\n      // from uncommitted position to the first point of the polygon\n      return this._renderSegment(\n        featureIndex,\n        'uncommitted-close',\n        uncommittedLngLat,\n        points[0],\n        style\n      );\n    }\n    return null;\n  };\n\n  _renderFill = (index: number, feature: Feature, style: any) => {\n    const { mode } = this.props;\n    const isDrawing = DRAWING_MODES.find(m => m === mode);\n    const { points, renderType, isClosed } = feature;\n    if (renderType !== RENDER_TYPE.POLYGON && renderType !== RENDER_TYPE.RECTANGLE) {\n      return null;\n    }\n\n    const { uncommittedLngLat } = this.state;\n\n    let fillPoints = points;\n    if (uncommittedLngLat && isDrawing) {\n      fillPoints = [...points, uncommittedLngLat];\n    }\n\n    const fillPath = this._getProjectedData(fillPoints, renderType, isClosed);\n    return (\n      <path\n        data-type={ELEMENT_TYPE.FEATURE}\n        data-feature-index={index}\n        key={`${ELEMENT_TYPE.FEATURE}.${index}.fill`}\n        style={{ ...style, stroke: 'none' }}\n        d={fillPath}\n      />\n    );\n  };\n\n  _renderCurrentPath = (feature: Feature, index: number) => {\n    const { points, renderType } = feature;\n    if (!points || !points.length || renderType === RENDER_TYPE.POINT) {\n      return null;\n    }\n\n    const { getFeatureStyle } = this.props;\n    const geoJson = feature.toFeature();\n    const committedStyle = getFeatureStyle({ feature: geoJson, state: RENDER_STATE.SELECTED });\n    const uncommittedStyle = getFeatureStyle({ feature: geoJson, state: RENDER_STATE.UNCOMMITTED });\n    const closingStyle = getFeatureStyle({ feature: geoJson, state: RENDER_STATE.CLOSING });\n\n    const committedStroke = this._renderCommittedStroke(index, feature, committedStyle);\n    const uncommittedStrokes =\n      this._renderUncommittedStrokes(index, feature, uncommittedStyle) || [];\n    const closingStroke = this._renderClosingStroke(index, feature, closingStyle);\n    const fill = this._renderFill(index, feature, uncommittedStyle);\n\n    return [fill, committedStroke, ...uncommittedStrokes, closingStroke].filter(Boolean);\n  };\n\n  _renderCommittedVertices = (featureIndex: number, feature: Feature, geoJson: GeoJson) => {\n    const { mode, getEditHandleStyle, getEditHandleShape } = this.props;\n    const { isClosed, points } = feature;\n\n    const committedVertices = [];\n    for (let i = 0; i < points.length; i++) {\n      const p = points[i];\n      let operation = OPERATIONS.SET;\n\n      const style = getEditHandleStyle({\n        feature: geoJson,\n        index: i,\n        state: this._getEditHandleState(i)\n      });\n      const shape =\n        typeof getEditHandleShape === 'function'\n          ? getEditHandleShape({\n              feature: geoJson,\n              index: i,\n              state: this._getEditHandleState(i)\n            })\n          : getEditHandleShape;\n\n      if (isClosed) {\n        committedVertices.push(this._renderVertex(p, featureIndex, i, operation, style, shape));\n      } else {\n        if (mode === MODES.DRAW_POLYGON && i === 0 && points.length > 2) {\n          operation = OPERATIONS.INTERSECT;\n        }\n\n        committedVertices.push(this._renderVertex(p, featureIndex, i, operation, style, shape));\n      }\n    }\n\n    return committedVertices;\n  };\n\n  _renderUncommittedVertex = (featureIndex: number, feature: Feature, geoJson: GeoJson) => {\n    const { getEditHandleStyle, getEditHandleShape } = this.props;\n    const { selectedFeatureId, uncommittedLngLat } = this.state;\n    const { id } = feature;\n\n    let uncommittedVertex = null;\n    if (selectedFeatureId === id && uncommittedLngLat) {\n      const style = getEditHandleStyle({\n        feature: geoJson,\n        index: 'uncommitted',\n        state: this._getEditHandleState(-1, RENDER_STATE.UNCOMMITTED)\n      });\n\n      const shape =\n        typeof getEditHandleShape === 'function'\n          ? getEditHandleShape({\n              feature: geoJson,\n              index: null,\n              state: this._getEditHandleState(-1)\n            })\n          : getEditHandleShape;\n\n      uncommittedVertex = this._renderVertex(\n        uncommittedLngLat,\n        featureIndex,\n        'uncommitted',\n        OPERATIONS.INSERT,\n        { ...style, pointerEvents: 'none' },\n        shape\n      );\n    }\n\n    return uncommittedVertex;\n  };\n\n  _renderCurrentVertices = (feature: Feature, featureIndex: number) => {\n    const { points } = feature;\n\n    if (!points || !points.length) {\n      return null;\n    }\n\n    const geoJson = feature.toFeature();\n    const committedVertices = this._renderCommittedVertices(featureIndex, feature, geoJson);\n    const uncommittedVertex = this._renderUncommittedVertex(featureIndex, feature, geoJson);\n\n    return (\n      <g key=\"edit-handles\">\n        {committedVertices}\n        {uncommittedVertex}\n      </g>\n    );\n  };\n\n  _renderCurrent = () => {\n    const { features } = this.state;\n    const feature = this._getSelectedFeature();\n\n    if (!features || !feature || !feature.points) {\n      return null;\n    }\n\n    const { mode } = this.props;\n    const index = features.findIndex(f => f.id === feature.id);\n\n    return (\n      <g\n        key=\"feature current\"\n        style={mode === MODES.READ_ONLY || mode === MODES.SELECT_FEATURE ? STATIC_STYLE : null}\n      >\n        {this._renderCurrentPath(feature, index)}\n        {this._renderCurrentVertices(feature, index)}\n      </g>\n    );\n  };\n\n  _renderFeature = (feature: Feature, index: number) => {\n    if (feature === this._getSelectedFeature()) {\n      return null;\n    }\n\n    const { clickRadius } = this.props;\n    const { id, points, renderType, isClosed } = feature;\n    if (!points || !points.length) {\n      return null;\n    }\n\n    const projected = this._getProjectedData(points, renderType, isClosed);\n\n    if (!projected) {\n      return null;\n    }\n\n    const geoJson = feature.toFeature();\n    const renderState = this._getFeatureRenderState(id);\n    const { getFeatureStyle, getFeatureShape } = this.props;\n    const style = getFeatureStyle({ feature: geoJson, state: renderState });\n    const shape =\n      typeof getFeatureShape === 'function'\n        ? getFeatureShape({ feature: geoJson, state: renderState })\n        : getFeatureShape;\n\n    const elemKey = `${ELEMENT_TYPE.FEATURE}.${index}`;\n\n    switch (renderType) {\n      case RENDER_TYPE.POINT:\n        if (shape === 'rect') {\n          return (\n            <g key={elemKey} transform={`translate(${projected[0][0]}, ${projected[0][1]})`}>\n              <rect\n                data-type={ELEMENT_TYPE.FEATURE}\n                data-feature-index={index}\n                key={`${elemKey}.hidden`}\n                style={{\n                  ...style,\n                  ...HIDDEN_CLICKABLE_STYLE,\n                  width: clickRadius,\n                  height: clickRadius\n                }}\n              />\n              <rect\n                data-type={ELEMENT_TYPE.FEATURE}\n                data-feature-index={index}\n                key={elemKey}\n                style={style}\n              />\n            </g>\n          );\n        }\n\n        return (\n          <g key={elemKey} transform={`translate(${projected[0][0]}, ${projected[0][1]})`}>\n            <circle\n              data-type={ELEMENT_TYPE.FEATURE}\n              data-feature-index={index}\n              key={`${elemKey}.hidden`}\n              style={{\n                ...style,\n                opacity: 0\n              }}\n              cx={0}\n              cy={0}\n              r={clickRadius}\n            />\n            <circle\n              data-type={ELEMENT_TYPE.FEATURE}\n              data-feature-index={index}\n              key={`feature.${index}`}\n              style={style}\n              cx={0}\n              cy={0}\n            />\n          </g>\n        );\n\n      // first <path> is to make path easily interacted with\n      case RENDER_TYPE.LINE_STRING:\n        return (\n          <g key={elemKey}>\n            <path\n              data-type={ELEMENT_TYPE.FEATURE}\n              data-feature-index={index}\n              key={`${elemKey}.hidden`}\n              style={{\n                ...style,\n                strokeWidth: clickRadius,\n                opacity: 0\n              }}\n              d={projected}\n            />\n            <path\n              data-type={ELEMENT_TYPE.FEATURE}\n              data-feature-index={index}\n              key={elemKey}\n              style={style}\n              d={projected}\n            />\n          </g>\n        );\n\n      case 'Polygon':\n      case 'Rectangle':\n        return (\n          <path\n            data-type={ELEMENT_TYPE.FEATURE}\n            data-feature-index={index}\n            key={elemKey}\n            style={style}\n            d={projected}\n          />\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  _renderFeatures = () => {\n    const { features } = this.state;\n    return features && features.map(this._renderFeature);\n  };\n\n  _renderCanvas = () => {\n    const { selectedFeatureId, features } = this.state;\n\n    return (\n      <svg key=\"draw-canvas\" width=\"100%\" height=\"100%\">\n        {features && features.length > 0 && <g key=\"feature-group\">{this._renderFeatures()}</g>}\n        {selectedFeatureId && this._renderCurrent()}\n      </svg>\n    );\n  };\n\n  _renderEditor = () => {\n    const viewport = (this._context && this._context.viewport) || {};\n    const { style } = this.props;\n    const { width, height } = viewport;\n\n    return (\n      <div\n        id=\"editor\"\n        style={{\n          width,\n          height,\n          ...style\n        }}\n        ref={_ => {\n          this._containerRef = _;\n        }}\n      >\n        {this._renderCanvas()}\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <MapContext.Consumer>\n        {context => {\n          this._context = context;\n          const viewport = context && context.viewport;\n\n          if (!viewport || viewport.height <= 0 || viewport.width <= 0) {\n            return null;\n          }\n\n          return this._renderEditor();\n        }}\n      </MapContext.Consumer>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}