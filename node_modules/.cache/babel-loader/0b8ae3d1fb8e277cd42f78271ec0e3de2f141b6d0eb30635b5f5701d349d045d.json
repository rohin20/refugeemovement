{"ast":null,"code":"export function formatTime(ms) {\n  var formatted;\n  if (ms < 10) {\n    formatted = \"\".concat(ms.toFixed(2), \"ms\");\n  } else if (ms < 100) {\n    formatted = \"\".concat(ms.toFixed(1), \"ms\");\n  } else if (ms < 1000) {\n    formatted = \"\".concat(ms.toFixed(0), \"ms\");\n  } else {\n    formatted = \"\".concat((ms / 1000).toFixed(2), \"s\");\n  }\n  return formatted;\n}\nexport function leftPad(string) {\n  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  var padLength = Math.max(length - string.length, 0);\n  return \"\".concat(' '.repeat(padLength)).concat(string);\n}\nexport function rightPad(string) {\n  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n  var padLength = Math.max(length - string.length, 0);\n  return \"\".concat(string).concat(' '.repeat(padLength));\n}\nexport function formatValue(v) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var EPSILON = 1e-16;\n  var _opts$isInteger = opts.isInteger,\n    isInteger = _opts$isInteger === void 0 ? false : _opts$isInteger;\n  if (Array.isArray(v) || ArrayBuffer.isView(v)) {\n    return formatArrayValue(v, opts);\n  }\n  if (!Number.isFinite(v)) {\n    return String(v);\n  }\n  if (Math.abs(v) < EPSILON) {\n    return isInteger ? '0' : '0.';\n  }\n  if (isInteger) {\n    return v.toFixed(0);\n  }\n  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {\n    return v.toFixed(0);\n  }\n  var string = v.toPrecision(2);\n  var decimal = string.indexOf('.0');\n  return decimal === string.length - 2 ? string.slice(0, -1) : string;\n}\nfunction formatArrayValue(v, opts) {\n  var _opts$maxElts = opts.maxElts,\n    maxElts = _opts$maxElts === void 0 ? 16 : _opts$maxElts,\n    _opts$size = opts.size,\n    size = _opts$size === void 0 ? 1 : _opts$size;\n  var string = '[';\n  for (var i = 0; i < v.length && i < maxElts; ++i) {\n    if (i > 0) {\n      string += \",\".concat(i % size === 0 ? ' ' : '');\n    }\n    string += formatValue(v[i], opts);\n  }\n  var terminator = v.length > maxElts ? '...' : ']';\n  return \"\".concat(string).concat(terminator);\n}\nexport function formatImage(image, message, scale) {\n  var maxWidth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 600;\n  var imageUrl = image.src.replace(/\\(/g, '%28').replace(/\\)/g, '%29');\n  if (image.width > maxWidth) {\n    scale = Math.min(scale, maxWidth / image.width);\n  }\n  var width = image.width * scale;\n  var height = image.height * scale;\n  var style = ['font-size:1px;', \"padding:\".concat(Math.floor(height / 2), \"px \").concat(Math.floor(width / 2), \"px;\"), \"line-height:\".concat(height, \"px;\"), \"background:url(\".concat(imageUrl, \");\"), \"background-size:\".concat(width, \"px \").concat(height, \"px;\"), 'color:transparent;'].join('');\n  return [\"\".concat(message, \" %c+\"), style];\n}","map":{"version":3,"names":["formatTime","ms","formatted","concat","toFixed","leftPad","string","length","arguments","undefined","padLength","Math","max","repeat","rightPad","formatValue","v","opts","EPSILON","_opts$isInteger","isInteger","Array","isArray","ArrayBuffer","isView","formatArrayValue","Number","isFinite","String","abs","toPrecision","decimal","indexOf","slice","_opts$maxElts","maxElts","_opts$size","size","i","terminator","formatImage","image","message","scale","maxWidth","imageUrl","src","replace","width","min","height","style","floor","join"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@probe.gl/log/src/utils/formatters.ts"],"sourcesContent":["// TODO: Currently unused, keeping in case we want it later for log formatting\nexport function formatTime(ms: number): string {\n  let formatted;\n  if (ms < 10) {\n    formatted = `${ms.toFixed(2)}ms`;\n  } else if (ms < 100) {\n    formatted = `${ms.toFixed(1)}ms`;\n  } else if (ms < 1000) {\n    formatted = `${ms.toFixed(0)}ms`;\n  } else {\n    formatted = `${(ms / 1000).toFixed(2)}s`;\n  }\n  return formatted;\n}\n\nexport function leftPad(string: string, length: number = 8): string {\n  const padLength = Math.max(length - string.length, 0);\n  return `${' '.repeat(padLength)}${string}`;\n}\n\nexport function rightPad(string: string, length: number = 8): string {\n  const padLength = Math.max(length - string.length, 0);\n  return `${string}${' '.repeat(padLength)}`;\n}\n\nexport function formatValue(v: unknown, opts: {isInteger?: boolean} = {}): string {\n  const EPSILON = 1e-16;\n  const {isInteger = false} = opts;\n  if (Array.isArray(v) || ArrayBuffer.isView(v)) {\n    return formatArrayValue(v, opts);\n  }\n  if (!Number.isFinite(v)) {\n    return String(v);\n  }\n  // @ts-expect-error\n  if (Math.abs(v) < EPSILON) {\n    return isInteger ? '0' : '0.';\n  }\n  if (isInteger) {\n    // @ts-expect-error\n    return v.toFixed(0);\n  }\n  // @ts-expect-error\n  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {\n    // @ts-expect-error\n    return v.toFixed(0);\n  }\n  // @ts-expect-error\n  const string = v.toPrecision(2);\n  const decimal = string.indexOf('.0');\n  return decimal === string.length - 2 ? string.slice(0, -1) : string;\n}\n\n/** Helper to formatValue */\nfunction formatArrayValue(v, opts) {\n  const {maxElts = 16, size = 1} = opts;\n  let string = '[';\n  for (let i = 0; i < v.length && i < maxElts; ++i) {\n    if (i > 0) {\n      string += `,${i % size === 0 ? ' ' : ''}`;\n    }\n    string += formatValue(v[i], opts);\n  }\n  const terminator = v.length > maxElts ? '...' : ']';\n  return `${string}${terminator}`;\n}\n\n/** Inspired by https://github.com/hughsk/console-image (MIT license) */\nexport function formatImage(image, message, scale, maxWidth = 600) {\n  const imageUrl = image.src.replace(/\\(/g, '%28').replace(/\\)/g, '%29');\n\n  if (image.width > maxWidth) {\n    scale = Math.min(scale, maxWidth / image.width);\n  }\n\n  const width = image.width * scale;\n  const height = image.height * scale;\n\n  const style = [\n    'font-size:1px;',\n    `padding:${Math.floor(height / 2)}px ${Math.floor(width / 2)}px;`,\n    `line-height:${height}px;`,\n    `background:url(${imageUrl});`,\n    `background-size:${width}px ${height}px;`,\n    'color:transparent;'\n  ].join('');\n\n  return [`${message} %c+`, style];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}