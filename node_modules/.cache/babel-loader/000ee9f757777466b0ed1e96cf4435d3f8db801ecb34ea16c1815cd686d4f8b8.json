{"ast":null,"code":"import _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Viewport from '../viewports/viewport';\nimport { parsePosition, getPosition } from '../utils/positions';\nimport { deepEqual } from '../utils/deep-equal';\nimport assert from '../utils/assert';\nvar View = /*#__PURE__*/function () {\n  function View(props) {\n    _classCallCheck(this, View);\n    _defineProperty(this, \"id\", void 0);\n    _defineProperty(this, \"viewportInstance\", void 0);\n    _defineProperty(this, \"_x\", void 0);\n    _defineProperty(this, \"_y\", void 0);\n    _defineProperty(this, \"_width\", void 0);\n    _defineProperty(this, \"_height\", void 0);\n    _defineProperty(this, \"_padding\", void 0);\n    _defineProperty(this, \"props\", void 0);\n    var _ref = props || {},\n      id = _ref.id,\n      _ref$x = _ref.x,\n      x = _ref$x === void 0 ? 0 : _ref$x,\n      _ref$y = _ref.y,\n      y = _ref$y === void 0 ? 0 : _ref$y,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? '100%' : _ref$width,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? '100%' : _ref$height,\n      _ref$padding = _ref.padding,\n      padding = _ref$padding === void 0 ? null : _ref$padding,\n      viewportInstance = _ref.viewportInstance;\n    assert(!viewportInstance || viewportInstance instanceof Viewport);\n    this.viewportInstance = viewportInstance;\n    this.id = id || this.constructor.displayName || 'view';\n    this.props = _objectSpread(_objectSpread({}, props), {}, {\n      id: this.id\n    });\n    this._x = parsePosition(x);\n    this._y = parsePosition(y);\n    this._width = parsePosition(width);\n    this._height = parsePosition(height);\n    this._padding = padding && {\n      left: parsePosition(padding.left || 0),\n      right: parsePosition(padding.right || 0),\n      top: parsePosition(padding.top || 0),\n      bottom: parsePosition(padding.bottom || 0)\n    };\n    this.equals = this.equals.bind(this);\n    Object.seal(this);\n  }\n  _createClass(View, [{\n    key: \"equals\",\n    value: function equals(view) {\n      if (this === view) {\n        return true;\n      }\n      if (this.viewportInstance) {\n        return view.viewportInstance ? this.viewportInstance.equals(view.viewportInstance) : false;\n      }\n      return this.ViewportType === view.ViewportType && deepEqual(this.props, view.props);\n    }\n  }, {\n    key: \"makeViewport\",\n    value: function makeViewport(_ref2) {\n      var width = _ref2.width,\n        height = _ref2.height,\n        viewState = _ref2.viewState;\n      if (this.viewportInstance) {\n        return this.viewportInstance;\n      }\n      viewState = this.filterViewState(viewState);\n      var viewportDimensions = this.getDimensions({\n        width: width,\n        height: height\n      });\n      return new this.ViewportType(_objectSpread(_objectSpread(_objectSpread({}, viewState), this.props), viewportDimensions));\n    }\n  }, {\n    key: \"getViewStateId\",\n    value: function getViewStateId() {\n      var viewState = this.props.viewState;\n      if (typeof viewState === 'string') {\n        return viewState;\n      }\n      return (viewState === null || viewState === void 0 ? void 0 : viewState.id) || this.id;\n    }\n  }, {\n    key: \"filterViewState\",\n    value: function filterViewState(viewState) {\n      if (this.props.viewState && typeof this.props.viewState === 'object') {\n        if (!this.props.viewState.id) {\n          return this.props.viewState;\n        }\n        var newViewState = _objectSpread({}, viewState);\n        for (var key in this.props.viewState) {\n          if (key !== 'id') {\n            newViewState[key] = this.props.viewState[key];\n          }\n        }\n        return newViewState;\n      }\n      return viewState;\n    }\n  }, {\n    key: \"getDimensions\",\n    value: function getDimensions(_ref3) {\n      var width = _ref3.width,\n        height = _ref3.height;\n      var dimensions = {\n        x: getPosition(this._x, width),\n        y: getPosition(this._y, height),\n        width: getPosition(this._width, width),\n        height: getPosition(this._height, height)\n      };\n      if (this._padding) {\n        dimensions.padding = {\n          left: getPosition(this._padding.left, width),\n          top: getPosition(this._padding.top, height),\n          right: getPosition(this._padding.right, width),\n          bottom: getPosition(this._padding.bottom, height)\n        };\n      }\n      return dimensions;\n    }\n  }, {\n    key: \"controller\",\n    get: function get() {\n      var opts = this.props.controller;\n      if (!opts) {\n        return null;\n      }\n      if (opts === true) {\n        return {\n          type: this.ControllerType\n        };\n      }\n      if (typeof opts === 'function') {\n        return {\n          type: opts\n        };\n      }\n      return _objectSpread({\n        type: this.ControllerType\n      }, opts);\n    }\n  }]);\n  return View;\n}();\nexport { View as default };","map":{"version":3,"names":["Viewport","parsePosition","getPosition","deepEqual","assert","View","props","_classCallCheck","_defineProperty","_ref","id","_ref$x","x","_ref$y","y","_ref$width","width","_ref$height","height","_ref$padding","padding","viewportInstance","constructor","displayName","_objectSpread","_x","_y","_width","_height","_padding","left","right","top","bottom","equals","bind","Object","seal","_createClass","key","value","view","ViewportType","makeViewport","_ref2","viewState","filterViewState","viewportDimensions","getDimensions","getViewStateId","newViewState","_ref3","dimensions","get","opts","controller","type","ControllerType","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/core/src/views/view.ts"],"sourcesContent":["import Viewport from '../viewports/viewport';\nimport {parsePosition, getPosition, Position} from '../utils/positions';\nimport {deepEqual} from '../utils/deep-equal';\nimport assert from '../utils/assert';\nimport type Controller from '../controllers/controller';\nimport type {ControllerOptions} from '../controllers/controller';\nimport type {TransitionProps} from '../controllers/transition-manager';\nimport type {Padding} from '../viewports/viewport';\nimport type {ConstructorOf} from '../types/types';\n\nexport type CommonViewState = TransitionProps;\n\ntype CommonViewProps<ViewState> = {\n  /** A unique id of the view. In a multi-view use case, this is important for matching view states and place contents into this view. */\n  id?: string;\n  /** A relative (e.g. `'50%'`) or absolute position. Default `0`. */\n  x?: number | string;\n  /** A relative (e.g. `'50%'`) or absolute position. Default `0`. */\n  y?: number | string;\n  /** A relative (e.g. `'50%'`) or absolute extent. Default `'100%'`. */\n  width?: number | string;\n  /** A relative (e.g. `'50%'`) or absolute extent. Default `'100%'`. */\n  height?: number | string;\n  /** Padding around the view, expressed in either relative (e.g. `'50%'`) or absolute pixels. Default `null`. */\n  padding?: {\n    left?: number | string;\n    right?: number | string;\n    top?: number | string;\n    bottom?: number | string;\n  } | null;\n  /** State of the view */\n  viewState?:\n    | string\n    | ({\n        id?: string;\n      } & Partial<ViewState>);\n  /** Options for viewport interactivity. */\n  controller?:\n    | null\n    | boolean\n    | ConstructorOf<Controller<any>>\n    | (ControllerOptions & {\n        type?: ConstructorOf<Controller<any>>;\n      });\n\n  /** @deprecated Directly wrap a viewport instance */\n  viewportInstance?: Viewport;\n};\n\nexport default abstract class View<\n  ViewState extends CommonViewState = CommonViewState,\n  ViewProps = {}\n> {\n  id: string;\n  abstract get ViewportType(): ConstructorOf<Viewport>;\n  abstract get ControllerType(): ConstructorOf<Controller<any>>;\n\n  private viewportInstance?: Viewport;\n  private _x: Position;\n  private _y: Position;\n  private _width: Position;\n  private _height: Position;\n  private _padding: {\n    left: Position;\n    right: Position;\n    top: Position;\n    bottom: Position;\n  } | null;\n\n  readonly props: ViewProps & CommonViewProps<ViewState>;\n\n  constructor(props: ViewProps & CommonViewProps<ViewState>) {\n    const {\n      id,\n      x = 0,\n      y = 0,\n      width = '100%',\n      height = '100%',\n      padding = null,\n      viewportInstance\n    } = props || {};\n\n    assert(!viewportInstance || viewportInstance instanceof Viewport);\n    this.viewportInstance = viewportInstance;\n\n    // @ts-ignore\n    this.id = id || this.constructor.displayName || 'view';\n\n    this.props = {...props, id: this.id};\n\n    // Extents\n    this._x = parsePosition(x);\n    this._y = parsePosition(y);\n    this._width = parsePosition(width);\n    this._height = parsePosition(height);\n    this._padding = padding && {\n      left: parsePosition(padding.left || 0),\n      right: parsePosition(padding.right || 0),\n      top: parsePosition(padding.top || 0),\n      bottom: parsePosition(padding.bottom || 0)\n    };\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n\n    Object.seal(this);\n  }\n\n  equals(view: View<ViewState, ViewProps>): boolean {\n    if (this === view) {\n      return true;\n    }\n\n    // if `viewportInstance` is set, it is the only prop that is used\n    // Delegate to `Viewport.equals`\n    if (this.viewportInstance) {\n      return view.viewportInstance ? this.viewportInstance.equals(view.viewportInstance) : false;\n    }\n\n    return this.ViewportType === view.ViewportType && deepEqual(this.props, view.props);\n  }\n\n  /** Make viewport from canvas dimensions and view state */\n  makeViewport({width, height, viewState}: {width: number; height: number; viewState: any}) {\n    if (this.viewportInstance) {\n      return this.viewportInstance;\n    }\n\n    viewState = this.filterViewState(viewState);\n\n    // Resolve relative viewport dimensions\n    const viewportDimensions = this.getDimensions({width, height});\n    return new this.ViewportType({...viewState, ...this.props, ...viewportDimensions});\n  }\n\n  getViewStateId(): string {\n    const {viewState} = this.props;\n    if (typeof viewState === 'string') {\n      // if View.viewState is a string, return it\n      return viewState;\n    }\n    return viewState?.id || this.id;\n  }\n\n  // Allows view to override (or completely define) viewState\n  filterViewState(viewState: ViewState): ViewState {\n    if (this.props.viewState && typeof this.props.viewState === 'object') {\n      // If we have specified an id, then intent is to override,\n      // If not, completely specify the view state\n      if (!this.props.viewState.id) {\n        return this.props.viewState as ViewState;\n      }\n\n      // Merge in all props from View's viewState, except id\n      const newViewState = {...viewState};\n      for (const key in this.props.viewState) {\n        if (key !== 'id') {\n          newViewState[key] = this.props.viewState[key];\n        }\n      }\n      return newViewState;\n    }\n\n    return viewState;\n  }\n\n  /** Resolve the dimensions of the view from overall canvas dimensions */\n  getDimensions({width, height}: {width: number; height: number}): {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    padding?: Padding;\n  } {\n    const dimensions: {\n      x: number;\n      y: number;\n      width: number;\n      height: number;\n      padding?: Padding;\n    } = {\n      x: getPosition(this._x, width),\n      y: getPosition(this._y, height),\n      width: getPosition(this._width, width),\n      height: getPosition(this._height, height)\n    };\n\n    if (this._padding) {\n      dimensions.padding = {\n        left: getPosition(this._padding.left, width),\n        top: getPosition(this._padding.top, height),\n        right: getPosition(this._padding.right, width),\n        bottom: getPosition(this._padding.bottom, height)\n      };\n    }\n    return dimensions;\n  }\n\n  // Used by sub classes to resolve controller props\n  get controller(): (ControllerOptions & {type: ConstructorOf<Controller<any>>}) | null {\n    const opts = this.props.controller;\n\n    if (!opts) {\n      return null;\n    }\n    if (opts === true) {\n      return {type: this.ControllerType};\n    }\n    if (typeof opts === 'function') {\n      return {type: opts};\n    }\n    return {type: this.ControllerType, ...opts};\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}