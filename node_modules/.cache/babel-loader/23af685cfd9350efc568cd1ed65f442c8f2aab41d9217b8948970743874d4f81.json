{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { loadBasisEncoderModule } from '../parsers/basis-module-loader';\nexport function encodeKTX2BasisTexture(_x) {\n  return _encodeKTX2BasisTexture.apply(this, arguments);\n}\nfunction _encodeKTX2BasisTexture() {\n  _encodeKTX2BasisTexture = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(image) {\n    var options,\n      _options$useSRGB,\n      useSRGB,\n      _options$qualityLevel,\n      qualityLevel,\n      _options$encodeUASTC,\n      encodeUASTC,\n      _options$mipmaps,\n      mipmaps,\n      _yield$loadBasisEncod,\n      BasisEncoder,\n      basisEncoder,\n      basisFileData,\n      numOutputBytes,\n      actualKTX2FileData,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          _options$useSRGB = options.useSRGB, useSRGB = _options$useSRGB === void 0 ? false : _options$useSRGB, _options$qualityLevel = options.qualityLevel, qualityLevel = _options$qualityLevel === void 0 ? 10 : _options$qualityLevel, _options$encodeUASTC = options.encodeUASTC, encodeUASTC = _options$encodeUASTC === void 0 ? false : _options$encodeUASTC, _options$mipmaps = options.mipmaps, mipmaps = _options$mipmaps === void 0 ? false : _options$mipmaps;\n          _context.next = 4;\n          return loadBasisEncoderModule(options);\n        case 4:\n          _yield$loadBasisEncod = _context.sent;\n          BasisEncoder = _yield$loadBasisEncod.BasisEncoder;\n          basisEncoder = new BasisEncoder();\n          _context.prev = 7;\n          basisFileData = new Uint8Array(image.width * image.height * 4);\n          basisEncoder.setCreateKTX2File(true);\n          basisEncoder.setKTX2UASTCSupercompression(true);\n          basisEncoder.setKTX2SRGBTransferFunc(true);\n          basisEncoder.setSliceSourceImage(0, image.data, image.width, image.height, false);\n          basisEncoder.setPerceptual(useSRGB);\n          basisEncoder.setMipSRGB(useSRGB);\n          basisEncoder.setQualityLevel(qualityLevel);\n          basisEncoder.setUASTC(encodeUASTC);\n          basisEncoder.setMipGen(mipmaps);\n          numOutputBytes = basisEncoder.encode(basisFileData);\n          actualKTX2FileData = basisFileData.subarray(0, numOutputBytes).buffer;\n          return _context.abrupt(\"return\", actualKTX2FileData);\n        case 23:\n          _context.prev = 23;\n          _context.t0 = _context[\"catch\"](7);\n          console.error('Basis Universal Supercompressed GPU Texture encoder Error: ', _context.t0);\n          throw _context.t0;\n        case 27:\n          _context.prev = 27;\n          basisEncoder.delete();\n          return _context.finish(27);\n        case 30:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[7, 23, 27, 30]]);\n  }));\n  return _encodeKTX2BasisTexture.apply(this, arguments);\n}","map":{"version":3,"names":["loadBasisEncoderModule","encodeKTX2BasisTexture","_x","_encodeKTX2BasisTexture","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","image","options","_options$useSRGB","useSRGB","_options$qualityLevel","qualityLevel","_options$encodeUASTC","encodeUASTC","_options$mipmaps","mipmaps","_yield$loadBasisEncod","BasisEncoder","basisEncoder","basisFileData","numOutputBytes","actualKTX2FileData","_args","wrap","_callee$","_context","prev","next","length","undefined","sent","Uint8Array","width","height","setCreateKTX2File","setKTX2UASTCSupercompression","setKTX2SRGBTransferFunc","setSliceSourceImage","data","setPerceptual","setMipSRGB","setQualityLevel","setUASTC","setMipGen","encode","subarray","buffer","abrupt","t0","console","error","delete","finish","stop"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/textures/src/lib/encoders/encode-ktx2-basis-texture.ts"],"sourcesContent":["import type {ImageDataType} from '@loaders.gl/images';\nimport {loadBasisEncoderModule} from '../parsers/basis-module-loader';\n\n/**\n * Encodes image to Basis Universal Supercompressed GPU Texture.\n * Code example is taken from here - https://github.com/BinomialLLC/basis_universal/blob/master/webgl/ktx2_encode_test/index.html#L279\n * BasisEncoder API - https://github.com/BinomialLLC/basis_universal/blob/master/webgl/transcoder/basis_wrappers.cpp#L1712\n * @param image\n * @param options\n */\nexport async function encodeKTX2BasisTexture(\n  image: ImageDataType,\n  options: any = {}\n): Promise<ArrayBuffer> {\n  // TODO remove default values after writer options will be normalized like it done in load module.\n  const {useSRGB = false, qualityLevel = 10, encodeUASTC = false, mipmaps = false} = options;\n  const {BasisEncoder} = await loadBasisEncoderModule(options);\n  const basisEncoder = new BasisEncoder();\n\n  try {\n    const basisFileData = new Uint8Array(image.width * image.height * 4);\n    basisEncoder.setCreateKTX2File(true);\n    basisEncoder.setKTX2UASTCSupercompression(true);\n    basisEncoder.setKTX2SRGBTransferFunc(true);\n\n    basisEncoder.setSliceSourceImage(0, image.data, image.width, image.height, false);\n    basisEncoder.setPerceptual(useSRGB);\n    basisEncoder.setMipSRGB(useSRGB);\n    basisEncoder.setQualityLevel(qualityLevel);\n    basisEncoder.setUASTC(encodeUASTC);\n    basisEncoder.setMipGen(mipmaps);\n\n    const numOutputBytes = basisEncoder.encode(basisFileData);\n\n    const actualKTX2FileData = basisFileData.subarray(0, numOutputBytes).buffer;\n    return actualKTX2FileData;\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error('Basis Universal Supercompressed GPU Texture encoder Error: ', error);\n    throw error;\n  } finally {\n    basisEncoder.delete();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}