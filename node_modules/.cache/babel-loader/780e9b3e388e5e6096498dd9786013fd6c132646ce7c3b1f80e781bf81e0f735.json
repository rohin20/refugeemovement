{"ast":null,"code":"import _defineProperty from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { getWebGL2Context, assertWebGL2Context, log as _log } from '@luma.gl/gltools';\nimport Resource from './resource';\nimport Texture2D from './texture-2d';\nimport Renderbuffer from './renderbuffer';\nimport { clear as _clear, clearBuffer } from './clear';\nimport { copyToDataUrl } from './copy-and-blit.js';\nimport { getFeatures } from '../features';\nimport { getKey } from '../webgl-utils/constants-to-keys';\nimport { assert } from '../utils/assert';\nvar ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';\nvar Framebuffer = /*#__PURE__*/function (_Resource, _Symbol$toStringTag) {\n  _inherits(Framebuffer, _Resource);\n  var _super = _createSuper(Framebuffer);\n  function Framebuffer(gl) {\n    var _this;\n    _classCallCheck(this, Framebuffer);\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _this = _super.call(this, gl, opts);\n    _this.width = null;\n    _this.height = null;\n    _this.attachments = {};\n    _this.readBuffer = 36064;\n    _this.drawBuffers = [36064];\n    _this.ownResources = [];\n    _this.initialize(opts);\n    Object.seal(_assertThisInitialized(_this));\n    return _this;\n  }\n  _createClass(Framebuffer, [{\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return 'Framebuffer';\n    }\n  }, {\n    key: \"MAX_COLOR_ATTACHMENTS\",\n    get: function get() {\n      var gl2 = assertWebGL2Context(this.gl);\n      return gl2.getParameter(gl2.MAX_COLOR_ATTACHMENTS);\n    }\n  }, {\n    key: \"MAX_DRAW_BUFFERS\",\n    get: function get() {\n      var gl2 = assertWebGL2Context(this.gl);\n      return gl2.getParameter(gl2.MAX_DRAW_BUFFERS);\n    }\n  }, {\n    key: \"color\",\n    get: function get() {\n      return this.attachments[36064] || null;\n    }\n  }, {\n    key: \"texture\",\n    get: function get() {\n      return this.attachments[36064] || null;\n    }\n  }, {\n    key: \"depth\",\n    get: function get() {\n      return this.attachments[36096] || this.attachments[33306] || null;\n    }\n  }, {\n    key: \"stencil\",\n    get: function get() {\n      return this.attachments[36128] || this.attachments[33306] || null;\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize(_ref) {\n      var _ref$width = _ref.width,\n        width = _ref$width === void 0 ? 1 : _ref$width,\n        _ref$height = _ref.height,\n        height = _ref$height === void 0 ? 1 : _ref$height,\n        _ref$attachments = _ref.attachments,\n        attachments = _ref$attachments === void 0 ? null : _ref$attachments,\n        _ref$color = _ref.color,\n        color = _ref$color === void 0 ? true : _ref$color,\n        _ref$depth = _ref.depth,\n        depth = _ref$depth === void 0 ? true : _ref$depth,\n        _ref$stencil = _ref.stencil,\n        stencil = _ref$stencil === void 0 ? false : _ref$stencil,\n        _ref$check = _ref.check,\n        check = _ref$check === void 0 ? true : _ref$check,\n        _ref$readBuffer = _ref.readBuffer,\n        readBuffer = _ref$readBuffer === void 0 ? undefined : _ref$readBuffer,\n        _ref$drawBuffers = _ref.drawBuffers,\n        drawBuffers = _ref$drawBuffers === void 0 ? undefined : _ref$drawBuffers;\n      assert(width >= 0 && height >= 0, 'Width and height need to be integers');\n      this.width = width;\n      this.height = height;\n      if (attachments) {\n        for (var attachment in attachments) {\n          var target = attachments[attachment];\n          var object = Array.isArray(target) ? target[0] : target;\n          object.resize({\n            width: width,\n            height: height\n          });\n        }\n      } else {\n        attachments = this._createDefaultAttachments(color, depth, stencil, width, height);\n      }\n      this.update({\n        clearAttachments: true,\n        attachments: attachments,\n        readBuffer: readBuffer,\n        drawBuffers: drawBuffers\n      });\n      if (attachments && check) {\n        this.checkStatus();\n      }\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var _iterator = _createForOfIteratorHelper(this.ownResources),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var resource = _step.value;\n          resource.delete();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      _get(_getPrototypeOf(Framebuffer.prototype), \"delete\", this).call(this);\n      return this;\n    }\n  }, {\n    key: \"update\",\n    value: function update(_ref2) {\n      var _ref2$attachments = _ref2.attachments,\n        attachments = _ref2$attachments === void 0 ? {} : _ref2$attachments,\n        readBuffer = _ref2.readBuffer,\n        drawBuffers = _ref2.drawBuffers,\n        _ref2$clearAttachment = _ref2.clearAttachments,\n        clearAttachments = _ref2$clearAttachment === void 0 ? false : _ref2$clearAttachment,\n        _ref2$resizeAttachmen = _ref2.resizeAttachments,\n        resizeAttachments = _ref2$resizeAttachmen === void 0 ? true : _ref2$resizeAttachmen;\n      this.attach(attachments, {\n        clearAttachments: clearAttachments,\n        resizeAttachments: resizeAttachments\n      });\n      var gl = this.gl;\n      var prevHandle = gl.bindFramebuffer(36160, this.handle);\n      if (readBuffer) {\n        this._setReadBuffer(readBuffer);\n      }\n      if (drawBuffers) {\n        this._setDrawBuffers(drawBuffers);\n      }\n      gl.bindFramebuffer(36160, prevHandle || null);\n      return this;\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var width = options.width,\n        height = options.height;\n      if (this.handle === null) {\n        assert(width === undefined && height === undefined);\n        this.width = this.gl.drawingBufferWidth;\n        this.height = this.gl.drawingBufferHeight;\n        return this;\n      }\n      if (width === undefined) {\n        width = this.gl.drawingBufferWidth;\n      }\n      if (height === undefined) {\n        height = this.gl.drawingBufferHeight;\n      }\n      if (width !== this.width && height !== this.height) {\n        _log.log(2, \"Resizing framebuffer \".concat(this.id, \" to \").concat(width, \"x\").concat(height))();\n      }\n      for (var attachmentPoint in this.attachments) {\n        this.attachments[attachmentPoint].resize({\n          width: width,\n          height: height\n        });\n      }\n      this.width = width;\n      this.height = height;\n      return this;\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(attachments) {\n      var _this2 = this;\n      var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref6$clearAttachment = _ref6.clearAttachments,\n        clearAttachments = _ref6$clearAttachment === void 0 ? false : _ref6$clearAttachment,\n        _ref6$resizeAttachmen = _ref6.resizeAttachments,\n        resizeAttachments = _ref6$resizeAttachmen === void 0 ? true : _ref6$resizeAttachmen;\n      var newAttachments = {};\n      if (clearAttachments) {\n        Object.keys(this.attachments).forEach(function (key) {\n          newAttachments[key] = null;\n        });\n      }\n      Object.assign(newAttachments, attachments);\n      var prevHandle = this.gl.bindFramebuffer(36160, this.handle);\n      for (var key in newAttachments) {\n        assert(key !== undefined, 'Misspelled framebuffer binding point?');\n        var attachment = Number(key);\n        var descriptor = newAttachments[attachment];\n        var object = descriptor;\n        if (!object) {\n          this._unattach(attachment);\n        } else if (object instanceof Renderbuffer) {\n          this._attachRenderbuffer({\n            attachment: attachment,\n            renderbuffer: object\n          });\n        } else if (Array.isArray(descriptor)) {\n          var _descriptor = _slicedToArray(descriptor, 3),\n            texture = _descriptor[0],\n            _descriptor$ = _descriptor[1],\n            layer = _descriptor$ === void 0 ? 0 : _descriptor$,\n            _descriptor$2 = _descriptor[2],\n            level = _descriptor$2 === void 0 ? 0 : _descriptor$2;\n          object = texture;\n          this._attachTexture({\n            attachment: attachment,\n            texture: texture,\n            layer: layer,\n            level: level\n          });\n        } else {\n          this._attachTexture({\n            attachment: attachment,\n            texture: object,\n            layer: 0,\n            level: 0\n          });\n        }\n        if (resizeAttachments && object) {\n          object.resize({\n            width: this.width,\n            height: this.height\n          });\n        }\n      }\n      this.gl.bindFramebuffer(36160, prevHandle || null);\n      Object.assign(this.attachments, attachments);\n      Object.keys(this.attachments).filter(function (key) {\n        return !_this2.attachments[key];\n      }).forEach(function (key) {\n        delete _this2.attachments[key];\n      });\n    }\n  }, {\n    key: \"checkStatus\",\n    value: function checkStatus() {\n      var gl = this.gl;\n      var status = this.getStatus();\n      if (status !== 36053) {\n        throw new Error(_getFrameBufferStatus(status));\n      }\n      return this;\n    }\n  }, {\n    key: \"getStatus\",\n    value: function getStatus() {\n      var gl = this.gl;\n      var prevHandle = gl.bindFramebuffer(36160, this.handle);\n      var status = gl.checkFramebufferStatus(36160);\n      gl.bindFramebuffer(36160, prevHandle || null);\n      return status;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _this3 = this;\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var color = options.color,\n        depth = options.depth,\n        stencil = options.stencil,\n        _options$drawBuffers = options.drawBuffers,\n        drawBuffers = _options$drawBuffers === void 0 ? [] : _options$drawBuffers;\n      var prevHandle = this.gl.bindFramebuffer(36160, this.handle);\n      if (color || depth || stencil) {\n        _clear(this.gl, {\n          color: color,\n          depth: depth,\n          stencil: stencil\n        });\n      }\n      drawBuffers.forEach(function (value, drawBuffer) {\n        clearBuffer(_this3.gl, {\n          drawBuffer: drawBuffer,\n          value: value\n        });\n      });\n      this.gl.bindFramebuffer(36160, prevHandle || null);\n      return this;\n    }\n  }, {\n    key: \"readPixels\",\n    value: function readPixels() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _log.error('Framebuffer.readPixels() is no logner supported, use readPixelsToArray(framebuffer)')();\n      return null;\n    }\n  }, {\n    key: \"readPixelsToBuffer\",\n    value: function readPixelsToBuffer() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _log.error('Framebuffer.readPixelsToBuffer()is no logner supported, use readPixelsToBuffer(framebuffer)')();\n      return null;\n    }\n  }, {\n    key: \"copyToDataUrl\",\n    value: function copyToDataUrl() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _log.error('Framebuffer.copyToDataUrl() is no logner supported, use copyToDataUrl(framebuffer)')();\n      return null;\n    }\n  }, {\n    key: \"copyToImage\",\n    value: function copyToImage() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _log.error('Framebuffer.copyToImage() is no logner supported, use copyToImage(framebuffer)')();\n      return null;\n    }\n  }, {\n    key: \"copyToTexture\",\n    value: function copyToTexture() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _log.error('Framebuffer.copyToTexture({...}) is no logner supported, use copyToTexture(source, target, opts})')();\n      return null;\n    }\n  }, {\n    key: \"blit\",\n    value: function blit() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _log.error('Framebuffer.blit({...}) is no logner supported, use blit(source, target, opts)')();\n      return null;\n    }\n  }, {\n    key: \"invalidate\",\n    value: function invalidate(_ref3) {\n      var _ref3$attachments = _ref3.attachments,\n        attachments = _ref3$attachments === void 0 ? [] : _ref3$attachments,\n        _ref3$x = _ref3.x,\n        x = _ref3$x === void 0 ? 0 : _ref3$x,\n        _ref3$y = _ref3.y,\n        y = _ref3$y === void 0 ? 0 : _ref3$y,\n        width = _ref3.width,\n        height = _ref3.height;\n      var gl2 = assertWebGL2Context(this.gl);\n      var prevHandle = gl2.bindFramebuffer(36008, this.handle);\n      var invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;\n      if (invalidateAll) {\n        gl2.invalidateFramebuffer(36008, attachments);\n      } else {\n        gl2.invalidateFramebuffer(36008, attachments, x, y, width, height);\n      }\n      gl2.bindFramebuffer(36008, prevHandle);\n      return this;\n    }\n  }, {\n    key: \"getAttachmentParameter\",\n    value: function getAttachmentParameter(attachment, pname, keys) {\n      var value = this._getAttachmentParameterFallback(pname);\n      if (value === null) {\n        this.gl.bindFramebuffer(36160, this.handle);\n        value = this.gl.getFramebufferAttachmentParameter(36160, attachment, pname);\n        this.gl.bindFramebuffer(36160, null);\n      }\n      if (keys && value > 1000) {\n        value = getKey(this.gl, value);\n      }\n      return value;\n    }\n  }, {\n    key: \"getAttachmentParameters\",\n    value: function getAttachmentParameters() {\n      var attachment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 36064;\n      var keys = arguments.length > 1 ? arguments[1] : undefined;\n      var parameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.constructor.ATTACHMENT_PARAMETERS || [];\n      var values = {};\n      var _iterator2 = _createForOfIteratorHelper(parameters),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var pname = _step2.value;\n          var key = keys ? getKey(this.gl, pname) : pname;\n          values[key] = this.getAttachmentParameter(attachment, pname, keys);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return values;\n    }\n  }, {\n    key: \"getParameters\",\n    value: function getParameters() {\n      var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var attachments = Object.keys(this.attachments);\n      var parameters = {};\n      for (var _i = 0, _attachments = attachments; _i < _attachments.length; _i++) {\n        var attachmentName = _attachments[_i];\n        var attachment = Number(attachmentName);\n        var key = keys ? getKey(this.gl, attachment) : attachment;\n        parameters[key] = this.getAttachmentParameters(attachment, keys);\n      }\n      return parameters;\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      if (typeof window !== 'undefined') {\n        window.open(copyToDataUrl(this), 'luma-debug-texture');\n      }\n      return this;\n    }\n  }, {\n    key: \"log\",\n    value: function log() {\n      var logLevel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      if (logLevel > _log.level || typeof window === 'undefined') {\n        return this;\n      }\n      message = message || \"Framebuffer \".concat(this.id);\n      var image = copyToDataUrl(this, {\n        targetMaxHeight: 100\n      });\n      _log.image({\n        logLevel: logLevel,\n        message: message,\n        image: image\n      }, message)();\n      return this;\n    }\n  }, {\n    key: \"bind\",\n    value: function bind() {\n      var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref7$target = _ref7.target,\n        target = _ref7$target === void 0 ? 36160 : _ref7$target;\n      this.gl.bindFramebuffer(target, this.handle);\n      return this;\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref8$target = _ref8.target,\n        target = _ref8$target === void 0 ? 36160 : _ref8$target;\n      this.gl.bindFramebuffer(target, null);\n      return this;\n    }\n  }, {\n    key: \"_createDefaultAttachments\",\n    value: function _createDefaultAttachments(color, depth, stencil, width, height) {\n      var defaultAttachments = null;\n      if (color) {\n        var _parameters;\n        defaultAttachments = defaultAttachments || {};\n        defaultAttachments[36064] = new Texture2D(this.gl, {\n          id: \"\".concat(this.id, \"-color0\"),\n          pixels: null,\n          format: 6408,\n          type: 5121,\n          width: width,\n          height: height,\n          mipmaps: false,\n          parameters: (_parameters = {}, _defineProperty(_parameters, 10241, 9729), _defineProperty(_parameters, 10240, 9729), _defineProperty(_parameters, 10242, 33071), _defineProperty(_parameters, 10243, 33071), _parameters)\n        });\n        this.ownResources.push(defaultAttachments[36064]);\n      }\n      if (depth && stencil) {\n        defaultAttachments = defaultAttachments || {};\n        defaultAttachments[33306] = new Renderbuffer(this.gl, {\n          id: \"\".concat(this.id, \"-depth-stencil\"),\n          format: 35056,\n          width: width,\n          height: 111\n        });\n        this.ownResources.push(defaultAttachments[33306]);\n      } else if (depth) {\n        defaultAttachments = defaultAttachments || {};\n        defaultAttachments[36096] = new Renderbuffer(this.gl, {\n          id: \"\".concat(this.id, \"-depth\"),\n          format: 33189,\n          width: width,\n          height: height\n        });\n        this.ownResources.push(defaultAttachments[36096]);\n      } else if (stencil) {\n        assert(false);\n      }\n      return defaultAttachments;\n    }\n  }, {\n    key: \"_unattach\",\n    value: function _unattach(attachment) {\n      var oldAttachment = this.attachments[attachment];\n      if (!oldAttachment) {\n        return;\n      }\n      if (oldAttachment instanceof Renderbuffer) {\n        this.gl.framebufferRenderbuffer(36160, attachment, 36161, null);\n      } else {\n        this.gl.framebufferTexture2D(36160, attachment, 3553, null, 0);\n      }\n      delete this.attachments[attachment];\n    }\n  }, {\n    key: \"_attachRenderbuffer\",\n    value: function _attachRenderbuffer(_ref4) {\n      var _ref4$attachment = _ref4.attachment,\n        attachment = _ref4$attachment === void 0 ? 36064 : _ref4$attachment,\n        renderbuffer = _ref4.renderbuffer;\n      var gl = this.gl;\n      gl.framebufferRenderbuffer(36160, attachment, 36161, renderbuffer.handle);\n      this.attachments[attachment] = renderbuffer;\n    }\n  }, {\n    key: \"_attachTexture\",\n    value: function _attachTexture(_ref5) {\n      var _ref5$attachment = _ref5.attachment,\n        attachment = _ref5$attachment === void 0 ? 36064 : _ref5$attachment,\n        texture = _ref5.texture,\n        layer = _ref5.layer,\n        level = _ref5.level;\n      var gl = this.gl;\n      gl.bindTexture(texture.target, texture.handle);\n      switch (texture.target) {\n        case 35866:\n        case 32879:\n          var gl2 = assertWebGL2Context(gl);\n          gl2.framebufferTextureLayer(36160, attachment, texture.target, level, layer);\n          break;\n        case 34067:\n          var face = mapIndexToCubeMapFace(layer);\n          gl.framebufferTexture2D(36160, attachment, face, texture.handle, level);\n          break;\n        case 3553:\n          gl.framebufferTexture2D(36160, attachment, 3553, texture.handle, level);\n          break;\n        default:\n          assert(false, 'Illegal texture type');\n      }\n      gl.bindTexture(texture.target, null);\n      this.attachments[attachment] = texture;\n    }\n  }, {\n    key: \"_setReadBuffer\",\n    value: function _setReadBuffer(readBuffer) {\n      var gl2 = getWebGL2Context(this.gl);\n      if (gl2) {\n        gl2.readBuffer(readBuffer);\n      } else {\n        assert(readBuffer === 36064 || readBuffer === 1029, ERR_MULTIPLE_RENDERTARGETS);\n      }\n      this.readBuffer = readBuffer;\n    }\n  }, {\n    key: \"_setDrawBuffers\",\n    value: function _setDrawBuffers(drawBuffers) {\n      var gl = this.gl;\n      var gl2 = assertWebGL2Context(gl);\n      if (gl2) {\n        gl2.drawBuffers(drawBuffers);\n      } else {\n        var ext = gl.getExtension('WEBGL_draw_buffers');\n        if (ext) {\n          ext.drawBuffersWEBGL(drawBuffers);\n        } else {\n          assert(drawBuffers.length === 1 && (drawBuffers[0] === 36064 || drawBuffers[0] === 1029), ERR_MULTIPLE_RENDERTARGETS);\n        }\n      }\n      this.drawBuffers = drawBuffers;\n    }\n  }, {\n    key: \"_getAttachmentParameterFallback\",\n    value: function _getAttachmentParameterFallback(pname) {\n      var caps = getFeatures(this.gl);\n      switch (pname) {\n        case 36052:\n          return !caps.WEBGL2 ? 0 : null;\n        case 33298:\n        case 33299:\n        case 33300:\n        case 33301:\n        case 33302:\n        case 33303:\n          return !caps.WEBGL2 ? 8 : null;\n        case 33297:\n          return !caps.WEBGL2 ? 5125 : null;\n        case 33296:\n          return !caps.WEBGL2 && !caps.EXT_sRGB ? 9729 : null;\n        default:\n          return null;\n      }\n    }\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return this.gl.createFramebuffer();\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle() {\n      this.gl.deleteFramebuffer(this.handle);\n    }\n  }, {\n    key: \"_bindHandle\",\n    value: function _bindHandle(handle) {\n      return this.gl.bindFramebuffer(36160, handle);\n    }\n  }], [{\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var colorBufferFloat = options.colorBufferFloat,\n        colorBufferHalfFloat = options.colorBufferHalfFloat;\n      var supported = true;\n      if (colorBufferFloat) {\n        supported = Boolean(gl.getExtension('EXT_color_buffer_float') || gl.getExtension('WEBGL_color_buffer_float') || gl.getExtension('OES_texture_float'));\n      }\n      if (colorBufferHalfFloat) {\n        supported = supported && Boolean(gl.getExtension('EXT_color_buffer_float') || gl.getExtension('EXT_color_buffer_half_float'));\n      }\n      return supported;\n    }\n  }, {\n    key: \"getDefaultFramebuffer\",\n    value: function getDefaultFramebuffer(gl) {\n      gl.luma = gl.luma || {};\n      gl.luma.defaultFramebuffer = gl.luma.defaultFramebuffer || new Framebuffer(gl, {\n        id: 'default-framebuffer',\n        handle: null,\n        attachments: {}\n      });\n      return gl.luma.defaultFramebuffer;\n    }\n  }]);\n  return Framebuffer;\n}(Resource, Symbol.toStringTag);\nexport { Framebuffer as default };\nfunction mapIndexToCubeMapFace(layer) {\n  return layer < 34069 ? layer + 34069 : layer;\n}\nfunction _getFrameBufferStatus(status) {\n  var STATUS = Framebuffer.STATUS || {};\n  return STATUS[status] || \"Framebuffer error \".concat(status);\n}\nexport var FRAMEBUFFER_ATTACHMENT_PARAMETERS = [36049, 36048, 33296, 33298, 33299, 33300, 33301, 33302, 33303];\nFramebuffer.ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;","map":{"version":3,"names":["getWebGL2Context","assertWebGL2Context","log","Resource","Texture2D","Renderbuffer","clear","clearBuffer","copyToDataUrl","getFeatures","getKey","assert","ERR_MULTIPLE_RENDERTARGETS","Framebuffer","_Resource","_Symbol$toStringTag","_inherits","_super","_createSuper","gl","_this","_classCallCheck","opts","arguments","length","undefined","call","width","height","attachments","readBuffer","drawBuffers","ownResources","initialize","Object","seal","_assertThisInitialized","_createClass","key","get","gl2","getParameter","MAX_COLOR_ATTACHMENTS","MAX_DRAW_BUFFERS","value","_ref","_ref$width","_ref$height","_ref$attachments","_ref$color","color","_ref$depth","depth","_ref$stencil","stencil","_ref$check","check","_ref$readBuffer","_ref$drawBuffers","attachment","target","object","Array","isArray","resize","_createDefaultAttachments","update","clearAttachments","checkStatus","_delete","_iterator","_createForOfIteratorHelper","_step","s","n","done","resource","delete","err","e","f","_get","_getPrototypeOf","prototype","_ref2","_ref2$attachments","_ref2$clearAttachment","_ref2$resizeAttachmen","resizeAttachments","attach","prevHandle","bindFramebuffer","handle","_setReadBuffer","_setDrawBuffers","options","drawingBufferWidth","drawingBufferHeight","concat","id","attachmentPoint","_this2","_ref6","_ref6$clearAttachment","_ref6$resizeAttachmen","newAttachments","keys","forEach","assign","Number","descriptor","_unattach","_attachRenderbuffer","renderbuffer","_descriptor","_slicedToArray","texture","_descriptor$","layer","_descriptor$2","level","_attachTexture","filter","status","getStatus","Error","_getFrameBufferStatus","checkFramebufferStatus","_this3","_options$drawBuffers","drawBuffer","readPixels","error","readPixelsToBuffer","copyToImage","copyToTexture","blit","invalidate","_ref3","_ref3$attachments","_ref3$x","x","_ref3$y","y","invalidateAll","invalidateFramebuffer","getAttachmentParameter","pname","_getAttachmentParameterFallback","getFramebufferAttachmentParameter","getAttachmentParameters","parameters","constructor","ATTACHMENT_PARAMETERS","values","_iterator2","_step2","getParameters","_i","_attachments","attachmentName","show","window","open","logLevel","message","image","targetMaxHeight","bind","_ref7","_ref7$target","unbind","_ref8","_ref8$target","defaultAttachments","_parameters","pixels","format","type","mipmaps","_defineProperty","push","oldAttachment","framebufferRenderbuffer","framebufferTexture2D","_ref4","_ref4$attachment","_ref5","_ref5$attachment","bindTexture","framebufferTextureLayer","face","mapIndexToCubeMapFace","ext","getExtension","drawBuffersWEBGL","caps","WEBGL2","EXT_sRGB","_createHandle","createFramebuffer","_deleteHandle","deleteFramebuffer","_bindHandle","isSupported","colorBufferFloat","colorBufferHalfFloat","supported","Boolean","getDefaultFramebuffer","luma","defaultFramebuffer","Symbol","toStringTag","default","STATUS","FRAMEBUFFER_ATTACHMENT_PARAMETERS"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@luma.gl/webgl/src/classes/framebuffer.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {getWebGL2Context, assertWebGL2Context, log} from '@luma.gl/gltools';\nimport Resource from './resource';\nimport Texture2D from './texture-2d';\nimport Renderbuffer from './renderbuffer';\nimport {clear, clearBuffer} from './clear';\nimport {copyToDataUrl} from './copy-and-blit.js';\n\nimport {getFeatures} from '../features';\nimport {getKey} from '../webgl-utils/constants-to-keys';\nimport {assert} from '../utils/assert';\n\nconst ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';\n\nexport default class Framebuffer extends Resource {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'Framebuffer';\n  }\n  static isSupported(gl, options = {}) {\n    const {\n      colorBufferFloat, // Whether floating point textures can be rendered and read\n      colorBufferHalfFloat // Whether half float textures can be rendered and read\n    } = options;\n    let supported = true;\n\n    if (colorBufferFloat) {\n      supported = Boolean(\n        // WebGL 2\n        gl.getExtension('EXT_color_buffer_float') ||\n          // WebGL 1, not exposed on all platforms\n          gl.getExtension('WEBGL_color_buffer_float') ||\n          // WebGL 1, implicitly enables float render targets https://www.khronos.org/registry/webgl/extensions/OES_texture_float/\n          gl.getExtension('OES_texture_float')\n      );\n    }\n\n    if (colorBufferHalfFloat) {\n      supported =\n        supported &&\n        Boolean(\n          // WebGL 2\n          gl.getExtension('EXT_color_buffer_float') ||\n            // WebGL 1\n            gl.getExtension('EXT_color_buffer_half_float')\n        );\n    }\n\n    return supported;\n  }\n\n  // Create a Framebuffer wrapper for the default framebuffer (target === null)\n  static getDefaultFramebuffer(gl) {\n    gl.luma = gl.luma || {};\n    gl.luma.defaultFramebuffer =\n      gl.luma.defaultFramebuffer ||\n      new Framebuffer(gl, {\n        id: 'default-framebuffer',\n        handle: null,\n        attachments: {}\n      });\n    // TODO - can we query for and get a handle to the GL.FRONT renderbuffer?\n    return gl.luma.defaultFramebuffer;\n  }\n\n  get MAX_COLOR_ATTACHMENTS() {\n    const gl2 = assertWebGL2Context(this.gl);\n    return gl2.getParameter(gl2.MAX_COLOR_ATTACHMENTS);\n  }\n\n  get MAX_DRAW_BUFFERS() {\n    const gl2 = assertWebGL2Context(this.gl);\n    return gl2.getParameter(gl2.MAX_DRAW_BUFFERS);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    // Public members\n    this.width = null;\n    this.height = null;\n    this.attachments = {};\n    this.readBuffer = GL.COLOR_ATTACHMENT0;\n    this.drawBuffers = [GL.COLOR_ATTACHMENT0];\n    this.ownResources = [];\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  get color() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get texture() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get depth() {\n    return (\n      this.attachments[GL.DEPTH_ATTACHMENT] || this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] || null\n    );\n  }\n\n  get stencil() {\n    return (\n      this.attachments[GL.STENCIL_ATTACHMENT] ||\n      this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] ||\n      null\n    );\n  }\n\n  initialize({\n    width = 1,\n    height = 1,\n    attachments = null,\n    color = true,\n    depth = true,\n    stencil = false,\n    check = true,\n    readBuffer = undefined,\n    drawBuffers = undefined\n  }) {\n    assert(width >= 0 && height >= 0, 'Width and height need to be integers');\n\n    // Store actual width and height for diffing\n    this.width = width;\n    this.height = height;\n\n    // Resize any provided attachments - note that resize only resizes if needed\n    // Note: A framebuffer has no separate size, it is defined by its attachments (which must agree)\n    if (attachments) {\n      for (const attachment in attachments) {\n        const target = attachments[attachment];\n        const object = Array.isArray(target) ? target[0] : target;\n        object.resize({width, height});\n      }\n    } else {\n      // Create any requested default attachments\n      attachments = this._createDefaultAttachments(color, depth, stencil, width, height);\n    }\n\n    this.update({clearAttachments: true, attachments, readBuffer, drawBuffers});\n\n    // Checks that framebuffer was properly set up, if not, throws an explanatory error\n    if (attachments && check) {\n      this.checkStatus();\n    }\n  }\n\n  delete() {\n    for (const resource of this.ownResources) {\n      resource.delete();\n    }\n    super.delete();\n    return this;\n  }\n\n  update({\n    attachments = {},\n    readBuffer,\n    drawBuffers,\n    clearAttachments = false,\n    resizeAttachments = true\n  }) {\n    this.attach(attachments, {clearAttachments, resizeAttachments});\n\n    const {gl} = this;\n    // Multiple render target support, set read buffer and draw buffers\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    if (readBuffer) {\n      this._setReadBuffer(readBuffer);\n    }\n    if (drawBuffers) {\n      this._setDrawBuffers(drawBuffers);\n    }\n    // @ts-ignore\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // Attachment resize is expected to be a noop if size is same\n  resize(options = {}) {\n    let {width, height} = options;\n    // for default framebuffer, just update the stored size\n    if (this.handle === null) {\n      assert(width === undefined && height === undefined);\n      this.width = this.gl.drawingBufferWidth;\n      this.height = this.gl.drawingBufferHeight;\n      return this;\n    }\n\n    if (width === undefined) {\n      width = this.gl.drawingBufferWidth;\n    }\n    if (height === undefined) {\n      height = this.gl.drawingBufferHeight;\n    }\n\n    if (width !== this.width && height !== this.height) {\n      log.log(2, `Resizing framebuffer ${this.id} to ${width}x${height}`)();\n    }\n    for (const attachmentPoint in this.attachments) {\n      this.attachments[attachmentPoint].resize({width, height});\n    }\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  // Attach from a map of attachments\n  attach(attachments, {clearAttachments = false, resizeAttachments = true} = {}) {\n    const newAttachments = {};\n\n    // Any current attachments need to be removed, add null values to map\n    if (clearAttachments) {\n      Object.keys(this.attachments).forEach(key => {\n        newAttachments[key] = null;\n      });\n    }\n\n    // Overlay the new attachments\n    Object.assign(newAttachments, attachments);\n\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    // Walk the attachments\n    for (const key in newAttachments) {\n      // Ensure key is not undefined\n      assert(key !== undefined, 'Misspelled framebuffer binding point?');\n\n      const attachment = Number(key);\n\n      const descriptor = newAttachments[attachment];\n      let object = descriptor;\n      if (!object) {\n        this._unattach(attachment);\n      } else if (object instanceof Renderbuffer) {\n        this._attachRenderbuffer({attachment, renderbuffer: object});\n      } else if (Array.isArray(descriptor)) {\n        const [texture, layer = 0, level = 0] = descriptor;\n        object = texture;\n        this._attachTexture({attachment, texture, layer, level});\n      } else {\n        this._attachTexture({attachment, texture: object, layer: 0, level: 0});\n      }\n\n      // Resize objects\n      if (resizeAttachments && object) {\n        object.resize({width: this.width, height: this.height});\n      }\n    }\n\n    // @ts-ignore\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    // Assign to attachments and remove any nulls to get a clean attachment map\n    Object.assign(this.attachments, attachments);\n    Object.keys(this.attachments)\n      .filter(key => !this.attachments[key])\n      .forEach(key => {\n        delete this.attachments[key];\n      });\n  }\n\n  checkStatus() {\n    const {gl} = this;\n    const status = this.getStatus();\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n      throw new Error(_getFrameBufferStatus(status));\n    }\n    return this;\n  }\n\n  getStatus() {\n    const {gl} = this;\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    const status = gl.checkFramebufferStatus(GL.FRAMEBUFFER);\n    // @ts-ignore\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n    return status;\n  }\n\n  clear(options = {}) {\n    const {color, depth, stencil, drawBuffers = []} = options;\n\n    // Bind framebuffer and delegate to global clear functions\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    if (color || depth || stencil) {\n      clear(this.gl, {color, depth, stencil});\n    }\n\n    drawBuffers.forEach((value, drawBuffer) => {\n      clearBuffer(this.gl, {drawBuffer, value});\n    });\n\n    // @ts-ignore\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // NOTE: Slow requires roundtrip to GPU\n  // App can provide pixelArray or have it auto allocated by this method\n  // @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,\n  //  newly allocated by this method unless provided by app.\n  readPixels(opts = {}) {\n    log.error(\n      'Framebuffer.readPixels() is no logner supported, use readPixelsToArray(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads data into provided buffer object asynchronously\n  // This function doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.\n  readPixelsToBuffer(opts = {}) {\n    log.error(\n      'Framebuffer.readPixelsToBuffer()is no logner supported, use readPixelsToBuffer(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads pixels as a dataUrl\n  copyToDataUrl(opts = {}) {\n    log.error(\n      'Framebuffer.copyToDataUrl() is no logner supported, use copyToDataUrl(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads pixels into an HTML Image\n  copyToImage(opts = {}) {\n    log.error('Framebuffer.copyToImage() is no logner supported, use copyToImage(framebuffer)')();\n    return null;\n  }\n\n  // copyToFramebuffer({width, height}) {\n  //   const scaleX = width / this.width;\n  //   const scaleY = height / this.height;\n  //   const scale = Math.min(scaleX, scaleY);\n  //   width = width * scale;\n  //   height = height * scale;\n  //   const scaledFramebuffer = new Framebuffer(this.gl, {width, height});\n  //   this.blit();\n  // }\n\n  // Copy a rectangle from a framebuffer attachment into a texture (at an offset)\n  // NOTE: assumes texture has enough storage allocated\n  // eslint-disable-next-line complexity\n  copyToTexture(opts = {}) {\n    log.error(\n      'Framebuffer.copyToTexture({...}) is no logner supported, use copyToTexture(source, target, opts})'\n    )();\n    return null;\n  }\n\n  // WEBGL2 INTERFACE\n\n  // Copies a rectangle of pixels between framebuffers\n  // eslint-disable-next-line complexity\n  blit(opts = {}) {\n    log.error('Framebuffer.blit({...}) is no logner supported, use blit(source, target, opts)')();\n    return null;\n  }\n\n  // signals to the GL that it need not preserve all pixels of a specified region of the framebuffer\n  invalidate({attachments = [], x = 0, y = 0, width, height}) {\n    const gl2 = assertWebGL2Context(this.gl);\n    const prevHandle = gl2.bindFramebuffer(GL.READ_FRAMEBUFFER, this.handle);\n    const invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;\n    if (invalidateAll) {\n      gl2.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments);\n    } else {\n      // TODO - why does type checking fail on this line\n      // @ts-ignore\n      gl2.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments, x, y, width, height);\n    }\n    // @ts-ignore\n    gl2.bindFramebuffer(GL.READ_FRAMEBUFFER, prevHandle);\n    return this;\n  }\n\n  // Return the value for `pname` of the specified attachment.\n  // The type returned is the type of the requested pname\n  getAttachmentParameter(attachment, pname, keys) {\n    let value = this._getAttachmentParameterFallback(pname);\n    if (value === null) {\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n      value = this.gl.getFramebufferAttachmentParameter(GL.FRAMEBUFFER, attachment, pname);\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, null);\n    }\n    if (keys && value > 1000) {\n      // @ts-ignore\n      value = getKey(this.gl, value);\n    }\n    return value;\n  }\n\n  getAttachmentParameters(\n    attachment = GL.COLOR_ATTACHMENT0,\n    keys,\n    // @ts-ignore\n    parameters = this.constructor.ATTACHMENT_PARAMETERS || []\n  ) {\n    const values = {};\n    for (const pname of parameters) {\n      const key = keys ? getKey(this.gl, pname) : pname;\n      values[key] = this.getAttachmentParameter(attachment, pname, keys);\n    }\n    return values;\n  }\n\n  getParameters(keys = true) {\n    const attachments = Object.keys(this.attachments);\n    // if (this === this.gl.luma.defaultFramebuffer) {\n    //   attachments = [GL.COLOR_ATTACHMENT0, GL.DEPTH_STENCIL_ATTACHMENT];\n    // }\n    const parameters = {};\n    for (const attachmentName of attachments) {\n      const attachment = Number(attachmentName);\n      const key = keys ? getKey(this.gl, attachment) : attachment;\n      parameters[key] = this.getAttachmentParameters(attachment, keys);\n    }\n    return parameters;\n  }\n\n  // DEBUG\n\n  // Note: Will only work when called in an event handler\n  show() {\n    if (typeof window !== 'undefined') {\n      window.open(copyToDataUrl(this), 'luma-debug-texture');\n    }\n    return this;\n  }\n\n  log(logLevel = 0, message = '') {\n    if (logLevel > log.level || typeof window === 'undefined') {\n      return this;\n    }\n    message = message || `Framebuffer ${this.id}`;\n    const image = copyToDataUrl(this, {targetMaxHeight: 100});\n    // @ts-expect-error\n    log.image({logLevel, message, image}, message)();\n    return this;\n  }\n\n  // WEBGL INTERFACE\n  bind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, this.handle);\n    return this;\n  }\n\n  unbind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, null);\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _createDefaultAttachments(color, depth, stencil, width, height) {\n    let defaultAttachments = null;\n\n    // Add a color buffer if requested and not supplied\n    if (color) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.COLOR_ATTACHMENT0] = new Texture2D(this.gl, {\n        id: `${this.id}-color0`,\n        pixels: null, // reserves texture memory, but texels are undefined\n        format: GL.RGBA,\n        type: GL.UNSIGNED_BYTE,\n        width,\n        height,\n        // Note: Mipmapping can be disabled by texture resource when we resize the texture\n        // to a non-power-of-two dimenstion (NPOT texture) under WebGL1. To have consistant\n        // behavior we always disable mipmaps.\n        mipmaps: false,\n        // Set MIN and MAG filtering parameters so mipmaps are not used in sampling.\n        // Use LINEAR so subpixel algos like fxaa work.\n        // Set WRAP modes that support NPOT textures too.\n        parameters: {\n          [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n        }\n      });\n      // track to delete later\n      this.ownResources.push(defaultAttachments[GL.COLOR_ATTACHMENT0]);\n    }\n\n    if (depth && stencil) {\n      // TODO - handle separate stencil\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_STENCIL_ATTACHMENT] = new Renderbuffer(this.gl, {\n        id: `${this.id}-depth-stencil`,\n        format: GL.DEPTH24_STENCIL8,\n        width,\n        height: 111\n      });\n      // track to delete later\n      this.ownResources.push(defaultAttachments[GL.DEPTH_STENCIL_ATTACHMENT]);\n      // TODO - optional texture\n      // new Texture2D(this.gl, {\n      //   id: `${this.id}-depth-stencil`,\n      //   format: GL.DEPTH24_STENCIL8,\n      //   dataFormat: GL.DEPTH_STENCIL,\n      //   type: GL.UNSIGNED_INT_24_8,\n      //   width,\n      //   height,\n      //   mipmaps: false\n      // });\n    } else if (depth) {\n      // Add a depth buffer if requested and not supplied\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_ATTACHMENT] = new Renderbuffer(this.gl, {\n        id: `${this.id}-depth`,\n        format: GL.DEPTH_COMPONENT16,\n        width,\n        height\n      });\n      // track to delete later\n      this.ownResources.push(defaultAttachments[GL.DEPTH_ATTACHMENT]);\n    } else if (stencil) {\n      // TODO - handle separate stencil\n      assert(false);\n    }\n\n    return defaultAttachments;\n  }\n\n  _unattach(attachment) {\n    const oldAttachment = this.attachments[attachment];\n    if (!oldAttachment) {\n      return;\n    }\n    if (oldAttachment instanceof Renderbuffer) {\n      // render buffer\n      this.gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, null);\n    } else {\n      // Must be a texture attachment\n      this.gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, null, 0);\n    }\n    delete this.attachments[attachment];\n  }\n\n  _attachRenderbuffer({attachment = GL.COLOR_ATTACHMENT0, renderbuffer}) {\n    const {gl} = this;\n    // TODO - is the bind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, renderbuffer.handle);\n    gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, renderbuffer.handle);\n    // TODO - is the unbind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n\n    this.attachments[attachment] = renderbuffer;\n  }\n\n  // layer = 0 - index into Texture2DArray and Texture3D or face for `TextureCubeMap`\n  // level = 0 - mipmapLevel (must be 0 in WebGL1)\n  _attachTexture({attachment = GL.COLOR_ATTACHMENT0, texture, layer, level}) {\n    const {gl} = this;\n    gl.bindTexture(texture.target, texture.handle);\n\n    switch (texture.target) {\n      case GL.TEXTURE_2D_ARRAY:\n      case GL.TEXTURE_3D:\n        const gl2 = assertWebGL2Context(gl);\n        gl2.framebufferTextureLayer(GL.FRAMEBUFFER, attachment, texture.target, level, layer);\n        break;\n\n      case GL.TEXTURE_CUBE_MAP:\n        // layer must be a cubemap face (or if index, converted to cube map face)\n        const face = mapIndexToCubeMapFace(layer);\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, face, texture.handle, level);\n        break;\n\n      case GL.TEXTURE_2D:\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, texture.handle, level);\n        break;\n\n      default:\n        assert(false, 'Illegal texture type');\n    }\n\n    gl.bindTexture(texture.target, null);\n    this.attachments[attachment] = texture;\n  }\n\n  // Expects framebuffer to be bound\n  _setReadBuffer(readBuffer) {\n    const gl2 = getWebGL2Context(this.gl);\n    if (gl2) {\n      gl2.readBuffer(readBuffer);\n    } else {\n      // Setting to color attachment 0 is a noop, so allow it in WebGL1\n      assert(\n        readBuffer === GL.COLOR_ATTACHMENT0 || readBuffer === GL.BACK,\n        ERR_MULTIPLE_RENDERTARGETS\n      );\n    }\n    this.readBuffer = readBuffer;\n  }\n\n  // Expects framebuffer to be bound\n  _setDrawBuffers(drawBuffers) {\n    const {gl} = this;\n    const gl2 = assertWebGL2Context(gl);\n    if (gl2) {\n      gl2.drawBuffers(drawBuffers);\n    } else {\n      // TODO - is this not handled by polyfills?\n      const ext = gl.getExtension('WEBGL_draw_buffers');\n      if (ext) {\n        ext.drawBuffersWEBGL(drawBuffers);\n      } else {\n        // Setting a single draw buffer to color attachment 0 is a noop, allow in WebGL1\n        assert(\n          drawBuffers.length === 1 &&\n            (drawBuffers[0] === GL.COLOR_ATTACHMENT0 || drawBuffers[0] === GL.BACK),\n          ERR_MULTIPLE_RENDERTARGETS\n        );\n      }\n    }\n    this.drawBuffers = drawBuffers;\n  }\n\n  // Attempt to provide workable defaults for WebGL2 symbols under WebGL1\n  // null means OK to query\n  // TODO - move to webgl1 polyfills\n  /* eslint-disable complexity */\n  _getAttachmentParameterFallback(pname) {\n    const caps = getFeatures(this.gl);\n\n    switch (pname) {\n      case GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: // GLint\n        return !caps.WEBGL2 ? 0 : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: // GLint\n        return !caps.WEBGL2 ? 8 : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: // GLenum\n        return !caps.WEBGL2 ? GL.UNSIGNED_INT : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:\n        return !caps.WEBGL2 && !caps.EXT_sRGB ? GL.LINEAR : null;\n      default:\n        return null;\n    }\n  }\n  /* eslint-enable complexity */\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createFramebuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteFramebuffer(this.handle);\n  }\n\n  _bindHandle(handle) {\n    return this.gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  }\n}\n\n// PUBLIC METHODS\n\n// Map an index to a cube map face constant\nfunction mapIndexToCubeMapFace(layer) {\n  // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)\n  // if smaller assume layer is index, otherwise assume it is already a cube map face constant\n  return layer < GL.TEXTURE_CUBE_MAP_POSITIVE_X ? layer + GL.TEXTURE_CUBE_MAP_POSITIVE_X : layer;\n}\n\n// Helper METHODS\n// Get a string describing the framebuffer error if installed\nfunction _getFrameBufferStatus(status) {\n  // Use error mapping if installed\n  // @ts-ignore\n  const STATUS = Framebuffer.STATUS || {};\n  return STATUS[status] || `Framebuffer error ${status}`;\n}\n\nexport const FRAMEBUFFER_ATTACHMENT_PARAMETERS = [\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, // WebGLRenderbuffer or WebGLTexture\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, // GL.RENDERBUFFER, GL.TEXTURE, GL.NONE\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, // GL.TEXTURE_CUBE_MAP_POSITIVE_X, etc.\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, // GLint\n  // EXT_sRGB or WebGL2\n  GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, // GL.LINEAR, GL.SRBG\n  // WebGL2\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE // GLint\n  // GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE\n  // GL.FLOAT, GL.INT, GL.UNSIGNED_INT, GL.SIGNED_NORMALIZED, OR GL.UNSIGNED_NORMALIZED.\n];\n\nFramebuffer.ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}