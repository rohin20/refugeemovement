{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Pass from './pass';\nimport { clear, setParameters, withParameters, cssToDeviceRatio } from '@luma.gl/core';\nvar LayersPass = /*#__PURE__*/function (_Pass) {\n  _inherits(LayersPass, _Pass);\n  var _super = _createSuper(LayersPass);\n  function LayersPass() {\n    var _this;\n    _classCallCheck(this, LayersPass);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"_lastRenderIndex\", -1);\n    return _this;\n  }\n  _createClass(LayersPass, [{\n    key: \"render\",\n    value: function render(options) {\n      var gl = this.gl;\n      setParameters(gl, {\n        framebuffer: options.target\n      });\n      return this._drawLayers(options);\n    }\n  }, {\n    key: \"_drawLayers\",\n    value: function _drawLayers(options) {\n      var target = options.target,\n        moduleParameters = options.moduleParameters,\n        viewports = options.viewports,\n        views = options.views,\n        onViewportActive = options.onViewportActive,\n        _options$clearStack = options.clearStack,\n        clearStack = _options$clearStack === void 0 ? true : _options$clearStack,\n        _options$clearCanvas = options.clearCanvas,\n        clearCanvas = _options$clearCanvas === void 0 ? true : _options$clearCanvas;\n      options.pass = options.pass || 'unknown';\n      var gl = this.gl;\n      if (clearCanvas) {\n        clearGLCanvas(gl);\n      }\n      if (clearStack) {\n        this._lastRenderIndex = -1;\n      }\n      var renderStats = [];\n      var _iterator = _createForOfIteratorHelper(viewports),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var viewport = _step.value;\n          var view = views && views[viewport.id];\n          onViewportActive(viewport);\n          var drawLayerParams = this._getDrawLayerParams(viewport, options);\n          var subViewports = viewport.subViewports || [viewport];\n          var _iterator2 = _createForOfIteratorHelper(subViewports),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var subViewport = _step2.value;\n              var stats = this._drawLayersInViewport(gl, {\n                target: target,\n                moduleParameters: moduleParameters,\n                viewport: subViewport,\n                view: view,\n                pass: options.pass,\n                layers: options.layers\n              }, drawLayerParams);\n              renderStats.push(stats);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return renderStats;\n    }\n  }, {\n    key: \"_getDrawLayerParams\",\n    value: function _getDrawLayerParams(viewport, _ref) {\n      var layers = _ref.layers,\n        pass = _ref.pass,\n        layerFilter = _ref.layerFilter,\n        cullRect = _ref.cullRect,\n        effects = _ref.effects,\n        moduleParameters = _ref.moduleParameters;\n      var drawLayerParams = [];\n      var indexResolver = layerIndexResolver(this._lastRenderIndex + 1);\n      var drawContext = {\n        layer: layers[0],\n        viewport: viewport,\n        isPicking: pass.startsWith('picking'),\n        renderPass: pass,\n        cullRect: cullRect\n      };\n      var layerFilterCache = {};\n      for (var layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n        var layer = layers[layerIndex];\n        var shouldDrawLayer = this._shouldDrawLayer(layer, drawContext, layerFilter, layerFilterCache);\n        var layerParam = {\n          shouldDrawLayer: shouldDrawLayer\n        };\n        if (shouldDrawLayer) {\n          layerParam.layerRenderIndex = indexResolver(layer, shouldDrawLayer);\n          layerParam.moduleParameters = this._getModuleParameters(layer, effects, pass, moduleParameters);\n          layerParam.layerParameters = this.getLayerParameters(layer, layerIndex, viewport);\n        }\n        drawLayerParams[layerIndex] = layerParam;\n      }\n      return drawLayerParams;\n    }\n  }, {\n    key: \"_drawLayersInViewport\",\n    value: function _drawLayersInViewport(gl, _ref2, drawLayerParams) {\n      var layers = _ref2.layers,\n        globalModuleParameters = _ref2.moduleParameters,\n        pass = _ref2.pass,\n        target = _ref2.target,\n        viewport = _ref2.viewport,\n        view = _ref2.view;\n      var glViewport = getGLViewport(gl, {\n        moduleParameters: globalModuleParameters,\n        target: target,\n        viewport: viewport\n      });\n      if (view && view.props.clear) {\n        var clearOpts = view.props.clear === true ? {\n          color: true,\n          depth: true\n        } : view.props.clear;\n        withParameters(gl, {\n          scissorTest: true,\n          scissor: glViewport\n        }, function () {\n          return clear(gl, clearOpts);\n        });\n      }\n      var renderStatus = {\n        totalCount: layers.length,\n        visibleCount: 0,\n        compositeCount: 0,\n        pickableCount: 0\n      };\n      setParameters(gl, {\n        viewport: glViewport\n      });\n      for (var layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n        var layer = layers[layerIndex];\n        var _drawLayerParams$laye = drawLayerParams[layerIndex],\n          shouldDrawLayer = _drawLayerParams$laye.shouldDrawLayer,\n          layerRenderIndex = _drawLayerParams$laye.layerRenderIndex,\n          moduleParameters = _drawLayerParams$laye.moduleParameters,\n          layerParameters = _drawLayerParams$laye.layerParameters;\n        if (shouldDrawLayer && layer.props.pickable) {\n          renderStatus.pickableCount++;\n        }\n        if (layer.isComposite) {\n          renderStatus.compositeCount++;\n        } else if (shouldDrawLayer) {\n          renderStatus.visibleCount++;\n          this._lastRenderIndex = Math.max(this._lastRenderIndex, layerRenderIndex);\n          moduleParameters.viewport = viewport;\n          try {\n            layer._drawLayer({\n              moduleParameters: moduleParameters,\n              uniforms: {\n                layerIndex: layerRenderIndex\n              },\n              parameters: layerParameters\n            });\n          } catch (err) {\n            layer.raiseError(err, \"drawing \".concat(layer, \" to \").concat(pass));\n          }\n        }\n      }\n      return renderStatus;\n    }\n  }, {\n    key: \"shouldDrawLayer\",\n    value: function shouldDrawLayer(layer) {\n      return true;\n    }\n  }, {\n    key: \"getModuleParameters\",\n    value: function getModuleParameters(layer, effects) {\n      return null;\n    }\n  }, {\n    key: \"getLayerParameters\",\n    value: function getLayerParameters(layer, layerIndex, viewport) {\n      return layer.props.parameters;\n    }\n  }, {\n    key: \"_shouldDrawLayer\",\n    value: function _shouldDrawLayer(layer, drawContext, layerFilter, layerFilterCache) {\n      var shouldDrawLayer = layer.props.visible && this.shouldDrawLayer(layer);\n      if (!shouldDrawLayer) {\n        return false;\n      }\n      drawContext.layer = layer;\n      var parent = layer.parent;\n      while (parent) {\n        if (!parent.props.visible || !parent.filterSubLayer(drawContext)) {\n          return false;\n        }\n        drawContext.layer = parent;\n        parent = parent.parent;\n      }\n      if (layerFilter) {\n        var rootLayerId = drawContext.layer.id;\n        if (!(rootLayerId in layerFilterCache)) {\n          layerFilterCache[rootLayerId] = layerFilter(drawContext);\n        }\n        if (!layerFilterCache[rootLayerId]) {\n          return false;\n        }\n      }\n      layer.activateViewport(drawContext.viewport);\n      return true;\n    }\n  }, {\n    key: \"_getModuleParameters\",\n    value: function _getModuleParameters(layer, effects, pass, overrides) {\n      var _layer$internalState;\n      var moduleParameters = Object.assign(Object.create(((_layer$internalState = layer.internalState) === null || _layer$internalState === void 0 ? void 0 : _layer$internalState.propsInTransition) || layer.props), {\n        autoWrapLongitude: layer.wrapLongitude,\n        viewport: layer.context.viewport,\n        mousePosition: layer.context.mousePosition,\n        pickingActive: 0,\n        devicePixelRatio: cssToDeviceRatio(this.gl)\n      });\n      if (effects) {\n        var _iterator3 = _createForOfIteratorHelper(effects),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var effect = _step3.value;\n            var _effect$getModulePara;\n            Object.assign(moduleParameters, (_effect$getModulePara = effect.getModuleParameters) === null || _effect$getModulePara === void 0 ? void 0 : _effect$getModulePara.call(effect, layer));\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n      return Object.assign(moduleParameters, this.getModuleParameters(layer, effects), overrides);\n    }\n  }]);\n  return LayersPass;\n}(Pass);\nexport { LayersPass as default };\nexport function layerIndexResolver() {\n  var startIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var layerIndices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var resolvers = {};\n  var resolveLayerIndex = function resolveLayerIndex(layer, isDrawn) {\n    var indexOverride = layer.props._offset;\n    var layerId = layer.id;\n    var parentId = layer.parent && layer.parent.id;\n    var index;\n    if (parentId && !(parentId in layerIndices)) {\n      resolveLayerIndex(layer.parent, false);\n    }\n    if (parentId in resolvers) {\n      var resolver = resolvers[parentId] = resolvers[parentId] || layerIndexResolver(layerIndices[parentId], layerIndices);\n      index = resolver(layer, isDrawn);\n      resolvers[layerId] = resolver;\n    } else if (Number.isFinite(indexOverride)) {\n      index = indexOverride + (layerIndices[parentId] || 0);\n      resolvers[layerId] = null;\n    } else {\n      index = startIndex;\n    }\n    if (isDrawn && index >= startIndex) {\n      startIndex = index + 1;\n    }\n    layerIndices[layerId] = index;\n    return index;\n  };\n  return resolveLayerIndex;\n}\nfunction getGLViewport(gl, _ref3) {\n  var moduleParameters = _ref3.moduleParameters,\n    target = _ref3.target,\n    viewport = _ref3.viewport;\n  var useTarget = target && target.id !== 'default-framebuffer';\n  var pixelRatio = moduleParameters && moduleParameters.devicePixelRatio || cssToDeviceRatio(gl);\n  var height = useTarget ? target.height : gl.drawingBufferHeight;\n  var dimensions = viewport;\n  return [dimensions.x * pixelRatio, height - (dimensions.y + dimensions.height) * pixelRatio, dimensions.width * pixelRatio, dimensions.height * pixelRatio];\n}\nfunction clearGLCanvas(gl) {\n  var width = gl.drawingBufferWidth;\n  var height = gl.drawingBufferHeight;\n  setParameters(gl, {\n    viewport: [0, 0, width, height]\n  });\n  gl.clear(16384 | 256);\n}","map":{"version":3,"names":["Pass","clear","setParameters","withParameters","cssToDeviceRatio","LayersPass","_Pass","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","_defineProperty","_assertThisInitialized","_createClass","key","value","render","options","gl","framebuffer","target","_drawLayers","moduleParameters","viewports","views","onViewportActive","_options$clearStack","clearStack","_options$clearCanvas","clearCanvas","pass","clearGLCanvas","_lastRenderIndex","renderStats","_iterator","_createForOfIteratorHelper","_step","s","n","done","viewport","view","id","drawLayerParams","_getDrawLayerParams","subViewports","_iterator2","_step2","subViewport","stats","_drawLayersInViewport","layers","push","err","e","f","_ref","layerFilter","cullRect","effects","indexResolver","layerIndexResolver","drawContext","layer","isPicking","startsWith","renderPass","layerFilterCache","layerIndex","shouldDrawLayer","_shouldDrawLayer","layerParam","layerRenderIndex","_getModuleParameters","layerParameters","getLayerParameters","_ref2","globalModuleParameters","glViewport","getGLViewport","props","clearOpts","color","depth","scissorTest","scissor","renderStatus","totalCount","visibleCount","compositeCount","pickableCount","_drawLayerParams$laye","pickable","isComposite","Math","max","_drawLayer","uniforms","parameters","raiseError","getModuleParameters","visible","parent","filterSubLayer","rootLayerId","activateViewport","overrides","_layer$internalState","Object","assign","create","internalState","propsInTransition","autoWrapLongitude","wrapLongitude","context","mousePosition","pickingActive","devicePixelRatio","_iterator3","_step3","effect","_effect$getModulePara","default","startIndex","undefined","layerIndices","resolvers","resolveLayerIndex","isDrawn","indexOverride","_offset","layerId","parentId","index","resolver","Number","isFinite","_ref3","useTarget","pixelRatio","height","drawingBufferHeight","dimensions","x","y","width","drawingBufferWidth"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/core/src/passes/layers-pass.ts"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport Pass from './pass';\nimport {clear, setParameters, withParameters, cssToDeviceRatio} from '@luma.gl/core';\n\nimport type {Framebuffer} from '@luma.gl/core';\nimport type Viewport from '../viewports/viewport';\nimport type View from '../views/view';\nimport type Layer from '../lib/layer';\nimport type {Effect} from '../lib/effect';\n\nexport type Rect = {x: number; y: number; width: number; height: number};\n\nexport type LayersPassRenderOptions = {\n  target?: Framebuffer;\n  pass: string;\n  layers: Layer[];\n  viewports: Viewport[];\n  onViewportActive: (viewport: Viewport) => void;\n  cullRect?: Rect;\n  views?: Record<string, View>;\n  effects?: Effect[];\n  /** If true, recalculates render index (z) from 0. Set to false if a stack of layers are rendered in multiple passes. */\n  clearStack?: boolean;\n  clearCanvas?: boolean;\n  layerFilter?: (context: FilterContext) => boolean;\n  moduleParameters?: any;\n};\n\ntype DrawLayerParameters = {\n  shouldDrawLayer: boolean;\n  layerRenderIndex?: number;\n  moduleParameters?: any;\n  layerParameters?: any;\n};\n\nexport type FilterContext = {\n  layer: Layer;\n  viewport: Viewport;\n  isPicking: boolean;\n  renderPass: string;\n  cullRect?: Rect;\n};\n\nexport type RenderStats = {\n  totalCount: number;\n  visibleCount: number;\n  compositeCount: number;\n  pickableCount: number;\n};\n\nexport default class LayersPass extends Pass {\n  _lastRenderIndex: number = -1;\n\n  render(options: LayersPassRenderOptions): any {\n    const gl = this.gl;\n\n    setParameters(gl, {framebuffer: options.target});\n    return this._drawLayers(options);\n  }\n\n  // Draw a list of layers in a list of viewports\n  private _drawLayers(options: LayersPassRenderOptions) {\n    const {\n      target,\n      moduleParameters,\n      viewports,\n      views,\n      onViewportActive,\n      clearStack = true,\n      clearCanvas = true\n    } = options;\n    options.pass = options.pass || 'unknown';\n\n    const gl = this.gl;\n    if (clearCanvas) {\n      clearGLCanvas(gl);\n    }\n\n    if (clearStack) {\n      this._lastRenderIndex = -1;\n    }\n\n    const renderStats: RenderStats[] = [];\n\n    for (const viewport of viewports) {\n      const view = views && views[viewport.id];\n\n      // Update context to point to this viewport\n      onViewportActive(viewport);\n\n      const drawLayerParams = this._getDrawLayerParams(viewport, options);\n\n      // render this viewport\n      const subViewports = viewport.subViewports || [viewport];\n      for (const subViewport of subViewports) {\n        const stats = this._drawLayersInViewport(\n          gl,\n          {\n            target,\n            moduleParameters,\n            viewport: subViewport,\n            view,\n            pass: options.pass,\n            layers: options.layers\n          },\n          drawLayerParams\n        );\n        renderStats.push(stats);\n      }\n    }\n    return renderStats;\n  }\n\n  // Resolve the parameters needed to draw each layer\n  // When a viewport contains multiple subviewports (e.g. repeated web mercator map),\n  // this is only done once for the parent viewport\n  private _getDrawLayerParams(\n    viewport: Viewport,\n    {layers, pass, layerFilter, cullRect, effects, moduleParameters}: LayersPassRenderOptions\n  ): DrawLayerParameters[] {\n    const drawLayerParams: DrawLayerParameters[] = [];\n    const indexResolver = layerIndexResolver(this._lastRenderIndex + 1);\n    const drawContext: FilterContext = {\n      layer: layers[0],\n      viewport,\n      isPicking: pass.startsWith('picking'),\n      renderPass: pass,\n      cullRect\n    };\n    const layerFilterCache = {};\n    for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n      const layer = layers[layerIndex];\n      // Check if we should draw layer\n      const shouldDrawLayer = this._shouldDrawLayer(\n        layer,\n        drawContext,\n        layerFilter,\n        layerFilterCache\n      );\n\n      const layerParam: DrawLayerParameters = {\n        shouldDrawLayer\n      };\n\n      if (shouldDrawLayer) {\n        // This is the \"logical\" index for ordering this layer in the stack\n        // used to calculate polygon offsets\n        // It can be the same as another layer\n        layerParam.layerRenderIndex = indexResolver(layer, shouldDrawLayer);\n\n        layerParam.moduleParameters = this._getModuleParameters(\n          layer,\n          effects,\n          pass,\n          moduleParameters\n        );\n        layerParam.layerParameters = this.getLayerParameters(layer, layerIndex, viewport);\n      }\n      drawLayerParams[layerIndex] = layerParam;\n    }\n    return drawLayerParams;\n  }\n\n  // Draws a list of layers in one viewport\n  // TODO - when picking we could completely skip rendering viewports that dont\n  // intersect with the picking rect\n  /* eslint-disable max-depth, max-statements */\n  private _drawLayersInViewport(\n    gl,\n    {layers, moduleParameters: globalModuleParameters, pass, target, viewport, view},\n    drawLayerParams\n  ): RenderStats {\n    const glViewport = getGLViewport(gl, {\n      moduleParameters: globalModuleParameters,\n      target,\n      viewport\n    });\n\n    if (view && view.props.clear) {\n      const clearOpts = view.props.clear === true ? {color: true, depth: true} : view.props.clear;\n      withParameters(\n        gl,\n        {\n          scissorTest: true,\n          scissor: glViewport\n        },\n        () => clear(gl, clearOpts)\n      );\n    }\n\n    // render layers in normal colors\n    const renderStatus = {\n      totalCount: layers.length,\n      visibleCount: 0,\n      compositeCount: 0,\n      pickableCount: 0\n    };\n\n    setParameters(gl, {viewport: glViewport});\n\n    // render layers in normal colors\n    for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n      const layer = layers[layerIndex];\n      const {shouldDrawLayer, layerRenderIndex, moduleParameters, layerParameters} =\n        drawLayerParams[layerIndex];\n\n      // Calculate stats\n      if (shouldDrawLayer && layer.props.pickable) {\n        renderStatus.pickableCount++;\n      }\n      if (layer.isComposite) {\n        renderStatus.compositeCount++;\n      } else if (shouldDrawLayer) {\n        // Draw the layer\n        renderStatus.visibleCount++;\n\n        this._lastRenderIndex = Math.max(this._lastRenderIndex, layerRenderIndex);\n\n        // overwrite layer.context.viewport with the sub viewport\n        moduleParameters.viewport = viewport;\n\n        try {\n          layer._drawLayer({\n            moduleParameters,\n            uniforms: {layerIndex: layerRenderIndex},\n            parameters: layerParameters\n          });\n        } catch (err) {\n          layer.raiseError(err, `drawing ${layer} to ${pass}`);\n        }\n      }\n    }\n\n    return renderStatus;\n  }\n  /* eslint-enable max-depth, max-statements */\n\n  /* Methods for subclass overrides */\n  protected shouldDrawLayer(layer: Layer): boolean {\n    return true;\n  }\n\n  protected getModuleParameters(layer: Layer, effects?: Effect[]): any {\n    return null;\n  }\n\n  protected getLayerParameters(layer: Layer, layerIndex: number, viewport: Viewport): any {\n    return layer.props.parameters;\n  }\n\n  /* Private */\n  private _shouldDrawLayer(\n    layer: Layer,\n    drawContext: FilterContext,\n    layerFilter: ((params: FilterContext) => boolean) | undefined,\n    layerFilterCache: Record<string, boolean>\n  ) {\n    const shouldDrawLayer = layer.props.visible && this.shouldDrawLayer(layer);\n\n    if (!shouldDrawLayer) {\n      return false;\n    }\n\n    drawContext.layer = layer;\n\n    let parent = layer.parent as Layer;\n    while (parent) {\n      // @ts-ignore\n      if (!parent.props.visible || !parent.filterSubLayer(drawContext)) {\n        return false;\n      }\n      drawContext.layer = parent;\n      parent = parent.parent as Layer;\n    }\n\n    if (layerFilter) {\n      const rootLayerId = drawContext.layer.id;\n      if (!(rootLayerId in layerFilterCache)) {\n        layerFilterCache[rootLayerId] = layerFilter(drawContext);\n      }\n      if (!layerFilterCache[rootLayerId]) {\n        return false;\n      }\n    }\n\n    // If a layer is drawn, update its viewportChanged flag\n    layer.activateViewport(drawContext.viewport);\n\n    return true;\n  }\n\n  private _getModuleParameters(\n    layer: Layer,\n    effects: Effect[] | undefined,\n    pass: string,\n    overrides: any\n  ): any {\n    const moduleParameters = Object.assign(\n      Object.create(layer.internalState?.propsInTransition || layer.props),\n      {\n        autoWrapLongitude: layer.wrapLongitude,\n        // @ts-ignore\n        viewport: layer.context.viewport,\n        // @ts-ignore\n        mousePosition: layer.context.mousePosition,\n        pickingActive: 0,\n        devicePixelRatio: cssToDeviceRatio(this.gl)\n      }\n    );\n\n    if (effects) {\n      for (const effect of effects) {\n        Object.assign(moduleParameters, effect.getModuleParameters?.(layer));\n      }\n    }\n\n    return Object.assign(moduleParameters, this.getModuleParameters(layer, effects), overrides);\n  }\n}\n\n// If the _index prop is defined, return a layer index that's relative to its parent\n// Otherwise return the index of the layer among all rendered layers\n// This is done recursively, i.e. if the user overrides a layer's default index,\n// all its descendants will be resolved relative to that index.\n// This implementation assumes that parent layers always appear before its children\n// which is true if the layer array comes from the LayerManager\nexport function layerIndexResolver(\n  startIndex: number = 0,\n  layerIndices: Record<string, number> = {}\n): (layer: Layer, isDrawn: boolean) => number {\n  const resolvers = {};\n\n  const resolveLayerIndex = (layer, isDrawn) => {\n    const indexOverride = layer.props._offset;\n    const layerId = layer.id;\n    const parentId = layer.parent && layer.parent.id;\n\n    let index;\n\n    if (parentId && !(parentId in layerIndices)) {\n      // Populate layerIndices with the parent layer's index\n      resolveLayerIndex(layer.parent, false);\n    }\n\n    if (parentId in resolvers) {\n      const resolver = (resolvers[parentId] =\n        resolvers[parentId] || layerIndexResolver(layerIndices[parentId], layerIndices));\n      index = resolver(layer, isDrawn);\n      resolvers[layerId] = resolver;\n    } else if (Number.isFinite(indexOverride)) {\n      index = indexOverride + (layerIndices[parentId] || 0);\n      // Mark layer as needing its own resolver\n      // We don't actually create it until it's used for the first time\n      resolvers[layerId] = null;\n    } else {\n      index = startIndex;\n    }\n\n    if (isDrawn && index >= startIndex) {\n      startIndex = index + 1;\n    }\n\n    layerIndices[layerId] = index;\n    return index;\n  };\n  return resolveLayerIndex;\n}\n\n// Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\nfunction getGLViewport(\n  gl,\n  {\n    moduleParameters,\n    target,\n    viewport\n  }: {\n    moduleParameters: any;\n    target?: Framebuffer;\n    viewport: Viewport;\n  }\n): [number, number, number, number] {\n  const useTarget = target && target.id !== 'default-framebuffer';\n  const pixelRatio =\n    (moduleParameters && moduleParameters.devicePixelRatio) || cssToDeviceRatio(gl);\n\n  // Default framebuffer is used when writing to canvas\n  const height = useTarget ? target.height : gl.drawingBufferHeight;\n\n  // Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\n  const dimensions = viewport;\n  return [\n    dimensions.x * pixelRatio,\n    height - (dimensions.y + dimensions.height) * pixelRatio,\n    dimensions.width * pixelRatio,\n    dimensions.height * pixelRatio\n  ];\n}\n\nfunction clearGLCanvas(gl: WebGLRenderingContext) {\n  const width = gl.drawingBufferWidth;\n  const height = gl.drawingBufferHeight;\n  // clear depth and color buffers, restoring transparency\n  setParameters(gl, {viewport: [0, 0, width, height]});\n  gl.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}