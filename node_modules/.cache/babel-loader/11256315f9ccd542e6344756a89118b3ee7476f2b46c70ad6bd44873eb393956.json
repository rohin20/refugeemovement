{"ast":null,"code":"import _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { isWebGL2, assertWebGL2Context, withParameters } from '@luma.gl/gltools';\nimport Texture from './texture';\nimport { DATA_FORMAT_CHANNELS, TYPE_SIZES } from './texture-formats';\nimport Buffer from './buffer';\nvar Texture3D = /*#__PURE__*/function (_Texture, _Symbol$toStringTag) {\n  _inherits(Texture3D, _Texture);\n  var _super = _createSuper(Texture3D);\n  function Texture3D(gl) {\n    var _this;\n    _classCallCheck(this, Texture3D);\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    assertWebGL2Context(gl);\n    props = Object.assign({\n      depth: 1\n    }, props, {\n      target: 32879,\n      unpackFlipY: false\n    });\n    _this = _super.call(this, gl, props);\n    _this.initialize(props);\n    Object.seal(_assertThisInitialized(_this));\n    return _this;\n  }\n  _createClass(Texture3D, [{\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return 'Texture3D';\n    }\n  }, {\n    key: \"setImageData\",\n    value: function setImageData(_ref) {\n      var _this2 = this;\n      var _ref$level = _ref.level,\n        level = _ref$level === void 0 ? 0 : _ref$level,\n        _ref$dataFormat = _ref.dataFormat,\n        dataFormat = _ref$dataFormat === void 0 ? 6408 : _ref$dataFormat,\n        width = _ref.width,\n        height = _ref.height,\n        _ref$depth = _ref.depth,\n        depth = _ref$depth === void 0 ? 1 : _ref$depth,\n        _ref$border = _ref.border,\n        border = _ref$border === void 0 ? 0 : _ref$border,\n        format = _ref.format,\n        _ref$type = _ref.type,\n        type = _ref$type === void 0 ? 5121 : _ref$type,\n        _ref$offset = _ref.offset,\n        offset = _ref$offset === void 0 ? 0 : _ref$offset,\n        data = _ref.data,\n        _ref$parameters = _ref.parameters,\n        parameters = _ref$parameters === void 0 ? {} : _ref$parameters;\n      this._trackDeallocatedMemory('Texture');\n      this.gl.bindTexture(this.target, this.handle);\n      withParameters(this.gl, parameters, function () {\n        if (ArrayBuffer.isView(data)) {\n          _this2.gl.texImage3D(_this2.target, level, dataFormat, width, height, depth, border, format, type, data);\n        }\n        if (data instanceof Buffer) {\n          _this2.gl.bindBuffer(35052, data.handle);\n          _this2.gl.texImage3D(_this2.target, level, dataFormat, width, height, depth, border, format, type, offset);\n        }\n      });\n      if (data && data.byteLength) {\n        this._trackAllocatedMemory(data.byteLength, 'Texture');\n      } else {\n        var channels = DATA_FORMAT_CHANNELS[this.dataFormat] || 4;\n        var channelSize = TYPE_SIZES[this.type] || 1;\n        this._trackAllocatedMemory(this.width * this.height * this.depth * channels * channelSize, 'Texture');\n      }\n      this.loaded = true;\n      return this;\n    }\n  }], [{\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      return isWebGL2(gl);\n    }\n  }]);\n  return Texture3D;\n}(Texture, Symbol.toStringTag);\nexport { Texture3D as default };","map":{"version":3,"names":["isWebGL2","assertWebGL2Context","withParameters","Texture","DATA_FORMAT_CHANNELS","TYPE_SIZES","Buffer","Texture3D","_Texture","_Symbol$toStringTag","_inherits","_super","_createSuper","gl","_this","_classCallCheck","props","arguments","length","undefined","Object","assign","depth","target","unpackFlipY","call","initialize","seal","_assertThisInitialized","_createClass","key","get","value","setImageData","_ref","_this2","_ref$level","level","_ref$dataFormat","dataFormat","width","height","_ref$depth","_ref$border","border","format","_ref$type","type","_ref$offset","offset","data","_ref$parameters","parameters","_trackDeallocatedMemory","bindTexture","handle","ArrayBuffer","isView","texImage3D","bindBuffer","byteLength","_trackAllocatedMemory","channels","channelSize","loaded","isSupported","Symbol","toStringTag","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@luma.gl/webgl/src/classes/texture-3d.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {isWebGL2, assertWebGL2Context, withParameters} from '@luma.gl/gltools';\nimport Texture from './texture';\nimport {DATA_FORMAT_CHANNELS, TYPE_SIZES} from './texture-formats';\nimport Buffer from './buffer';\n\nexport default class Texture3D extends Texture {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'Texture3D';\n  }\n\n  static isSupported(gl) {\n    return isWebGL2(gl);\n  }\n\n  constructor(gl, props = {}) {\n    assertWebGL2Context(gl);\n    props = Object.assign({depth: 1}, props, {target: GL.TEXTURE_3D, unpackFlipY: false});\n    super(gl, props);\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n\n  // Image 3D copies from Typed Array or WebGLBuffer\n  setImageData({\n    level = 0,\n    dataFormat = GL.RGBA,\n    width,\n    height,\n    depth = 1,\n    border = 0,\n    format,\n    type = GL.UNSIGNED_BYTE,\n    offset = 0,\n    data,\n    parameters = {}\n  }) {\n    this._trackDeallocatedMemory('Texture');\n\n    this.gl.bindTexture(this.target, this.handle);\n\n    withParameters(this.gl, parameters, () => {\n      if (ArrayBuffer.isView(data)) {\n        // @ts-ignore\n        this.gl.texImage3D(\n          this.target,\n          level,\n          dataFormat,\n          width,\n          height,\n          depth,\n          border,\n          format,\n          type,\n          data\n        );\n      }\n\n      if (data instanceof Buffer) {\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle);\n        // @ts-ignore\n        this.gl.texImage3D(\n          this.target,\n          level,\n          dataFormat,\n          width,\n          height,\n          depth,\n          border,\n          format,\n          type,\n          offset\n        );\n      }\n    });\n\n    if (data && data.byteLength) {\n      this._trackAllocatedMemory(data.byteLength, 'Texture');\n    } else {\n      // NOTE(Tarek): Default to RGBA bytes\n      // @ts-ignore\n      const channels = DATA_FORMAT_CHANNELS[this.dataFormat] || 4;\n      // @ts-ignore\n      const channelSize = TYPE_SIZES[this.type] || 1;\n\n      this._trackAllocatedMemory(\n        this.width * this.height * this.depth * channels * channelSize,\n        'Texture'\n      );\n    }\n\n    this.loaded = true;\n\n    return this;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}