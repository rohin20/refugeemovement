{"ast":null,"code":"import _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, gouraudLighting, picking, COORDINATE_SYSTEM } from '@deck.gl/core';\nimport { Model, Geometry, hasFeatures, FEATURES } from '@luma.gl/core';\nimport PolygonTesselator from './polygon-tesselator';\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  getPolygon: {\n    type: 'accessor',\n    value: function value(f) {\n      return f.polygon;\n    }\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  material: true\n};\nvar ATTRIBUTE_TRANSITION = {\n  enter: function enter(value, chunk) {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\nvar SolidPolygonLayer = /*#__PURE__*/function (_Layer) {\n  _inherits(SolidPolygonLayer, _Layer);\n  var _super = _createSuper(SolidPolygonLayer);\n  function SolidPolygonLayer() {\n    var _this;\n    _classCallCheck(this, SolidPolygonLayer);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"state\", void 0);\n    return _this;\n  }\n  _createClass(SolidPolygonLayer, [{\n    key: \"getShaders\",\n    value: function getShaders(type) {\n      return _get(_getPrototypeOf(SolidPolygonLayer.prototype), \"getShaders\", this).call(this, {\n        vs: type === 'top' ? vsTop : vsSide,\n        fs: fs,\n        defines: {\n          RING_WINDING_ORDER_CW: !this.props._normalize && this.props._windingOrder === 'CCW' ? 0 : 1\n        },\n        modules: [project32, gouraudLighting, picking]\n      });\n    }\n  }, {\n    key: \"wrapLongitude\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var _this2 = this;\n      var _this$context = this.context,\n        gl = _this$context.gl,\n        viewport = _this$context.viewport;\n      var coordinateSystem = this.props.coordinateSystem;\n      if (viewport.isGeospatial && coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n        coordinateSystem = COORDINATE_SYSTEM.LNGLAT;\n      }\n      this.setState({\n        numInstances: 0,\n        polygonTesselator: new PolygonTesselator({\n          preproject: coordinateSystem === COORDINATE_SYSTEM.LNGLAT && viewport.projectFlat.bind(viewport),\n          fp64: this.use64bitPositions(),\n          IndexType: !gl || hasFeatures(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n        })\n      });\n      var attributeManager = this.getAttributeManager();\n      var noAlloc = true;\n      attributeManager.remove(['instancePickingColors']);\n      attributeManager.add({\n        indices: {\n          size: 1,\n          isIndexed: true,\n          update: this.calculateIndices,\n          noAlloc: noAlloc\n        },\n        positions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: ATTRIBUTE_TRANSITION,\n          accessor: 'getPolygon',\n          update: this.calculatePositions,\n          noAlloc: noAlloc,\n          shaderAttributes: {\n            positions: {\n              vertexOffset: 0,\n              divisor: 0\n            },\n            instancePositions: {\n              vertexOffset: 0,\n              divisor: 1\n            },\n            nextPositions: {\n              vertexOffset: 1,\n              divisor: 1\n            }\n          }\n        },\n        vertexValid: {\n          size: 1,\n          divisor: 1,\n          type: 5121,\n          update: this.calculateVertexValid,\n          noAlloc: noAlloc\n        },\n        elevations: {\n          size: 1,\n          transition: ATTRIBUTE_TRANSITION,\n          accessor: 'getElevation',\n          shaderAttributes: {\n            elevations: {\n              divisor: 0\n            },\n            instanceElevations: {\n              divisor: 1\n            }\n          }\n        },\n        fillColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: ATTRIBUTE_TRANSITION,\n          accessor: 'getFillColor',\n          defaultValue: DEFAULT_COLOR,\n          shaderAttributes: {\n            fillColors: {\n              divisor: 0\n            },\n            instanceFillColors: {\n              divisor: 1\n            }\n          }\n        },\n        lineColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: ATTRIBUTE_TRANSITION,\n          accessor: 'getLineColor',\n          defaultValue: DEFAULT_COLOR,\n          shaderAttributes: {\n            lineColors: {\n              divisor: 0\n            },\n            instanceLineColors: {\n              divisor: 1\n            }\n          }\n        },\n        pickingColors: {\n          size: 3,\n          type: 5121,\n          accessor: function accessor(object, _ref) {\n            var index = _ref.index,\n              value = _ref.target;\n            return _this2.encodePickingColor(object && object.__source ? object.__source.index : index, value);\n          },\n          shaderAttributes: {\n            pickingColors: {\n              divisor: 0\n            },\n            instancePickingColors: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(params) {\n      var info = _get(_getPrototypeOf(SolidPolygonLayer.prototype), \"getPickingInfo\", this).call(this, params);\n      var index = info.index;\n      var data = this.props.data;\n      if (data[0] && data[0].__source) {\n        info.object = data.find(function (d) {\n          return d.__source.index === index;\n        });\n      }\n      return info;\n    }\n  }, {\n    key: \"disablePickingIndex\",\n    value: function disablePickingIndex(objectIndex) {\n      var data = this.props.data;\n      if (data[0] && data[0].__source) {\n        for (var i = 0; i < data.length; i++) {\n          if (data[i].__source.index === objectIndex) {\n            this._disablePickingIndex(i);\n          }\n        }\n      } else {\n        this._disablePickingIndex(objectIndex);\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var _this$props = this.props,\n        extruded = _this$props.extruded,\n        filled = _this$props.filled,\n        wireframe = _this$props.wireframe,\n        elevationScale = _this$props.elevationScale;\n      var _this$state = this.state,\n        topModel = _this$state.topModel,\n        sideModel = _this$state.sideModel,\n        polygonTesselator = _this$state.polygonTesselator;\n      var renderUniforms = _objectSpread(_objectSpread({}, uniforms), {}, {\n        extruded: Boolean(extruded),\n        elevationScale: elevationScale\n      });\n      if (sideModel) {\n        sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n        sideModel.setUniforms(renderUniforms);\n        if (wireframe) {\n          sideModel.setDrawMode(3);\n          sideModel.setUniforms({\n            isWireframe: true\n          }).draw();\n        }\n        if (filled) {\n          sideModel.setDrawMode(6);\n          sideModel.setUniforms({\n            isWireframe: false\n          }).draw();\n        }\n      }\n      if (topModel) {\n        topModel.setVertexCount(polygonTesselator.vertexCount);\n        topModel.setUniforms(renderUniforms).draw();\n      }\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(updateParams) {\n      _get(_getPrototypeOf(SolidPolygonLayer.prototype), \"updateState\", this).call(this, updateParams);\n      this.updateGeometry(updateParams);\n      var props = updateParams.props,\n        oldProps = updateParams.oldProps,\n        changeFlags = updateParams.changeFlags;\n      var attributeManager = this.getAttributeManager();\n      var regenerateModels = changeFlags.extensionsChanged || props.filled !== oldProps.filled || props.extruded !== oldProps.extruded;\n      if (regenerateModels) {\n        var _this$state$models;\n        (_this$state$models = this.state.models) === null || _this$state$models === void 0 ? void 0 : _this$state$models.forEach(function (model) {\n          return model.delete();\n        });\n        this.setState(this._getModels(this.context.gl));\n        attributeManager.invalidateAll();\n      }\n    }\n  }, {\n    key: \"updateGeometry\",\n    value: function updateGeometry(_ref3) {\n      var props = _ref3.props,\n        oldProps = _ref3.oldProps,\n        changeFlags = _ref3.changeFlags;\n      var geometryConfigChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon);\n      if (geometryConfigChanged) {\n        var polygonTesselator = this.state.polygonTesselator;\n        var buffers = props.data.attributes || {};\n        polygonTesselator.updateGeometry({\n          data: props.data,\n          normalize: props._normalize,\n          geometryBuffer: buffers.getPolygon,\n          buffers: buffers,\n          getGeometry: props.getPolygon,\n          positionFormat: props.positionFormat,\n          wrapLongitude: props.wrapLongitude,\n          resolution: this.context.viewport.resolution,\n          fp64: this.use64bitPositions(),\n          dataChanged: changeFlags.dataChanged\n        });\n        this.setState({\n          numInstances: polygonTesselator.instanceCount,\n          startIndices: polygonTesselator.vertexStarts\n        });\n        if (!changeFlags.dataChanged) {\n          this.getAttributeManager().invalidateAll();\n        }\n      }\n    }\n  }, {\n    key: \"_getModels\",\n    value: function _getModels(gl) {\n      var _this$props2 = this.props,\n        id = _this$props2.id,\n        filled = _this$props2.filled,\n        extruded = _this$props2.extruded;\n      var topModel;\n      var sideModel;\n      if (filled) {\n        var shaders = this.getShaders('top');\n        shaders.defines.NON_INSTANCED_MODEL = 1;\n        topModel = new Model(gl, _objectSpread(_objectSpread({}, shaders), {}, {\n          id: \"\".concat(id, \"-top\"),\n          drawMode: 4,\n          attributes: {\n            vertexPositions: new Float32Array([0, 1])\n          },\n          uniforms: {\n            isWireframe: false,\n            isSideVertex: false\n          },\n          vertexCount: 0,\n          isIndexed: true\n        }));\n      }\n      if (extruded) {\n        sideModel = new Model(gl, _objectSpread(_objectSpread({}, this.getShaders('side')), {}, {\n          id: \"\".concat(id, \"-side\"),\n          geometry: new Geometry({\n            drawMode: 1,\n            vertexCount: 4,\n            attributes: {\n              vertexPositions: {\n                size: 2,\n                value: new Float32Array([1, 0, 0, 0, 0, 1, 1, 1])\n              }\n            }\n          }),\n          instanceCount: 0,\n          isInstanced: 1\n        }));\n        sideModel.userData.excludeAttributes = {\n          indices: true\n        };\n      }\n      return {\n        models: [sideModel, topModel].filter(Boolean),\n        topModel: topModel,\n        sideModel: sideModel\n      };\n    }\n  }, {\n    key: \"calculateIndices\",\n    value: function calculateIndices(attribute) {\n      var polygonTesselator = this.state.polygonTesselator;\n      attribute.startIndices = polygonTesselator.indexStarts;\n      attribute.value = polygonTesselator.get('indices');\n    }\n  }, {\n    key: \"calculatePositions\",\n    value: function calculatePositions(attribute) {\n      var polygonTesselator = this.state.polygonTesselator;\n      attribute.startIndices = polygonTesselator.vertexStarts;\n      attribute.value = polygonTesselator.get('positions');\n    }\n  }, {\n    key: \"calculateVertexValid\",\n    value: function calculateVertexValid(attribute) {\n      attribute.value = this.state.polygonTesselator.get('vertexValid');\n    }\n  }]);\n  return SolidPolygonLayer;\n}(Layer);\nexport { SolidPolygonLayer as default };\n_defineProperty(SolidPolygonLayer, \"defaultProps\", defaultProps);\n_defineProperty(SolidPolygonLayer, \"layerName\", 'SolidPolygonLayer');","map":{"version":3,"names":["Layer","project32","gouraudLighting","picking","COORDINATE_SYSTEM","Model","Geometry","hasFeatures","FEATURES","PolygonTesselator","vsTop","vsSide","fs","DEFAULT_COLOR","defaultProps","filled","extruded","wireframe","_normalize","_windingOrder","elevationScale","type","min","value","getPolygon","f","polygon","getElevation","getFillColor","getLineColor","material","ATTRIBUTE_TRANSITION","enter","chunk","length","subarray","SolidPolygonLayer","_Layer","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","concat","_defineProperty","_assertThisInitialized","_createClass","key","getShaders","_get","_getPrototypeOf","prototype","vs","defines","RING_WINDING_ORDER_CW","props","modules","get","initializeState","_this2","_this$context","context","gl","viewport","coordinateSystem","isGeospatial","DEFAULT","LNGLAT","setState","numInstances","polygonTesselator","preproject","projectFlat","bind","fp64","use64bitPositions","IndexType","ELEMENT_INDEX_UINT32","Uint32Array","Uint16Array","attributeManager","getAttributeManager","noAlloc","remove","add","indices","size","isIndexed","update","calculateIndices","positions","transition","accessor","calculatePositions","shaderAttributes","vertexOffset","divisor","instancePositions","nextPositions","vertexValid","calculateVertexValid","elevations","instanceElevations","fillColors","colorFormat","normalized","defaultValue","instanceFillColors","lineColors","instanceLineColors","pickingColors","object","_ref","index","target","encodePickingColor","__source","instancePickingColors","getPickingInfo","params","info","data","find","d","disablePickingIndex","objectIndex","i","_disablePickingIndex","draw","_ref2","uniforms","_this$props","_this$state","state","topModel","sideModel","renderUniforms","_objectSpread","Boolean","setInstanceCount","instanceCount","setUniforms","setDrawMode","isWireframe","setVertexCount","vertexCount","updateState","updateParams","updateGeometry","oldProps","changeFlags","regenerateModels","extensionsChanged","_this$state$models","models","forEach","model","delete","_getModels","invalidateAll","_ref3","geometryConfigChanged","dataChanged","updateTriggersChanged","all","buffers","attributes","normalize","geometryBuffer","getGeometry","positionFormat","wrapLongitude","resolution","startIndices","vertexStarts","_this$props2","id","shaders","NON_INSTANCED_MODEL","drawMode","vertexPositions","Float32Array","isSideVertex","geometry","isInstanced","userData","excludeAttributes","filter","attribute","indexStarts","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/layers/src/solid-polygon-layer/solid-polygon-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, picking, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, hasFeatures, FEATURES} from '@luma.gl/core';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport PolygonTesselator from './polygon-tesselator';\n\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  Color,\n  Material,\n  Accessor,\n  AccessorFunction,\n  UpdateParameters,\n  GetPickingInfoParams,\n  PickingInfo,\n  DefaultProps\n} from '@deck.gl/core';\nimport type {PolygonGeometry} from './polygon';\n\ntype _SolidPolygonLayerProps<DataT> = {\n  /** Whether to fill the polygons\n   * @default true\n   */\n  filled?: boolean;\n  /** Whether to extrude the polygons\n   * @default false\n   */\n  extruded?: boolean;\n  /** Whether to generate a line wireframe of the polygon.\n   * @default false\n   */\n  wireframe?: boolean;\n  /**\n   * (Experimental) If `false`, will skip normalizing the coordinates returned by `getPolygon`.\n   * @default true\n   */\n  _normalize?: boolean;\n  /**\n   * (Experimental) This prop is only effective with `_normalize: false`.\n   * It specifies the winding order of rings in the polygon data, one of 'CW' (clockwise) and 'CCW' (counter-clockwise)\n   */\n  _windingOrder?: 'CW' | 'CCW';\n\n  /** Elevation multiplier.\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /** Polygon geometry accessor. */\n  getPolygon?: AccessorFunction<DataT, PolygonGeometry>;\n  /** Extrusion height accessor.\n   * @default 1000\n   */\n  getElevation?: Accessor<DataT, number>;\n  /** Fill color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n  /** Stroke color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n};\n\n/** Render filled and/or extruded polygons. */\nexport type SolidPolygonLayerProps<DataT = any> = _SolidPolygonLayerProps<DataT> &\n  LayerProps<DataT>;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<SolidPolygonLayerProps> = {\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  getElevation: {type: 'accessor', value: 1000},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  material: true\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class SolidPolygonLayer<DataT = any, ExtraPropsT = {}> extends Layer<\n  ExtraPropsT & Required<_SolidPolygonLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'SolidPolygonLayer';\n\n  state!: {\n    topModel?: Model;\n    sideModel?: Model;\n    models?: Model[];\n    numInstances: number;\n    polygonTesselator: PolygonTesselator;\n  };\n\n  getShaders(type) {\n    return super.getShaders({\n      vs: type === 'top' ? vsTop : vsSide,\n      fs,\n      defines: {\n        RING_WINDING_ORDER_CW: !this.props._normalize && this.props._windingOrder === 'CCW' ? 0 : 1\n      },\n      modules: [project32, gouraudLighting, picking]\n    });\n  }\n\n  get wrapLongitude(): boolean {\n    return false;\n  }\n\n  initializeState() {\n    const {gl, viewport} = this.context;\n    let {coordinateSystem} = this.props;\n    if (viewport.isGeospatial && coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n      coordinateSystem = COORDINATE_SYSTEM.LNGLAT;\n    }\n\n    this.setState({\n      numInstances: 0,\n      polygonTesselator: new PolygonTesselator({\n        // Lnglat coordinates are usually projected non-linearly, which affects tesselation results\n        // Provide a preproject function if the coordinates are in lnglat\n        preproject:\n          coordinateSystem === COORDINATE_SYSTEM.LNGLAT && viewport.projectFlat.bind(viewport),\n        fp64: this.use64bitPositions(),\n        IndexType: !gl || hasFeatures(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n      })\n    });\n\n    const attributeManager = this.getAttributeManager()!;\n    const noAlloc = true;\n\n    attributeManager.remove(['instancePickingColors']);\n\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {\n        size: 1,\n        isIndexed: true,\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculateIndices,\n        noAlloc\n      },\n      positions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          positions: {\n            vertexOffset: 0,\n            divisor: 0\n          },\n          instancePositions: {\n            vertexOffset: 0,\n            divisor: 1\n          },\n          nextPositions: {\n            vertexOffset: 1,\n            divisor: 1\n          }\n        }\n      },\n      vertexValid: {\n        size: 1,\n        divisor: 1,\n        type: GL.UNSIGNED_BYTE,\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculateVertexValid,\n        noAlloc\n      },\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        shaderAttributes: {\n          elevations: {\n            divisor: 0\n          },\n          instanceElevations: {\n            divisor: 1\n          }\n        }\n      },\n      fillColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          fillColors: {\n            divisor: 0\n          },\n          instanceFillColors: {\n            divisor: 1\n          }\n        }\n      },\n      lineColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          lineColors: {\n            divisor: 0\n          },\n          instanceLineColors: {\n            divisor: 1\n          }\n        }\n      },\n      pickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value),\n        shaderAttributes: {\n          pickingColors: {\n            divisor: 0\n          },\n          instancePickingColors: {\n            divisor: 1\n          }\n        }\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  getPickingInfo(params: GetPickingInfoParams): PickingInfo {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      info.object = (data as any[]).find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  disablePickingIndex(objectIndex: number) {\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      for (let i = 0; i < (data as any[]).length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      this._disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw({uniforms}) {\n    const {extruded, filled, wireframe, elevationScale} = this.props;\n    const {topModel, sideModel, polygonTesselator} = this.state;\n\n    const renderUniforms = {\n      ...uniforms,\n      extruded: Boolean(extruded),\n      elevationScale\n    };\n\n    // Note: the order is important\n    if (sideModel) {\n      sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n      sideModel.setUniforms(renderUniforms);\n      if (wireframe) {\n        sideModel.setDrawMode(GL.LINE_STRIP);\n        sideModel.setUniforms({isWireframe: true}).draw();\n      }\n      if (filled) {\n        sideModel.setDrawMode(GL.TRIANGLE_FAN);\n        sideModel.setUniforms({isWireframe: false}).draw();\n      }\n    }\n\n    if (topModel) {\n      topModel.setVertexCount(polygonTesselator.vertexCount);\n      topModel.setUniforms(renderUniforms).draw();\n    }\n  }\n\n  updateState(updateParams: UpdateParameters<this>) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps, changeFlags} = updateParams;\n    const attributeManager = this.getAttributeManager();\n\n    const regenerateModels =\n      changeFlags.extensionsChanged ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded;\n\n    if (regenerateModels) {\n      this.state.models?.forEach(model => model.delete());\n\n      this.setState(this._getModels(this.context.gl));\n      attributeManager!.invalidateAll();\n    }\n  }\n\n  protected updateGeometry({props, oldProps, changeFlags}: UpdateParameters<this>) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      const {polygonTesselator} = this.state;\n      const buffers = (props.data as any).attributes || {};\n      polygonTesselator.updateGeometry({\n        data: props.data,\n        normalize: props._normalize,\n        geometryBuffer: buffers.getPolygon,\n        buffers,\n        getGeometry: props.getPolygon,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        fp64: this.use64bitPositions(),\n        dataChanged: changeFlags.dataChanged\n      });\n\n      this.setState({\n        numInstances: polygonTesselator.instanceCount,\n        startIndices: polygonTesselator.vertexStarts\n      });\n\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        this.getAttributeManager()!.invalidateAll();\n      }\n    }\n  }\n\n  protected _getModels(gl: WebGLRenderingContext): Model {\n    const {id, filled, extruded} = this.props;\n\n    let topModel;\n    let sideModel;\n\n    if (filled) {\n      const shaders = this.getShaders('top');\n      shaders.defines.NON_INSTANCED_MODEL = 1;\n\n      topModel = new Model(gl, {\n        ...shaders,\n        id: `${id}-top`,\n        drawMode: GL.TRIANGLES,\n        attributes: {\n          vertexPositions: new Float32Array([0, 1])\n        },\n        uniforms: {\n          isWireframe: false,\n          isSideVertex: false\n        },\n        vertexCount: 0,\n        isIndexed: true\n      });\n    }\n    if (extruded) {\n      sideModel = new Model(gl, {\n        ...this.getShaders('side'),\n        id: `${id}-side`,\n        geometry: new Geometry({\n          drawMode: GL.LINES,\n          vertexCount: 4,\n          attributes: {\n            // top right - top left - bootom left - bottom right\n            vertexPositions: {\n              size: 2,\n              value: new Float32Array([1, 0, 0, 0, 0, 1, 1, 1])\n            }\n          }\n        }),\n        instanceCount: 0,\n        isInstanced: 1\n      });\n\n      sideModel.userData.excludeAttributes = {indices: true};\n    }\n\n    return {\n      models: [sideModel, topModel].filter(Boolean),\n      topModel,\n      sideModel\n    };\n  }\n\n  protected calculateIndices(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.indexStarts;\n    attribute.value = polygonTesselator.get('indices');\n  }\n\n  protected calculatePositions(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.vertexStarts;\n    attribute.value = polygonTesselator.get('positions');\n  }\n\n  protected calculateVertexValid(attribute) {\n    attribute.value = this.state.polygonTesselator.get('vertexValid');\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}