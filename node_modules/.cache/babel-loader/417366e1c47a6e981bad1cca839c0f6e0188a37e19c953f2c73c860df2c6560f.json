{"ast":null,"code":"import _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, picking, log, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './icon-layer-vertex.glsl';\nimport fs from './icon-layer-fragment.glsl';\nimport IconManager from './icon-manager';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  iconAtlas: {\n    type: 'image',\n    value: null,\n    async: true\n  },\n  iconMapping: {\n    type: 'object',\n    value: {},\n    async: true\n  },\n  sizeScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  billboard: true,\n  sizeUnits: 'pixels',\n  sizeMinPixels: {\n    type: 'number',\n    min: 0,\n    value: 0\n  },\n  sizeMaxPixels: {\n    type: 'number',\n    min: 0,\n    value: Number.MAX_SAFE_INTEGER\n  },\n  alphaCutoff: {\n    type: 'number',\n    value: 0.05,\n    min: 0,\n    max: 1\n  },\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getIcon: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.icon;\n    }\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getSize: {\n    type: 'accessor',\n    value: 1\n  },\n  getAngle: {\n    type: 'accessor',\n    value: 0\n  },\n  getPixelOffset: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  onIconError: {\n    type: 'function',\n    value: null,\n    compare: false,\n    optional: true\n  }\n};\nvar IconLayer = /*#__PURE__*/function (_Layer) {\n  _inherits(IconLayer, _Layer);\n  var _super = _createSuper(IconLayer);\n  function IconLayer() {\n    var _this;\n    _classCallCheck(this, IconLayer);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"state\", void 0);\n    return _this;\n  }\n  _createClass(IconLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _get(_getPrototypeOf(IconLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, picking]\n      });\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        iconManager: new IconManager(this.context.gl, {\n          onUpdate: this._onUpdate.bind(this),\n          onError: this._onError.bind(this)\n        })\n      };\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        instancePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getPosition'\n        },\n        instanceSizes: {\n          size: 1,\n          transition: true,\n          accessor: 'getSize',\n          defaultValue: 1\n        },\n        instanceOffsets: {\n          size: 2,\n          accessor: 'getIcon',\n          transform: this.getInstanceOffset\n        },\n        instanceIconFrames: {\n          size: 4,\n          accessor: 'getIcon',\n          transform: this.getInstanceIconFrame\n        },\n        instanceColorModes: {\n          size: 1,\n          type: 5121,\n          accessor: 'getIcon',\n          transform: this.getInstanceColorMode\n        },\n        instanceColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: true,\n          accessor: 'getColor',\n          defaultValue: DEFAULT_COLOR\n        },\n        instanceAngles: {\n          size: 1,\n          transition: true,\n          accessor: 'getAngle'\n        },\n        instancePixelOffset: {\n          size: 2,\n          transition: true,\n          accessor: 'getPixelOffset'\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(params) {\n      _get(_getPrototypeOf(IconLayer.prototype), \"updateState\", this).call(this, params);\n      var props = params.props,\n        oldProps = params.oldProps,\n        changeFlags = params.changeFlags;\n      var attributeManager = this.getAttributeManager();\n      var iconAtlas = props.iconAtlas,\n        iconMapping = props.iconMapping,\n        data = props.data,\n        getIcon = props.getIcon,\n        textureParameters = props.textureParameters;\n      var iconManager = this.state.iconManager;\n      var prePacked = iconAtlas || this.internalState.isAsyncPropLoading('iconAtlas');\n      iconManager.setProps({\n        loadOptions: props.loadOptions,\n        autoPacking: !prePacked,\n        iconAtlas: iconAtlas,\n        iconMapping: prePacked ? iconMapping : null,\n        textureParameters: textureParameters\n      });\n      if (prePacked) {\n        if (oldProps.iconMapping !== props.iconMapping) {\n          attributeManager.invalidate('getIcon');\n        }\n      } else if (changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon)) {\n        iconManager.packIcons(data, getIcon);\n      }\n      if (changeFlags.extensionsChanged) {\n        var _this$state$model;\n        var gl = this.context.gl;\n        (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n        this.state.model = this._getModel(gl);\n        attributeManager.invalidateAll();\n      }\n    }\n  }, {\n    key: \"isLoaded\",\n    get: function get() {\n      return _get(_getPrototypeOf(IconLayer.prototype), \"isLoaded\", this) && this.state.iconManager.isLoaded;\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState(context) {\n      _get(_getPrototypeOf(IconLayer.prototype), \"finalizeState\", this).call(this, context);\n      this.state.iconManager.finalize();\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref) {\n      var uniforms = _ref.uniforms;\n      var _this$props = this.props,\n        sizeScale = _this$props.sizeScale,\n        sizeMinPixels = _this$props.sizeMinPixels,\n        sizeMaxPixels = _this$props.sizeMaxPixels,\n        sizeUnits = _this$props.sizeUnits,\n        billboard = _this$props.billboard,\n        alphaCutoff = _this$props.alphaCutoff;\n      var iconManager = this.state.iconManager;\n      var iconsTexture = iconManager.getTexture();\n      if (iconsTexture) {\n        this.state.model.setUniforms(uniforms).setUniforms({\n          iconsTexture: iconsTexture,\n          iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n          sizeUnits: UNIT[sizeUnits],\n          sizeScale: sizeScale,\n          sizeMinPixels: sizeMinPixels,\n          sizeMaxPixels: sizeMaxPixels,\n          billboard: billboard,\n          alphaCutoff: alphaCutoff\n        }).draw();\n      }\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var positions = [-1, -1, -1, 1, 1, 1, 1, -1];\n      return new Model(gl, _objectSpread(_objectSpread({}, this.getShaders()), {}, {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 6,\n          attributes: {\n            positions: {\n              size: 2,\n              value: new Float32Array(positions)\n            }\n          }\n        }),\n        isInstanced: true\n      }));\n    }\n  }, {\n    key: \"_onUpdate\",\n    value: function _onUpdate() {\n      this.setNeedsRedraw();\n    }\n  }, {\n    key: \"_onError\",\n    value: function _onError(evt) {\n      var _this$getCurrentLayer;\n      var onIconError = (_this$getCurrentLayer = this.getCurrentLayer()) === null || _this$getCurrentLayer === void 0 ? void 0 : _this$getCurrentLayer.props.onIconError;\n      if (onIconError) {\n        onIconError(evt);\n      } else {\n        log.error(evt.error.message)();\n      }\n    }\n  }, {\n    key: \"getInstanceOffset\",\n    value: function getInstanceOffset(icon) {\n      var _this$state$iconManag = this.state.iconManager.getIconMapping(icon),\n        width = _this$state$iconManag.width,\n        height = _this$state$iconManag.height,\n        _this$state$iconManag2 = _this$state$iconManag.anchorX,\n        anchorX = _this$state$iconManag2 === void 0 ? width / 2 : _this$state$iconManag2,\n        _this$state$iconManag3 = _this$state$iconManag.anchorY,\n        anchorY = _this$state$iconManag3 === void 0 ? height / 2 : _this$state$iconManag3;\n      return [width / 2 - anchorX, height / 2 - anchorY];\n    }\n  }, {\n    key: \"getInstanceColorMode\",\n    value: function getInstanceColorMode(icon) {\n      var mapping = this.state.iconManager.getIconMapping(icon);\n      return mapping.mask ? 1 : 0;\n    }\n  }, {\n    key: \"getInstanceIconFrame\",\n    value: function getInstanceIconFrame(icon) {\n      var _this$state$iconManag4 = this.state.iconManager.getIconMapping(icon),\n        x = _this$state$iconManag4.x,\n        y = _this$state$iconManag4.y,\n        width = _this$state$iconManag4.width,\n        height = _this$state$iconManag4.height;\n      return [x, y, width, height];\n    }\n  }]);\n  return IconLayer;\n}(Layer);\nexport { IconLayer as default };\n_defineProperty(IconLayer, \"defaultProps\", defaultProps);\n_defineProperty(IconLayer, \"layerName\", 'IconLayer');","map":{"version":3,"names":["Layer","project32","picking","log","UNIT","Model","Geometry","vs","fs","IconManager","DEFAULT_COLOR","defaultProps","iconAtlas","type","value","async","iconMapping","sizeScale","min","billboard","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","alphaCutoff","max","getPosition","x","position","getIcon","icon","getColor","getSize","getAngle","getPixelOffset","onIconError","compare","optional","IconLayer","_Layer","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","_defineProperty","_assertThisInitialized","_createClass","key","getShaders","_get","_getPrototypeOf","prototype","modules","initializeState","state","iconManager","context","gl","onUpdate","_onUpdate","bind","onError","_onError","attributeManager","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceSizes","defaultValue","instanceOffsets","transform","getInstanceOffset","instanceIconFrames","getInstanceIconFrame","instanceColorModes","getInstanceColorMode","instanceColors","props","colorFormat","normalized","instanceAngles","instancePixelOffset","updateState","params","oldProps","changeFlags","data","textureParameters","prePacked","internalState","isAsyncPropLoading","setProps","loadOptions","autoPacking","invalidate","dataChanged","updateTriggersChanged","all","packIcons","extensionsChanged","_this$state$model","model","delete","_getModel","invalidateAll","get","isLoaded","finalizeState","finalize","draw","_ref","uniforms","_this$props","iconsTexture","getTexture","setUniforms","iconsTextureDim","width","height","positions","_objectSpread","id","geometry","drawMode","attributes","Float32Array","isInstanced","setNeedsRedraw","evt","_this$getCurrentLayer","getCurrentLayer","error","message","_this$state$iconManag","getIconMapping","_this$state$iconManag2","anchorX","_this$state$iconManag3","anchorY","mapping","mask","_this$state$iconManag4","y","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/layers/src/icon-layer/icon-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Layer, project32, picking, log, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './icon-layer-vertex.glsl';\nimport fs from './icon-layer-fragment.glsl';\nimport IconManager from './icon-manager';\n\nimport type {\n  LayerProps,\n  Accessor,\n  AccessorFunction,\n  Position,\n  Color,\n  Texture,\n  Unit,\n  UpdateParameters,\n  LayerContext,\n  DefaultProps\n} from '@deck.gl/core';\nimport type {UnpackedIcon, IconMapping, LoadIconErrorContext} from './icon-manager';\n\ntype _IconLayerProps<DataT> = {\n  /** A prepacked image that contains all icons. */\n  iconAtlas?: string | Texture;\n  /** Icon names mapped to icon definitions, or a URL to load such mapping from a JSON file. */\n  iconMapping?: string | IconMapping;\n\n  /** Icon size multiplier.\n   * @default 1\n   */\n  sizeScale?: number;\n  /**\n   * The units of the icon size, one of `meters`, `common`, and `pixels`.\n   *\n   * @default 'pixels'\n   */\n  sizeUnits?: Unit;\n  /**\n   * The minimum size in pixels. When using non-pixel `sizeUnits`, this prop can be used to prevent the icon from getting too small when zoomed out.\n   */\n  sizeMinPixels?: number;\n  /**\n   * The maximum size in pixels. When using non-pixel `sizeUnits`, this prop can be used to prevent the icon from getting too big when zoomed in.\n   */\n  sizeMaxPixels?: number;\n  /** If `true`, the icon always faces camera. Otherwise the icon faces up (z)\n   * @default true\n   */\n  billboard?: boolean;\n  /**\n   * Discard pixels whose opacity is below this threshold.\n   * A discarded pixel would create a \"hole\" in the icon that is not considered part of the object.\n   * @default 0.05\n   */\n  alphaCutoff?: number;\n\n  /** Anchor position accessor. */\n  getPosition?: Accessor<DataT, Position>;\n  /** Icon definition accessor.\n   * Should return the icon id if using pre-packed icons (`iconAtlas` + `iconMapping`).\n   * Return an object that defines the icon if using auto-packing.\n   */\n  getIcon?: AccessorFunction<DataT, string> | AccessorFunction<DataT, UnpackedIcon>;\n  /** Icon color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n  /** Icon size accessor.\n   * @default 1\n   */\n  getSize?: Accessor<DataT, number>;\n  /** Icon rotation accessor, in degrees.\n   * @default 0\n   */\n  getAngle?: Accessor<DataT, number>;\n  /**\n   * Icon offsest accessor, in pixels.\n   * @default [0, 0]\n   */\n  getPixelOffset?: Accessor<DataT, [number, number]>;\n  /**\n   * Callback called if the attempt to fetch an icon returned by `getIcon` fails.\n   */\n  onIconError?: ((context: LoadIconErrorContext) => void) | null;\n\n  /** Customize the [texture parameters](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter). */\n  textureParameters?: Record<number, number> | null;\n};\n\nexport type IconLayerProps<DataT = any> = _IconLayerProps<DataT> & LayerProps<DataT>;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<IconLayerProps> = {\n  iconAtlas: {type: 'image', value: null, async: true},\n  iconMapping: {type: 'object', value: {}, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  billboard: true,\n  sizeUnits: 'pixels',\n  sizeMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  sizeMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n  alphaCutoff: {type: 'number', value: 0.05, min: 0, max: 1},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getIcon: {type: 'accessor', value: x => x.icon},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n\n  onIconError: {type: 'function', value: null, compare: false, optional: true}\n};\n\n/** Render raster icons at given coordinates. */\nexport default class IconLayer<DataT = any, ExtraPropsT = {}> extends Layer<\n  ExtraPropsT & Required<_IconLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'IconLayer';\n\n  state!: {\n    model?: Model;\n    iconManager: IconManager;\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.state = {\n      iconManager: new IconManager(this.context.gl, {\n        onUpdate: this._onUpdate.bind(this),\n        onError: this._onError.bind(this)\n      })\n    };\n\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIcon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        transform: this.getInstanceOffset\n      },\n      instanceIconFrames: {\n        size: 4,\n        accessor: 'getIcon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        transform: this.getInstanceIconFrame\n      },\n      instanceColorModes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getIcon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        transform: this.getInstanceColorMode\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instancePixelOffset: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  /* eslint-disable max-statements, complexity */\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {props, oldProps, changeFlags} = params;\n\n    const attributeManager = this.getAttributeManager();\n    const {iconAtlas, iconMapping, data, getIcon, textureParameters} = props;\n    const {iconManager} = this.state;\n\n    // internalState is always defined during updateState\n    const prePacked = iconAtlas || this.internalState!.isAsyncPropLoading('iconAtlas');\n    iconManager.setProps({\n      loadOptions: props.loadOptions,\n      autoPacking: !prePacked,\n      iconAtlas,\n      iconMapping: prePacked ? (iconMapping as IconMapping) : null,\n      textureParameters\n    });\n\n    // prepacked iconAtlas from user\n    if (prePacked) {\n      if (oldProps.iconMapping !== props.iconMapping) {\n        attributeManager!.invalidate('getIcon');\n      }\n    } else if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon))\n    ) {\n      // Auto packing - getIcon is expected to return an object\n      iconManager.packIcons(data, getIcon as AccessorFunction<any, UnpackedIcon>);\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      attributeManager!.invalidateAll();\n    }\n  }\n  /* eslint-enable max-statements, complexity */\n\n  get isLoaded(): boolean {\n    return super.isLoaded && this.state.iconManager.isLoaded;\n  }\n\n  finalizeState(context: LayerContext): void {\n    super.finalizeState(context);\n    // Release resources held by the icon manager\n    this.state.iconManager.finalize();\n  }\n\n  draw({uniforms}): void {\n    const {sizeScale, sizeMinPixels, sizeMaxPixels, sizeUnits, billboard, alphaCutoff} = this.props;\n    const {iconManager} = this.state;\n\n    const iconsTexture = iconManager.getTexture();\n    if (iconsTexture) {\n      this.state.model\n        .setUniforms(uniforms)\n        .setUniforms({\n          iconsTexture,\n          iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n          sizeUnits: UNIT[sizeUnits],\n          sizeScale,\n          sizeMinPixels,\n          sizeMaxPixels,\n          billboard,\n          alphaCutoff\n        })\n        .draw();\n    }\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    // The icon-layer vertex shader uses 2d positions\n    // specifed via: attribute vec2 positions;\n    const positions = [-1, -1, -1, 1, 1, 1, 1, -1];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        attributes: {\n          // The size must be explicitly passed here otherwise luma.gl\n          // will default to assuming that positions are 3D (x,y,z)\n          positions: {\n            size: 2,\n            value: new Float32Array(positions)\n          }\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  private _onUpdate(): void {\n    this.setNeedsRedraw();\n  }\n\n  private _onError(evt: LoadIconErrorContext): void {\n    const onIconError = this.getCurrentLayer()?.props.onIconError;\n    if (onIconError) {\n      onIconError(evt);\n    } else {\n      log.error(evt.error.message)();\n    }\n  }\n\n  protected getInstanceOffset(icon: string): number[] {\n    const {\n      width,\n      height,\n      anchorX = width / 2,\n      anchorY = height / 2\n    } = this.state.iconManager.getIconMapping(icon);\n    return [width / 2 - anchorX, height / 2 - anchorY];\n  }\n\n  protected getInstanceColorMode(icon: string): number {\n    const mapping = this.state.iconManager.getIconMapping(icon);\n    return mapping.mask ? 1 : 0;\n  }\n\n  protected getInstanceIconFrame(icon: string): number[] {\n    const {x, y, width, height} = this.state.iconManager.getIconMapping(icon);\n    return [x, y, width, height];\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}