{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\nimport createCallbackMemoizer from '../utils/createCallbackMemoizer';\nimport getScrollbarSize from 'dom-helpers/scrollbarSize'; // @TODO Merge Collection and CollectionView\n\n/**\n * Specifies the number of milliseconds during which to disable pointer events while a scroll is in progress.\n * This improves performance and makes scrolling smoother.\n */\n\nvar IS_SCROLLING_TIMEOUT = 150;\n/**\n * Controls whether the Grid updates the DOM element's scrollLeft/scrollTop based on the current state or just observes it.\n * This prevents Grid from interrupting mouse-wheel animations (see issue #2).\n */\n\nvar SCROLL_POSITION_CHANGE_REASONS = {\n  OBSERVED: 'observed',\n  REQUESTED: 'requested'\n};\n/**\n * Monitors changes in properties (eg. cellCount) and state (eg. scroll offsets) to determine when rendering needs to occur.\n * This component does not render any visible content itself; it defers to the specified :cellLayoutManager.\n */\n\nvar CollectionView = /*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(CollectionView, _React$PureComponent);\n\n  // Invokes callbacks only when their values have changed.\n  function CollectionView() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, CollectionView);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CollectionView)).call.apply(_getPrototypeOf2, [this].concat(args))); // If this component is being rendered server-side, getScrollbarSize() will return undefined.\n    // We handle this case in componentDidMount()\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isScrolling: false,\n      scrollLeft: 0,\n      scrollTop: 0\n    });\n    _defineProperty(_assertThisInitialized(_this), \"_calculateSizeAndPositionDataOnNextUpdate\", false);\n    _defineProperty(_assertThisInitialized(_this), \"_onSectionRenderedMemoizer\", createCallbackMemoizer());\n    _defineProperty(_assertThisInitialized(_this), \"_onScrollMemoizer\", createCallbackMemoizer(false));\n    _defineProperty(_assertThisInitialized(_this), \"_invokeOnSectionRenderedHelper\", function () {\n      var _this$props = _this.props,\n        cellLayoutManager = _this$props.cellLayoutManager,\n        onSectionRendered = _this$props.onSectionRendered;\n      _this._onSectionRenderedMemoizer({\n        callback: onSectionRendered,\n        indices: {\n          indices: cellLayoutManager.getLastRenderedIndices()\n        }\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"_setScrollingContainerRef\", function (ref) {\n      _this._scrollingContainer = ref;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"_updateScrollPositionForScrollToCell\", function () {\n      var _this$props2 = _this.props,\n        cellLayoutManager = _this$props2.cellLayoutManager,\n        height = _this$props2.height,\n        scrollToAlignment = _this$props2.scrollToAlignment,\n        scrollToCell = _this$props2.scrollToCell,\n        width = _this$props2.width;\n      var _this$state = _this.state,\n        scrollLeft = _this$state.scrollLeft,\n        scrollTop = _this$state.scrollTop;\n      if (scrollToCell >= 0) {\n        var scrollPosition = cellLayoutManager.getScrollPositionForCell({\n          align: scrollToAlignment,\n          cellIndex: scrollToCell,\n          height: height,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          width: width\n        });\n        if (scrollPosition.scrollLeft !== scrollLeft || scrollPosition.scrollTop !== scrollTop) {\n          _this._setScrollPosition(scrollPosition);\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"_onScroll\", function (event) {\n      // In certain edge-cases React dispatches an onScroll event with an invalid target.scrollLeft / target.scrollTop.\n      // This invalid event can be detected by comparing event.target to this component's scrollable DOM element.\n      // See issue #404 for more information.\n      if (event.target !== _this._scrollingContainer) {\n        return;\n      } // Prevent pointer events from interrupting a smooth scroll\n\n      _this._enablePointerEventsAfterDelay(); // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,\n      // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.\n      // This causes a series of rapid renders that is slow for long lists.\n      // We can avoid that by doing some simple bounds checking to ensure that scrollTop never exceeds the total height.\n\n      var _this$props3 = _this.props,\n        cellLayoutManager = _this$props3.cellLayoutManager,\n        height = _this$props3.height,\n        isScrollingChange = _this$props3.isScrollingChange,\n        width = _this$props3.width;\n      var scrollbarSize = _this._scrollbarSize;\n      var _cellLayoutManager$ge = cellLayoutManager.getTotalSize(),\n        totalHeight = _cellLayoutManager$ge.height,\n        totalWidth = _cellLayoutManager$ge.width;\n      var scrollLeft = Math.max(0, Math.min(totalWidth - width + scrollbarSize, event.target.scrollLeft));\n      var scrollTop = Math.max(0, Math.min(totalHeight - height + scrollbarSize, event.target.scrollTop)); // Certain devices (like Apple touchpad) rapid-fire duplicate events.\n      // Don't force a re-render if this is the case.\n      // The mouse may move faster then the animation frame does.\n      // Use requestAnimationFrame to avoid over-updating.\n\n      if (_this.state.scrollLeft !== scrollLeft || _this.state.scrollTop !== scrollTop) {\n        // Browsers with cancelable scroll events (eg. Firefox) interrupt scrolling animations if scrollTop/scrollLeft is set.\n        // Other browsers (eg. Safari) don't scroll as well without the help under certain conditions (DOM or style changes during scrolling).\n        // All things considered, this seems to be the best current work around that I'm aware of.\n        // For more information see https://github.com/bvaughn/react-virtualized/pull/124\n        var scrollPositionChangeReason = event.cancelable ? SCROLL_POSITION_CHANGE_REASONS.OBSERVED : SCROLL_POSITION_CHANGE_REASONS.REQUESTED; // Synchronously set :isScrolling the first time (since _setNextState will reschedule its animation frame each time it's called)\n\n        if (!_this.state.isScrolling) {\n          isScrollingChange(true);\n        }\n        _this.setState({\n          isScrolling: true,\n          scrollLeft: scrollLeft,\n          scrollPositionChangeReason: scrollPositionChangeReason,\n          scrollTop: scrollTop\n        });\n      }\n      _this._invokeOnScrollMemoizer({\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop,\n        totalWidth: totalWidth,\n        totalHeight: totalHeight\n      });\n    });\n    _this._scrollbarSize = getScrollbarSize();\n    if (_this._scrollbarSize === undefined) {\n      _this._scrollbarSizeMeasured = false;\n      _this._scrollbarSize = 0;\n    } else {\n      _this._scrollbarSizeMeasured = true;\n    }\n    return _this;\n  }\n  /**\n   * Forced recompute of cell sizes and positions.\n   * This function should be called if cell sizes have changed but nothing else has.\n   * Since cell positions are calculated by callbacks, the collection view has no way of detecting when the underlying data has changed.\n   */\n\n  _createClass(CollectionView, [{\n    key: \"recomputeCellSizesAndPositions\",\n    value: function recomputeCellSizesAndPositions() {\n      this._calculateSizeAndPositionDataOnNextUpdate = true;\n      this.forceUpdate();\n    }\n    /* ---------------------------- Component lifecycle methods ---------------------------- */\n\n    /**\n     * @private\n     * This method updates scrollLeft/scrollTop in state for the following conditions:\n     * 1) Empty content (0 rows or columns)\n     * 2) New scroll props overriding the current state\n     * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid\n     */\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props4 = this.props,\n        cellLayoutManager = _this$props4.cellLayoutManager,\n        scrollLeft = _this$props4.scrollLeft,\n        scrollToCell = _this$props4.scrollToCell,\n        scrollTop = _this$props4.scrollTop; // If this component was first rendered server-side, scrollbar size will be undefined.\n      // In that event we need to remeasure.\n\n      if (!this._scrollbarSizeMeasured) {\n        this._scrollbarSize = getScrollbarSize();\n        this._scrollbarSizeMeasured = true;\n        this.setState({});\n      }\n      if (scrollToCell >= 0) {\n        this._updateScrollPositionForScrollToCell();\n      } else if (scrollLeft >= 0 || scrollTop >= 0) {\n        this._setScrollPosition({\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop\n        });\n      } // Update onSectionRendered callback.\n\n      this._invokeOnSectionRenderedHelper();\n      var _cellLayoutManager$ge2 = cellLayoutManager.getTotalSize(),\n        totalHeight = _cellLayoutManager$ge2.height,\n        totalWidth = _cellLayoutManager$ge2.width; // Initialize onScroll callback.\n\n      this._invokeOnScrollMemoizer({\n        scrollLeft: scrollLeft || 0,\n        scrollTop: scrollTop || 0,\n        totalHeight: totalHeight,\n        totalWidth: totalWidth\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this$props5 = this.props,\n        height = _this$props5.height,\n        scrollToAlignment = _this$props5.scrollToAlignment,\n        scrollToCell = _this$props5.scrollToCell,\n        width = _this$props5.width;\n      var _this$state2 = this.state,\n        scrollLeft = _this$state2.scrollLeft,\n        scrollPositionChangeReason = _this$state2.scrollPositionChangeReason,\n        scrollTop = _this$state2.scrollTop; // Make sure requested changes to :scrollLeft or :scrollTop get applied.\n      // Assigning to scrollLeft/scrollTop tells the browser to interrupt any running scroll animations,\n      // And to discard any pending async changes to the scroll position that may have happened in the meantime (e.g. on a separate scrolling thread).\n      // So we only set these when we require an adjustment of the scroll position.\n      // See issue #2 for more information.\n\n      if (scrollPositionChangeReason === SCROLL_POSITION_CHANGE_REASONS.REQUESTED) {\n        if (scrollLeft >= 0 && scrollLeft !== prevState.scrollLeft && scrollLeft !== this._scrollingContainer.scrollLeft) {\n          this._scrollingContainer.scrollLeft = scrollLeft;\n        }\n        if (scrollTop >= 0 && scrollTop !== prevState.scrollTop && scrollTop !== this._scrollingContainer.scrollTop) {\n          this._scrollingContainer.scrollTop = scrollTop;\n        }\n      } // Update scroll offsets if the current :scrollToCell values requires it\n\n      if (height !== prevProps.height || scrollToAlignment !== prevProps.scrollToAlignment || scrollToCell !== prevProps.scrollToCell || width !== prevProps.width) {\n        this._updateScrollPositionForScrollToCell();\n      } // Update onRowsRendered callback if start/stop indices have changed\n\n      this._invokeOnSectionRenderedHelper();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this._disablePointerEventsTimeoutId) {\n        clearTimeout(this._disablePointerEventsTimeoutId);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n        autoHeight = _this$props6.autoHeight,\n        cellCount = _this$props6.cellCount,\n        cellLayoutManager = _this$props6.cellLayoutManager,\n        className = _this$props6.className,\n        height = _this$props6.height,\n        horizontalOverscanSize = _this$props6.horizontalOverscanSize,\n        id = _this$props6.id,\n        noContentRenderer = _this$props6.noContentRenderer,\n        style = _this$props6.style,\n        verticalOverscanSize = _this$props6.verticalOverscanSize,\n        width = _this$props6.width;\n      var _this$state3 = this.state,\n        isScrolling = _this$state3.isScrolling,\n        scrollLeft = _this$state3.scrollLeft,\n        scrollTop = _this$state3.scrollTop; // Memoization reset\n\n      if (this._lastRenderedCellCount !== cellCount || this._lastRenderedCellLayoutManager !== cellLayoutManager || this._calculateSizeAndPositionDataOnNextUpdate) {\n        this._lastRenderedCellCount = cellCount;\n        this._lastRenderedCellLayoutManager = cellLayoutManager;\n        this._calculateSizeAndPositionDataOnNextUpdate = false;\n        cellLayoutManager.calculateSizeAndPositionData();\n      }\n      var _cellLayoutManager$ge3 = cellLayoutManager.getTotalSize(),\n        totalHeight = _cellLayoutManager$ge3.height,\n        totalWidth = _cellLayoutManager$ge3.width; // Safely expand the rendered area by the specified overscan amount\n\n      var left = Math.max(0, scrollLeft - horizontalOverscanSize);\n      var top = Math.max(0, scrollTop - verticalOverscanSize);\n      var right = Math.min(totalWidth, scrollLeft + width + horizontalOverscanSize);\n      var bottom = Math.min(totalHeight, scrollTop + height + verticalOverscanSize);\n      var childrenToDisplay = height > 0 && width > 0 ? cellLayoutManager.cellRenderers({\n        height: bottom - top,\n        isScrolling: isScrolling,\n        width: right - left,\n        x: left,\n        y: top\n      }) : [];\n      var collectionStyle = {\n        boxSizing: 'border-box',\n        direction: 'ltr',\n        height: autoHeight ? 'auto' : height,\n        position: 'relative',\n        WebkitOverflowScrolling: 'touch',\n        width: width,\n        willChange: 'transform'\n      }; // Force browser to hide scrollbars when we know they aren't necessary.\n      // Otherwise once scrollbars appear they may not disappear again.\n      // For more info see issue #116\n\n      var verticalScrollBarSize = totalHeight > height ? this._scrollbarSize : 0;\n      var horizontalScrollBarSize = totalWidth > width ? this._scrollbarSize : 0; // Also explicitly init styles to 'auto' if scrollbars are required.\n      // This works around an obscure edge case where external CSS styles have not yet been loaded,\n      // But an initial scroll index of offset is set as an external prop.\n      // Without this style, Grid would render the correct range of cells but would NOT update its internal offset.\n      // This was originally reported via clauderic/react-infinite-calendar/issues/23\n\n      collectionStyle.overflowX = totalWidth + verticalScrollBarSize <= width ? 'hidden' : 'auto';\n      collectionStyle.overflowY = totalHeight + horizontalScrollBarSize <= height ? 'hidden' : 'auto';\n      return React.createElement(\"div\", {\n        ref: this._setScrollingContainerRef,\n        \"aria-label\": this.props['aria-label'],\n        className: clsx('ReactVirtualized__Collection', className),\n        id: id,\n        onScroll: this._onScroll,\n        role: \"grid\",\n        style: _objectSpread({}, collectionStyle, {}, style),\n        tabIndex: 0\n      }, cellCount > 0 && React.createElement(\"div\", {\n        className: \"ReactVirtualized__Collection__innerScrollContainer\",\n        style: {\n          height: totalHeight,\n          maxHeight: totalHeight,\n          maxWidth: totalWidth,\n          overflow: 'hidden',\n          pointerEvents: isScrolling ? 'none' : '',\n          width: totalWidth\n        }\n      }, childrenToDisplay), cellCount === 0 && noContentRenderer());\n    }\n    /* ---------------------------- Helper methods ---------------------------- */\n\n    /**\n     * Sets an :isScrolling flag for a small window of time.\n     * This flag is used to disable pointer events on the scrollable portion of the Collection.\n     * This prevents jerky/stuttery mouse-wheel scrolling.\n     */\n  }, {\n    key: \"_enablePointerEventsAfterDelay\",\n    value: function _enablePointerEventsAfterDelay() {\n      var _this2 = this;\n      if (this._disablePointerEventsTimeoutId) {\n        clearTimeout(this._disablePointerEventsTimeoutId);\n      }\n      this._disablePointerEventsTimeoutId = setTimeout(function () {\n        var isScrollingChange = _this2.props.isScrollingChange;\n        isScrollingChange(false);\n        _this2._disablePointerEventsTimeoutId = null;\n        _this2.setState({\n          isScrolling: false\n        });\n      }, IS_SCROLLING_TIMEOUT);\n    }\n  }, {\n    key: \"_invokeOnScrollMemoizer\",\n    value: function _invokeOnScrollMemoizer(_ref) {\n      var _this3 = this;\n      var scrollLeft = _ref.scrollLeft,\n        scrollTop = _ref.scrollTop,\n        totalHeight = _ref.totalHeight,\n        totalWidth = _ref.totalWidth;\n      this._onScrollMemoizer({\n        callback: function callback(_ref2) {\n          var scrollLeft = _ref2.scrollLeft,\n            scrollTop = _ref2.scrollTop;\n          var _this3$props = _this3.props,\n            height = _this3$props.height,\n            onScroll = _this3$props.onScroll,\n            width = _this3$props.width;\n          onScroll({\n            clientHeight: height,\n            clientWidth: width,\n            scrollHeight: totalHeight,\n            scrollLeft: scrollLeft,\n            scrollTop: scrollTop,\n            scrollWidth: totalWidth\n          });\n        },\n        indices: {\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop\n        }\n      });\n    }\n  }, {\n    key: \"_setScrollPosition\",\n    value: function _setScrollPosition(_ref3) {\n      var scrollLeft = _ref3.scrollLeft,\n        scrollTop = _ref3.scrollTop;\n      var newState = {\n        scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED\n      };\n      if (scrollLeft >= 0) {\n        newState.scrollLeft = scrollLeft;\n      }\n      if (scrollTop >= 0) {\n        newState.scrollTop = scrollTop;\n      }\n      if (scrollLeft >= 0 && scrollLeft !== this.state.scrollLeft || scrollTop >= 0 && scrollTop !== this.state.scrollTop) {\n        this.setState(newState);\n      }\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.cellCount === 0 && (prevState.scrollLeft !== 0 || prevState.scrollTop !== 0)) {\n        return {\n          scrollLeft: 0,\n          scrollTop: 0,\n          scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED\n        };\n      } else if (nextProps.scrollLeft !== prevState.scrollLeft || nextProps.scrollTop !== prevState.scrollTop) {\n        return {\n          scrollLeft: nextProps.scrollLeft != null ? nextProps.scrollLeft : prevState.scrollLeft,\n          scrollTop: nextProps.scrollTop != null ? nextProps.scrollTop : prevState.scrollTop,\n          scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED\n        };\n      }\n      return null;\n    }\n  }]);\n  return CollectionView;\n}(React.PureComponent);\n_defineProperty(CollectionView, \"defaultProps\", {\n  'aria-label': 'grid',\n  horizontalOverscanSize: 0,\n  noContentRenderer: function noContentRenderer() {\n    return null;\n  },\n  onScroll: function onScroll() {\n    return null;\n  },\n  onSectionRendered: function onSectionRendered() {\n    return null;\n  },\n  scrollToAlignment: 'auto',\n  scrollToCell: -1,\n  style: {},\n  verticalOverscanSize: 0\n});\nCollectionView.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  'aria-label': PropTypes.string,\n  /**\n   * Removes fixed height from the scrollingContainer so that the total height\n   * of rows can stretch the window. Intended for use with WindowScroller\n   */\n  autoHeight: PropTypes.bool,\n  /**\n   * Number of cells in collection.\n   */\n  cellCount: PropTypes.number.isRequired,\n  /**\n   * Calculates cell sizes and positions and manages rendering the appropriate cells given a specified window.\n   */\n  cellLayoutManager: PropTypes.object.isRequired,\n  /**\n   * Optional custom CSS class name to attach to root Collection element.\n   */\n  className: PropTypes.string,\n  /**\n   * Height of Collection; this property determines the number of visible (vs virtualized) rows.\n   */\n  height: PropTypes.number.isRequired,\n  /**\n   * Optional custom id to attach to root Collection element.\n   */\n  id: PropTypes.string,\n  /**\n   * Enables the `Collection` to horiontally \"overscan\" its content similar to how `Grid` does.\n   * This can reduce flicker around the edges when a user scrolls quickly.\n   */\n  horizontalOverscanSize: PropTypes.number.isRequired,\n  isScrollingChange: PropTypes.func,\n  /**\n   * Optional renderer to be used in place of rows when either :rowCount or :cellCount is 0.\n   */\n  noContentRenderer: PropTypes.func.isRequired,\n  /**\n   * Callback invoked whenever the scroll offset changes within the inner scrollable region.\n   * This callback can be used to sync scrolling between lists, tables, or grids.\n   * ({ clientHeight, clientWidth, scrollHeight, scrollLeft, scrollTop, scrollWidth }): void\n   */\n  onScroll: PropTypes.func.isRequired,\n  /**\n   * Callback invoked with information about the section of the Collection that was just rendered.\n   * This callback is passed a named :indices parameter which is an Array of the most recently rendered section indices.\n   */\n  onSectionRendered: PropTypes.func.isRequired,\n  /**\n   * Horizontal offset.\n   */\n  scrollLeft: PropTypes.number,\n  /**\n   * Controls scroll-to-cell behavior of the Grid.\n   * The default (\"auto\") scrolls the least amount possible to ensure that the specified cell is fully visible.\n   * Use \"start\" to align cells to the top/left of the Grid and \"end\" to align bottom/right.\n   */\n  scrollToAlignment: PropTypes.oneOf(['auto', 'end', 'start', 'center']).isRequired,\n  /**\n   * Cell index to ensure visible (by forcefully scrolling if necessary).\n   */\n  scrollToCell: PropTypes.number.isRequired,\n  /**\n   * Vertical offset.\n   */\n  scrollTop: PropTypes.number,\n  /**\n   * Optional custom inline style to attach to root Collection element.\n   */\n  style: PropTypes.object,\n  /**\n   * Enables the `Collection` to vertically \"overscan\" its content similar to how `Grid` does.\n   * This can reduce flicker around the edges when a user scrolls quickly.\n   */\n  verticalOverscanSize: PropTypes.number.isRequired,\n  /**\n   * Width of Collection; this property determines the number of visible (vs virtualized) columns.\n   */\n  width: PropTypes.number.isRequired\n} : {};\npolyfill(CollectionView);\nexport default CollectionView;","map":{"version":3,"names":["_classCallCheck","_createClass","_possibleConstructorReturn","_getPrototypeOf","_assertThisInitialized","_inherits","_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","clsx","PropTypes","React","polyfill","createCallbackMemoizer","getScrollbarSize","IS_SCROLLING_TIMEOUT","SCROLL_POSITION_CHANGE_REASONS","OBSERVED","REQUESTED","CollectionView","_React$PureComponent","_getPrototypeOf2","_this","_len","args","Array","_key","call","concat","isScrolling","scrollLeft","scrollTop","_this$props","props","cellLayoutManager","onSectionRendered","_onSectionRenderedMemoizer","callback","indices","getLastRenderedIndices","ref","_scrollingContainer","_this$props2","height","scrollToAlignment","scrollToCell","width","_this$state","state","scrollPosition","getScrollPositionForCell","align","cellIndex","_setScrollPosition","event","_enablePointerEventsAfterDelay","_this$props3","isScrollingChange","scrollbarSize","_scrollbarSize","_cellLayoutManager$ge","getTotalSize","totalHeight","totalWidth","Math","max","min","scrollPositionChangeReason","cancelable","setState","_invokeOnScrollMemoizer","undefined","_scrollbarSizeMeasured","value","recomputeCellSizesAndPositions","_calculateSizeAndPositionDataOnNextUpdate","forceUpdate","componentDidMount","_this$props4","_updateScrollPositionForScrollToCell","_invokeOnSectionRenderedHelper","_cellLayoutManager$ge2","componentDidUpdate","prevProps","prevState","_this$props5","_this$state2","componentWillUnmount","_disablePointerEventsTimeoutId","clearTimeout","render","_this$props6","autoHeight","cellCount","className","horizontalOverscanSize","id","noContentRenderer","style","verticalOverscanSize","_this$state3","_lastRenderedCellCount","_lastRenderedCellLayoutManager","calculateSizeAndPositionData","_cellLayoutManager$ge3","left","top","right","bottom","childrenToDisplay","cellRenderers","x","y","collectionStyle","boxSizing","direction","position","WebkitOverflowScrolling","willChange","verticalScrollBarSize","horizontalScrollBarSize","overflowX","overflowY","createElement","_setScrollingContainerRef","onScroll","_onScroll","role","tabIndex","maxHeight","maxWidth","overflow","pointerEvents","_this2","setTimeout","_ref","_this3","_onScrollMemoizer","_ref2","_this3$props","clientHeight","clientWidth","scrollHeight","scrollWidth","_ref3","newState","getDerivedStateFromProps","nextProps","PureComponent","propTypes","process","env","NODE_ENV","string","bool","number","isRequired","func","oneOf"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/react-virtualized/dist/es/Collection/CollectionView.js"],"sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\nimport createCallbackMemoizer from '../utils/createCallbackMemoizer';\nimport getScrollbarSize from 'dom-helpers/scrollbarSize'; // @TODO Merge Collection and CollectionView\n\n/**\n * Specifies the number of milliseconds during which to disable pointer events while a scroll is in progress.\n * This improves performance and makes scrolling smoother.\n */\n\nvar IS_SCROLLING_TIMEOUT = 150;\n/**\n * Controls whether the Grid updates the DOM element's scrollLeft/scrollTop based on the current state or just observes it.\n * This prevents Grid from interrupting mouse-wheel animations (see issue #2).\n */\n\nvar SCROLL_POSITION_CHANGE_REASONS = {\n  OBSERVED: 'observed',\n  REQUESTED: 'requested'\n};\n/**\n * Monitors changes in properties (eg. cellCount) and state (eg. scroll offsets) to determine when rendering needs to occur.\n * This component does not render any visible content itself; it defers to the specified :cellLayoutManager.\n */\n\nvar CollectionView =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(CollectionView, _React$PureComponent);\n\n  // Invokes callbacks only when their values have changed.\n  function CollectionView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CollectionView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CollectionView)).call.apply(_getPrototypeOf2, [this].concat(args))); // If this component is being rendered server-side, getScrollbarSize() will return undefined.\n    // We handle this case in componentDidMount()\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isScrolling: false,\n      scrollLeft: 0,\n      scrollTop: 0\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_calculateSizeAndPositionDataOnNextUpdate\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"_onSectionRenderedMemoizer\", createCallbackMemoizer());\n\n    _defineProperty(_assertThisInitialized(_this), \"_onScrollMemoizer\", createCallbackMemoizer(false));\n\n    _defineProperty(_assertThisInitialized(_this), \"_invokeOnSectionRenderedHelper\", function () {\n      var _this$props = _this.props,\n          cellLayoutManager = _this$props.cellLayoutManager,\n          onSectionRendered = _this$props.onSectionRendered;\n\n      _this._onSectionRenderedMemoizer({\n        callback: onSectionRendered,\n        indices: {\n          indices: cellLayoutManager.getLastRenderedIndices()\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_setScrollingContainerRef\", function (ref) {\n      _this._scrollingContainer = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_updateScrollPositionForScrollToCell\", function () {\n      var _this$props2 = _this.props,\n          cellLayoutManager = _this$props2.cellLayoutManager,\n          height = _this$props2.height,\n          scrollToAlignment = _this$props2.scrollToAlignment,\n          scrollToCell = _this$props2.scrollToCell,\n          width = _this$props2.width;\n      var _this$state = _this.state,\n          scrollLeft = _this$state.scrollLeft,\n          scrollTop = _this$state.scrollTop;\n\n      if (scrollToCell >= 0) {\n        var scrollPosition = cellLayoutManager.getScrollPositionForCell({\n          align: scrollToAlignment,\n          cellIndex: scrollToCell,\n          height: height,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          width: width\n        });\n\n        if (scrollPosition.scrollLeft !== scrollLeft || scrollPosition.scrollTop !== scrollTop) {\n          _this._setScrollPosition(scrollPosition);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onScroll\", function (event) {\n      // In certain edge-cases React dispatches an onScroll event with an invalid target.scrollLeft / target.scrollTop.\n      // This invalid event can be detected by comparing event.target to this component's scrollable DOM element.\n      // See issue #404 for more information.\n      if (event.target !== _this._scrollingContainer) {\n        return;\n      } // Prevent pointer events from interrupting a smooth scroll\n\n\n      _this._enablePointerEventsAfterDelay(); // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,\n      // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.\n      // This causes a series of rapid renders that is slow for long lists.\n      // We can avoid that by doing some simple bounds checking to ensure that scrollTop never exceeds the total height.\n\n\n      var _this$props3 = _this.props,\n          cellLayoutManager = _this$props3.cellLayoutManager,\n          height = _this$props3.height,\n          isScrollingChange = _this$props3.isScrollingChange,\n          width = _this$props3.width;\n      var scrollbarSize = _this._scrollbarSize;\n\n      var _cellLayoutManager$ge = cellLayoutManager.getTotalSize(),\n          totalHeight = _cellLayoutManager$ge.height,\n          totalWidth = _cellLayoutManager$ge.width;\n\n      var scrollLeft = Math.max(0, Math.min(totalWidth - width + scrollbarSize, event.target.scrollLeft));\n      var scrollTop = Math.max(0, Math.min(totalHeight - height + scrollbarSize, event.target.scrollTop)); // Certain devices (like Apple touchpad) rapid-fire duplicate events.\n      // Don't force a re-render if this is the case.\n      // The mouse may move faster then the animation frame does.\n      // Use requestAnimationFrame to avoid over-updating.\n\n      if (_this.state.scrollLeft !== scrollLeft || _this.state.scrollTop !== scrollTop) {\n        // Browsers with cancelable scroll events (eg. Firefox) interrupt scrolling animations if scrollTop/scrollLeft is set.\n        // Other browsers (eg. Safari) don't scroll as well without the help under certain conditions (DOM or style changes during scrolling).\n        // All things considered, this seems to be the best current work around that I'm aware of.\n        // For more information see https://github.com/bvaughn/react-virtualized/pull/124\n        var scrollPositionChangeReason = event.cancelable ? SCROLL_POSITION_CHANGE_REASONS.OBSERVED : SCROLL_POSITION_CHANGE_REASONS.REQUESTED; // Synchronously set :isScrolling the first time (since _setNextState will reschedule its animation frame each time it's called)\n\n        if (!_this.state.isScrolling) {\n          isScrollingChange(true);\n        }\n\n        _this.setState({\n          isScrolling: true,\n          scrollLeft: scrollLeft,\n          scrollPositionChangeReason: scrollPositionChangeReason,\n          scrollTop: scrollTop\n        });\n      }\n\n      _this._invokeOnScrollMemoizer({\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop,\n        totalWidth: totalWidth,\n        totalHeight: totalHeight\n      });\n    });\n\n    _this._scrollbarSize = getScrollbarSize();\n\n    if (_this._scrollbarSize === undefined) {\n      _this._scrollbarSizeMeasured = false;\n      _this._scrollbarSize = 0;\n    } else {\n      _this._scrollbarSizeMeasured = true;\n    }\n\n    return _this;\n  }\n  /**\n   * Forced recompute of cell sizes and positions.\n   * This function should be called if cell sizes have changed but nothing else has.\n   * Since cell positions are calculated by callbacks, the collection view has no way of detecting when the underlying data has changed.\n   */\n\n\n  _createClass(CollectionView, [{\n    key: \"recomputeCellSizesAndPositions\",\n    value: function recomputeCellSizesAndPositions() {\n      this._calculateSizeAndPositionDataOnNextUpdate = true;\n      this.forceUpdate();\n    }\n    /* ---------------------------- Component lifecycle methods ---------------------------- */\n\n    /**\n     * @private\n     * This method updates scrollLeft/scrollTop in state for the following conditions:\n     * 1) Empty content (0 rows or columns)\n     * 2) New scroll props overriding the current state\n     * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid\n     */\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props4 = this.props,\n          cellLayoutManager = _this$props4.cellLayoutManager,\n          scrollLeft = _this$props4.scrollLeft,\n          scrollToCell = _this$props4.scrollToCell,\n          scrollTop = _this$props4.scrollTop; // If this component was first rendered server-side, scrollbar size will be undefined.\n      // In that event we need to remeasure.\n\n      if (!this._scrollbarSizeMeasured) {\n        this._scrollbarSize = getScrollbarSize();\n        this._scrollbarSizeMeasured = true;\n        this.setState({});\n      }\n\n      if (scrollToCell >= 0) {\n        this._updateScrollPositionForScrollToCell();\n      } else if (scrollLeft >= 0 || scrollTop >= 0) {\n        this._setScrollPosition({\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop\n        });\n      } // Update onSectionRendered callback.\n\n\n      this._invokeOnSectionRenderedHelper();\n\n      var _cellLayoutManager$ge2 = cellLayoutManager.getTotalSize(),\n          totalHeight = _cellLayoutManager$ge2.height,\n          totalWidth = _cellLayoutManager$ge2.width; // Initialize onScroll callback.\n\n\n      this._invokeOnScrollMemoizer({\n        scrollLeft: scrollLeft || 0,\n        scrollTop: scrollTop || 0,\n        totalHeight: totalHeight,\n        totalWidth: totalWidth\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this$props5 = this.props,\n          height = _this$props5.height,\n          scrollToAlignment = _this$props5.scrollToAlignment,\n          scrollToCell = _this$props5.scrollToCell,\n          width = _this$props5.width;\n      var _this$state2 = this.state,\n          scrollLeft = _this$state2.scrollLeft,\n          scrollPositionChangeReason = _this$state2.scrollPositionChangeReason,\n          scrollTop = _this$state2.scrollTop; // Make sure requested changes to :scrollLeft or :scrollTop get applied.\n      // Assigning to scrollLeft/scrollTop tells the browser to interrupt any running scroll animations,\n      // And to discard any pending async changes to the scroll position that may have happened in the meantime (e.g. on a separate scrolling thread).\n      // So we only set these when we require an adjustment of the scroll position.\n      // See issue #2 for more information.\n\n      if (scrollPositionChangeReason === SCROLL_POSITION_CHANGE_REASONS.REQUESTED) {\n        if (scrollLeft >= 0 && scrollLeft !== prevState.scrollLeft && scrollLeft !== this._scrollingContainer.scrollLeft) {\n          this._scrollingContainer.scrollLeft = scrollLeft;\n        }\n\n        if (scrollTop >= 0 && scrollTop !== prevState.scrollTop && scrollTop !== this._scrollingContainer.scrollTop) {\n          this._scrollingContainer.scrollTop = scrollTop;\n        }\n      } // Update scroll offsets if the current :scrollToCell values requires it\n\n\n      if (height !== prevProps.height || scrollToAlignment !== prevProps.scrollToAlignment || scrollToCell !== prevProps.scrollToCell || width !== prevProps.width) {\n        this._updateScrollPositionForScrollToCell();\n      } // Update onRowsRendered callback if start/stop indices have changed\n\n\n      this._invokeOnSectionRenderedHelper();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this._disablePointerEventsTimeoutId) {\n        clearTimeout(this._disablePointerEventsTimeoutId);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          autoHeight = _this$props6.autoHeight,\n          cellCount = _this$props6.cellCount,\n          cellLayoutManager = _this$props6.cellLayoutManager,\n          className = _this$props6.className,\n          height = _this$props6.height,\n          horizontalOverscanSize = _this$props6.horizontalOverscanSize,\n          id = _this$props6.id,\n          noContentRenderer = _this$props6.noContentRenderer,\n          style = _this$props6.style,\n          verticalOverscanSize = _this$props6.verticalOverscanSize,\n          width = _this$props6.width;\n      var _this$state3 = this.state,\n          isScrolling = _this$state3.isScrolling,\n          scrollLeft = _this$state3.scrollLeft,\n          scrollTop = _this$state3.scrollTop; // Memoization reset\n\n      if (this._lastRenderedCellCount !== cellCount || this._lastRenderedCellLayoutManager !== cellLayoutManager || this._calculateSizeAndPositionDataOnNextUpdate) {\n        this._lastRenderedCellCount = cellCount;\n        this._lastRenderedCellLayoutManager = cellLayoutManager;\n        this._calculateSizeAndPositionDataOnNextUpdate = false;\n        cellLayoutManager.calculateSizeAndPositionData();\n      }\n\n      var _cellLayoutManager$ge3 = cellLayoutManager.getTotalSize(),\n          totalHeight = _cellLayoutManager$ge3.height,\n          totalWidth = _cellLayoutManager$ge3.width; // Safely expand the rendered area by the specified overscan amount\n\n\n      var left = Math.max(0, scrollLeft - horizontalOverscanSize);\n      var top = Math.max(0, scrollTop - verticalOverscanSize);\n      var right = Math.min(totalWidth, scrollLeft + width + horizontalOverscanSize);\n      var bottom = Math.min(totalHeight, scrollTop + height + verticalOverscanSize);\n      var childrenToDisplay = height > 0 && width > 0 ? cellLayoutManager.cellRenderers({\n        height: bottom - top,\n        isScrolling: isScrolling,\n        width: right - left,\n        x: left,\n        y: top\n      }) : [];\n      var collectionStyle = {\n        boxSizing: 'border-box',\n        direction: 'ltr',\n        height: autoHeight ? 'auto' : height,\n        position: 'relative',\n        WebkitOverflowScrolling: 'touch',\n        width: width,\n        willChange: 'transform'\n      }; // Force browser to hide scrollbars when we know they aren't necessary.\n      // Otherwise once scrollbars appear they may not disappear again.\n      // For more info see issue #116\n\n      var verticalScrollBarSize = totalHeight > height ? this._scrollbarSize : 0;\n      var horizontalScrollBarSize = totalWidth > width ? this._scrollbarSize : 0; // Also explicitly init styles to 'auto' if scrollbars are required.\n      // This works around an obscure edge case where external CSS styles have not yet been loaded,\n      // But an initial scroll index of offset is set as an external prop.\n      // Without this style, Grid would render the correct range of cells but would NOT update its internal offset.\n      // This was originally reported via clauderic/react-infinite-calendar/issues/23\n\n      collectionStyle.overflowX = totalWidth + verticalScrollBarSize <= width ? 'hidden' : 'auto';\n      collectionStyle.overflowY = totalHeight + horizontalScrollBarSize <= height ? 'hidden' : 'auto';\n      return React.createElement(\"div\", {\n        ref: this._setScrollingContainerRef,\n        \"aria-label\": this.props['aria-label'],\n        className: clsx('ReactVirtualized__Collection', className),\n        id: id,\n        onScroll: this._onScroll,\n        role: \"grid\",\n        style: _objectSpread({}, collectionStyle, {}, style),\n        tabIndex: 0\n      }, cellCount > 0 && React.createElement(\"div\", {\n        className: \"ReactVirtualized__Collection__innerScrollContainer\",\n        style: {\n          height: totalHeight,\n          maxHeight: totalHeight,\n          maxWidth: totalWidth,\n          overflow: 'hidden',\n          pointerEvents: isScrolling ? 'none' : '',\n          width: totalWidth\n        }\n      }, childrenToDisplay), cellCount === 0 && noContentRenderer());\n    }\n    /* ---------------------------- Helper methods ---------------------------- */\n\n    /**\n     * Sets an :isScrolling flag for a small window of time.\n     * This flag is used to disable pointer events on the scrollable portion of the Collection.\n     * This prevents jerky/stuttery mouse-wheel scrolling.\n     */\n\n  }, {\n    key: \"_enablePointerEventsAfterDelay\",\n    value: function _enablePointerEventsAfterDelay() {\n      var _this2 = this;\n\n      if (this._disablePointerEventsTimeoutId) {\n        clearTimeout(this._disablePointerEventsTimeoutId);\n      }\n\n      this._disablePointerEventsTimeoutId = setTimeout(function () {\n        var isScrollingChange = _this2.props.isScrollingChange;\n        isScrollingChange(false);\n        _this2._disablePointerEventsTimeoutId = null;\n\n        _this2.setState({\n          isScrolling: false\n        });\n      }, IS_SCROLLING_TIMEOUT);\n    }\n  }, {\n    key: \"_invokeOnScrollMemoizer\",\n    value: function _invokeOnScrollMemoizer(_ref) {\n      var _this3 = this;\n\n      var scrollLeft = _ref.scrollLeft,\n          scrollTop = _ref.scrollTop,\n          totalHeight = _ref.totalHeight,\n          totalWidth = _ref.totalWidth;\n\n      this._onScrollMemoizer({\n        callback: function callback(_ref2) {\n          var scrollLeft = _ref2.scrollLeft,\n              scrollTop = _ref2.scrollTop;\n          var _this3$props = _this3.props,\n              height = _this3$props.height,\n              onScroll = _this3$props.onScroll,\n              width = _this3$props.width;\n          onScroll({\n            clientHeight: height,\n            clientWidth: width,\n            scrollHeight: totalHeight,\n            scrollLeft: scrollLeft,\n            scrollTop: scrollTop,\n            scrollWidth: totalWidth\n          });\n        },\n        indices: {\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop\n        }\n      });\n    }\n  }, {\n    key: \"_setScrollPosition\",\n    value: function _setScrollPosition(_ref3) {\n      var scrollLeft = _ref3.scrollLeft,\n          scrollTop = _ref3.scrollTop;\n      var newState = {\n        scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED\n      };\n\n      if (scrollLeft >= 0) {\n        newState.scrollLeft = scrollLeft;\n      }\n\n      if (scrollTop >= 0) {\n        newState.scrollTop = scrollTop;\n      }\n\n      if (scrollLeft >= 0 && scrollLeft !== this.state.scrollLeft || scrollTop >= 0 && scrollTop !== this.state.scrollTop) {\n        this.setState(newState);\n      }\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.cellCount === 0 && (prevState.scrollLeft !== 0 || prevState.scrollTop !== 0)) {\n        return {\n          scrollLeft: 0,\n          scrollTop: 0,\n          scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED\n        };\n      } else if (nextProps.scrollLeft !== prevState.scrollLeft || nextProps.scrollTop !== prevState.scrollTop) {\n        return {\n          scrollLeft: nextProps.scrollLeft != null ? nextProps.scrollLeft : prevState.scrollLeft,\n          scrollTop: nextProps.scrollTop != null ? nextProps.scrollTop : prevState.scrollTop,\n          scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return CollectionView;\n}(React.PureComponent);\n\n_defineProperty(CollectionView, \"defaultProps\", {\n  'aria-label': 'grid',\n  horizontalOverscanSize: 0,\n  noContentRenderer: function noContentRenderer() {\n    return null;\n  },\n  onScroll: function onScroll() {\n    return null;\n  },\n  onSectionRendered: function onSectionRendered() {\n    return null;\n  },\n  scrollToAlignment: 'auto',\n  scrollToCell: -1,\n  style: {},\n  verticalOverscanSize: 0\n});\n\nCollectionView.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  'aria-label': PropTypes.string,\n\n  /**\n   * Removes fixed height from the scrollingContainer so that the total height\n   * of rows can stretch the window. Intended for use with WindowScroller\n   */\n  autoHeight: PropTypes.bool,\n\n  /**\n   * Number of cells in collection.\n   */\n  cellCount: PropTypes.number.isRequired,\n\n  /**\n   * Calculates cell sizes and positions and manages rendering the appropriate cells given a specified window.\n   */\n  cellLayoutManager: PropTypes.object.isRequired,\n\n  /**\n   * Optional custom CSS class name to attach to root Collection element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * Height of Collection; this property determines the number of visible (vs virtualized) rows.\n   */\n  height: PropTypes.number.isRequired,\n\n  /**\n   * Optional custom id to attach to root Collection element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Enables the `Collection` to horiontally \"overscan\" its content similar to how `Grid` does.\n   * This can reduce flicker around the edges when a user scrolls quickly.\n   */\n  horizontalOverscanSize: PropTypes.number.isRequired,\n  isScrollingChange: PropTypes.func,\n\n  /**\n   * Optional renderer to be used in place of rows when either :rowCount or :cellCount is 0.\n   */\n  noContentRenderer: PropTypes.func.isRequired,\n\n  /**\n   * Callback invoked whenever the scroll offset changes within the inner scrollable region.\n   * This callback can be used to sync scrolling between lists, tables, or grids.\n   * ({ clientHeight, clientWidth, scrollHeight, scrollLeft, scrollTop, scrollWidth }): void\n   */\n  onScroll: PropTypes.func.isRequired,\n\n  /**\n   * Callback invoked with information about the section of the Collection that was just rendered.\n   * This callback is passed a named :indices parameter which is an Array of the most recently rendered section indices.\n   */\n  onSectionRendered: PropTypes.func.isRequired,\n\n  /**\n   * Horizontal offset.\n   */\n  scrollLeft: PropTypes.number,\n\n  /**\n   * Controls scroll-to-cell behavior of the Grid.\n   * The default (\"auto\") scrolls the least amount possible to ensure that the specified cell is fully visible.\n   * Use \"start\" to align cells to the top/left of the Grid and \"end\" to align bottom/right.\n   */\n  scrollToAlignment: PropTypes.oneOf(['auto', 'end', 'start', 'center']).isRequired,\n\n  /**\n   * Cell index to ensure visible (by forcefully scrolling if necessary).\n   */\n  scrollToCell: PropTypes.number.isRequired,\n\n  /**\n   * Vertical offset.\n   */\n  scrollTop: PropTypes.number,\n\n  /**\n   * Optional custom inline style to attach to root Collection element.\n   */\n  style: PropTypes.object,\n\n  /**\n   * Enables the `Collection` to vertically \"overscan\" its content similar to how `Grid` does.\n   * This can reduce flicker around the edges when a user scrolls quickly.\n   */\n  verticalOverscanSize: PropTypes.number.isRequired,\n\n  /**\n   * Width of Collection; this property determines the number of visible (vs virtualized) columns.\n   */\n  width: PropTypes.number.isRequired\n} : {};\npolyfill(CollectionView);\nexport default CollectionView;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}