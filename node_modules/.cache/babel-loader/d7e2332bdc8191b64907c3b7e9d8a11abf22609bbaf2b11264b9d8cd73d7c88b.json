{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addDataToMapComposed = exports.loadFilesSuccessUpdater = exports.addDataToMapUpdater = exports.defaultAddDataToMapOptions = exports.isValidConfig = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _uiStateUpdaters = require(\"./ui-state-updaters\");\nvar _visStateUpdaters = require(\"./vis-state-updaters\");\nvar _mapStateUpdaters = require(\"./map-state-updaters\");\nvar _mapStyleUpdaters = require(\"./map-style-updaters\");\nvar _processors = require(\"@kepler.gl/processors\");\nvar _composerHelpers = require(\"./composer-helpers\");\nvar _utils = require(\"@kepler.gl/utils\");\nvar _dataUtils = require(\"./data-utils\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\n\n// compose action to apply result multiple reducers, with the output of one\n\n/**\n * Some actions will affect the entire kepler.lg instance state.\n * The updaters for these actions is exported as `combinedUpdaters`. These updater take the entire instance state\n * as the first argument. Read more about [Using updaters](../advanced-usage/using-updaters.md)\n * @public\n * @example\n *\n * import keplerGlReducer, {combinedUpdaters} from 'kepler.gl/reducers';\n * // Root Reducer\n * const reducers = combineReducers({\n *  keplerGl: keplerGlReducer,\n *  app: appReducer\n * });\n *\n * const composedReducer = (state, action) => {\n *  switch (action.type) {\n *    // add data to map after receiving data from remote sources\n *    case 'LOAD_REMOTE_RESOURCE_SUCCESS':\n *      return {\n *        ...state,\n *        keplerGl: {\n *          ...state.keplerGl,\n *          // pass in kepler.gl instance state to combinedUpdaters\n *          map:  combinedUpdaters.addDataToMapUpdater(\n *           state.keplerGl.map,\n *           {\n *             payload: {\n *               datasets: action.datasets,\n *               options: {readOnly: true},\n *               config: action.config\n *              }\n *            }\n *          )\n *        }\n *      };\n *  }\n *  return reducers(state, action);\n * };\n *\n * export default composedReducer;\n */\n\n/* eslint-disable no-unused-vars */\n// @ts-ignore\nvar combinedUpdaters = null;\n/* eslint-enable no-unused-vars */\n\nvar isValidConfig = function isValidConfig(config) {\n  return (0, _utils.isPlainObject)(config) && (0, _utils.isPlainObject)(config.config) && config.version;\n};\nexports.isValidConfig = isValidConfig;\nvar defaultAddDataToMapOptions = {\n  centerMap: true,\n  keepExistingConfig: false,\n  autoCreateLayers: true\n};\n/**\n * Combine data and full configuration update in a single action\n *\n * @memberof combinedUpdaters\n * @param {Object} state kepler.gl instance state, containing all subreducer state\n * @param {Object} action\n * @param {Object} action.payload `{datasets, options, config}`\n * @param action.payload.datasets - ***required** datasets can be a dataset or an array of datasets\n * Each dataset object needs to have `info` and `data` property.\n * @param [action.payload.options] option object `{centerMap: true}`\n * @param [action.payload.config] map config\n * @param [action.payload.info] map info contains title and description\n * @returns nextState\n *\n * @typedef {Object} Dataset\n * @property info -info of a dataset\n * @property info.id - id of this dataset. If config is defined, `id` should matches the `dataId` in config.\n * @property info.label - A display name of this dataset\n * @property data - ***required** The data object, in a tabular format with 2 properties `fields` and `rows`\n * @property data.fields - ***required** Array of fields,\n * @property data.fields.name - ***required** Name of the field,\n * @property data.rows - ***required** Array of rows, in a tabular format with `fields` and `rows`\n *\n * @public\n */\n\nexports.defaultAddDataToMapOptions = defaultAddDataToMapOptions;\nvar addDataToMapUpdater = function addDataToMapUpdater(state, _ref) {\n  var payload = _ref.payload;\n  var datasets = payload.datasets,\n    config = payload.config,\n    info = payload.info;\n  var options = _objectSpread(_objectSpread({}, defaultAddDataToMapOptions), payload.options); // @ts-expect-error\n\n  var parsedConfig = config;\n  if (isValidConfig(config)) {\n    // if passed in saved config\n    // @ts-expect-error\n    parsedConfig = state.visState.schema.parseSavedConfig(config);\n  }\n  var oldLayers = state.visState.layers;\n  var filterNewlyAddedLayers = function filterNewlyAddedLayers(layers) {\n    return layers.filter(function (nl) {\n      return !oldLayers.find(function (ol) {\n        return ol === nl;\n      });\n    });\n  }; // Returns undefined if not found, to make typescript happy\n\n  var findMapBoundsIfCentered = function findMapBoundsIfCentered(layers) {\n    var bounds = options.centerMap && (0, _dataUtils.findMapBounds)(layers);\n    return bounds ? bounds : undefined;\n  };\n  return (0, _composerHelpers.compose_)([(0, _composerHelpers.pick_)('visState')((0, _composerHelpers.apply_)(_visStateUpdaters.updateVisDataUpdater, {\n    datasets: datasets,\n    options: options,\n    config: parsedConfig\n  })), (0, _composerHelpers.if_)(Boolean(info), (0, _composerHelpers.pick_)('visState')((0, _composerHelpers.apply_)(_visStateUpdaters.setMapInfoUpdater, {\n    info: info\n  }))), (0, _composerHelpers.with_)(function (_ref2) {\n    var visState = _ref2.visState;\n    return (0, _composerHelpers.pick_)('mapState')((0, _composerHelpers.apply_)(_mapStateUpdaters.receiveMapConfigUpdater, (0, _composerHelpers.payload_)({\n      config: parsedConfig,\n      options: options,\n      bounds: findMapBoundsIfCentered(filterNewlyAddedLayers(visState.layers))\n    })));\n  }), (0, _composerHelpers.pick_)('mapStyle')((0, _composerHelpers.apply_)(_mapStyleUpdaters.receiveMapConfigUpdater, (0, _composerHelpers.payload_)({\n    config: parsedConfig,\n    options: options\n  }))), (0, _composerHelpers.pick_)('uiState')((0, _composerHelpers.apply_)(_uiStateUpdaters.loadFilesSuccessUpdater, (0, _composerHelpers.payload_)(null))), (0, _composerHelpers.pick_)('uiState')((0, _composerHelpers.apply_)(_uiStateUpdaters.toggleModalUpdater, (0, _composerHelpers.payload_)(null))), (0, _composerHelpers.pick_)('uiState')((0, _composerHelpers.merge_)(options.hasOwnProperty('readOnly') ? {\n    readOnly: options.readOnly\n  } : {}))])(state);\n};\nexports.addDataToMapUpdater = addDataToMapUpdater;\nvar loadFilesSuccessUpdater = function loadFilesSuccessUpdater(state, action) {\n  // still more to load\n  var payloads = (0, _processors.filesToDataPayload)(action.result);\n  var nextState = (0, _composerHelpers.compose_)([(0, _composerHelpers.pick_)('visState')((0, _composerHelpers.merge_)({\n    fileLoading: false,\n    fileLoadingProgress: {}\n  }))])(state); // make multiple add data to map calls\n\n  var stateWithData = (0, _composerHelpers.compose_)(payloads.map(function (p) {\n    return (0, _composerHelpers.apply_)(addDataToMapUpdater, (0, _composerHelpers.payload_)(p));\n  }))(nextState);\n  return stateWithData;\n};\nexports.loadFilesSuccessUpdater = loadFilesSuccessUpdater;\nvar addDataToMapComposed = addDataToMapUpdater;\nexports.addDataToMapComposed = addDataToMapComposed;","map":{"version":3,"names":["value","_uiStateUpdaters","require","_visStateUpdaters","_mapStateUpdaters","_mapStyleUpdaters","_processors","_composerHelpers","_utils","_dataUtils","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","getOwnPropertyDescriptors","defineProperties","defineProperty","combinedUpdaters","isValidConfig","config","isPlainObject","version","exports","defaultAddDataToMapOptions","centerMap","keepExistingConfig","autoCreateLayers","addDataToMapUpdater","nl","state","_ref","payload","datasets","info","parsedConfig","visState","schema","parseSavedConfig","oldLayers","layers","filterNewlyAddedLayers","find","ol","findMapBoundsIfCentered","bounds","options","findMapBounds","undefined","if_","Boolean","pick_","apply_","setMapInfoUpdater","with_","_ref2","receiveMapConfigUpdater","payload_"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/reducers/src/combined-updaters.ts"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  toggleModalUpdater,\n  loadFilesSuccessUpdater as uiStateLoadFilesSuccessUpdater\n} from './ui-state-updaters';\nimport {\n  updateVisDataUpdater as visStateUpdateVisDataUpdater,\n  setMapInfoUpdater\n} from './vis-state-updaters';\nimport {receiveMapConfigUpdater as stateMapConfigUpdater} from './map-state-updaters';\nimport {receiveMapConfigUpdater as styleMapConfigUpdater} from './map-style-updaters';\nimport {filesToDataPayload} from '@kepler.gl/processors';\nimport {payload_, apply_, with_, if_, compose_, merge_, pick_} from './composer-helpers';\nimport {MapState, UiState, AddDataToMapPayload, ParsedConfig} from '@kepler.gl/types';\nimport {MapStyle} from './map-style-updaters';\nimport {ProviderState} from './provider-state-updaters';\nimport {loadFilesSuccessUpdaterAction} from '@kepler.gl/actions';\nimport {VisState} from '@kepler.gl/schemas';\nimport {Layer} from '@kepler.gl/layers';\nimport {isPlainObject} from '@kepler.gl/utils';\nimport {findMapBounds} from './data-utils';\n\nexport type KeplerGlState = {\n  visState: VisState;\n  mapState: MapState;\n  mapStyle: MapStyle;\n  uiState: UiState;\n  providerState: ProviderState;\n};\n\n// compose action to apply result multiple reducers, with the output of one\n\n/**\n * Some actions will affect the entire kepler.lg instance state.\n * The updaters for these actions is exported as `combinedUpdaters`. These updater take the entire instance state\n * as the first argument. Read more about [Using updaters](../advanced-usage/using-updaters.md)\n * @public\n * @example\n *\n * import keplerGlReducer, {combinedUpdaters} from 'kepler.gl/reducers';\n * // Root Reducer\n * const reducers = combineReducers({\n *  keplerGl: keplerGlReducer,\n *  app: appReducer\n * });\n *\n * const composedReducer = (state, action) => {\n *  switch (action.type) {\n *    // add data to map after receiving data from remote sources\n *    case 'LOAD_REMOTE_RESOURCE_SUCCESS':\n *      return {\n *        ...state,\n *        keplerGl: {\n *          ...state.keplerGl,\n *          // pass in kepler.gl instance state to combinedUpdaters\n *          map:  combinedUpdaters.addDataToMapUpdater(\n *           state.keplerGl.map,\n *           {\n *             payload: {\n *               datasets: action.datasets,\n *               options: {readOnly: true},\n *               config: action.config\n *              }\n *            }\n *          )\n *        }\n *      };\n *  }\n *  return reducers(state, action);\n * };\n *\n * export default composedReducer;\n */\n\n/* eslint-disable no-unused-vars */\n// @ts-ignore\nconst combinedUpdaters = null;\n/* eslint-enable no-unused-vars */\n\nexport const isValidConfig = config =>\n  isPlainObject(config) && isPlainObject(config.config) && config.version;\n\nexport const defaultAddDataToMapOptions = {\n  centerMap: true,\n  keepExistingConfig: false,\n  autoCreateLayers: true\n};\n\n/**\n * Combine data and full configuration update in a single action\n *\n * @memberof combinedUpdaters\n * @param {Object} state kepler.gl instance state, containing all subreducer state\n * @param {Object} action\n * @param {Object} action.payload `{datasets, options, config}`\n * @param action.payload.datasets - ***required** datasets can be a dataset or an array of datasets\n * Each dataset object needs to have `info` and `data` property.\n * @param [action.payload.options] option object `{centerMap: true}`\n * @param [action.payload.config] map config\n * @param [action.payload.info] map info contains title and description\n * @returns nextState\n *\n * @typedef {Object} Dataset\n * @property info -info of a dataset\n * @property info.id - id of this dataset. If config is defined, `id` should matches the `dataId` in config.\n * @property info.label - A display name of this dataset\n * @property data - ***required** The data object, in a tabular format with 2 properties `fields` and `rows`\n * @property data.fields - ***required** Array of fields,\n * @property data.fields.name - ***required** Name of the field,\n * @property data.rows - ***required** Array of rows, in a tabular format with `fields` and `rows`\n *\n * @public\n */\nexport const addDataToMapUpdater = (\n  state: KeplerGlState,\n  {payload}: {payload: AddDataToMapPayload}\n): KeplerGlState => {\n  const {datasets, config, info} = payload;\n\n  const options = {\n    ...defaultAddDataToMapOptions,\n    ...payload.options\n  };\n\n  // @ts-expect-error\n  let parsedConfig: ParsedConfig = config;\n\n  if (isValidConfig(config)) {\n    // if passed in saved config\n    // @ts-expect-error\n    parsedConfig = state.visState.schema.parseSavedConfig(config);\n  }\n  const oldLayers = state.visState.layers;\n  const filterNewlyAddedLayers = (layers: Layer[]) =>\n    layers.filter(nl => !oldLayers.find(ol => ol === nl));\n\n  // Returns undefined if not found, to make typescript happy\n  const findMapBoundsIfCentered = (layers: Layer[]) => {\n    const bounds = options.centerMap && findMapBounds(layers);\n    return bounds ? bounds : undefined;\n  };\n\n  return compose_<KeplerGlState>([\n    pick_('visState')(\n      apply_<VisState, any>(visStateUpdateVisDataUpdater, {\n        datasets,\n        options,\n        config: parsedConfig\n      })\n    ),\n\n    if_(\n      Boolean(info),\n      pick_('visState')(\n        apply_<VisState, any>(setMapInfoUpdater, {info})\n      )\n    ),\n\n    with_(({visState}) =>\n      pick_('mapState')(\n        apply_(\n          stateMapConfigUpdater,\n          payload_({\n            config: parsedConfig,\n            options,\n            bounds: findMapBoundsIfCentered(filterNewlyAddedLayers(visState.layers))\n          })\n        )\n      )\n    ),\n    pick_('mapStyle')(apply_(styleMapConfigUpdater, payload_({config: parsedConfig, options}))),\n    pick_('uiState')(apply_(uiStateLoadFilesSuccessUpdater, payload_(null))),\n    pick_('uiState')(apply_(toggleModalUpdater, payload_(null))),\n    pick_('uiState')(merge_(options.hasOwnProperty('readOnly') ? {readOnly: options.readOnly} : {}))\n  ])(state);\n};\n\nexport const loadFilesSuccessUpdater = (\n  state: KeplerGlState,\n  action: loadFilesSuccessUpdaterAction\n): KeplerGlState => {\n  // still more to load\n  const payloads = filesToDataPayload(action.result);\n  const nextState = compose_([\n    pick_('visState')(\n      merge_({\n        fileLoading: false,\n        fileLoadingProgress: {}\n      })\n    )\n  ])(state);\n  // make multiple add data to map calls\n  const stateWithData = compose_(payloads.map(p => apply_(addDataToMapUpdater, payload_(p))))(\n    nextState\n  );\n  return stateWithData as KeplerGlState;\n};\n\nexport const addDataToMapComposed = addDataToMapUpdater;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}