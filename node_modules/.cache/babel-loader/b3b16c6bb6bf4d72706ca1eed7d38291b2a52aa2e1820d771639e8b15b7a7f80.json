{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.clusterVisConfigs = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _aggregationLayer = _interopRequireDefault(require(\"../aggregation-layer\"));\nvar _layers = require(\"@deck.gl/layers\");\nvar _deckglLayers = require(\"@kepler.gl/deckgl-layers\");\nvar _clusterLayerIcon = _interopRequireDefault(require(\"./cluster-layer-icon\"));\nvar _constants = require(\"@kepler.gl/constants\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar clusterVisConfigs = {\n  opacity: 'opacity',\n  clusterRadius: 'clusterRadius',\n  colorRange: 'colorRange',\n  radiusRange: 'clusterRadiusRange',\n  colorAggregation: 'colorAggregation'\n};\nexports.clusterVisConfigs = clusterVisConfigs;\nvar ClusterLayer = /*#__PURE__*/function (_AggregationLayer) {\n  (0, _inherits2[\"default\"])(ClusterLayer, _AggregationLayer);\n  var _super = _createSuper(ClusterLayer);\n  function ClusterLayer(props) {\n    var _this;\n    (0, _classCallCheck2[\"default\"])(this, ClusterLayer);\n    _this = _super.call(this, props);\n    _this.registerVisConfig(clusterVisConfigs); // Access data of a point from aggregated clusters, depends on how getClusterer works\n\n    _this.getPointData = function (pt) {\n      return pt;\n    };\n    return _this;\n  }\n  (0, _createClass2[\"default\"])(ClusterLayer, [{\n    key: \"type\",\n    get: function get() {\n      return 'cluster';\n    }\n  }, {\n    key: \"layerIcon\",\n    get: function get() {\n      return _clusterLayerIcon[\"default\"];\n    }\n  }, {\n    key: \"visualChannels\",\n    get: function get() {\n      return {\n        color: {\n          aggregation: 'colorAggregation',\n          channelScaleType: _constants.CHANNEL_SCALES.colorAggr,\n          defaultMeasure: 'property.pointCount',\n          domain: 'colorDomain',\n          field: 'colorField',\n          key: 'color',\n          property: 'color',\n          range: 'colorRange',\n          scale: 'colorScale'\n        }\n      };\n    }\n  }, {\n    key: \"renderLayer\",\n    value: function renderLayer(opts) {\n      var visConfig = this.config.visConfig;\n      var data = opts.data,\n        gpuFilter = opts.gpuFilter,\n        objectHovered = opts.objectHovered,\n        mapState = opts.mapState,\n        layerCallbacks = opts.layerCallbacks;\n      var updateTriggers = {\n        getColorValue: {\n          colorField: this.config.colorField,\n          colorAggregation: this.config.visConfig.colorAggregation\n        },\n        filterData: _objectSpread({\n          filterRange: gpuFilter.filterRange\n        }, gpuFilter.filterValueUpdateTriggers)\n      };\n      var filterData = data._filterData,\n        clusterData = (0, _objectWithoutProperties2[\"default\"])(data, [\"_filterData\"]);\n      var hoveredObject = this.hasHoveredObject(objectHovered);\n      return [new _deckglLayers.DeckGLClusterLayer(_objectSpread(_objectSpread(_objectSpread({}, this.getDefaultDeckLayerProps(opts)), clusterData), {}, {\n        filterData: filterData,\n        // radius\n        radiusScale: 1,\n        radiusRange: visConfig.radiusRange,\n        clusterRadius: visConfig.clusterRadius,\n        // color\n        colorRange: this.getColorRange(visConfig.colorRange),\n        colorScaleType: this.config.colorScale,\n        colorAggregation: visConfig.colorAggregation,\n        zoom: Math.round(mapState.zoom),\n        width: mapState.width,\n        height: mapState.height,\n        // updateTriggers\n        updateTriggers: updateTriggers,\n        // call back from layer after calculate clusters\n        onSetColorDomain: layerCallbacks.onSetLayerDomain\n      }))].concat((0, _toConsumableArray2[\"default\"])(hoveredObject ? [new _layers.ScatterplotLayer({\n        id: \"\".concat(this.id, \"-hovered\"),\n        data: [hoveredObject],\n        getFillColor: this.config.highlightColor,\n        getRadius: function getRadius(d) {\n          return d.radius;\n        },\n        radiusScale: 1,\n        pickable: false\n      })] : []));\n    }\n  }]);\n  return ClusterLayer;\n}(_aggregationLayer[\"default\"]);\nexports[\"default\"] = ClusterLayer;","map":{"version":3,"names":["value","exports","clusterVisConfigs","_toConsumableArray2","_interopRequireDefault","require","_objectWithoutProperties2","_defineProperty2","_getPrototypeOf2","_aggregationLayer","_layers","_deckglLayers","_objectSpread","target","i","arguments","length","source","ownKeys","Object","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","getOwnPropertyDescriptor","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","prototype","valueOf","call","e","colorRange","radiusRange","colorAggregation","_createSuper","ClusterLayer","props","_this","_super","getPointData","pt","_createClass2","get","gpuFilter","color","aggregation","channelScaleType","_constants","CHANNEL_SCALES","colorAggr","defaultMeasure","domain","field","property","range","scale","renderLayer","filterData","opts","visConfig","config","data","objectHovered","mapState","layerCallbacks","updateTriggers","getColorValue","colorField","filterRange","filterValueUpdateTriggers","_filterData","clusterData","hoveredObject","hasHoveredObject","DeckGLClusterLayer","getDefaultDeckLayerProps","radiusScale","clusterRadius","getColorRange","zoom","Math","round"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/layers/src/cluster-layer/cluster-layer.ts"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport AggregationLayer, {AggregationLayerConfig} from '../aggregation-layer';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\nimport {DeckGLClusterLayer} from '@kepler.gl/deckgl-layers';\nimport ClusterLayerIcon from './cluster-layer-icon';\nimport {\n  VisConfigColorRange,\n  VisConfigNumber,\n  VisConfigRange,\n  VisConfigSelection,\n  Merge\n} from '@kepler.gl/types';\nimport {CHANNEL_SCALES, AggregationTypes, ColorRange} from '@kepler.gl/constants';\nimport {VisualChannels} from '../base-layer';\n\nexport type ClusterLayerVisConfigSettings = {\n  opacity: VisConfigNumber;\n  clusterRadius: VisConfigNumber;\n  colorRange: VisConfigColorRange;\n  radiusRange: VisConfigRange;\n  colorAggregation: VisConfigSelection;\n};\n\nexport type ClusterLayerVisConfig = {\n  opacity: number;\n  clusterRadius: number;\n  colorRange: ColorRange;\n  radiusRange: [number, number];\n  colorAggregation: AggregationTypes;\n};\n\nexport type ClusterLayerConfig = Merge<AggregationLayerConfig, {visConfig: ClusterLayerVisConfig}>;\n\nexport const clusterVisConfigs: {\n  opacity: 'opacity';\n  clusterRadius: 'clusterRadius';\n  colorRange: 'colorRange';\n  radiusRange: 'clusterRadiusRange';\n  colorAggregation: 'colorAggregation';\n} = {\n  opacity: 'opacity',\n  clusterRadius: 'clusterRadius',\n  colorRange: 'colorRange',\n  radiusRange: 'clusterRadiusRange',\n  colorAggregation: 'colorAggregation'\n};\n\nexport default class ClusterLayer extends AggregationLayer {\n  declare visConfigSettings: ClusterLayerVisConfigSettings;\n  declare config: ClusterLayerConfig;\n\n  constructor(props) {\n    super(props);\n    this.registerVisConfig(clusterVisConfigs);\n\n    // Access data of a point from aggregated clusters, depends on how getClusterer works\n    this.getPointData = pt => pt;\n  }\n\n  get type(): 'cluster' {\n    return 'cluster';\n  }\n\n  get layerIcon() {\n    return ClusterLayerIcon;\n  }\n\n  get visualChannels(): VisualChannels {\n    return {\n      color: {\n        aggregation: 'colorAggregation',\n        channelScaleType: CHANNEL_SCALES.colorAggr,\n        defaultMeasure: 'property.pointCount',\n        domain: 'colorDomain',\n        field: 'colorField',\n        key: 'color',\n        property: 'color',\n        range: 'colorRange',\n        scale: 'colorScale'\n      }\n    };\n  }\n\n  renderLayer(opts) {\n    const {visConfig} = this.config;\n    const {data, gpuFilter, objectHovered, mapState, layerCallbacks} = opts;\n\n    const updateTriggers = {\n      getColorValue: {\n        colorField: this.config.colorField,\n        colorAggregation: this.config.visConfig.colorAggregation\n      },\n      filterData: {\n        filterRange: gpuFilter.filterRange,\n        ...gpuFilter.filterValueUpdateTriggers\n      }\n    };\n    const {_filterData: filterData, ...clusterData} = data;\n    const hoveredObject = this.hasHoveredObject(objectHovered);\n\n    return [\n      new DeckGLClusterLayer({\n        ...this.getDefaultDeckLayerProps(opts),\n        ...clusterData,\n        filterData,\n\n        // radius\n        radiusScale: 1,\n        radiusRange: visConfig.radiusRange,\n        clusterRadius: visConfig.clusterRadius,\n\n        // color\n        colorRange: this.getColorRange(visConfig.colorRange),\n        colorScaleType: this.config.colorScale,\n        colorAggregation: visConfig.colorAggregation,\n\n        zoom: Math.round(mapState.zoom),\n        width: mapState.width,\n        height: mapState.height,\n\n        // updateTriggers\n        updateTriggers,\n\n        // call back from layer after calculate clusters\n        onSetColorDomain: layerCallbacks.onSetLayerDomain\n      }),\n      // hover layer\n      ...(hoveredObject\n        ? [\n            new ScatterplotLayer<{radius: number}>({\n              id: `${this.id}-hovered`,\n              data: [hoveredObject],\n              getFillColor: this.config.highlightColor,\n              getRadius: d => d.radius,\n              radiusScale: 1,\n              pickable: false\n            })\n          ]\n        : [])\n    ];\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}