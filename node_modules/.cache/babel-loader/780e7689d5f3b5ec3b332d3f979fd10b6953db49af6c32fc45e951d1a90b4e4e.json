{"ast":null,"code":"/*\n * Copyright 2015-2016 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n'use strict';\n\nvar charMap;\ncharMap = function () {\n  var strings = {\n    alpha: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',\n    digit: '0123456789'\n  };\n  strings.genDelims = ':/?#[]@';\n  strings.subDelims = '!$&\\'()*+,;=';\n  strings.reserved = strings.genDelims + strings.subDelims;\n  strings.unreserved = strings.alpha + strings.digit + '-._~';\n  strings.url = strings.reserved + strings.unreserved;\n  strings.scheme = strings.alpha + strings.digit + '+-.';\n  strings.userinfo = strings.unreserved + strings.subDelims + ':';\n  strings.host = strings.unreserved + strings.subDelims;\n  strings.port = strings.digit;\n  strings.pchar = strings.unreserved + strings.subDelims + ':@';\n  strings.segment = strings.pchar;\n  strings.path = strings.segment + '/';\n  strings.query = strings.pchar + '/?';\n  strings.fragment = strings.pchar + '/?';\n  return Object.keys(strings).reduce(function (charMap, set) {\n    charMap[set] = strings[set].split('').reduce(function (chars, myChar) {\n      chars[myChar] = true;\n      return chars;\n    }, {});\n    return charMap;\n  }, {});\n}();\nfunction encode(str, allowed) {\n  if (typeof str !== 'string') {\n    throw new Error('String required for URL encoding');\n  }\n  return str.split('').map(function (myChar) {\n    if (allowed.hasOwnProperty(myChar)) {\n      return myChar;\n    }\n    var code = myChar.charCodeAt(0);\n    if (code <= 127) {\n      var encoded = code.toString(16).toUpperCase();\n      return '%' + (encoded.length % 2 === 1 ? '0' : '') + encoded;\n    } else {\n      return encodeURIComponent(myChar).toUpperCase();\n    }\n  }).join('');\n}\nfunction makeEncoder(allowed) {\n  allowed = allowed || charMap.unreserved;\n  return function (str) {\n    return encode(str, allowed);\n  };\n}\nfunction decode(str) {\n  return decodeURIComponent(str);\n}\nmodule.exports = {\n  /*\n   * Decode URL encoded strings\n   *\n   * @param {string} URL encoded string\n   * @returns {string} URL decoded string\n   */\n  decode: decode,\n  /*\n   * URL encode a string\n   *\n   * All but alpha-numerics and a very limited set of punctuation - . _ ~ are\n   * encoded.\n   *\n   * @param {string} string to encode\n   * @returns {string} URL encoded string\n   */\n  encode: makeEncoder(),\n  /*\n  * URL encode a URL\n  *\n  * All character permitted anywhere in a URL are left unencoded even\n  * if that character is not permitted in that portion of a URL.\n  *\n  * Note: This method is typically not what you want.\n  *\n  * @param {string} string to encode\n  * @returns {string} URL encoded string\n  */\n  encodeURL: makeEncoder(charMap.url),\n  /*\n   * URL encode the scheme portion of a URL\n   *\n   * @param {string} string to encode\n   * @returns {string} URL encoded string\n   */\n  encodeScheme: makeEncoder(charMap.scheme),\n  /*\n   * URL encode the user info portion of a URL\n   *\n   * @param {string} string to encode\n   * @returns {string} URL encoded string\n   */\n  encodeUserInfo: makeEncoder(charMap.userinfo),\n  /*\n   * URL encode the host portion of a URL\n   *\n   * @param {string} string to encode\n   * @returns {string} URL encoded string\n   */\n  encodeHost: makeEncoder(charMap.host),\n  /*\n   * URL encode the port portion of a URL\n   *\n   * @param {string} string to encode\n   * @returns {string} URL encoded string\n   */\n  encodePort: makeEncoder(charMap.port),\n  /*\n   * URL encode a path segment portion of a URL\n   *\n   * @param {string} string to encode\n   * @returns {string} URL encoded string\n   */\n  encodePathSegment: makeEncoder(charMap.segment),\n  /*\n   * URL encode the path portion of a URL\n   *\n   * @param {string} string to encode\n   * @returns {string} URL encoded string\n   */\n  encodePath: makeEncoder(charMap.path),\n  /*\n   * URL encode the query portion of a URL\n   *\n   * @param {string} string to encode\n   * @returns {string} URL encoded string\n   */\n  encodeQuery: makeEncoder(charMap.query),\n  /*\n   * URL encode the fragment portion of a URL\n   *\n   * @param {string} string to encode\n   * @returns {string} URL encoded string\n   */\n  encodeFragment: makeEncoder(charMap.fragment)\n};","map":{"version":3,"names":["charMap","strings","alpha","digit","genDelims","subDelims","reserved","unreserved","url","scheme","userinfo","host","port","pchar","segment","path","query","fragment","Object","keys","reduce","set","split","chars","myChar","encode","str","allowed","Error","map","hasOwnProperty","code","charCodeAt","encoded","toString","toUpperCase","length","encodeURIComponent","join","makeEncoder","decode","decodeURIComponent","module","exports","encodeURL","encodeScheme","encodeUserInfo","encodeHost","encodePort","encodePathSegment","encodePath","encodeQuery","encodeFragment"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/rest/util/uriEncoder.js"],"sourcesContent":["/*\n * Copyright 2015-2016 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n'use strict';\n\nvar charMap;\n\ncharMap = (function () {\n\tvar strings = {\n\t\talpha: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',\n\t\tdigit: '0123456789'\n\t};\n\n\tstrings.genDelims = ':/?#[]@';\n\tstrings.subDelims = '!$&\\'()*+,;=';\n\tstrings.reserved = strings.genDelims + strings.subDelims;\n\tstrings.unreserved = strings.alpha + strings.digit + '-._~';\n\tstrings.url = strings.reserved + strings.unreserved;\n\tstrings.scheme = strings.alpha + strings.digit + '+-.';\n\tstrings.userinfo = strings.unreserved + strings.subDelims + ':';\n\tstrings.host = strings.unreserved + strings.subDelims;\n\tstrings.port = strings.digit;\n\tstrings.pchar = strings.unreserved + strings.subDelims + ':@';\n\tstrings.segment = strings.pchar;\n\tstrings.path = strings.segment + '/';\n\tstrings.query = strings.pchar + '/?';\n\tstrings.fragment = strings.pchar + '/?';\n\n\treturn Object.keys(strings).reduce(function (charMap, set) {\n\t\tcharMap[set] = strings[set].split('').reduce(function (chars, myChar) {\n\t\t\tchars[myChar] = true;\n\t\t\treturn chars;\n\t\t}, {});\n\t\treturn charMap;\n\t}, {});\n}());\n\nfunction encode(str, allowed) {\n\tif (typeof str !== 'string') {\n\t\tthrow new Error('String required for URL encoding');\n\t}\n\treturn str.split('').map(function (myChar) {\n\t\tif (allowed.hasOwnProperty(myChar)) {\n\t\t\treturn myChar;\n\t\t}\n\t\tvar code = myChar.charCodeAt(0);\n\t\tif (code <= 127) {\n\t\t\tvar encoded = code.toString(16).toUpperCase();\n \t\t\treturn '%' + (encoded.length % 2 === 1 ? '0' : '') + encoded;\n\t\t}\n\t\telse {\n\t\t\treturn encodeURIComponent(myChar).toUpperCase();\n\t\t}\n\t}).join('');\n}\n\nfunction makeEncoder(allowed) {\n\tallowed = allowed || charMap.unreserved;\n\treturn function (str) {\n\t\treturn encode(str, allowed);\n\t};\n}\n\nfunction decode(str) {\n\treturn decodeURIComponent(str);\n}\n\nmodule.exports = {\n\n\t/*\n\t * Decode URL encoded strings\n\t *\n\t * @param {string} URL encoded string\n\t * @returns {string} URL decoded string\n\t */\n\tdecode: decode,\n\n\t/*\n\t * URL encode a string\n\t *\n\t * All but alpha-numerics and a very limited set of punctuation - . _ ~ are\n\t * encoded.\n\t *\n\t * @param {string} string to encode\n\t * @returns {string} URL encoded string\n\t */\n\tencode: makeEncoder(),\n\n\t/*\n\t* URL encode a URL\n\t*\n\t* All character permitted anywhere in a URL are left unencoded even\n\t* if that character is not permitted in that portion of a URL.\n\t*\n\t* Note: This method is typically not what you want.\n\t*\n\t* @param {string} string to encode\n\t* @returns {string} URL encoded string\n\t*/\n\tencodeURL: makeEncoder(charMap.url),\n\n\t/*\n\t * URL encode the scheme portion of a URL\n\t *\n\t * @param {string} string to encode\n\t * @returns {string} URL encoded string\n\t */\n\tencodeScheme: makeEncoder(charMap.scheme),\n\n\t/*\n\t * URL encode the user info portion of a URL\n\t *\n\t * @param {string} string to encode\n\t * @returns {string} URL encoded string\n\t */\n\tencodeUserInfo: makeEncoder(charMap.userinfo),\n\n\t/*\n\t * URL encode the host portion of a URL\n\t *\n\t * @param {string} string to encode\n\t * @returns {string} URL encoded string\n\t */\n\tencodeHost: makeEncoder(charMap.host),\n\n\t/*\n\t * URL encode the port portion of a URL\n\t *\n\t * @param {string} string to encode\n\t * @returns {string} URL encoded string\n\t */\n\tencodePort: makeEncoder(charMap.port),\n\n\t/*\n\t * URL encode a path segment portion of a URL\n\t *\n\t * @param {string} string to encode\n\t * @returns {string} URL encoded string\n\t */\n\tencodePathSegment: makeEncoder(charMap.segment),\n\n\t/*\n\t * URL encode the path portion of a URL\n\t *\n\t * @param {string} string to encode\n\t * @returns {string} URL encoded string\n\t */\n\tencodePath: makeEncoder(charMap.path),\n\n\t/*\n\t * URL encode the query portion of a URL\n\t *\n\t * @param {string} string to encode\n\t * @returns {string} URL encoded string\n\t */\n\tencodeQuery: makeEncoder(charMap.query),\n\n\t/*\n\t * URL encode the fragment portion of a URL\n\t *\n\t * @param {string} string to encode\n\t * @returns {string} URL encoded string\n\t */\n\tencodeFragment: makeEncoder(charMap.fragment)\n\n};\n"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCK,SAAS,EAAEL,WAAW,CAACvC,OAAO,CAACQ,GAAG,CAAC;EAEnC;AACD;AACA;AACA;AACA;AACA;EACCqC,YAAY,EAAEN,WAAW,CAACvC,OAAO,CAACS,MAAM,CAAC;EAEzC;AACD;AACA;AACA;AACA;AACA;EACCqC,cAAc,EAAEP,WAAW,CAACvC,OAAO,CAACU,QAAQ,CAAC;EAE7C;AACD;AACA;AACA;AACA;AACA;EACCqC,UAAU,EAAER,WAAW,CAACvC,OAAO,CAACW,IAAI,CAAC;EAErC;AACD;AACA;AACA;AACA;AACA;EACCqC,UAAU,EAAET,WAAW,CAACvC,OAAO,CAACY,IAAI,CAAC;EAErC;AACD;AACA;AACA;AACA;AACA;EACCqC,iBAAiB,EAAEV,WAAW,CAACvC,OAAO,CAACc,OAAO,CAAC;EAE/C;AACD;AACA;AACA;AACA;AACA;EACCoC,UAAU,EAAEX,WAAW,CAACvC,OAAO,CAACe,IAAI,CAAC;EAErC;AACD;AACA;AACA;AACA;AACA;EACCoC,WAAW,EAAEZ,WAAW,CAACvC,OAAO,CAACgB,KAAK,CAAC;EAEvC;AACD;AACA;AACA;AACA;AACA;EACCoC,cAAc,EAAEb,WAAW,CAACvC,OAAO,CAACiB,QAAQ;AAE7C,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}