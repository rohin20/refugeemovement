{"ast":null,"code":"import _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getTransferList } from '../worker-utils/get-transfer-list';\nfunction getParentPort() {\n  var parentPort;\n  try {\n    eval('globalThis.parentPort = require(\\'worker_threads\\').parentPort');\n    parentPort = globalThis.parentPort;\n  } catch (_unused) {}\n  return parentPort;\n}\nvar onMessageWrapperMap = new Map();\nvar WorkerBody = /*#__PURE__*/function () {\n  function WorkerBody() {\n    _classCallCheck(this, WorkerBody);\n  }\n  _createClass(WorkerBody, null, [{\n    key: \"inWorkerThread\",\n    value: function inWorkerThread() {\n      return typeof self !== 'undefined' || Boolean(getParentPort());\n    }\n  }, {\n    key: \"onmessage\",\n    set: function set(onMessage) {\n      function handleMessage(message) {\n        var parentPort = getParentPort();\n        var _ref = parentPort ? message : message.data,\n          type = _ref.type,\n          payload = _ref.payload;\n        onMessage(type, payload);\n      }\n      var parentPort = getParentPort();\n      if (parentPort) {\n        parentPort.on('message', handleMessage);\n        parentPort.on('exit', function () {\n          return console.debug('Node worker closing');\n        });\n      } else {\n        globalThis.onmessage = handleMessage;\n      }\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(onMessage) {\n      var onMessageWrapper = onMessageWrapperMap.get(onMessage);\n      if (!onMessageWrapper) {\n        onMessageWrapper = function onMessageWrapper(message) {\n          if (!isKnownMessage(message)) {\n            return;\n          }\n          var parentPort = getParentPort();\n          var _ref2 = parentPort ? message : message.data,\n            type = _ref2.type,\n            payload = _ref2.payload;\n          onMessage(type, payload);\n        };\n      }\n      var parentPort = getParentPort();\n      if (parentPort) {\n        console.error('not implemented');\n      } else {\n        globalThis.addEventListener('message', onMessageWrapper);\n      }\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(onMessage) {\n      var onMessageWrapper = onMessageWrapperMap.get(onMessage);\n      onMessageWrapperMap.delete(onMessage);\n      var parentPort = getParentPort();\n      if (parentPort) {\n        console.error('not implemented');\n      } else {\n        globalThis.removeEventListener('message', onMessageWrapper);\n      }\n    }\n  }, {\n    key: \"postMessage\",\n    value: function postMessage(type, payload) {\n      var data = {\n        source: 'loaders.gl',\n        type: type,\n        payload: payload\n      };\n      var transferList = getTransferList(payload);\n      var parentPort = getParentPort();\n      if (parentPort) {\n        parentPort.postMessage(data, transferList);\n      } else {\n        globalThis.postMessage(data, transferList);\n      }\n    }\n  }]);\n  return WorkerBody;\n}();\nexport { WorkerBody as default };\nfunction isKnownMessage(message) {\n  var type = message.type,\n    data = message.data;\n  return type === 'message' && data && typeof data.source === 'string' && data.source.startsWith('loaders.gl');\n}","map":{"version":3,"names":["getTransferList","getParentPort","parentPort","eval","globalThis","_unused","onMessageWrapperMap","Map","WorkerBody","_classCallCheck","_createClass","key","value","inWorkerThread","self","Boolean","set","onMessage","handleMessage","message","_ref","data","type","payload","on","console","debug","onmessage","addEventListener","onMessageWrapper","get","isKnownMessage","_ref2","error","removeEventListener","delete","postMessage","source","transferList","default","startsWith"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/worker-utils/src/lib/worker-farm/worker-body.ts"],"sourcesContent":["import type {WorkerMessageData, WorkerMessageType, WorkerMessagePayload} from '../../types';\nimport {getTransferList} from '../worker-utils/get-transfer-list';\n\n/** Vile hack to defeat over-zealous bundlers from stripping out the require */\nfunction getParentPort() {\n  // const isNode = globalThis.process;\n  let parentPort;\n  try {\n    // prettier-ignore\n    eval('globalThis.parentPort = require(\\'worker_threads\\').parentPort'); // eslint-disable-line no-eval\n    parentPort = globalThis.parentPort;\n    // eslint-disable-next-line no-empty\n  } catch {}\n  return parentPort;\n}\n\nconst onMessageWrapperMap = new Map();\n\n/**\n * Type safe wrapper for worker code\n */\nexport default class WorkerBody {\n  /** Check that we are actually in a worker thread */\n  static inWorkerThread(): boolean {\n    return typeof self !== 'undefined' || Boolean(getParentPort());\n  }\n\n  /*\n   * (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n   */\n  static set onmessage(onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any) {\n    function handleMessage(message) {\n      // Confusingly the message itself also has a 'type' field which is always set to 'message'\n      const parentPort = getParentPort();\n      const {type, payload} = parentPort ? message : message.data;\n      // if (!isKnownMessage(message)) {\n      //   return;\n      // }\n      onMessage(type, payload);\n    }\n\n    const parentPort = getParentPort();\n    if (parentPort) {\n      parentPort.on('message', handleMessage);\n      // if (message == 'exit') { parentPort.unref(); }\n      // eslint-disable-next-line\n      parentPort.on('exit', () => console.debug('Node worker closing'));\n    } else {\n      // eslint-disable-next-line no-restricted-globals\n      globalThis.onmessage = handleMessage;\n    }\n  }\n\n  static addEventListener(\n    onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n  ) {\n    let onMessageWrapper = onMessageWrapperMap.get(onMessage);\n\n    if (!onMessageWrapper) {\n      onMessageWrapper = (message: MessageEvent<any>) => {\n        if (!isKnownMessage(message)) {\n          return;\n        }\n\n        // Confusingly in the browser, the message itself also has a 'type' field which is always set to 'message'\n        const parentPort = getParentPort();\n        const {type, payload} = parentPort ? message : message.data;\n        onMessage(type, payload);\n      };\n    }\n\n    const parentPort = getParentPort();\n    if (parentPort) {\n      console.error('not implemented'); // eslint-disable-line\n    } else {\n      globalThis.addEventListener('message', onMessageWrapper);\n    }\n  }\n\n  static removeEventListener(\n    onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n  ) {\n    const onMessageWrapper = onMessageWrapperMap.get(onMessage);\n    onMessageWrapperMap.delete(onMessage);\n    const parentPort = getParentPort();\n    if (parentPort) {\n      console.error('not implemented'); // eslint-disable-line\n    } else {\n      globalThis.removeEventListener('message', onMessageWrapper);\n    }\n  }\n\n  /**\n   * Send a message from a worker to creating thread (main thread)\n   * @param type\n   * @param payload\n   */\n  static postMessage(type: WorkerMessageType, payload: WorkerMessagePayload): void {\n    const data: WorkerMessageData = {source: 'loaders.gl', type, payload};\n    // console.log('posting message', data);\n    const transferList = getTransferList(payload);\n\n    const parentPort = getParentPort();\n    if (parentPort) {\n      parentPort.postMessage(data, transferList);\n      // console.log('posted message', data);\n    } else {\n      // @ts-ignore\n      globalThis.postMessage(data, transferList);\n    }\n  }\n}\n\n// Filter out noise messages sent to workers\nfunction isKnownMessage(message: MessageEvent<any>) {\n  const {type, data} = message;\n  return (\n    type === 'message' &&\n    data &&\n    typeof data.source === 'string' &&\n    data.source.startsWith('loaders.gl')\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}