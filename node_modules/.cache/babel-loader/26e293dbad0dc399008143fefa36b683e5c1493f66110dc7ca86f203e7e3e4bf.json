{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DataRow = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\")); /**\n                                                                                                 * Setting for shared row optimization.\n                                                                                                 * - False/undefined indicates that unique row objects should be used (default).\n                                                                                                 * - True indicates that a single temporary row object should be created and used without extra allocations.\n                                                                                                 * - A DataRow object indicates that the row should be used as a temporary shared row.\n                                                                                                 * When used, the content of the shared row isn't preserved between calls.\n                                                                                                 */\n\n/**\n * Return type for createSharedRow:\n * - DataRow object that should be used as shared row.\n * - Falsy values indicate that shared row object shouldn't be used.\n */\nvar DataRow = /*#__PURE__*/function () {\n  /**\n   * Creates new DataRow.\n   * @param dataContainer Data container where data is stored. Can be initialized with null for shared rows.\n   * @param rowIndex Index of a row in the data container.\n   */\n  function DataRow(dataContainer, rowIndex) {\n    (0, _classCallCheck2[\"default\"])(this, DataRow);\n    (0, _defineProperty2[\"default\"])(this, \"_dataContainer\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"_rowIndex\", void 0);\n    this._dataContainer = dataContainer;\n    this._rowIndex = rowIndex;\n  }\n  /**\n   * Conditionally creates a DataRow object.\n   * @param sharedRowDesc Accepts forllowing options:\n   * - true indicates that new DataRow should be created.\n   * - falsy value or a DataRow object is passed through without any change.\n   * @returns A new DataRow object or unchanged input argument.\n   */\n\n  (0, _createClass2[\"default\"])(DataRow, [{\n    key: \"valueAt\",\n    value:\n    /**\n     * Returns the value stored at the specified index in the row.\n     * @param columnIndex Index of the requested field in the row.\n     * @returns Value at the index.\n     */\n    function valueAt(columnIndex) {\n      var _this$_dataContainer;\n      return (_this$_dataContainer = this._dataContainer) === null || _this$_dataContainer === void 0 ? void 0 : _this$_dataContainer.valueAt(this._rowIndex, columnIndex);\n    }\n    /**\n     * Returns the row represented as an array.\n     * @returns The row represented as an array.\n     */\n  }, {\n    key: \"values\",\n    value: function values() {\n      return this._dataContainer ? this._dataContainer.rowAsArray(this._rowIndex) : [];\n    }\n    /**\n     * Setup a row object. The method is used by shared rows to prevent excessive allocations.\n     * @param dataContainer Data container.\n     * @param rowIndex Index of a row in the data container.\n     */\n  }, {\n    key: \"setSource\",\n    value: function setSource(dataContainer, rowIndex) {\n      this._dataContainer = dataContainer;\n      this._rowIndex = rowIndex;\n    }\n    /**\n     * Creates a new array populated with the results of calling the provided function\n     * on every element of the row.\n     * @param handler The callback is called with the following arguments:\n     * - elem: The current element being processed in the row.\n     * - index: The index of the current element being processed in the row.\n     * @returns A new array with each element being the result of the func callback.\n     */\n  }, {\n    key: \"map\",\n    value: function map(handler) {\n      var _this$_dataContainer2;\n      var numColumns = ((_this$_dataContainer2 = this._dataContainer) === null || _this$_dataContainer2 === void 0 ? void 0 : _this$_dataContainer2.numColumns()) || 0;\n      var out = [];\n      for (var column = 0; column < numColumns; ++column) {\n        out[column] = handler(this.valueAt(column), column);\n      }\n      return out;\n    }\n  }], [{\n    key: \"createSharedRow\",\n    value: function createSharedRow(sharedRowDesc) {\n      if (sharedRowDesc === true) {\n        return new DataRow(null, 0);\n      }\n      return sharedRowDesc;\n    }\n  }]);\n  return DataRow;\n}();\nexports.DataRow = DataRow;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","DataRow","_classCallCheck2","_createClass2","_defineProperty2","dataContainer","rowIndex","_dataContainer","_rowIndex","valueAt","columnIndex","_this$_dataContainer","numColumns","_this$_dataContainer2","column","out","key","sharedRowDesc"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/utils/src/data-row.ts"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {DataContainerInterface} from './data-container-interface';\n\n/**\n * Setting for shared row optimization.\n * - False/undefined indicates that unique row objects should be used (default).\n * - True indicates that a single temporary row object should be created and used without extra allocations.\n * - A DataRow object indicates that the row should be used as a temporary shared row.\n * When used, the content of the shared row isn't preserved between calls.\n */\nexport type SharedRowOptions = DataRow | boolean | undefined;\n/**\n * Return type for createSharedRow:\n * - DataRow object that should be used as shared row.\n * - Falsy values indicate that shared row object shouldn't be used.\n */\nexport type SharedRowOptionsResult = DataRow | false | undefined;\n\nexport class DataRow {\n  _dataContainer: DataContainerInterface | null;\n\n  _rowIndex: number;\n\n  /**\n   * Creates new DataRow.\n   * @param dataContainer Data container where data is stored. Can be initialized with null for shared rows.\n   * @param rowIndex Index of a row in the data container.\n   */\n  constructor(dataContainer: DataContainerInterface | null, rowIndex: number) {\n    this._dataContainer = dataContainer;\n    this._rowIndex = rowIndex;\n  }\n\n  /**\n   * Conditionally creates a DataRow object.\n   * @param sharedRowDesc Accepts forllowing options:\n   * - true indicates that new DataRow should be created.\n   * - falsy value or a DataRow object is passed through without any change.\n   * @returns A new DataRow object or unchanged input argument.\n   */\n  static createSharedRow(sharedRowDesc: SharedRowOptions): SharedRowOptionsResult {\n    if (sharedRowDesc === true) {\n      return new DataRow(null, 0);\n    }\n    return sharedRowDesc;\n  }\n\n  /**\n   * Returns the value stored at the specified index in the row.\n   * @param columnIndex Index of the requested field in the row.\n   * @returns Value at the index.\n   */\n  valueAt(columnIndex: number): any {\n    return this._dataContainer?.valueAt(this._rowIndex, columnIndex);\n  }\n\n  /**\n   * Returns the row represented as an array.\n   * @returns The row represented as an array.\n   */\n  values(): any[] {\n    return this._dataContainer ? this._dataContainer.rowAsArray(this._rowIndex) : [];\n  }\n\n  /**\n   * Setup a row object. The method is used by shared rows to prevent excessive allocations.\n   * @param dataContainer Data container.\n   * @param rowIndex Index of a row in the data container.\n   */\n  setSource(dataContainer: DataContainerInterface, rowIndex: number): void {\n    this._dataContainer = dataContainer;\n    this._rowIndex = rowIndex;\n  }\n\n  /**\n   * Creates a new array populated with the results of calling the provided function\n   * on every element of the row.\n   * @param handler The callback is called with the following arguments:\n   * - elem: The current element being processed in the row.\n   * - index: The index of the current element being processed in the row.\n   * @returns A new array with each element being the result of the func callback.\n   */\n  map(handler: (elem: any, index: number) => any): any[] {\n    const numColumns = this._dataContainer?.numColumns() || 0;\n    const out: any[] = [];\n    for (let column = 0; column < numColumns; ++column) {\n      out[column] = handler(this.valueAt(column), column);\n    }\n    return out;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;;AAEA,IAAAA,sBAAA,GAAAC,OAAA;AAEAC,MAAA,CAAAC,cAAA,CAAAC,OAAA;EACAC,KAAA;AACA;AACAD,OAAA,CAAAE,OAAA;AAEA,IAAAC,gBAAA,GAAAP,sBAAA,CAAAC,OAAA;AAEA,IAAAO,aAAA,GAAAR,sBAAA,CAAAC,OAAA;AAEA,IAAAQ,gBAAA,GAAAT,sBAAA,CAAAC,OAAA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,IAAAK,OAAA;EACA;;AAQE;AACF;AACA;EACA,SAAAA,QAAAI,aAAA,EAAAC,QAAA;IACA,IAAAJ,gBAAA,mBAAAD,OAAA;IACE,IAAAG,gBAAY,UAA8C,SAA1D,gBAA4E;IAAA,IAAAA,gBAAA;IAAA,KAAAG,cAAA,GAAAF,aAAA;IAAA,KAAAG,SAAA,GAAAF,QAAA;EAC1E;EACA;AACD;AAED;AACF;AACA;AACA;AACA;;;;;;;AAUE;AACF;AACA;IACA,SAAAG,QAAAC,WAAA;MACA,IAAAC,oBAAA;MACoC,QAAAA,oBAAA,QAAAJ,cAAA,cAAAI,oBAAA,uBAAAA,oBAAA,CAAAF,OAAA,MAAAD,SAAA,EAAAE,WAAA;;IAChC;AACD;AAED;AACF;EAEA;;;;;IAEI;AACD;AAED;AACF;AACA;EAEA;;;;WACEF,SAAA,GAAAF,QAAU;IACR;IACA;AACD;AAED;AACF;AACA;AACA;AACA;AACA;EAEA;;;;MACyD,IAAAM,UAAA,KAAAC,qBAAA,QAAAN,cAAA,cAAAM,qBAAA,uBAAAA,qBAAA,CAAAD,UAAA;;MAErD,KAAM,IAAUE,MAAhB,MAAAA,MAAA,GAAAF,UAAA,IAAAE,MAAA;;MACA;MAEC,OAAAC,GAAA;;EACD;IACDC,GAAA;;;eAjDD,IAAAf,OAAA;MACE;MAEC,OAAAgB,aAAA;;EACD;EACD,OAAAhB,OAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}