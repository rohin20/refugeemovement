{"ast":null,"code":"/*\n * Copyright 2012-2016 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n'use strict';\n\nvar mime, registry;\nmime = require('../mime');\nfunction Registry(mimes) {\n  /**\n   * Lookup the converter for a MIME type\n   *\n   * @param {string} type the MIME type\n   * @return a promise for the converter\n   */\n  this.lookup = function lookup(type) {\n    var parsed;\n    parsed = typeof type === 'string' ? mime.parse(type) : type;\n    if (mimes[parsed.raw]) {\n      return mimes[parsed.raw];\n    }\n    if (mimes[parsed.type + parsed.suffix]) {\n      return mimes[parsed.type + parsed.suffix];\n    }\n    if (mimes[parsed.type]) {\n      return mimes[parsed.type];\n    }\n    if (mimes[parsed.suffix]) {\n      return mimes[parsed.suffix];\n    }\n    return Promise.reject(new Error('Unable to locate converter for mime \"' + parsed.raw + '\"'));\n  };\n\n  /**\n   * Create a late dispatched proxy to the target converter.\n   *\n   * Common when a converter is registered under multiple names and\n   * should be kept in sync if updated.\n   *\n   * @param {string} type mime converter to dispatch to\n   * @returns converter whose read/write methods target the desired mime converter\n   */\n  this.delegate = function delegate(type) {\n    return {\n      read: function () {\n        var args = arguments;\n        return this.lookup(type).then(function (converter) {\n          return converter.read.apply(this, args);\n        }.bind(this));\n      }.bind(this),\n      write: function () {\n        var args = arguments;\n        return this.lookup(type).then(function (converter) {\n          return converter.write.apply(this, args);\n        }.bind(this));\n      }.bind(this)\n    };\n  };\n\n  /**\n   * Register a custom converter for a MIME type\n   *\n   * @param {string} type the MIME type\n   * @param converter the converter for the MIME type\n   * @return a promise for the converter\n   */\n  this.register = function register(type, converter) {\n    mimes[type] = Promise.resolve(converter);\n    return mimes[type];\n  };\n\n  /**\n   * Create a child registry whoes registered converters remain local, while\n   * able to lookup converters from its parent.\n   *\n   * @returns child MIME registry\n   */\n  this.child = function child() {\n    return new Registry(Object.create(mimes));\n  };\n}\nregistry = new Registry({});\n\n// include provided serializers\nregistry.register('application/hal', require('./type/application/hal'));\nregistry.register('application/json', require('./type/application/json'));\nregistry.register('application/x-www-form-urlencoded', require('./type/application/x-www-form-urlencoded'));\nregistry.register('multipart/form-data', require('./type/multipart/form-data'));\nregistry.register('text/plain', require('./type/text/plain'));\nregistry.register('+json', registry.delegate('application/json'));\nmodule.exports = registry;","map":{"version":3,"names":["mime","registry","require","Registry","mimes","lookup","type","parsed","parse","raw","suffix","Promise","reject","Error","delegate","read","args","arguments","then","converter","apply","bind","write","register","resolve","child","Object","create","module","exports"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/rest/mime/registry.js"],"sourcesContent":["/*\n * Copyright 2012-2016 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n'use strict';\n\nvar mime, registry;\n\nmime = require('../mime');\n\nfunction Registry(mimes) {\n\n\t/**\n\t * Lookup the converter for a MIME type\n\t *\n\t * @param {string} type the MIME type\n\t * @return a promise for the converter\n\t */\n\tthis.lookup = function lookup(type) {\n\t\tvar parsed;\n\n\t\tparsed = typeof type === 'string' ? mime.parse(type) : type;\n\n\t\tif (mimes[parsed.raw]) {\n\t\t\treturn mimes[parsed.raw];\n\t\t}\n\t\tif (mimes[parsed.type + parsed.suffix]) {\n\t\t\treturn mimes[parsed.type + parsed.suffix];\n\t\t}\n\t\tif (mimes[parsed.type]) {\n\t\t\treturn mimes[parsed.type];\n\t\t}\n\t\tif (mimes[parsed.suffix]) {\n\t\t\treturn mimes[parsed.suffix];\n\t\t}\n\n\t\treturn Promise.reject(new Error('Unable to locate converter for mime \"' + parsed.raw + '\"'));\n\t};\n\n\t/**\n\t * Create a late dispatched proxy to the target converter.\n\t *\n\t * Common when a converter is registered under multiple names and\n\t * should be kept in sync if updated.\n\t *\n\t * @param {string} type mime converter to dispatch to\n\t * @returns converter whose read/write methods target the desired mime converter\n\t */\n\tthis.delegate = function delegate(type) {\n\t\treturn {\n\t\t\tread: function () {\n\t\t\t\tvar args = arguments;\n\t\t\t\treturn this.lookup(type).then(function (converter) {\n\t\t\t\t\treturn converter.read.apply(this, args);\n\t\t\t\t}.bind(this));\n\t\t\t}.bind(this),\n\t\t\twrite: function () {\n\t\t\t\tvar args = arguments;\n\t\t\t\treturn this.lookup(type).then(function (converter) {\n\t\t\t\t\treturn converter.write.apply(this, args);\n\t\t\t\t}.bind(this));\n\t\t\t}.bind(this)\n\t\t};\n\t};\n\n\t/**\n\t * Register a custom converter for a MIME type\n\t *\n\t * @param {string} type the MIME type\n\t * @param converter the converter for the MIME type\n\t * @return a promise for the converter\n\t */\n\tthis.register = function register(type, converter) {\n\t\tmimes[type] = Promise.resolve(converter);\n\t\treturn mimes[type];\n\t};\n\n\t/**\n\t * Create a child registry whoes registered converters remain local, while\n\t * able to lookup converters from its parent.\n\t *\n\t * @returns child MIME registry\n\t */\n\tthis.child = function child() {\n\t\treturn new Registry(Object.create(mimes));\n\t};\n\n}\n\nregistry = new Registry({});\n\n// include provided serializers\nregistry.register('application/hal', require('./type/application/hal'));\nregistry.register('application/json', require('./type/application/json'));\nregistry.register('application/x-www-form-urlencoded', require('./type/application/x-www-form-urlencoded'));\nregistry.register('multipart/form-data', require('./type/multipart/form-data'));\nregistry.register('text/plain', require('./type/text/plain'));\n\nregistry.register('+json', registry.delegate('application/json'));\n\nmodule.exports = registry;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}