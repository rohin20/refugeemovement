{"ast":null,"code":"import _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './line-layer-vertex.glsl';\nimport fs from './line-layer-fragment.glsl';\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultProps = {\n  getSourcePosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.sourcePosition;\n    }\n  },\n  getTargetPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.targetPosition;\n    }\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  widthUnits: 'pixels',\n  widthScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  widthMinPixels: {\n    type: 'number',\n    value: 0,\n    min: 0\n  },\n  widthMaxPixels: {\n    type: 'number',\n    value: Number.MAX_SAFE_INTEGER,\n    min: 0\n  }\n};\nvar LineLayer = /*#__PURE__*/function (_Layer) {\n  _inherits(LineLayer, _Layer);\n  var _super = _createSuper(LineLayer);\n  function LineLayer() {\n    _classCallCheck(this, LineLayer);\n    return _super.apply(this, arguments);\n  }\n  _createClass(LineLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      return _get(_getPrototypeOf(LineLayer.prototype), \"getShaders\", this).call(this, {\n        vs: vs,\n        fs: fs,\n        modules: [project32, picking]\n      });\n    }\n  }, {\n    key: \"wrapLongitude\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        instanceSourcePositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getSourcePosition'\n        },\n        instanceTargetPositions: {\n          size: 3,\n          type: 5130,\n          fp64: this.use64bitPositions(),\n          transition: true,\n          accessor: 'getTargetPosition'\n        },\n        instanceColors: {\n          size: this.props.colorFormat.length,\n          type: 5121,\n          normalized: true,\n          transition: true,\n          accessor: 'getColor',\n          defaultValue: [0, 0, 0, 255]\n        },\n        instanceWidths: {\n          size: 1,\n          transition: true,\n          accessor: 'getWidth',\n          defaultValue: 1\n        }\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(params) {\n      _get(_getPrototypeOf(LineLayer.prototype), \"updateState\", this).call(this, params);\n      if (params.changeFlags.extensionsChanged) {\n        var _this$state$model;\n        var gl = this.context.gl;\n        (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n        this.state.model = this._getModel(gl);\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref) {\n      var uniforms = _ref.uniforms;\n      var _this$props = this.props,\n        widthUnits = _this$props.widthUnits,\n        widthScale = _this$props.widthScale,\n        widthMinPixels = _this$props.widthMinPixels,\n        widthMaxPixels = _this$props.widthMaxPixels,\n        wrapLongitude = _this$props.wrapLongitude;\n      this.state.model.setUniforms(uniforms).setUniforms({\n        widthUnits: UNIT[widthUnits],\n        widthScale: widthScale,\n        widthMinPixels: widthMinPixels,\n        widthMaxPixels: widthMaxPixels,\n        useShortestPath: wrapLongitude ? 1 : 0\n      }).draw();\n      if (wrapLongitude) {\n        this.state.model.setUniforms({\n          useShortestPath: -1\n        }).draw();\n      }\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      var positions = [0, -1, 0, 0, 1, 0, 1, -1, 0, 1, 1, 0];\n      return new Model(gl, _objectSpread(_objectSpread({}, this.getShaders()), {}, {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: 5,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true\n      }));\n    }\n  }]);\n  return LineLayer;\n}(Layer);\nexport { LineLayer as default };\n_defineProperty(LineLayer, \"layerName\", 'LineLayer');\n_defineProperty(LineLayer, \"defaultProps\", defaultProps);","map":{"version":3,"names":["Layer","project32","picking","UNIT","Model","Geometry","vs","fs","DEFAULT_COLOR","defaultProps","getSourcePosition","type","value","x","sourcePosition","getTargetPosition","targetPosition","getColor","getWidth","widthUnits","widthScale","min","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","LineLayer","_Layer","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","getShaders","_get","_getPrototypeOf","prototype","call","modules","get","initializeState","attributeManager","getAttributeManager","addInstanced","instanceSourcePositions","size","fp64","use64bitPositions","transition","accessor","instanceTargetPositions","instanceColors","props","colorFormat","length","normalized","defaultValue","instanceWidths","updateState","params","changeFlags","extensionsChanged","_this$state$model","gl","context","state","model","delete","_getModel","invalidateAll","draw","_ref","uniforms","_this$props","wrapLongitude","setUniforms","useShortestPath","positions","_objectSpread","id","geometry","drawMode","attributes","Float32Array","isInstanced","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/layers/src/line-layer/line-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  project32,\n  picking,\n  UNIT,\n  LayerProps,\n  Unit,\n  Position,\n  Accessor,\n  Color,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './line-layer-vertex.glsl';\nimport fs from './line-layer-fragment.glsl';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<LineLayerProps> = {\n  getSourcePosition: {type: 'accessor', value: x => x.sourcePosition},\n  getTargetPosition: {type: 'accessor', value: x => x.targetPosition},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n\n  widthUnits: 'pixels',\n  widthScale: {type: 'number', value: 1, min: 0},\n  widthMinPixels: {type: 'number', value: 0, min: 0},\n  widthMaxPixels: {type: 'number', value: Number.MAX_SAFE_INTEGER, min: 0}\n};\n\n/** All properties supported by LineLayer. */\nexport type LineLayerProps<DataT = any> = _LineLayerProps<DataT> & LayerProps<DataT>;\n\n/** Properties added by LineLayer. */\ntype _LineLayerProps<DataT> = {\n  /**\n   * The units of the line width, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'pixels'\n   */\n  widthUnits?: Unit;\n\n  /**\n   * The scaling multiplier for the width of each line.\n   * @default 1\n   */\n  widthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   * @default 0\n   */\n  widthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  widthMaxPixels?: number;\n\n  /**\n   * Source position of each object.\n   * @default object => object.sourcePosition\n   */\n  getSourcePosition?: Accessor<DataT, Position>;\n\n  /**\n   * Target position of each object.\n   * @default object => object.targetPosition\n   */\n  getTargetPosition?: Accessor<DataT, Position>;\n\n  /**\n   * The rgba color is in the format of `[r, g, b, [a]]`.\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n\n  /**\n   * Width of each object\n   * @default 1\n   */\n  getWidth?: Accessor<DataT, number>;\n};\n\n/**\n * A layer that renders straight lines joining pairs of source and target coordinates.\n */\nexport default class LineLayer<DataT = any, ExtraProps = {}> extends Layer<\n  ExtraProps & Required<_LineLayerProps<DataT>>\n> {\n  static layerName = 'LineLayer';\n  static defaultProps = defaultProps;\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  // This layer has its own wrapLongitude logic\n  get wrapLongitude(): boolean {\n    return false;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager()!;\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState(params: UpdateParameters<this>): void {\n    super.updateState(params);\n\n    if (params.changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}): void {\n    const {widthUnits, widthScale, widthMinPixels, widthMaxPixels, wrapLongitude} = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        widthUnits: UNIT[widthUnits],\n        widthScale,\n        widthMinPixels,\n        widthMaxPixels,\n        useShortestPath: wrapLongitude ? 1 : 0\n      })\n      .draw();\n\n    if (wrapLongitude) {\n      // Render a second copy for the clipped lines at the 180th meridian\n      this.state.model\n        .setUniforms({\n          useShortestPath: -1\n        })\n        .draw();\n    }\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    /*\n     *  (0, -1)-------------_(1, -1)\n     *       |          _,-\"  |\n     *       o      _,-\"      o\n     *       |  _,-\"          |\n     *   (0, 1)\"-------------(1, 1)\n     */\n    const positions = [0, -1, 0, 0, 1, 0, 1, -1, 0, 1, 1, 0];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_STRIP,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}