{"ast":null,"code":"import _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport BaseTableBatchAggregator from './base-table-batch-aggregator';\nimport RowTableBatchAggregator from './row-table-batch-aggregator';\nimport ColumnarTableBatchAggregator from './columnar-table-batch-aggregator';\nvar DEFAULT_OPTIONS = {\n  shape: 'array-row-table',\n  batchSize: 'auto',\n  batchDebounceMs: 0,\n  limit: 0,\n  _limitMB: 0\n};\nvar ERR_MESSAGE = 'TableBatchBuilder';\nvar TableBatchBuilder = /*#__PURE__*/function () {\n  function TableBatchBuilder(schema, options) {\n    _classCallCheck(this, TableBatchBuilder);\n    _defineProperty(this, \"schema\", void 0);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"aggregator\", null);\n    _defineProperty(this, \"batchCount\", 0);\n    _defineProperty(this, \"bytesUsed\", 0);\n    _defineProperty(this, \"isChunkComplete\", false);\n    _defineProperty(this, \"lastBatchEmittedMs\", Date.now());\n    _defineProperty(this, \"totalLength\", 0);\n    _defineProperty(this, \"totalBytes\", 0);\n    _defineProperty(this, \"rowBytes\", 0);\n    this.schema = schema;\n    this.options = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n  }\n  _createClass(TableBatchBuilder, [{\n    key: \"limitReached\",\n    value: function limitReached() {\n      var _this$options, _this$options2;\n      if (Boolean((_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options.limit) && this.totalLength >= this.options.limit) {\n        return true;\n      }\n      if (Boolean((_this$options2 = this.options) === null || _this$options2 === void 0 ? void 0 : _this$options2._limitMB) && this.totalBytes / 1e6 >= this.options._limitMB) {\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"addRow\",\n    value: function addRow(row) {\n      if (this.limitReached()) {\n        return;\n      }\n      this.totalLength++;\n      this.rowBytes = this.rowBytes || this._estimateRowMB(row);\n      this.totalBytes += this.rowBytes;\n      if (Array.isArray(row)) {\n        this.addArrayRow(row);\n      } else {\n        this.addObjectRow(row);\n      }\n    }\n  }, {\n    key: \"addArrayRow\",\n    value: function addArrayRow(row) {\n      if (!this.aggregator) {\n        var TableBatchType = this._getTableBatchType();\n        this.aggregator = new TableBatchType(this.schema, this.options);\n      }\n      this.aggregator.addArrayRow(row);\n    }\n  }, {\n    key: \"addObjectRow\",\n    value: function addObjectRow(row) {\n      if (!this.aggregator) {\n        var TableBatchType = this._getTableBatchType();\n        this.aggregator = new TableBatchType(this.schema, this.options);\n      }\n      this.aggregator.addObjectRow(row);\n    }\n  }, {\n    key: \"chunkComplete\",\n    value: function chunkComplete(chunk) {\n      if (chunk instanceof ArrayBuffer) {\n        this.bytesUsed += chunk.byteLength;\n      }\n      if (typeof chunk === 'string') {\n        this.bytesUsed += chunk.length;\n      }\n      this.isChunkComplete = true;\n    }\n  }, {\n    key: \"getFullBatch\",\n    value: function getFullBatch(options) {\n      return this._isFull() ? this._getBatch(options) : null;\n    }\n  }, {\n    key: \"getFinalBatch\",\n    value: function getFinalBatch(options) {\n      return this._getBatch(options);\n    }\n  }, {\n    key: \"_estimateRowMB\",\n    value: function _estimateRowMB(row) {\n      return Array.isArray(row) ? row.length * 8 : Object.keys(row).length * 8;\n    }\n  }, {\n    key: \"_isFull\",\n    value: function _isFull() {\n      if (!this.aggregator || this.aggregator.rowCount() === 0) {\n        return false;\n      }\n      if (this.options.batchSize === 'auto') {\n        if (!this.isChunkComplete) {\n          return false;\n        }\n      } else if (this.options.batchSize > this.aggregator.rowCount()) {\n        return false;\n      }\n      if (this.options.batchDebounceMs > Date.now() - this.lastBatchEmittedMs) {\n        return false;\n      }\n      this.isChunkComplete = false;\n      this.lastBatchEmittedMs = Date.now();\n      return true;\n    }\n  }, {\n    key: \"_getBatch\",\n    value: function _getBatch(options) {\n      if (!this.aggregator) {\n        return null;\n      }\n      if (options !== null && options !== void 0 && options.bytesUsed) {\n        this.bytesUsed = options.bytesUsed;\n      }\n      var normalizedBatch = this.aggregator.getBatch();\n      normalizedBatch.count = this.batchCount;\n      normalizedBatch.bytesUsed = this.bytesUsed;\n      Object.assign(normalizedBatch, options);\n      this.batchCount++;\n      this.aggregator = null;\n      return normalizedBatch;\n    }\n  }, {\n    key: \"_getTableBatchType\",\n    value: function _getTableBatchType() {\n      switch (this.options.shape) {\n        case 'row-table':\n          return BaseTableBatchAggregator;\n        case 'array-row-table':\n        case 'object-row-table':\n          return RowTableBatchAggregator;\n        case 'columnar-table':\n          return ColumnarTableBatchAggregator;\n        case 'arrow-table':\n          if (!TableBatchBuilder.ArrowBatch) {\n            throw new Error(ERR_MESSAGE);\n          }\n          return TableBatchBuilder.ArrowBatch;\n        default:\n          throw new Error(ERR_MESSAGE);\n      }\n    }\n  }]);\n  return TableBatchBuilder;\n}();\nexport { TableBatchBuilder as default };\n_defineProperty(TableBatchBuilder, \"ArrowBatch\", void 0);","map":{"version":3,"names":["BaseTableBatchAggregator","RowTableBatchAggregator","ColumnarTableBatchAggregator","DEFAULT_OPTIONS","shape","batchSize","batchDebounceMs","limit","_limitMB","ERR_MESSAGE","TableBatchBuilder","schema","options","_classCallCheck","_defineProperty","Date","now","_objectSpread","_createClass","key","value","limitReached","_this$options","_this$options2","Boolean","totalLength","totalBytes","addRow","row","rowBytes","_estimateRowMB","Array","isArray","addArrayRow","addObjectRow","aggregator","TableBatchType","_getTableBatchType","chunkComplete","chunk","ArrayBuffer","bytesUsed","byteLength","length","isChunkComplete","getFullBatch","_isFull","_getBatch","getFinalBatch","Object","keys","rowCount","lastBatchEmittedMs","normalizedBatch","getBatch","count","batchCount","assign","ArrowBatch","Error","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/schema/src/lib/batches/table-batch-builder.ts"],"sourcesContent":["import type {Schema} from '../schema/schema';\nimport type {TableBatch} from '../../category/table/table-types';\nimport type {TableBatchAggregator, TableBatchConstructor} from './table-batch-aggregator';\nimport BaseTableBatchAggregator from './base-table-batch-aggregator';\nimport RowTableBatchAggregator from './row-table-batch-aggregator';\nimport ColumnarTableBatchAggregator from './columnar-table-batch-aggregator';\n\n// TODO define interface instead\ntype TableBatchBuilderOptions = {\n  shape: 'row-table' | 'array-row-table' | 'object-row-table' | 'columnar-table' | 'arrow-table';\n  batchSize?: number | 'auto';\n  batchDebounceMs?: number;\n  limit: number;\n  _limitMB: number;\n};\n\ntype GetBatchOptions = {\n  bytesUsed?: number;\n  [key: string]: any;\n};\n\nconst DEFAULT_OPTIONS: Required<TableBatchBuilderOptions> = {\n  shape: 'array-row-table',\n  batchSize: 'auto',\n  batchDebounceMs: 0,\n  limit: 0,\n  _limitMB: 0\n};\n\nconst ERR_MESSAGE = 'TableBatchBuilder';\n\n/** Incrementally builds batches from a stream of rows */\nexport default class TableBatchBuilder {\n  schema: Schema;\n  options: Required<TableBatchBuilderOptions>;\n\n  private aggregator: TableBatchAggregator | null = null;\n  private batchCount: number = 0;\n  private bytesUsed: number = 0;\n  private isChunkComplete: boolean = false;\n  private lastBatchEmittedMs: number = Date.now();\n  private totalLength: number = 0;\n  private totalBytes: number = 0;\n  private rowBytes: number = 0;\n\n  static ArrowBatch?: TableBatchConstructor;\n\n  constructor(schema: Schema, options?: TableBatchBuilderOptions) {\n    this.schema = schema;\n    this.options = {...DEFAULT_OPTIONS, ...options};\n  }\n\n  limitReached(): boolean {\n    if (Boolean(this.options?.limit) && this.totalLength >= this.options.limit) {\n      return true;\n    }\n    if (Boolean(this.options?._limitMB) && this.totalBytes / 1e6 >= this.options._limitMB) {\n      return true;\n    }\n    return false;\n  }\n\n  /** @deprecated Use addArrayRow or addObjectRow */\n  addRow(row: any[] | {[columnName: string]: any}): void {\n    if (this.limitReached()) {\n      return;\n    }\n    this.totalLength++;\n    this.rowBytes = this.rowBytes || this._estimateRowMB(row);\n    this.totalBytes += this.rowBytes;\n    if (Array.isArray(row)) {\n      this.addArrayRow(row);\n    } else {\n      this.addObjectRow(row);\n    }\n  }\n\n  /** Add one row to the batch */\n  protected addArrayRow(row: any[]) {\n    if (!this.aggregator) {\n      const TableBatchType = this._getTableBatchType();\n      this.aggregator = new TableBatchType(this.schema, this.options);\n    }\n    this.aggregator.addArrayRow(row);\n  }\n\n  /** Add one row to the batch */\n  protected addObjectRow(row: {[columnName: string]: any}): void {\n    if (!this.aggregator) {\n      const TableBatchType = this._getTableBatchType();\n      this.aggregator = new TableBatchType(this.schema, this.options);\n    }\n    this.aggregator.addObjectRow(row);\n  }\n\n  /** Mark an incoming raw memory chunk has completed */\n  chunkComplete(chunk: ArrayBuffer | string): void {\n    if (chunk instanceof ArrayBuffer) {\n      this.bytesUsed += chunk.byteLength;\n    }\n    if (typeof chunk === 'string') {\n      this.bytesUsed += chunk.length;\n    }\n    this.isChunkComplete = true;\n  }\n\n  getFullBatch(options?: GetBatchOptions): TableBatch | null {\n    return this._isFull() ? this._getBatch(options) : null;\n  }\n\n  getFinalBatch(options?: GetBatchOptions): TableBatch | null {\n    return this._getBatch(options);\n  }\n\n  // INTERNAL\n\n  _estimateRowMB(row: any[] | object): number {\n    return Array.isArray(row) ? row.length * 8 : Object.keys(row).length * 8;\n  }\n\n  private _isFull(): boolean {\n    // No batch, not ready\n    if (!this.aggregator || this.aggregator.rowCount() === 0) {\n      return false;\n    }\n\n    // if batchSize === 'auto' we wait for chunk to complete\n    // if batchSize === number, ensure we have enough rows\n    if (this.options.batchSize === 'auto') {\n      if (!this.isChunkComplete) {\n        return false;\n      }\n    } else if (this.options.batchSize > this.aggregator.rowCount()) {\n      return false;\n    }\n\n    // Debounce batches\n    if (this.options.batchDebounceMs > Date.now() - this.lastBatchEmittedMs) {\n      return false;\n    }\n\n    // Emit batch\n    this.isChunkComplete = false;\n    this.lastBatchEmittedMs = Date.now();\n    return true;\n  }\n\n  /**\n   * bytesUsed can be set via chunkComplete or via getBatch*\n   */\n  private _getBatch(options?: GetBatchOptions): TableBatch | null {\n    if (!this.aggregator) {\n      return null;\n    }\n\n    // TODO - this can overly increment bytes used?\n    if (options?.bytesUsed) {\n      this.bytesUsed = options.bytesUsed;\n    }\n    const normalizedBatch = this.aggregator.getBatch() as TableBatch;\n    normalizedBatch.count = this.batchCount;\n    normalizedBatch.bytesUsed = this.bytesUsed;\n    Object.assign(normalizedBatch, options);\n\n    this.batchCount++;\n    this.aggregator = null;\n    return normalizedBatch;\n  }\n\n  private _getTableBatchType(): TableBatchConstructor {\n    switch (this.options.shape) {\n      case 'row-table':\n        return BaseTableBatchAggregator;\n      case 'array-row-table':\n      case 'object-row-table':\n        return RowTableBatchAggregator;\n      case 'columnar-table':\n        return ColumnarTableBatchAggregator;\n      case 'arrow-table':\n        if (!TableBatchBuilder.ArrowBatch) {\n          throw new Error(ERR_MESSAGE);\n        }\n        return TableBatchBuilder.ArrowBatch;\n      default:\n        throw new Error(ERR_MESSAGE);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}