{"ast":null,"code":"'use strict';\n\nvar invariant = require('../../vendor/invariant');\nvar formatPoints = require('../format_points');\nvar makeService = require('../make_service');\n\n/**\n * @class MapboxDirections\n */\nvar MapboxDirections = makeService('MapboxDirections');\nvar API_DIRECTIONS = '/directions/v5/{account}/{profile}/{encodedWaypoints}.json{?access_token,alternatives,geometries,overview,radiuses,steps,continue_straight,bearings}';\n\n/**\n * Find directions from A to B, or between any number of locations.\n * Consult the [Mapbox Directions API](https://www.mapbox.com/api-documentation/#directions)\n * for more documentation.\n *\n * @param {Array<Object>} waypoints an array of objects with `latitude`\n * and `longitude` properties that represent waypoints in order. Up to\n * 25 waypoints can be specified.\n * @param {Object} [options={}] additional options meant to tune\n * the request\n * @param {string} [options.profile=driving] the directions\n * profile, which determines how to prioritize different routes.\n * Options are `'driving-traffic'` for automotive routing which factors\n * in current and historic traffic conditions to avoid slowdowns,\n * `'driving'`, which assumes transportation via an\n * automobile and will use highways, `'walking'`, which avoids\n * streets without sidewalks, and `'cycling'`, which prefers streets\n * with bicycle lanes and lower speed limits for transportation via\n * bicycle.\n * @param {string} [options.account=mapbox] Account for the profile.\n * @param {string} [options.alternatives=true] whether to generate\n * alternative routes along with the preferred route.\n * @param {string} [options.geometries=geojson] format for the returned\n * route. Options are `'geojson'`, `'polyline'`, or `false`: `polyline`\n * yields more compact responses which can be decoded on the client side.\n * [GeoJSON](http://geojson.org/), the default, is compatible with libraries\n * like [Mapbox GL](https://www.mapbox.com/mapbox-gl/),\n * Leaflet and [Mapbox.js](https://www.mapbox.com/mapbox.js/). `false`\n * omits the geometry entirely and only returns instructions.\n * @param {string} [options.overview=simplified] type of returned overview\n * geometry. Can be `full` (the most detailed geometry available), `simplified`\n * (a simplified version of the full geometry), or `false`.\n * @param {Array<number|string>} [options.radiuses] an array of integers in meters\n * indicating the maximum distance each coordinate is allowed to move when\n * snapped to a nearby road segment. There must be as many radiuses as there\n * are coordinates in the request. Values can be any number greater than `0` or\n * they can be the string `unlimited`. If no routable road is found within the\n * radius, a `NoSegment` error is returned.\n * @param {boolean} [options.steps=false] whether to return steps and\n * turn-by-turn instructions. Can be `true` or `false`.\n * @param {boolean} [options.continue_straight] sets allowed direction of travel\n * when departing intermediate waypoints. If `true` the route will continue in\n * the same direction of travel. If `false` the route may continue in the\n * opposite direction of travel. Defaults to `true` for the `driving` profile\n * and `false` for the `walking` and `cycling` profiles.\n * @param {Array<Array>} [options.bearings] used to filter the road\n * segment the waypoint will be placed on by direction and dictates the angle\n * of approach. This option should always be used in conjunction with the\n * `radiuses` option. The parameter takes two values per waypoint: the first is\n * an angle clockwise from true north between `0` and `360`. The second is the\n * range of degrees the angle can deviate by. We recommend a value of `45` or\n * `90` for the range, as bearing measurements tend to be inaccurate. This is\n * useful for making sure we reroute vehicles on new routes that continue\n * traveling in their current direction. A request that does this would provide\n * bearing and radius values for the first waypoint and leave the remaining\n * values empty.If provided, the list of bearings must be the same length as\n * the list of waypoints, but you can skip a coordinate and show its position\n * by providing an empty array.\n * @param {Function} callback called with (err, results)\n * @returns {Promise} response\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n * mapboxClient.getDirections(\n *   [\n *     { latitude: 33.6, longitude: -95.4431 },\n *     { latitude: 33.2, longitude: -95.4431 } ],\n *   function(err, res) {\n *   // res is a document with directions\n * });\n *\n * // With options\n * mapboxClient.getDirections([\n *   { latitude: 33.6875431, longitude: -95.4431142 },\n *   { latitude: 33.6875431, longitude: -95.4831142 }\n * ], {\n *   profile: 'walking',\n *   alternatives: false,\n *   geometry: 'polyline'\n * }, function(err, results) {\n *   console.log(results);\n * });\n */\nMapboxDirections.prototype.getDirections = function (waypoints, options, callback) {\n  // permit the options argument to be omitted\n  if (callback === undefined && typeof options === 'function') {\n    callback = options;\n    options = {};\n  } else if (options === undefined) {\n    options = {};\n  }\n\n  // typecheck arguments\n  invariant(Array.isArray(waypoints), 'waypoints must be an array');\n  invariant(typeof options === 'object', 'options must be an object');\n  var encodedWaypoints = formatPoints(waypoints);\n  var params = {\n    encodedWaypoints: encodedWaypoints,\n    profile: 'driving',\n    account: 'mapbox',\n    alternatives: true,\n    steps: true,\n    geometries: 'geojson'\n  };\n  if (options.profile) {\n    invariant(typeof options.profile === 'string', 'profile option must be string');\n    params.profile = options.profile;\n  }\n  if (options.account) {\n    invariant(typeof options.account === 'string', 'account option must be string');\n    params.account = options.account;\n  }\n  if (typeof options.alternatives !== 'undefined') {\n    invariant(typeof options.alternatives === 'boolean', 'alternatives option must be boolean');\n    params.alternatives = options.alternatives;\n  }\n  if (options.radiuses) {\n    invariant(Array.isArray(options.radiuses), 'radiuses must be an array');\n    invariant(options.radiuses.length === waypoints.length, 'There must be as many radiuses as there are waypoints in the request');\n    params.radiuses = options.radiuses.join(';');\n  }\n  if (typeof options.steps !== 'undefined') {\n    invariant(typeof options.steps === 'boolean', 'steps option must be boolean');\n    params.steps = options.steps;\n  }\n  var allowedGeometries = ['polyline', 'geojson'];\n  if (options.geometries) {\n    invariant(allowedGeometries.indexOf(options.geometries) !== -1, 'geometries option must be ' + allowedGeometries);\n    params.geometries = options.geometries;\n  }\n  var allowedOverviews = ['simplified', 'full'];\n  if (options.overview) {\n    invariant(allowedOverviews.indexOf(options.overview) !== -1, 'overview option must be ' + allowedOverviews);\n    params.overview = options.overview;\n  }\n  if (typeof options.continue_straight !== 'undefined') {\n    invariant(typeof options.continue_straight === 'boolean', 'continue_straight option must be boolean');\n    params.continue_straight = options.continue_straight;\n  }\n  if (options.bearings) {\n    invariant(Array.isArray(options.radiuses), 'bearings must be an array');\n    invariant(options.bearings.length === waypoints.length, 'There must be as many bearings as there are waypoints in the request');\n    params.bearings = options.bearings.join(';');\n  }\n  return this.client({\n    path: API_DIRECTIONS,\n    params: params,\n    callback: callback\n  });\n};\nmodule.exports = MapboxDirections;","map":{"version":3,"names":["invariant","require","formatPoints","makeService","MapboxDirections","API_DIRECTIONS","prototype","getDirections","waypoints","options","callback","undefined","Array","isArray","encodedWaypoints","params","profile","account","alternatives","steps","geometries","radiuses","length","join","allowedGeometries","indexOf","allowedOverviews","overview","continue_straight","bearings","client","path","module","exports"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/mapbox/lib/services/directions.js"],"sourcesContent":["'use strict';\n\nvar invariant = require('../../vendor/invariant');\nvar formatPoints = require('../format_points');\nvar makeService = require('../make_service');\n\n/**\n * @class MapboxDirections\n */\nvar MapboxDirections = makeService('MapboxDirections');\n\nvar API_DIRECTIONS = '/directions/v5/{account}/{profile}/{encodedWaypoints}.json{?access_token,alternatives,geometries,overview,radiuses,steps,continue_straight,bearings}';\n\n/**\n * Find directions from A to B, or between any number of locations.\n * Consult the [Mapbox Directions API](https://www.mapbox.com/api-documentation/#directions)\n * for more documentation.\n *\n * @param {Array<Object>} waypoints an array of objects with `latitude`\n * and `longitude` properties that represent waypoints in order. Up to\n * 25 waypoints can be specified.\n * @param {Object} [options={}] additional options meant to tune\n * the request\n * @param {string} [options.profile=driving] the directions\n * profile, which determines how to prioritize different routes.\n * Options are `'driving-traffic'` for automotive routing which factors\n * in current and historic traffic conditions to avoid slowdowns,\n * `'driving'`, which assumes transportation via an\n * automobile and will use highways, `'walking'`, which avoids\n * streets without sidewalks, and `'cycling'`, which prefers streets\n * with bicycle lanes and lower speed limits for transportation via\n * bicycle.\n * @param {string} [options.account=mapbox] Account for the profile.\n * @param {string} [options.alternatives=true] whether to generate\n * alternative routes along with the preferred route.\n * @param {string} [options.geometries=geojson] format for the returned\n * route. Options are `'geojson'`, `'polyline'`, or `false`: `polyline`\n * yields more compact responses which can be decoded on the client side.\n * [GeoJSON](http://geojson.org/), the default, is compatible with libraries\n * like [Mapbox GL](https://www.mapbox.com/mapbox-gl/),\n * Leaflet and [Mapbox.js](https://www.mapbox.com/mapbox.js/). `false`\n * omits the geometry entirely and only returns instructions.\n * @param {string} [options.overview=simplified] type of returned overview\n * geometry. Can be `full` (the most detailed geometry available), `simplified`\n * (a simplified version of the full geometry), or `false`.\n * @param {Array<number|string>} [options.radiuses] an array of integers in meters\n * indicating the maximum distance each coordinate is allowed to move when\n * snapped to a nearby road segment. There must be as many radiuses as there\n * are coordinates in the request. Values can be any number greater than `0` or\n * they can be the string `unlimited`. If no routable road is found within the\n * radius, a `NoSegment` error is returned.\n * @param {boolean} [options.steps=false] whether to return steps and\n * turn-by-turn instructions. Can be `true` or `false`.\n * @param {boolean} [options.continue_straight] sets allowed direction of travel\n * when departing intermediate waypoints. If `true` the route will continue in\n * the same direction of travel. If `false` the route may continue in the\n * opposite direction of travel. Defaults to `true` for the `driving` profile\n * and `false` for the `walking` and `cycling` profiles.\n * @param {Array<Array>} [options.bearings] used to filter the road\n * segment the waypoint will be placed on by direction and dictates the angle\n * of approach. This option should always be used in conjunction with the\n * `radiuses` option. The parameter takes two values per waypoint: the first is\n * an angle clockwise from true north between `0` and `360`. The second is the\n * range of degrees the angle can deviate by. We recommend a value of `45` or\n * `90` for the range, as bearing measurements tend to be inaccurate. This is\n * useful for making sure we reroute vehicles on new routes that continue\n * traveling in their current direction. A request that does this would provide\n * bearing and radius values for the first waypoint and leave the remaining\n * values empty.If provided, the list of bearings must be the same length as\n * the list of waypoints, but you can skip a coordinate and show its position\n * by providing an empty array.\n * @param {Function} callback called with (err, results)\n * @returns {Promise} response\n * @example\n * var mapboxClient = new MapboxClient('ACCESSTOKEN');\n * mapboxClient.getDirections(\n *   [\n *     { latitude: 33.6, longitude: -95.4431 },\n *     { latitude: 33.2, longitude: -95.4431 } ],\n *   function(err, res) {\n *   // res is a document with directions\n * });\n *\n * // With options\n * mapboxClient.getDirections([\n *   { latitude: 33.6875431, longitude: -95.4431142 },\n *   { latitude: 33.6875431, longitude: -95.4831142 }\n * ], {\n *   profile: 'walking',\n *   alternatives: false,\n *   geometry: 'polyline'\n * }, function(err, results) {\n *   console.log(results);\n * });\n */\nMapboxDirections.prototype.getDirections = function(waypoints, options, callback) {\n\n  // permit the options argument to be omitted\n  if (callback === undefined && typeof options === 'function') {\n    callback = options;\n    options = {};\n  } else if (options === undefined) {\n    options = {};\n  }\n\n  // typecheck arguments\n  invariant(Array.isArray(waypoints), 'waypoints must be an array');\n  invariant(typeof options === 'object', 'options must be an object');\n\n  var encodedWaypoints = formatPoints(waypoints);\n\n  var params = {\n    encodedWaypoints: encodedWaypoints,\n    profile: 'driving',\n    account: 'mapbox',\n    alternatives: true,\n    steps: true,\n    geometries: 'geojson'\n  };\n\n  if (options.profile) {\n    invariant(typeof options.profile === 'string', 'profile option must be string');\n    params.profile = options.profile;\n  }\n\n  if (options.account) {\n    invariant(typeof options.account === 'string', 'account option must be string');\n    params.account = options.account;\n  }\n\n  if (typeof options.alternatives !== 'undefined') {\n    invariant(typeof options.alternatives === 'boolean', 'alternatives option must be boolean');\n    params.alternatives = options.alternatives;\n  }\n\n  if (options.radiuses) {\n    invariant(Array.isArray(options.radiuses), 'radiuses must be an array');\n    invariant(options.radiuses.length === waypoints.length, 'There must be as many radiuses as there are waypoints in the request');\n    params.radiuses = options.radiuses.join(';');\n  }\n\n  if (typeof options.steps !== 'undefined') {\n    invariant(typeof options.steps === 'boolean', 'steps option must be boolean');\n    params.steps = options.steps;\n  }\n\n  var allowedGeometries = ['polyline', 'geojson'];\n  if (options.geometries) {\n    invariant(allowedGeometries.indexOf(options.geometries) !== -1, 'geometries option must be ' + allowedGeometries);\n    params.geometries = options.geometries;\n  }\n\n  var allowedOverviews = ['simplified', 'full'];\n  if (options.overview) {\n    invariant(allowedOverviews.indexOf(options.overview) !== -1, 'overview option must be ' + allowedOverviews);\n    params.overview = options.overview;\n  }\n\n  if (typeof options.continue_straight !== 'undefined') {\n    invariant(typeof options.continue_straight === 'boolean', 'continue_straight option must be boolean');\n    params.continue_straight = options.continue_straight;\n  }\n\n  if (options.bearings) {\n    invariant(Array.isArray(options.radiuses), 'bearings must be an array');\n    invariant(options.bearings.length === waypoints.length, 'There must be as many bearings as there are waypoints in the request');\n    params.bearings = options.bearings.join(';');\n  }\n\n  return this.client({\n    path: API_DIRECTIONS,\n    params: params,\n    callback: callback\n  });\n};\n\nmodule.exports = MapboxDirections;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}