{"ast":null,"code":"import _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport MathArray from './math-array';\nimport { checkNumber } from '../../lib/validators';\nimport assert from '../../lib/assert';\nvar Vector = /*#__PURE__*/function (_MathArray) {\n  _inherits(Vector, _MathArray);\n  var _super = _createSuper(Vector);\n  function Vector() {\n    _classCallCheck(this, Vector);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Vector, [{\n    key: \"x\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      this[0] = checkNumber(value);\n    }\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      this[1] = checkNumber(value);\n    }\n  }, {\n    key: \"len\",\n    value: function len() {\n      return Math.sqrt(this.lengthSquared());\n    }\n  }, {\n    key: \"magnitude\",\n    value: function magnitude() {\n      return this.len();\n    }\n  }, {\n    key: \"lengthSquared\",\n    value: function lengthSquared() {\n      var length = 0;\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        length += this[i] * this[i];\n      }\n      return length;\n    }\n  }, {\n    key: \"magnitudeSquared\",\n    value: function magnitudeSquared() {\n      return this.lengthSquared();\n    }\n  }, {\n    key: \"distance\",\n    value: function distance(mathArray) {\n      return Math.sqrt(this.distanceSquared(mathArray));\n    }\n  }, {\n    key: \"distanceSquared\",\n    value: function distanceSquared(mathArray) {\n      var length = 0;\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        var dist = this[i] - mathArray[i];\n        length += dist * dist;\n      }\n      return checkNumber(length);\n    }\n  }, {\n    key: \"dot\",\n    value: function dot(mathArray) {\n      var product = 0;\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        product += this[i] * mathArray[i];\n      }\n      return checkNumber(product);\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      var length = this.magnitude();\n      if (length !== 0) {\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] /= length;\n        }\n      }\n      return this.check();\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply() {\n      for (var _len = arguments.length, vectors = new Array(_len), _key = 0; _key < _len; _key++) {\n        vectors[_key] = arguments[_key];\n      }\n      for (var _i = 0, _vectors = vectors; _i < _vectors.length; _i++) {\n        var vector = _vectors[_i];\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] *= vector[i];\n        }\n      }\n      return this.check();\n    }\n  }, {\n    key: \"divide\",\n    value: function divide() {\n      for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        vectors[_key2] = arguments[_key2];\n      }\n      for (var _i2 = 0, _vectors2 = vectors; _i2 < _vectors2.length; _i2++) {\n        var vector = _vectors2[_i2];\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] /= vector[i];\n        }\n      }\n      return this.check();\n    }\n  }, {\n    key: \"lengthSq\",\n    value: function lengthSq() {\n      return this.lengthSquared();\n    }\n  }, {\n    key: \"distanceTo\",\n    value: function distanceTo(vector) {\n      return this.distance(vector);\n    }\n  }, {\n    key: \"distanceToSquared\",\n    value: function distanceToSquared(vector) {\n      return this.distanceSquared(vector);\n    }\n  }, {\n    key: \"getComponent\",\n    value: function getComponent(i) {\n      assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n      return checkNumber(this[i]);\n    }\n  }, {\n    key: \"setComponent\",\n    value: function setComponent(i, value) {\n      assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n      this[i] = value;\n      return this.check();\n    }\n  }, {\n    key: \"addVectors\",\n    value: function addVectors(a, b) {\n      return this.copy(a).add(b);\n    }\n  }, {\n    key: \"subVectors\",\n    value: function subVectors(a, b) {\n      return this.copy(a).subtract(b);\n    }\n  }, {\n    key: \"multiplyVectors\",\n    value: function multiplyVectors(a, b) {\n      return this.copy(a).multiply(b);\n    }\n  }, {\n    key: \"addScaledVector\",\n    value: function addScaledVector(a, b) {\n      return this.add(new this.constructor(a).multiplyScalar(b));\n    }\n  }]);\n  return Vector;\n}(MathArray);\nexport { Vector as default };","map":{"version":3,"names":["MathArray","checkNumber","assert","Vector","_MathArray","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","get","set","value","len","Math","sqrt","lengthSquared","magnitude","length","i","ELEMENTS","magnitudeSquared","distance","mathArray","distanceSquared","dist","dot","product","normalize","check","multiply","_len","vectors","Array","_key","_i","_vectors","vector","divide","_len2","_key2","_i2","_vectors2","lengthSq","distanceTo","distanceToSquared","getComponent","setComponent","addVectors","a","b","copy","add","subVectors","subtract","multiplyVectors","addScaledVector","constructor","multiplyScalar","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@math.gl/core/src/classes/base/vector.ts"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport {NumericArray} from '@math.gl/types';\nimport MathArray from './math-array';\nimport {checkNumber} from '../../lib/validators';\nimport assert from '../../lib/assert';\n\n/** Base class for vectors with at least 2 elements */\nexport default abstract class Vector extends MathArray {\n  // ACCESSORS\n\n  get x(): number {\n    return this[0];\n  }\n\n  set x(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get y(): number {\n    return this[1];\n  }\n\n  set y(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  /**\n   * Returns the length of the vector from the origin to the point described by this vector\n   *\n   * @note `length` is a reserved word for Arrays, so `v.length()` will return number of elements\n   * Instead we provide `len` and `magnitude`\n   */\n  len(): number {\n    return Math.sqrt(this.lengthSquared());\n  }\n\n  /**\n   * Returns the length of the vector from the origin to the point described by this vector\n   */\n  magnitude(): number {\n    return this.len();\n  }\n\n  /**\n   * Returns the squared length of the vector from the origin to the point described by this vector\n   */\n  lengthSquared(): number {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      length += this[i] * this[i];\n    }\n    return length;\n  }\n\n  /**\n   * Returns the squared length of the vector from the origin to the point described by this vector\n   */\n  magnitudeSquared(): number {\n    return this.lengthSquared();\n  }\n\n  distance(mathArray: Readonly<NumericArray>): number {\n    return Math.sqrt(this.distanceSquared(mathArray));\n  }\n\n  distanceSquared(mathArray: Readonly<NumericArray>): number {\n    let length = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const dist = this[i] - mathArray[i];\n      length += dist * dist;\n    }\n    return checkNumber(length);\n  }\n\n  dot(mathArray: Readonly<NumericArray>): number {\n    let product = 0;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      product += this[i] * mathArray[i];\n    }\n    return checkNumber(product);\n  }\n\n  // MODIFIERS\n\n  normalize(): this {\n    const length = this.magnitude();\n    if (length !== 0) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= length;\n      }\n    }\n    return this.check();\n  }\n\n  multiply(...vectors: Readonly<NumericArray>[]): this {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  divide(...vectors: Readonly<NumericArray>[]): this {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] /= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  // THREE.js compatibility\n\n  lengthSq(): number {\n    return this.lengthSquared();\n  }\n  distanceTo(vector: Readonly<NumericArray>): number {\n    return this.distance(vector);\n  }\n  distanceToSquared(vector: Readonly<NumericArray>): number {\n    return this.distanceSquared(vector);\n  }\n\n  getComponent(i: number): number {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    return checkNumber(this[i]);\n  }\n\n  setComponent(i: number, value: number): this {\n    assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n    this[i] = value;\n    return this.check();\n  }\n\n  addVectors(a: Readonly<NumericArray>, b: Readonly<NumericArray>): this {\n    return this.copy(a).add(b);\n  }\n\n  subVectors(a: Readonly<NumericArray>, b: Readonly<NumericArray>): this {\n    return this.copy(a).subtract(b);\n  }\n\n  multiplyVectors(a: Readonly<NumericArray>, b: Readonly<NumericArray>): this {\n    return this.copy(a).multiply(b);\n  }\n\n  addScaledVector(a: Readonly<NumericArray>, b: number): this {\n    // @ts-expect-error error TS2351: Cannot use 'new' with an expression whose type lacks a call or construct signature.\n    return this.add(new this.constructor(a).multiplyScalar(b));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}