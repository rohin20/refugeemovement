{"ast":null,"code":"/*\n * Copyright 2012-2016 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n'use strict';\n\nvar interceptor, mime, registry, noopConverter, missingConverter, attempt;\ninterceptor = require('../interceptor');\nmime = require('../mime');\nregistry = require('../mime/registry');\nattempt = require('../util/attempt');\nnoopConverter = {\n  read: function read(obj) {\n    return obj;\n  },\n  write: function write(obj) {\n    return obj;\n  }\n};\nmissingConverter = {\n  read: function read() {\n    throw 'No read method found on converter';\n  },\n  write: function write() {\n    throw 'No write method found on converter';\n  }\n};\n\n/**\n * MIME type support for request and response entities.  Entities are\n * (de)serialized using the converter for the MIME type.\n *\n * Request entities are converted using the desired converter and the\n * 'Accept' request header prefers this MIME.\n *\n * Response entities are converted based on the Content-Type response header.\n *\n * @param {Client} [client] client to wrap\n * @param {string} [config.mime='text/plain'] MIME type to encode the request\n *   entity\n * @param {string} [config.accept] Accept header for the request\n * @param {Client} [config.client=<request.originator>] client passed to the\n *   converter, defaults to the client originating the request\n * @param {Registry} [config.registry] MIME registry, defaults to the root\n *   registry\n * @param {boolean} [config.permissive] Allow an unkown request MIME type\n *\n * @returns {Client}\n */\nmodule.exports = interceptor({\n  init: function init(config) {\n    config.registry = config.registry || registry;\n    return config;\n  },\n  request: function request(_request, config) {\n    var type, headers;\n    headers = _request.headers || (_request.headers = {});\n    type = mime.parse(headers['Content-Type'] || config.mime || 'text/plain');\n    headers.Accept = headers.Accept || config.accept || type.raw + ', application/json;q=0.8, text/plain;q=0.5, */*;q=0.2';\n    if (!('entity' in _request)) {\n      return _request;\n    }\n    headers['Content-Type'] = type.raw;\n    return config.registry.lookup(type)['catch'](function () {\n      // failed to resolve converter\n      if (config.permissive) {\n        return noopConverter;\n      }\n      throw 'mime-unknown';\n    }).then(function (converter) {\n      var client = config.client || _request.originator,\n        write = converter.write || missingConverter.write;\n      return attempt(write.bind(void 0, _request.entity, {\n        client: client,\n        request: _request,\n        mime: type,\n        registry: config.registry\n      }))['catch'](function () {\n        throw 'mime-serialization';\n      }).then(function (entity) {\n        _request.entity = entity;\n        return _request;\n      });\n    });\n  },\n  response: function response(_response, config) {\n    if (!(_response.headers && _response.headers['Content-Type'] && _response.entity)) {\n      return _response;\n    }\n    var type = mime.parse(_response.headers['Content-Type']);\n    return config.registry.lookup(type)['catch'](function () {\n      return noopConverter;\n    }).then(function (converter) {\n      var client = config.client || _response.request && _response.request.originator,\n        read = converter.read || missingConverter.read;\n      return attempt(read.bind(void 0, _response.entity, {\n        client: client,\n        response: _response,\n        mime: type,\n        registry: config.registry\n      }))['catch'](function (e) {\n        _response.error = 'mime-deserialization';\n        _response.cause = e;\n        throw _response;\n      }).then(function (entity) {\n        _response.entity = entity;\n        return _response;\n      });\n    });\n  }\n});","map":{"version":3,"names":["interceptor","mime","registry","noopConverter","missingConverter","attempt","require","read","obj","write","module","exports","init","config","request","type","headers","parse","Accept","accept","raw","lookup","permissive","then","converter","client","originator","bind","entity","response","e","error","cause"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/rest/interceptor/mime.js"],"sourcesContent":["/*\n * Copyright 2012-2016 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n'use strict';\n\nvar interceptor, mime, registry, noopConverter, missingConverter, attempt;\n\ninterceptor = require('../interceptor');\nmime = require('../mime');\nregistry = require('../mime/registry');\nattempt = require('../util/attempt');\n\nnoopConverter = {\n\tread: function (obj) { return obj; },\n\twrite: function (obj) { return obj; }\n};\n\nmissingConverter = {\n\tread: function () { throw 'No read method found on converter'; },\n\twrite: function () { throw 'No write method found on converter'; }\n};\n\n/**\n * MIME type support for request and response entities.  Entities are\n * (de)serialized using the converter for the MIME type.\n *\n * Request entities are converted using the desired converter and the\n * 'Accept' request header prefers this MIME.\n *\n * Response entities are converted based on the Content-Type response header.\n *\n * @param {Client} [client] client to wrap\n * @param {string} [config.mime='text/plain'] MIME type to encode the request\n *   entity\n * @param {string} [config.accept] Accept header for the request\n * @param {Client} [config.client=<request.originator>] client passed to the\n *   converter, defaults to the client originating the request\n * @param {Registry} [config.registry] MIME registry, defaults to the root\n *   registry\n * @param {boolean} [config.permissive] Allow an unkown request MIME type\n *\n * @returns {Client}\n */\nmodule.exports = interceptor({\n\tinit: function (config) {\n\t\tconfig.registry = config.registry || registry;\n\t\treturn config;\n\t},\n\trequest: function (request, config) {\n\t\tvar type, headers;\n\n\t\theaders = request.headers || (request.headers = {});\n\t\ttype = mime.parse(headers['Content-Type'] || config.mime || 'text/plain');\n\t\theaders.Accept = headers.Accept || config.accept || type.raw + ', application/json;q=0.8, text/plain;q=0.5, */*;q=0.2';\n\n\t\tif (!('entity' in request)) {\n\t\t\treturn request;\n\t\t}\n\n\t\theaders['Content-Type'] = type.raw;\n\n\t\treturn config.registry.lookup(type)['catch'](function () {\n\t\t\t// failed to resolve converter\n\t\t\tif (config.permissive) {\n\t\t\t\treturn noopConverter;\n\t\t\t}\n\t\t\tthrow 'mime-unknown';\n\t\t}).then(function (converter) {\n\t\t\tvar client = config.client || request.originator,\n\t\t\t\twrite = converter.write || missingConverter.write;\n\n\t\t\treturn attempt(write.bind(void 0, request.entity, { client: client, request: request, mime: type, registry: config.registry }))\n\t\t\t\t['catch'](function() {\n\t\t\t\t\tthrow 'mime-serialization';\n\t\t\t\t})\n\t\t\t\t.then(function(entity) {\n\t\t\t\t\trequest.entity = entity;\n\t\t\t\t\treturn request;\n\t\t\t\t});\n\t\t});\n\t},\n\tresponse: function (response, config) {\n\t\tif (!(response.headers && response.headers['Content-Type'] && response.entity)) {\n\t\t\treturn response;\n\t\t}\n\n\t\tvar type = mime.parse(response.headers['Content-Type']);\n\n\t\treturn config.registry.lookup(type)['catch'](function () { return noopConverter; }).then(function (converter) {\n\t\t\tvar client = config.client || response.request && response.request.originator,\n\t\t\t\tread = converter.read || missingConverter.read;\n\n\t\t\treturn attempt(read.bind(void 0, response.entity, { client: client, response: response, mime: type, registry: config.registry }))\n\t\t\t\t['catch'](function (e) {\n\t\t\t\t\tresponse.error = 'mime-deserialization';\n\t\t\t\t\tresponse.cause = e;\n\t\t\t\t\tthrow response;\n\t\t\t\t})\n\t\t\t\t.then(function (entity) {\n\t\t\t\t\tresponse.entity = entity;\n\t\t\t\t\treturn response;\n\t\t\t\t});\n\t\t});\n\t}\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}