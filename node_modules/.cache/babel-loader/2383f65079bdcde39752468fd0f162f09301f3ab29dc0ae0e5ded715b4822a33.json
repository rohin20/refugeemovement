{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.renameEntry = exports.deleteEntry = exports.registerEntry = void 0;\nvar _toolkit = require(\"@reduxjs/toolkit\");\nvar _actionTypes = _interopRequireDefault(require(\"./action-types\")); /**\n                                                                      *\n                                                                      * Add a new kepler.gl instance in `keplerGlReducer`. This action is called under-the-hood when a `KeplerGl` component is **mounted** to the dom.\n                                                                      * Note that if you dispatch actions such as adding data to a kepler.gl instance before the React component is mounted, the action will not be\n                                                                      * performed. Instance reducer can only handle actions when it is instantiated.\n                                                                      * @memberof rootActions\n                                                                      * @param payload\n                                                                      * @param payload.id - ***required** The id of the instance\n                                                                      * @param payload.mint - Whether to use a fresh empty state, when `mint: true` it will *always* load a fresh state when the component is re-mounted.\n                                                                      * When `mint: false` it will register with existing instance state under the same `id`, when the component is unmounted then mounted again. Default: `true`\n                                                                      * @param payload.mapboxApiAccessToken - mapboxApiAccessToken to be saved in `map-style` reducer.\n                                                                      * @param payload.mapboxApiUrl - mapboxApiUrl to be saved in `map-style` reducer.\n                                                                      * @param payload.mapStylesReplaceDefault - mapStylesReplaceDefault to be saved in `map-style` reducer.\n                                                                      * @param payload.initialUiState - initial ui state\n                                                                      * @public\n                                                                      */\nvar registerEntry = (0, _toolkit.createAction)(_actionTypes[\"default\"].REGISTER_ENTRY, function (payload) {\n  return {\n    payload: payload\n  };\n});\n/**\n *\n * Delete an instance from `keplerGlReducer`. This action is called under-the-hood when a `KeplerGl` component is **un-mounted** to the dom.\n * If `mint` is set to be `true` in the component prop, the instance state will be deleted from the root reducer. Otherwise, the root reducer will keep\n * the instance state and later transfer it to a newly mounted component with the same `id`\n * @memberof rootActions\n * @param {string} id - the id of the instance to be deleted\n * @public\n */\n\nexports.registerEntry = registerEntry;\nvar deleteEntry = (0, _toolkit.createAction)(_actionTypes[\"default\"].DELETE_ENTRY, function (id) {\n  return {\n    payload: id\n  };\n});\n/**\n *\n * Rename an instance in the root reducer, keep its entire state\n *\n * @memberof rootActions\n * @param {string} oldId - ***required** old id\n * @param {string} newId - ***required** new id\n * @public\n */\n\nexports.deleteEntry = deleteEntry;\nvar renameEntry = (0, _toolkit.createAction)(_actionTypes[\"default\"].RENAME_ENTRY, function (oldId, newId) {\n  return {\n    payload: {\n      oldId: oldId,\n      newId: newId\n    }\n  };\n});\n/**\n * This declaration is needed to group actions in docs\n */\n\n/**\n * Root actions managers adding and removing instances in root reducer.\n * Under-the-hood, when a `KeplerGl` component is mounted or unmounted,\n * it will automatically calls these actions to add itself to the root reducer.\n * However, sometimes the data is ready before the component is registered in the reducer,\n * in this case, you can manually call these actions or the corresponding updater to add it to the reducer.\n *\n * @public\n */\n\n/* eslint-disable no-unused-vars */\n// @ts-ignore\n\nexports.renameEntry = renameEntry;\nvar rootActions = null;\n/* eslint-enable no-unused-vars */","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","renameEntry","deleteEntry","registerEntry","_toolkit","_actionTypes","createAction","REGISTER_ENTRY","payload","id","oldId","newId"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/actions/src/identity-actions.ts"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {createAction} from '@reduxjs/toolkit';\nimport {default as ActionTypes} from './action-types';\nimport {UiState} from '@kepler.gl/types';\n\nexport type RegisterEntryUpdaterAction = {\n  payload: {\n    id: string;\n    mint?: boolean;\n    mapboxApiAccessToken?: string;\n    mapboxApiUrl?: string;\n    mapStylesReplaceDefault?: boolean;\n    initialUiState?: Partial<UiState>;\n  };\n};\n/**\n *\n * Add a new kepler.gl instance in `keplerGlReducer`. This action is called under-the-hood when a `KeplerGl` component is **mounted** to the dom.\n * Note that if you dispatch actions such as adding data to a kepler.gl instance before the React component is mounted, the action will not be\n * performed. Instance reducer can only handle actions when it is instantiated.\n * @memberof rootActions\n * @param payload\n * @param payload.id - ***required** The id of the instance\n * @param payload.mint - Whether to use a fresh empty state, when `mint: true` it will *always* load a fresh state when the component is re-mounted.\n * When `mint: false` it will register with existing instance state under the same `id`, when the component is unmounted then mounted again. Default: `true`\n * @param payload.mapboxApiAccessToken - mapboxApiAccessToken to be saved in `map-style` reducer.\n * @param payload.mapboxApiUrl - mapboxApiUrl to be saved in `map-style` reducer.\n * @param payload.mapStylesReplaceDefault - mapStylesReplaceDefault to be saved in `map-style` reducer.\n * @param payload.initialUiState - initial ui state\n * @public\n */\nexport const registerEntry: (\n  entry: RegisterEntryUpdaterAction['payload']\n) => {\n  type: typeof ActionTypes.REGISTER_ENTRY;\n  payload: RegisterEntryUpdaterAction['payload'];\n} = createAction(ActionTypes.REGISTER_ENTRY, (payload: RegisterEntryUpdaterAction['payload']) => ({\n  payload\n}));\n\n/**\n *\n * Delete an instance from `keplerGlReducer`. This action is called under-the-hood when a `KeplerGl` component is **un-mounted** to the dom.\n * If `mint` is set to be `true` in the component prop, the instance state will be deleted from the root reducer. Otherwise, the root reducer will keep\n * the instance state and later transfer it to a newly mounted component with the same `id`\n * @memberof rootActions\n * @param {string} id - the id of the instance to be deleted\n * @public\n */\nexport const deleteEntry: (\n  id: string\n) => {\n  type: typeof ActionTypes.DELETE_ENTRY;\n  payload: string;\n} = createAction(ActionTypes.DELETE_ENTRY, (id: string) => ({payload: id}));\n\n/**\n *\n * Rename an instance in the root reducer, keep its entire state\n *\n * @memberof rootActions\n * @param {string} oldId - ***required** old id\n * @param {string} newId - ***required** new id\n * @public\n */\nexport const renameEntry: (\n  oldId: string,\n  newId: string\n) => {\n  type: typeof ActionTypes.RENAME_ENTRY;\n  payload: {\n    oldId: string;\n    newId: string;\n  };\n} = createAction(ActionTypes.RENAME_ENTRY, (oldId: string, newId: string) => ({\n  payload: {\n    oldId,\n    newId\n  }\n}));\n\n/**\n * This declaration is needed to group actions in docs\n */\n/**\n * Root actions managers adding and removing instances in root reducer.\n * Under-the-hood, when a `KeplerGl` component is mounted or unmounted,\n * it will automatically calls these actions to add itself to the root reducer.\n * However, sometimes the data is ready before the component is registered in the reducer,\n * in this case, you can manually call these actions or the corresponding updater to add it to the reducer.\n *\n * @public\n */\n/* eslint-disable no-unused-vars */\n// @ts-ignore\nconst rootActions = null;\n/* eslint-enable no-unused-vars */\n"],"mappings":";;;;;;;;;AAoBA;;AACA;;AArBA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,IAAAA,sBAAA,GAAAC,OAAA;AAEAC,MAAA,CAAAC,cAAA,CAAAC,OAAA;EACAC,KAAA;AACA;AACAD,OAAA,CAAAE,WAAA,GAAAF,OAAA,CAAAG,WAAA,GAAAH,OAAA,CAAAI,aAAA;AAEA,IAAAC,QAAA,GAAAR,OAAA;AAEA,IAAAS,YAAA,GAAAV,sBAAA,CAAAC,OAAA;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAAO,aAAA,OAAAC,QAAA,CAAAE,YAAA,EAAAD,YAAA,YAAAE,cAAA,YAAAC,OAAA;EACA;IACaA,OAAA,EAAAA;EAKgC;AAC3C;AADgG;AAArD;AAI7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAT,OAAA,CAAAI,aAAA,GAAAA,aAAA;;;IACaK,OAAA,EAAAC;EAK8B;AAAkB;AAAD;AAAjB;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAV,OAAA,CAAAG,WAAA,GAAAA,WAAA;;;IACaM,OAAA;MAS8BE,KAAmC,EAAAA,KAAA;MAC5EC,KAAO,EAAEA;IACP;EACA;AAFO;AADmE;AAAnC;AAO3C;;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAEAZ,OAAA,CAAAE,WAAA,GAAAA,WAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}