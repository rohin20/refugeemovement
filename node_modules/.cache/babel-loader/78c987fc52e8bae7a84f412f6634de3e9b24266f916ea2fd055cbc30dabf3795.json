{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isBrowser } from '@loaders.gl/worker-utils';\nimport { WorkerFarm, getWorkerURL } from '@loaders.gl/worker-utils';\nexport function canParseWithWorker(loader, options) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n  if (!isBrowser && !(options !== null && options !== void 0 && options._nodeWorkers)) {\n    return false;\n  }\n  return loader.worker && (options === null || options === void 0 ? void 0 : options.worker);\n}\nexport function parseWithWorker(_x, _x2, _x3, _x4, _x5) {\n  return _parseWithWorker.apply(this, arguments);\n}\nfunction _parseWithWorker() {\n  _parseWithWorker = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(loader, data, options, context, parseOnMainThread) {\n    var name, url, workerFarm, workerPool, job, result;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          name = loader.id;\n          url = getWorkerURL(loader, options);\n          workerFarm = WorkerFarm.getWorkerFarm(options);\n          workerPool = workerFarm.getWorkerPool({\n            name: name,\n            url: url\n          });\n          options = JSON.parse(JSON.stringify(options));\n          context = JSON.parse(JSON.stringify(context || {}));\n          _context.next = 8;\n          return workerPool.startJob('process-on-worker', onMessage.bind(null, parseOnMainThread));\n        case 8:\n          job = _context.sent;\n          job.postMessage('process', {\n            input: data,\n            options: options,\n            context: context\n          });\n          _context.next = 12;\n          return job.result;\n        case 12:\n          result = _context.sent;\n          _context.next = 15;\n          return result.result;\n        case 15:\n          return _context.abrupt(\"return\", _context.sent);\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _parseWithWorker.apply(this, arguments);\n}\nfunction onMessage(_x6, _x7, _x8, _x9) {\n  return _onMessage.apply(this, arguments);\n}\nfunction _onMessage() {\n  _onMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(parseOnMainThread, job, type, payload) {\n    var id, input, options, result, message;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.t0 = type;\n          _context2.next = _context2.t0 === 'done' ? 3 : _context2.t0 === 'error' ? 5 : _context2.t0 === 'process' ? 7 : 20;\n          break;\n        case 3:\n          job.done(payload);\n          return _context2.abrupt(\"break\", 21);\n        case 5:\n          job.error(new Error(payload.error));\n          return _context2.abrupt(\"break\", 21);\n        case 7:\n          id = payload.id, input = payload.input, options = payload.options;\n          _context2.prev = 8;\n          _context2.next = 11;\n          return parseOnMainThread(input, options);\n        case 11:\n          result = _context2.sent;\n          job.postMessage('done', {\n            id: id,\n            result: result\n          });\n          _context2.next = 19;\n          break;\n        case 15:\n          _context2.prev = 15;\n          _context2.t1 = _context2[\"catch\"](8);\n          message = _context2.t1 instanceof Error ? _context2.t1.message : 'unknown error';\n          job.postMessage('error', {\n            id: id,\n            error: message\n          });\n        case 19:\n          return _context2.abrupt(\"break\", 21);\n        case 20:\n          console.warn(\"parse-with-worker unknown message \".concat(type));\n        case 21:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[8, 15]]);\n  }));\n  return _onMessage.apply(this, arguments);\n}","map":{"version":3,"names":["isBrowser","WorkerFarm","getWorkerURL","canParseWithWorker","loader","options","isSupported","_nodeWorkers","worker","parseWithWorker","_x","_x2","_x3","_x4","_x5","_parseWithWorker","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","context","parseOnMainThread","name","url","workerFarm","workerPool","job","result","wrap","_callee$","_context","prev","next","id","getWorkerFarm","getWorkerPool","JSON","parse","stringify","startJob","onMessage","bind","sent","postMessage","input","abrupt","stop","_x6","_x7","_x8","_x9","_onMessage","_callee2","type","payload","message","_callee2$","_context2","t0","done","error","Error","t1","console","warn","concat"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/loader-utils/src/lib/worker-loader-utils/parse-with-worker.ts"],"sourcesContent":["import {\n  WorkerJob,\n  WorkerMessageType,\n  WorkerMessagePayload,\n  isBrowser\n} from '@loaders.gl/worker-utils';\nimport type {Loader, LoaderOptions, LoaderContext} from '../../types';\nimport {WorkerFarm, getWorkerURL} from '@loaders.gl/worker-utils';\n\n/**\n * Determines if a loader can parse with worker\n * @param loader\n * @param options\n */\nexport function canParseWithWorker(loader: Loader, options?: LoaderOptions) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n\n  // Node workers are still experimental\n  if (!isBrowser && !options?._nodeWorkers) {\n    return false;\n  }\n\n  return loader.worker && options?.worker;\n}\n\n/**\n * this function expects that the worker function sends certain messages,\n * this can be automated if the worker is wrapper by a call to createLoaderWorker in @loaders.gl/loader-utils.\n */\nexport async function parseWithWorker(\n  loader: Loader,\n  data: any,\n  options?: LoaderOptions,\n  context?: LoaderContext,\n  parseOnMainThread?: (arrayBuffer: ArrayBuffer, options: {[key: string]: any}) => Promise<void>\n) {\n  const name = loader.id; // TODO\n  const url = getWorkerURL(loader, options);\n\n  const workerFarm = WorkerFarm.getWorkerFarm(options);\n  const workerPool = workerFarm.getWorkerPool({name, url});\n\n  // options.log object contains functions which cannot be transferred\n  // context.fetch & context.parse functions cannot be transferred\n  // TODO - decide how to handle logging on workers\n  options = JSON.parse(JSON.stringify(options));\n  context = JSON.parse(JSON.stringify(context || {}));\n\n  const job = await workerPool.startJob(\n    'process-on-worker',\n    // @ts-expect-error\n    onMessage.bind(null, parseOnMainThread) // eslint-disable-line @typescript-eslint/no-misused-promises\n  );\n\n  job.postMessage('process', {\n    // @ts-ignore\n    input: data,\n    options,\n    context\n  });\n\n  const result = await job.result;\n  // TODO - what is going on here?\n  return await result.result;\n}\n\n/**\n * Handle worker's responses to the main thread\n * @param job\n * @param type\n * @param payload\n */\nasync function onMessage(\n  parseOnMainThread: (arrayBuffer: ArrayBuffer, options?: {[key: string]: any}) => Promise<void>,\n  job: WorkerJob,\n  type: WorkerMessageType,\n  payload: WorkerMessagePayload\n) {\n  switch (type) {\n    case 'done':\n      job.done(payload);\n      break;\n\n    case 'error':\n      job.error(new Error(payload.error));\n      break;\n\n    case 'process':\n      // Worker is asking for main thread to parseO\n      const {id, input, options} = payload;\n      try {\n        const result = await parseOnMainThread(input, options);\n        job.postMessage('done', {id, result});\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'unknown error';\n        job.postMessage('error', {id, error: message});\n      }\n      break;\n\n    default:\n      // eslint-disable-next-line\n      console.warn(`parse-with-worker unknown message ${type}`);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}