{"ast":null,"code":"/*\r\n Copyright 2013 Daniel Wirtz <dcode@dcode.io>\r\n Copyright 2009 The Closure Library Authors. All Rights Reserved.\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n */\n\n/**\r\n * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\r\n * Released under the Apache License, Version 2.0\r\n * see: https://github.com/dcodeIO/long.js for details\r\n */\n(function (global, factory) {\n  /* AMD */if (typeof define === 'function' && define[\"amd\"]) define([], factory);\n  /* CommonJS */else if (typeof require === 'function' && typeof module === \"object\" && module && module[\"exports\"]) module[\"exports\"] = factory();\n  /* Global */else (global[\"dcodeIO\"] = global[\"dcodeIO\"] || {})[\"Long\"] = factory();\n})(this, function () {\n  \"use strict\";\n\n  /**\r\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n   *  See the from* functions below for more convenient ways of constructing Longs.\r\n   * @exports Long\r\n   * @class A Long class for representing a 64 bit two's-complement integer value.\r\n   * @param {number} low The low (signed) 32 bits of the long\r\n   * @param {number} high The high (signed) 32 bits of the long\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n   * @constructor\r\n   */\n  function Long(low, high, unsigned) {\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\n    this.low = low | 0;\n\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\n    this.high = high | 0;\n\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\n    this.unsigned = !!unsigned;\n  }\n\n  // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n\n  /**\r\n   * An indicator used to reliably determine if an object is a Long or not.\r\n   * @type {boolean}\r\n   * @const\r\n   * @private\r\n   */\n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true,\n    enumerable: false,\n    configurable: false\n  });\n\n  /**\r\n   * @function\r\n   * @param {*} obj Object\r\n   * @returns {boolean}\r\n   * @inner\r\n   */\n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n\n  /**\r\n   * Tests if the specified object is a Long.\r\n   * @function\r\n   * @param {*} obj Object\r\n   * @returns {boolean}\r\n   */\n  Long.isLong = isLong;\n\n  /**\r\n   * A cache of the Long representations of small integer values.\r\n   * @type {!Object}\r\n   * @inner\r\n   */\n  var INT_CACHE = {};\n\n  /**\r\n   * A cache of the Long representations of small unsigned integer values.\r\n   * @type {!Object}\r\n   * @inner\r\n   */\n  var UINT_CACHE = {};\n\n  /**\r\n   * @param {number} value\r\n   * @param {boolean=} unsigned\r\n   * @returns {!Long}\r\n   * @inner\r\n   */\n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n    if (unsigned) {\n      value >>>= 0;\n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n      obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n\n  /**\r\n   * Returns a Long representing the given 32 bit integer value.\r\n   * @function\r\n   * @param {number} value The 32 bit integer in question\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n   * @returns {!Long} The corresponding Long value\r\n   */\n  Long.fromInt = fromInt;\n\n  /**\r\n   * @param {number} value\r\n   * @param {boolean=} unsigned\r\n   * @returns {!Long}\r\n   * @inner\r\n   */\n  function fromNumber(value, unsigned) {\n    if (isNaN(value) || !isFinite(value)) return unsigned ? UZERO : ZERO;\n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n\n  /**\r\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n   * @function\r\n   * @param {number} value The number in question\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n   * @returns {!Long} The corresponding Long value\r\n   */\n  Long.fromNumber = fromNumber;\n\n  /**\r\n   * @param {number} lowBits\r\n   * @param {number} highBits\r\n   * @param {boolean=} unsigned\r\n   * @returns {!Long}\r\n   * @inner\r\n   */\n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n\n  /**\r\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n   *  assumed to use 32 bits.\r\n   * @function\r\n   * @param {number} lowBits The low 32 bits\r\n   * @param {number} highBits The high 32 bits\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n   * @returns {!Long} The corresponding Long value\r\n   */\n  Long.fromBits = fromBits;\n\n  /**\r\n   * @function\r\n   * @param {number} base\r\n   * @param {number} exponent\r\n   * @returns {number}\r\n   * @inner\r\n   */\n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n\n  /**\r\n   * @param {string} str\r\n   * @param {(boolean|number)=} unsigned\r\n   * @param {number=} radix\r\n   * @returns {!Long}\r\n   * @inner\r\n   */\n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return ZERO;\n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned, unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    }\n\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n        value = parseInt(str.substring(i, i + size), radix);\n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n    result.unsigned = unsigned;\n    return result;\n  }\n\n  /**\r\n   * Returns a Long representation of the given string, written using the specified radix.\r\n   * @function\r\n   * @param {string} str The textual representation of the Long\r\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n   * @returns {!Long} The corresponding Long value\r\n   */\n  Long.fromString = fromString;\n\n  /**\r\n   * @function\r\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n   * @returns {!Long}\r\n   * @inner\r\n   */\n  function fromValue(val) {\n    if (val /* is compatible */ instanceof Long) return val;\n    if (typeof val === 'number') return fromNumber(val);\n    if (typeof val === 'string') return fromString(val);\n    // Throws for non-objects, converts non-instanceof Long:\n    return fromBits(val.low, val.high, val.unsigned);\n  }\n\n  /**\r\n   * Converts the specified value to a Long.\r\n   * @function\r\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n   * @returns {!Long}\r\n   */\n  Long.fromValue = fromValue;\n\n  // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\n  var TWO_PWR_16_DBL = 1 << 16;\n\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\n  var TWO_PWR_24_DBL = 1 << 24;\n\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n\n  /**\r\n   * @type {!Long}\r\n   * @const\r\n   * @inner\r\n   */\n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\n  var ZERO = fromInt(0);\n\n  /**\r\n   * Signed zero.\r\n   * @type {!Long}\r\n   */\n  Long.ZERO = ZERO;\n\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\n  var UZERO = fromInt(0, true);\n\n  /**\r\n   * Unsigned zero.\r\n   * @type {!Long}\r\n   */\n  Long.UZERO = UZERO;\n\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\n  var ONE = fromInt(1);\n\n  /**\r\n   * Signed one.\r\n   * @type {!Long}\r\n   */\n  Long.ONE = ONE;\n\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\n  var UONE = fromInt(1, true);\n\n  /**\r\n   * Unsigned one.\r\n   * @type {!Long}\r\n   */\n  Long.UONE = UONE;\n\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\n  var NEG_ONE = fromInt(-1);\n\n  /**\r\n   * Signed negative one.\r\n   * @type {!Long}\r\n   */\n  Long.NEG_ONE = NEG_ONE;\n\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n\n  /**\r\n   * Maximum signed value.\r\n   * @type {!Long}\r\n   */\n  Long.MAX_VALUE = MAX_VALUE;\n\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n\n  /**\r\n   * Maximum unsigned value.\r\n   * @type {!Long}\r\n   */\n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n\n  /**\r\n   * Minimum signed value.\r\n   * @type {!Long}\r\n   */\n  Long.MIN_VALUE = MIN_VALUE;\n\n  /**\r\n   * @alias Long.prototype\r\n   * @inner\r\n   */\n  var LongPrototype = Long.prototype;\n\n  /**\r\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n   * @returns {number}\r\n   */\n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n\n  /**\r\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n   * @returns {number}\r\n   */\n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n\n  /**\r\n   * Converts the Long to a string written in the specified radix.\r\n   * @param {number=} radix Radix (2-36), defaults to 10\r\n   * @returns {string}\r\n   * @override\r\n   * @throws {RangeError} If `radix` is out of range\r\n   */\n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n          div = this.div(radixLong),\n          rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    }\n\n    // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n      rem = this;\n    var result = '';\n    while (true) {\n      var remDiv = rem.div(radixToPower),\n        intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n        digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n        result = '' + digits + result;\n      }\n    }\n  };\n\n  /**\r\n   * Gets the high 32 bits as a signed integer.\r\n   * @returns {number} Signed high bits\r\n   */\n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n\n  /**\r\n   * Gets the high 32 bits as an unsigned integer.\r\n   * @returns {number} Unsigned high bits\r\n   */\n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n\n  /**\r\n   * Gets the low 32 bits as a signed integer.\r\n   * @returns {number} Signed low bits\r\n   */\n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n\n  /**\r\n   * Gets the low 32 bits as an unsigned integer.\r\n   * @returns {number} Unsigned low bits\r\n   */\n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n\n  /**\r\n   * Gets the number of bits needed to represent the absolute value of this Long.\r\n   * @returns {number}\r\n   */\n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative())\n      // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n\n  /**\r\n   * Tests if this Long's value equals zero.\r\n   * @returns {boolean}\r\n   */\n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n\n  /**\r\n   * Tests if this Long's value is negative.\r\n   * @returns {boolean}\r\n   */\n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n\n  /**\r\n   * Tests if this Long's value is positive.\r\n   * @returns {boolean}\r\n   */\n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n\n  /**\r\n   * Tests if this Long's value is odd.\r\n   * @returns {boolean}\r\n   */\n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n\n  /**\r\n   * Tests if this Long's value is even.\r\n   * @returns {boolean}\r\n   */\n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n\n  /**\r\n   * Tests if this Long's value equals the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n\n  /**\r\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n  LongPrototype.eq = LongPrototype.equals;\n\n  /**\r\n   * Tests if this Long's value differs from the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq( /* validates */other);\n  };\n\n  /**\r\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n  LongPrototype.neq = LongPrototype.notEquals;\n\n  /**\r\n   * Tests if this Long's value is less than the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp( /* validates */other) < 0;\n  };\n\n  /**\r\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n  LongPrototype.lt = LongPrototype.lessThan;\n\n  /**\r\n   * Tests if this Long's value is less than or equal the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp( /* validates */other) <= 0;\n  };\n\n  /**\r\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n\n  /**\r\n   * Tests if this Long's value is greater than the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp( /* validates */other) > 0;\n  };\n\n  /**\r\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n  LongPrototype.gt = LongPrototype.greaterThan;\n\n  /**\r\n   * Tests if this Long's value is greater than or equal the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp( /* validates */other) >= 0;\n  };\n\n  /**\r\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n\n  /**\r\n   * Compares this Long's value with the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n   *  if the given one is greater\r\n   */\n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n      otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1;\n    // At this point the sign bits are the same\n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1;\n    // Both are positive if at least one is unsigned\n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n\n  /**\r\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n   *  if the given one is greater\r\n   */\n  LongPrototype.comp = LongPrototype.compare;\n\n  /**\r\n   * Negates this Long's value.\r\n   * @returns {!Long} Negated Long\r\n   */\n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n\n  /**\r\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n   * @function\r\n   * @returns {!Long} Negated Long\r\n   */\n  LongPrototype.neg = LongPrototype.negate;\n\n  /**\r\n   * Returns the sum of this and the specified Long.\r\n   * @param {!Long|number|string} addend Addend\r\n   * @returns {!Long} Sum\r\n   */\n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend);\n\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n      c32 = 0,\n      c16 = 0,\n      c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n\n  /**\r\n   * Returns the difference of this and the specified Long.\r\n   * @param {!Long|number|string} subtrahend Subtrahend\r\n   * @returns {!Long} Difference\r\n   */\n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n\n  /**\r\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n   * @function\r\n   * @param {!Long|number|string} subtrahend Subtrahend\r\n   * @returns {!Long} Difference\r\n   */\n  LongPrototype.sub = LongPrototype.subtract;\n\n  /**\r\n   * Returns the product of this and the specified Long.\r\n   * @param {!Long|number|string} multiplier Multiplier\r\n   * @returns {!Long} Product\r\n   */\n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return ZERO;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier);\n    if (multiplier.isZero()) return ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg();\n\n    // If both longs are small, use float multiplication\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n\n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n      c32 = 0,\n      c16 = 0,\n      c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n\n  /**\r\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n   * @function\r\n   * @param {!Long|number|string} multiplier Multiplier\r\n   * @returns {!Long} Product\r\n   */\n  LongPrototype.mul = LongPrototype.multiply;\n\n  /**\r\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n   *  unsigned if this Long is unsigned.\r\n   * @param {!Long|number|string} divisor Divisor\r\n   * @returns {!Long} Quotient\r\n   */\n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero');\n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1)))\n        // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    }\n\n    // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n    rem = this;\n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n\n      // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n        delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n        // Decrease the approximation until it is smaller than the remainder.  Note\n        // that if it is too large, the product overflows and is negative.\n        approxRes = fromNumber(approx),\n        approxRem = approxRes.mul(divisor);\n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      }\n\n      // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n    return res;\n  };\n\n  /**\r\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n   * @function\r\n   * @param {!Long|number|string} divisor Divisor\r\n   * @returns {!Long} Quotient\r\n   */\n  LongPrototype.div = LongPrototype.divide;\n\n  /**\r\n   * Returns this Long modulo the specified.\r\n   * @param {!Long|number|string} divisor Divisor\r\n   * @returns {!Long} Remainder\r\n   */\n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    return this.sub(this.div(divisor).mul(divisor));\n  };\n\n  /**\r\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n   * @function\r\n   * @param {!Long|number|string} divisor Divisor\r\n   * @returns {!Long} Remainder\r\n   */\n  LongPrototype.mod = LongPrototype.modulo;\n\n  /**\r\n   * Returns the bitwise NOT of this Long.\r\n   * @returns {!Long}\r\n   */\n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n\n  /**\r\n   * Returns the bitwise AND of this Long and the specified.\r\n   * @param {!Long|number|string} other Other Long\r\n   * @returns {!Long}\r\n   */\n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n\n  /**\r\n   * Returns the bitwise OR of this Long and the specified.\r\n   * @param {!Long|number|string} other Other Long\r\n   * @returns {!Long}\r\n   */\n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n\n  /**\r\n   * Returns the bitwise XOR of this Long and the given one.\r\n   * @param {!Long|number|string} other Other Long\r\n   * @returns {!Long}\r\n   */\n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n\n  /**\r\n   * Returns this Long with bits shifted to the left by the given amount.\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   */\n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n\n  /**\r\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n   * @function\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   */\n  LongPrototype.shl = LongPrototype.shiftLeft;\n\n  /**\r\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   */\n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n\n  /**\r\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n   * @function\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   */\n  LongPrototype.shr = LongPrototype.shiftRight;\n\n  /**\r\n   * Returns this Long with bits logically shifted to the right by the given amount.\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   */\n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    numBits &= 63;\n    if (numBits === 0) return this;else {\n      var high = this.high;\n      if (numBits < 32) {\n        var low = this.low;\n        return fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);\n      } else if (numBits === 32) return fromBits(high, 0, this.unsigned);else return fromBits(high >>> numBits - 32, 0, this.unsigned);\n    }\n  };\n\n  /**\r\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n   * @function\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   */\n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n\n  /**\r\n   * Converts this Long to signed.\r\n   * @returns {!Long} Signed long\r\n   */\n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n\n  /**\r\n   * Converts this Long to unsigned.\r\n   * @returns {!Long} Unsigned long\r\n   */\n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n\n  /**\r\n   * Converts this Long to its byte representation.\r\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n   * @returns {!Array.<number>} Byte representation\r\n   */\n  LongPrototype.toBytes = function (le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n\n  /**\r\n   * Converts this Long to its little endian byte representation.\r\n   * @returns {!Array.<number>} Little endian byte representation\r\n   */\n  LongPrototype.toBytesLE = function () {\n    var hi = this.high,\n      lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24 & 0xff, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24 & 0xff];\n  };\n\n  /**\r\n   * Converts this Long to its big endian byte representation.\r\n   * @returns {!Array.<number>} Big endian byte representation\r\n   */\n  LongPrototype.toBytesBE = function () {\n    var hi = this.high,\n      lo = this.low;\n    return [hi >>> 24 & 0xff, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24 & 0xff, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  return Long;\n});","map":{"version":3,"names":["global","factory","define","require","module","Long","low","high","unsigned","prototype","__isLong__","Object","defineProperty","value","enumerable","configurable","isLong","obj","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","isFinite","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","str","radix","length","Error","RangeError","p","indexOf","substring","radixToPower","result","i","size","min","parseInt","power","mul","add","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","toString","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","intval","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","isPositive","isOdd","isEven","equals","other","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","lte","greaterThan","gt","greaterThanOrEqual","gte","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","divide","divisor","approx","res","halfThis","shr","shl","toUnsigned","shru","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","toSigned","toBytes","le","toBytesLE","toBytesBE","hi","lo"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/long/dist/long.js"],"sourcesContent":["/*\r\n Copyright 2013 Daniel Wirtz <dcode@dcode.io>\r\n Copyright 2009 The Closure Library Authors. All Rights Reserved.\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n */\r\n\r\n/**\r\n * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\r\n * Released under the Apache License, Version 2.0\r\n * see: https://github.com/dcodeIO/long.js for details\r\n */\r\n(function(global, factory) {\r\n\r\n    /* AMD */ if (typeof define === 'function' && define[\"amd\"])\r\n        define([], factory);\r\n    /* CommonJS */ else if (typeof require === 'function' && typeof module === \"object\" && module && module[\"exports\"])\r\n        module[\"exports\"] = factory();\r\n    /* Global */ else\r\n        (global[\"dcodeIO\"] = global[\"dcodeIO\"] || {})[\"Long\"] = factory();\r\n\r\n})(this, function() {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n     *  See the from* functions below for more convenient ways of constructing Longs.\r\n     * @exports Long\r\n     * @class A Long class for representing a 64 bit two's-complement integer value.\r\n     * @param {number} low The low (signed) 32 bits of the long\r\n     * @param {number} high The high (signed) 32 bits of the long\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @constructor\r\n     */\r\n    function Long(low, high, unsigned) {\r\n\r\n        /**\r\n         * The low 32 bits as a signed value.\r\n         * @type {number}\r\n         */\r\n        this.low = low | 0;\r\n\r\n        /**\r\n         * The high 32 bits as a signed value.\r\n         * @type {number}\r\n         */\r\n        this.high = high | 0;\r\n\r\n        /**\r\n         * Whether unsigned or not.\r\n         * @type {boolean}\r\n         */\r\n        this.unsigned = !!unsigned;\r\n    }\r\n\r\n    // The internal representation of a long is the two given signed, 32-bit values.\r\n    // We use 32-bit pieces because these are the size of integers on which\r\n    // Javascript performs bit-operations.  For operations like addition and\r\n    // multiplication, we split each number into 16 bit pieces, which can easily be\r\n    // multiplied within Javascript's floating-point representation without overflow\r\n    // or change in sign.\r\n    //\r\n    // In the algorithms below, we frequently reduce the negative case to the\r\n    // positive case by negating the input(s) and then post-processing the result.\r\n    // Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n    // a positive number, it overflows back into a negative).  Not handling this\r\n    // case would often result in infinite recursion.\r\n    //\r\n    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n    // methods on which they depend.\r\n\r\n    /**\r\n     * An indicator used to reliably determine if an object is a Long or not.\r\n     * @type {boolean}\r\n     * @const\r\n     * @private\r\n     */\r\n    Long.prototype.__isLong__;\r\n\r\n    Object.defineProperty(Long.prototype, \"__isLong__\", {\r\n        value: true,\r\n        enumerable: false,\r\n        configurable: false\r\n    });\r\n\r\n    /**\r\n     * @function\r\n     * @param {*} obj Object\r\n     * @returns {boolean}\r\n     * @inner\r\n     */\r\n    function isLong(obj) {\r\n        return (obj && obj[\"__isLong__\"]) === true;\r\n    }\r\n\r\n    /**\r\n     * Tests if the specified object is a Long.\r\n     * @function\r\n     * @param {*} obj Object\r\n     * @returns {boolean}\r\n     */\r\n    Long.isLong = isLong;\r\n\r\n    /**\r\n     * A cache of the Long representations of small integer values.\r\n     * @type {!Object}\r\n     * @inner\r\n     */\r\n    var INT_CACHE = {};\r\n\r\n    /**\r\n     * A cache of the Long representations of small unsigned integer values.\r\n     * @type {!Object}\r\n     * @inner\r\n     */\r\n    var UINT_CACHE = {};\r\n\r\n    /**\r\n     * @param {number} value\r\n     * @param {boolean=} unsigned\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromInt(value, unsigned) {\r\n        var obj, cachedObj, cache;\r\n        if (unsigned) {\r\n            value >>>= 0;\r\n            if (cache = (0 <= value && value < 256)) {\r\n                cachedObj = UINT_CACHE[value];\r\n                if (cachedObj)\r\n                    return cachedObj;\r\n            }\r\n            obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n            if (cache)\r\n                UINT_CACHE[value] = obj;\r\n            return obj;\r\n        } else {\r\n            value |= 0;\r\n            if (cache = (-128 <= value && value < 128)) {\r\n                cachedObj = INT_CACHE[value];\r\n                if (cachedObj)\r\n                    return cachedObj;\r\n            }\r\n            obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n            if (cache)\r\n                INT_CACHE[value] = obj;\r\n            return obj;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a Long representing the given 32 bit integer value.\r\n     * @function\r\n     * @param {number} value The 32 bit integer in question\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @returns {!Long} The corresponding Long value\r\n     */\r\n    Long.fromInt = fromInt;\r\n\r\n    /**\r\n     * @param {number} value\r\n     * @param {boolean=} unsigned\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromNumber(value, unsigned) {\r\n        if (isNaN(value) || !isFinite(value))\r\n            return unsigned ? UZERO : ZERO;\r\n        if (unsigned) {\r\n            if (value < 0)\r\n                return UZERO;\r\n            if (value >= TWO_PWR_64_DBL)\r\n                return MAX_UNSIGNED_VALUE;\r\n        } else {\r\n            if (value <= -TWO_PWR_63_DBL)\r\n                return MIN_VALUE;\r\n            if (value + 1 >= TWO_PWR_63_DBL)\r\n                return MAX_VALUE;\r\n        }\r\n        if (value < 0)\r\n            return fromNumber(-value, unsigned).neg();\r\n        return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n    }\r\n\r\n    /**\r\n     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n     * @function\r\n     * @param {number} value The number in question\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @returns {!Long} The corresponding Long value\r\n     */\r\n    Long.fromNumber = fromNumber;\r\n\r\n    /**\r\n     * @param {number} lowBits\r\n     * @param {number} highBits\r\n     * @param {boolean=} unsigned\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromBits(lowBits, highBits, unsigned) {\r\n        return new Long(lowBits, highBits, unsigned);\r\n    }\r\n\r\n    /**\r\n     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n     *  assumed to use 32 bits.\r\n     * @function\r\n     * @param {number} lowBits The low 32 bits\r\n     * @param {number} highBits The high 32 bits\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @returns {!Long} The corresponding Long value\r\n     */\r\n    Long.fromBits = fromBits;\r\n\r\n    /**\r\n     * @function\r\n     * @param {number} base\r\n     * @param {number} exponent\r\n     * @returns {number}\r\n     * @inner\r\n     */\r\n    var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n    /**\r\n     * @param {string} str\r\n     * @param {(boolean|number)=} unsigned\r\n     * @param {number=} radix\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromString(str, unsigned, radix) {\r\n        if (str.length === 0)\r\n            throw Error('empty string');\r\n        if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n            return ZERO;\r\n        if (typeof unsigned === 'number') {\r\n            // For goog.math.long compatibility\r\n            radix = unsigned,\r\n            unsigned = false;\r\n        } else {\r\n            unsigned = !! unsigned;\r\n        }\r\n        radix = radix || 10;\r\n        if (radix < 2 || 36 < radix)\r\n            throw RangeError('radix');\r\n\r\n        var p;\r\n        if ((p = str.indexOf('-')) > 0)\r\n            throw Error('interior hyphen');\r\n        else if (p === 0) {\r\n            return fromString(str.substring(1), unsigned, radix).neg();\r\n        }\r\n\r\n        // Do several (8) digits each time through the loop, so as to\r\n        // minimize the calls to the very expensive emulated div.\r\n        var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n        var result = ZERO;\r\n        for (var i = 0; i < str.length; i += 8) {\r\n            var size = Math.min(8, str.length - i),\r\n                value = parseInt(str.substring(i, i + size), radix);\r\n            if (size < 8) {\r\n                var power = fromNumber(pow_dbl(radix, size));\r\n                result = result.mul(power).add(fromNumber(value));\r\n            } else {\r\n                result = result.mul(radixToPower);\r\n                result = result.add(fromNumber(value));\r\n            }\r\n        }\r\n        result.unsigned = unsigned;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns a Long representation of the given string, written using the specified radix.\r\n     * @function\r\n     * @param {string} str The textual representation of the Long\r\n     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n     * @returns {!Long} The corresponding Long value\r\n     */\r\n    Long.fromString = fromString;\r\n\r\n    /**\r\n     * @function\r\n     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromValue(val) {\r\n        if (val /* is compatible */ instanceof Long)\r\n            return val;\r\n        if (typeof val === 'number')\r\n            return fromNumber(val);\r\n        if (typeof val === 'string')\r\n            return fromString(val);\r\n        // Throws for non-objects, converts non-instanceof Long:\r\n        return fromBits(val.low, val.high, val.unsigned);\r\n    }\r\n\r\n    /**\r\n     * Converts the specified value to a Long.\r\n     * @function\r\n     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n     * @returns {!Long}\r\n     */\r\n    Long.fromValue = fromValue;\r\n\r\n    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n    // no runtime penalty for these.\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_16_DBL = 1 << 16;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_24_DBL = 1 << 24;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var ZERO = fromInt(0);\r\n\r\n    /**\r\n     * Signed zero.\r\n     * @type {!Long}\r\n     */\r\n    Long.ZERO = ZERO;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var UZERO = fromInt(0, true);\r\n\r\n    /**\r\n     * Unsigned zero.\r\n     * @type {!Long}\r\n     */\r\n    Long.UZERO = UZERO;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var ONE = fromInt(1);\r\n\r\n    /**\r\n     * Signed one.\r\n     * @type {!Long}\r\n     */\r\n    Long.ONE = ONE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var UONE = fromInt(1, true);\r\n\r\n    /**\r\n     * Unsigned one.\r\n     * @type {!Long}\r\n     */\r\n    Long.UONE = UONE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var NEG_ONE = fromInt(-1);\r\n\r\n    /**\r\n     * Signed negative one.\r\n     * @type {!Long}\r\n     */\r\n    Long.NEG_ONE = NEG_ONE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n    /**\r\n     * Maximum signed value.\r\n     * @type {!Long}\r\n     */\r\n    Long.MAX_VALUE = MAX_VALUE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n    /**\r\n     * Maximum unsigned value.\r\n     * @type {!Long}\r\n     */\r\n    Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n    /**\r\n     * Minimum signed value.\r\n     * @type {!Long}\r\n     */\r\n    Long.MIN_VALUE = MIN_VALUE;\r\n\r\n    /**\r\n     * @alias Long.prototype\r\n     * @inner\r\n     */\r\n    var LongPrototype = Long.prototype;\r\n\r\n    /**\r\n     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n     * @returns {number}\r\n     */\r\n    LongPrototype.toInt = function toInt() {\r\n        return this.unsigned ? this.low >>> 0 : this.low;\r\n    };\r\n\r\n    /**\r\n     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n     * @returns {number}\r\n     */\r\n    LongPrototype.toNumber = function toNumber() {\r\n        if (this.unsigned)\r\n            return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n    };\r\n\r\n    /**\r\n     * Converts the Long to a string written in the specified radix.\r\n     * @param {number=} radix Radix (2-36), defaults to 10\r\n     * @returns {string}\r\n     * @override\r\n     * @throws {RangeError} If `radix` is out of range\r\n     */\r\n    LongPrototype.toString = function toString(radix) {\r\n        radix = radix || 10;\r\n        if (radix < 2 || 36 < radix)\r\n            throw RangeError('radix');\r\n        if (this.isZero())\r\n            return '0';\r\n        if (this.isNegative()) { // Unsigned Longs are never negative\r\n            if (this.eq(MIN_VALUE)) {\r\n                // We need to change the Long value before it can be negated, so we remove\r\n                // the bottom-most digit in this base and then recurse to do the rest.\r\n                var radixLong = fromNumber(radix),\r\n                    div = this.div(radixLong),\r\n                    rem1 = div.mul(radixLong).sub(this);\r\n                return div.toString(radix) + rem1.toInt().toString(radix);\r\n            } else\r\n                return '-' + this.neg().toString(radix);\r\n        }\r\n\r\n        // Do several (6) digits each time through the loop, so as to\r\n        // minimize the calls to the very expensive emulated div.\r\n        var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n            rem = this;\r\n        var result = '';\r\n        while (true) {\r\n            var remDiv = rem.div(radixToPower),\r\n                intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n                digits = intval.toString(radix);\r\n            rem = remDiv;\r\n            if (rem.isZero())\r\n                return digits + result;\r\n            else {\r\n                while (digits.length < 6)\r\n                    digits = '0' + digits;\r\n                result = '' + digits + result;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the high 32 bits as a signed integer.\r\n     * @returns {number} Signed high bits\r\n     */\r\n    LongPrototype.getHighBits = function getHighBits() {\r\n        return this.high;\r\n    };\r\n\r\n    /**\r\n     * Gets the high 32 bits as an unsigned integer.\r\n     * @returns {number} Unsigned high bits\r\n     */\r\n    LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n        return this.high >>> 0;\r\n    };\r\n\r\n    /**\r\n     * Gets the low 32 bits as a signed integer.\r\n     * @returns {number} Signed low bits\r\n     */\r\n    LongPrototype.getLowBits = function getLowBits() {\r\n        return this.low;\r\n    };\r\n\r\n    /**\r\n     * Gets the low 32 bits as an unsigned integer.\r\n     * @returns {number} Unsigned low bits\r\n     */\r\n    LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n        return this.low >>> 0;\r\n    };\r\n\r\n    /**\r\n     * Gets the number of bits needed to represent the absolute value of this Long.\r\n     * @returns {number}\r\n     */\r\n    LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n        if (this.isNegative()) // Unsigned Longs are never negative\r\n            return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n        var val = this.high != 0 ? this.high : this.low;\r\n        for (var bit = 31; bit > 0; bit--)\r\n            if ((val & (1 << bit)) != 0)\r\n                break;\r\n        return this.high != 0 ? bit + 33 : bit + 1;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals zero.\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isZero = function isZero() {\r\n        return this.high === 0 && this.low === 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is negative.\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isNegative = function isNegative() {\r\n        return !this.unsigned && this.high < 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is positive.\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isPositive = function isPositive() {\r\n        return this.unsigned || this.high >= 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is odd.\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isOdd = function isOdd() {\r\n        return (this.low & 1) === 1;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is even.\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isEven = function isEven() {\r\n        return (this.low & 1) === 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.equals = function equals(other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n            return false;\r\n        return this.high === other.high && this.low === other.low;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.eq = LongPrototype.equals;\r\n\r\n    /**\r\n     * Tests if this Long's value differs from the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.notEquals = function notEquals(other) {\r\n        return !this.eq(/* validates */ other);\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.neq = LongPrototype.notEquals;\r\n\r\n    /**\r\n     * Tests if this Long's value is less than the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.lessThan = function lessThan(other) {\r\n        return this.comp(/* validates */ other) < 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.lt = LongPrototype.lessThan;\r\n\r\n    /**\r\n     * Tests if this Long's value is less than or equal the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n        return this.comp(/* validates */ other) <= 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.greaterThan = function greaterThan(other) {\r\n        return this.comp(/* validates */ other) > 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than or equal the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n        return this.comp(/* validates */ other) >= 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n    /**\r\n     * Compares this Long's value with the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n     *  if the given one is greater\r\n     */\r\n    LongPrototype.compare = function compare(other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        if (this.eq(other))\r\n            return 0;\r\n        var thisNeg = this.isNegative(),\r\n            otherNeg = other.isNegative();\r\n        if (thisNeg && !otherNeg)\r\n            return -1;\r\n        if (!thisNeg && otherNeg)\r\n            return 1;\r\n        // At this point the sign bits are the same\r\n        if (!this.unsigned)\r\n            return this.sub(other).isNegative() ? -1 : 1;\r\n        // Both are positive if at least one is unsigned\r\n        return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n    };\r\n\r\n    /**\r\n     * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n     *  if the given one is greater\r\n     */\r\n    LongPrototype.comp = LongPrototype.compare;\r\n\r\n    /**\r\n     * Negates this Long's value.\r\n     * @returns {!Long} Negated Long\r\n     */\r\n    LongPrototype.negate = function negate() {\r\n        if (!this.unsigned && this.eq(MIN_VALUE))\r\n            return MIN_VALUE;\r\n        return this.not().add(ONE);\r\n    };\r\n\r\n    /**\r\n     * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n     * @function\r\n     * @returns {!Long} Negated Long\r\n     */\r\n    LongPrototype.neg = LongPrototype.negate;\r\n\r\n    /**\r\n     * Returns the sum of this and the specified Long.\r\n     * @param {!Long|number|string} addend Addend\r\n     * @returns {!Long} Sum\r\n     */\r\n    LongPrototype.add = function add(addend) {\r\n        if (!isLong(addend))\r\n            addend = fromValue(addend);\r\n\r\n        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n        var a48 = this.high >>> 16;\r\n        var a32 = this.high & 0xFFFF;\r\n        var a16 = this.low >>> 16;\r\n        var a00 = this.low & 0xFFFF;\r\n\r\n        var b48 = addend.high >>> 16;\r\n        var b32 = addend.high & 0xFFFF;\r\n        var b16 = addend.low >>> 16;\r\n        var b00 = addend.low & 0xFFFF;\r\n\r\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n        c00 += a00 + b00;\r\n        c16 += c00 >>> 16;\r\n        c00 &= 0xFFFF;\r\n        c16 += a16 + b16;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c32 += a32 + b32;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c48 += a48 + b48;\r\n        c48 &= 0xFFFF;\r\n        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the difference of this and the specified Long.\r\n     * @param {!Long|number|string} subtrahend Subtrahend\r\n     * @returns {!Long} Difference\r\n     */\r\n    LongPrototype.subtract = function subtract(subtrahend) {\r\n        if (!isLong(subtrahend))\r\n            subtrahend = fromValue(subtrahend);\r\n        return this.add(subtrahend.neg());\r\n    };\r\n\r\n    /**\r\n     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n     * @function\r\n     * @param {!Long|number|string} subtrahend Subtrahend\r\n     * @returns {!Long} Difference\r\n     */\r\n    LongPrototype.sub = LongPrototype.subtract;\r\n\r\n    /**\r\n     * Returns the product of this and the specified Long.\r\n     * @param {!Long|number|string} multiplier Multiplier\r\n     * @returns {!Long} Product\r\n     */\r\n    LongPrototype.multiply = function multiply(multiplier) {\r\n        if (this.isZero())\r\n            return ZERO;\r\n        if (!isLong(multiplier))\r\n            multiplier = fromValue(multiplier);\r\n        if (multiplier.isZero())\r\n            return ZERO;\r\n        if (this.eq(MIN_VALUE))\r\n            return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n        if (multiplier.eq(MIN_VALUE))\r\n            return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n        if (this.isNegative()) {\r\n            if (multiplier.isNegative())\r\n                return this.neg().mul(multiplier.neg());\r\n            else\r\n                return this.neg().mul(multiplier).neg();\r\n        } else if (multiplier.isNegative())\r\n            return this.mul(multiplier.neg()).neg();\r\n\r\n        // If both longs are small, use float multiplication\r\n        if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n            return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n        // We can skip products that would overflow.\r\n\r\n        var a48 = this.high >>> 16;\r\n        var a32 = this.high & 0xFFFF;\r\n        var a16 = this.low >>> 16;\r\n        var a00 = this.low & 0xFFFF;\r\n\r\n        var b48 = multiplier.high >>> 16;\r\n        var b32 = multiplier.high & 0xFFFF;\r\n        var b16 = multiplier.low >>> 16;\r\n        var b00 = multiplier.low & 0xFFFF;\r\n\r\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n        c00 += a00 * b00;\r\n        c16 += c00 >>> 16;\r\n        c00 &= 0xFFFF;\r\n        c16 += a16 * b00;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c16 += a00 * b16;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c32 += a32 * b00;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c32 += a16 * b16;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c32 += a00 * b32;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n        c48 &= 0xFFFF;\r\n        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n     * @function\r\n     * @param {!Long|number|string} multiplier Multiplier\r\n     * @returns {!Long} Product\r\n     */\r\n    LongPrototype.mul = LongPrototype.multiply;\r\n\r\n    /**\r\n     * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n     *  unsigned if this Long is unsigned.\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Quotient\r\n     */\r\n    LongPrototype.divide = function divide(divisor) {\r\n        if (!isLong(divisor))\r\n            divisor = fromValue(divisor);\r\n        if (divisor.isZero())\r\n            throw Error('division by zero');\r\n        if (this.isZero())\r\n            return this.unsigned ? UZERO : ZERO;\r\n        var approx, rem, res;\r\n        if (!this.unsigned) {\r\n            // This section is only relevant for signed longs and is derived from the\r\n            // closure library as a whole.\r\n            if (this.eq(MIN_VALUE)) {\r\n                if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                    return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n                else if (divisor.eq(MIN_VALUE))\r\n                    return ONE;\r\n                else {\r\n                    // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                    var halfThis = this.shr(1);\r\n                    approx = halfThis.div(divisor).shl(1);\r\n                    if (approx.eq(ZERO)) {\r\n                        return divisor.isNegative() ? ONE : NEG_ONE;\r\n                    } else {\r\n                        rem = this.sub(divisor.mul(approx));\r\n                        res = approx.add(rem.div(divisor));\r\n                        return res;\r\n                    }\r\n                }\r\n            } else if (divisor.eq(MIN_VALUE))\r\n                return this.unsigned ? UZERO : ZERO;\r\n            if (this.isNegative()) {\r\n                if (divisor.isNegative())\r\n                    return this.neg().div(divisor.neg());\r\n                return this.neg().div(divisor).neg();\r\n            } else if (divisor.isNegative())\r\n                return this.div(divisor.neg()).neg();\r\n            res = ZERO;\r\n        } else {\r\n            // The algorithm below has not been made for unsigned longs. It's therefore\r\n            // required to take special care of the MSB prior to running it.\r\n            if (!divisor.unsigned)\r\n                divisor = divisor.toUnsigned();\r\n            if (divisor.gt(this))\r\n                return UZERO;\r\n            if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n                return UONE;\r\n            res = UZERO;\r\n        }\r\n\r\n        // Repeat the following until the remainder is less than other:  find a\r\n        // floating-point that approximates remainder / other *from below*, add this\r\n        // into the result, and subtract it from the remainder.  It is critical that\r\n        // the approximate value is less than or equal to the real value so that the\r\n        // remainder never becomes negative.\r\n        rem = this;\r\n        while (rem.gte(divisor)) {\r\n            // Approximate the result of division. This may be a little greater or\r\n            // smaller than the actual value.\r\n            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n            // We will tweak the approximate result by changing it in the 48-th digit or\r\n            // the smallest non-fractional digit, whichever is larger.\r\n            var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n                delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n            // Decrease the approximation until it is smaller than the remainder.  Note\r\n            // that if it is too large, the product overflows and is negative.\r\n                approxRes = fromNumber(approx),\r\n                approxRem = approxRes.mul(divisor);\r\n            while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n                approx -= delta;\r\n                approxRes = fromNumber(approx, this.unsigned);\r\n                approxRem = approxRes.mul(divisor);\r\n            }\r\n\r\n            // We know the answer can't be zero... and actually, zero would cause\r\n            // infinite recursion since we would make no progress.\r\n            if (approxRes.isZero())\r\n                approxRes = ONE;\r\n\r\n            res = res.add(approxRes);\r\n            rem = rem.sub(approxRem);\r\n        }\r\n        return res;\r\n    };\r\n\r\n    /**\r\n     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n     * @function\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Quotient\r\n     */\r\n    LongPrototype.div = LongPrototype.divide;\r\n\r\n    /**\r\n     * Returns this Long modulo the specified.\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Remainder\r\n     */\r\n    LongPrototype.modulo = function modulo(divisor) {\r\n        if (!isLong(divisor))\r\n            divisor = fromValue(divisor);\r\n        return this.sub(this.div(divisor).mul(divisor));\r\n    };\r\n\r\n    /**\r\n     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n     * @function\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Remainder\r\n     */\r\n    LongPrototype.mod = LongPrototype.modulo;\r\n\r\n    /**\r\n     * Returns the bitwise NOT of this Long.\r\n     * @returns {!Long}\r\n     */\r\n    LongPrototype.not = function not() {\r\n        return fromBits(~this.low, ~this.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise AND of this Long and the specified.\r\n     * @param {!Long|number|string} other Other Long\r\n     * @returns {!Long}\r\n     */\r\n    LongPrototype.and = function and(other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise OR of this Long and the specified.\r\n     * @param {!Long|number|string} other Other Long\r\n     * @returns {!Long}\r\n     */\r\n    LongPrototype.or = function or(other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise XOR of this Long and the given one.\r\n     * @param {!Long|number|string} other Other Long\r\n     * @returns {!Long}\r\n     */\r\n    LongPrototype.xor = function xor(other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits shifted to the left by the given amount.\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n        if (isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        if ((numBits &= 63) === 0)\r\n            return this;\r\n        else if (numBits < 32)\r\n            return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n        else\r\n            return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n    /**\r\n     * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shiftRight = function shiftRight(numBits) {\r\n        if (isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        if ((numBits &= 63) === 0)\r\n            return this;\r\n        else if (numBits < 32)\r\n            return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n        else\r\n            return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n    /**\r\n     * Returns this Long with bits logically shifted to the right by the given amount.\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n        if (isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        numBits &= 63;\r\n        if (numBits === 0)\r\n            return this;\r\n        else {\r\n            var high = this.high;\r\n            if (numBits < 32) {\r\n                var low = this.low;\r\n                return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n            } else if (numBits === 32)\r\n                return fromBits(high, 0, this.unsigned);\r\n            else\r\n                return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n    /**\r\n     * Converts this Long to signed.\r\n     * @returns {!Long} Signed long\r\n     */\r\n    LongPrototype.toSigned = function toSigned() {\r\n        if (!this.unsigned)\r\n            return this;\r\n        return fromBits(this.low, this.high, false);\r\n    };\r\n\r\n    /**\r\n     * Converts this Long to unsigned.\r\n     * @returns {!Long} Unsigned long\r\n     */\r\n    LongPrototype.toUnsigned = function toUnsigned() {\r\n        if (this.unsigned)\r\n            return this;\r\n        return fromBits(this.low, this.high, true);\r\n    };\r\n\r\n    /**\r\n     * Converts this Long to its byte representation.\r\n     * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n     * @returns {!Array.<number>} Byte representation\r\n     */\r\n    LongPrototype.toBytes = function(le) {\r\n        return le ? this.toBytesLE() : this.toBytesBE();\r\n    }\r\n\r\n    /**\r\n     * Converts this Long to its little endian byte representation.\r\n     * @returns {!Array.<number>} Little endian byte representation\r\n     */\r\n    LongPrototype.toBytesLE = function() {\r\n        var hi = this.high,\r\n            lo = this.low;\r\n        return [\r\n             lo         & 0xff,\r\n            (lo >>>  8) & 0xff,\r\n            (lo >>> 16) & 0xff,\r\n            (lo >>> 24) & 0xff,\r\n             hi         & 0xff,\r\n            (hi >>>  8) & 0xff,\r\n            (hi >>> 16) & 0xff,\r\n            (hi >>> 24) & 0xff\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Converts this Long to its big endian byte representation.\r\n     * @returns {!Array.<number>} Big endian byte representation\r\n     */\r\n    LongPrototype.toBytesBE = function() {\r\n        var hi = this.high,\r\n            lo = this.low;\r\n        return [\r\n            (hi >>> 24) & 0xff,\r\n            (hi >>> 16) & 0xff,\r\n            (hi >>>  8) & 0xff,\r\n             hi         & 0xff,\r\n            (lo >>> 24) & 0xff,\r\n            (lo >>> 16) & 0xff,\r\n            (lo >>>  8) & 0xff,\r\n             lo         & 0xff\r\n        ];\r\n    }\r\n\r\n    return Long;\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}