{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.KeplerGLSchema = exports.reducerSchema = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _window = require(\"global/window\");\nvar _visStateSchema = _interopRequireDefault(require(\"./vis-state-schema\"));\nvar _datasetSchema = _interopRequireDefault(require(\"./dataset-schema\"));\nvar _mapStyleSchema = _interopRequireDefault(require(\"./map-style-schema\"));\nvar _mapStateSchema = _interopRequireDefault(require(\"./map-state-schema\"));\nvar _versions = require(\"./versions\");\nvar _utils = require(\"../utils/utils\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar reducerSchema = {\n  visState: _visStateSchema[\"default\"],\n  mapState: _mapStateSchema[\"default\"],\n  mapStyle: _mapStyleSchema[\"default\"]\n};\n/** @type {typeof import('./schema-manager').KeplerGLSchema} */\n\nexports.reducerSchema = reducerSchema;\nvar KeplerGLSchema = /*#__PURE__*/function () {\n  function KeplerGLSchema() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$reducers = _ref.reducers,\n      reducers = _ref$reducers === void 0 ? reducerSchema : _ref$reducers,\n      _ref$datasets = _ref.datasets,\n      datasets = _ref$datasets === void 0 ? _datasetSchema[\"default\"] : _ref$datasets,\n      _ref$validVersions = _ref.validVersions,\n      validVersions = _ref$validVersions === void 0 ? _versions.VERSIONS : _ref$validVersions,\n      _ref$version = _ref.version,\n      version = _ref$version === void 0 ? _versions.CURRENT_VERSION : _ref$version;\n    (0, _classCallCheck2[\"default\"])(this, KeplerGLSchema);\n    this._validVersions = validVersions;\n    this._version = version;\n    this._reducerSchemas = reducers;\n    this._datasetSchema = datasets;\n    this._datasetLastSaved = null;\n    this._savedDataset = null;\n  }\n  /**\n   * stateToSave = {\n   *   datasets: [\n   *     {\n   *       version: 'v0',\n   *       data: {id, label, color, allData, fields}\n   *     },\n   *     {\n   *       version: 'v0',\n   *       data: {id, label, color, allData, fields}\n   *     }\n   *   ],\n   *   config: {\n   *     version: 'v0',\n   *     config: {}\n   *   },\n   *   info: {\n   *     app: 'kepler.gl',\n   *     create_at: 'Mon May 28 2018 21:04:46 GMT-0700 (PDT)'\n   *   }\n   * }\n   *\n   * Get config and data of current map to save\n   * @param state\n   * @returns app state to save\n   */\n\n  (0, _createClass2[\"default\"])(KeplerGLSchema, [{\n    key: \"save\",\n    value: function save(state) {\n      return {\n        datasets: this.getDatasetToSave(state),\n        config: this.getConfigToSave(state),\n        info: _objectSpread({\n          app: 'kepler.gl',\n          created_at: new Date().toString()\n        }, this.getMapInfo(state))\n      };\n    }\n  }, {\n    key: \"getMapInfo\",\n    value: function getMapInfo(state) {\n      return state.visState.mapInfo;\n    }\n    /**\n     *  Load saved map, argument can be (datasets, config) or ({datasets, config})\n     * @param savedDatasets\n     * @param savedConfig\n     */\n  }, {\n    key: \"load\",\n    value: function load(savedDatasets, savedConfig) {\n      // if pass dataset and config in as a single object\n      if (arguments.length === 1 && (0, _utils.isPlainObject)(arguments[0]) && (Array.isArray(arguments[0].datasets) || (0, _utils.isPlainObject)(arguments[0].config))) {\n        return this.load(arguments[0].datasets, arguments[0].config);\n      }\n      return _objectSpread(_objectSpread({}, Array.isArray(savedDatasets) ? {\n        datasets: this.parseSavedData(savedDatasets)\n      } : {}), savedConfig ? {\n        config: this.parseSavedConfig(savedConfig)\n      } : {});\n    }\n    /**\n     * Get data to save\n     * @param state - app state\n     * @returns - dataset to save\n     */\n  }, {\n    key: \"getDatasetToSave\",\n    value: function getDatasetToSave(state) {\n      var _this = this;\n      var dataChangedSinceLastSave = this.hasDataChanged(state);\n      if (!dataChangedSinceLastSave) {\n        return this._savedDataset;\n      }\n      var visState = state.visState;\n      var datasets = Object.values(visState.datasets).map(function (ds) {\n        return {\n          version: _this._version,\n          data: _this._datasetSchema[_this._version].save(ds)\n        };\n      }); // keep a copy of formatted datasets to save\n\n      this._datasetLastSaved = visState.datasets;\n      this._savedDataset = datasets;\n      return datasets;\n    }\n    /**\n     * Get App config to save\n     * @param {Object} state - app state\n     * @returns {{version: String, config: Object}} - config to save\n     */\n  }, {\n    key: \"getConfigToSave\",\n    value: function getConfigToSave(state) {\n      var _this2 = this;\n      var config = Object.keys(this._reducerSchemas).reduce(function (accu, key) {\n        return _objectSpread(_objectSpread({}, accu), state[key] ? _this2._reducerSchemas[key][_this2._version].save(state[key]) : {});\n      }, {});\n      return {\n        version: this._version,\n        config: config\n      };\n    }\n    /**\n     * Parse saved data\n     * @param datasets\n     * @returns - dataset to pass to addDataToMap\n     */\n  }, {\n    key: \"parseSavedData\",\n    value: function parseSavedData(datasets) {\n      var _this3 = this;\n      return datasets.reduce(function (accu, ds) {\n        var validVersion = _this3.validateVersion(ds.version);\n        if (!validVersion) {\n          return accu;\n        }\n        accu.push(_this3._datasetSchema[validVersion].load(ds.data));\n        return accu;\n      }, []);\n    }\n    /**\n     * Parse saved App config\n     */\n  }, {\n    key: \"parseSavedConfig\",\n    value: function parseSavedConfig(_ref2) {\n      var _this4 = this;\n      var version = _ref2.version,\n        config = _ref2.config;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var validVersion = this.validateVersion(version);\n      if (!validVersion) {\n        return null;\n      }\n      return Object.keys(config).reduce(function (accu, key) {\n        return _objectSpread(_objectSpread({}, accu), key in _this4._reducerSchemas ? _this4._reducerSchemas[key][validVersion].load(config[key]) : {});\n      }, {});\n    }\n    /**\n     * Validate version\n     * @param version\n     * @returns validVersion\n     */\n  }, {\n    key: \"validateVersion\",\n    value: function validateVersion(version) {\n      if (!version) {\n        _window.console.error('There is no version number associated with this saved map');\n        return null;\n      }\n      if (!this._validVersions[version]) {\n        _window.console.error(\"\".concat(version, \" is not a valid version\"));\n        return null;\n      }\n      return version;\n    }\n    /**\n     * Check if data has changed since last save\n     * @param state\n     * @returns - whether data has changed or not\n     */\n  }, {\n    key: \"hasDataChanged\",\n    value: function hasDataChanged(state) {\n      return this._datasetLastSaved !== state.visState.datasets;\n    }\n  }]);\n  return KeplerGLSchema;\n}();\nexports.KeplerGLSchema = KeplerGLSchema;\nvar KeplerGLSchemaManager = new KeplerGLSchema();\nvar _default = KeplerGLSchemaManager;\nexports[\"default\"] = _default;","map":{"version":3,"names":["_window","require","_visStateSchema","_interopRequireDefault","_datasetSchema","_mapStyleSchema","_mapStateSchema","_versions","_utils","reducerSchema","visState","mapState","mapStyle","KeplerGLSchema","_ref","arguments","length","undefined","_ref$reducers","reducers","_ref$datasets","datasets","_ref$validVersions","validVersions","VERSIONS","_ref$version","version","CURRENT_VERSION","_classCallCheck2","_validVersions","_version","_reducerSchemas","_datasetLastSaved","_savedDataset","save","state","getDatasetToSave","config","getConfigToSave","info","_objectSpread","app","created_at","Date","toString","getMapInfo","mapInfo","load","savedDatasets","savedConfig","isPlainObject","Array","isArray","parseSavedData","parseSavedConfig","_this","dataChangedSinceLastSave","hasDataChanged","Object","values","map","ds","data","_this2","keys","reduce","accu","key","_this3","validVersion","validateVersion","push","_ref2","_this4","console","error","concat","KeplerGLSchemaManager"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/kepler.gl/src/schemas/schema-manager.js"],"sourcesContent":["// Copyright (c) 2021 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {console as Console} from 'global/window';\n\nimport visStateSchema from './vis-state-schema';\nimport datasetSchema from './dataset-schema';\nimport mapStyleSchema from './map-style-schema';\nimport mapStateSchema from './map-state-schema';\n\nimport {CURRENT_VERSION, VERSIONS} from './versions';\nimport {isPlainObject} from 'utils/utils';\n\nexport const reducerSchema = {\n  visState: visStateSchema,\n  mapState: mapStateSchema,\n  mapStyle: mapStyleSchema\n};\n\n/** @type {typeof import('./schema-manager').KeplerGLSchema} */\nexport class KeplerGLSchema {\n  constructor({\n    reducers = reducerSchema,\n    datasets = datasetSchema,\n    validVersions = VERSIONS,\n    version = CURRENT_VERSION\n  } = {}) {\n    this._validVersions = validVersions;\n    this._version = version;\n    this._reducerSchemas = reducers;\n    this._datasetSchema = datasets;\n\n    this._datasetLastSaved = null;\n    this._savedDataset = null;\n  }\n\n  /**\n   * stateToSave = {\n   *   datasets: [\n   *     {\n   *       version: 'v0',\n   *       data: {id, label, color, allData, fields}\n   *     },\n   *     {\n   *       version: 'v0',\n   *       data: {id, label, color, allData, fields}\n   *     }\n   *   ],\n   *   config: {\n   *     version: 'v0',\n   *     config: {}\n   *   },\n   *   info: {\n   *     app: 'kepler.gl',\n   *     create_at: 'Mon May 28 2018 21:04:46 GMT-0700 (PDT)'\n   *   }\n   * }\n   *\n   * Get config and data of current map to save\n   * @param state\n   * @returns app state to save\n   */\n  save(state) {\n    return {\n      datasets: this.getDatasetToSave(state),\n      config: this.getConfigToSave(state),\n      info: {\n        app: 'kepler.gl',\n        created_at: new Date().toString(),\n        ...this.getMapInfo(state)\n      }\n    };\n  }\n\n  getMapInfo(state) {\n    return state.visState.mapInfo;\n  }\n  /**\n   *  Load saved map, argument can be (datasets, config) or ({datasets, config})\n   * @param savedDatasets\n   * @param savedConfig\n   */\n  load(savedDatasets, savedConfig) {\n    // if pass dataset and config in as a single object\n    if (\n      arguments.length === 1 &&\n      isPlainObject(arguments[0]) &&\n      (Array.isArray(arguments[0].datasets) || isPlainObject(arguments[0].config))\n    ) {\n      return this.load(arguments[0].datasets, arguments[0].config);\n    }\n\n    return {\n      ...(Array.isArray(savedDatasets) ? {datasets: this.parseSavedData(savedDatasets)} : {}),\n      ...(savedConfig ? {config: this.parseSavedConfig(savedConfig)} : {})\n    };\n  }\n\n  /**\n   * Get data to save\n   * @param state - app state\n   * @returns - dataset to save\n   */\n  getDatasetToSave(state) {\n    const dataChangedSinceLastSave = this.hasDataChanged(state);\n    if (!dataChangedSinceLastSave) {\n      return this._savedDataset;\n    }\n\n    const {visState} = state;\n\n    const datasets = Object.values(visState.datasets).map(ds => ({\n      version: this._version,\n      data: this._datasetSchema[this._version].save(ds)\n    }));\n\n    // keep a copy of formatted datasets to save\n    this._datasetLastSaved = visState.datasets;\n    this._savedDataset = datasets;\n\n    return datasets;\n  }\n\n  /**\n   * Get App config to save\n   * @param {Object} state - app state\n   * @returns {{version: String, config: Object}} - config to save\n   */\n  getConfigToSave(state) {\n    const config = Object.keys(this._reducerSchemas).reduce(\n      (accu, key) => ({\n        ...accu,\n        ...(state[key] ? this._reducerSchemas[key][this._version].save(state[key]) : {})\n      }),\n      {}\n    );\n\n    return {\n      version: this._version,\n      config\n    };\n  }\n\n  /**\n   * Parse saved data\n   * @param datasets\n   * @returns - dataset to pass to addDataToMap\n   */\n  parseSavedData(datasets) {\n    return datasets.reduce((accu, ds) => {\n      const validVersion = this.validateVersion(ds.version);\n      if (!validVersion) {\n        return accu;\n      }\n      accu.push(this._datasetSchema[validVersion].load(ds.data));\n      return accu;\n    }, []);\n  }\n\n  /**\n   * Parse saved App config\n   */\n  parseSavedConfig({version, config}, state = {}) {\n    const validVersion = this.validateVersion(version);\n    if (!validVersion) {\n      return null;\n    }\n\n    return Object.keys(config).reduce(\n      (accu, key) => ({\n        ...accu,\n        ...(key in this._reducerSchemas\n          ? this._reducerSchemas[key][validVersion].load(config[key])\n          : {})\n      }),\n      {}\n    );\n  }\n\n  /**\n   * Validate version\n   * @param version\n   * @returns validVersion\n   */\n  validateVersion(version) {\n    if (!version) {\n      Console.error('There is no version number associated with this saved map');\n      return null;\n    }\n\n    if (!this._validVersions[version]) {\n      Console.error(`${version} is not a valid version`);\n      return null;\n    }\n\n    return version;\n  }\n\n  /**\n   * Check if data has changed since last save\n   * @param state\n   * @returns - whether data has changed or not\n   */\n  hasDataChanged(state) {\n    return this._datasetLastSaved !== state.visState.datasets;\n  }\n}\n\nconst KeplerGLSchemaManager = new KeplerGLSchema();\n\nexport default KeplerGLSchemaManager;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}