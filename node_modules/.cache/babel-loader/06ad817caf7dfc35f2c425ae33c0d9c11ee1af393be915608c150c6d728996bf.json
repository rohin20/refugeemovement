{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport ChildProcess from 'child_process';\nimport assert from '../env-utils/assert';\nimport { getAvailablePort } from './process-utils';\nvar DEFAULT_PROCESS_OPTIONS = {\n  command: null,\n  arguments: [],\n  portArg: null,\n  port: 'auto',\n  basePort: 5000,\n  wait: 2000,\n  nodeSpawnOptions: {\n    maxBuffer: 5000 * 1024\n  },\n  onSuccess: function onSuccess(processProxy) {\n    console.log(\"Started \".concat(processProxy.options.command));\n  }\n};\nvar ChildProcessProxy = function () {\n  function ChildProcessProxy() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$id = _ref.id,\n      id = _ref$id === void 0 ? 'browser-driver' : _ref$id;\n    _classCallCheck(this, ChildProcessProxy);\n    this.id = id;\n    this.childProcess = null;\n    this.port = null;\n  }\n  _createClass(ChildProcessProxy, [{\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n        var options,\n          args,\n          _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n                options = _objectSpread(_objectSpread({}, DEFAULT_PROCESS_OPTIONS), options);\n                assert(options.command && typeof options.command === 'string');\n                this.options = options;\n                args = _toConsumableArray(options.arguments);\n                this.port = options.port;\n                if (!options.portArg) {\n                  _context.next = 12;\n                  break;\n                }\n                if (!(this.port === 'auto')) {\n                  _context.next = 11;\n                  break;\n                }\n                _context.next = 10;\n                return getAvailablePort(options.basePort);\n              case 10:\n                this.port = _context.sent;\n              case 11:\n                args.push(options.portArg, this.port);\n              case 12:\n                _context.next = 14;\n                return new Promise(function (resolve, reject) {\n                  try {\n                    var successTimer = setTimeout(function () {\n                      if (options.onSuccess) {\n                        options.onSuccess(_this);\n                      }\n                      resolve({});\n                    }, options.wait);\n                    console.log(\"Spawning \".concat(options.command, \" \").concat(options.arguments.join(' ')));\n                    _this.childProcess = ChildProcess.spawn(options.command, args, options.spawn);\n                    _this.childProcess.stderr.on('data', function (data) {\n                      console.log(\"Child process wrote to stderr: \\\"\".concat(data, \"\\\".\"));\n                      clearTimeout(successTimer);\n                      reject(new Error(data));\n                    });\n                    _this.childProcess.on('error', function (error) {\n                      console.log(\"Child process errored with \".concat(error));\n                      clearTimeout(successTimer);\n                      reject(error);\n                    });\n                    _this.childProcess.on('close', function (code) {\n                      console.log(\"Child process exited with \".concat(code));\n                      _this.childProcess = null;\n                    });\n                  } catch (error) {\n                    reject(error);\n                  }\n                });\n              case 14:\n                return _context.abrupt(\"return\", _context.sent);\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function start() {\n        return _start.apply(this, arguments);\n      }\n      return start;\n    }()\n  }, {\n    key: \"stop\",\n    value: function () {\n      var _stop = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.childProcess) {\n                  this.childProcess.kill();\n                  this.childProcess = null;\n                }\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function stop() {\n        return _stop.apply(this, arguments);\n      }\n      return stop;\n    }()\n  }, {\n    key: \"exit\",\n    value: function () {\n      var _exit = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3() {\n        var statusCode,\n          _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                statusCode = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : 0;\n                _context3.prev = 1;\n                _context3.next = 4;\n                return this.stop();\n              case 4:\n                process.exit(statusCode);\n                _context3.next = 11;\n                break;\n              case 7:\n                _context3.prev = 7;\n                _context3.t0 = _context3[\"catch\"](1);\n                console.error(_context3.t0.message || _context3.t0);\n                process.exit(1);\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[1, 7]]);\n      }));\n      function exit() {\n        return _exit.apply(this, arguments);\n      }\n      return exit;\n    }()\n  }]);\n  return ChildProcessProxy;\n}();\nexport { ChildProcessProxy as default };","map":{"version":3,"names":["ChildProcess","assert","getAvailablePort","DEFAULT_PROCESS_OPTIONS","command","arguments","portArg","port","basePort","wait","nodeSpawnOptions","maxBuffer","onSuccess","processProxy","console","log","concat","options","ChildProcessProxy","_ref","length","undefined","_ref$id","id","_classCallCheck","childProcess","_objectSpread","args","push","Promise","resolve","reject","successTimer","setTimeout","_this","join","spawn","stderr","on","data","clearTimeout","Error","error","code","kill","statusCode","stop","process","exit","_context3","t0","message"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/json/node_modules/@loaders.gl/loader-utils/src/lib/process-utils/child-process-proxy.js"],"sourcesContent":["// Forked from probe.gl under MIT license, Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n\n/* eslint-disable no-console */\n/* global process, setTimeout, clearTimeout, console */\nimport ChildProcess from 'child_process';\nimport assert from '../env-utils/assert';\nimport {getAvailablePort} from './process-utils';\n\nconst DEFAULT_PROCESS_OPTIONS = {\n  command: null,\n  arguments: [],\n  portArg: null,\n  port: 'auto',\n  basePort: 5000,\n  wait: 2000,\n  nodeSpawnOptions: {maxBuffer: 5000 * 1024},\n  onSuccess: processProxy => {\n    console.log(`Started ${processProxy.options.command}`);\n  }\n};\n\nexport default class ChildProcessProxy {\n  constructor({id = 'browser-driver'} = {}) {\n    this.id = id;\n    this.childProcess = null;\n    this.port = null;\n  }\n\n  async start(options = {}) {\n    options = {...DEFAULT_PROCESS_OPTIONS, ...options};\n    assert(options.command && typeof options.command === 'string');\n    this.options = options;\n\n    const args = [...options.arguments];\n\n    // If portArg is set, we can look up an available port\n    this.port = options.port;\n    if (options.portArg) {\n      if (this.port === 'auto') {\n        this.port = await getAvailablePort(options.basePort);\n      }\n      args.push(options.portArg, this.port);\n    }\n\n    return await new Promise((resolve, reject) => {\n      try {\n        const successTimer = setTimeout(() => {\n          if (options.onSuccess) {\n            options.onSuccess(this);\n          }\n          resolve({});\n        }, options.wait);\n\n        console.log(`Spawning ${options.command} ${options.arguments.join(' ')}`);\n        this.childProcess = ChildProcess.spawn(options.command, args, options.spawn);\n\n        // TODO - add option regarding whether stderr should be treated as data\n        this.childProcess.stderr.on('data', data => {\n          console.log(`Child process wrote to stderr: \"${data}\".`);\n          clearTimeout(successTimer);\n          reject(new Error(data));\n        });\n        this.childProcess.on('error', error => {\n          console.log(`Child process errored with ${error}`);\n          clearTimeout(successTimer);\n          reject(error);\n        });\n        this.childProcess.on('close', code => {\n          console.log(`Child process exited with ${code}`);\n          this.childProcess = null;\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  async stop() {\n    if (this.childProcess) {\n      this.childProcess.kill();\n      this.childProcess = null;\n    }\n  }\n\n  async exit(statusCode = 0) {\n    try {\n      await this.stop();\n      // eslint-disable-next-line no-process-exit\n      process.exit(statusCode);\n    } catch (error) {\n      console.error(error.message || error);\n      // eslint-disable-next-line no-process-exit\n      process.exit(1);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}