{"ast":null,"code":"import _slicedToArray from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _parameters;\nimport { getBounds, boundsContain, packVertices, scaleToAspectRatio, getTextureCoordinates, getTextureParams } from './heatmap-layer-utils';\nimport { Buffer, Texture2D, Transform, getParameters, FEATURES, hasFeatures } from '@luma.gl/core';\nimport { AttributeManager, COORDINATE_SYSTEM, log } from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport AggregationLayer from '../aggregation-layer';\nimport { defaultColorRange, colorRangeToFlatArray } from '../utils/color-utils';\nimport weights_vs from './weights-vs.glsl';\nimport weights_fs from './weights-fs.glsl';\nimport vs_max from './max-vs.glsl';\nimport fs_max from './max-fs.glsl';\nvar RESOLUTION = 2;\nvar TEXTURE_OPTIONS = {\n  mipmaps: false,\n  parameters: (_parameters = {}, _defineProperty(_parameters, 10240, 9729), _defineProperty(_parameters, 10241, 9729), _defineProperty(_parameters, 10242, 33071), _defineProperty(_parameters, 10243, 33071), _parameters),\n  dataFormat: 6408\n};\nvar DEFAULT_COLOR_DOMAIN = [0, 0];\nvar AGGREGATION_MODE = {\n  SUM: 0,\n  MEAN: 1\n};\nvar defaultProps = {\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  intensity: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusPixels: {\n    type: 'number',\n    min: 1,\n    max: 100,\n    value: 50\n  },\n  colorRange: defaultColorRange,\n  threshold: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 0.05\n  },\n  colorDomain: {\n    type: 'array',\n    value: null,\n    optional: true\n  },\n  aggregation: 'SUM',\n  weightsTextureSize: {\n    type: 'number',\n    min: 128,\n    max: 2048,\n    value: 2048\n  },\n  debounceTimeout: {\n    type: 'number',\n    min: 0,\n    max: 1000,\n    value: 500\n  }\n};\nvar REQUIRED_FEATURES = [FEATURES.BLEND_EQUATION_MINMAX, FEATURES.TEXTURE_FLOAT];\nvar DIMENSIONS = {\n  data: {\n    props: ['radiusPixels']\n  }\n};\nvar HeatmapLayer = /*#__PURE__*/function (_AggregationLayer) {\n  _inherits(HeatmapLayer, _AggregationLayer);\n  var _super = _createSuper(HeatmapLayer);\n  function HeatmapLayer() {\n    _classCallCheck(this, HeatmapLayer);\n    return _super.apply(this, arguments);\n  }\n  _createClass(HeatmapLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var gl = this.context.gl;\n      if (!hasFeatures(gl, REQUIRED_FEATURES)) {\n        this.setState({\n          supported: false\n        });\n        log.error(\"HeatmapLayer: \".concat(this.id, \" is not supported on this browser\"))();\n        return;\n      }\n      _get(_getPrototypeOf(HeatmapLayer.prototype), \"initializeState\", this).call(this, DIMENSIONS);\n      this.setState({\n        supported: true,\n        colorDomain: DEFAULT_COLOR_DOMAIN\n      });\n      this._setupTextureParams();\n      this._setupAttributes();\n      this._setupResources();\n    }\n  }, {\n    key: \"shouldUpdateState\",\n    value: function shouldUpdateState(_ref) {\n      var changeFlags = _ref.changeFlags;\n      return changeFlags.somethingChanged;\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      if (!this.state.supported) {\n        return;\n      }\n      _get(_getPrototypeOf(HeatmapLayer.prototype), \"updateState\", this).call(this, opts);\n      this._updateHeatmapState(opts);\n    }\n  }, {\n    key: \"_updateHeatmapState\",\n    value: function _updateHeatmapState(opts) {\n      var props = opts.props,\n        oldProps = opts.oldProps;\n      var changeFlags = this._getChangeFlags(opts);\n      if (changeFlags.dataChanged || changeFlags.viewportChanged) {\n        changeFlags.boundsChanged = this._updateBounds(changeFlags.dataChanged);\n        this._updateTextureRenderingBounds();\n      }\n      if (changeFlags.dataChanged || changeFlags.boundsChanged) {\n        clearTimeout(this.state.updateTimer);\n        this.setState({\n          isWeightMapDirty: true\n        });\n      } else if (changeFlags.viewportZoomChanged) {\n        this._debouncedUpdateWeightmap();\n      }\n      if (props.colorRange !== oldProps.colorRange) {\n        this._updateColorTexture(opts);\n      }\n      if (this.state.isWeightMapDirty) {\n        this._updateWeightmap();\n      }\n      this.setState({\n        zoom: opts.context.viewport.zoom\n      });\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      if (!this.state.supported) {\n        return [];\n      }\n      var _this$state = this.state,\n        weightsTexture = _this$state.weightsTexture,\n        triPositionBuffer = _this$state.triPositionBuffer,\n        triTexCoordBuffer = _this$state.triTexCoordBuffer,\n        maxWeightsTexture = _this$state.maxWeightsTexture,\n        colorTexture = _this$state.colorTexture,\n        colorDomain = _this$state.colorDomain;\n      var _this$props = this.props,\n        updateTriggers = _this$props.updateTriggers,\n        intensity = _this$props.intensity,\n        threshold = _this$props.threshold,\n        aggregation = _this$props.aggregation;\n      var TriangleLayerClass = this.getSubLayerClass('triangle', TriangleLayer);\n      return new TriangleLayerClass(this.getSubLayerProps({\n        id: 'triangle-layer',\n        updateTriggers: updateTriggers\n      }), {\n        coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n        data: {\n          attributes: {\n            positions: triPositionBuffer,\n            texCoords: triTexCoordBuffer\n          }\n        },\n        vertexCount: 4,\n        maxTexture: maxWeightsTexture,\n        colorTexture: colorTexture,\n        aggregationMode: AGGREGATION_MODE[aggregation] || 0,\n        texture: weightsTexture,\n        intensity: intensity,\n        threshold: threshold,\n        colorDomain: colorDomain\n      });\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      _get(_getPrototypeOf(HeatmapLayer.prototype), \"finalizeState\", this).call(this);\n      var _this$state2 = this.state,\n        weightsTransform = _this$state2.weightsTransform,\n        weightsTexture = _this$state2.weightsTexture,\n        maxWeightTransform = _this$state2.maxWeightTransform,\n        maxWeightsTexture = _this$state2.maxWeightsTexture,\n        triPositionBuffer = _this$state2.triPositionBuffer,\n        triTexCoordBuffer = _this$state2.triTexCoordBuffer,\n        colorTexture = _this$state2.colorTexture,\n        updateTimer = _this$state2.updateTimer;\n      weightsTransform === null || weightsTransform === void 0 ? void 0 : weightsTransform.delete();\n      weightsTexture === null || weightsTexture === void 0 ? void 0 : weightsTexture.delete();\n      maxWeightTransform === null || maxWeightTransform === void 0 ? void 0 : maxWeightTransform.delete();\n      maxWeightsTexture === null || maxWeightsTexture === void 0 ? void 0 : maxWeightsTexture.delete();\n      triPositionBuffer === null || triPositionBuffer === void 0 ? void 0 : triPositionBuffer.delete();\n      triTexCoordBuffer === null || triTexCoordBuffer === void 0 ? void 0 : triTexCoordBuffer.delete();\n      colorTexture === null || colorTexture === void 0 ? void 0 : colorTexture.delete();\n      updateTimer && clearTimeout(updateTimer);\n    }\n  }, {\n    key: \"_getAttributeManager\",\n    value: function _getAttributeManager() {\n      return new AttributeManager(this.context.gl, {\n        id: this.props.id,\n        stats: this.context.stats\n      });\n    }\n  }, {\n    key: \"_getChangeFlags\",\n    value: function _getChangeFlags(opts) {\n      var changeFlags = {};\n      var dimensions = this.state.dimensions;\n      changeFlags.dataChanged = this.isAttributeChanged() || this.isAggregationDirty(opts, {\n        compareAll: true,\n        dimension: dimensions.data\n      });\n      changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n      var zoom = this.state.zoom;\n      if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n        changeFlags.viewportZoomChanged = true;\n      }\n      return changeFlags;\n    }\n  }, {\n    key: \"_createTextures\",\n    value: function _createTextures() {\n      var gl = this.context.gl;\n      var _this$state3 = this.state,\n        textureSize = _this$state3.textureSize,\n        format = _this$state3.format,\n        type = _this$state3.type;\n      this.setState({\n        weightsTexture: new Texture2D(gl, _objectSpread({\n          width: textureSize,\n          height: textureSize,\n          format: format,\n          type: type\n        }, TEXTURE_OPTIONS)),\n        maxWeightsTexture: new Texture2D(gl, _objectSpread({\n          format: format,\n          type: type\n        }, TEXTURE_OPTIONS))\n      });\n    }\n  }, {\n    key: \"_setupAttributes\",\n    value: function _setupAttributes() {\n      var attributeManager = this.getAttributeManager();\n      attributeManager.add({\n        positions: {\n          size: 3,\n          type: 5130,\n          accessor: 'getPosition'\n        },\n        weights: {\n          size: 1,\n          accessor: 'getWeight'\n        }\n      });\n      this.setState({\n        positionAttributeName: 'positions'\n      });\n    }\n  }, {\n    key: \"_setupTextureParams\",\n    value: function _setupTextureParams() {\n      var gl = this.context.gl;\n      var weightsTextureSize = this.props.weightsTextureSize;\n      var textureSize = Math.min(weightsTextureSize, getParameters(gl, 3379));\n      var floatTargetSupport = hasFeatures(gl, FEATURES.COLOR_ATTACHMENT_RGBA32F);\n      var _getTextureParams = getTextureParams({\n          gl: gl,\n          floatTargetSupport: floatTargetSupport\n        }),\n        format = _getTextureParams.format,\n        type = _getTextureParams.type;\n      var weightsScale = floatTargetSupport ? 1 : 1 / 255;\n      this.setState({\n        textureSize: textureSize,\n        format: format,\n        type: type,\n        weightsScale: weightsScale\n      });\n      if (!floatTargetSupport) {\n        log.warn(\"HeatmapLayer: \".concat(this.id, \" rendering to float texture not supported, fallingback to low precession format\"))();\n      }\n    }\n  }, {\n    key: \"getShaders\",\n    value: function getShaders(type) {\n      return _get(_getPrototypeOf(HeatmapLayer.prototype), \"getShaders\", this).call(this, type === 'max-weights-transform' ? {\n        vs: vs_max,\n        _fs: fs_max\n      } : {\n        vs: weights_vs,\n        _fs: weights_fs\n      });\n    }\n  }, {\n    key: \"_createWeightsTransform\",\n    value: function _createWeightsTransform() {\n      var shaders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _weightsTransform;\n      var gl = this.context.gl;\n      var weightsTransform = this.state.weightsTransform;\n      var weightsTexture = this.state.weightsTexture;\n      (_weightsTransform = weightsTransform) === null || _weightsTransform === void 0 ? void 0 : _weightsTransform.delete();\n      weightsTransform = new Transform(gl, _objectSpread({\n        id: \"\".concat(this.id, \"-weights-transform\"),\n        elementCount: 1,\n        _targetTexture: weightsTexture,\n        _targetTextureVarying: 'weightsTexture'\n      }, shaders));\n      this.setState({\n        weightsTransform: weightsTransform\n      });\n    }\n  }, {\n    key: \"_setupResources\",\n    value: function _setupResources() {\n      var gl = this.context.gl;\n      this._createTextures();\n      var _this$state4 = this.state,\n        textureSize = _this$state4.textureSize,\n        weightsTexture = _this$state4.weightsTexture,\n        maxWeightsTexture = _this$state4.maxWeightsTexture;\n      var weightsTransformShaders = this.getShaders('weights-transform');\n      this._createWeightsTransform(weightsTransformShaders);\n      var maxWeightsTransformShaders = this.getShaders('max-weights-transform');\n      var maxWeightTransform = new Transform(gl, _objectSpread(_objectSpread({\n        id: \"\".concat(this.id, \"-max-weights-transform\"),\n        _sourceTextures: {\n          inTexture: weightsTexture\n        },\n        _targetTexture: maxWeightsTexture,\n        _targetTextureVarying: 'outTexture'\n      }, maxWeightsTransformShaders), {}, {\n        elementCount: textureSize * textureSize\n      }));\n      this.setState({\n        weightsTexture: weightsTexture,\n        maxWeightsTexture: maxWeightsTexture,\n        maxWeightTransform: maxWeightTransform,\n        zoom: null,\n        triPositionBuffer: new Buffer(gl, {\n          byteLength: 48,\n          accessor: {\n            size: 3\n          }\n        }),\n        triTexCoordBuffer: new Buffer(gl, {\n          byteLength: 48,\n          accessor: {\n            size: 2\n          }\n        })\n      });\n    }\n  }, {\n    key: \"updateShaders\",\n    value: function updateShaders(shaderOptions) {\n      this._createWeightsTransform(shaderOptions);\n    }\n  }, {\n    key: \"_updateMaxWeightValue\",\n    value: function _updateMaxWeightValue() {\n      var maxWeightTransform = this.state.maxWeightTransform;\n      maxWeightTransform.run({\n        parameters: {\n          blend: true,\n          depthTest: false,\n          blendFunc: [1, 1],\n          blendEquation: 32776\n        }\n      });\n    }\n  }, {\n    key: \"_updateBounds\",\n    value: function _updateBounds() {\n      var forceUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var viewport = this.context.viewport;\n      var viewportCorners = [viewport.unproject([0, 0]), viewport.unproject([viewport.width, 0]), viewport.unproject([viewport.width, viewport.height]), viewport.unproject([0, viewport.height])].map(function (p) {\n        return p.map(Math.fround);\n      });\n      var visibleWorldBounds = getBounds(viewportCorners);\n      var newState = {\n        visibleWorldBounds: visibleWorldBounds,\n        viewportCorners: viewportCorners\n      };\n      var boundsChanged = false;\n      if (forceUpdate || !this.state.worldBounds || !boundsContain(this.state.worldBounds, visibleWorldBounds)) {\n        var scaledCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n        var worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n        if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n          worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n          worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n          worldBounds[0] = Math.max(worldBounds[0], -360);\n          worldBounds[2] = Math.min(worldBounds[2], 360);\n        }\n        var normalizedCommonBounds = this._worldToCommonBounds(worldBounds);\n        newState.worldBounds = worldBounds;\n        newState.normalizedCommonBounds = normalizedCommonBounds;\n        boundsChanged = true;\n      }\n      this.setState(newState);\n      return boundsChanged;\n    }\n  }, {\n    key: \"_updateTextureRenderingBounds\",\n    value: function _updateTextureRenderingBounds() {\n      var _this$state5 = this.state,\n        triPositionBuffer = _this$state5.triPositionBuffer,\n        triTexCoordBuffer = _this$state5.triTexCoordBuffer,\n        normalizedCommonBounds = _this$state5.normalizedCommonBounds,\n        viewportCorners = _this$state5.viewportCorners;\n      var viewport = this.context.viewport;\n      triPositionBuffer.subData(packVertices(viewportCorners, 3));\n      var textureBounds = viewportCorners.map(function (p) {\n        return getTextureCoordinates(viewport.projectPosition(p), normalizedCommonBounds);\n      });\n      triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n    }\n  }, {\n    key: \"_updateColorTexture\",\n    value: function _updateColorTexture(opts) {\n      var colorRange = opts.props.colorRange;\n      var colorTexture = this.state.colorTexture;\n      var colors = colorRangeToFlatArray(colorRange, false, Uint8Array);\n      if (colorTexture) {\n        colorTexture.setImageData({\n          data: colors,\n          width: colorRange.length\n        });\n      } else {\n        colorTexture = new Texture2D(this.context.gl, _objectSpread({\n          data: colors,\n          width: colorRange.length,\n          height: 1\n        }, TEXTURE_OPTIONS));\n      }\n      this.setState({\n        colorTexture: colorTexture\n      });\n    }\n  }, {\n    key: \"_updateWeightmap\",\n    value: function _updateWeightmap() {\n      var _weightsTexture$setPa;\n      var _this$props2 = this.props,\n        radiusPixels = _this$props2.radiusPixels,\n        colorDomain = _this$props2.colorDomain,\n        aggregation = _this$props2.aggregation;\n      var _this$state6 = this.state,\n        weightsTransform = _this$state6.weightsTransform,\n        worldBounds = _this$state6.worldBounds,\n        textureSize = _this$state6.textureSize,\n        weightsTexture = _this$state6.weightsTexture,\n        weightsScale = _this$state6.weightsScale;\n      this.state.isWeightMapDirty = false;\n      var commonBounds = this._worldToCommonBounds(worldBounds, {\n        useLayerCoordinateSystem: true\n      });\n      if (colorDomain && aggregation === 'SUM') {\n        var viewport = this.context.viewport;\n        var metersPerPixel = viewport.distanceScales.metersPerUnit[2] * (commonBounds[2] - commonBounds[0]) / textureSize;\n        this.state.colorDomain = colorDomain.map(function (x) {\n          return x * metersPerPixel * weightsScale;\n        });\n      } else {\n        this.state.colorDomain = colorDomain || DEFAULT_COLOR_DOMAIN;\n      }\n      var uniforms = {\n        radiusPixels: radiusPixels,\n        commonBounds: commonBounds,\n        textureWidth: textureSize,\n        weightsScale: weightsScale\n      };\n      weightsTransform.update({\n        elementCount: this.getNumInstances()\n      });\n      weightsTransform.run({\n        uniforms: uniforms,\n        parameters: {\n          blend: true,\n          depthTest: false,\n          blendFunc: [1, 1],\n          blendEquation: 32774\n        },\n        clearRenderTarget: true,\n        attributes: this.getAttributes(),\n        moduleSettings: this.getModuleSettings()\n      });\n      this._updateMaxWeightValue();\n      weightsTexture.setParameters((_weightsTexture$setPa = {}, _defineProperty(_weightsTexture$setPa, 10240, 9729), _defineProperty(_weightsTexture$setPa, 10241, 9729), _weightsTexture$setPa));\n    }\n  }, {\n    key: \"_debouncedUpdateWeightmap\",\n    value: function _debouncedUpdateWeightmap() {\n      var fromTimer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var updateTimer = this.state.updateTimer;\n      var debounceTimeout = this.props.debounceTimeout;\n      if (fromTimer) {\n        updateTimer = null;\n        this._updateBounds(true);\n        this._updateTextureRenderingBounds();\n        this.setState({\n          isWeightMapDirty: true\n        });\n      } else {\n        this.setState({\n          isWeightMapDirty: false\n        });\n        clearTimeout(updateTimer);\n        updateTimer = setTimeout(this._debouncedUpdateWeightmap.bind(this, true), debounceTimeout);\n      }\n      this.setState({\n        updateTimer: updateTimer\n      });\n    }\n  }, {\n    key: \"_worldToCommonBounds\",\n    value: function _worldToCommonBounds(worldBounds) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _opts$useLayerCoordin = opts.useLayerCoordinateSystem,\n        useLayerCoordinateSystem = _opts$useLayerCoordin === void 0 ? false : _opts$useLayerCoordin;\n      var _worldBounds = _slicedToArray(worldBounds, 4),\n        minLong = _worldBounds[0],\n        minLat = _worldBounds[1],\n        maxLong = _worldBounds[2],\n        maxLat = _worldBounds[3];\n      var viewport = this.context.viewport;\n      var textureSize = this.state.textureSize;\n      var coordinateSystem = this.props.coordinateSystem;\n      var offsetMode = useLayerCoordinateSystem && (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS || coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS);\n      var offsetOriginCommon = offsetMode ? viewport.projectPosition(this.props.coordinateOrigin) : [0, 0];\n      var size = textureSize * RESOLUTION / viewport.scale;\n      var bottomLeftCommon;\n      var topRightCommon;\n      if (useLayerCoordinateSystem && !offsetMode) {\n        bottomLeftCommon = this.projectPosition([minLong, minLat, 0]);\n        topRightCommon = this.projectPosition([maxLong, maxLat, 0]);\n      } else {\n        bottomLeftCommon = viewport.projectPosition([minLong, minLat, 0]);\n        topRightCommon = viewport.projectPosition([maxLong, maxLat, 0]);\n      }\n      return scaleToAspectRatio([bottomLeftCommon[0] - offsetOriginCommon[0], bottomLeftCommon[1] - offsetOriginCommon[1], topRightCommon[0] - offsetOriginCommon[0], topRightCommon[1] - offsetOriginCommon[1]], size, size);\n    }\n  }, {\n    key: \"_commonToWorldBounds\",\n    value: function _commonToWorldBounds(commonBounds) {\n      var _commonBounds = _slicedToArray(commonBounds, 4),\n        xMin = _commonBounds[0],\n        yMin = _commonBounds[1],\n        xMax = _commonBounds[2],\n        yMax = _commonBounds[3];\n      var viewport = this.context.viewport;\n      var bottomLeftWorld = viewport.unprojectPosition([xMin, yMin]);\n      var topRightWorld = viewport.unprojectPosition([xMax, yMax]);\n      return bottomLeftWorld.slice(0, 2).concat(topRightWorld.slice(0, 2));\n    }\n  }]);\n  return HeatmapLayer;\n}(AggregationLayer);\nexport { HeatmapLayer as default };\nHeatmapLayer.layerName = 'HeatmapLayer';\nHeatmapLayer.defaultProps = defaultProps;","map":{"version":3,"names":["getBounds","boundsContain","packVertices","scaleToAspectRatio","getTextureCoordinates","getTextureParams","Buffer","Texture2D","Transform","getParameters","FEATURES","hasFeatures","AttributeManager","COORDINATE_SYSTEM","log","TriangleLayer","AggregationLayer","defaultColorRange","colorRangeToFlatArray","weights_vs","weights_fs","vs_max","fs_max","RESOLUTION","TEXTURE_OPTIONS","mipmaps","parameters","_parameters","_defineProperty","dataFormat","DEFAULT_COLOR_DOMAIN","AGGREGATION_MODE","SUM","MEAN","defaultProps","getPosition","type","value","x","position","getWeight","intensity","min","radiusPixels","max","colorRange","threshold","colorDomain","optional","aggregation","weightsTextureSize","debounceTimeout","REQUIRED_FEATURES","BLEND_EQUATION_MINMAX","TEXTURE_FLOAT","DIMENSIONS","data","props","HeatmapLayer","_AggregationLayer","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","initializeState","gl","context","setState","supported","error","concat","id","_get","_getPrototypeOf","prototype","call","_setupTextureParams","_setupAttributes","_setupResources","shouldUpdateState","_ref","changeFlags","somethingChanged","updateState","opts","state","_updateHeatmapState","oldProps","_getChangeFlags","dataChanged","viewportChanged","boundsChanged","_updateBounds","_updateTextureRenderingBounds","clearTimeout","updateTimer","isWeightMapDirty","viewportZoomChanged","_debouncedUpdateWeightmap","_updateColorTexture","_updateWeightmap","zoom","viewport","renderLayers","_this$state","weightsTexture","triPositionBuffer","triTexCoordBuffer","maxWeightsTexture","colorTexture","_this$props","updateTriggers","TriangleLayerClass","getSubLayerClass","getSubLayerProps","coordinateSystem","DEFAULT","attributes","positions","texCoords","vertexCount","maxTexture","aggregationMode","texture","finalizeState","_this$state2","weightsTransform","maxWeightTransform","delete","_getAttributeManager","stats","dimensions","isAttributeChanged","isAggregationDirty","compareAll","dimension","_createTextures","_this$state3","textureSize","format","_objectSpread","width","height","attributeManager","getAttributeManager","add","size","accessor","weights","positionAttributeName","Math","floatTargetSupport","COLOR_ATTACHMENT_RGBA32F","_getTextureParams","weightsScale","warn","getShaders","vs","_fs","_createWeightsTransform","shaders","length","undefined","_weightsTransform","elementCount","_targetTexture","_targetTextureVarying","_this$state4","weightsTransformShaders","maxWeightsTransformShaders","_sourceTextures","inTexture","byteLength","updateShaders","shaderOptions","_updateMaxWeightValue","run","blend","depthTest","blendFunc","blendEquation","forceUpdate","viewportCorners","unproject","map","p","fround","visibleWorldBounds","newState","worldBounds","scaledCommonBounds","_worldToCommonBounds","_commonToWorldBounds","LNGLAT","normalizedCommonBounds","_this$state5","subData","textureBounds","projectPosition","colors","Uint8Array","setImageData","_weightsTexture$setPa","_this$props2","_this$state6","commonBounds","useLayerCoordinateSystem","metersPerPixel","distanceScales","metersPerUnit","uniforms","textureWidth","update","getNumInstances","clearRenderTarget","getAttributes","moduleSettings","getModuleSettings","setParameters","fromTimer","setTimeout","bind","_opts$useLayerCoordin","_worldBounds","_slicedToArray","minLong","minLat","maxLong","maxLat","offsetMode","LNGLAT_OFFSETS","METER_OFFSETS","offsetOriginCommon","coordinateOrigin","scale","bottomLeftCommon","topRightCommon","_commonBounds","xMin","yMin","xMax","yMax","bottomLeftWorld","unprojectPosition","topRightWorld","slice","default","layerName"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/aggregation-layers/src/heatmap-layer/heatmap-layer.js"],"sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global setTimeout clearTimeout */\nimport GL from '@luma.gl/constants';\nimport {\n  getBounds,\n  boundsContain,\n  packVertices,\n  scaleToAspectRatio,\n  getTextureCoordinates,\n  getTextureParams\n} from './heatmap-layer-utils';\nimport {Buffer, Texture2D, Transform, getParameters, FEATURES, hasFeatures} from '@luma.gl/core';\nimport {AttributeManager, COORDINATE_SYSTEM, log} from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport AggregationLayer from '../aggregation-layer';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport weights_vs from './weights-vs.glsl';\nimport weights_fs from './weights-fs.glsl';\nimport vs_max from './max-vs.glsl';\nimport fs_max from './max-fs.glsl';\n\nconst RESOLUTION = 2; // (number of common space pixels) / (number texels)\nconst TEXTURE_OPTIONS = {\n  mipmaps: false,\n  parameters: {\n    [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n    [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n  },\n  dataFormat: GL.RGBA\n};\nconst DEFAULT_COLOR_DOMAIN = [0, 0];\nconst AGGREGATION_MODE = {\n  SUM: 0,\n  MEAN: 1\n};\n\nconst defaultProps = {\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: 1},\n  intensity: {type: 'number', min: 0, value: 1},\n  radiusPixels: {type: 'number', min: 1, max: 100, value: 50},\n  colorRange: defaultColorRange,\n  threshold: {type: 'number', min: 0, max: 1, value: 0.05},\n  colorDomain: {type: 'array', value: null, optional: true},\n  // 'SUM' or 'MEAN'\n  aggregation: 'SUM',\n  weightsTextureSize: {type: 'number', min: 128, max: 2048, value: 2048},\n  debounceTimeout: {type: 'number', min: 0, max: 1000, value: 500}\n};\n\nconst REQUIRED_FEATURES = [\n  FEATURES.BLEND_EQUATION_MINMAX, // max weight calculation\n  FEATURES.TEXTURE_FLOAT // weight-map as texture\n  // FEATURES.FLOAT_BLEND, // implictly supported when TEXTURE_FLOAT is supported\n];\n\nconst DIMENSIONS = {\n  data: {\n    props: ['radiusPixels']\n  }\n};\n\nexport default class HeatmapLayer extends AggregationLayer {\n  initializeState() {\n    const {gl} = this.context;\n    if (!hasFeatures(gl, REQUIRED_FEATURES)) {\n      this.setState({supported: false});\n      log.error(`HeatmapLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n    super.initializeState(DIMENSIONS);\n    this.setState({supported: true, colorDomain: DEFAULT_COLOR_DOMAIN});\n    this._setupTextureParams();\n    this._setupAttributes();\n    this._setupResources();\n  }\n\n  shouldUpdateState({changeFlags}) {\n    // Need to be updated when viewport changes\n    return changeFlags.somethingChanged;\n  }\n\n  /* eslint-disable max-statements,complexity */\n  updateState(opts) {\n    if (!this.state.supported) {\n      return;\n    }\n    super.updateState(opts);\n    this._updateHeatmapState(opts);\n  }\n\n  _updateHeatmapState(opts) {\n    const {props, oldProps} = opts;\n    const changeFlags = this._getChangeFlags(opts);\n\n    if (changeFlags.dataChanged || changeFlags.viewportChanged) {\n      // if data is changed, do not debounce and immediately update the weight map\n      changeFlags.boundsChanged = this._updateBounds(changeFlags.dataChanged);\n      this._updateTextureRenderingBounds();\n    }\n\n    if (changeFlags.dataChanged || changeFlags.boundsChanged) {\n      // Update weight map immediately\n      clearTimeout(this.state.updateTimer);\n      this.setState({isWeightMapDirty: true});\n    } else if (changeFlags.viewportZoomChanged) {\n      // Update weight map when zoom stops\n      this._debouncedUpdateWeightmap();\n    }\n\n    if (props.colorRange !== oldProps.colorRange) {\n      this._updateColorTexture(opts);\n    }\n\n    if (this.state.isWeightMapDirty) {\n      this._updateWeightmap();\n    }\n\n    this.setState({zoom: opts.context.viewport.zoom});\n  }\n\n  renderLayers() {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {\n      weightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      maxWeightsTexture,\n      colorTexture,\n      colorDomain\n    } = this.state;\n    const {updateTriggers, intensity, threshold, aggregation} = this.props;\n\n    const TriangleLayerClass = this.getSubLayerClass('triangle', TriangleLayer);\n\n    return new TriangleLayerClass(\n      this.getSubLayerProps({\n        id: 'triangle-layer',\n        updateTriggers\n      }),\n      {\n        // position buffer is filled with world coordinates generated from viewport.unproject\n        // i.e. LNGLAT if geospatial, CARTESIAN otherwise\n        coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n        data: {\n          attributes: {\n            positions: triPositionBuffer,\n            texCoords: triTexCoordBuffer\n          }\n        },\n        vertexCount: 4,\n        maxTexture: maxWeightsTexture,\n        colorTexture,\n        aggregationMode: AGGREGATION_MODE[aggregation] || 0,\n        texture: weightsTexture,\n        intensity,\n        threshold,\n        colorDomain\n      }\n    );\n  }\n\n  finalizeState() {\n    super.finalizeState();\n    const {\n      weightsTransform,\n      weightsTexture,\n      maxWeightTransform,\n      maxWeightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      colorTexture,\n      updateTimer\n    } = this.state;\n    weightsTransform?.delete();\n    weightsTexture?.delete();\n    maxWeightTransform?.delete();\n    maxWeightsTexture?.delete();\n    triPositionBuffer?.delete();\n    triTexCoordBuffer?.delete();\n    colorTexture?.delete();\n    updateTimer && clearTimeout(updateTimer);\n  }\n\n  // PRIVATE\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n  _getChangeFlags(opts) {\n    const changeFlags = {};\n    const {dimensions} = this.state;\n    changeFlags.dataChanged =\n      this.isAttributeChanged() || // if any attribute is changed\n      this.isAggregationDirty(opts, {\n        compareAll: true,\n        dimension: dimensions.data\n      });\n    changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n\n    const {zoom} = this.state;\n    if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n      changeFlags.viewportZoomChanged = true;\n    }\n\n    return changeFlags;\n  }\n\n  _createTextures() {\n    const {gl} = this.context;\n    const {textureSize, format, type} = this.state;\n\n    this.setState({\n      weightsTexture: new Texture2D(gl, {\n        width: textureSize,\n        height: textureSize,\n        format,\n        type,\n        ...TEXTURE_OPTIONS\n      }),\n      maxWeightsTexture: new Texture2D(gl, {format, type, ...TEXTURE_OPTIONS}) // 1 X 1 texture,\n    });\n  }\n\n  _setupAttributes() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {size: 3, type: GL.DOUBLE, accessor: 'getPosition'},\n      weights: {size: 1, accessor: 'getWeight'}\n    });\n    this.setState({positionAttributeName: 'positions'});\n  }\n\n  _setupTextureParams() {\n    const {gl} = this.context;\n    const {weightsTextureSize} = this.props;\n\n    const textureSize = Math.min(weightsTextureSize, getParameters(gl, gl.MAX_TEXTURE_SIZE));\n    const floatTargetSupport = hasFeatures(gl, FEATURES.COLOR_ATTACHMENT_RGBA32F);\n    const {format, type} = getTextureParams({gl, floatTargetSupport});\n    const weightsScale = floatTargetSupport ? 1 : 1 / 255;\n    this.setState({textureSize, format, type, weightsScale});\n    if (!floatTargetSupport) {\n      log.warn(\n        `HeatmapLayer: ${\n          this.id\n        } rendering to float texture not supported, fallingback to low precession format`\n      )();\n    }\n  }\n\n  getShaders(type) {\n    return super.getShaders(\n      type === 'max-weights-transform'\n        ? {\n            vs: vs_max,\n            _fs: fs_max\n          }\n        : {\n            vs: weights_vs,\n            _fs: weights_fs\n          }\n    );\n  }\n\n  _createWeightsTransform(shaders = {}) {\n    const {gl} = this.context;\n    let {weightsTransform} = this.state;\n    const {weightsTexture} = this.state;\n    weightsTransform?.delete();\n\n    weightsTransform = new Transform(gl, {\n      id: `${this.id}-weights-transform`,\n      elementCount: 1,\n      _targetTexture: weightsTexture,\n      _targetTextureVarying: 'weightsTexture',\n      ...shaders\n    });\n    this.setState({weightsTransform});\n  }\n\n  _setupResources() {\n    const {gl} = this.context;\n    this._createTextures();\n    const {textureSize, weightsTexture, maxWeightsTexture} = this.state;\n\n    const weightsTransformShaders = this.getShaders('weights-transform');\n    this._createWeightsTransform(weightsTransformShaders);\n\n    const maxWeightsTransformShaders = this.getShaders('max-weights-transform');\n    const maxWeightTransform = new Transform(gl, {\n      id: `${this.id}-max-weights-transform`,\n      _sourceTextures: {\n        inTexture: weightsTexture\n      },\n      _targetTexture: maxWeightsTexture,\n      _targetTextureVarying: 'outTexture',\n      ...maxWeightsTransformShaders,\n      elementCount: textureSize * textureSize\n    });\n\n    this.setState({\n      weightsTexture,\n      maxWeightsTexture,\n      maxWeightTransform,\n      zoom: null,\n      triPositionBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 3}\n      }),\n      triTexCoordBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 2}\n      })\n    });\n  }\n\n  // overwrite super class method to update transform model\n  updateShaders(shaderOptions) {\n    // sahder params (modules, injects) changed, update model object\n    this._createWeightsTransform(shaderOptions);\n  }\n\n  _updateMaxWeightValue() {\n    const {maxWeightTransform} = this.state;\n    maxWeightTransform.run({\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.MAX\n      }\n    });\n  }\n\n  // Computes world bounds area that needs to be processed for generate heatmap\n  _updateBounds(forceUpdate = false) {\n    const {viewport} = this.context;\n\n    // Unproject all 4 corners of the current screen coordinates into world coordinates (lng/lat)\n    // Takes care of viewport has non zero bearing/pitch (i.e axis not aligned with world coordiante system)\n    const viewportCorners = [\n      viewport.unproject([0, 0]),\n      viewport.unproject([viewport.width, 0]),\n      viewport.unproject([viewport.width, viewport.height]),\n      viewport.unproject([0, viewport.height])\n    ].map(p => p.map(Math.fround));\n\n    // #1: get world bounds for current viewport extends\n    const visibleWorldBounds = getBounds(viewportCorners); // TODO: Change to visible bounds\n\n    const newState = {visibleWorldBounds, viewportCorners};\n    let boundsChanged = false;\n\n    if (\n      forceUpdate ||\n      !this.state.worldBounds ||\n      !boundsContain(this.state.worldBounds, visibleWorldBounds)\n    ) {\n      // #2 : convert world bounds to common (Flat) bounds\n      // #3 : extend common bounds to match aspect ratio with viewport\n      const scaledCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n\n      // #4 :convert aligned common bounds to world bounds\n      const worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n\n      // Clip webmercator projection limits\n      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n        worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n        worldBounds[0] = Math.max(worldBounds[0], -360);\n        worldBounds[2] = Math.min(worldBounds[2], 360);\n      }\n\n      // #5: now convert world bounds to common using Layer's coordiante system and origin\n      const normalizedCommonBounds = this._worldToCommonBounds(worldBounds);\n\n      newState.worldBounds = worldBounds;\n      newState.normalizedCommonBounds = normalizedCommonBounds;\n\n      boundsChanged = true;\n    }\n    this.setState(newState);\n    return boundsChanged;\n  }\n\n  _updateTextureRenderingBounds() {\n    // Just render visible portion of the texture\n    const {\n      triPositionBuffer,\n      triTexCoordBuffer,\n      normalizedCommonBounds,\n      viewportCorners\n    } = this.state;\n\n    const {viewport} = this.context;\n\n    triPositionBuffer.subData(packVertices(viewportCorners, 3));\n\n    const textureBounds = viewportCorners.map(p =>\n      getTextureCoordinates(viewport.projectPosition(p), normalizedCommonBounds)\n    );\n    triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n  }\n\n  _updateColorTexture(opts) {\n    const {colorRange} = opts.props;\n    let {colorTexture} = this.state;\n    const colors = colorRangeToFlatArray(colorRange, false, Uint8Array);\n\n    if (colorTexture) {\n      colorTexture.setImageData({\n        data: colors,\n        width: colorRange.length\n      });\n    } else {\n      colorTexture = new Texture2D(this.context.gl, {\n        data: colors,\n        width: colorRange.length,\n        height: 1,\n        ...TEXTURE_OPTIONS\n      });\n    }\n    this.setState({colorTexture});\n  }\n\n  _updateWeightmap() {\n    const {radiusPixels, colorDomain, aggregation} = this.props;\n    const {weightsTransform, worldBounds, textureSize, weightsTexture, weightsScale} = this.state;\n    this.state.isWeightMapDirty = false;\n\n    // convert world bounds to common using Layer's coordiante system and origin\n    const commonBounds = this._worldToCommonBounds(worldBounds, {\n      useLayerCoordinateSystem: true\n    });\n\n    if (colorDomain && aggregation === 'SUM') {\n      // scale color domain to weight per pixel\n      const {viewport} = this.context;\n      const metersPerPixel =\n        (viewport.distanceScales.metersPerUnit[2] * (commonBounds[2] - commonBounds[0])) /\n        textureSize;\n      this.state.colorDomain = colorDomain.map(x => x * metersPerPixel * weightsScale);\n    } else {\n      this.state.colorDomain = colorDomain || DEFAULT_COLOR_DOMAIN;\n    }\n\n    const uniforms = {\n      radiusPixels,\n      commonBounds,\n      textureWidth: textureSize,\n      weightsScale\n    };\n    // Attribute manager sets data array count as instaceCount on model\n    // we need to set that as elementCount on 'weightsTransform'\n    weightsTransform.update({\n      elementCount: this.getNumInstances()\n    });\n    weightsTransform.run({\n      uniforms,\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.FUNC_ADD\n      },\n      clearRenderTarget: true,\n      attributes: this.getAttributes(),\n      moduleSettings: this.getModuleSettings()\n    });\n    this._updateMaxWeightValue();\n\n    // reset filtering parameters (TODO: remove once luma issue#1193 is fixed)\n    weightsTexture.setParameters({\n      [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n      [GL.TEXTURE_MIN_FILTER]: GL.LINEAR\n    });\n  }\n\n  _debouncedUpdateWeightmap(fromTimer = false) {\n    let {updateTimer} = this.state;\n    const {debounceTimeout} = this.props;\n\n    if (fromTimer) {\n      updateTimer = null;\n      // update\n      this._updateBounds(true);\n      this._updateTextureRenderingBounds();\n      this.setState({isWeightMapDirty: true});\n    } else {\n      this.setState({isWeightMapDirty: false});\n      clearTimeout(updateTimer);\n      updateTimer = setTimeout(this._debouncedUpdateWeightmap.bind(this, true), debounceTimeout);\n    }\n\n    this.setState({updateTimer});\n  }\n\n  // input: worldBounds: [minLong, minLat, maxLong, maxLat]\n  // input: opts.useLayerCoordinateSystem : layers coordiante system is used\n  // optput: commonBounds: [minX, minY, maxX, maxY] scaled to fit the current texture\n  _worldToCommonBounds(worldBounds, opts = {}) {\n    const {useLayerCoordinateSystem = false} = opts;\n    const [minLong, minLat, maxLong, maxLat] = worldBounds;\n    const {viewport} = this.context;\n    const {textureSize} = this.state;\n    const {coordinateSystem} = this.props;\n\n    const offsetMode =\n      useLayerCoordinateSystem &&\n      (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS ||\n        coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS);\n    const offsetOriginCommon = offsetMode\n      ? viewport.projectPosition(this.props.coordinateOrigin)\n      : [0, 0];\n    const size = (textureSize * RESOLUTION) / viewport.scale;\n\n    let bottomLeftCommon;\n    let topRightCommon;\n\n    // Y-axis is flipped between World and Common bounds\n    if (useLayerCoordinateSystem && !offsetMode) {\n      bottomLeftCommon = this.projectPosition([minLong, minLat, 0]);\n      topRightCommon = this.projectPosition([maxLong, maxLat, 0]);\n    } else {\n      bottomLeftCommon = viewport.projectPosition([minLong, minLat, 0]);\n      topRightCommon = viewport.projectPosition([maxLong, maxLat, 0]);\n    }\n    // Ignore z component\n    return scaleToAspectRatio(\n      [\n        bottomLeftCommon[0] - offsetOriginCommon[0],\n        bottomLeftCommon[1] - offsetOriginCommon[1],\n        topRightCommon[0] - offsetOriginCommon[0],\n        topRightCommon[1] - offsetOriginCommon[1]\n      ],\n      size,\n      size\n    );\n  }\n\n  // input commonBounds: [xMin, yMin, xMax, yMax]\n  // output worldBounds: [minLong, minLat, maxLong, maxLat]\n  _commonToWorldBounds(commonBounds) {\n    const [xMin, yMin, xMax, yMax] = commonBounds;\n    const {viewport} = this.context;\n    const bottomLeftWorld = viewport.unprojectPosition([xMin, yMin]);\n    const topRightWorld = viewport.unprojectPosition([xMax, yMax]);\n\n    return bottomLeftWorld.slice(0, 2).concat(topRightWorld.slice(0, 2));\n  }\n}\n\nHeatmapLayer.layerName = 'HeatmapLayer';\nHeatmapLayer.defaultProps = defaultProps;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}