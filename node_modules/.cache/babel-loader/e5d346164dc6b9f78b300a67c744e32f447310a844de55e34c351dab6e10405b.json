{"ast":null,"code":"import _defineProperty2 from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport LayerManager from './layer-manager';\nimport ViewManager from './view-manager';\nimport MapView from '../views/map-view';\nimport EffectManager from './effect-manager';\nimport DeckRenderer from './deck-renderer';\nimport DeckPicker from './deck-picker';\nimport Tooltip from './tooltip';\nimport log from '../utils/log';\nimport { deepEqual } from '../utils/deep-equal';\nimport typedArrayManager from '../utils/typed-array-manager';\nimport deckGlobal from './init';\nimport { getBrowser } from '@probe.gl/env';\nimport { AnimationLoop, createGLContext, instrumentGLContext, setParameters, Timeline, lumaStats } from '@luma.gl/core';\nimport { Stats } from '@probe.gl/stats';\nimport { EventManager } from 'mjolnir.js';\nimport assert from '../utils/assert';\nimport { EVENTS } from './constants';\nfunction noop() {}\nvar getCursor = function getCursor(_ref) {\n  var isDragging = _ref.isDragging;\n  return isDragging ? 'grabbing' : 'grab';\n};\nvar defaultProps = {\n  id: '',\n  width: '100%',\n  height: '100%',\n  style: null,\n  viewState: null,\n  initialViewState: null,\n  pickingRadius: 0,\n  layerFilter: null,\n  glOptions: {},\n  parameters: {},\n  parent: null,\n  gl: null,\n  canvas: null,\n  layers: [],\n  effects: [],\n  views: null,\n  controller: null,\n  useDevicePixels: true,\n  touchAction: 'none',\n  eventRecognizerOptions: {},\n  _framebuffer: null,\n  _animate: false,\n  _pickable: true,\n  _typedArrayManagerProps: {},\n  _customRender: null,\n  onWebGLInitialized: noop,\n  onResize: noop,\n  onViewStateChange: noop,\n  onInteractionStateChange: noop,\n  onBeforeRender: noop,\n  onAfterRender: noop,\n  onLoad: noop,\n  onError: function onError(error) {\n    return log.error(error.message)();\n  },\n  onHover: null,\n  onClick: null,\n  onDragStart: null,\n  onDrag: null,\n  onDragEnd: null,\n  _onMetrics: null,\n  getCursor: getCursor,\n  getTooltip: null,\n  debug: false,\n  drawPickingColors: false\n};\nvar Deck = /*#__PURE__*/function () {\n  function Deck(props) {\n    var _this = this;\n    _classCallCheck(this, Deck);\n    _defineProperty(this, \"props\", void 0);\n    _defineProperty(this, \"width\", 0);\n    _defineProperty(this, \"height\", 0);\n    _defineProperty(this, \"userData\", {});\n    _defineProperty(this, \"canvas\", null);\n    _defineProperty(this, \"viewManager\", null);\n    _defineProperty(this, \"layerManager\", null);\n    _defineProperty(this, \"effectManager\", null);\n    _defineProperty(this, \"deckRenderer\", null);\n    _defineProperty(this, \"deckPicker\", null);\n    _defineProperty(this, \"eventManager\", null);\n    _defineProperty(this, \"tooltip\", null);\n    _defineProperty(this, \"metrics\", void 0);\n    _defineProperty(this, \"animationLoop\", void 0);\n    _defineProperty(this, \"stats\", void 0);\n    _defineProperty(this, \"viewState\", void 0);\n    _defineProperty(this, \"cursorState\", void 0);\n    _defineProperty(this, \"_needsRedraw\", void 0);\n    _defineProperty(this, \"_pickRequest\", void 0);\n    _defineProperty(this, \"_lastPointerDownInfo\", null);\n    _defineProperty(this, \"_metricsCounter\", void 0);\n    _defineProperty(this, \"_onPointerMove\", function (event) {\n      var _pickRequest = _this._pickRequest;\n      if (event.type === 'pointerleave') {\n        _pickRequest.x = -1;\n        _pickRequest.y = -1;\n        _pickRequest.radius = 0;\n      } else if (event.leftButton || event.rightButton) {\n        return;\n      } else {\n        var pos = event.offsetCenter;\n        if (!pos) {\n          return;\n        }\n        _pickRequest.x = pos.x;\n        _pickRequest.y = pos.y;\n        _pickRequest.radius = _this.props.pickingRadius;\n      }\n      if (_this.layerManager) {\n        _this.layerManager.context.mousePosition = {\n          x: _pickRequest.x,\n          y: _pickRequest.y\n        };\n      }\n      _pickRequest.event = event;\n    });\n    _defineProperty(this, \"_onEvent\", function (event) {\n      var eventOptions = EVENTS[event.type];\n      var pos = event.offsetCenter;\n      if (!eventOptions || !pos || !_this.layerManager) {\n        return;\n      }\n      var layers = _this.layerManager.getLayers();\n      var info = _this.deckPicker.getLastPickedObject({\n        x: pos.x,\n        y: pos.y,\n        layers: layers,\n        viewports: _this.getViewports(pos)\n      }, _this._lastPointerDownInfo);\n      var layer = info.layer;\n      var layerHandler = layer && (layer[eventOptions.handler] || layer.props[eventOptions.handler]);\n      var rootHandler = _this.props[eventOptions.handler];\n      var handled = false;\n      if (layerHandler) {\n        handled = layerHandler.call(layer, info, event);\n      }\n      if (!handled && rootHandler) {\n        rootHandler(info, event);\n      }\n    });\n    _defineProperty(this, \"_onPointerDown\", function (event) {\n      var pos = event.offsetCenter;\n      var pickedInfo = _this._pick('pickObject', 'pickObject Time', {\n        x: pos.x,\n        y: pos.y,\n        radius: _this.props.pickingRadius\n      });\n      _this._lastPointerDownInfo = pickedInfo.result[0] || pickedInfo.emptyInfo;\n    });\n    this.props = _objectSpread(_objectSpread({}, defaultProps), props);\n    props = this.props;\n    this._needsRedraw = 'Initial render';\n    this._pickRequest = {\n      mode: 'hover',\n      x: -1,\n      y: -1,\n      radius: 0,\n      event: null\n    };\n    this.cursorState = {\n      isHovering: false,\n      isDragging: false\n    };\n    if (props.viewState && props.initialViewState) {\n      log.warn('View state tracking is disabled. Use either `initialViewState` for auto update or `viewState` for manual update.')();\n    }\n    if (getBrowser() === 'IE') {\n      log.warn('IE 11 is not supported')();\n    }\n    this.viewState = props.initialViewState;\n    if (!props.gl) {\n      if (typeof document !== 'undefined') {\n        this.canvas = this._createCanvas(props);\n      }\n    }\n    this.animationLoop = this._createAnimationLoop(props);\n    this.stats = new Stats({\n      id: 'deck.gl'\n    });\n    this.metrics = {\n      fps: 0,\n      setPropsTime: 0,\n      updateAttributesTime: 0,\n      framesRedrawn: 0,\n      pickTime: 0,\n      pickCount: 0,\n      gpuTime: 0,\n      gpuTimePerFrame: 0,\n      cpuTime: 0,\n      cpuTimePerFrame: 0,\n      bufferMemory: 0,\n      textureMemory: 0,\n      renderbufferMemory: 0,\n      gpuMemory: 0\n    };\n    this._metricsCounter = 0;\n    this.setProps(props);\n    if (props._typedArrayManagerProps) {\n      typedArrayManager.setOptions(props._typedArrayManagerProps);\n    }\n    this.animationLoop.start();\n  }\n  _createClass(Deck, [{\n    key: \"finalize\",\n    value: function finalize() {\n      var _this$layerManager, _this$viewManager, _this$effectManager, _this$deckRenderer, _this$deckPicker, _this$eventManager, _this$tooltip;\n      this.animationLoop.stop();\n      this.animationLoop = null;\n      this._lastPointerDownInfo = null;\n      (_this$layerManager = this.layerManager) === null || _this$layerManager === void 0 ? void 0 : _this$layerManager.finalize();\n      this.layerManager = null;\n      (_this$viewManager = this.viewManager) === null || _this$viewManager === void 0 ? void 0 : _this$viewManager.finalize();\n      this.viewManager = null;\n      (_this$effectManager = this.effectManager) === null || _this$effectManager === void 0 ? void 0 : _this$effectManager.finalize();\n      this.effectManager = null;\n      (_this$deckRenderer = this.deckRenderer) === null || _this$deckRenderer === void 0 ? void 0 : _this$deckRenderer.finalize();\n      this.deckRenderer = null;\n      (_this$deckPicker = this.deckPicker) === null || _this$deckPicker === void 0 ? void 0 : _this$deckPicker.finalize();\n      this.deckPicker = null;\n      (_this$eventManager = this.eventManager) === null || _this$eventManager === void 0 ? void 0 : _this$eventManager.destroy();\n      this.eventManager = null;\n      (_this$tooltip = this.tooltip) === null || _this$tooltip === void 0 ? void 0 : _this$tooltip.remove();\n      this.tooltip = null;\n      if (!this.props.canvas && !this.props.gl && this.canvas) {\n        var _this$canvas$parentEl;\n        (_this$canvas$parentEl = this.canvas.parentElement) === null || _this$canvas$parentEl === void 0 ? void 0 : _this$canvas$parentEl.removeChild(this.canvas);\n        this.canvas = null;\n      }\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      this.stats.get('setProps Time').timeStart();\n      if ('onLayerHover' in props) {\n        log.removed('onLayerHover', 'onHover')();\n      }\n      if ('onLayerClick' in props) {\n        log.removed('onLayerClick', 'onClick')();\n      }\n      if (props.initialViewState && !deepEqual(this.props.initialViewState, props.initialViewState)) {\n        this.viewState = props.initialViewState;\n      }\n      Object.assign(this.props, props);\n      this._setCanvasSize(this.props);\n      var resolvedProps = Object.create(this.props);\n      Object.assign(resolvedProps, {\n        views: this._getViews(),\n        width: this.width,\n        height: this.height,\n        viewState: this._getViewState()\n      });\n      this.animationLoop.setProps(resolvedProps);\n      if (this.layerManager) {\n        this.viewManager.setProps(resolvedProps);\n        this.layerManager.activateViewport(this.getViewports()[0]);\n        this.layerManager.setProps(resolvedProps);\n        this.effectManager.setProps(resolvedProps);\n        this.deckRenderer.setProps(resolvedProps);\n        this.deckPicker.setProps(resolvedProps);\n      }\n      this.stats.get('setProps Time').timeEnd();\n    }\n  }, {\n    key: \"needsRedraw\",\n    value: function needsRedraw() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        clearRedrawFlags: false\n      };\n      if (!this.layerManager) {\n        return false;\n      }\n      if (this.props._animate) {\n        return 'Deck._animate';\n      }\n      var redraw = this._needsRedraw;\n      if (opts.clearRedrawFlags) {\n        this._needsRedraw = false;\n      }\n      var viewManagerNeedsRedraw = this.viewManager.needsRedraw(opts);\n      var layerManagerNeedsRedraw = this.layerManager.needsRedraw(opts);\n      var effectManagerNeedsRedraw = this.effectManager.needsRedraw(opts);\n      var deckRendererNeedsRedraw = this.deckRenderer.needsRedraw(opts);\n      redraw = redraw || viewManagerNeedsRedraw || layerManagerNeedsRedraw || effectManagerNeedsRedraw || deckRendererNeedsRedraw;\n      return redraw;\n    }\n  }, {\n    key: \"redraw\",\n    value: function redraw(reason) {\n      if (!this.layerManager) {\n        return;\n      }\n      var redrawReason = this.needsRedraw({\n        clearRedrawFlags: true\n      });\n      redrawReason = reason || redrawReason;\n      if (!redrawReason) {\n        return;\n      }\n      this.stats.get('Redraw Count').incrementCount();\n      if (this.props._customRender) {\n        this.props._customRender(redrawReason);\n      } else {\n        this._drawLayers(redrawReason);\n      }\n    }\n  }, {\n    key: \"isInitialized\",\n    get: function get() {\n      return this.viewManager !== null;\n    }\n  }, {\n    key: \"getViews\",\n    value: function getViews() {\n      assert(this.viewManager);\n      return this.viewManager.views;\n    }\n  }, {\n    key: \"getViewports\",\n    value: function getViewports(rect) {\n      assert(this.viewManager);\n      return this.viewManager.getViewports(rect);\n    }\n  }, {\n    key: \"pickObject\",\n    value: function pickObject(opts) {\n      var infos = this._pick('pickObject', 'pickObject Time', opts).result;\n      return infos.length ? infos[0] : null;\n    }\n  }, {\n    key: \"pickMultipleObjects\",\n    value: function pickMultipleObjects(opts) {\n      opts.depth = opts.depth || 10;\n      return this._pick('pickObject', 'pickMultipleObjects Time', opts).result;\n    }\n  }, {\n    key: \"pickObjects\",\n    value: function pickObjects(opts) {\n      return this._pick('pickObjects', 'pickObjects Time', opts);\n    }\n  }, {\n    key: \"_addResources\",\n    value: function _addResources(resources) {\n      var forceUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      for (var id in resources) {\n        this.layerManager.resourceManager.add({\n          resourceId: id,\n          data: resources[id],\n          forceUpdate: forceUpdate\n        });\n      }\n    }\n  }, {\n    key: \"_removeResources\",\n    value: function _removeResources(resourceIds) {\n      var _iterator = _createForOfIteratorHelper(resourceIds),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var id = _step.value;\n          this.layerManager.resourceManager.remove(id);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"_pick\",\n    value: function _pick(method, statKey, opts) {\n      assert(this.deckPicker);\n      var stats = this.stats;\n      stats.get('Pick Count').incrementCount();\n      stats.get(statKey).timeStart();\n      var infos = this.deckPicker[method](_objectSpread({\n        layers: this.layerManager.getLayers(opts),\n        views: this.viewManager.getViews(),\n        viewports: this.getViewports(opts),\n        onViewportActive: this.layerManager.activateViewport,\n        effects: this.effectManager.getEffects()\n      }, opts));\n      stats.get(statKey).timeEnd();\n      return infos;\n    }\n  }, {\n    key: \"_createCanvas\",\n    value: function _createCanvas(props) {\n      var canvas = props.canvas;\n      if (typeof canvas === 'string') {\n        canvas = document.getElementById(canvas);\n        assert(canvas);\n      }\n      if (!canvas) {\n        canvas = document.createElement('canvas');\n        canvas.id = props.id || 'deckgl-overlay';\n        var parent = props.parent || document.body;\n        parent.appendChild(canvas);\n      }\n      Object.assign(canvas.style, props.style);\n      return canvas;\n    }\n  }, {\n    key: \"_setCanvasSize\",\n    value: function _setCanvasSize(props) {\n      if (!this.canvas) {\n        return;\n      }\n      var width = props.width,\n        height = props.height;\n      if (width || width === 0) {\n        var cssWidth = Number.isFinite(width) ? \"\".concat(width, \"px\") : width;\n        this.canvas.style.width = cssWidth;\n      }\n      if (height || height === 0) {\n        var _props$style;\n        var cssHeight = Number.isFinite(height) ? \"\".concat(height, \"px\") : height;\n        this.canvas.style.position = ((_props$style = props.style) === null || _props$style === void 0 ? void 0 : _props$style.position) || 'absolute';\n        this.canvas.style.height = cssHeight;\n      }\n    }\n  }, {\n    key: \"_updateCanvasSize\",\n    value: function _updateCanvasSize() {\n      var canvas = this.canvas;\n      if (!canvas) {\n        return;\n      }\n      var newWidth = canvas.clientWidth || canvas.width;\n      var newHeight = canvas.clientHeight || canvas.height;\n      if (newWidth !== this.width || newHeight !== this.height) {\n        var _this$viewManager2;\n        this.width = newWidth;\n        this.height = newHeight;\n        (_this$viewManager2 = this.viewManager) === null || _this$viewManager2 === void 0 ? void 0 : _this$viewManager2.setProps({\n          width: newWidth,\n          height: newHeight\n        });\n        this.props.onResize({\n          width: newWidth,\n          height: newHeight\n        });\n      }\n    }\n  }, {\n    key: \"_createAnimationLoop\",\n    value: function _createAnimationLoop(props) {\n      var _this2 = this;\n      var width = props.width,\n        height = props.height,\n        gl = props.gl,\n        glOptions = props.glOptions,\n        debug = props.debug,\n        onError = props.onError,\n        onBeforeRender = props.onBeforeRender,\n        onAfterRender = props.onAfterRender,\n        useDevicePixels = props.useDevicePixels;\n      return new AnimationLoop({\n        width: width,\n        height: height,\n        useDevicePixels: useDevicePixels,\n        autoResizeViewport: false,\n        gl: gl,\n        onCreateContext: function onCreateContext(opts) {\n          return createGLContext(_objectSpread(_objectSpread(_objectSpread({}, glOptions), opts), {}, {\n            canvas: _this2.canvas,\n            debug: debug,\n            onContextLost: function onContextLost() {\n              return _this2._onContextLost();\n            }\n          }));\n        },\n        onInitialize: function onInitialize(context) {\n          return _this2._setGLContext(context.gl);\n        },\n        onRender: this._onRenderFrame.bind(this),\n        onBeforeRender: onBeforeRender,\n        onAfterRender: onAfterRender,\n        onError: onError\n      });\n    }\n  }, {\n    key: \"_getViewState\",\n    value: function _getViewState() {\n      return this.props.viewState || this.viewState;\n    }\n  }, {\n    key: \"_getViews\",\n    value: function _getViews() {\n      var views = this.props.views || [new MapView({\n        id: 'default-view'\n      })];\n      views = Array.isArray(views) ? views : [views];\n      if (views.length && this.props.controller) {\n        views[0].props.controller = this.props.controller;\n      }\n      return views;\n    }\n  }, {\n    key: \"_onContextLost\",\n    value: function _onContextLost() {\n      var onError = this.props.onError;\n      if (this.animationLoop && onError) {\n        onError(new Error('WebGL context is lost'));\n      }\n    }\n  }, {\n    key: \"_pickAndCallback\",\n    value: function _pickAndCallback() {\n      var _pickRequest = this._pickRequest;\n      if (_pickRequest.event) {\n        var _this$_pick = this._pick('pickObject', 'pickObject Time', _pickRequest),\n          result = _this$_pick.result,\n          emptyInfo = _this$_pick.emptyInfo;\n        this.cursorState.isHovering = result.length > 0;\n        var pickedInfo = emptyInfo;\n        var handled = false;\n        var _iterator2 = _createForOfIteratorHelper(result),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var info = _step2.value;\n            var _info$layer;\n            pickedInfo = info;\n            handled = ((_info$layer = info.layer) === null || _info$layer === void 0 ? void 0 : _info$layer.onHover(info, _pickRequest.event)) || handled;\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n        if (!handled && this.props.onHover) {\n          this.props.onHover(pickedInfo, _pickRequest.event);\n        }\n        if (this.props.getTooltip && this.tooltip) {\n          var displayInfo = this.props.getTooltip(pickedInfo);\n          this.tooltip.setTooltip(displayInfo, pickedInfo.x, pickedInfo.y);\n        }\n        _pickRequest.event = null;\n      }\n    }\n  }, {\n    key: \"_updateCursor\",\n    value: function _updateCursor() {\n      var container = this.props.parent || this.canvas;\n      if (container) {\n        container.style.cursor = this.props.getCursor(this.cursorState);\n      }\n    }\n  }, {\n    key: \"_setGLContext\",\n    value: function _setGLContext(gl) {\n      if (this.layerManager) {\n        return;\n      }\n      if (!this.canvas) {\n        this.canvas = gl.canvas;\n        instrumentGLContext(gl, {\n          enable: true,\n          copyState: true\n        });\n      }\n      this.tooltip = new Tooltip(this.canvas);\n      setParameters(gl, {\n        blend: true,\n        blendFunc: [770, 771, 1, 771],\n        polygonOffsetFill: true,\n        depthTest: true,\n        depthFunc: 515\n      });\n      this.props.onWebGLInitialized(gl);\n      var timeline = new Timeline();\n      timeline.play();\n      this.animationLoop.attachTimeline(timeline);\n      this.eventManager = new EventManager(this.props.parent || gl.canvas, {\n        touchAction: this.props.touchAction,\n        recognizerOptions: this.props.eventRecognizerOptions,\n        events: {\n          pointerdown: this._onPointerDown,\n          pointermove: this._onPointerMove,\n          pointerleave: this._onPointerMove\n        }\n      });\n      for (var eventType in EVENTS) {\n        this.eventManager.on(eventType, this._onEvent);\n      }\n      this.viewManager = new ViewManager({\n        timeline: timeline,\n        eventManager: this.eventManager,\n        onViewStateChange: this._onViewStateChange.bind(this),\n        onInteractionStateChange: this._onInteractionStateChange.bind(this),\n        views: this._getViews(),\n        viewState: this._getViewState(),\n        width: this.width,\n        height: this.height\n      });\n      var viewport = this.viewManager.getViewports()[0];\n      this.layerManager = new LayerManager(gl, {\n        deck: this,\n        stats: this.stats,\n        viewport: viewport,\n        timeline: timeline\n      });\n      this.effectManager = new EffectManager();\n      this.deckRenderer = new DeckRenderer(gl);\n      this.deckPicker = new DeckPicker(gl);\n      this.setProps(this.props);\n      this._updateCanvasSize();\n      this.props.onLoad();\n    }\n  }, {\n    key: \"_drawLayers\",\n    value: function _drawLayers(redrawReason, renderOptions) {\n      var gl = this.layerManager.context.gl;\n      setParameters(gl, this.props.parameters);\n      this.props.onBeforeRender({\n        gl: gl\n      });\n      this.deckRenderer.renderLayers(_objectSpread({\n        target: this.props._framebuffer,\n        layers: this.layerManager.getLayers(),\n        viewports: this.viewManager.getViewports(),\n        onViewportActive: this.layerManager.activateViewport,\n        views: this.viewManager.getViews(),\n        pass: 'screen',\n        redrawReason: redrawReason,\n        effects: this.effectManager.getEffects()\n      }, renderOptions));\n      this.props.onAfterRender({\n        gl: gl\n      });\n    }\n  }, {\n    key: \"_onRenderFrame\",\n    value: function _onRenderFrame(animationProps) {\n      this._getFrameStats();\n      if (this._metricsCounter++ % 60 === 0) {\n        this._getMetrics();\n        this.stats.reset();\n        log.table(4, this.metrics)();\n        if (this.props._onMetrics) {\n          this.props._onMetrics(this.metrics);\n        }\n      }\n      this._updateCanvasSize();\n      this._updateCursor();\n      if (this.tooltip.isVisible && this.viewManager.needsRedraw()) {\n        this.tooltip.setTooltip(null);\n      }\n      this.layerManager.updateLayers();\n      this._pickAndCallback();\n      this.redraw();\n      if (this.viewManager) {\n        this.viewManager.updateViewStates();\n      }\n    }\n  }, {\n    key: \"_onViewStateChange\",\n    value: function _onViewStateChange(params) {\n      var viewState = this.props.onViewStateChange(params) || params.viewState;\n      if (this.viewState) {\n        this.viewState = _objectSpread(_objectSpread({}, this.viewState), {}, _defineProperty2({}, params.viewId, viewState));\n        if (!this.props.viewState) {\n          if (this.viewManager) {\n            this.viewManager.setProps({\n              viewState: this.viewState\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_onInteractionStateChange\",\n    value: function _onInteractionStateChange(interactionState) {\n      this.cursorState.isDragging = interactionState.isDragging || false;\n      this.props.onInteractionStateChange(interactionState);\n    }\n  }, {\n    key: \"_getFrameStats\",\n    value: function _getFrameStats() {\n      var stats = this.stats;\n      stats.get('frameRate').timeEnd();\n      stats.get('frameRate').timeStart();\n      var animationLoopStats = this.animationLoop.stats;\n      stats.get('GPU Time').addTime(animationLoopStats.get('GPU Time').lastTiming);\n      stats.get('CPU Time').addTime(animationLoopStats.get('CPU Time').lastTiming);\n    }\n  }, {\n    key: \"_getMetrics\",\n    value: function _getMetrics() {\n      var metrics = this.metrics,\n        stats = this.stats;\n      metrics.fps = stats.get('frameRate').getHz();\n      metrics.setPropsTime = stats.get('setProps Time').time;\n      metrics.updateAttributesTime = stats.get('Update Attributes').time;\n      metrics.framesRedrawn = stats.get('Redraw Count').count;\n      metrics.pickTime = stats.get('pickObject Time').time + stats.get('pickMultipleObjects Time').time + stats.get('pickObjects Time').time;\n      metrics.pickCount = stats.get('Pick Count').count;\n      metrics.gpuTime = stats.get('GPU Time').time;\n      metrics.cpuTime = stats.get('CPU Time').time;\n      metrics.gpuTimePerFrame = stats.get('GPU Time').getAverageTime();\n      metrics.cpuTimePerFrame = stats.get('CPU Time').getAverageTime();\n      var memoryStats = lumaStats.get('Memory Usage');\n      metrics.bufferMemory = memoryStats.get('Buffer Memory').count;\n      metrics.textureMemory = memoryStats.get('Texture Memory').count;\n      metrics.renderbufferMemory = memoryStats.get('Renderbuffer Memory').count;\n      metrics.gpuMemory = memoryStats.get('GPU Memory').count;\n    }\n  }]);\n  return Deck;\n}();\nexport { Deck as default };\n_defineProperty(Deck, \"defaultProps\", defaultProps);\n_defineProperty(Deck, \"VERSION\", deckGlobal.VERSION);","map":{"version":3,"names":["LayerManager","ViewManager","MapView","EffectManager","DeckRenderer","DeckPicker","Tooltip","log","deepEqual","typedArrayManager","deckGlobal","getBrowser","AnimationLoop","createGLContext","instrumentGLContext","setParameters","Timeline","lumaStats","Stats","EventManager","assert","EVENTS","noop","getCursor","_ref","isDragging","defaultProps","id","width","height","style","viewState","initialViewState","pickingRadius","layerFilter","glOptions","parameters","parent","gl","canvas","layers","effects","views","controller","useDevicePixels","touchAction","eventRecognizerOptions","_framebuffer","_animate","_pickable","_typedArrayManagerProps","_customRender","onWebGLInitialized","onResize","onViewStateChange","onInteractionStateChange","onBeforeRender","onAfterRender","onLoad","onError","error","message","onHover","onClick","onDragStart","onDrag","onDragEnd","_onMetrics","getTooltip","debug","drawPickingColors","Deck","props","_this","_classCallCheck","_defineProperty","event","_pickRequest","type","x","y","radius","leftButton","rightButton","pos","offsetCenter","layerManager","context","mousePosition","eventOptions","getLayers","info","deckPicker","getLastPickedObject","viewports","getViewports","_lastPointerDownInfo","layer","layerHandler","handler","rootHandler","handled","call","pickedInfo","_pick","result","emptyInfo","_objectSpread","_needsRedraw","mode","cursorState","isHovering","warn","document","_createCanvas","animationLoop","_createAnimationLoop","stats","metrics","fps","setPropsTime","updateAttributesTime","framesRedrawn","pickTime","pickCount","gpuTime","gpuTimePerFrame","cpuTime","cpuTimePerFrame","bufferMemory","textureMemory","renderbufferMemory","gpuMemory","_metricsCounter","setProps","setOptions","start","_createClass","key","value","finalize","_this$layerManager","_this$viewManager","_this$effectManager","_this$deckRenderer","_this$deckPicker","_this$eventManager","_this$tooltip","stop","viewManager","effectManager","deckRenderer","eventManager","destroy","tooltip","remove","_this$canvas$parentEl","parentElement","removeChild","get","timeStart","removed","Object","assign","_setCanvasSize","resolvedProps","create","_getViews","_getViewState","activateViewport","timeEnd","needsRedraw","opts","arguments","length","undefined","clearRedrawFlags","redraw","viewManagerNeedsRedraw","layerManagerNeedsRedraw","effectManagerNeedsRedraw","deckRendererNeedsRedraw","reason","redrawReason","incrementCount","_drawLayers","getViews","rect","pickObject","infos","pickMultipleObjects","depth","pickObjects","_addResources","resources","forceUpdate","resourceManager","add","resourceId","data","_removeResources","resourceIds","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","e","f","method","statKey","onViewportActive","getEffects","getElementById","createElement","body","appendChild","cssWidth","Number","isFinite","concat","_props$style","cssHeight","position","_updateCanvasSize","newWidth","clientWidth","newHeight","clientHeight","_this$viewManager2","_this2","autoResizeViewport","onCreateContext","onContextLost","_onContextLost","onInitialize","_setGLContext","onRender","_onRenderFrame","bind","Array","isArray","Error","_pickAndCallback","_this$_pick","_iterator2","_step2","_info$layer","displayInfo","setTooltip","_updateCursor","container","cursor","enable","copyState","blend","blendFunc","polygonOffsetFill","depthTest","depthFunc","timeline","play","attachTimeline","recognizerOptions","events","pointerdown","_onPointerDown","pointermove","_onPointerMove","pointerleave","eventType","on","_onEvent","_onViewStateChange","_onInteractionStateChange","viewport","deck","renderOptions","renderLayers","target","pass","animationProps","_getFrameStats","_getMetrics","reset","table","isVisible","updateLayers","updateViewStates","params","_defineProperty2","viewId","interactionState","animationLoopStats","addTime","lastTiming","getHz","time","count","getAverageTime","memoryStats","default","VERSION"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@deck.gl/core/src/lib/deck.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport LayerManager from './layer-manager';\nimport ViewManager from './view-manager';\nimport MapView from '../views/map-view';\nimport EffectManager from './effect-manager';\nimport DeckRenderer from './deck-renderer';\nimport DeckPicker from './deck-picker';\nimport Tooltip from './tooltip';\nimport log from '../utils/log';\nimport {deepEqual} from '../utils/deep-equal';\nimport typedArrayManager from '../utils/typed-array-manager';\nimport deckGlobal from './init';\n\nimport {getBrowser} from '@probe.gl/env';\nimport GL from '@luma.gl/constants';\nimport {\n  AnimationLoop,\n  createGLContext,\n  instrumentGLContext,\n  setParameters,\n  Timeline,\n  lumaStats\n} from '@luma.gl/core';\nimport {Stats} from '@probe.gl/stats';\nimport {EventManager} from 'mjolnir.js';\n\nimport assert from '../utils/assert';\nimport {EVENTS} from './constants';\n\nimport type {Effect} from './effect';\nimport type {FilterContext} from '../passes/layers-pass';\nimport type Layer from './layer';\nimport type View from '../views/view';\nimport type Viewport from '../viewports/viewport';\nimport type {RecognizerOptions, MjolnirGestureEvent, MjolnirPointerEvent} from 'mjolnir.js';\nimport type {Framebuffer} from '@luma.gl/core';\nimport type {TypedArrayManagerOptions} from '../utils/typed-array-manager';\nimport type {ViewStateChangeParameters, InteractionState} from '../controllers/controller';\nimport type {PickingInfo} from './picking/pick-info';\nimport type {PickByPointOptions, PickByRectOptions} from './deck-picker';\nimport type {LayersList} from './layer-manager';\nimport type {TooltipContent} from './tooltip';\n\n/* global document */\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n\nconst getCursor = ({isDragging}) => (isDragging ? 'grabbing' : 'grab');\n\nexport type DeckMetrics = {\n  fps: number;\n  setPropsTime: number;\n  updateAttributesTime: number;\n  framesRedrawn: number;\n  pickTime: number;\n  pickCount: number;\n  gpuTime: number;\n  gpuTimePerFrame: number;\n  cpuTime: number;\n  cpuTimePerFrame: number;\n  bufferMemory: number;\n  textureMemory: number;\n  renderbufferMemory: number;\n  gpuMemory: number;\n};\n\ntype CursorState = {\n  /** Whether the cursor is over a pickable object */\n  isHovering: boolean;\n  /** Whether the cursor is down */\n  isDragging: boolean;\n};\n\nexport type DeckProps = {\n  /** Id of this Deck instance */\n  id?: string;\n  /** Width of the canvas, a number in pixels or a valid CSS string.\n   * @default `'100%'`\n   */\n  width?: string | number | null;\n  /** Height of the canvas, a number in pixels or a valid CSS string.\n   * @default `'100%'`\n   */\n  height?: string | number | null;\n  /** Additional CSS styles for the canvas. */\n  style?: Partial<CSSStyleDeclaration> | null;\n\n  /** Controls the resolution of drawing buffer used for rendering.\n   * @default `true` (use browser devicePixelRatio)\n   */\n  useDevicePixels?: boolean | number;\n  /** Extra pixels around the pointer to include while picking.\n   * @default `0`\n   */\n  pickingRadius?: number;\n\n  /** WebGL parameters to be set before each frame is rendered.\n   * @see https://github.com/visgl/luma.gl/blob/8.5-release/modules/gltools/docs/api-reference/parameter-setting.md#parameters\n   */\n  parameters?: any;\n  /** If supplied, will be called before a layer is drawn to determine whether it should be rendered. */\n  layerFilter?: ((context: FilterContext) => boolean) | null;\n\n  /** The container to append the auto-created canvas to.\n   * @default `document.body`\n   */\n  parent?: HTMLDivElement | null;\n  /** The canvas to render into.\n   * Can be either a HTMLCanvasElement or the element id.\n   * Will be auto-created if not supplied.\n   */\n  canvas?: HTMLCanvasElement | string | null;\n  /** WebGL context. Will be auto-created if not supplied. */\n  gl?: WebGLRenderingContext | null;\n  /** Additional options used when creating the WebGL context. */\n  glOptions?: WebGLContextAttributes;\n\n  /**\n   * The array of Layer instances to be rendered.\n   * Nested arrays are accepted, as well as falsy values (`null`, `false`, `undefined`)\n   */\n  layers?: LayersList;\n  /** The array of effects to be rendered. A lighting effect will be added if an empty array is supplied. */\n  effects?: Effect[];\n  /** A single View instance, or an array of `View` instances.\n   * @default `new MapView()`\n   */\n  views?: View | View[] | null;\n  /** Options for viewport interactivity, e.g. pan, rotate and zoom with mouse, touch and keyboard.\n   * This is a shorthand for defining interaction with the `views` prop if you are using the default view (i.e. a single `MapView`)\n   */\n  controller?: View['props']['controller'];\n  /**\n   * An object that describes the view state for each view in the `views` prop.\n   * Use if the camera state should be managed external to the `Deck` instance.\n   */\n  viewState?: any;\n  /**\n   * If provided, the `Deck` instance will track camera state changes automatically,\n   * with `initialViewState` as its initial settings.\n   */\n  initialViewState?: any;\n\n  /** Allow browser default touch actions.\n   * @default `'none'`\n   */\n  touchAction?: string;\n  /** Set Hammer.js recognizer options for gesture recognition. See documentation for details. */\n  eventRecognizerOptions?: {\n    [type: string]: RecognizerOptions;\n  };\n\n  /** (Experimental) Render to a custom frame buffer other than to screen. */\n  _framebuffer?: Framebuffer | null;\n  /** (Experimental) Forces deck.gl to redraw layers every animation frame. */\n  _animate?: boolean;\n  /** (Experimental) If set to `false`, force disables all picking features, disregarding the `pickable` prop set in any layer. */\n  _pickable?: boolean;\n  /** (Experimental) Fine-tune attribute memory usage. See documentation for details. */\n  _typedArrayManagerProps?: TypedArrayManagerOptions;\n\n  /** Called once the WebGL context has been initiated. */\n  onWebGLInitialized?: (gl: WebGLRenderingContext) => void;\n  /** Called when the canvas resizes. */\n  onResize?: (dimensions: {width: number; height: number}) => void;\n  /** Called when the user has interacted with the deck.gl canvas, e.g. using mouse, touch or keyboard. */\n  onViewStateChange?: (params: ViewStateChangeParameters & {viewId: string}) => any;\n  /** Called when the user has interacted with the deck.gl canvas, e.g. using mouse, touch or keyboard. */\n  onInteractionStateChange?: (state: InteractionState) => void;\n  /** Called just before the canvas rerenders. */\n  onBeforeRender?: (context: {gl: WebGLRenderingContext}) => void;\n  /** Called right after the canvas rerenders. */\n  onAfterRender?: (context: {gl: WebGLRenderingContext}) => void;\n  /** Called once after gl context and all Deck components are created. */\n  onLoad?: () => void;\n  /** Called if deck.gl encounters an error.\n   * If this callback is set to `null`, errors are silently ignored.\n   * @default `console.error`\n   */\n  onError?: ((error: Error, layer?: Layer) => void) | null;\n  /** Called when the pointer moves over the canvas. */\n  onHover?: ((info: PickingInfo, event: MjolnirPointerEvent) => void) | null;\n  /** Called when clicking on the canvas. */\n  onClick?: ((info: PickingInfo, event: MjolnirGestureEvent) => void) | null;\n  /** Called when the user starts dragging on the canvas. */\n  onDragStart?: ((info: PickingInfo, event: MjolnirGestureEvent) => void) | null;\n  /** Called when dragging the canvas. */\n  onDrag?: ((info: PickingInfo, event: MjolnirGestureEvent) => void) | null;\n  /** Called when the user releases from dragging the canvas. */\n  onDragEnd?: ((info: PickingInfo, event: MjolnirGestureEvent) => void) | null;\n\n  /** (Experimental) Replace the default redraw procedure */\n  _customRender?: ((reason: string) => void) | null;\n  /** (Experimental) Called once every second with performance metrics. */\n  _onMetrics?: ((metrics: DeckMetrics) => void) | null;\n\n  /** A custom callback to retrieve the cursor type. */\n  getCursor?: (state: CursorState) => string;\n  /** Callback that takes a hovered-over point and renders a tooltip. */\n  getTooltip?: ((info: PickingInfo) => TooltipContent) | null;\n\n  /** (Debug) Flag to enable WebGL debug mode. Requires importing `@luma.gl/debug`. */\n  debug?: boolean;\n  /** (Debug) Render the picking buffer to screen. */\n  drawPickingColors?: boolean;\n};\n\nconst defaultProps = {\n  id: '',\n  width: '100%',\n  height: '100%',\n  style: null,\n  viewState: null,\n  initialViewState: null,\n  pickingRadius: 0,\n  layerFilter: null,\n  glOptions: {},\n  parameters: {},\n  parent: null,\n  gl: null,\n  canvas: null,\n  layers: [],\n  effects: [],\n  views: null,\n  controller: null, // Rely on external controller, e.g. react-map-gl\n  useDevicePixels: true,\n  touchAction: 'none',\n  eventRecognizerOptions: {},\n  _framebuffer: null,\n  _animate: false,\n  _pickable: true,\n  _typedArrayManagerProps: {},\n  _customRender: null,\n\n  onWebGLInitialized: noop,\n  onResize: noop,\n  onViewStateChange: noop,\n  onInteractionStateChange: noop,\n  onBeforeRender: noop,\n  onAfterRender: noop,\n  onLoad: noop,\n  onError: (error: Error) => log.error(error.message)(),\n  onHover: null,\n  onClick: null,\n  onDragStart: null,\n  onDrag: null,\n  onDragEnd: null,\n  _onMetrics: null,\n\n  getCursor,\n  getTooltip: null,\n\n  debug: false,\n  drawPickingColors: false\n};\n\n/* eslint-disable max-statements */\nexport default class Deck {\n  static defaultProps = defaultProps;\n  // This is used to defeat tree shaking of init.js\n  // https://github.com/visgl/deck.gl/issues/3213\n  static VERSION = deckGlobal.VERSION;\n\n  readonly props: Required<DeckProps>;\n  readonly width: number = 0;\n  readonly height: number = 0;\n  // Allows attaching arbitrary data to the instance\n  readonly userData: Record<string, any> = {};\n\n  protected canvas: HTMLCanvasElement | null = null;\n  protected viewManager: ViewManager | null = null;\n  protected layerManager: LayerManager | null = null;\n  protected effectManager: EffectManager | null = null;\n  protected deckRenderer: DeckRenderer | null = null;\n  protected deckPicker: DeckPicker | null = null;\n  protected eventManager: EventManager | null = null;\n  protected tooltip: Tooltip | null = null;\n  protected metrics: DeckMetrics;\n  protected animationLoop: AnimationLoop;\n  protected stats: Stats;\n\n  /** Internal view state if no callback is supplied */\n  protected viewState: any;\n  protected cursorState: CursorState;\n\n  private _needsRedraw: false | string;\n  private _pickRequest: {\n    mode: string;\n    event: MjolnirPointerEvent | null;\n    x: number;\n    y: number;\n    radius: number;\n  };\n  /**\n   * Pick and store the object under the pointer on `pointerdown`.\n   * This object is reused for subsequent `onClick` and `onDrag*` callbacks.\n   */\n  private _lastPointerDownInfo: PickingInfo | null = null;\n  private _metricsCounter: number;\n\n  constructor(props: DeckProps) {\n    this.props = {...defaultProps, ...props};\n    props = this.props;\n\n    this._needsRedraw = 'Initial render';\n    this._pickRequest = {\n      mode: 'hover',\n      x: -1,\n      y: -1,\n      radius: 0,\n      event: null\n    };\n\n    this.cursorState = {\n      isHovering: false,\n      isDragging: false\n    };\n\n    if (props.viewState && props.initialViewState) {\n      log.warn(\n        'View state tracking is disabled. Use either `initialViewState` for auto update or `viewState` for manual update.'\n      )();\n    }\n    if (getBrowser() === 'IE') {\n      log.warn('IE 11 is not supported')();\n    }\n    this.viewState = props.initialViewState;\n\n    if (!props.gl) {\n      // Note: LayerManager creation deferred until gl context available\n      if (typeof document !== 'undefined') {\n        this.canvas = this._createCanvas(props);\n      }\n    }\n    this.animationLoop = this._createAnimationLoop(props);\n\n    this.stats = new Stats({id: 'deck.gl'});\n    this.metrics = {\n      fps: 0,\n      setPropsTime: 0,\n      updateAttributesTime: 0,\n      framesRedrawn: 0,\n      pickTime: 0,\n      pickCount: 0,\n      gpuTime: 0,\n      gpuTimePerFrame: 0,\n      cpuTime: 0,\n      cpuTimePerFrame: 0,\n      bufferMemory: 0,\n      textureMemory: 0,\n      renderbufferMemory: 0,\n      gpuMemory: 0\n    };\n    this._metricsCounter = 0;\n\n    this.setProps(props);\n\n    // UNSAFE/experimental prop: only set at initialization to avoid performance hit\n    if (props._typedArrayManagerProps) {\n      typedArrayManager.setOptions(props._typedArrayManagerProps);\n    }\n\n    this.animationLoop.start();\n  }\n\n  /** Stop rendering and dispose all resources */\n  finalize() {\n    this.animationLoop.stop();\n    this.animationLoop = null;\n    this._lastPointerDownInfo = null;\n\n    this.layerManager?.finalize();\n    this.layerManager = null;\n\n    this.viewManager?.finalize();\n    this.viewManager = null;\n\n    this.effectManager?.finalize();\n    this.effectManager = null;\n\n    this.deckRenderer?.finalize();\n    this.deckRenderer = null;\n\n    this.deckPicker?.finalize();\n    this.deckPicker = null;\n\n    this.eventManager?.destroy();\n    this.eventManager = null;\n\n    this.tooltip?.remove();\n    this.tooltip = null;\n\n    if (!this.props.canvas && !this.props.gl && this.canvas) {\n      // remove internally created canvas\n      this.canvas.parentElement?.removeChild(this.canvas);\n      this.canvas = null;\n    }\n  }\n\n  /** Partially update props */\n  setProps(props: DeckProps): void {\n    this.stats.get('setProps Time').timeStart();\n\n    if ('onLayerHover' in props) {\n      log.removed('onLayerHover', 'onHover')();\n    }\n    if ('onLayerClick' in props) {\n      log.removed('onLayerClick', 'onClick')();\n    }\n    if (props.initialViewState && !deepEqual(this.props.initialViewState, props.initialViewState)) {\n      // Overwrite internal view state\n      this.viewState = props.initialViewState;\n    }\n\n    // Merge with existing props\n    Object.assign(this.props, props);\n\n    // Update CSS size of canvas\n    this._setCanvasSize(this.props);\n\n    // We need to overwrite CSS style width and height with actual, numeric values\n    const resolvedProps: Required<DeckProps> & {\n      width: number;\n      height: number;\n      views: View[];\n      viewState: Record<string, any>;\n    } = Object.create(this.props);\n    Object.assign(resolvedProps, {\n      views: this._getViews(),\n      width: this.width,\n      height: this.height,\n      viewState: this._getViewState()\n    });\n\n    // Update the animation loop\n    this.animationLoop.setProps(resolvedProps);\n\n    // If initialized, update sub manager props\n    if (this.layerManager) {\n      this.viewManager!.setProps(resolvedProps);\n      // Make sure that any new layer gets initialized with the current viewport\n      this.layerManager.activateViewport(this.getViewports()[0]);\n      this.layerManager.setProps(resolvedProps);\n      this.effectManager!.setProps(resolvedProps);\n      this.deckRenderer!.setProps(resolvedProps);\n      this.deckPicker!.setProps(resolvedProps);\n    }\n\n    this.stats.get('setProps Time').timeEnd();\n  }\n\n  // Public API\n\n  /**\n   * Check if a redraw is needed\n   * @returns `false` or a string summarizing the redraw reason\n   */\n  needsRedraw(\n    opts: {\n      /** Reset the redraw flag afterwards. Default `true` */\n      clearRedrawFlags: boolean;\n    } = {clearRedrawFlags: false}\n  ): false | string {\n    if (!this.layerManager) {\n      // Not initialized or already finalized\n      return false;\n    }\n    if (this.props._animate) {\n      return 'Deck._animate';\n    }\n\n    let redraw: false | string = this._needsRedraw;\n\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    const viewManagerNeedsRedraw = this.viewManager!.needsRedraw(opts);\n    const layerManagerNeedsRedraw = this.layerManager.needsRedraw(opts);\n    const effectManagerNeedsRedraw = this.effectManager!.needsRedraw(opts);\n    const deckRendererNeedsRedraw = this.deckRenderer!.needsRedraw(opts);\n\n    redraw =\n      redraw ||\n      viewManagerNeedsRedraw ||\n      layerManagerNeedsRedraw ||\n      effectManagerNeedsRedraw ||\n      deckRendererNeedsRedraw;\n    return redraw;\n  }\n\n  /**\n   * Redraw the GL context\n   * @param reason If not provided, only redraw if deemed necessary. Otherwise redraw regardless of internal states.\n   * @returns\n   */\n  redraw(reason?: string): void {\n    if (!this.layerManager) {\n      // Not yet initialized\n      return;\n    }\n    // Check if we need to redraw\n    let redrawReason = this.needsRedraw({clearRedrawFlags: true});\n    // User-supplied should take precedent, however the redraw flags get cleared regardless\n    redrawReason = reason || redrawReason;\n\n    if (!redrawReason) {\n      return;\n    }\n\n    this.stats.get('Redraw Count').incrementCount();\n    if (this.props._customRender) {\n      this.props._customRender(redrawReason);\n    } else {\n      this._drawLayers(redrawReason);\n    }\n  }\n\n  /** Flag indicating that the Deck instance has initialized its resources and it's safe to call public methods. */\n  get isInitialized(): boolean {\n    return this.viewManager !== null;\n  }\n\n  /** Get a list of views that are currently rendered */\n  getViews(): View[] {\n    assert(this.viewManager);\n    return this.viewManager.views;\n  }\n\n  /** Get a list of viewports that are currently rendered.\n   * @param rect If provided, only returns viewports within the given bounding box.\n   */\n  getViewports(rect?: {x: number; y: number; width?: number; height?: number}): Viewport[] {\n    assert(this.viewManager);\n    return this.viewManager.getViewports(rect);\n  }\n\n  /** Query the object rendered on top at a given point */\n  pickObject(opts: {\n    /** x position in pixels */\n    x: number;\n    /** y position in pixels */\n    y: number;\n    /** Radius of tolerance in pixels. Default `0`. */\n    radius?: number;\n    /** A list of layer ids to query from. If not specified, then all pickable and visible layers are queried. */\n    layerIds?: string[];\n    /** If `true`, `info.coordinate` will be a 3D point by unprojecting the `x, y` screen coordinates onto the picked geometry. Default `false`. */\n    unproject3D?: boolean;\n  }): PickingInfo | null {\n    const infos = this._pick('pickObject', 'pickObject Time', opts).result;\n    return infos.length ? infos[0] : null;\n  }\n\n  /* Query all rendered objects at a given point */\n  pickMultipleObjects(opts: {\n    /** x position in pixels */\n    x: number;\n    /** y position in pixels */\n    y: number;\n    /** Radius of tolerance in pixels. Default `0`. */\n    radius?: number;\n    /** Specifies the max number of objects to return. Default `10`. */\n    depth?: number;\n    /** A list of layer ids to query from. If not specified, then all pickable and visible layers are queried. */\n    layerIds?: string[];\n    /** If `true`, `info.coordinate` will be a 3D point by unprojecting the `x, y` screen coordinates onto the picked geometry. Default `false`. */\n    unproject3D?: boolean;\n  }): PickingInfo[] {\n    opts.depth = opts.depth || 10;\n    return this._pick('pickObject', 'pickMultipleObjects Time', opts).result;\n  }\n\n  /* Query all objects rendered on top within a bounding box */\n  pickObjects(opts: {\n    /** Left of the bounding box in pixels */\n    x: number;\n    /** Top of the bounding box in pixels */\n    y: number;\n    /** Width of the bounding box in pixels. Default `1` */\n    width?: number;\n    /** Height of the bounding box in pixels. Default `1` */\n    height?: number;\n    /** A list of layer ids to query from. If not specified, then all pickable and visible layers are queried. */\n    layerIds?: string[];\n    /** If specified, limits the number of objects that can be returned. */\n    maxObjects?: number | null;\n  }): PickingInfo[] {\n    return this._pick('pickObjects', 'pickObjects Time', opts);\n  }\n\n  /** Experimental\n   * Add a global resource for sharing among layers\n   */\n  _addResources(\n    resources: {\n      [id: string]: any;\n    },\n    forceUpdate = false\n  ) {\n    for (const id in resources) {\n      this.layerManager!.resourceManager.add({resourceId: id, data: resources[id], forceUpdate});\n    }\n  }\n\n  /** Experimental\n   * Remove a global resource\n   */\n  _removeResources(resourceIds: string[]) {\n    for (const id of resourceIds) {\n      this.layerManager!.resourceManager.remove(id);\n    }\n  }\n\n  // Private Methods\n\n  private _pick(\n    method: 'pickObject',\n    statKey: string,\n    opts: PickByPointOptions & {layerIds?: string[]}\n  ): {\n    result: PickingInfo[];\n    emptyInfo: PickingInfo;\n  };\n  private _pick(\n    method: 'pickObjects',\n    statKey: string,\n    opts: PickByRectOptions & {layerIds?: string[]}\n  ): PickingInfo[];\n\n  private _pick(\n    method: 'pickObject' | 'pickObjects',\n    statKey: string,\n    opts: (PickByPointOptions | PickByRectOptions) & {layerIds?: string[]}\n  ) {\n    assert(this.deckPicker);\n\n    const {stats} = this;\n\n    stats.get('Pick Count').incrementCount();\n    stats.get(statKey).timeStart();\n\n    const infos = this.deckPicker[method]({\n      // layerManager, viewManager and effectManager are always defined if deckPicker is\n      layers: this.layerManager!.getLayers(opts),\n      views: this.viewManager!.getViews(),\n      viewports: this.getViewports(opts),\n      onViewportActive: this.layerManager!.activateViewport,\n      effects: this.effectManager!.getEffects(),\n      ...opts\n    });\n\n    stats.get(statKey).timeEnd();\n\n    return infos;\n  }\n\n  /** Resolve props.canvas to element */\n  private _createCanvas(props: DeckProps): HTMLCanvasElement {\n    let canvas = props.canvas;\n\n    // TODO EventManager should accept element id\n    if (typeof canvas === 'string') {\n      canvas = document.getElementById(canvas) as HTMLCanvasElement;\n      assert(canvas);\n    }\n\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      canvas.id = props.id || 'deckgl-overlay';\n      const parent = props.parent || document.body;\n      parent.appendChild(canvas);\n    }\n\n    Object.assign(canvas.style, props.style);\n\n    return canvas;\n  }\n\n  /** Updates canvas width and/or height, if provided as props */\n  private _setCanvasSize(props: Required<DeckProps>): void {\n    if (!this.canvas) {\n      return;\n    }\n\n    const {width, height} = props;\n    // Set size ONLY if props are being provided, otherwise let canvas be layouted freely\n    if (width || width === 0) {\n      const cssWidth = Number.isFinite(width) ? `${width}px` : (width as string);\n      this.canvas.style.width = cssWidth;\n    }\n    if (height || height === 0) {\n      const cssHeight = Number.isFinite(height) ? `${height}px` : (height as string);\n      // Note: position==='absolute' required for height 100% to work\n      this.canvas.style.position = props.style?.position || 'absolute';\n      this.canvas.style.height = cssHeight;\n    }\n  }\n\n  /** If canvas size has changed, reads out the new size and update */\n  private _updateCanvasSize(): void {\n    const {canvas} = this;\n    if (!canvas) {\n      return;\n    }\n    // Fallback to width/height when clientWidth/clientHeight are 0 or undefined.\n    const newWidth = canvas.clientWidth || canvas.width;\n    const newHeight = canvas.clientHeight || canvas.height;\n    if (newWidth !== this.width || newHeight !== this.height) {\n      // @ts-expect-error private assign to read-only property\n      this.width = newWidth;\n      // @ts-expect-error private assign to read-only property\n      this.height = newHeight;\n      this.viewManager?.setProps({width: newWidth, height: newHeight});\n      this.props.onResize({width: newWidth, height: newHeight});\n    }\n  }\n\n  private _createAnimationLoop(props: DeckProps): AnimationLoop {\n    const {\n      width,\n      height,\n      gl,\n      glOptions,\n      debug,\n      onError,\n      onBeforeRender,\n      onAfterRender,\n      useDevicePixels\n    } = props;\n\n    return new AnimationLoop({\n      width,\n      height,\n      useDevicePixels,\n      autoResizeViewport: false,\n      gl,\n      onCreateContext: opts =>\n        createGLContext({\n          ...glOptions,\n          ...opts,\n          canvas: this.canvas,\n          debug,\n          onContextLost: () => this._onContextLost()\n        }),\n      onInitialize: context => this._setGLContext(context.gl),\n      onRender: this._onRenderFrame.bind(this),\n      onBeforeRender,\n      onAfterRender,\n      onError\n    });\n  }\n\n  // Get the most relevant view state: props.viewState, if supplied, shadows internal viewState\n  // TODO: For backwards compatibility ensure numeric width and height is added to the viewState\n  private _getViewState(): Record<string, any> {\n    return this.props.viewState || this.viewState;\n  }\n\n  // Get the view descriptor list\n  private _getViews(): View[] {\n    // Default to a full screen map view port\n    let views = this.props.views || [new MapView({id: 'default-view'})];\n    views = Array.isArray(views) ? views : [views];\n    if (views.length && this.props.controller) {\n      // Backward compatibility: support controller prop\n      views[0].props.controller = this.props.controller;\n    }\n    return views;\n  }\n\n  private _onContextLost() {\n    const {onError} = this.props;\n    if (this.animationLoop && onError) {\n      onError(new Error('WebGL context is lost'));\n    }\n  }\n\n  // The `pointermove` event may fire multiple times in between two animation frames,\n  // it's a waste of time to run picking without rerender. Instead we save the last pick\n  // request and only do it once on the next animation frame.\n  /** Internal use only: event handler for pointerdown */\n  _onPointerMove = (event: MjolnirPointerEvent) => {\n    const {_pickRequest} = this;\n    if (event.type === 'pointerleave') {\n      _pickRequest.x = -1;\n      _pickRequest.y = -1;\n      _pickRequest.radius = 0;\n    } else if (event.leftButton || event.rightButton) {\n      // Do not trigger onHover callbacks if mouse button is down.\n      return;\n    } else {\n      const pos = event.offsetCenter;\n      // Do not trigger callbacks when click/hover position is invalid. Doing so will cause a\n      // assertion error when attempting to unproject the position.\n      if (!pos) {\n        return;\n      }\n      _pickRequest.x = pos.x;\n      _pickRequest.y = pos.y;\n      _pickRequest.radius = this.props.pickingRadius;\n    }\n\n    if (this.layerManager) {\n      this.layerManager.context.mousePosition = {x: _pickRequest.x, y: _pickRequest.y};\n    }\n\n    _pickRequest.event = event;\n  };\n\n  /** Actually run picking */\n  private _pickAndCallback() {\n    const {_pickRequest} = this;\n\n    if (_pickRequest.event) {\n      // Perform picking\n      const {result, emptyInfo} = this._pick('pickObject', 'pickObject Time', _pickRequest);\n      this.cursorState.isHovering = result.length > 0;\n\n      // There are 4 possible scenarios:\n      // result is [outInfo, pickedInfo] (moved from one pickable layer to another)\n      // result is [outInfo] (moved outside of a pickable layer)\n      // result is [pickedInfo] (moved into or over a pickable layer)\n      // result is [] (nothing is or was picked)\n      //\n      // `layer.props.onHover` should be called on all affected layers (out/over)\n      // `deck.props.onHover` should be called with the picked info if any, or empty info otherwise\n      // `deck.props.getTooltip` should be called with the picked info if any, or empty info otherwise\n\n      // Execute callbacks\n      let pickedInfo = emptyInfo;\n      let handled = false;\n      for (const info of result) {\n        pickedInfo = info;\n        handled = info.layer?.onHover(info, _pickRequest.event) || handled;\n      }\n      if (!handled && this.props.onHover) {\n        this.props.onHover(pickedInfo, _pickRequest.event);\n      }\n\n      // Update tooltip\n      if (this.props.getTooltip && this.tooltip) {\n        const displayInfo = this.props.getTooltip(pickedInfo);\n        this.tooltip.setTooltip(displayInfo, pickedInfo.x, pickedInfo.y);\n      }\n\n      // Clear pending pickRequest\n      _pickRequest.event = null;\n    }\n  }\n\n  private _updateCursor(): void {\n    const container = this.props.parent || this.canvas;\n    if (container) {\n      container.style.cursor = this.props.getCursor(this.cursorState);\n    }\n  }\n\n  private _setGLContext(gl: WebGLRenderingContext) {\n    if (this.layerManager) {\n      return;\n    }\n\n    // if external context...\n    if (!this.canvas) {\n      this.canvas = gl.canvas;\n      instrumentGLContext(gl, {enable: true, copyState: true});\n    }\n\n    this.tooltip = new Tooltip(this.canvas);\n\n    setParameters(gl, {\n      blend: true,\n      blendFunc: [GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA, GL.ONE, GL.ONE_MINUS_SRC_ALPHA],\n      polygonOffsetFill: true,\n      depthTest: true,\n      depthFunc: GL.LEQUAL\n    });\n\n    this.props.onWebGLInitialized(gl);\n\n    // timeline for transitions\n    const timeline = new Timeline();\n    timeline.play();\n    this.animationLoop.attachTimeline(timeline);\n\n    this.eventManager = new EventManager(this.props.parent || gl.canvas, {\n      touchAction: this.props.touchAction,\n      recognizerOptions: this.props.eventRecognizerOptions,\n      events: {\n        pointerdown: this._onPointerDown,\n        pointermove: this._onPointerMove,\n        pointerleave: this._onPointerMove\n      }\n    });\n    for (const eventType in EVENTS) {\n      this.eventManager.on(eventType as keyof typeof EVENTS, this._onEvent);\n    }\n\n    this.viewManager = new ViewManager({\n      timeline,\n      eventManager: this.eventManager,\n      onViewStateChange: this._onViewStateChange.bind(this),\n      onInteractionStateChange: this._onInteractionStateChange.bind(this),\n      views: this._getViews(),\n      viewState: this._getViewState(),\n      width: this.width,\n      height: this.height\n    });\n\n    // viewManager must be initialized before layerManager\n    // layerManager depends on viewport created by viewManager.\n    const viewport = this.viewManager.getViewports()[0];\n\n    // Note: avoid React setState due GL animation loop / setState timing issue\n    this.layerManager = new LayerManager(gl, {\n      deck: this,\n      stats: this.stats,\n      viewport,\n      timeline\n    });\n\n    this.effectManager = new EffectManager();\n\n    this.deckRenderer = new DeckRenderer(gl);\n\n    this.deckPicker = new DeckPicker(gl);\n\n    this.setProps(this.props);\n\n    this._updateCanvasSize();\n    this.props.onLoad();\n  }\n\n  /** Internal only: default render function (redraw all layers and views) */\n  _drawLayers(\n    redrawReason: string,\n    renderOptions?: {\n      target?: Framebuffer;\n      layerFilter?: (context: FilterContext) => boolean;\n      layers?: Layer[];\n      viewports?: Viewport[];\n      views?: {[viewId: string]: View};\n      pass?: string;\n      effects?: Effect[];\n      clearStack?: boolean;\n      clearCanvas?: boolean;\n    }\n  ) {\n    const {gl} = this.layerManager!.context;\n\n    setParameters(gl, this.props.parameters);\n\n    this.props.onBeforeRender({gl});\n\n    this.deckRenderer!.renderLayers({\n      target: this.props._framebuffer,\n      layers: this.layerManager!.getLayers(),\n      viewports: this.viewManager!.getViewports(),\n      onViewportActive: this.layerManager!.activateViewport,\n      views: this.viewManager!.getViews(),\n      pass: 'screen',\n      redrawReason,\n      effects: this.effectManager!.getEffects(),\n      ...renderOptions\n    });\n\n    this.props.onAfterRender({gl});\n  }\n\n  // Callbacks\n\n  private _onRenderFrame(animationProps: any) {\n    this._getFrameStats();\n\n    // Log perf stats every second\n    if (this._metricsCounter++ % 60 === 0) {\n      this._getMetrics();\n      this.stats.reset();\n      log.table(4, this.metrics)();\n\n      // Experimental: report metrics\n      if (this.props._onMetrics) {\n        this.props._onMetrics(this.metrics);\n      }\n    }\n\n    this._updateCanvasSize();\n\n    this._updateCursor();\n\n    // If view state has changed, clear tooltip\n    if (this.tooltip!.isVisible && this.viewManager!.needsRedraw()) {\n      this.tooltip!.setTooltip(null);\n    }\n\n    // Update layers if needed (e.g. some async prop has loaded)\n    // Note: This can trigger a redraw\n    this.layerManager!.updateLayers();\n\n    // Perform picking request if any\n    this._pickAndCallback();\n\n    // Redraw if necessary\n    this.redraw();\n\n    // Update viewport transition if needed\n    // Note: this can trigger `onViewStateChange`, and affect layers\n    // We want to defer these changes to the next frame\n    if (this.viewManager) {\n      this.viewManager.updateViewStates();\n    }\n  }\n\n  // Callbacks\n\n  private _onViewStateChange(params: ViewStateChangeParameters & {viewId: string}) {\n    // Let app know that view state is changing, and give it a chance to change it\n    const viewState = this.props.onViewStateChange(params) || params.viewState;\n\n    // If initialViewState was set on creation, auto track position\n    if (this.viewState) {\n      this.viewState = {...this.viewState, [params.viewId]: viewState};\n      if (!this.props.viewState) {\n        // Apply internal view state\n        if (this.viewManager) {\n          this.viewManager.setProps({viewState: this.viewState});\n        }\n      }\n    }\n  }\n\n  private _onInteractionStateChange(interactionState: InteractionState) {\n    this.cursorState.isDragging = interactionState.isDragging || false;\n    this.props.onInteractionStateChange(interactionState);\n  }\n\n  /** Internal use only: event handler for click & drag */\n  _onEvent = (event: MjolnirGestureEvent) => {\n    const eventOptions = EVENTS[event.type];\n    const pos = event.offsetCenter;\n\n    if (!eventOptions || !pos || !this.layerManager) {\n      return;\n    }\n\n    // Reuse last picked object\n    const layers = this.layerManager.getLayers();\n    const info = this.deckPicker!.getLastPickedObject(\n      {\n        x: pos.x,\n        y: pos.y,\n        layers,\n        viewports: this.getViewports(pos)\n      },\n      this._lastPointerDownInfo\n    );\n\n    const {layer} = info;\n    const layerHandler =\n      layer && (layer[eventOptions.handler] || layer.props[eventOptions.handler]);\n    const rootHandler = this.props[eventOptions.handler];\n    let handled = false;\n\n    if (layerHandler) {\n      handled = layerHandler.call(layer, info, event);\n    }\n    if (!handled && rootHandler) {\n      rootHandler(info, event);\n    }\n  };\n\n  /** Internal use only: evnet handler for pointerdown */\n  _onPointerDown = (event: MjolnirPointerEvent) => {\n    const pos = event.offsetCenter;\n    const pickedInfo = this._pick('pickObject', 'pickObject Time', {\n      x: pos.x,\n      y: pos.y,\n      radius: this.props.pickingRadius\n    });\n    this._lastPointerDownInfo = pickedInfo.result[0] || pickedInfo.emptyInfo;\n  };\n\n  private _getFrameStats(): void {\n    const {stats} = this;\n    stats.get('frameRate').timeEnd();\n    stats.get('frameRate').timeStart();\n\n    // Get individual stats from luma.gl so reset works\n    const animationLoopStats = this.animationLoop.stats;\n    stats.get('GPU Time').addTime(animationLoopStats.get('GPU Time').lastTiming);\n    stats.get('CPU Time').addTime(animationLoopStats.get('CPU Time').lastTiming);\n  }\n\n  private _getMetrics(): void {\n    const {metrics, stats} = this;\n    metrics.fps = stats.get('frameRate').getHz();\n    metrics.setPropsTime = stats.get('setProps Time').time;\n    metrics.updateAttributesTime = stats.get('Update Attributes').time;\n    metrics.framesRedrawn = stats.get('Redraw Count').count;\n    metrics.pickTime =\n      stats.get('pickObject Time').time +\n      stats.get('pickMultipleObjects Time').time +\n      stats.get('pickObjects Time').time;\n    metrics.pickCount = stats.get('Pick Count').count;\n\n    // Luma stats\n    metrics.gpuTime = stats.get('GPU Time').time;\n    metrics.cpuTime = stats.get('CPU Time').time;\n    metrics.gpuTimePerFrame = stats.get('GPU Time').getAverageTime();\n    metrics.cpuTimePerFrame = stats.get('CPU Time').getAverageTime();\n\n    const memoryStats = lumaStats.get('Memory Usage');\n    metrics.bufferMemory = memoryStats.get('Buffer Memory').count;\n    metrics.textureMemory = memoryStats.get('Texture Memory').count;\n    metrics.renderbufferMemory = memoryStats.get('Renderbuffer Memory').count;\n    metrics.gpuMemory = memoryStats.get('GPU Memory').count;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}