{"ast":null,"code":"import _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport getHiResTimestamp from '../utils/hi-res-timestamp';\nvar Stat = /*#__PURE__*/function () {\n  function Stat(name, type) {\n    _classCallCheck(this, Stat);\n    _defineProperty(this, \"name\", void 0);\n    _defineProperty(this, \"type\", void 0);\n    _defineProperty(this, \"sampleSize\", 1);\n    _defineProperty(this, \"time\", void 0);\n    _defineProperty(this, \"count\", void 0);\n    _defineProperty(this, \"samples\", void 0);\n    _defineProperty(this, \"lastTiming\", void 0);\n    _defineProperty(this, \"lastSampleTime\", void 0);\n    _defineProperty(this, \"lastSampleCount\", void 0);\n    _defineProperty(this, \"_count\", 0);\n    _defineProperty(this, \"_time\", 0);\n    _defineProperty(this, \"_samples\", 0);\n    _defineProperty(this, \"_startTime\", 0);\n    _defineProperty(this, \"_timerPending\", false);\n    this.name = name;\n    this.type = type;\n    this.reset();\n  }\n  _createClass(Stat, [{\n    key: \"setSampleSize\",\n    value: function setSampleSize(samples) {\n      this.sampleSize = samples;\n      return this;\n    }\n  }, {\n    key: \"incrementCount\",\n    value: function incrementCount() {\n      this.addCount(1);\n      return this;\n    }\n  }, {\n    key: \"decrementCount\",\n    value: function decrementCount() {\n      this.subtractCount(1);\n      return this;\n    }\n  }, {\n    key: \"addCount\",\n    value: function addCount(value) {\n      this._count += value;\n      this._samples++;\n      this._checkSampling();\n      return this;\n    }\n  }, {\n    key: \"subtractCount\",\n    value: function subtractCount(value) {\n      this._count -= value;\n      this._samples++;\n      this._checkSampling();\n      return this;\n    }\n  }, {\n    key: \"addTime\",\n    value: function addTime(time) {\n      this._time += time;\n      this.lastTiming = time;\n      this._samples++;\n      this._checkSampling();\n      return this;\n    }\n  }, {\n    key: \"timeStart\",\n    value: function timeStart() {\n      this._startTime = getHiResTimestamp();\n      this._timerPending = true;\n      return this;\n    }\n  }, {\n    key: \"timeEnd\",\n    value: function timeEnd() {\n      if (!this._timerPending) {\n        return this;\n      }\n      this.addTime(getHiResTimestamp() - this._startTime);\n      this._timerPending = false;\n      this._checkSampling();\n      return this;\n    }\n  }, {\n    key: \"getSampleAverageCount\",\n    value: function getSampleAverageCount() {\n      return this.sampleSize > 0 ? this.lastSampleCount / this.sampleSize : 0;\n    }\n  }, {\n    key: \"getSampleAverageTime\",\n    value: function getSampleAverageTime() {\n      return this.sampleSize > 0 ? this.lastSampleTime / this.sampleSize : 0;\n    }\n  }, {\n    key: \"getSampleHz\",\n    value: function getSampleHz() {\n      return this.lastSampleTime > 0 ? this.sampleSize / (this.lastSampleTime / 1000) : 0;\n    }\n  }, {\n    key: \"getAverageCount\",\n    value: function getAverageCount() {\n      return this.samples > 0 ? this.count / this.samples : 0;\n    }\n  }, {\n    key: \"getAverageTime\",\n    value: function getAverageTime() {\n      return this.samples > 0 ? this.time / this.samples : 0;\n    }\n  }, {\n    key: \"getHz\",\n    value: function getHz() {\n      return this.time > 0 ? this.samples / (this.time / 1000) : 0;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.time = 0;\n      this.count = 0;\n      this.samples = 0;\n      this.lastTiming = 0;\n      this.lastSampleTime = 0;\n      this.lastSampleCount = 0;\n      this._count = 0;\n      this._time = 0;\n      this._samples = 0;\n      this._startTime = 0;\n      this._timerPending = false;\n      return this;\n    }\n  }, {\n    key: \"_checkSampling\",\n    value: function _checkSampling() {\n      if (this._samples === this.sampleSize) {\n        this.lastSampleTime = this._time;\n        this.lastSampleCount = this._count;\n        this.count += this._count;\n        this.time += this._time;\n        this.samples += this._samples;\n        this._time = 0;\n        this._count = 0;\n        this._samples = 0;\n      }\n    }\n  }]);\n  return Stat;\n}();\nexport { Stat as default };","map":{"version":3,"names":["getHiResTimestamp","Stat","name","type","_classCallCheck","_defineProperty","reset","_createClass","key","value","setSampleSize","samples","sampleSize","incrementCount","addCount","decrementCount","subtractCount","_count","_samples","_checkSampling","addTime","time","_time","lastTiming","timeStart","_startTime","_timerPending","timeEnd","getSampleAverageCount","lastSampleCount","getSampleAverageTime","lastSampleTime","getSampleHz","getAverageCount","count","getAverageTime","getHz","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@probe.gl/stats/src/lib/stat.ts"],"sourcesContent":["import getHiResTimestamp from '../utils/hi-res-timestamp';\n\nexport default class Stat {\n  readonly name: string;\n  readonly type: string;\n  sampleSize: number = 1;\n  time: number;\n  count: number;\n  samples: number;\n  lastTiming: number;\n  lastSampleTime: number;\n  lastSampleCount: number;\n\n  _count: number = 0;\n  _time: number = 0;\n  _samples: number = 0;\n  _startTime: number = 0;\n  _timerPending: boolean = false;\n\n  constructor(name: string, type?: string) {\n    this.name = name;\n    this.type = type;\n    this.reset();\n  }\n\n  setSampleSize(samples: number): this {\n    this.sampleSize = samples;\n    return this;\n  }\n\n  /** Call to increment count (+1) */\n  incrementCount(): this {\n    this.addCount(1);\n\n    return this;\n  }\n\n  /** Call to decrement count (-1) */\n  decrementCount(): this {\n    this.subtractCount(1);\n\n    return this;\n  }\n\n  /** Increase count */\n  addCount(value: number): this {\n    this._count += value;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  /** Decrease count */\n  subtractCount(value: number): this {\n    this._count -= value;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  /** Add an arbitrary timing and bump the count */\n  addTime(time: number): this {\n    this._time += time;\n    this.lastTiming = time;\n    this._samples++;\n    this._checkSampling();\n\n    return this;\n  }\n\n  /** Start a timer */\n  timeStart(): this {\n    this._startTime = getHiResTimestamp();\n    this._timerPending = true;\n\n    return this;\n  }\n\n  /** End a timer. Adds to time and bumps the timing count. */\n  timeEnd(): this {\n    if (!this._timerPending) {\n      return this;\n    }\n    this.addTime(getHiResTimestamp() - this._startTime);\n    this._timerPending = false;\n    this._checkSampling();\n\n    return this;\n  }\n\n  getSampleAverageCount(): number {\n    return this.sampleSize > 0 ? this.lastSampleCount / this.sampleSize : 0;\n  }\n\n  /** Calculate average time / count for the previous window */\n  getSampleAverageTime(): number {\n    return this.sampleSize > 0 ? this.lastSampleTime / this.sampleSize : 0;\n  }\n\n  /** Calculate counts per second for the previous window */\n  getSampleHz(): number {\n    return this.lastSampleTime > 0 ? this.sampleSize / (this.lastSampleTime / 1000) : 0;\n  }\n\n  getAverageCount(): number {\n    return this.samples > 0 ? this.count / this.samples : 0;\n  }\n\n  /** Calculate average time / count */\n  getAverageTime(): number {\n    return this.samples > 0 ? this.time / this.samples : 0;\n  }\n\n  /** Calculate counts per second */\n  getHz(): number {\n    return this.time > 0 ? this.samples / (this.time / 1000) : 0;\n  }\n\n  reset(): this {\n    this.time = 0;\n    this.count = 0;\n    this.samples = 0;\n    this.lastTiming = 0;\n    this.lastSampleTime = 0;\n    this.lastSampleCount = 0;\n    this._count = 0;\n    this._time = 0;\n    this._samples = 0;\n    this._startTime = 0;\n    this._timerPending = false;\n\n    return this;\n  }\n\n  _checkSampling(): void {\n    if (this._samples === this.sampleSize) {\n      this.lastSampleTime = this._time;\n      this.lastSampleCount = this._count;\n      this.count += this._count;\n      this.time += this._time;\n      this.samples += this._samples;\n      this._time = 0;\n      this._count = 0;\n      this._samples = 0;\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}