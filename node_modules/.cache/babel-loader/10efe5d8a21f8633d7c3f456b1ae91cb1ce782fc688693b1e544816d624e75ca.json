{"ast":null,"code":"// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMapStyles = getMapStyles;\nexports.getInitialInputStyle = getInitialInputStyle;\nexports.set3dBuildingColorUpdater = exports.addCustomMapStyleUpdater = exports.inputMapStyleUpdater = exports.loadCustomMapStyleUpdater = exports.resetMapConfigMapStyleUpdater = exports.receiveMapConfigUpdater = exports.requestMapStylesUpdater = exports.loadMapStyleErrUpdater = exports.loadMapStylesUpdater = exports.mapStyleChangeUpdater = exports.mapConfigChangeUpdater = exports.initMapStyleUpdater = exports.INITIAL_MAP_STYLE = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _tasks = _interopRequireWildcard(require(\"react-palm/tasks\"));\nvar _lodash = _interopRequireDefault(require(\"lodash.clonedeep\"));\nvar _utils = require(\"@kepler.gl/utils\");\nvar _constants = require(\"@kepler.gl/constants\");\nvar _tasks2 = require(\"@kepler.gl/tasks\");\nvar _d3Color = require(\"d3-color\");\nvar _actions = require(\"@kepler.gl/actions\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar DEFAULT_BLDG_COLOR = '#D1CEC7';\nvar getDefaultState = function getDefaultState() {\n  var visibleLayerGroups = {};\n  var styleType = 'dark';\n  var topLayerGroups = {};\n  return {\n    styleType: styleType,\n    visibleLayerGroups: visibleLayerGroups,\n    topLayerGroups: topLayerGroups,\n    mapStyles: _constants.DEFAULT_MAP_STYLES.reduce(function (accu, curr) {\n      return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2[\"default\"])({}, curr.id, curr));\n    }, {}),\n    // save mapbox access token\n    mapboxApiAccessToken: null,\n    mapboxApiUrl: _constants.DEFAULT_MAPBOX_API_URL,\n    mapStylesReplaceDefault: false,\n    inputStyle: getInitialInputStyle(),\n    threeDBuildingColor: (0, _utils.hexToRgb)(DEFAULT_BLDG_COLOR),\n    custom3DBuildingColor: false,\n    bottomMapStyle: undefined,\n    topMapStyle: undefined\n  };\n};\n/**\n * Updaters for `mapStyle`. Can be used in your root reducer to directly modify kepler.gl's state.\n * Read more about [Using updaters](../advanced-usage/using-updaters.md)\n * @public\n * @example\n *\n * import keplerGlReducer, {mapStyleUpdaters} from 'kepler.gl/reducers';\n * // Root Reducer\n * const reducers = combineReducers({\n *  keplerGl: keplerGlReducer,\n *  app: appReducer\n * });\n *\n * const composedReducer = (state, action) => {\n *  switch (action.type) {\n *    // click button to hide label from background map\n *    case 'CLICK_BUTTON':\n *      return {\n *        ...state,\n *        keplerGl: {\n *          ...state.keplerGl,\n *          foo: {\n *             ...state.keplerGl.foo,\n *             mapStyle: mapStyleUpdaters.mapConfigChangeUpdater(\n *               mapStyle,\n *               {payload: {visibleLayerGroups: {label: false, road: true, background: true}}}\n *             )\n *          }\n *        }\n *      };\n *  }\n *  return reducers(state, action);\n * };\n *\n * export default composedReducer;\n */\n\n/* eslint-disable no-unused-vars */\n// @ts-ignore\n\nvar mapStyleUpdaters = null;\n/* eslint-enable no-unused-vars */\n\n/**\n * Default initial `mapStyle`\n * @memberof mapStyleUpdaters\n * @constant\n * @property styleType - Default: `'dark'`\n * @property visibleLayerGroups - Default: `{}`\n * @property topLayerGroups - Default: `{}`\n * @property mapStyles - mapping from style key to style object\n * @property mapboxApiAccessToken - Default: `null`\n * @Property mapboxApiUrl - Default null\n * @Property mapStylesReplaceDefault - Default: `false`\n * @property inputStyle - Default: `{}`\n * @property threeDBuildingColor - Default: `[r, g, b]`\n * @public\n */\n\nvar INITIAL_MAP_STYLE = getDefaultState();\nexports.INITIAL_MAP_STYLE = INITIAL_MAP_STYLE;\n\n/**\n * Create two map styles from preset map style, one for top map one for bottom\n *\n * @param {string} styleType - current map style\n * @param {Object} visibleLayerGroups - visible layers of bottom map\n * @param {Object} topLayerGroups - visible layers of top map\n * @param {Object} mapStyles - a dictionary of all map styles\n * @returns {Object} bottomMapStyle | topMapStyle | isRaster\n */\nfunction getMapStyles(_ref) {\n  var styleType = _ref.styleType,\n    visibleLayerGroups = _ref.visibleLayerGroups,\n    topLayerGroups = _ref.topLayerGroups,\n    mapStyles = _ref.mapStyles;\n  var mapStyle = mapStyles[styleType]; // style might not be loaded yet\n\n  if (!mapStyle || !mapStyle.style) {\n    return {};\n  }\n  var editable = Object.keys(visibleLayerGroups).length;\n  var bottomMapStyle = !editable ? mapStyle.style : (0, _utils.editBottomMapStyle)({\n    id: styleType,\n    mapStyle: mapStyle,\n    visibleLayerGroups: visibleLayerGroups\n  });\n  var hasTopLayer = editable > 0 && Object.values(topLayerGroups).some(function (v) {\n    return v;\n  }); // mute top layer if not visible in bottom layer\n\n  var topLayers = hasTopLayer && Object.keys(topLayerGroups).reduce(function (accu, key) {\n    return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2[\"default\"])({}, key, topLayerGroups[key] && visibleLayerGroups[key]));\n  }, {});\n  var topMapStyle = hasTopLayer ? (0, _utils.editTopMapStyle)({\n    mapStyle: mapStyle,\n    visibleLayerGroups: topLayers\n  }) : null;\n  return {\n    bottomMapStyle: bottomMapStyle,\n    topMapStyle: topMapStyle,\n    editable: editable\n  };\n}\nfunction findLayerFillColor(layer) {\n  return layer && layer.paint && layer.paint['background-color'];\n}\nfunction get3DBuildingColor(style) {\n  // set building color to be the same as the background color.\n  if (!style.style) {\n    return (0, _utils.hexToRgb)(DEFAULT_BLDG_COLOR);\n  }\n  var backgroundLayer = (style.style.layers || []).find(function (_ref2) {\n    var id = _ref2.id;\n    return id === 'background';\n  });\n  var buildingLayer = (style.style.layers || []).find(function (_ref3) {\n    var id = _ref3.id;\n    return id.match(/building/);\n  });\n  var buildingColor = findLayerFillColor(buildingLayer) || findLayerFillColor(backgroundLayer) || DEFAULT_BLDG_COLOR; // brighten or darken building based on style\n\n  var operation = style.id.match(/(?=(dark|night))/) ? 'brighter' : 'darker';\n  var alpha = 0.2;\n  var rgbObj = (0, _d3Color.rgb)(buildingColor)[operation]([alpha]);\n  return [rgbObj.r, rgbObj.g, rgbObj.b];\n}\nfunction getLayerGroupsFromStyle(style) {\n  return Array.isArray(style.layers) ? _constants.DEFAULT_LAYER_GROUPS.filter(function (lg) {\n    return style.layers.filter(lg.filter).length;\n  }) : [];\n} // Updaters\n\n/**\n * Propagate `mapStyle` reducer with `mapboxApiAccessToken` and `mapStylesReplaceDefault`.\n * if mapStylesReplaceDefault is true mapStyles is emptied; loadMapStylesUpdater() will\n * populate mapStyles.\n *\n * @memberof mapStyleUpdaters\n * @public\n */\n\nvar initMapStyleUpdater = function initMapStyleUpdater(state, _ref4) {\n  var _ref4$payload = _ref4.payload,\n    payload = _ref4$payload === void 0 ? {} : _ref4$payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    // save mapbox access token to map style state\n    mapboxApiAccessToken: payload.mapboxApiAccessToken || state.mapboxApiAccessToken,\n    mapboxApiUrl: payload.mapboxApiUrl || state.mapboxApiUrl,\n    mapStyles: !payload.mapStylesReplaceDefault ? state.mapStyles : {},\n    mapStylesReplaceDefault: payload.mapStylesReplaceDefault || false\n  });\n}; // });\n\n/**\n * Update `visibleLayerGroups`to change layer group visibility\n * @memberof mapStyleUpdaters\n * @public\n */\n\nexports.initMapStyleUpdater = initMapStyleUpdater;\nvar mapConfigChangeUpdater = function mapConfigChangeUpdater(state, action) {\n  return _objectSpread(_objectSpread(_objectSpread({}, state), action.payload), getMapStyles(_objectSpread(_objectSpread({}, state), action.payload)));\n};\n/**\n * Change to another map style. The selected style should already been loaded into `mapStyle.mapStyles`\n * @memberof mapStyleUpdaters\n * @public\n */\n\nexports.mapConfigChangeUpdater = mapConfigChangeUpdater;\nvar mapStyleChangeUpdater = function mapStyleChangeUpdater(state, _ref5) {\n  var styleType = _ref5.payload;\n  if (!state.mapStyles[styleType]) {\n    // we might not have received the style yet\n    return state;\n  }\n  var defaultLGVisibility = (0, _utils.getDefaultLayerGroupVisibility)(state.mapStyles[styleType]);\n  var visibleLayerGroups = (0, _utils.mergeLayerGroupVisibility)(defaultLGVisibility, state.visibleLayerGroups);\n  var threeDBuildingColor = state.custom3DBuildingColor ? state.threeDBuildingColor : get3DBuildingColor(state.mapStyles[styleType]);\n  return _objectSpread(_objectSpread({}, state), {}, {\n    styleType: styleType,\n    visibleLayerGroups: visibleLayerGroups,\n    threeDBuildingColor: threeDBuildingColor\n  }, getMapStyles(_objectSpread(_objectSpread({}, state), {}, {\n    visibleLayerGroups: visibleLayerGroups,\n    styleType: styleType\n  })));\n};\n/**\n * Callback when load map style success\n * @memberof mapStyleUpdaters\n * @public\n */\n\nexports.mapStyleChangeUpdater = mapStyleChangeUpdater;\nvar loadMapStylesUpdater = function loadMapStylesUpdater(state, action) {\n  var newStyles = action.payload || {};\n  var addLayerGroups = Object.keys(newStyles).reduce(function (accu, id) {\n    return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2[\"default\"])({}, id, _objectSpread(_objectSpread({}, newStyles[id]), {}, {\n      layerGroups: newStyles[id].layerGroups || getLayerGroupsFromStyle(newStyles[id].style)\n    })));\n  }, {}); // add new styles to state\n\n  var newState = _objectSpread(_objectSpread({}, state), {}, {\n    mapStyles: _objectSpread(_objectSpread({}, state.mapStyles), addLayerGroups)\n  });\n  return newStyles[state.styleType] ? mapStyleChangeUpdater(newState, {\n    payload: state.styleType\n  }) : newState;\n};\n/**\n * Callback when load map style error\n * @memberof mapStyleUpdaters\n * @public\n */\n// do nothing for now, if didn't load, skip it\n\nexports.loadMapStylesUpdater = loadMapStylesUpdater;\nvar loadMapStyleErrUpdater = function loadMapStyleErrUpdater(state, action) {\n  return state;\n};\n/**\n * @memberof mapStyleUpdaters\n * @public\n */\n\nexports.loadMapStyleErrUpdater = loadMapStyleErrUpdater;\nvar requestMapStylesUpdater = function requestMapStylesUpdater(state, _ref6) {\n  var mapStyles = _ref6.payload;\n  var loadMapStyleTasks = getLoadMapStyleTasks(mapStyles, state.mapboxApiAccessToken, state.mapboxApiUrl);\n  return (0, _tasks.withTask)(state, loadMapStyleTasks);\n};\n/**\n * Load map style object when pass in saved map config\n * @memberof mapStyleUpdaters\n * @param state `mapStyle`\n * @param action\n * @param action.payload saved map config `{mapStyle, visState, mapState}`\n * @returns nextState or `react-pam` tasks to load map style object\n */\n\nexports.requestMapStylesUpdater = requestMapStylesUpdater;\nvar receiveMapConfigUpdater = function receiveMapConfigUpdater(state, _ref7) {\n  var config = _ref7.payload.config;\n  var _ref8 = config || {},\n    mapStyle = _ref8.mapStyle;\n  if (!mapStyle) {\n    return state;\n  } // if saved custom mapStyles load the style object\n\n  var loadMapStyleTasks = mapStyle.mapStyles ? getLoadMapStyleTasks(mapStyle.mapStyles, state.mapboxApiAccessToken, state.mapboxApiUrl) : null; // merge default mapStyles\n\n  var merged = mapStyle.mapStyles ? _objectSpread(_objectSpread({}, mapStyle), {}, {\n    mapStyles: _objectSpread(_objectSpread({}, mapStyle.mapStyles), state.mapStyles)\n  }) : mapStyle; // set custom3DBuildingColor: true if mapStyle contains threeDBuildingColor\n  // @ts-expect-error\n\n  merged.custom3DBuildingColor =\n  // @ts-expect-error\n  Boolean(mapStyle.threeDBuildingColor) || merged.custom3DBuildingColor;\n  var newState = mapConfigChangeUpdater(state, {\n    payload: merged\n  });\n  return loadMapStyleTasks ? (0, _tasks.withTask)(newState, loadMapStyleTasks) : newState;\n};\nexports.receiveMapConfigUpdater = receiveMapConfigUpdater;\nfunction getLoadMapStyleTasks(mapStyles, mapboxApiAccessToken, mapboxApiUrl) {\n  return [_tasks[\"default\"].all(Object.values(mapStyles) // @ts-expect-error\n  .map(function (_ref9) {\n    var id = _ref9.id,\n      url = _ref9.url,\n      accessToken = _ref9.accessToken;\n    return {\n      id: id,\n      url: (0, _utils.isValidStyleUrl)(url) ? (0, _utils.getStyleDownloadUrl)(url, accessToken || mapboxApiAccessToken, mapboxApiUrl) : url\n    };\n  }).map(_tasks2.LOAD_MAP_STYLE_TASK)).bimap(\n  // success\n  function (results) {\n    return (0, _actions.loadMapStyles)(results.reduce(function (accu, _ref10) {\n      var id = _ref10.id,\n        style = _ref10.style;\n      return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2[\"default\"])({}, id, _objectSpread(_objectSpread({}, mapStyles[id]), {}, {\n        style: style\n      })));\n    }, {}));\n  },\n  // error\n  _actions.loadMapStyleErr)];\n}\n/**\n * Reset map style config to initial state\n * @memberof mapStyleUpdaters\n * @param state `mapStyle`\n * @returns nextState\n * @public\n */\n\nvar resetMapConfigMapStyleUpdater = function resetMapConfigMapStyleUpdater(state) {\n  var emptyConfig = _objectSpread(_objectSpread(_objectSpread({}, INITIAL_MAP_STYLE), {}, {\n    mapboxApiAccessToken: state.mapboxApiAccessToken,\n    mapboxApiUrl: state.mapboxApiUrl,\n    mapStylesReplaceDefault: state.mapStylesReplaceDefault\n  }, state.initialState), {}, {\n    mapStyles: state.mapStyles,\n    initialState: state.initialState\n  });\n  return mapStyleChangeUpdater(emptyConfig, {\n    payload: emptyConfig.styleType\n  });\n};\n/**\n * Callback when a custom map style object is received\n * @memberof mapStyleUpdaters\n * @public\n */\n\nexports.resetMapConfigMapStyleUpdater = resetMapConfigMapStyleUpdater;\nvar loadCustomMapStyleUpdater = function loadCustomMapStyleUpdater(state, _ref11) {\n  var _ref11$payload = _ref11.payload,\n    icon = _ref11$payload.icon,\n    style = _ref11$payload.style,\n    error = _ref11$payload.error;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    // @ts-expect-error\n    inputStyle: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, state.inputStyle), style ? {\n      // @ts-expect-error\n      id: style.id || (0, _utils.generateHashId)(),\n      // make a copy of the style object\n      style: (0, _lodash[\"default\"])(style),\n      // @ts-expect-error\n      label: style.name,\n      // gathering layer group info from style json\n      layerGroups: getLayerGroupsFromStyle(style)\n    } : {}), icon ? {\n      icon: icon\n    } : {}), error !== undefined ? {\n      error: error\n    } : {})\n  });\n};\n/**\n * Input a custom map style object\n * @memberof mapStyleUpdaters\n * @public\n */\n\nexports.loadCustomMapStyleUpdater = loadCustomMapStyleUpdater;\nvar inputMapStyleUpdater = function inputMapStyleUpdater(state, _ref12) {\n  var _ref12$payload = _ref12.payload,\n    inputStyle = _ref12$payload.inputStyle,\n    mapState = _ref12$payload.mapState;\n  var updated = _objectSpread(_objectSpread({}, state.inputStyle), inputStyle);\n  var isValid = (0, _utils.isValidStyleUrl)(updated.url);\n  var icon = isValid ? (0, _utils.getStyleImageIcon)({\n    mapState: mapState,\n    styleUrl: updated.url || '',\n    mapboxApiAccessToken: updated.accessToken || state.mapboxApiAccessToken || '',\n    mapboxApiUrl: state.mapboxApiUrl || _constants.DEFAULT_MAPBOX_API_URL\n  }) : state.inputStyle.icon;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    inputStyle: _objectSpread(_objectSpread({}, updated), {}, {\n      isValid: isValid,\n      icon: icon\n    })\n  });\n};\n/**\n * Add map style from user input to reducer and set it to current style\n * This action is called when user click confirm after putting in a valid style url in the custom map style dialog.\n * It should not be called from outside kepler.gl without a valid `inputStyle` in the `mapStyle` reducer.\n * @memberof mapStyleUpdaters\n */\n\nexports.inputMapStyleUpdater = inputMapStyleUpdater;\nvar addCustomMapStyleUpdater = function addCustomMapStyleUpdater(state) {\n  // @ts-expect-error\n  var styleId = state.inputStyle.id;\n  var newState = _objectSpread(_objectSpread({}, state), {}, {\n    mapStyles: _objectSpread(_objectSpread({}, state.mapStyles), {}, (0, _defineProperty2[\"default\"])({}, styleId, state.inputStyle)),\n    // set to default\n    inputStyle: getInitialInputStyle()\n  }); // set new style\n\n  return mapStyleChangeUpdater(newState, {\n    payload: styleId\n  });\n};\n/**\n * Updates 3d building color\n * @memberof mapStyleUpdaters\n */\n\nexports.addCustomMapStyleUpdater = addCustomMapStyleUpdater;\nvar set3dBuildingColorUpdater = function set3dBuildingColorUpdater(state, _ref13) {\n  var color = _ref13.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    threeDBuildingColor: color,\n    custom3DBuildingColor: true\n  });\n};\n/**\n * Return the initial input style\n * @return Object\n */\n\nexports.set3dBuildingColorUpdater = set3dBuildingColorUpdater;\nfunction getInitialInputStyle() {\n  return {\n    accessToken: null,\n    error: false,\n    isValid: false,\n    label: null,\n    style: null,\n    url: null,\n    icon: null,\n    custom: true\n  };\n}","map":{"version":3,"names":["value","_defineProperty2","_interopRequireDefault","require","_tasks","_interopRequireWildcard","_lodash","_utils","_constants","_tasks2","_d3Color","_actions","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","DEFAULT_BLDG_COLOR","getDefaultState","visibleLayerGroups","styleType","topLayerGroups","mapStyles","DEFAULT_MAP_STYLES","reduce","accu","curr","id","mapboxApiAccessToken","mapboxApiUrl","DEFAULT_MAPBOX_API_URL","mapStylesReplaceDefault","inputStyle","getInitialInputStyle","threeDBuildingColor","hexToRgb","custom3DBuildingColor","bottomMapStyle","undefined","topMapStyle","INITIAL_MAP_STYLE","exports","_ref","mapStyle","style","editable","editBottomMapStyle","hasTopLayer","values","some","v","topLayers","findLayerFillColor","layer","paint","get3DBuildingColor","backgroundLayer","layers","find","_ref2","buildingLayer","_ref3","match","buildingColor","rgbObj","rgb","operation","alpha","r","g","b","getLayerGroupsFromStyle","Array","isArray","DEFAULT_LAYER_GROUPS","lg","_ref4$payload","_ref4","payload","state","initMapStyleUpdater","mapConfigChangeUpdater","action","getMapStyles","mapStyleChangeUpdater","_ref5","mergeLayerGroupVisibility","defaultLGVisibility","loadMapStylesUpdater","newStyles","newState","addLayerGroups","loadMapStyleErrUpdater","requestMapStylesUpdater","_ref6","withTask","loadMapStyleTasks","receiveMapConfigUpdater","_ref7","config","_ref8","getLoadMapStyleTasks","merged","Boolean","loadMapStyleErr","all","map","_ref9","url","accessToken","isValidStyleUrl","getStyleDownloadUrl","results","loadMapStyles","_ref10","initialState","emptyConfig","resetMapConfigMapStyleUpdater","loadCustomMapStyleUpdater","_ref11","_ref11$payload","icon","error","label","name","layerGroups","inputMapStyleUpdater","_ref12","_ref12$payload","mapState","updated","isValid","styleId","addCustomMapStyleUpdater","set3dBuildingColorUpdater","_ref13","color"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/reducers/src/map-style-updaters.ts"],"sourcesContent":["// Copyright (c) 2022 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport Task, {withTask} from 'react-palm/tasks';\nimport cloneDeep from 'lodash.clonedeep';\n\n// Utils\nimport {\n  getDefaultLayerGroupVisibility,\n  isValidStyleUrl,\n  getStyleDownloadUrl,\n  mergeLayerGroupVisibility,\n  editTopMapStyle,\n  editBottomMapStyle,\n  getStyleImageIcon,\n  generateHashId,\n  hexToRgb\n} from '@kepler.gl/utils';\nimport {\n  DEFAULT_MAP_STYLES,\n  DEFAULT_LAYER_GROUPS,\n  DEFAULT_MAPBOX_API_URL\n} from '@kepler.gl/constants';\nimport {LOAD_MAP_STYLE_TASK} from '@kepler.gl/tasks';\nimport {rgb} from 'd3-color';\n\nimport {\n  RGBColor,\n  LayerGroup,\n  MapStyles,\n  InputStyle,\n  VisibleLayerGroups\n} from '@kepler.gl/types';\nimport {\n  ActionTypes,\n  ReceiveMapConfigPayload,\n  KeplerGlInitPayload,\n  MapStyleActions,\n  loadMapStyles,\n  loadMapStyleErr\n} from '@kepler.gl/actions';\n\nexport type MapboxStyleUrl = string;\n\nexport type MapStyle = {\n  styleType: string;\n  visibleLayerGroups: VisibleLayerGroups;\n  topLayerGroups: VisibleLayerGroups;\n  mapStyles: MapStyles;\n  // save mapbox access token\n  mapboxApiAccessToken: string | null;\n  mapboxApiUrl: string;\n  mapStylesReplaceDefault: boolean;\n  inputStyle: InputStyle;\n  threeDBuildingColor: RGBColor;\n  custom3DBuildingColor: boolean;\n  bottomMapStyle: any;\n  topMapStyle: any;\n  initialState?: MapStyle;\n};\n\nconst DEFAULT_BLDG_COLOR = '#D1CEC7';\n\nconst getDefaultState = (): MapStyle => {\n  const visibleLayerGroups = {};\n  const styleType = 'dark';\n  const topLayerGroups = {};\n\n  return {\n    styleType,\n    visibleLayerGroups,\n    topLayerGroups,\n    mapStyles: DEFAULT_MAP_STYLES.reduce(\n      (accu, curr) => ({\n        ...accu,\n        [curr.id]: curr\n      }),\n      {}\n    ),\n    // save mapbox access token\n    mapboxApiAccessToken: null,\n    mapboxApiUrl: DEFAULT_MAPBOX_API_URL,\n    mapStylesReplaceDefault: false,\n    inputStyle: getInitialInputStyle(),\n    threeDBuildingColor: hexToRgb(DEFAULT_BLDG_COLOR),\n    custom3DBuildingColor: false,\n    bottomMapStyle: undefined,\n    topMapStyle: undefined\n  };\n};\n\n/**\n * Updaters for `mapStyle`. Can be used in your root reducer to directly modify kepler.gl's state.\n * Read more about [Using updaters](../advanced-usage/using-updaters.md)\n * @public\n * @example\n *\n * import keplerGlReducer, {mapStyleUpdaters} from 'kepler.gl/reducers';\n * // Root Reducer\n * const reducers = combineReducers({\n *  keplerGl: keplerGlReducer,\n *  app: appReducer\n * });\n *\n * const composedReducer = (state, action) => {\n *  switch (action.type) {\n *    // click button to hide label from background map\n *    case 'CLICK_BUTTON':\n *      return {\n *        ...state,\n *        keplerGl: {\n *          ...state.keplerGl,\n *          foo: {\n *             ...state.keplerGl.foo,\n *             mapStyle: mapStyleUpdaters.mapConfigChangeUpdater(\n *               mapStyle,\n *               {payload: {visibleLayerGroups: {label: false, road: true, background: true}}}\n *             )\n *          }\n *        }\n *      };\n *  }\n *  return reducers(state, action);\n * };\n *\n * export default composedReducer;\n */\n/* eslint-disable no-unused-vars */\n// @ts-ignore\nconst mapStyleUpdaters = null;\n/* eslint-enable no-unused-vars */\n/**\n * Default initial `mapStyle`\n * @memberof mapStyleUpdaters\n * @constant\n * @property styleType - Default: `'dark'`\n * @property visibleLayerGroups - Default: `{}`\n * @property topLayerGroups - Default: `{}`\n * @property mapStyles - mapping from style key to style object\n * @property mapboxApiAccessToken - Default: `null`\n * @Property mapboxApiUrl - Default null\n * @Property mapStylesReplaceDefault - Default: `false`\n * @property inputStyle - Default: `{}`\n * @property threeDBuildingColor - Default: `[r, g, b]`\n * @public\n */\nexport const INITIAL_MAP_STYLE: MapStyle = getDefaultState();\n\ninterface GetMapStylesParam {\n  styleType: string;\n  visibleLayerGroups: {[id: string]: LayerGroup | boolean};\n  topLayerGroups: {[id: string]: LayerGroup | boolean};\n  mapStyles: {[id: string]: any};\n}\n\n/**\n * Create two map styles from preset map style, one for top map one for bottom\n *\n * @param {string} styleType - current map style\n * @param {Object} visibleLayerGroups - visible layers of bottom map\n * @param {Object} topLayerGroups - visible layers of top map\n * @param {Object} mapStyles - a dictionary of all map styles\n * @returns {Object} bottomMapStyle | topMapStyle | isRaster\n */\nexport function getMapStyles({\n  styleType,\n  visibleLayerGroups,\n  topLayerGroups,\n  mapStyles\n}: GetMapStylesParam) {\n  const mapStyle = mapStyles[styleType];\n\n  // style might not be loaded yet\n  if (!mapStyle || !mapStyle.style) {\n    return {};\n  }\n\n  const editable = Object.keys(visibleLayerGroups).length;\n\n  const bottomMapStyle = !editable\n    ? mapStyle.style\n    : editBottomMapStyle({\n        id: styleType,\n        mapStyle,\n        visibleLayerGroups\n      });\n\n  const hasTopLayer = editable > 0 && Object.values(topLayerGroups).some(v => v);\n\n  // mute top layer if not visible in bottom layer\n  const topLayers =\n    hasTopLayer &&\n    Object.keys(topLayerGroups).reduce(\n      (accu, key) => ({\n        ...accu,\n        [key]: topLayerGroups[key] && visibleLayerGroups[key]\n      }),\n      {} as {[id: string]: LayerGroup | boolean}\n    );\n\n  const topMapStyle = hasTopLayer\n    ? editTopMapStyle({\n        mapStyle,\n        visibleLayerGroups: topLayers\n      })\n    : null;\n\n  return {bottomMapStyle, topMapStyle, editable};\n}\n\nfunction findLayerFillColor(layer) {\n  return layer && layer.paint && layer.paint['background-color'];\n}\n\nfunction get3DBuildingColor(style): RGBColor {\n  // set building color to be the same as the background color.\n  if (!style.style) {\n    return hexToRgb(DEFAULT_BLDG_COLOR);\n  }\n\n  const backgroundLayer = (style.style.layers || []).find(({id}) => id === 'background');\n\n  const buildingLayer = (style.style.layers || []).find(({id}) => id.match(/building/));\n\n  const buildingColor =\n    findLayerFillColor(buildingLayer) || findLayerFillColor(backgroundLayer) || DEFAULT_BLDG_COLOR;\n\n  // brighten or darken building based on style\n  const operation = style.id.match(/(?=(dark|night))/) ? 'brighter' : 'darker';\n\n  const alpha = 0.2;\n  const rgbObj = rgb(buildingColor)[operation]([alpha]);\n  return [rgbObj.r, rgbObj.g, rgbObj.b];\n}\n\nfunction getLayerGroupsFromStyle(style) {\n  return Array.isArray(style.layers)\n    ? DEFAULT_LAYER_GROUPS.filter(lg => style.layers.filter(lg.filter).length)\n    : [];\n}\n\n// Updaters\n/**\n * Propagate `mapStyle` reducer with `mapboxApiAccessToken` and `mapStylesReplaceDefault`.\n * if mapStylesReplaceDefault is true mapStyles is emptied; loadMapStylesUpdater() will\n * populate mapStyles.\n *\n * @memberof mapStyleUpdaters\n * @public\n */\nexport const initMapStyleUpdater = (\n  state: MapStyle,\n  {\n    payload = {}\n  }: {\n    type?: typeof ActionTypes.INIT;\n    payload: KeplerGlInitPayload;\n  }\n): MapStyle => ({\n  ...state,\n  // save mapbox access token to map style state\n  mapboxApiAccessToken: payload.mapboxApiAccessToken || state.mapboxApiAccessToken,\n  mapboxApiUrl: payload.mapboxApiUrl || state.mapboxApiUrl,\n  mapStyles: !payload.mapStylesReplaceDefault ? state.mapStyles : {},\n  mapStylesReplaceDefault: payload.mapStylesReplaceDefault || false\n});\n// });\n\n/**\n * Update `visibleLayerGroups`to change layer group visibility\n * @memberof mapStyleUpdaters\n * @public\n */\nexport const mapConfigChangeUpdater = (\n  state: MapStyle,\n  action: MapStyleActions.MapConfigChangeUpdaterAction\n): MapStyle => ({\n  ...state,\n  ...action.payload,\n  ...getMapStyles({\n    ...state,\n    ...action.payload\n  })\n});\n\n/**\n * Change to another map style. The selected style should already been loaded into `mapStyle.mapStyles`\n * @memberof mapStyleUpdaters\n * @public\n */\nexport const mapStyleChangeUpdater = (\n  state: MapStyle,\n  {payload: styleType}: MapStyleActions.MapStyleChangeUpdaterAction\n): MapStyle => {\n  if (!state.mapStyles[styleType]) {\n    // we might not have received the style yet\n    return state;\n  }\n  const defaultLGVisibility = getDefaultLayerGroupVisibility(state.mapStyles[styleType]);\n\n  const visibleLayerGroups = mergeLayerGroupVisibility(\n    defaultLGVisibility,\n    state.visibleLayerGroups\n  );\n\n  const threeDBuildingColor: RGBColor = state.custom3DBuildingColor\n    ? state.threeDBuildingColor\n    : get3DBuildingColor(state.mapStyles[styleType]);\n\n  return {\n    ...state,\n    styleType,\n    visibleLayerGroups,\n    threeDBuildingColor,\n    ...getMapStyles({\n      ...state,\n      visibleLayerGroups,\n      styleType\n    })\n  };\n};\n\n/**\n * Callback when load map style success\n * @memberof mapStyleUpdaters\n * @public\n */\nexport const loadMapStylesUpdater = (\n  state: MapStyle,\n  action: MapStyleActions.LoadMapStylesUpdaterAction\n): MapStyle => {\n  const newStyles = action.payload || {};\n  const addLayerGroups = Object.keys(newStyles).reduce(\n    (accu, id) => ({\n      ...accu,\n      [id]: {\n        ...newStyles[id],\n        layerGroups: newStyles[id].layerGroups || getLayerGroupsFromStyle(newStyles[id].style)\n      }\n    }),\n    {}\n  );\n\n  // add new styles to state\n  const newState = {\n    ...state,\n    mapStyles: {\n      ...state.mapStyles,\n      ...addLayerGroups\n    }\n  };\n\n  return newStyles[state.styleType]\n    ? mapStyleChangeUpdater(newState, {payload: state.styleType})\n    : newState;\n};\n\n/**\n * Callback when load map style error\n * @memberof mapStyleUpdaters\n * @public\n */\n// do nothing for now, if didn't load, skip it\nexport const loadMapStyleErrUpdater = (\n  state: MapStyle,\n  action: MapStyleActions.LoadMapStyleErrUpdaterAction\n): MapStyle => state;\n\n/**\n * @memberof mapStyleUpdaters\n * @public\n */\nexport const requestMapStylesUpdater = (\n  state: MapStyle,\n  {payload: mapStyles}: MapStyleActions.RequestMapStylesUpdaterAction\n): MapStyle => {\n  const loadMapStyleTasks = getLoadMapStyleTasks(\n    mapStyles,\n    state.mapboxApiAccessToken,\n    state.mapboxApiUrl\n  );\n  return withTask(state, loadMapStyleTasks);\n};\n\n/**\n * Load map style object when pass in saved map config\n * @memberof mapStyleUpdaters\n * @param state `mapStyle`\n * @param action\n * @param action.payload saved map config `{mapStyle, visState, mapState}`\n * @returns nextState or `react-pam` tasks to load map style object\n */\nexport const receiveMapConfigUpdater = (\n  state: MapStyle,\n  {\n    payload: {config}\n  }: {\n    type?: typeof ActionTypes.RECEIVE_MAP_CONFIG;\n    payload: ReceiveMapConfigPayload;\n  }\n): MapStyle => {\n  const {mapStyle} = config || {};\n\n  if (!mapStyle) {\n    return state;\n  }\n\n  // if saved custom mapStyles load the style object\n  const loadMapStyleTasks = mapStyle.mapStyles\n    ? getLoadMapStyleTasks(mapStyle.mapStyles, state.mapboxApiAccessToken, state.mapboxApiUrl)\n    : null;\n\n  // merge default mapStyles\n  const merged = mapStyle.mapStyles\n    ? {\n        ...mapStyle,\n        mapStyles: {\n          ...mapStyle.mapStyles,\n          ...state.mapStyles\n        }\n      }\n    : mapStyle;\n\n  // set custom3DBuildingColor: true if mapStyle contains threeDBuildingColor\n  // @ts-expect-error\n  merged.custom3DBuildingColor =\n    // @ts-expect-error\n    Boolean(mapStyle.threeDBuildingColor) || merged.custom3DBuildingColor;\n  const newState = mapConfigChangeUpdater(state, {payload: merged});\n\n  return loadMapStyleTasks ? withTask(newState, loadMapStyleTasks) : newState;\n};\n\nfunction getLoadMapStyleTasks(mapStyles, mapboxApiAccessToken, mapboxApiUrl) {\n  return [\n    Task.all(\n      Object.values(mapStyles)\n        // @ts-expect-error\n        .map(({id, url, accessToken}) => ({\n          id,\n          url: isValidStyleUrl(url)\n            ? getStyleDownloadUrl(url, accessToken || mapboxApiAccessToken, mapboxApiUrl)\n            : url\n        }))\n        .map(LOAD_MAP_STYLE_TASK)\n    ).bimap(\n      // success\n      results =>\n        loadMapStyles(\n          results.reduce(\n            (accu, {id, style}) => ({\n              ...accu,\n              [id]: {\n                ...mapStyles[id],\n                style\n              }\n            }),\n            {}\n          )\n        ),\n      // error\n      loadMapStyleErr\n    )\n  ];\n}\n/**\n * Reset map style config to initial state\n * @memberof mapStyleUpdaters\n * @param state `mapStyle`\n * @returns nextState\n * @public\n */\nexport const resetMapConfigMapStyleUpdater = (state: MapStyle): MapStyle => {\n  const emptyConfig = {\n    ...INITIAL_MAP_STYLE,\n    mapboxApiAccessToken: state.mapboxApiAccessToken,\n    mapboxApiUrl: state.mapboxApiUrl,\n    mapStylesReplaceDefault: state.mapStylesReplaceDefault,\n    ...state.initialState,\n    mapStyles: state.mapStyles,\n    initialState: state.initialState\n  };\n\n  return mapStyleChangeUpdater(emptyConfig, {payload: emptyConfig.styleType});\n};\n\n/**\n * Callback when a custom map style object is received\n * @memberof mapStyleUpdaters\n * @public\n */\nexport const loadCustomMapStyleUpdater = (\n  state: MapStyle,\n  {payload: {icon, style, error}}: MapStyleActions.LoadCustomMapStyleUpdaterAction\n): MapStyle => ({\n  ...state,\n  // @ts-expect-error\n  inputStyle: {\n    ...state.inputStyle,\n    // style json and icon will load asynchronously\n    ...(style\n      ? {\n          // @ts-expect-error\n          id: style.id || generateHashId(),\n          // make a copy of the style object\n          style: cloneDeep(style),\n          // @ts-expect-error\n          label: style.name,\n          // gathering layer group info from style json\n          layerGroups: getLayerGroupsFromStyle(style)\n        }\n      : {}),\n    ...(icon ? {icon} : {}),\n    ...(error !== undefined ? {error} : {})\n  }\n});\n\n/**\n * Input a custom map style object\n * @memberof mapStyleUpdaters\n * @public\n */\nexport const inputMapStyleUpdater = (\n  state: MapStyle,\n  {payload: {inputStyle, mapState}}: MapStyleActions.InputMapStyleUpdaterAction\n): MapStyle => {\n  const updated = {\n    ...state.inputStyle,\n    ...inputStyle\n  };\n\n  const isValid = isValidStyleUrl(updated.url);\n  const icon = isValid\n    ? getStyleImageIcon({\n        mapState,\n        styleUrl: updated.url || '',\n        mapboxApiAccessToken: updated.accessToken || state.mapboxApiAccessToken || '',\n        mapboxApiUrl: state.mapboxApiUrl || DEFAULT_MAPBOX_API_URL\n      })\n    : state.inputStyle.icon;\n\n  return {\n    ...state,\n    inputStyle: {\n      ...updated,\n      isValid,\n      icon\n    }\n  };\n};\n\n/**\n * Add map style from user input to reducer and set it to current style\n * This action is called when user click confirm after putting in a valid style url in the custom map style dialog.\n * It should not be called from outside kepler.gl without a valid `inputStyle` in the `mapStyle` reducer.\n * @memberof mapStyleUpdaters\n */\nexport const addCustomMapStyleUpdater = (state: MapStyle): MapStyle => {\n  // @ts-expect-error\n  const styleId = state.inputStyle.id;\n  const newState = {\n    ...state,\n    mapStyles: {\n      ...state.mapStyles,\n      [styleId]: state.inputStyle\n    },\n    // set to default\n    inputStyle: getInitialInputStyle()\n  };\n  // set new style\n  return mapStyleChangeUpdater(newState, {payload: styleId});\n};\n\n/**\n * Updates 3d building color\n * @memberof mapStyleUpdaters\n */\nexport const set3dBuildingColorUpdater = (\n  state: MapStyle,\n  {payload: color}: MapStyleActions.Set3dBuildingColorUpdaterAction\n): MapStyle => ({\n  ...state,\n  threeDBuildingColor: color,\n  custom3DBuildingColor: true\n});\n\n/**\n * Return the initial input style\n * @return Object\n */\nexport function getInitialInputStyle() {\n  return {\n    accessToken: null,\n    error: false,\n    isValid: false,\n    label: null,\n    style: null,\n    url: null,\n    icon: null,\n    custom: true\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}