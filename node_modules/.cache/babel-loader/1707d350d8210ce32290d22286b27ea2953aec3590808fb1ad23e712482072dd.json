{"ast":null,"code":"import _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { resolvePath } from '@loaders.gl/loader-utils';\nexport function generateUrl(getUrl, options, urlOptions) {\n  var url = typeof getUrl === 'function' ? getUrl(_objectSpread(_objectSpread({}, options), urlOptions)) : getUrl;\n  var baseUrl = options.baseUrl;\n  if (baseUrl) {\n    url = baseUrl[baseUrl.length - 1] === '/' ? \"\".concat(baseUrl).concat(url) : \"\".concat(baseUrl, \"/\").concat(url);\n  }\n  return resolvePath(url);\n}","map":{"version":3,"names":["resolvePath","generateUrl","getUrl","options","urlOptions","url","_objectSpread","baseUrl","length","concat"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/textures/src/lib/texture-api/generate-url.ts"],"sourcesContent":["// loaders.gl, MIT license\nimport {resolvePath} from '@loaders.gl/loader-utils';\nimport type {GetUrl, UrlOptions} from './texture-api-types';\n\n// Generate a url by calling getUrl with mix of options, applying options.baseUrl\nexport function generateUrl(\n  getUrl: string | GetUrl,\n  options: UrlOptions,\n  urlOptions: Record<string, any>\n): string {\n  // Get url\n  let url = typeof getUrl === 'function' ? getUrl({...options, ...urlOptions}) : getUrl;\n\n  // Apply options.baseUrl\n  const baseUrl = options.baseUrl;\n  if (baseUrl) {\n    url = baseUrl[baseUrl.length - 1] === '/' ? `${baseUrl}${url}` : `${baseUrl}/${url}`;\n  }\n\n  return resolvePath(url);\n}\n"],"mappings":";AACA,SAAQA,WAAW,QAAO,0BAA0B;AAIpD,OAAO,SAASC,WAAWA,CACzBC,MAAuB,EACvBC,OAAmB,EACnBC,UAA+B,EACvB;EAER,IAAIC,GAAG,GAAG,OAAOH,MAAM,KAAK,UAAU,GAAGA,MAAM,CAAAI,aAAA,CAAAA,aAAA,KAAKH,OAAO,GAAKC,UAAA,EAAY,GAAGF,MAAM;EAGrF,IAAMK,OAAO,GAAGJ,OAAO,CAACI,OAAO;EAC/B,IAAIA,OAAO,EAAE;IACXF,GAAG,GAAGE,OAAO,CAACA,OAAO,CAACC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,MAAAC,MAAA,CAAMF,OAAO,EAAAE,MAAA,CAAGJ,GAAG,OAAAI,MAAA,CAAQF,OAAO,OAAAE,MAAA,CAAIJ,GAAG,CAAE;EACtF;EAEA,OAAOL,WAAW,CAACK,GAAG,CAAC;AACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}