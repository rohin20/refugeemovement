{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nimport { RowTableBatch } from '@loaders.gl/tables';\nimport parseJSONSync from './lib/parse-json';\nimport parseJSONInBatches from './lib/parse-json-in-batches';\nvar VERSION = typeof \"2.3.13\" !== 'undefined' ? \"2.3.13\" : 'latest';\nvar JSONLoaderOptions = {\n  json: {\n    TableBatch: RowTableBatch,\n    batchSize: 'auto',\n    _rootObjectBatches: false,\n    table: false,\n    jsonpaths: []\n  }\n};\nexport var JSONLoader = {\n  id: 'json',\n  name: 'JSON',\n  version: VERSION,\n  extensions: ['json', 'geojson'],\n  mimeTypes: ['application/json'],\n  category: 'table',\n  text: true,\n  parse: parse,\n  parseTextSync: parseTextSync,\n  parseInBatches: parseInBatches,\n  options: JSONLoaderOptions,\n  deprecatedOptions: {\n    json: {\n      _rootObjectBatches: 'metadata'\n    }\n  }\n};\nfunction parse(_x, _x2) {\n  return _parse.apply(this, arguments);\n}\nfunction _parse() {\n  _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer, options) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", parseTextSync(new TextDecoder().decode(arrayBuffer), options));\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parse.apply(this, arguments);\n}\nfunction parseTextSync(text, options) {\n  options = _objectSpread(_objectSpread({}, JSONLoaderOptions), options);\n  options.json = _objectSpread(_objectSpread({}, JSONLoaderOptions.json), options.json);\n  return parseJSONSync(text, options);\n}\nfunction parseInBatches(_x3, _x4) {\n  return _parseInBatches.apply(this, arguments);\n}\nfunction _parseInBatches() {\n  _parseInBatches = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(asyncIterator, options) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = _objectSpread(_objectSpread({}, JSONLoaderOptions), options);\n            options.json = _objectSpread(_objectSpread({}, JSONLoaderOptions.json), options.json);\n            return _context2.abrupt(\"return\", parseJSONInBatches(asyncIterator, options));\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _parseInBatches.apply(this, arguments);\n}","map":{"version":3,"names":["RowTableBatch","parseJSONSync","parseJSONInBatches","VERSION","JSONLoaderOptions","json","TableBatch","batchSize","_rootObjectBatches","table","jsonpaths","JSONLoader","id","name","version","extensions","mimeTypes","category","text","parse","parseTextSync","parseInBatches","options","deprecatedOptions","_callee","arrayBuffer","_regeneratorRuntime","wrap","_callee$","_context","prev","next","abrupt","TextDecoder","decode","stop","_objectSpread","_callee2","asyncIterator","_callee2$","_context2"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/json/src/json-loader.js"],"sourcesContent":["/* global TextDecoder */\nimport {RowTableBatch} from '@loaders.gl/tables';\nimport parseJSONSync from './lib/parse-json';\nimport parseJSONInBatches from './lib/parse-json-in-batches';\n/** @typedef {import('@loaders.gl/loader-utils').LoaderObject} LoaderObject */\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nconst JSONLoaderOptions = {\n  json: {\n    TableBatch: RowTableBatch,\n    batchSize: 'auto',\n    _rootObjectBatches: false,\n    table: false,\n    jsonpaths: []\n  }\n};\n\n/** @type {LoaderObject} */\nexport const JSONLoader = {\n  id: 'json',\n  name: 'JSON',\n  version: VERSION,\n  extensions: ['json', 'geojson'],\n  mimeTypes: ['application/json'],\n  // TODO - support various line based JSON formats\n  /*\n  extensions: {\n    json: null,\n    jsonl: {stream: true},\n    ndjson: {stream: true}\n  },\n  mimeTypes: {\n    'application/json': null,\n    'application/json-seq': {stream: true},\n    'application/x-ndjson': {stream: true}\n  },\n  */\n  category: 'table',\n  text: true,\n  parse,\n  parseTextSync,\n  parseInBatches,\n  options: JSONLoaderOptions,\n  deprecatedOptions: {\n    json: {\n      _rootObjectBatches: 'metadata'\n    }\n  }\n};\n\nasync function parse(arrayBuffer, options) {\n  return parseTextSync(new TextDecoder().decode(arrayBuffer), options);\n}\n\nfunction parseTextSync(text, options) {\n  // Apps can call the parse method directly, we so apply default options here\n  options = {...JSONLoaderOptions, ...options};\n  options.json = {...JSONLoaderOptions.json, ...options.json};\n  return parseJSONSync(text, options);\n}\n\nasync function parseInBatches(asyncIterator, options) {\n  // Apps can call the parse method directly, we so apply default options here\n  options = {...JSONLoaderOptions, ...options};\n  options.json = {...JSONLoaderOptions.json, ...options.json};\n  return parseJSONInBatches(asyncIterator, options);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAQA,aAAR,QAA4B,oBAA5B;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,kBAAP,MAA+B,6BAA/B;AAKA,IAAMC,OAAO,GAAG,oBAAuB,WAAvB,cAAmD,QAAnE;AAEA,IAAMC,iBAAiB,GAAG;EACxBC,IAAI,EAAE;IACJC,UAAU,EAAEN,aADR;IAEJO,SAAS,EAAE,MAFP;IAGJC,kBAAkB,EAAE,KAHhB;IAIJC,KAAK,EAAE,KAJH;IAKJC,SAAS,EAAE;EALP;AADkB,CAA1B;AAWA,OAAO,IAAMC,UAAU,GAAG;EACxBC,EAAE,EAAE,MADoB;EAExBC,IAAI,EAAE,MAFkB;EAGxBC,OAAO,EAAEX,OAHe;EAIxBY,UAAU,EAAE,CAAC,MAAD,EAAS,SAAT,CAJY;EAKxBC,SAAS,EAAE,CAAC,kBAAD,CALa;EAmBxBC,QAAQ,EAAE,OAnBc;EAoBxBC,IAAI,EAAE,IApBkB;EAqBxBC,KAAK,EAALA,KArBwB;EAsBxBC,aAAa,EAAbA,aAtBwB;EAuBxBC,cAAc,EAAdA,cAvBwB;EAwBxBC,OAAO,EAAElB,iBAxBe;EAyBxBmB,iBAAiB,EAAE;IACjBlB,IAAI,EAAE;MACJG,kBAAkB,EAAE;IADhB;EADW;AAzBK,CAAnB;SAgCQW,K;;;;sDAAf,SAAAK,QAAqBC,WAArB,EAAkCH,OAAlC;IAAA,OAAAI,mBAAA,CAAAC,IAAA,UAAAC,SAAAC,QAAA;MAAA;QAAA,QAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAA,OAAAF,QAAA,CAAAG,MAAA,WACSZ,aAAa,CAAC,IAAIa,WAAJ,GAAkBC,MAAlB,CAAyBT,WAAzB,CAAD,EAAwCH,OAAxC,CADtB;UAAA;UAAA;YAAA,OAAAO,QAAA,CAAAM,IAAA;QAAA;MAAA;IAAA,GAAAX,OAAA;EAAA,C;;;AAIA,SAASJ,aAATA,CAAuBF,IAAvB,EAA6BI,OAA7B,EAAsC;EAEpCA,OAAO,GAAAc,aAAA,CAAAA,aAAA,KAAOhC,iBAAP,GAA6BkB,OAA7B,CAAP;EACAA,OAAO,CAACjB,IAAR,GAAA+B,aAAA,CAAAA,aAAA,KAAmBhC,iBAAiB,CAACC,IAArC,GAA8CiB,OAAO,CAACjB,IAAtD;EACA,OAAOJ,aAAa,CAACiB,IAAD,EAAOI,OAAP,CAApB;AACD;SAEcD,c;;;;+DAAf,SAAAgB,SAA8BC,aAA9B,EAA6ChB,OAA7C;IAAA,OAAAI,mBAAA,CAAAC,IAAA,UAAAY,UAAAC,SAAA;MAAA;QAAA,QAAAA,SAAA,CAAAV,IAAA,GAAAU,SAAA,CAAAT,IAAA;UAAA;YAEET,OAAO,GAAAc,aAAA,CAAAA,aAAA,KAAOhC,iBAAP,GAA6BkB,OAA7B,CAAP;YACAA,OAAO,CAACjB,IAAR,GAAA+B,aAAA,CAAAA,aAAA,KAAmBhC,iBAAiB,CAACC,IAArC,GAA8CiB,OAAO,CAACjB,IAAtD;YAHF,OAAAmC,SAAA,CAAAR,MAAA,WAIS9B,kBAAkB,CAACoC,aAAD,EAAgBhB,OAAhB,CAJ3B;UAAA;UAAA;YAAA,OAAAkB,SAAA,CAAAL,IAAA;QAAA;MAAA;IAAA,GAAAE,QAAA;EAAA,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}