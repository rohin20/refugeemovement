{"ast":null,"code":"import _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { assert } from '@loaders.gl/loader-utils';\nexport function isLoaderObject(loader) {\n  var _loader;\n  if (!loader) {\n    return false;\n  }\n  if (Array.isArray(loader)) {\n    loader = loader[0];\n  }\n  var hasExtensions = Array.isArray((_loader = loader) === null || _loader === void 0 ? void 0 : _loader.extensions);\n  return hasExtensions;\n}\nexport function normalizeLoader(loader) {\n  var _loader2, _loader3;\n  assert(loader, 'null loader');\n  assert(isLoaderObject(loader), 'invalid loader');\n  var options;\n  if (Array.isArray(loader)) {\n    options = loader[1];\n    loader = loader[0];\n    loader = _objectSpread(_objectSpread({}, loader), {}, {\n      options: _objectSpread(_objectSpread({}, loader.options), options)\n    });\n  }\n  if ((_loader2 = loader) !== null && _loader2 !== void 0 && _loader2.parseTextSync || (_loader3 = loader) !== null && _loader3 !== void 0 && _loader3.parseText) {\n    loader.text = true;\n  }\n  if (!loader.text) {\n    loader.binary = true;\n  }\n  return loader;\n}","map":{"version":3,"names":["assert","isLoaderObject","loader","_loader","Array","isArray","hasExtensions","extensions","normalizeLoader","_loader2","_loader3","options","_objectSpread","parseTextSync","parseText","text","binary"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/processors/node_modules/@loaders.gl/core/src/lib/loader-utils/normalize-loader.ts"],"sourcesContent":["import type {Loader} from '@loaders.gl/loader-utils';\nimport {assert} from '@loaders.gl/loader-utils';\n\nexport function isLoaderObject(loader?: any): boolean {\n  if (!loader) {\n    return false;\n  }\n\n  if (Array.isArray(loader)) {\n    loader = loader[0];\n  }\n\n  const hasExtensions = Array.isArray(loader?.extensions);\n\n  /* Now handled by types and worker loaders do not have these\n  let hasParser =\n    loader.parseTextSync ||\n    loader.parseSync ||\n    loader.parse ||\n    loader.parseStream || // TODO Remove, Replace with parseInBatches\n    loader.parseInBatches;\n  */\n\n  return hasExtensions;\n}\n\nexport function normalizeLoader(loader: Loader): Loader {\n  // This error is fairly easy to trigger by mixing up import statements etc\n  // So we make an exception and add a developer error message for this case\n  // To help new users from getting stuck here\n  assert(loader, 'null loader');\n  assert(isLoaderObject(loader), 'invalid loader');\n\n  // NORMALIZE [LOADER, OPTIONS] => LOADER\n\n  // If [loader, options], create a new loaders object with options merged in\n  let options;\n  if (Array.isArray(loader)) {\n    options = loader[1];\n    loader = loader[0];\n    loader = {\n      ...loader,\n      options: {...loader.options, ...options}\n    };\n  }\n\n  // NORMALIZE text and binary flags\n  // Ensure at least one of text/binary flags are properly set\n\n  // @ts-expect-error\n  if (loader?.parseTextSync || loader?.parseText) {\n    loader.text = true;\n  }\n\n  if (!loader.text) {\n    loader.binary = true;\n  }\n\n  return loader;\n}\n"],"mappings":";AACA,SAAQA,MAAM,QAAO,0BAA0B;AAE/C,OAAO,SAASC,cAAcA,CAACC,MAAY,EAAW;EAAA,IAAAC,OAAA;EACpD,IAAI,CAACD,MAAM,EAAE;IACX,OAAO,KAAK;EACd;EAEA,IAAIE,KAAK,CAACC,OAAO,CAACH,MAAM,CAAC,EAAE;IACzBA,MAAM,GAAGA,MAAM,CAAC,CAAC,CAAC;EACpB;EAEA,IAAMI,aAAa,GAAGF,KAAK,CAACC,OAAO,EAAAF,OAAA,GAACD,MAAM,cAAAC,OAAA,uBAANA,OAAA,CAAQI,UAAU,CAAC;EAWvD,OAAOD,aAAa;AACtB;AAEA,OAAO,SAASE,eAAeA,CAACN,MAAc,EAAU;EAAA,IAAAO,QAAA,EAAAC,QAAA;EAItDV,MAAM,CAACE,MAAM,EAAE,aAAa,CAAC;EAC7BF,MAAM,CAACC,cAAc,CAACC,MAAM,CAAC,EAAE,gBAAgB,CAAC;EAKhD,IAAIS,OAAO;EACX,IAAIP,KAAK,CAACC,OAAO,CAACH,MAAM,CAAC,EAAE;IACzBS,OAAO,GAAGT,MAAM,CAAC,CAAC,CAAC;IACnBA,MAAM,GAAGA,MAAM,CAAC,CAAC,CAAC;IAClBA,MAAM,GAAAU,aAAA,CAAAA,aAAA,KACDV,MAAM;MACTS,OAAO,EAAAC,aAAA,CAAAA,aAAA,KAAMV,MAAM,CAACS,OAAO,GAAKA,OAAA;IAAO,EACxC;EACH;EAMA,IAAI,CAAAF,QAAA,GAAAP,MAAM,cAAAO,QAAA,eAANA,QAAA,CAAQI,aAAa,KAAAH,QAAA,GAAIR,MAAM,cAAAQ,QAAA,eAANA,QAAA,CAAQI,SAAS,EAAE;IAC9CZ,MAAM,CAACa,IAAI,GAAG,IAAI;EACpB;EAEA,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE;IAChBb,MAAM,CAACc,MAAM,GAAG,IAAI;EACtB;EAEA,OAAOd,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}