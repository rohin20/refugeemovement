{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nexport function geojsonToBinary(features) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var firstPassData = firstPass(features);\n  return secondPass(features, firstPassData, {\n    coordLength: options.coordLength || firstPassData.coordLength || 2,\n    numericPropKeys: options.numericPropKeys || firstPassData.numericPropKeys,\n    PositionDataType: options.PositionDataType || Float32Array\n  });\n}\nexport var TEST_EXPORTS = {\n  firstPass: firstPass,\n  secondPass: secondPass\n};\nfunction firstPass(features) {\n  var pointPositionsCount = 0;\n  var pointFeaturesCount = 0;\n  var linePositionsCount = 0;\n  var linePathsCount = 0;\n  var lineFeaturesCount = 0;\n  var polygonPositionsCount = 0;\n  var polygonObjectsCount = 0;\n  var polygonRingsCount = 0;\n  var polygonFeaturesCount = 0;\n  var coordLengths = new Set();\n  var numericPropKeys = {};\n  var _iterator = _createForOfIteratorHelper(features),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var feature = _step.value;\n      var geometry = feature.geometry;\n      switch (geometry.type) {\n        case 'Point':\n          pointFeaturesCount++;\n          pointPositionsCount++;\n          coordLengths.add(geometry.coordinates.length);\n          break;\n        case 'MultiPoint':\n          pointFeaturesCount++;\n          pointPositionsCount += geometry.coordinates.length;\n          var _iterator2 = _createForOfIteratorHelper(geometry.coordinates),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var point = _step2.value;\n              coordLengths.add(point.length);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n          break;\n        case 'LineString':\n          lineFeaturesCount++;\n          linePositionsCount += geometry.coordinates.length;\n          linePathsCount++;\n          var _iterator3 = _createForOfIteratorHelper(geometry.coordinates),\n            _step3;\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var coord = _step3.value;\n              coordLengths.add(coord.length);\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n          break;\n        case 'MultiLineString':\n          lineFeaturesCount++;\n          var _iterator4 = _createForOfIteratorHelper(geometry.coordinates),\n            _step4;\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var line = _step4.value;\n              linePositionsCount += line.length;\n              linePathsCount++;\n              var _iterator5 = _createForOfIteratorHelper(line),\n                _step5;\n              try {\n                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                  var _coord = _step5.value;\n                  coordLengths.add(_coord.length);\n                }\n              } catch (err) {\n                _iterator5.e(err);\n              } finally {\n                _iterator5.f();\n              }\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n          break;\n        case 'Polygon':\n          polygonFeaturesCount++;\n          polygonObjectsCount++;\n          polygonRingsCount += geometry.coordinates.length;\n          polygonPositionsCount += flatten(geometry.coordinates).length;\n          var _iterator6 = _createForOfIteratorHelper(flatten(geometry.coordinates)),\n            _step6;\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var _coord2 = _step6.value;\n              coordLengths.add(_coord2.length);\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n          break;\n        case 'MultiPolygon':\n          polygonFeaturesCount++;\n          var _iterator7 = _createForOfIteratorHelper(geometry.coordinates),\n            _step7;\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var polygon = _step7.value;\n              polygonObjectsCount++;\n              polygonRingsCount += polygon.length;\n              polygonPositionsCount += flatten(polygon).length;\n              var _iterator8 = _createForOfIteratorHelper(flatten(polygon)),\n                _step8;\n              try {\n                for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                  var _coord3 = _step8.value;\n                  coordLengths.add(_coord3.length);\n                }\n              } catch (err) {\n                _iterator8.e(err);\n              } finally {\n                _iterator8.f();\n              }\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n          break;\n        default:\n          throw new Error(\"Unsupported geometry type: \".concat(geometry.type));\n      }\n      if (feature.properties) {\n        for (var key in feature.properties) {\n          var val = feature.properties[key];\n          numericPropKeys[key] = numericPropKeys[key] || numericPropKeys[key] === undefined ? isNumeric(val) : numericPropKeys[key];\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return {\n    pointPositionsCount: pointPositionsCount,\n    pointFeaturesCount: pointFeaturesCount,\n    linePositionsCount: linePositionsCount,\n    linePathsCount: linePathsCount,\n    lineFeaturesCount: lineFeaturesCount,\n    coordLength: coordLengths.size > 0 && Math.max.apply(Math, _toConsumableArray(coordLengths)),\n    polygonPositionsCount: polygonPositionsCount,\n    polygonObjectsCount: polygonObjectsCount,\n    polygonRingsCount: polygonRingsCount,\n    polygonFeaturesCount: polygonFeaturesCount,\n    numericPropKeys: Object.keys(numericPropKeys).filter(function (k) {\n      return numericPropKeys[k];\n    })\n  };\n}\nfunction secondPass(features) {\n  var firstPassData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var pointPositionsCount = firstPassData.pointPositionsCount,\n    pointFeaturesCount = firstPassData.pointFeaturesCount,\n    linePositionsCount = firstPassData.linePositionsCount,\n    linePathsCount = firstPassData.linePathsCount,\n    lineFeaturesCount = firstPassData.lineFeaturesCount,\n    polygonPositionsCount = firstPassData.polygonPositionsCount,\n    polygonObjectsCount = firstPassData.polygonObjectsCount,\n    polygonRingsCount = firstPassData.polygonRingsCount,\n    polygonFeaturesCount = firstPassData.polygonFeaturesCount;\n  var coordLength = options.coordLength,\n    numericPropKeys = options.numericPropKeys,\n    _options$PositionData = options.PositionDataType,\n    PositionDataType = _options$PositionData === void 0 ? Float32Array : _options$PositionData;\n  var GlobalFeatureIdsDataType = features.length > 65535 ? Uint32Array : Uint16Array;\n  var points = {\n    positions: new PositionDataType(pointPositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(pointPositionsCount),\n    featureIds: pointFeaturesCount > 65535 ? new Uint32Array(pointPositionsCount) : new Uint16Array(pointPositionsCount),\n    numericProps: {},\n    properties: []\n  };\n  var lines = {\n    pathIndices: linePositionsCount > 65535 ? new Uint32Array(linePathsCount + 1) : new Uint16Array(linePathsCount + 1),\n    positions: new PositionDataType(linePositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(linePositionsCount),\n    featureIds: lineFeaturesCount > 65535 ? new Uint32Array(linePositionsCount) : new Uint16Array(linePositionsCount),\n    numericProps: {},\n    properties: []\n  };\n  var polygons = {\n    polygonIndices: polygonPositionsCount > 65535 ? new Uint32Array(polygonObjectsCount + 1) : new Uint16Array(polygonObjectsCount + 1),\n    primitivePolygonIndices: polygonPositionsCount > 65535 ? new Uint32Array(polygonRingsCount + 1) : new Uint16Array(polygonRingsCount + 1),\n    positions: new PositionDataType(polygonPositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(polygonPositionsCount),\n    featureIds: polygonFeaturesCount > 65535 ? new Uint32Array(polygonPositionsCount) : new Uint16Array(polygonPositionsCount),\n    numericProps: {},\n    properties: []\n  };\n  for (var _i = 0, _arr = [points, lines, polygons]; _i < _arr.length; _i++) {\n    var object = _arr[_i];\n    var _iterator9 = _createForOfIteratorHelper(numericPropKeys),\n      _step9;\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var propName = _step9.value;\n        object.numericProps[propName] = new Float32Array(object.positions.length / coordLength);\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n  }\n  lines.pathIndices[linePathsCount] = linePositionsCount;\n  polygons.polygonIndices[polygonObjectsCount] = polygonPositionsCount;\n  polygons.primitivePolygonIndices[polygonRingsCount] = polygonPositionsCount;\n  var indexMap = {\n    pointPosition: 0,\n    pointFeature: 0,\n    linePosition: 0,\n    linePath: 0,\n    lineFeature: 0,\n    polygonPosition: 0,\n    polygonObject: 0,\n    polygonRing: 0,\n    polygonFeature: 0,\n    feature: 0\n  };\n  var _iterator10 = _createForOfIteratorHelper(features),\n    _step10;\n  try {\n    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n      var feature = _step10.value;\n      var geometry = feature.geometry;\n      var properties = feature.properties || {};\n      switch (geometry.type) {\n        case 'Point':\n          handlePoint(geometry.coordinates, points, indexMap, coordLength, properties);\n          points.properties.push(keepStringProperties(properties, numericPropKeys));\n          indexMap.pointFeature++;\n          break;\n        case 'MultiPoint':\n          handleMultiPoint(geometry.coordinates, points, indexMap, coordLength, properties);\n          points.properties.push(keepStringProperties(properties, numericPropKeys));\n          indexMap.pointFeature++;\n          break;\n        case 'LineString':\n          handleLineString(geometry.coordinates, lines, indexMap, coordLength, properties);\n          lines.properties.push(keepStringProperties(properties, numericPropKeys));\n          indexMap.lineFeature++;\n          break;\n        case 'MultiLineString':\n          handleMultiLineString(geometry.coordinates, lines, indexMap, coordLength, properties);\n          lines.properties.push(keepStringProperties(properties, numericPropKeys));\n          indexMap.lineFeature++;\n          break;\n        case 'Polygon':\n          handlePolygon(geometry.coordinates, polygons, indexMap, coordLength, properties);\n          polygons.properties.push(keepStringProperties(properties, numericPropKeys));\n          indexMap.polygonFeature++;\n          break;\n        case 'MultiPolygon':\n          handleMultiPolygon(geometry.coordinates, polygons, indexMap, coordLength, properties);\n          polygons.properties.push(keepStringProperties(properties, numericPropKeys));\n          indexMap.polygonFeature++;\n          break;\n        default:\n          throw new Error('Invalid geometry type');\n      }\n      indexMap.feature++;\n    }\n  } catch (err) {\n    _iterator10.e(err);\n  } finally {\n    _iterator10.f();\n  }\n  return makeAccessorObjects(points, lines, polygons, coordLength);\n}\nfunction handlePoint(coords, points, indexMap, coordLength, properties) {\n  points.positions.set(coords, indexMap.pointPosition * coordLength);\n  points.globalFeatureIds[indexMap.pointPosition] = indexMap.feature;\n  points.featureIds[indexMap.pointPosition] = indexMap.pointFeature;\n  fillNumericProperties(points, properties, indexMap.pointPosition, 1);\n  indexMap.pointPosition++;\n}\nfunction handleMultiPoint(coords, points, indexMap, coordLength, properties) {\n  var _iterator11 = _createForOfIteratorHelper(coords),\n    _step11;\n  try {\n    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n      var point = _step11.value;\n      handlePoint(point, points, indexMap, coordLength, properties);\n    }\n  } catch (err) {\n    _iterator11.e(err);\n  } finally {\n    _iterator11.f();\n  }\n}\nfunction handleLineString(coords, lines, indexMap, coordLength, properties) {\n  lines.pathIndices[indexMap.linePath] = indexMap.linePosition;\n  indexMap.linePath++;\n  fillCoords(lines.positions, coords, indexMap.linePosition, coordLength);\n  var nPositions = coords.length;\n  fillNumericProperties(lines, properties, indexMap.linePosition, nPositions);\n  lines.globalFeatureIds.set(new Uint32Array(nPositions).fill(indexMap.feature), indexMap.linePosition);\n  lines.featureIds.set(new Uint32Array(nPositions).fill(indexMap.lineFeature), indexMap.linePosition);\n  indexMap.linePosition += nPositions;\n}\nfunction handleMultiLineString(coords, lines, indexMap, coordLength, properties) {\n  var _iterator12 = _createForOfIteratorHelper(coords),\n    _step12;\n  try {\n    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n      var line = _step12.value;\n      handleLineString(line, lines, indexMap, coordLength, properties);\n    }\n  } catch (err) {\n    _iterator12.e(err);\n  } finally {\n    _iterator12.f();\n  }\n}\nfunction handlePolygon(coords, polygons, indexMap, coordLength, properties) {\n  polygons.polygonIndices[indexMap.polygonObject] = indexMap.polygonPosition;\n  indexMap.polygonObject++;\n  var _iterator13 = _createForOfIteratorHelper(coords),\n    _step13;\n  try {\n    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n      var ring = _step13.value;\n      polygons.primitivePolygonIndices[indexMap.polygonRing] = indexMap.polygonPosition;\n      indexMap.polygonRing++;\n      fillCoords(polygons.positions, ring, indexMap.polygonPosition, coordLength);\n      var nPositions = ring.length;\n      fillNumericProperties(polygons, properties, indexMap.polygonPosition, nPositions);\n      polygons.globalFeatureIds.set(new Uint32Array(nPositions).fill(indexMap.feature), indexMap.polygonPosition);\n      polygons.featureIds.set(new Uint32Array(nPositions).fill(indexMap.polygonFeature), indexMap.polygonPosition);\n      indexMap.polygonPosition += nPositions;\n    }\n  } catch (err) {\n    _iterator13.e(err);\n  } finally {\n    _iterator13.f();\n  }\n}\nfunction handleMultiPolygon(coords, polygons, indexMap, coordLength, properties) {\n  var _iterator14 = _createForOfIteratorHelper(coords),\n    _step14;\n  try {\n    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n      var polygon = _step14.value;\n      handlePolygon(polygon, polygons, indexMap, coordLength, properties);\n    }\n  } catch (err) {\n    _iterator14.e(err);\n  } finally {\n    _iterator14.f();\n  }\n}\nfunction makeAccessorObjects(points, lines, polygons, coordLength) {\n  var returnObj = {\n    points: {\n      positions: {\n        value: points.positions,\n        size: coordLength\n      },\n      globalFeatureIds: {\n        value: points.globalFeatureIds,\n        size: 1\n      },\n      featureIds: {\n        value: points.featureIds,\n        size: 1\n      },\n      numericProps: points.numericProps,\n      properties: points.properties\n    },\n    lines: {\n      pathIndices: {\n        value: lines.pathIndices,\n        size: 1\n      },\n      positions: {\n        value: lines.positions,\n        size: coordLength\n      },\n      globalFeatureIds: {\n        value: lines.globalFeatureIds,\n        size: 1\n      },\n      featureIds: {\n        value: lines.featureIds,\n        size: 1\n      },\n      numericProps: lines.numericProps,\n      properties: lines.properties\n    },\n    polygons: {\n      polygonIndices: {\n        value: polygons.polygonIndices,\n        size: 1\n      },\n      primitivePolygonIndices: {\n        value: polygons.primitivePolygonIndices,\n        size: 1\n      },\n      positions: {\n        value: polygons.positions,\n        size: coordLength\n      },\n      globalFeatureIds: {\n        value: polygons.globalFeatureIds,\n        size: 1\n      },\n      featureIds: {\n        value: polygons.featureIds,\n        size: 1\n      },\n      numericProps: polygons.numericProps,\n      properties: polygons.properties\n    }\n  };\n  for (var geomType in returnObj) {\n    for (var numericProp in returnObj[geomType].numericProps) {\n      returnObj[geomType].numericProps[numericProp] = {\n        value: returnObj[geomType].numericProps[numericProp],\n        size: 1\n      };\n    }\n  }\n  return returnObj;\n}\nfunction fillNumericProperties(object, properties, index, length) {\n  for (var numericPropName in object.numericProps) {\n    if (numericPropName in properties) {\n      object.numericProps[numericPropName].set(new Array(length).fill(properties[numericPropName]), index);\n    }\n  }\n}\nfunction keepStringProperties(properties, numericKeys) {\n  var props = {};\n  for (var key in properties) {\n    if (!numericKeys.includes(key)) {\n      props[key] = properties[key];\n    }\n  }\n  return props;\n}\nfunction fillCoords(array, coords, startVertex, coordLength) {\n  var index = startVertex * coordLength;\n  var _iterator15 = _createForOfIteratorHelper(coords),\n    _step15;\n  try {\n    for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n      var coord = _step15.value;\n      array.set(coord, index);\n      index += coordLength;\n    }\n  } catch (err) {\n    _iterator15.e(err);\n  } finally {\n    _iterator15.f();\n  }\n}\nfunction flatten(arrays) {\n  var _ref;\n  return (_ref = []).concat.apply(_ref, _toConsumableArray(arrays));\n}\nfunction isNumeric(x) {\n  return Number.isFinite(x);\n}","map":{"version":3,"names":["geojsonToBinary","features","options","arguments","length","undefined","firstPassData","firstPass","secondPass","coordLength","numericPropKeys","PositionDataType","Float32Array","TEST_EXPORTS","pointPositionsCount","pointFeaturesCount","linePositionsCount","linePathsCount","lineFeaturesCount","polygonPositionsCount","polygonObjectsCount","polygonRingsCount","polygonFeaturesCount","coordLengths","Set","_iterator","_createForOfIteratorHelper","_step","s","n","done","feature","value","geometry","type","add","coordinates","_iterator2","_step2","point","err","e","f","_iterator3","_step3","coord","_iterator4","_step4","line","_iterator5","_step5","_coord","flatten","_iterator6","_step6","_coord2","_iterator7","_step7","polygon","_iterator8","_step8","_coord3","Error","concat","properties","key","val","isNumeric","size","Math","max","apply","_toConsumableArray","Object","keys","filter","k","_options$PositionData","GlobalFeatureIdsDataType","Uint32Array","Uint16Array","points","positions","globalFeatureIds","featureIds","numericProps","lines","pathIndices","polygons","polygonIndices","primitivePolygonIndices","_i","_arr","object","_iterator9","_step9","propName","indexMap","pointPosition","pointFeature","linePosition","linePath","lineFeature","polygonPosition","polygonObject","polygonRing","polygonFeature","_iterator10","_step10","handlePoint","push","keepStringProperties","handleMultiPoint","handleLineString","handleMultiLineString","handlePolygon","handleMultiPolygon","makeAccessorObjects","coords","set","fillNumericProperties","_iterator11","_step11","fillCoords","nPositions","fill","_iterator12","_step12","_iterator13","_step13","ring","_iterator14","_step14","returnObj","geomType","numericProp","index","numericPropName","Array","numericKeys","props","includes","array","startVertex","_iterator15","_step15","arrays","_ref","x","Number","isFinite"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/json/node_modules/@loaders.gl/gis/src/lib/geojson-to-binary.js"],"sourcesContent":["// Convert GeoJSON features to flat binary arrays\n// @ts-nocheck\n\nexport function geojsonToBinary(features, options = {}) {\n  const firstPassData = firstPass(features);\n  return secondPass(features, firstPassData, {\n    coordLength: options.coordLength || firstPassData.coordLength || 2,\n    numericPropKeys: options.numericPropKeys || firstPassData.numericPropKeys,\n    PositionDataType: options.PositionDataType || Float32Array\n  });\n}\n\nexport const TEST_EXPORTS = {\n  firstPass,\n  secondPass\n};\n\n// Initial scan over GeoJSON features\n// Counts number of coordinates of each geometry type and keeps track of the max coordinate\n// dimensions\n// eslint-disable-next-line complexity, max-statements\nfunction firstPass(features) {\n  // Counts the number of _positions_, so [x, y, z] counts as one\n  let pointPositionsCount = 0;\n  let pointFeaturesCount = 0;\n  let linePositionsCount = 0;\n  let linePathsCount = 0;\n  let lineFeaturesCount = 0;\n  let polygonPositionsCount = 0;\n  let polygonObjectsCount = 0;\n  let polygonRingsCount = 0;\n  let polygonFeaturesCount = 0;\n  const coordLengths = new Set();\n  const numericPropKeys = {};\n\n  for (const feature of features) {\n    const geometry = feature.geometry;\n    switch (geometry.type) {\n      case 'Point':\n        pointFeaturesCount++;\n        pointPositionsCount++;\n        coordLengths.add(geometry.coordinates.length);\n        break;\n      case 'MultiPoint':\n        pointFeaturesCount++;\n        pointPositionsCount += geometry.coordinates.length;\n        for (const point of geometry.coordinates) {\n          coordLengths.add(point.length);\n        }\n        break;\n      case 'LineString':\n        lineFeaturesCount++;\n        linePositionsCount += geometry.coordinates.length;\n        linePathsCount++;\n\n        for (const coord of geometry.coordinates) {\n          coordLengths.add(coord.length);\n        }\n        break;\n      case 'MultiLineString':\n        lineFeaturesCount++;\n        for (const line of geometry.coordinates) {\n          linePositionsCount += line.length;\n          linePathsCount++;\n\n          // eslint-disable-next-line max-depth\n          for (const coord of line) {\n            coordLengths.add(coord.length);\n          }\n        }\n        break;\n      case 'Polygon':\n        polygonFeaturesCount++;\n        polygonObjectsCount++;\n        polygonRingsCount += geometry.coordinates.length;\n        polygonPositionsCount += flatten(geometry.coordinates).length;\n\n        for (const coord of flatten(geometry.coordinates)) {\n          coordLengths.add(coord.length);\n        }\n        break;\n      case 'MultiPolygon':\n        polygonFeaturesCount++;\n        for (const polygon of geometry.coordinates) {\n          polygonObjectsCount++;\n          polygonRingsCount += polygon.length;\n          polygonPositionsCount += flatten(polygon).length;\n\n          // eslint-disable-next-line max-depth\n          for (const coord of flatten(polygon)) {\n            coordLengths.add(coord.length);\n          }\n        }\n        break;\n      default:\n        throw new Error(`Unsupported geometry type: ${geometry.type}`);\n    }\n\n    if (feature.properties) {\n      for (const key in feature.properties) {\n        const val = feature.properties[key];\n\n        // If property has not been seen before, or if property has been numeric\n        // in all previous features, check if numeric in this feature\n        // If not numeric, false is stored to prevent rechecking in the future\n        numericPropKeys[key] =\n          numericPropKeys[key] || numericPropKeys[key] === undefined\n            ? isNumeric(val)\n            : numericPropKeys[key];\n      }\n    }\n  }\n\n  return {\n    pointPositionsCount,\n    pointFeaturesCount,\n    linePositionsCount,\n    linePathsCount,\n    lineFeaturesCount,\n    coordLength: coordLengths.size > 0 && Math.max(...coordLengths),\n    polygonPositionsCount,\n    polygonObjectsCount,\n    polygonRingsCount,\n    polygonFeaturesCount,\n    // Array of keys whose values are always numeric\n    numericPropKeys: Object.keys(numericPropKeys).filter(k => numericPropKeys[k])\n  };\n}\n\n// Second scan over GeoJSON features\n// Fills coordinates into pre-allocated typed arrays\n// eslint-disable-next-line complexity\nfunction secondPass(features, firstPassData = {}, options = {}) {\n  const {\n    pointPositionsCount,\n    pointFeaturesCount,\n    linePositionsCount,\n    linePathsCount,\n    lineFeaturesCount,\n    polygonPositionsCount,\n    polygonObjectsCount,\n    polygonRingsCount,\n    polygonFeaturesCount\n  } = firstPassData;\n  const {coordLength, numericPropKeys, PositionDataType = Float32Array} = options;\n  const GlobalFeatureIdsDataType = features.length > 65535 ? Uint32Array : Uint16Array;\n  const points = {\n    positions: new PositionDataType(pointPositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(pointPositionsCount),\n    featureIds:\n      pointFeaturesCount > 65535\n        ? new Uint32Array(pointPositionsCount)\n        : new Uint16Array(pointPositionsCount),\n    numericProps: {},\n    properties: []\n  };\n  const lines = {\n    pathIndices:\n      linePositionsCount > 65535\n        ? new Uint32Array(linePathsCount + 1)\n        : new Uint16Array(linePathsCount + 1),\n    positions: new PositionDataType(linePositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(linePositionsCount),\n    featureIds:\n      lineFeaturesCount > 65535\n        ? new Uint32Array(linePositionsCount)\n        : new Uint16Array(linePositionsCount),\n    numericProps: {},\n    properties: []\n  };\n  const polygons = {\n    polygonIndices:\n      polygonPositionsCount > 65535\n        ? new Uint32Array(polygonObjectsCount + 1)\n        : new Uint16Array(polygonObjectsCount + 1),\n    primitivePolygonIndices:\n      polygonPositionsCount > 65535\n        ? new Uint32Array(polygonRingsCount + 1)\n        : new Uint16Array(polygonRingsCount + 1),\n    positions: new PositionDataType(polygonPositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(polygonPositionsCount),\n    featureIds:\n      polygonFeaturesCount > 65535\n        ? new Uint32Array(polygonPositionsCount)\n        : new Uint16Array(polygonPositionsCount),\n    numericProps: {},\n    properties: []\n  };\n\n  // Instantiate numeric properties arrays; one value per vertex\n  for (const object of [points, lines, polygons]) {\n    for (const propName of numericPropKeys) {\n      // If property has been numeric in all previous features in which the property existed, check\n      // if numeric in this feature\n      object.numericProps[propName] = new Float32Array(object.positions.length / coordLength);\n    }\n  }\n\n  // Set last element of path/polygon indices as positions length\n  lines.pathIndices[linePathsCount] = linePositionsCount;\n  polygons.polygonIndices[polygonObjectsCount] = polygonPositionsCount;\n  polygons.primitivePolygonIndices[polygonRingsCount] = polygonPositionsCount;\n\n  const indexMap = {\n    pointPosition: 0,\n    pointFeature: 0,\n    linePosition: 0,\n    linePath: 0,\n    lineFeature: 0,\n    polygonPosition: 0,\n    polygonObject: 0,\n    polygonRing: 0,\n    polygonFeature: 0,\n    feature: 0\n  };\n\n  for (const feature of features) {\n    const geometry = feature.geometry;\n    const properties = feature.properties || {};\n\n    switch (geometry.type) {\n      case 'Point':\n        handlePoint(geometry.coordinates, points, indexMap, coordLength, properties);\n        points.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.pointFeature++;\n        break;\n      case 'MultiPoint':\n        handleMultiPoint(geometry.coordinates, points, indexMap, coordLength, properties);\n        points.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.pointFeature++;\n        break;\n      case 'LineString':\n        handleLineString(geometry.coordinates, lines, indexMap, coordLength, properties);\n        lines.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.lineFeature++;\n        break;\n      case 'MultiLineString':\n        handleMultiLineString(geometry.coordinates, lines, indexMap, coordLength, properties);\n        lines.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.lineFeature++;\n        break;\n      case 'Polygon':\n        handlePolygon(geometry.coordinates, polygons, indexMap, coordLength, properties);\n        polygons.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.polygonFeature++;\n        break;\n      case 'MultiPolygon':\n        handleMultiPolygon(geometry.coordinates, polygons, indexMap, coordLength, properties);\n        polygons.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.polygonFeature++;\n        break;\n      default:\n        throw new Error('Invalid geometry type');\n    }\n\n    indexMap.feature++;\n  }\n\n  // Wrap each array in an accessor object with value and size keys\n  return makeAccessorObjects(points, lines, polygons, coordLength);\n}\n\n// Fills Point coordinates into points object of arrays\nfunction handlePoint(coords, points, indexMap, coordLength, properties) {\n  points.positions.set(coords, indexMap.pointPosition * coordLength);\n  points.globalFeatureIds[indexMap.pointPosition] = indexMap.feature;\n  points.featureIds[indexMap.pointPosition] = indexMap.pointFeature;\n\n  fillNumericProperties(points, properties, indexMap.pointPosition, 1);\n  indexMap.pointPosition++;\n}\n\n// Fills MultiPoint coordinates into points object of arrays\nfunction handleMultiPoint(coords, points, indexMap, coordLength, properties) {\n  for (const point of coords) {\n    handlePoint(point, points, indexMap, coordLength, properties);\n  }\n}\n\n// Fills LineString coordinates into lines object of arrays\nfunction handleLineString(coords, lines, indexMap, coordLength, properties) {\n  lines.pathIndices[indexMap.linePath] = indexMap.linePosition;\n  indexMap.linePath++;\n\n  fillCoords(lines.positions, coords, indexMap.linePosition, coordLength);\n\n  const nPositions = coords.length;\n  fillNumericProperties(lines, properties, indexMap.linePosition, nPositions);\n\n  lines.globalFeatureIds.set(\n    new Uint32Array(nPositions).fill(indexMap.feature),\n    indexMap.linePosition\n  );\n  lines.featureIds.set(\n    new Uint32Array(nPositions).fill(indexMap.lineFeature),\n    indexMap.linePosition\n  );\n  indexMap.linePosition += nPositions;\n}\n\n// Fills MultiLineString coordinates into lines object of arrays\nfunction handleMultiLineString(coords, lines, indexMap, coordLength, properties) {\n  for (const line of coords) {\n    handleLineString(line, lines, indexMap, coordLength, properties);\n  }\n}\n\n// Fills Polygon coordinates into polygons object of arrays\nfunction handlePolygon(coords, polygons, indexMap, coordLength, properties) {\n  polygons.polygonIndices[indexMap.polygonObject] = indexMap.polygonPosition;\n  indexMap.polygonObject++;\n\n  for (const ring of coords) {\n    polygons.primitivePolygonIndices[indexMap.polygonRing] = indexMap.polygonPosition;\n    indexMap.polygonRing++;\n\n    fillCoords(polygons.positions, ring, indexMap.polygonPosition, coordLength);\n\n    const nPositions = ring.length;\n    fillNumericProperties(polygons, properties, indexMap.polygonPosition, nPositions);\n\n    polygons.globalFeatureIds.set(\n      new Uint32Array(nPositions).fill(indexMap.feature),\n      indexMap.polygonPosition\n    );\n    polygons.featureIds.set(\n      new Uint32Array(nPositions).fill(indexMap.polygonFeature),\n      indexMap.polygonPosition\n    );\n    indexMap.polygonPosition += nPositions;\n  }\n}\n\n// Fills MultiPolygon coordinates into polygons object of arrays\nfunction handleMultiPolygon(coords, polygons, indexMap, coordLength, properties) {\n  for (const polygon of coords) {\n    handlePolygon(polygon, polygons, indexMap, coordLength, properties);\n  }\n}\n\n// Wrap each array in an accessor object with value and size keys\nfunction makeAccessorObjects(points, lines, polygons, coordLength) {\n  const returnObj = {\n    points: {\n      positions: {value: points.positions, size: coordLength},\n      globalFeatureIds: {value: points.globalFeatureIds, size: 1},\n      featureIds: {value: points.featureIds, size: 1},\n      numericProps: points.numericProps,\n      properties: points.properties\n    },\n    lines: {\n      pathIndices: {value: lines.pathIndices, size: 1},\n      positions: {value: lines.positions, size: coordLength},\n      globalFeatureIds: {value: lines.globalFeatureIds, size: 1},\n      featureIds: {value: lines.featureIds, size: 1},\n      numericProps: lines.numericProps,\n      properties: lines.properties\n    },\n    polygons: {\n      polygonIndices: {value: polygons.polygonIndices, size: 1},\n      primitivePolygonIndices: {value: polygons.primitivePolygonIndices, size: 1},\n      positions: {value: polygons.positions, size: coordLength},\n      globalFeatureIds: {value: polygons.globalFeatureIds, size: 1},\n      featureIds: {value: polygons.featureIds, size: 1},\n      numericProps: polygons.numericProps,\n      properties: polygons.properties\n    }\n  };\n\n  for (const geomType in returnObj) {\n    for (const numericProp in returnObj[geomType].numericProps) {\n      returnObj[geomType].numericProps[numericProp] = {\n        value: returnObj[geomType].numericProps[numericProp],\n        size: 1\n      };\n    }\n  }\n  return returnObj;\n}\n\n// Add numeric properties to object\nfunction fillNumericProperties(object, properties, index, length) {\n  for (const numericPropName in object.numericProps) {\n    if (numericPropName in properties) {\n      object.numericProps[numericPropName].set(\n        new Array(length).fill(properties[numericPropName]),\n        index\n      );\n    }\n  }\n}\n\n// Keep string properties in object\nfunction keepStringProperties(properties, numericKeys) {\n  const props = {};\n  for (const key in properties) {\n    if (!numericKeys.includes(key)) {\n      props[key] = properties[key];\n    }\n  }\n  return props;\n}\n\n// coords is expected to be a list of arrays, each with length 2-3\nfunction fillCoords(array, coords, startVertex, coordLength) {\n  let index = startVertex * coordLength;\n  for (const coord of coords) {\n    array.set(coord, index);\n    index += coordLength;\n  }\n}\n\nfunction flatten(arrays) {\n  return [].concat(...arrays);\n}\n\nfunction isNumeric(x) {\n  return Number.isFinite(x);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}