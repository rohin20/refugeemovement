{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Resource from './resource';\nimport Texture from './texture';\nimport Framebuffer from './framebuffer';\nimport { parseUniformName, getUniformSetter } from './uniforms';\nimport { VertexShader, FragmentShader } from './shader';\nimport ProgramConfiguration from './program-configuration';\nimport { copyUniform, checkUniformValues } from './uniforms';\nimport { isWebGL2, assertWebGL2Context, withParameters, log } from '@luma.gl/gltools';\nimport { getKey } from '../webgl-utils/constants-to-keys';\nimport { getPrimitiveDrawMode } from '../webgl-utils/attribute-utils';\nimport { assert } from '../utils/assert';\nimport { uid } from '../utils/utils';\nvar LOG_PROGRAM_PERF_PRIORITY = 4;\nvar GL_SEPARATE_ATTRIBS = 0x8c8d;\nvar V6_DEPRECATED_METHODS = ['setVertexArray', 'setAttributes', 'setBuffers', 'unsetBuffers', 'use', 'getUniformCount', 'getUniformInfo', 'getUniformLocation', 'getUniformValue', 'getVarying', 'getFragDataLocation', 'getAttachedShaders', 'getAttributeCount', 'getAttributeLocation', 'getAttributeInfo'];\nvar Program = /*#__PURE__*/function (_Resource, _Symbol$toStringTag) {\n  _inherits(Program, _Resource);\n  var _super = _createSuper(Program);\n  function Program(gl) {\n    var _this;\n    _classCallCheck(this, Program);\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _this = _super.call(this, gl, props);\n    _this.stubRemovedMethods('Program', 'v6.0', V6_DEPRECATED_METHODS);\n    _this._isCached = false;\n    _this.initialize(props);\n    Object.seal(_assertThisInitialized(_this));\n    _this._setId(props.id);\n    return _this;\n  }\n  _createClass(Program, [{\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return 'Program';\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var hash = props.hash,\n        vs = props.vs,\n        fs = props.fs,\n        varyings = props.varyings,\n        _props$bufferMode = props.bufferMode,\n        bufferMode = _props$bufferMode === void 0 ? GL_SEPARATE_ATTRIBS : _props$bufferMode;\n      this.hash = hash || '';\n      this.vs = typeof vs === 'string' ? new VertexShader(this.gl, {\n        id: \"\".concat(props.id, \"-vs\"),\n        source: vs\n      }) : vs;\n      this.fs = typeof fs === 'string' ? new FragmentShader(this.gl, {\n        id: \"\".concat(props.id, \"-fs\"),\n        source: fs\n      }) : fs;\n      assert(this.vs instanceof VertexShader);\n      assert(this.fs instanceof FragmentShader);\n      this.uniforms = {};\n      this._textureUniforms = {};\n      if (varyings && varyings.length > 0) {\n        assertWebGL2Context(this.gl);\n        this.varyings = varyings;\n        this.gl2.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n      }\n      this._compileAndLink();\n      this._readUniformLocationsFromLinkedProgram();\n      this.configuration = new ProgramConfiguration(this);\n      return this.setProps(props);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (this._isCached) {\n        return this;\n      }\n      return _get(_getPrototypeOf(Program.prototype), \"delete\", this).call(this, options);\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      if ('uniforms' in props) {\n        this.setUniforms(props.uniforms);\n      }\n      return this;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref) {\n      var _this2 = this;\n      var logPriority = _ref.logPriority,\n        _ref$drawMode = _ref.drawMode,\n        drawMode = _ref$drawMode === void 0 ? 4 : _ref$drawMode,\n        vertexCount = _ref.vertexCount,\n        _ref$offset = _ref.offset,\n        offset = _ref$offset === void 0 ? 0 : _ref$offset,\n        start = _ref.start,\n        end = _ref.end,\n        _ref$isIndexed = _ref.isIndexed,\n        isIndexed = _ref$isIndexed === void 0 ? false : _ref$isIndexed,\n        _ref$indexType = _ref.indexType,\n        indexType = _ref$indexType === void 0 ? 5123 : _ref$indexType,\n        _ref$instanceCount = _ref.instanceCount,\n        instanceCount = _ref$instanceCount === void 0 ? 0 : _ref$instanceCount,\n        _ref$isInstanced = _ref.isInstanced,\n        isInstanced = _ref$isInstanced === void 0 ? instanceCount > 0 : _ref$isInstanced,\n        _ref$vertexArray = _ref.vertexArray,\n        vertexArray = _ref$vertexArray === void 0 ? null : _ref$vertexArray,\n        transformFeedback = _ref.transformFeedback,\n        framebuffer = _ref.framebuffer,\n        _ref$parameters = _ref.parameters,\n        parameters = _ref$parameters === void 0 ? {} : _ref$parameters,\n        uniforms = _ref.uniforms,\n        samplers = _ref.samplers;\n      if (uniforms || samplers) {\n        log.deprecated('Program.draw({uniforms})', 'Program.setUniforms(uniforms)')();\n        this.setUniforms(uniforms || {});\n      }\n      if (log.priority >= logPriority) {\n        var fb = framebuffer ? framebuffer.id : 'default';\n        var message = \"mode=\".concat(getKey(this.gl, drawMode), \" verts=\").concat(vertexCount, \" \") + \"instances=\".concat(instanceCount, \" indexType=\").concat(getKey(this.gl, indexType), \" \") + \"isInstanced=\".concat(isInstanced, \" isIndexed=\").concat(isIndexed, \" \") + \"Framebuffer=\".concat(fb);\n        log.log(logPriority, message)();\n      }\n      assert(vertexArray);\n      this.gl.useProgram(this.handle);\n      if (!this._areTexturesRenderable() || vertexCount === 0 || isInstanced && instanceCount === 0) {\n        return false;\n      }\n      vertexArray.bindForDraw(vertexCount, instanceCount, function () {\n        if (framebuffer !== undefined) {\n          parameters = Object.assign({}, parameters, {\n            framebuffer: framebuffer\n          });\n        }\n        if (transformFeedback) {\n          var primitiveMode = getPrimitiveDrawMode(drawMode);\n          transformFeedback.begin(primitiveMode);\n        }\n        _this2._bindTextures();\n        withParameters(_this2.gl, parameters, function () {\n          if (isIndexed && isInstanced) {\n            _this2.gl2.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);\n          } else if (isIndexed && isWebGL2(_this2.gl) && !isNaN(start) && !isNaN(end)) {\n            _this2.gl2.drawRangeElements(drawMode, start, end, vertexCount, indexType, offset);\n          } else if (isIndexed) {\n            _this2.gl.drawElements(drawMode, vertexCount, indexType, offset);\n          } else if (isInstanced) {\n            _this2.gl2.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);\n          } else {\n            _this2.gl.drawArrays(drawMode, offset, vertexCount);\n          }\n        });\n        if (transformFeedback) {\n          transformFeedback.end();\n        }\n      });\n      return true;\n    }\n  }, {\n    key: \"setUniforms\",\n    value: function setUniforms() {\n      var uniforms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (log.priority >= 2) {\n        checkUniformValues(uniforms, this.id, this._uniformSetters);\n      }\n      this.gl.useProgram(this.handle);\n      for (var uniformName in uniforms) {\n        var uniform = uniforms[uniformName];\n        var uniformSetter = this._uniformSetters[uniformName];\n        if (uniformSetter) {\n          var value = uniform;\n          var textureUpdate = false;\n          if (value instanceof Framebuffer) {\n            value = value.texture;\n          }\n          if (value instanceof Texture) {\n            textureUpdate = this.uniforms[uniformName] !== uniform;\n            if (textureUpdate) {\n              if (uniformSetter.textureIndex === undefined) {\n                uniformSetter.textureIndex = this._textureIndexCounter++;\n              }\n              var texture = value;\n              var textureIndex = uniformSetter.textureIndex;\n              texture.bind(textureIndex);\n              value = textureIndex;\n              this._textureUniforms[uniformName] = texture;\n            } else {\n              value = uniformSetter.textureIndex;\n            }\n          } else if (this._textureUniforms[uniformName]) {\n            delete this._textureUniforms[uniformName];\n          }\n          if (uniformSetter(value) || textureUpdate) {\n            copyUniform(this.uniforms, uniformName, uniform);\n          }\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"_areTexturesRenderable\",\n    value: function _areTexturesRenderable() {\n      var texturesRenderable = true;\n      for (var uniformName in this._textureUniforms) {\n        var texture = this._textureUniforms[uniformName];\n        texture.update();\n        texturesRenderable = texturesRenderable && texture.loaded;\n      }\n      return texturesRenderable;\n    }\n  }, {\n    key: \"_bindTextures\",\n    value: function _bindTextures() {\n      for (var uniformName in this._textureUniforms) {\n        var textureIndex = this._uniformSetters[uniformName].textureIndex;\n        this._textureUniforms[uniformName].bind(textureIndex);\n      }\n    }\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return this.gl.createProgram();\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle() {\n      this.gl.deleteProgram(this.handle);\n    }\n  }, {\n    key: \"_getOptionsFromHandle\",\n    value: function _getOptionsFromHandle(handle) {\n      var shaderHandles = this.gl.getAttachedShaders(handle);\n      var opts = {};\n      var _iterator = _createForOfIteratorHelper(shaderHandles),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var shaderHandle = _step.value;\n          var type = this.gl.getShaderParameter(this.handle, 35663);\n          switch (type) {\n            case 35633:\n              opts.vs = new VertexShader({\n                handle: shaderHandle\n              });\n              break;\n            case 35632:\n              opts.fs = new FragmentShader({\n                handle: shaderHandle\n              });\n              break;\n            default:\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return opts;\n    }\n  }, {\n    key: \"_getParameter\",\n    value: function _getParameter(pname) {\n      return this.gl.getProgramParameter(this.handle, pname);\n    }\n  }, {\n    key: \"_setId\",\n    value: function _setId(id) {\n      if (!id) {\n        var programName = this._getName();\n        this.id = uid(programName);\n      }\n    }\n  }, {\n    key: \"_getName\",\n    value: function _getName() {\n      var programName = this.vs.getName() || this.fs.getName();\n      programName = programName.replace(/shader/i, '');\n      programName = programName ? \"\".concat(programName, \"-program\") : 'program';\n      return programName;\n    }\n  }, {\n    key: \"_compileAndLink\",\n    value: function _compileAndLink() {\n      var gl = this.gl;\n      gl.attachShader(this.handle, this.vs.handle);\n      gl.attachShader(this.handle, this.fs.handle);\n      log.time(LOG_PROGRAM_PERF_PRIORITY, \"linkProgram for \".concat(this._getName()))();\n      gl.linkProgram(this.handle);\n      log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, \"linkProgram for \".concat(this._getName()))();\n      if (gl.debug || log.level > 0) {\n        var linked = gl.getProgramParameter(this.handle, 35714);\n        if (!linked) {\n          throw new Error(\"Error linking: \".concat(gl.getProgramInfoLog(this.handle)));\n        }\n        gl.validateProgram(this.handle);\n        var validated = gl.getProgramParameter(this.handle, 35715);\n        if (!validated) {\n          throw new Error(\"Error validating: \".concat(gl.getProgramInfoLog(this.handle)));\n        }\n      }\n    }\n  }, {\n    key: \"_readUniformLocationsFromLinkedProgram\",\n    value: function _readUniformLocationsFromLinkedProgram() {\n      var gl = this.gl;\n      this._uniformSetters = {};\n      this._uniformCount = this._getParameter(35718);\n      for (var i = 0; i < this._uniformCount; i++) {\n        var info = this.gl.getActiveUniform(this.handle, i);\n        var _parseUniformName = parseUniformName(info.name),\n          name = _parseUniformName.name;\n        var location = gl.getUniformLocation(this.handle, name);\n        this._uniformSetters[name] = getUniformSetter(gl, location, info);\n        if (info.size > 1) {\n          for (var l = 0; l < info.size; l++) {\n            location = gl.getUniformLocation(this.handle, \"\".concat(name, \"[\").concat(l, \"]\"));\n            this._uniformSetters[\"\".concat(name, \"[\").concat(l, \"]\")] = getUniformSetter(gl, location, info);\n          }\n        }\n      }\n      this._textureIndexCounter = 0;\n    }\n  }, {\n    key: \"getActiveUniforms\",\n    value: function getActiveUniforms(uniformIndices, pname) {\n      return this.gl2.getActiveUniforms(this.handle, uniformIndices, pname);\n    }\n  }, {\n    key: \"getUniformBlockIndex\",\n    value: function getUniformBlockIndex(blockName) {\n      return this.gl2.getUniformBlockIndex(this.handle, blockName);\n    }\n  }, {\n    key: \"getActiveUniformBlockParameter\",\n    value: function getActiveUniformBlockParameter(blockIndex, pname) {\n      return this.gl2.getActiveUniformBlockParameter(this.handle, blockIndex, pname);\n    }\n  }, {\n    key: \"uniformBlockBinding\",\n    value: function uniformBlockBinding(blockIndex, blockBinding) {\n      this.gl2.uniformBlockBinding(this.handle, blockIndex, blockBinding);\n    }\n  }]);\n  return Program;\n}(Resource, Symbol.toStringTag);\nexport { Program as default };","map":{"version":3,"names":["Resource","Texture","Framebuffer","parseUniformName","getUniformSetter","VertexShader","FragmentShader","ProgramConfiguration","copyUniform","checkUniformValues","isWebGL2","assertWebGL2Context","withParameters","log","getKey","getPrimitiveDrawMode","assert","uid","LOG_PROGRAM_PERF_PRIORITY","GL_SEPARATE_ATTRIBS","V6_DEPRECATED_METHODS","Program","_Resource","_Symbol$toStringTag","_inherits","_super","_createSuper","gl","_this","_classCallCheck","props","arguments","length","undefined","call","stubRemovedMethods","_isCached","initialize","Object","seal","_assertThisInitialized","_setId","id","_createClass","key","get","value","hash","vs","fs","varyings","_props$bufferMode","bufferMode","concat","source","uniforms","_textureUniforms","gl2","transformFeedbackVaryings","handle","_compileAndLink","_readUniformLocationsFromLinkedProgram","configuration","setProps","_delete","options","_get","_getPrototypeOf","prototype","setUniforms","draw","_ref","_this2","logPriority","_ref$drawMode","drawMode","vertexCount","_ref$offset","offset","start","end","_ref$isIndexed","isIndexed","_ref$indexType","indexType","_ref$instanceCount","instanceCount","_ref$isInstanced","isInstanced","_ref$vertexArray","vertexArray","transformFeedback","framebuffer","_ref$parameters","parameters","samplers","deprecated","priority","fb","message","useProgram","_areTexturesRenderable","bindForDraw","assign","primitiveMode","begin","_bindTextures","drawElementsInstanced","isNaN","drawRangeElements","drawElements","drawArraysInstanced","drawArrays","_uniformSetters","uniformName","uniform","uniformSetter","textureUpdate","texture","textureIndex","_textureIndexCounter","bind","texturesRenderable","update","loaded","_createHandle","createProgram","_deleteHandle","deleteProgram","_getOptionsFromHandle","shaderHandles","getAttachedShaders","opts","_iterator","_createForOfIteratorHelper","_step","s","n","done","shaderHandle","type","getShaderParameter","err","e","f","_getParameter","pname","getProgramParameter","programName","_getName","getName","replace","attachShader","time","linkProgram","timeEnd","debug","level","linked","Error","getProgramInfoLog","validateProgram","validated","_uniformCount","i","info","getActiveUniform","_parseUniformName","name","location","getUniformLocation","size","l","getActiveUniforms","uniformIndices","getUniformBlockIndex","blockName","getActiveUniformBlockParameter","blockIndex","uniformBlockBinding","blockBinding","Symbol","toStringTag","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@luma.gl/webgl/src/classes/program.js"],"sourcesContent":["import GL from '@luma.gl/constants';\n\nimport Resource from './resource';\nimport Texture from './texture';\nimport Framebuffer from './framebuffer';\nimport {parseUniformName, getUniformSetter} from './uniforms';\nimport {VertexShader, FragmentShader} from './shader';\nimport ProgramConfiguration from './program-configuration';\nimport {copyUniform, checkUniformValues} from './uniforms';\n\nimport {isWebGL2, assertWebGL2Context, withParameters, log} from '@luma.gl/gltools';\nimport {getKey} from '../webgl-utils/constants-to-keys';\nimport {getPrimitiveDrawMode} from '../webgl-utils/attribute-utils';\nimport {assert} from '../utils/assert';\nimport {uid} from '../utils/utils';\n\nconst LOG_PROGRAM_PERF_PRIORITY = 4;\n\nconst GL_SEPARATE_ATTRIBS = 0x8c8d;\n\nconst V6_DEPRECATED_METHODS = [\n  'setVertexArray',\n  'setAttributes',\n  'setBuffers',\n  'unsetBuffers',\n\n  'use',\n  'getUniformCount',\n  'getUniformInfo',\n  'getUniformLocation',\n  'getUniformValue',\n\n  'getVarying',\n  'getFragDataLocation',\n  'getAttachedShaders',\n  'getAttributeCount',\n  'getAttributeLocation',\n  'getAttributeInfo'\n];\n\nexport default class Program extends Resource {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'Program';\n  }\n  constructor(gl, props = {}) {\n    super(gl, props);\n\n    this.stubRemovedMethods('Program', 'v6.0', V6_DEPRECATED_METHODS);\n\n    // Experimental flag to avoid deleting Program object while it is cached\n    this._isCached = false;\n\n    this.initialize(props);\n\n    Object.seal(this);\n\n    this._setId(props.id);\n  }\n\n  initialize(props = {}) {\n    const {hash, vs, fs, varyings, bufferMode = GL_SEPARATE_ATTRIBS} = props;\n\n    this.hash = hash || ''; // Used by ProgramManager\n\n    // Create shaders if needed\n    this.vs =\n      typeof vs === 'string' ? new VertexShader(this.gl, {id: `${props.id}-vs`, source: vs}) : vs;\n    this.fs =\n      typeof fs === 'string' ? new FragmentShader(this.gl, {id: `${props.id}-fs`, source: fs}) : fs;\n    assert(this.vs instanceof VertexShader);\n    assert(this.fs instanceof FragmentShader);\n\n    // uniforms\n    this.uniforms = {};\n\n    this._textureUniforms = {};\n\n    // Setup varyings if supplied\n    if (varyings && varyings.length > 0) {\n      assertWebGL2Context(this.gl);\n      this.varyings = varyings;\n      this.gl2.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n    }\n\n    this._compileAndLink();\n    this._readUniformLocationsFromLinkedProgram();\n    this.configuration = new ProgramConfiguration(this);\n\n    return this.setProps(props);\n  }\n\n  delete(options = {}) {\n    if (this._isCached) {\n      // This object is cached, do not delete\n      return this;\n    }\n    return super.delete(options);\n  }\n\n  setProps(props) {\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms);\n    }\n    return this;\n  }\n\n  // A good thing about the WebGL API is that there are so many ways to draw things ;)\n  // This function unifies those ways into a single call using common parameters with sane defaults\n  draw({\n    logPriority, // Probe log priority, enables Model to do more integrated logging\n\n    drawMode = GL.TRIANGLES,\n    vertexCount,\n    offset = 0,\n    start,\n    end,\n    isIndexed = false,\n    indexType = GL.UNSIGNED_SHORT,\n    instanceCount = 0,\n    isInstanced = instanceCount > 0,\n\n    vertexArray = null,\n    transformFeedback,\n    framebuffer,\n    parameters = {},\n\n    // Deprecated\n    uniforms,\n    samplers\n  }) {\n    if (uniforms || samplers) {\n      // DEPRECATED: v7.0 (deprecated earlier but warning not properly implemented)\n      log.deprecated('Program.draw({uniforms})', 'Program.setUniforms(uniforms)')();\n      this.setUniforms(uniforms || {});\n    }\n\n    if (log.priority >= logPriority) {\n      const fb = framebuffer ? framebuffer.id : 'default';\n      const message =\n        `mode=${getKey(this.gl, drawMode)} verts=${vertexCount} ` +\n        `instances=${instanceCount} indexType=${getKey(this.gl, indexType)} ` +\n        `isInstanced=${isInstanced} isIndexed=${isIndexed} ` +\n        `Framebuffer=${fb}`;\n      log.log(logPriority, message)();\n    }\n\n    // TODO - move vertex array binding and transform feedback binding to withParameters?\n    assert(vertexArray);\n\n    this.gl.useProgram(this.handle);\n\n    if (\n      // Note: async textures set as uniforms might still be loading.\n      // Now that all uniforms have been updated, check if any texture\n      // in the uniforms is not yet initialized, then we don't draw\n      !this._areTexturesRenderable() ||\n      // Avoid WebGL draw call when not rendering any data\n      vertexCount === 0 ||\n      (isInstanced && instanceCount === 0)\n    ) {\n      return false;\n    }\n\n    vertexArray.bindForDraw(vertexCount, instanceCount, () => {\n      if (framebuffer !== undefined) {\n        parameters = Object.assign({}, parameters, {framebuffer});\n      }\n\n      if (transformFeedback) {\n        const primitiveMode = getPrimitiveDrawMode(drawMode);\n        transformFeedback.begin(primitiveMode);\n      }\n\n      this._bindTextures();\n\n      withParameters(this.gl, parameters, () => {\n        // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension\n        if (isIndexed && isInstanced) {\n          this.gl2.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);\n        } else if (isIndexed && isWebGL2(this.gl) && !isNaN(start) && !isNaN(end)) {\n          this.gl2.drawRangeElements(drawMode, start, end, vertexCount, indexType, offset);\n        } else if (isIndexed) {\n          this.gl.drawElements(drawMode, vertexCount, indexType, offset);\n        } else if (isInstanced) {\n          this.gl2.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);\n        } else {\n          this.gl.drawArrays(drawMode, offset, vertexCount);\n        }\n      });\n\n      if (transformFeedback) {\n        transformFeedback.end();\n      }\n    });\n\n    return true;\n  }\n\n  setUniforms(uniforms = {}) {\n    if (log.priority >= 2) {\n      checkUniformValues(uniforms, this.id, this._uniformSetters);\n    }\n\n    this.gl.useProgram(this.handle);\n\n    for (const uniformName in uniforms) {\n      const uniform = uniforms[uniformName];\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter) {\n        let value = uniform;\n        let textureUpdate = false;\n\n        if (value instanceof Framebuffer) {\n          value = value.texture;\n        }\n        if (value instanceof Texture) {\n          textureUpdate = this.uniforms[uniformName] !== uniform;\n\n          if (textureUpdate) {\n            // eslint-disable-next-line max-depth\n            if (uniformSetter.textureIndex === undefined) {\n              uniformSetter.textureIndex = this._textureIndexCounter++;\n            }\n\n            // Bind texture to index\n            const texture = value;\n            const {textureIndex} = uniformSetter;\n\n            texture.bind(textureIndex);\n            value = textureIndex;\n\n            this._textureUniforms[uniformName] = texture;\n          } else {\n            value = uniformSetter.textureIndex;\n          }\n        } else if (this._textureUniforms[uniformName]) {\n          delete this._textureUniforms[uniformName];\n        }\n\n        // NOTE(Tarek): uniformSetter returns whether\n        //   value had to be updated or not.\n        if (uniformSetter(value) || textureUpdate) {\n          copyUniform(this.uniforms, uniformName, uniform);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  // Checks if all texture-values uniforms are renderable (i.e. loaded)\n  // Update a texture if needed (e.g. from video)\n  // Note: This is currently done before every draw call\n  _areTexturesRenderable() {\n    let texturesRenderable = true;\n\n    for (const uniformName in this._textureUniforms) {\n      const texture = this._textureUniforms[uniformName];\n      texture.update();\n      texturesRenderable = texturesRenderable && texture.loaded;\n    }\n\n    return texturesRenderable;\n  }\n\n  // Binds textures\n  // Note: This is currently done before every draw call\n  _bindTextures() {\n    for (const uniformName in this._textureUniforms) {\n      const textureIndex = this._uniformSetters[uniformName].textureIndex;\n      this._textureUniforms[uniformName].bind(textureIndex);\n    }\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createProgram();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteProgram(this.handle);\n  }\n\n  // Extract opts needed to initialize a `Program` from an independently created WebGLProgram handle\n  _getOptionsFromHandle(handle) {\n    const shaderHandles = this.gl.getAttachedShaders(handle);\n    const opts = {};\n    for (const shaderHandle of shaderHandles) {\n      const type = this.gl.getShaderParameter(this.handle, GL.SHADER_TYPE);\n      switch (type) {\n        case GL.VERTEX_SHADER:\n          // @ts-ignore\n          opts.vs = new VertexShader({handle: shaderHandle});\n          break;\n        case GL.FRAGMENT_SHADER:\n          // @ts-ignore\n          opts.fs = new FragmentShader({handle: shaderHandle});\n          break;\n        default:\n      }\n    }\n    return opts;\n  }\n\n  _getParameter(pname) {\n    return this.gl.getProgramParameter(this.handle, pname);\n  }\n\n  // If program is not named, name it after shader names\n  // TODO - this.id will already have been initialized\n  _setId(id) {\n    if (!id) {\n      const programName = this._getName();\n      this.id = uid(programName);\n    }\n  }\n\n  // Generate a default name for the program based on names of the shaders\n  _getName() {\n    let programName = this.vs.getName() || this.fs.getName();\n    programName = programName.replace(/shader/i, '');\n    programName = programName ? `${programName}-program` : 'program';\n    return programName;\n  }\n\n  _compileAndLink() {\n    const {gl} = this;\n    gl.attachShader(this.handle, this.vs.handle);\n    gl.attachShader(this.handle, this.fs.handle);\n    log.time(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n    gl.linkProgram(this.handle);\n    log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n\n    // Avoid checking program linking error in production\n    // @ts-ignore\n    if (gl.debug || log.level > 0) {\n      const linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n      if (!linked) {\n        throw new Error(`Error linking: ${gl.getProgramInfoLog(this.handle)}`);\n      }\n\n      gl.validateProgram(this.handle);\n      const validated = gl.getProgramParameter(this.handle, gl.VALIDATE_STATUS);\n      if (!validated) {\n        throw new Error(`Error validating: ${gl.getProgramInfoLog(this.handle)}`);\n      }\n    }\n  }\n\n  // query uniform locations and build name to setter map.\n  // TODO - This overlaps with ProgramConfiguration?\n  _readUniformLocationsFromLinkedProgram() {\n    const {gl} = this;\n    this._uniformSetters = {};\n    this._uniformCount = this._getParameter(GL.ACTIVE_UNIFORMS);\n    for (let i = 0; i < this._uniformCount; i++) {\n      const info = this.gl.getActiveUniform(this.handle, i);\n      const {name} = parseUniformName(info.name);\n      let location = gl.getUniformLocation(this.handle, name);\n      this._uniformSetters[name] = getUniformSetter(gl, location, info);\n      if (info.size > 1) {\n        for (let l = 0; l < info.size; l++) {\n          location = gl.getUniformLocation(this.handle, `${name}[${l}]`);\n          this._uniformSetters[`${name}[${l}]`] = getUniformSetter(gl, location, info);\n        }\n      }\n    }\n    this._textureIndexCounter = 0;\n  }\n\n  // TO BE REMOVED in v7?\n\n  // Rretrieves information about active uniforms identifed by their indices (`uniformIndices`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniforms\n  getActiveUniforms(uniformIndices, pname) {\n    return this.gl2.getActiveUniforms(this.handle, uniformIndices, pname);\n  }\n\n  // Retrieves the index of a uniform block\n  getUniformBlockIndex(blockName) {\n    return this.gl2.getUniformBlockIndex(this.handle, blockName);\n  }\n\n  // Retrieves information about an active uniform block (`blockIndex`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter\n  getActiveUniformBlockParameter(blockIndex, pname) {\n    return this.gl2.getActiveUniformBlockParameter(this.handle, blockIndex, pname);\n  }\n\n  // Binds a uniform block (`blockIndex`) to a specific binding point (`blockBinding`)\n  uniformBlockBinding(blockIndex, blockBinding) {\n    this.gl2.uniformBlockBinding(this.handle, blockIndex, blockBinding);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}