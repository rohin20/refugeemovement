{"ast":null,"code":"import _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Stats } from '@probe.gl/stats';\nvar STAT_QUEUED_REQUESTS = 'Queued Requests';\nvar STAT_ACTIVE_REQUESTS = 'Active Requests';\nvar STAT_CANCELLED_REQUESTS = 'Cancelled Requests';\nvar STAT_QUEUED_REQUESTS_EVER = 'Queued Requests Ever';\nvar STAT_ACTIVE_REQUESTS_EVER = 'Active Requests Ever';\nvar DEFAULT_PROPS = {\n  id: 'request-scheduler',\n  throttleRequests: true,\n  maxRequests: 6\n};\nvar RequestScheduler = /*#__PURE__*/function () {\n  function RequestScheduler() {\n    _classCallCheck(this, RequestScheduler);\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _defineProperty(this, \"props\", void 0);\n    _defineProperty(this, \"stats\", void 0);\n    _defineProperty(this, \"activeRequestCount\", 0);\n    _defineProperty(this, \"requestQueue\", []);\n    _defineProperty(this, \"requestMap\", new Map());\n    _defineProperty(this, \"deferredUpdate\", null);\n    this.props = _objectSpread(_objectSpread({}, DEFAULT_PROPS), props);\n    this.stats = new Stats({\n      id: this.props.id\n    });\n    this.stats.get(STAT_QUEUED_REQUESTS);\n    this.stats.get(STAT_ACTIVE_REQUESTS);\n    this.stats.get(STAT_CANCELLED_REQUESTS);\n    this.stats.get(STAT_QUEUED_REQUESTS_EVER);\n    this.stats.get(STAT_ACTIVE_REQUESTS_EVER);\n  }\n  _createClass(RequestScheduler, [{\n    key: \"scheduleRequest\",\n    value: function scheduleRequest(handle) {\n      var getPriority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {\n        return 0;\n      };\n      if (!this.props.throttleRequests) {\n        return Promise.resolve({\n          done: function done() {}\n        });\n      }\n      if (this.requestMap.has(handle)) {\n        return this.requestMap.get(handle);\n      }\n      var request = {\n        handle: handle,\n        priority: 0,\n        getPriority: getPriority\n      };\n      var promise = new Promise(function (resolve) {\n        request.resolve = resolve;\n        return request;\n      });\n      this.requestQueue.push(request);\n      this.requestMap.set(handle, promise);\n      this._issueNewRequests();\n      return promise;\n    }\n  }, {\n    key: \"_issueRequest\",\n    value: function _issueRequest(request) {\n      var _this = this;\n      var handle = request.handle,\n        resolve = request.resolve;\n      var isDone = false;\n      var done = function done() {\n        if (!isDone) {\n          isDone = true;\n          _this.requestMap.delete(handle);\n          _this.activeRequestCount--;\n          _this._issueNewRequests();\n        }\n      };\n      this.activeRequestCount++;\n      return resolve ? resolve({\n        done: done\n      }) : Promise.resolve({\n        done: done\n      });\n    }\n  }, {\n    key: \"_issueNewRequests\",\n    value: function _issueNewRequests() {\n      var _this2 = this;\n      if (!this.deferredUpdate) {\n        this.deferredUpdate = setTimeout(function () {\n          return _this2._issueNewRequestsAsync();\n        }, 0);\n      }\n    }\n  }, {\n    key: \"_issueNewRequestsAsync\",\n    value: function _issueNewRequestsAsync() {\n      this.deferredUpdate = null;\n      var freeSlots = Math.max(this.props.maxRequests - this.activeRequestCount, 0);\n      if (freeSlots === 0) {\n        return;\n      }\n      this._updateAllRequests();\n      for (var i = 0; i < freeSlots; ++i) {\n        var request = this.requestQueue.shift();\n        if (request) {\n          this._issueRequest(request);\n        }\n      }\n    }\n  }, {\n    key: \"_updateAllRequests\",\n    value: function _updateAllRequests() {\n      var requestQueue = this.requestQueue;\n      for (var i = 0; i < requestQueue.length; ++i) {\n        var request = requestQueue[i];\n        if (!this._updateRequest(request)) {\n          requestQueue.splice(i, 1);\n          this.requestMap.delete(request.handle);\n          i--;\n        }\n      }\n      requestQueue.sort(function (a, b) {\n        return a.priority - b.priority;\n      });\n    }\n  }, {\n    key: \"_updateRequest\",\n    value: function _updateRequest(request) {\n      request.priority = request.getPriority(request.handle);\n      if (request.priority < 0) {\n        request.resolve(null);\n        return false;\n      }\n      return true;\n    }\n  }]);\n  return RequestScheduler;\n}();\nexport { RequestScheduler as default };","map":{"version":3,"names":["Stats","STAT_QUEUED_REQUESTS","STAT_ACTIVE_REQUESTS","STAT_CANCELLED_REQUESTS","STAT_QUEUED_REQUESTS_EVER","STAT_ACTIVE_REQUESTS_EVER","DEFAULT_PROPS","id","throttleRequests","maxRequests","RequestScheduler","_classCallCheck","props","arguments","length","undefined","_defineProperty","Map","_objectSpread","stats","get","_createClass","key","value","scheduleRequest","handle","getPriority","Promise","resolve","done","requestMap","has","request","priority","promise","requestQueue","push","set","_issueNewRequests","_issueRequest","_this","isDone","delete","activeRequestCount","_this2","deferredUpdate","setTimeout","_issueNewRequestsAsync","freeSlots","Math","max","_updateAllRequests","i","shift","_updateRequest","splice","sort","a","b","default"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@loaders.gl/loader-utils/src/lib/request-utils/request-scheduler.ts"],"sourcesContent":["import {Stats} from '@probe.gl/stats';\n\ntype Handle = any;\ntype DoneFunction = () => any;\ntype GetPriorityFunction = () => number;\ntype RequestResult = {\n  done: DoneFunction;\n} | null;\n\n/** RequestScheduler Options */\nexport type RequestSchedulerProps = {\n  id?: string;\n  throttleRequests?: boolean;\n  maxRequests?: number;\n};\n\nconst STAT_QUEUED_REQUESTS = 'Queued Requests';\nconst STAT_ACTIVE_REQUESTS = 'Active Requests';\nconst STAT_CANCELLED_REQUESTS = 'Cancelled Requests';\nconst STAT_QUEUED_REQUESTS_EVER = 'Queued Requests Ever';\nconst STAT_ACTIVE_REQUESTS_EVER = 'Active Requests Ever';\n\nconst DEFAULT_PROPS: Required<RequestSchedulerProps> = {\n  id: 'request-scheduler',\n  // Specifies if the request scheduler should throttle incoming requests, mainly for comparative testing\n  throttleRequests: true,\n  // The maximum number of simultaneous active requests. Un-throttled requests do not observe this limit.\n  maxRequests: 6\n};\n\n/** Tracks one request */\ntype Request = {\n  handle: Handle;\n  priority: number;\n  getPriority: GetPriorityFunction;\n  resolve?: (value: any) => any;\n};\n\n/**\n * Used to issue a request, without having them \"deeply queued\" by the browser.\n * @todo - Track requests globally, across multiple servers\n */\nexport default class RequestScheduler {\n  readonly props: Required<RequestSchedulerProps>;\n  readonly stats: Stats;\n  activeRequestCount: number = 0;\n\n  /** Tracks the number of active requests and prioritizes/cancels queued requests. */\n  private requestQueue: Request[] = [];\n  private requestMap: Map<Handle, Promise<RequestResult>> = new Map();\n  private deferredUpdate: any = null;\n\n  constructor(props: RequestSchedulerProps = {}) {\n    this.props = {...DEFAULT_PROPS, ...props};\n\n    // Returns the statistics used by the request scheduler.\n    this.stats = new Stats({id: this.props.id});\n    this.stats.get(STAT_QUEUED_REQUESTS);\n    this.stats.get(STAT_ACTIVE_REQUESTS);\n    this.stats.get(STAT_CANCELLED_REQUESTS);\n    this.stats.get(STAT_QUEUED_REQUESTS_EVER);\n    this.stats.get(STAT_ACTIVE_REQUESTS_EVER);\n  }\n\n  /**\n   * Called by an application that wants to issue a request, without having it deeply queued by the browser\n   *\n   * When the returned promise resolved, it is OK for the application to issue a request.\n   * The promise resolves to an object that contains a `done` method.\n   * When the application's request has completed (or failed), the application must call the `done` function\n   *\n   * @param handle\n   * @param getPriority will be called when request \"slots\" open up,\n   *    allowing the caller to update priority or cancel the request\n   *    Highest priority executes first, priority < 0 cancels the request\n   * @returns a promise\n   *   - resolves to a object (with a `done` field) when the request can be issued without queueing,\n   *   - resolves to `null` if the request has been cancelled (by the callback return < 0).\n   *     In this case the application should not issue the request\n   */\n  scheduleRequest(\n    handle: Handle,\n    getPriority: GetPriorityFunction = () => 0\n  ): Promise<RequestResult> {\n    // Allows throttling to be disabled\n    if (!this.props.throttleRequests) {\n      return Promise.resolve({done: () => {}});\n    }\n\n    // dedupe\n    if (this.requestMap.has(handle)) {\n      return this.requestMap.get(handle) as Promise<any>;\n    }\n\n    const request: Request = {handle, priority: 0, getPriority};\n    const promise = new Promise<RequestResult>((resolve) => {\n      // @ts-ignore\n      request.resolve = resolve;\n      return request;\n    });\n\n    this.requestQueue.push(request);\n    this.requestMap.set(handle, promise);\n    this._issueNewRequests();\n    return promise;\n  }\n\n  // PRIVATE\n\n  _issueRequest(request: Request): Promise<any> {\n    const {handle, resolve} = request;\n    let isDone = false;\n\n    const done = () => {\n      // can only be called once\n      if (!isDone) {\n        isDone = true;\n\n        // Stop tracking a request - it has completed, failed, cancelled etc\n        this.requestMap.delete(handle);\n        this.activeRequestCount--;\n        // A slot just freed up, see if any queued requests are waiting\n        this._issueNewRequests();\n      }\n    };\n\n    // Track this request\n    this.activeRequestCount++;\n\n    return resolve ? resolve({done}) : Promise.resolve({done});\n  }\n\n  /** We check requests asynchronously, to prevent multiple updates */\n  _issueNewRequests(): void {\n    if (!this.deferredUpdate) {\n      this.deferredUpdate = setTimeout(() => this._issueNewRequestsAsync(), 0);\n    }\n  }\n\n  /** Refresh all requests  */\n  _issueNewRequestsAsync() {\n    // TODO - shouldn't we clear the timeout?\n    this.deferredUpdate = null;\n\n    const freeSlots = Math.max(this.props.maxRequests - this.activeRequestCount, 0);\n\n    if (freeSlots === 0) {\n      return;\n    }\n\n    this._updateAllRequests();\n\n    // Resolve pending promises for the top-priority requests\n    for (let i = 0; i < freeSlots; ++i) {\n      const request = this.requestQueue.shift();\n      if (request) {\n        this._issueRequest(request); // eslint-disable-line @typescript-eslint/no-floating-promises\n      }\n    }\n\n    // Uncomment to debug\n    // console.log(`${freeSlots} free slots, ${this.requestQueue.length} queued requests`);\n  }\n\n  /** Ensure all requests have updated priorities, and that no longer valid requests are cancelled */\n  _updateAllRequests() {\n    const requestQueue = this.requestQueue;\n    for (let i = 0; i < requestQueue.length; ++i) {\n      const request = requestQueue[i];\n      if (!this._updateRequest(request)) {\n        // Remove the element and make sure to adjust the counter to account for shortened array\n        requestQueue.splice(i, 1);\n        this.requestMap.delete(request.handle);\n        i--;\n      }\n    }\n\n    // Sort the remaining requests based on priority\n    requestQueue.sort((a, b) => a.priority - b.priority);\n  }\n\n  /** Update a single request by calling the callback */\n  _updateRequest(request) {\n    request.priority = request.getPriority(request.handle); // eslint-disable-line callback-return\n\n    // by returning a negative priority, the callback cancels the request\n    if (request.priority < 0) {\n      request.resolve(null);\n      return false;\n    }\n    return true;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}