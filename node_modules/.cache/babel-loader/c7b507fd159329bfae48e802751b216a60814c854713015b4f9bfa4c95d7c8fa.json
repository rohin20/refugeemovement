{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _awaitAsyncGenerator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { geojsonToBinary } from '@loaders.gl/gis';\nimport parseJSONSync from './lib/parse-json';\nimport parseJSONInBatches from './lib/parse-json-in-batches';\nvar VERSION = typeof \"3.3.1\" !== 'undefined' ? \"3.3.1\" : 'latest';\nvar DEFAULT_GEOJSON_LOADER_OPTIONS = {\n  geojson: {\n    shape: 'object-row-table'\n  },\n  json: {\n    jsonpaths: ['$', '$.features']\n  },\n  gis: {\n    format: 'geojson'\n  }\n};\nexport var GeoJSONWorkerLoader = {\n  name: 'GeoJSON',\n  id: 'geojson',\n  module: 'geojson',\n  version: VERSION,\n  worker: true,\n  extensions: ['geojson'],\n  mimeTypes: ['application/geo+json'],\n  category: 'geometry',\n  text: true,\n  options: DEFAULT_GEOJSON_LOADER_OPTIONS\n};\nexport var GeoJSONLoader = _objectSpread(_objectSpread({}, GeoJSONWorkerLoader), {}, {\n  parse: parse,\n  parseTextSync: parseTextSync,\n  parseInBatches: parseInBatches\n});\nfunction parse(_x2, _x3) {\n  return _parse.apply(this, arguments);\n}\nfunction _parse() {\n  _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(arrayBuffer, options) {\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", parseTextSync(new TextDecoder().decode(arrayBuffer), options));\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _parse.apply(this, arguments);\n}\nfunction parseTextSync(text, options) {\n  options = _objectSpread(_objectSpread({}, DEFAULT_GEOJSON_LOADER_OPTIONS), options);\n  options.json = _objectSpread(_objectSpread({}, DEFAULT_GEOJSON_LOADER_OPTIONS.geojson), options.geojson);\n  options.gis = options.gis || {};\n  var json = parseJSONSync(text, options);\n  switch (options.gis.format) {\n    case 'binary':\n      return geojsonToBinary(json);\n    default:\n      return json;\n  }\n}\nfunction parseInBatches(asyncIterator, options) {\n  options = _objectSpread(_objectSpread({}, DEFAULT_GEOJSON_LOADER_OPTIONS), options);\n  options.json = _objectSpread(_objectSpread({}, DEFAULT_GEOJSON_LOADER_OPTIONS.geojson), options.geojson);\n  var geojsonIterator = parseJSONInBatches(asyncIterator, options);\n  switch (options.gis.format) {\n    case 'binary':\n      return makeBinaryGeometryIterator(geojsonIterator);\n    default:\n      return geojsonIterator;\n  }\n}\nfunction makeBinaryGeometryIterator(_x) {\n  return _makeBinaryGeometryIterator.apply(this, arguments);\n}\nfunction _makeBinaryGeometryIterator() {\n  _makeBinaryGeometryIterator = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(geojsonIterator) {\n    var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, batch;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _iteratorAbruptCompletion = false;\n          _didIteratorError = false;\n          _context.prev = 2;\n          _iterator = _asyncIterator(geojsonIterator);\n        case 4:\n          _context.next = 6;\n          return _awaitAsyncGenerator(_iterator.next());\n        case 6:\n          if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n            _context.next = 14;\n            break;\n          }\n          batch = _step.value;\n          batch.data = geojsonToBinary(batch.data);\n          _context.next = 11;\n          return batch;\n        case 11:\n          _iteratorAbruptCompletion = false;\n          _context.next = 4;\n          break;\n        case 14:\n          _context.next = 20;\n          break;\n        case 16:\n          _context.prev = 16;\n          _context.t0 = _context[\"catch\"](2);\n          _didIteratorError = true;\n          _iteratorError = _context.t0;\n        case 20:\n          _context.prev = 20;\n          _context.prev = 21;\n          if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n            _context.next = 25;\n            break;\n          }\n          _context.next = 25;\n          return _awaitAsyncGenerator(_iterator.return());\n        case 25:\n          _context.prev = 25;\n          if (!_didIteratorError) {\n            _context.next = 28;\n            break;\n          }\n          throw _iteratorError;\n        case 28:\n          return _context.finish(25);\n        case 29:\n          return _context.finish(20);\n        case 30:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[2, 16, 20, 30], [21,, 25, 29]]);\n  }));\n  return _makeBinaryGeometryIterator.apply(this, arguments);\n}","map":{"version":3,"names":["geojsonToBinary","parseJSONSync","parseJSONInBatches","VERSION","DEFAULT_GEOJSON_LOADER_OPTIONS","geojson","shape","json","jsonpaths","gis","format","GeoJSONWorkerLoader","name","id","module","version","worker","extensions","mimeTypes","category","text","options","GeoJSONLoader","_objectSpread","parse","parseTextSync","parseInBatches","_x2","_x3","_parse","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","arrayBuffer","wrap","_callee2$","_context2","prev","next","abrupt","TextDecoder","decode","stop","asyncIterator","geojsonIterator","makeBinaryGeometryIterator","_x","_makeBinaryGeometryIterator","_wrapAsyncGenerator","_callee","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","batch","_callee$","_context","_asyncIterator","_awaitAsyncGenerator","sent","done","value","data","t0","return","finish"],"sources":["/Users/rohinphukan/Desktop/RefugeeWebsite/node_modules/@kepler.gl/processors/node_modules/@loaders.gl/json/src/geojson-loader.ts"],"sourcesContent":["import type {Loader, LoaderWithParser} from '@loaders.gl/loader-utils';\nimport type {JSONLoaderOptions} from './json-loader';\nimport {geojsonToBinary} from '@loaders.gl/gis';\nimport parseJSONSync from './lib/parse-json';\nimport parseJSONInBatches from './lib/parse-json-in-batches';\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nexport type GeoJSONLoaderOptions = JSONLoaderOptions & {\n  geojson?: {\n    shape?: 'object-row-table';\n  };\n  gis?: {\n    format?: 'geojson' | 'binary';\n  };\n};\n\nconst DEFAULT_GEOJSON_LOADER_OPTIONS = {\n  geojson: {\n    shape: 'object-row-table'\n  },\n  json: {\n    jsonpaths: ['$', '$.features']\n  },\n  gis: {\n    format: 'geojson'\n  }\n};\n\n/**\n * GeoJSON loader\n */\nexport const GeoJSONWorkerLoader: Loader = {\n  name: 'GeoJSON',\n  id: 'geojson',\n  module: 'geojson',\n  version: VERSION,\n  worker: true,\n  extensions: ['geojson'],\n  mimeTypes: ['application/geo+json'],\n  category: 'geometry',\n  text: true,\n  options: DEFAULT_GEOJSON_LOADER_OPTIONS\n};\n\nexport const GeoJSONLoader: LoaderWithParser = {\n  ...GeoJSONWorkerLoader,\n  parse,\n  parseTextSync,\n  parseInBatches\n};\n\nasync function parse(arrayBuffer, options) {\n  return parseTextSync(new TextDecoder().decode(arrayBuffer), options);\n}\n\nfunction parseTextSync(text, options) {\n  // Apps can call the parse method directly, we so apply default options here\n  options = {...DEFAULT_GEOJSON_LOADER_OPTIONS, ...options};\n  options.json = {...DEFAULT_GEOJSON_LOADER_OPTIONS.geojson, ...options.geojson};\n  options.gis = options.gis || {};\n  const json = parseJSONSync(text, options);\n  switch (options.gis.format) {\n    case 'binary':\n      return geojsonToBinary(json);\n    default:\n      return json;\n  }\n}\n\nfunction parseInBatches(asyncIterator, options): AsyncIterable<any> {\n  // Apps can call the parse method directly, we so apply default options here\n  options = {...DEFAULT_GEOJSON_LOADER_OPTIONS, ...options};\n  options.json = {...DEFAULT_GEOJSON_LOADER_OPTIONS.geojson, ...options.geojson};\n\n  const geojsonIterator = parseJSONInBatches(asyncIterator, options);\n\n  switch (options.gis.format) {\n    case 'binary':\n      return makeBinaryGeometryIterator(geojsonIterator);\n    default:\n      return geojsonIterator;\n  }\n}\n\nasync function* makeBinaryGeometryIterator(geojsonIterator) {\n  for await (const batch of geojsonIterator) {\n    batch.data = geojsonToBinary(batch.data);\n    yield batch;\n  }\n}\n"],"mappings":";;;;;;AAEA,SAAQA,eAAe,QAAO,iBAAiB;AAC/C,OAAOC,aAAa,MAAM,kBAAkB;AAC5C,OAAOC,kBAAkB,MAAM,6BAA6B;AAI5D,IAAMC,OAAO,GAAG,cAAkB,KAAK,WAAW,aAAiB,QAAQ;AAW3E,IAAMC,8BAA8B,GAAG;EACrCC,OAAO,EAAE;IACPC,KAAK,EAAE;EACT,CAAC;EACDC,IAAI,EAAE;IACJC,SAAS,EAAE,CAAC,GAAG,EAAE,YAAY;EAC/B,CAAC;EACDC,GAAG,EAAE;IACHC,MAAM,EAAE;EACV;AACF,CAAC;AAKD,OAAO,IAAMC,mBAA2B,GAAG;EACzCC,IAAI,EAAE,SAAS;EACfC,EAAE,EAAE,SAAS;EACbC,MAAM,EAAE,SAAS;EACjBC,OAAO,EAAEZ,OAAO;EAChBa,MAAM,EAAE,IAAI;EACZC,UAAU,EAAE,CAAC,SAAS,CAAC;EACvBC,SAAS,EAAE,CAAC,sBAAsB,CAAC;EACnCC,QAAQ,EAAE,UAAU;EACpBC,IAAI,EAAE,IAAI;EACVC,OAAO,EAAEjB;AACX,CAAC;AAED,OAAO,IAAMkB,aAA+B,GAAAC,aAAA,CAAAA,aAAA,KACvCZ,mBAAmB;EACtBa,KAAK,EAALA,KAAK;EACLC,aAAa,EAAbA,aAAa;EACbC,cAAA,EAAAA;AAAA,EACD;AAAA,SAEcF,KAAKA,CAAAG,GAAA,EAAAC,GAAA;EAAA,OAAAC,MAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,OAAA;EAAAA,MAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAApB,SAAAC,SAAqBC,WAAW,EAAEf,OAAO;IAAA,OAAAY,mBAAA,GAAAI,IAAA,UAAAC,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAAC,IAAA,GAAAD,SAAA,CAAAE,IAAA;QAAA;UAAA,OAAAF,SAAA,CAAAG,MAAA,WAChCjB,aAAa,CAAC,IAAIkB,WAAW,EAAE,CAACC,MAAM,CAACR,WAAW,CAAC,EAAEf,OAAO,CAAC;QAAA;QAAA;UAAA,OAAAkB,SAAA,CAAAM,IAAA;MAAA;IAAA,GAAAV,QAAA;EAAA,CACtE;EAAA,OAAAN,MAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAEA,SAASN,aAAaA,CAACL,IAAI,EAAEC,OAAO,EAAE;EAEpCA,OAAO,GAAAE,aAAA,CAAAA,aAAA,KAAOnB,8BAA8B,GAAKiB,OAAA,CAAQ;EACzDA,OAAO,CAACd,IAAI,GAAAgB,aAAA,CAAAA,aAAA,KAAOnB,8BAA8B,CAACC,OAAO,GAAKgB,OAAO,CAAChB,OAAA,CAAQ;EAC9EgB,OAAO,CAACZ,GAAG,GAAGY,OAAO,CAACZ,GAAG,IAAI,CAAC,CAAC;EAC/B,IAAMF,IAAI,GAAGN,aAAa,CAACmB,IAAI,EAAEC,OAAO,CAAC;EACzC,QAAQA,OAAO,CAACZ,GAAG,CAACC,MAAM;IACxB,KAAK,QAAQ;MACX,OAAOV,eAAe,CAACO,IAAI,CAAC;IAC9B;MACE,OAAOA,IAAI;EAAA;AAEjB;AAEA,SAASmB,cAAcA,CAACoB,aAAa,EAAEzB,OAAO,EAAsB;EAElEA,OAAO,GAAAE,aAAA,CAAAA,aAAA,KAAOnB,8BAA8B,GAAKiB,OAAA,CAAQ;EACzDA,OAAO,CAACd,IAAI,GAAAgB,aAAA,CAAAA,aAAA,KAAOnB,8BAA8B,CAACC,OAAO,GAAKgB,OAAO,CAAChB,OAAA,CAAQ;EAE9E,IAAM0C,eAAe,GAAG7C,kBAAkB,CAAC4C,aAAa,EAAEzB,OAAO,CAAC;EAElE,QAAQA,OAAO,CAACZ,GAAG,CAACC,MAAM;IACxB,KAAK,QAAQ;MACX,OAAOsC,0BAA0B,CAACD,eAAe,CAAC;IACpD;MACE,OAAOA,eAAe;EAAA;AAE5B;AAAA,SAEgBC,0BAA0BA,CAAAC,EAAA;EAAA,OAAAC,2BAAA,CAAApB,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAmB,4BAAA;EAAAA,2BAAA,GAAAC,mBAAA,eAAAlB,mBAAA,GAAAC,IAAA,CAA1C,SAAAkB,QAA2CL,eAAe;IAAA,IAAAM,yBAAA,EAAAC,iBAAA,EAAAC,cAAA,EAAAC,SAAA,EAAAC,KAAA,EAAAC,KAAA;IAAA,OAAAzB,mBAAA,GAAAI,IAAA,UAAAsB,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAApB,IAAA,GAAAoB,QAAA,CAAAnB,IAAA;QAAA;UAAAY,yBAAA;UAAAC,iBAAA;UAAAM,QAAA,CAAApB,IAAA;UAAAgB,SAAA,GAAAK,cAAA,CAC9Bd,eAAe;QAAA;UAAAa,QAAA,CAAAnB,IAAA;UAAA,OAAAqB,oBAAA,CAAAN,SAAA,CAAAf,IAAA;QAAA;UAAA,MAAAY,yBAAA,KAAAI,KAAA,GAAAG,QAAA,CAAAG,IAAA,EAAAC,IAAA;YAAAJ,QAAA,CAAAnB,IAAA;YAAA;UAAA;UAAxBiB,KAAK,GAAAD,KAAA,CAAAQ,KAAA;UACpBP,KAAK,CAACQ,IAAI,GAAGlE,eAAe,CAAC0D,KAAK,CAACQ,IAAI,CAAC;UAAAN,QAAA,CAAAnB,IAAA;UACxC,OAAMiB,KAAK;QAAA;UAAAL,yBAAA;UAAAO,QAAA,CAAAnB,IAAA;UAAA;QAAA;UAAAmB,QAAA,CAAAnB,IAAA;UAAA;QAAA;UAAAmB,QAAA,CAAApB,IAAA;UAAAoB,QAAA,CAAAO,EAAA,GAAAP,QAAA;UAAAN,iBAAA;UAAAC,cAAA,GAAAK,QAAA,CAAAO,EAAA;QAAA;UAAAP,QAAA,CAAApB,IAAA;UAAAoB,QAAA,CAAApB,IAAA;UAAA,MAAAa,yBAAA,IAAAG,SAAA,CAAAY,MAAA;YAAAR,QAAA,CAAAnB,IAAA;YAAA;UAAA;UAAAmB,QAAA,CAAAnB,IAAA;UAAA,OAAAqB,oBAAA,CAAAN,SAAA,CAAAY,MAAA;QAAA;UAAAR,QAAA,CAAApB,IAAA;UAAA,KAAAc,iBAAA;YAAAM,QAAA,CAAAnB,IAAA;YAAA;UAAA;UAAA,MAAAc,cAAA;QAAA;UAAA,OAAAK,QAAA,CAAAS,MAAA;QAAA;UAAA,OAAAT,QAAA,CAAAS,MAAA;QAAA;QAAA;UAAA,OAAAT,QAAA,CAAAf,IAAA;MAAA;IAAA,GAAAO,OAAA;EAAA,CAEf;EAAA,OAAAF,2BAAA,CAAApB,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}